# Stub file for ghpythonlib.components

from typing import Any, List, Union, Optional, Tuple
import Rhino.Geometry
import Rhino.DocObjects
import System.Drawing

def Addition(a: Union[float, int], b: Union[float, int]) -> Union[float, int]: ...
def AlignFaces(planea: Rhino.Geometry.Plane, planeb: Rhino.Geometry.Plane, facea: Any, faceb: Any) -> Any: ...
def AlignPlanes(master: Rhino.Geometry.Plane) -> Rhino.Geometry.Plane: ...
def AlignedDimension(aligned_dimension: Any, plane: Rhino.Geometry.Plane, point_a: Rhino.Geometry.Point3d, point_b: Rhino.Geometry.Point3d, offset: float, style: Any) -> Any: ...
def Anchor(point: Rhino.Geometry.Point3d, target: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d: ...
def AnchorXYZ(point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d: ...
def Angle(linea: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], lineb: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], restangle: float) -> float: ...
def AngleDimensionArc(angle_dimension: Any, arc: Rhino.Geometry.Arc, offset: float, style: Any) -> Any: ...
def AngleDimensionLines(angle_dimension: Any, plane: Rhino.Geometry.Plane, line_a: Rhino.Geometry.Line, line_b: Rhino.Geometry.Line, dimension_location: Rhino.Geometry.Point3d, style: Any) -> Any: ...
def AngleDimensionPoints(angle_dimension: Any, center: Rhino.Geometry.Point3d, point_a: Rhino.Geometry.Point3d, point_b: Rhino.Geometry.Point3d, dimension_location: Rhino.Geometry.Point3d, style: Any) -> Any: ...
def AngleSnap(linea: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], lineb: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], factor: float) -> Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d]: ...
def AngularDimensionsMesh(minimum_angle: float, maximum_angle: float) -> Rhino.Geometry.Mesh: ...
def AnnotationArrowSettings(arrow_settings: Any, arrow_1: Any, arrow_2: Any, arrow_size: float, fit_arrow: bool, dimension_inline: bool, leader_arrow: Any, leader_arrow_size: float) -> Any: ...
def AnnotationDimensionSettings(dimension_settings: Any, view_oriented: bool, text_location: Any, text_rotation: Any, radial_view_oriented: bool, radial_text_location: Any, radial_text_rotation: Any, dimension_line_extension: float, extension_line_extension: float, extension_line_offset: float, fixed_extension: bool, fixed_extension_length: float, suppress_extension_1: bool, suppress_extension_2: bool, baseline_spacing: float, centermark_size: float, centermark_type: Any, decimal_separator: str) -> Any: ...
def AnnotationDot(annotation_dot: Any, location: Rhino.Geometry.Point3d, primary_text: str, text_height: float) -> Any: ...
def AnnotationLeaderSettings(leader_settings: Any, leader_curve_type: Any, has_landing: bool, landing_length: float, view_oriented: bool, horizontal_text_alignment: Any, vertical_text_alignment: Any) -> Any: ...
def AnnotationStyle(annotation_style: Any, name: str, model_scale: float, text_settings: Any, dimension_settings: Any, arrow_settings: Any, units_settings: Any, leader_settings: Any, tolerance_settings: Any) -> Any: ...
def AnnotationStyleOverrides(style: Any, model_scale: float, text_settings: Any, dimension_settings: Any, arrow_settings: Any, units_settings: Any, leader_settings: Any, tolerance_settings: Any) -> Any: ...
def AnnotationTextOverrides(text: str, view_oriented: bool) -> Any: ...
def AnnotationTextSettings(text_settings: Any, font: str, text_height: float, text_gap: float, mask: bool) -> Any: ...
def AnnotationToleranceSettings(tolerance_settings: Any, tolerance_format: Any) -> Any: ...
def AnnotationUnitsSettings(units_settings: Any, length_units_format: Any, length_factor: float, linear_resolution: Any, roundoff: float, prefix: str, suffix: str, zero_suppression: Any, fraction_format: Any, fraction_height_scale: float, angular_units_format: Any, angle_resolution: Any, angle_roundoff: float, angle_zero_suppression: Any) -> Any: ...
def Beam(startframe: Rhino.Geometry.Plane, endframe: Rhino.Geometry.Plane, startnode: Any, endnode: Any) -> Any: ...
def Bomb(location: Rhino.Geometry.Point3d, points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def BouncySolver(goalobjects: List[Any]) -> Any: ...
def BoxArray(geometry: Any) -> List[Rhino.Geometry.Box]: ...
def BoxMapping(geometry: Any) -> Rhino.Geometry.Transform: ...
def CameraObscura(geometry: Any) -> Any: ...
def Centermark(centermark: Any, plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve, parameter: float, style: Any) -> Any: ...
def CharSequence(format: str) -> List[str]: ...
def ClampAngle(linea: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], lineb: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d]) -> Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d]: ...
def ClampLength(line: Rhino.Geometry.Line, lowerlimit: float, upperlimit: float) -> Rhino.Geometry.Line: ...
def CloudDisplay(points: List[Rhino.Geometry.Point3d], colours: List[Any], size: float) -> Any: ...
def CoCircular(points: List[Rhino.Geometry.Point3d]) -> bool: ...
def CoLinear(points: List[Rhino.Geometry.Point3d]) -> bool: ...
def CoPlanar(points: List[Rhino.Geometry.Point3d]) -> bool: ...
def CoSpherical(points: List[Rhino.Geometry.Point3d]) -> bool: ...
def Coincident(point0: Rhino.Geometry.Point3d, point1: Rhino.Geometry.Point3d) -> bool: ...
def Collider(objects: List[Any], radii: List[float], ignorea: List[bool], ignoreb: List[bool]) -> Any: ...
def ColourGradient(gradient: Any, start_point: Rhino.Geometry.Point3d, end_point: Rhino.Geometry.Point3d, repeat: float, type: Any, colours: List[Any]) -> Any: ...
def CombineData(input_0: Any, input_1: Any) -> List[Any]: ...
def Concatenate(fragment_a: str, fragment_b: str) -> str: ...
def Concentric(planea: Rhino.Geometry.Plane, planeb: Rhino.Geometry.Plane) -> bool: ...
def ConstantTension(line: Rhino.Geometry.Line) -> Any: ...
def ConstructMatrix(values: List[float]) -> Rhino.Geometry.Transform: ...
def ConstructMesh(colours: List[Any]) -> Rhino.Geometry.Mesh: ...
def ContainsTextFilter(case: bool, culture: str) -> Any: ...
def ContentCache(content: Any) -> Any: ...
def ContentIdentity(path: str) -> Any: ...
def ContentInformation(parent: Any) -> str: ...
def Contourex(offsets: List[float], distances: List[float]) -> List[Rhino.Geometry.Curve]: ...
def ConvexHull(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Polyline: ...
def CurveArray(geometry: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Curve]: ...
def CurveCollide(frames: List[Rhino.Geometry.Plane], passivecurves: List[Rhino.Geometry.Curve]) -> Any: ...
def CurveDomain(domain: Rhino.Geometry.Interval) -> Rhino.Geometry.Interval: ...
def CurvePointCollide(points: List[Rhino.Geometry.Point3d], curve: Rhino.Geometry.Curve) -> Any: ...
def CurveSide(plane: Rhino.Geometry.Plane) -> int: ...
def CurveToPolyline(minedge: float, maxedge: float) -> Rhino.Geometry.Polyline: ...
def CustomCurvePreview(linetype: Any) -> Any: ...
def DataDam(data_a: Any) -> Any: ...
def DataOutput(data_input: Any) -> Any: ...
def DelaunayEdges(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Line]: ...
def DelaunayMesh(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Mesh: ...
def Direction(line: Rhino.Geometry.Line, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d: ...
def DirectionalLight(directional_light: Any, location: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d) -> Any: ...
def DisplayAttributes(display: Any, display_colour: Any, display_mode: str) -> Any: ...
def DisplayColour(display_colour: Any, source: Any, colour: Any) -> Any: ...
def DraftingAttributes(drafting: Any, linetype: Any, linetype_scale: float) -> Any: ...
def DraftingScale(annotation_model_scaling: float, annotation_layout_scaling: float, hatch_scaling: bool, hatch_scale: float, linetype_scale: float) -> Any: ...
def DuplicateContent(name: str) -> Any: ...
def DynamicWeight1d(line: Rhino.Geometry.Line) -> Any: ...
def EdgeSurface(curve_c: Rhino.Geometry.Curve, curve_d: Rhino.Geometry.Curve) -> Rhino.Geometry.Surface: ...
def EdgesfromPoints(tolerance: float) -> List[Rhino.Geometry.Line]: ...
def EqualAngle(linea: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d], lineb: Union[Rhino.Geometry.Line, Rhino.Geometry.Vector3d]) -> bool: ...
def EqualLength(line: List[Rhino.Geometry.Line]) -> bool: ...
def Evaluate(x: float, y: float) -> float: ...
def ExplodeTree(data: Any) -> List[Any]: ...
def Exposure(obstructions: List[Any], energy: float) -> float: ...
def Expression(x: float, y: float) -> float: ...
def FacetDome(box: Rhino.Geometry.Box, radius: float) -> Rhino.Geometry.Mesh: ...
def FilletEdge(edges: List[Any], radii: List[float]) -> Any: ...
def FitCurve(degree: int, tolerance: float) -> Rhino.Geometry.Curve: ...
def Flip(guide: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d: ...
def FlipCurve(guide: Rhino.Geometry.Curve) -> Rhino.Geometry.Curve: ...
def Floor(strength: float) -> Any: ...
def FloorFriction(points: List[Rhino.Geometry.Point3d]) -> Any: ...
def Format(data_0: Any, data_1: Any) -> str: ...
def G2(points: List[Rhino.Geometry.Point3d]) -> Any: ...
def GateAnd(a: bool, b: bool) -> bool: ...
def GateOr(a: bool, b: bool) -> bool: ...
def GradientColourStop(color_stop: Any, colour: Any, position: float) -> Any: ...
def HideModelLayer(model: Any, new_detail: bool) -> Any: ...
def Hinge(foldstart: Rhino.Geometry.Point3d, foldend: Rhino.Geometry.Point3d, tip1: Rhino.Geometry.Point3d, tip2: Rhino.Geometry.Point3d, restangle: float) -> Any: ...
def ImageCircles(curves: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Circle]: ...
def ImportCoordinates(comment: str) -> List[Rhino.Geometry.Point3d]: ...
def ImportImage(rectangle: Rhino.Geometry.Rectangle3d, x_samples: int, y_samples: int) -> Any: ...
def ImportModelBlockDefinition(name: str) -> Any: ...
def InsertItems(item: Any) -> List[Any]: ...
def IronPython2Script(x: Any, y: Any) -> Any: ...
def Kaleidoscope(geometry: Any) -> List[Any]: ...
def Leader(leader: Any, plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve, text: str, style: Any) -> Any: ...
def Legend(colour: List[Any], tags: List[str], rectangle: Rhino.Geometry.Rectangle3d) -> Any: ...
def LengthLine(line: Rhino.Geometry.Line, length: float) -> Rhino.Geometry.Line: ...
def LengthRatio(linea: Rhino.Geometry.Line, lineb: Rhino.Geometry.Line, ratio: float) -> float: ...
def LengthSnap(line: Rhino.Geometry.Line, factor: float) -> Rhino.Geometry.Line: ...
def LightAttributes(enabled: bool, colour: Any, intensity: float, shadow_intensity: float, falloff: Any) -> Any: ...
def LineCharge(bounds: Rhino.Geometry.BoundingBox) -> Any: ...
def LinearArray(geometry: Any) -> List[Any]: ...
def LinearDimension(linear_dimension: Any, base_line: Rhino.Geometry.Line, point_a: Rhino.Geometry.Point3d, point_b: Rhino.Geometry.Point3d, style: Any) -> Any: ...
def LinearLight(linear_light: Any, line: Rhino.Geometry.Line) -> Any: ...
def Load(point: Rhino.Geometry.Point3d) -> Any: ...
def MagnetSnap(points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def Make2D(clipping_planes: List[Rhino.Geometry.Plane]) -> List[Rhino.Geometry.Curve]: ...
def MatchText(pattern: str, regex: bool) -> bool: ...
def MatchTextFilter(case: bool, culture: str) -> Any: ...
def Merge(data_1: Any, data_2: Any) -> List[Any]: ...
def MetaBall(accuracy: float) -> Rhino.Geometry.Mesh: ...
def MetaBallt(accuracy: float) -> Rhino.Geometry.Mesh: ...
def MetaBalltCustom(accuracy: float) -> Rhino.Geometry.Mesh: ...
def Mirror(geometry: Any) -> Any: ...
def ModelBasicEnvironment(environment: Any, name: str, background_colour: Any, projection: Any) -> Any: ...
def ModelBlockDefinition(block_definition: Any, objects: List[Any], name: str) -> Any: ...
def ModelBlockInstance(block_instance: Any, transform: Rhino.Geometry.Transform, block_definition: Any) -> Any: ...
def ModelEarthLocation(location: Any, name: str, anchor: Rhino.Geometry.Point3d, latitude: float, longitude: float, elevation: float) -> Any: ...
def ModelFont(font: Any, font_family: str, font_weight: Any, font_style: Any) -> Any: ...
def ModelHatch(hatch: Any, boundary: List[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane, hatch_pattern: Any, base_point: Rhino.Geometry.Point3d, rotation: float, scale: float, show_boundary: bool, background: bool, fill_style: Any) -> Any: ...
def ModelHatchLine(hatch_line: Any, start: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, shift: float, offset: float, segments: List[float]) -> Any: ...
def ModelHatchPattern(hatch_pattern: Any, name: str, hatch_lines: List[Any]) -> Any: ...
def ModelLayer(layer: Any, name: str, hidden: bool, locked: bool, display_colour: Any, material: Any, linetype: Any) -> Any: ...
def ModelLinetype(linetype: Any, name: str, segments: List[float], cap_style: Any, join_style: Any, width: float, width_units: Any) -> Any: ...
def ModelMaterial(material: Any, name: str, shader: Any) -> Any: ...
def ModelObject(object: Any, geometry: Any, name: str, layer: Any, visibility: Any, display: Any, drafting: Any, render: Any) -> Any: ...
def ModelView(view: Any, title: str, perspective: bool, location: Rhino.Geometry.Point3d, target: Rhino.Geometry.Point3d, x_extents: float, y_extents: float) -> Any: ...
def ModelViewport(viewport: Any, name: str, view: Any, display_mode: str) -> Any: ...
def ModifiedArc(radius: float, angle: float) -> Rhino.Geometry.Arc: ...
def MorphToMesh(geometry: Any, mesh: Rhino.Geometry.Mesh) -> Any: ...
def Move(geometry: Any) -> Any: ...
def MultiPipe(sizepoints: List[Rhino.Geometry.Point3d], caps: List[bool]) -> List[Rhino.Geometry.Brep]: ...
def Multiplication(a: Union[float, int], b: Union[float, int]) -> Union[float, int]: ...
def NamedGroup(group: Any, geometry: List[Any], name: str) -> Any: ...
def NoFoldThrough(foldstart: Rhino.Geometry.Point3d, foldend: Rhino.Geometry.Point3d, tip1: Rhino.Geometry.Point3d, tip2: Rhino.Geometry.Point3d) -> Any: ...
def NullItem(item: Any) -> Optional[Any]: ...
def NurbsCurvePWK(weights: List[float]) -> Rhino.Geometry.NurbsCurve: ...
def ObjectLinetype(linetype: Any, source: Any, model_linetype: Any) -> Any: ...
def OffsetCurve(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Curve: ...
def OffsetCurveLoose(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Curve: ...
def OnCurve(points: List[Rhino.Geometry.Point3d], curve: Rhino.Geometry.Curve) -> List[Rhino.Geometry.Point3d]: ...
def OnMesh(points: List[Rhino.Geometry.Point3d], mesh: Rhino.Geometry.Mesh) -> List[Rhino.Geometry.Point3d]: ...
def OnPlane(points: List[Rhino.Geometry.Point3d], plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Point3d]: ...
def OrdinateDimension(ordinate_dimension: Any, plane: Rhino.Geometry.Plane, direction: Rhino.Geometry.Vector3d) -> Any: ...
def Orient(geometry: Any) -> Any: ...
def OrientDirection(geometry: Any) -> Any: ...
def Patch(curves: List[Rhino.Geometry.Curve], points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Surface: ...
def PicknChoose(stream_0: Any, stream_1: Any) -> Any: ...
def PlasticAnchor(point: Rhino.Geometry.Point3d) -> Any: ...
def PlasticHinge(foldstart: Rhino.Geometry.Point3d, foldend: Rhino.Geometry.Point3d, tip1: Rhino.Geometry.Point3d, tip2: Rhino.Geometry.Point3d, restangle: float) -> Any: ...
def PlasticLength(line: Rhino.Geometry.Line) -> Any: ...
def PointCharge(bounds: Rhino.Geometry.BoundingBox) -> Any: ...
def PointCloudAttributes(cloud: List[Rhino.Geometry.Point3d], locations: List[Rhino.Geometry.Point3d], normals: List[Rhino.Geometry.Vector3d], colours: List[Any], extra: List[float], hidden: List[bool]) -> Any: ...
def PointCloudContour(start: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, distance: float, limit: int) -> List[Rhino.Geometry.Curve]: ...
def PointLight(point_light: Any, location: Rhino.Geometry.Point3d) -> Any: ...
def PointList(points: List[Rhino.Geometry.Point3d], size: float) -> Any: ...
def PointOrder(points: List[Rhino.Geometry.Point3d]) -> List[int]: ...
def PolarArray(geometry: Any) -> List[Any]: ...
def PolyArc(tangent: bool) -> Rhino.Geometry.PolylineCurve: ...
def PolygonArea(polyline: Rhino.Geometry.Polyline, area: float) -> Rhino.Geometry.Polyline: ...
def Populate2D(points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def Populate3D(points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def PopulateGeometry(points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def PrintColour(print_colour: Any, source: Any, colour: Any) -> Any: ...
def PrintWidth(print_width: Any, source: Any, width: float) -> Any: ...
def Project(geometry: Any) -> Any: ...
def ProjectAlong(geometry: Any) -> Any: ...
def Proximity2D(min_radius: float, max_radius: float) -> Any: ...
def Proximity3D(min_radius: float, max_radius: float) -> Any: ...
def Python3Script(x: Any, y: Any) -> Any: ...
def QuadRemesh(guides: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Mesh: ...
def QuadRemeshSettings(target_edge_length: float) -> Any: ...
def QuadTree(plane: Rhino.Geometry.Plane) -> Any: ...
def QueryAnnotationStyles(name: str) -> List[Any]: ...
def QueryDirectory(max_depth: int, name: str) -> List[str]: ...
def QueryInstalledFonts(font_family: str, font_weight: Any, font_style: Any, font_stretch: Any, symbol: bool, single_stroke: bool, engraving: bool) -> List[str]: ...
def QueryLayouts(name: str) -> List[Any]: ...
def QueryModelBlockDefinitions(name: str) -> List[Any]: ...
def QueryModelEnvironments(name: str) -> List[Any]: ...
def QueryModelHatchPatterns(name: str) -> List[Any]: ...
def QueryModelLayers(name: str) -> List[Any]: ...
def QueryModelLights(name: str, layer: str) -> List[Any]: ...
def QueryModelLinetypes(name: str) -> List[Any]: ...
def QueryModelMaterials(name: str) -> List[Any]: ...
def QueryModelObjects(name: str, layer: str, group: str) -> List[Any]: ...
def QueryNamedViews(name: str) -> List[Any]: ...
def QueryViewports(name: str) -> List[Any]: ...
def RadialDimension(radial_dimension: Any, plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve, curve_point: Rhino.Geometry.Point3d, dimension_location: Rhino.Geometry.Point3d, dimension_type: Any, style: Any) -> Any: ...
def RebuildCurve(degree: int) -> Rhino.Geometry.Curve: ...
def RectangleMapping(geometry: Any) -> Rhino.Geometry.Transform: ...
def RectangularArray(geometry: Any) -> List[Any]: ...
def RectangularLight(rectangular_light: Any, plane: Rhino.Geometry.Plane, length: float, width: float) -> Any: ...
def RegionDifference(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def RegionIntersection(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def RegionUnion(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def RemeshByColour(fixcurves: List[Rhino.Geometry.Curve], fixvertices: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Mesh: ...
def RenderAttributes(render: Any, object_material: Any, casts_shadows: bool, receives_shadows: bool) -> Any: ...
def RenderMaterial(object_material: Any, source: Any, material: Any) -> Any: ...
def ReplaceItems(item: Any, indices: List[int]) -> List[Any]: ...
def ReplaceMembers(replace: Any) -> Any: ...
def ReplaceText(find: str, replace: str) -> str: ...
def RightTrigonometry(alpha: float, beta: float, p_length: float, q_length: float, r_length: float) -> Tuple[float, float, float]: ...
def RigidBody(part: Any, plane: Rhino.Geometry.Plane, points: List[Rhino.Geometry.Point3d]) -> Any: ...
def RigidBodyCollide(mesha: Rhino.Geometry.Mesh, meshb: Rhino.Geometry.Mesh, planea: Rhino.Geometry.Plane, planeb: Rhino.Geometry.Plane) -> Any: ...
def RigidPointSet(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Point3d]: ...
def Rotate(geometry: Any) -> Any: ...
def Rotate3D(geometry: Any) -> Any: ...
def RotateAxis(geometry: Any) -> Any: ...
def RotateDirection(geometry: Any) -> Any: ...
def Scale(geometry: Any) -> Any: ...
def ScaleNU(geometry: Any) -> Any: ...
def Script(x: Any, y: Any) -> Any: ...
def SetIntersection(set_a: List[Any], set_b: List[Any]) -> List[Any]: ...
def SetUnion(set_a: List[Any], set_b: List[Any]) -> List[Any]: ...
def Shear(geometry: Any) -> Any: ...
def ShearAngle(geometry: Any) -> Any: ...
def Show(g: Any) -> Any: ...
def ShrinkWrap(edge_length: float) -> Rhino.Geometry.Mesh: ...
def SimplifyCurve(tolerance: float, angle_tolerance: float) -> Rhino.Geometry.Curve: ...
def Skylight(skylight: Any, enabled: bool, custom_environment: bool, environment: Any) -> Any: ...
def SmoothMesh(limit: float) -> Rhino.Geometry.Mesh: ...
def SmoothNumbers(numbers: List[float]) -> List[float]: ...
def SoftBodyCollide(meshes: List[Rhino.Geometry.Mesh]) -> Any: ...
def SoftHardSolver(softgoals: List[Any], hardgoals: List[Any]) -> Any: ...
def SolidPlaneCollide(solid: Rhino.Geometry.Brep, solidplane: Rhino.Geometry.Plane, collisionplane: Rhino.Geometry.Plane) -> Any: ...
def SolidPointCollide(points: List[Rhino.Geometry.Point3d], solid: Rhino.Geometry.Brep) -> Any: ...
def Solver(goalobjects: List[Any]) -> Any: ...
def SortList(values_a: List[Any]) -> Tuple[List[Any], List[int]]: ...
def SortText(values: List[str]) -> Tuple[List[str], List[int]]: ...
def SphereCollide(points: List[Rhino.Geometry.Point3d]) -> Any: ...
def SpinForce(bounds: Rhino.Geometry.BoundingBox) -> Any: ...
def SplitBrep(cutter: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Brep]: ...
def SplitBrepMultiple(cutters: List[Rhino.Geometry.Brep]) -> List[Rhino.Geometry.Brep]: ...
def Sporph(base_uv: List[Rhino.Geometry.Point3d], target_uv: List[Rhino.Geometry.Point3d]) -> Any: ...
def Spotlight(spotlight: Any, location: Rhino.Geometry.Point3d, target: Rhino.Geometry.Point3d, spotlight_hardness: float, spotlight_angle: float) -> Any: ...
def StepSolver(goalobjects: List[Any]) -> Any: ...
def StreamFilter(stream_0: Any, stream_1: Any) -> Any: ...
def Subtraction(a: Union[float, int], b: Union[float, int]) -> Union[float, int]: ...
def Sun(sun: Any, enabled: bool, intensity: float, date_time: Any, latitude: float, longitude: float) -> Any: ...
def SunManualControl(sun: Any, enabled: bool, intensity: float, azimuth: float, altitude: float) -> Any: ...
def SunPreview(location: Rhino.Geometry.Point3d, distance: float, scale: float) -> Any: ...
def Support(frame: Rhino.Geometry.Plane, target: Rhino.Geometry.Point3d) -> Any: ...
def SurfaceSplit(curves: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Surface]: ...
def TangentIncircles(mesh: Rhino.Geometry.Mesh, boundary: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Circle]: ...
def TextEntity(text_entity: Any, plane: Rhino.Geometry.Plane, text: str, style: Any) -> Any: ...
def TextFragment(count: int) -> List[str]: ...
def TextJoin(join: str) -> str: ...
def TextOnSurface(base_surface: Rhino.Geometry.Surface) -> Any: ...
def TextTag(colour: Any) -> str: ...
def TextTag3D(text: str, colour: Any) -> Any: ...
def TriRemesh(target: float, sharp: bool, features: List[Rhino.Geometry.Curve], length: float) -> Rhino.Geometry.Mesh: ...
def TriangleMapping(geometry: Any) -> Rhino.Geometry.Transform: ...
def TriangleTrigonometry(alpha: float, beta: float, gamma: float, a_length: float, b_length: float, c_length: float) -> Tuple[float, float, float, float, float, float]: ...
def TrimwithRegion(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def TrimwithRegions(plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def UnitSystem(name: str, factor: float) -> Any: ...
def UserText(keys: List[str], values: List[str]) -> Any: ...
def VBScript(x: Any, y: Any) -> Any: ...
def VectorDisplay(anchor: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d) -> Any: ...
def VectorDisplayEx(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d, colour: Any, width: float) -> Any: ...
def VectorForce(bounds: Rhino.Geometry.BoundingBox) -> Any: ...
def VisibilityAttributes(visibility: Any, hidden: bool, locked: bool) -> Any: ...
def Voronoi(radius: float, boundary: List[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def Voronoi3D(box: Rhino.Geometry.Box) -> List[Rhino.Geometry.Polyline]: ...
def VoronoiCell(box: Rhino.Geometry.Box) -> List[Rhino.Geometry.Polyline]: ...
def VoronoiGroups(generation_1: List[Rhino.Geometry.Point3d], generation_2: List[Rhino.Geometry.Point3d]) -> Tuple[List[Any], List[Any]]: ...
def ZombieSolver(goalobjects: List[Any]) -> Any: ...
def ZoomExtents(border: float) -> Any: ...
def removeDuplicateLines(tolerance: float) -> List[Rhino.Geometry.Line]: ...
def removeDuplicatePts(tolerance: float) -> List[Rhino.Geometry.Point3d]: ...
def x4PointSurface(corner_d: Rhino.Geometry.Point3d) -> Rhino.Geometry.Surface: ...

# Additional commonly used functions from Grasshopper components
def Absolute(x: Union[float, int]) -> Union[float, int]: ...
def AdjustPlane(plane: Rhino.Geometry.Plane, origin: Rhino.Geometry.Point3d) -> Rhino.Geometry.Plane: ...
def AlignVertices(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def Arc(plane: Rhino.Geometry.Plane, radius: float, angle: float) -> Rhino.Geometry.Arc: ...
def Arc3Pt(start: Rhino.Geometry.Point3d, middle: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d) -> Rhino.Geometry.Arc: ...
def ArcCosine(x: float) -> float: ...
def ArcSED(start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Arc: ...
def ArcSine(x: float) -> float: ...
def ArcTangent(x: float) -> float: ...
def Area(geometry: Any) -> float: ...
def AreaMoments(curves: List[Rhino.Geometry.Curve]) -> Tuple[float, Rhino.Geometry.Point3d, Rhino.Geometry.Point3d]: ...
def Average(values: List[Union[float, int]]) -> Union[float, int]: ...
def Barycentric(points: List[Rhino.Geometry.Point3d], weights: List[float]) -> Rhino.Geometry.Point3d: ...
def BezierSpan(degree: int, points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.BezierCurve: ...
def BiArc(start: Rhino.Geometry.Point3d, tangent1: Rhino.Geometry.Vector3d, end: Rhino.Geometry.Point3d, tangent2: Rhino.Geometry.Vector3d) -> List[Rhino.Geometry.Arc]: ...
def BlendCurve(curve1: Rhino.Geometry.Curve, curve2: Rhino.Geometry.Curve, continuity: int) -> Rhino.Geometry.Curve: ...
def BoundarySurfaces(curves: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Surface]: ...
def BoundingBox(geometry: Any) -> Rhino.Geometry.BoundingBox: ...
def Box2Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> Rhino.Geometry.Box: ...
def BoxCorners(box: Rhino.Geometry.Box) -> List[Rhino.Geometry.Point3d]: ...
def BrepClosestPoint(brep: Rhino.Geometry.Brep, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d: ...
def BrepEdges(brep: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Curve]: ...
def BrepJoin(breps: List[Rhino.Geometry.Brep]) -> List[Rhino.Geometry.Brep]: ...
def BrepXBrep(brep1: Rhino.Geometry.Brep, brep2: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Curve]: ...
def BrepXCurve(brep: Rhino.Geometry.Brep, curve: Rhino.Geometry.Curve) -> List[Rhino.Geometry.Point3d]: ...
def BrepXLine(brep: Rhino.Geometry.Brep, line: Rhino.Geometry.Line) -> List[Rhino.Geometry.Point3d]: ...
def BrepXPlane(brep: Rhino.Geometry.Brep, plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def Circle(plane: Rhino.Geometry.Plane, radius: float) -> Rhino.Geometry.Circle: ...
def Circle3Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, point3: Rhino.Geometry.Point3d) -> Rhino.Geometry.Circle: ...
def CircleCNR(center: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, radius: float) -> Rhino.Geometry.Circle: ...
def CircleFit(points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Circle: ...
def ClosestPoint(point: Rhino.Geometry.Point3d, cloud: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Point3d: ...
def ClosestPoints(cloud1: List[Rhino.Geometry.Point3d], cloud2: List[Rhino.Geometry.Point3d]) -> Tuple[List[Rhino.Geometry.Point3d], List[Rhino.Geometry.Point3d]]: ...
def Cone(plane: Rhino.Geometry.Plane, height: float, radius: float) -> Rhino.Geometry.Cone: ...
def ConstructDomain(start: float, end: float) -> Rhino.Geometry.Interval: ...
def ConstructPlane(origin: Rhino.Geometry.Point3d, x_axis: Rhino.Geometry.Vector3d, y_axis: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Plane: ...
def ConstructPoint(x: float, y: float, z: float) -> Rhino.Geometry.Point3d: ...
def Contour(geometry: Any, plane: Rhino.Geometry.Plane, distance: float) -> List[Rhino.Geometry.Curve]: ...
def ControlPoints(curve: Rhino.Geometry.Curve) -> List[Rhino.Geometry.Point3d]: ...
def CopyTrim(surface: Rhino.Geometry.Surface, curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Brep: ...
def Cosine(angle: float) -> float: ...
def CrossProduct(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d: ...
def Cube(plane: Rhino.Geometry.Plane, size: float) -> Rhino.Geometry.Box: ...
def CubeRoot(x: float) -> float: ...
def CullDuplicates(items: List[Any], tolerance: float) -> List[Any]: ...
def Curvature(curve: Rhino.Geometry.Curve, parameter: float) -> float: ...
def CurveClosestPoint(curve: Rhino.Geometry.Curve, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d: ...
def CurveFrame(curve: Rhino.Geometry.Curve, parameter: float) -> Rhino.Geometry.Plane: ...
def CurveFrames(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Plane]: ...
def CurveMiddle(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Point3d: ...
def CurveXCurve(curve1: Rhino.Geometry.Curve, curve2: Rhino.Geometry.Curve) -> List[Rhino.Geometry.Point3d]: ...
def CurveXLine(curve: Rhino.Geometry.Curve, line: Rhino.Geometry.Line) -> List[Rhino.Geometry.Point3d]: ...
def CurveXPlane(curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Point3d]: ...
def CurveXSelf(curve: Rhino.Geometry.Curve) -> List[Rhino.Geometry.Point3d]: ...
def Cylinder(plane: Rhino.Geometry.Plane, radius: float, height: float) -> Rhino.Geometry.Cylinder: ...

# Additional functions continued
def DeconstructArc(arc: Rhino.Geometry.Arc) -> Tuple[Rhino.Geometry.Plane, float, float]: ...
def DeconstructBox(box: Rhino.Geometry.Box) -> Tuple[Rhino.Geometry.Plane, float, float, float]: ...
def DeconstructBrep(brep: Rhino.Geometry.Brep) -> Tuple[List[Rhino.Geometry.Surface], List[Rhino.Geometry.Curve], List[Rhino.Geometry.Point3d]]: ...
def DeconstructDomain(domain: Rhino.Geometry.Interval) -> Tuple[float, float]: ...
def DeconstructMesh(mesh: Rhino.Geometry.Mesh) -> Tuple[List[Rhino.Geometry.Point3d], List[Rhino.Geometry.MeshFace], List[Rhino.Geometry.Vector3d], List[Any]]: ...
def DeconstructPlane(plane: Rhino.Geometry.Plane) -> Tuple[Rhino.Geometry.Point3d, Rhino.Geometry.Vector3d, Rhino.Geometry.Vector3d]: ...
def DeconstructRectangle(rectangle: Rhino.Geometry.Rectangle3d) -> Tuple[Rhino.Geometry.Plane, float, float]: ...
def DeconstructVector(vector: Rhino.Geometry.Vector3d) -> Tuple[float, float, float]: ...
def Degrees(radians: float) -> float: ...
def Derivatives(curve: Rhino.Geometry.Curve, parameter: float, order: int) -> List[Rhino.Geometry.Vector3d]: ...
def Dimensions(geometry: Any) -> Tuple[float, float, float]: ...
def Discontinuity(curve: Rhino.Geometry.Curve, continuity: int) -> List[float]: ...
def Distance(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> float: ...
def DivideCurve(curve: Rhino.Geometry.Curve, count: int) -> List[Rhino.Geometry.Point3d]: ...
def DivideDistance(curve: Rhino.Geometry.Curve, distance: float) -> List[Rhino.Geometry.Point3d]: ...
def DivideLength(curve: Rhino.Geometry.Curve, length: float) -> List[Rhino.Geometry.Point3d]: ...
def DivideSurface(surface: Rhino.Geometry.Surface, u_count: int, v_count: int) -> List[Rhino.Geometry.Point3d]: ...
def Division(a: Union[float, int], b: Union[float, int]) -> Union[float, int]: ...
def DotProduct(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> float: ...
def Ellipse(plane: Rhino.Geometry.Plane, radius1: float, radius2: float) -> Rhino.Geometry.Ellipse: ...
def EndPoints(curve: Rhino.Geometry.Curve) -> Tuple[Rhino.Geometry.Point3d, Rhino.Geometry.Point3d]: ...
def Entwine(branches: List[List[Any]]) -> List[Any]: ...
def Equality(a: Any, b: Any) -> bool: ...
def EvaluateCurve(curve: Rhino.Geometry.Curve, parameter: float) -> Rhino.Geometry.Point3d: ...
def EvaluateLength(curve: Rhino.Geometry.Curve, parameter: float) -> float: ...
def EvaluateSurface(surface: Rhino.Geometry.Surface, u: float, v: float) -> Rhino.Geometry.Point3d: ...
def Explode(brep: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Surface]: ...
def ExtendCurve(curve: Rhino.Geometry.Curve, start: float, end: float) -> Rhino.Geometry.Curve: ...
def Extrude(profile: Rhino.Geometry.Curve, vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Surface: ...
def ExtrudeAlong(profile: Rhino.Geometry.Curve, path: Rhino.Geometry.Curve) -> Rhino.Geometry.Surface: ...
def ExtrudeLinear(curves: List[Rhino.Geometry.Curve], direction: Rhino.Geometry.Vector3d) -> List[Rhino.Geometry.Surface]: ...
def ExtrudePoint(curves: List[Rhino.Geometry.Curve], point: Rhino.Geometry.Point3d) -> List[Rhino.Geometry.Surface]: ...
def FaceBoundaries(brep: Rhino.Geometry.Brep) -> List[List[Rhino.Geometry.Curve]]: ...
def FaceNormals(mesh: Rhino.Geometry.Mesh) -> List[Rhino.Geometry.Vector3d]: ...
def Factorial(n: int) -> int: ...
def Fibonacci(n: int) -> int: ...
def Fillet(curve1: Rhino.Geometry.Curve, curve2: Rhino.Geometry.Curve, radius: float) -> Rhino.Geometry.Curve: ...
def FindDomain(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Interval: ...
def FitLine(points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Line: ...
def FitLoft(curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Surface: ...
def FlattenTree(tree: Any) -> List[Any]: ...
def FlipMatrix(matrix: Rhino.Geometry.Transform) -> Rhino.Geometry.Transform: ...
def FlipMesh(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def FlipPlane(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Plane: ...
def Floor(x: float) -> int: ...
def Flow(geometry: Any, base_curve: Rhino.Geometry.Curve, target_curve: Rhino.Geometry.Curve) -> Any: ...
def GoldenRatio() -> float: ...
def Gradient(field: Any, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Vector3d: ...
def GraftTree(data: Any) -> Any: ...
def Group(objects: List[Any]) -> Any: ...
def Hexagonal(plane: Rhino.Geometry.Plane, size: float, extent_x: int, extent_y: int) -> List[Rhino.Geometry.Point3d]: ...
def HorizontalFrame(curve: Rhino.Geometry.Curve, parameter: float) -> Rhino.Geometry.Plane: ...
def HorizontalFrames(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Plane]: ...
def InCircle(circle: Rhino.Geometry.Circle, point: Rhino.Geometry.Point3d) -> bool: ...
def Includes(list: List[Any], item: Any) -> bool: ...
def IntegerDivision(a: int, b: int) -> int: ...
def Interpolate(value1: float, value2: float, factor: float) -> float: ...
def IsPlanar(points: List[Rhino.Geometry.Point3d], tolerance: float) -> bool: ...
def IsoCurve(surface: Rhino.Geometry.Surface, direction: int, parameter: float) -> Rhino.Geometry.Curve: ...
def Isotrim(surface: Rhino.Geometry.Surface, domain_u: Rhino.Geometry.Interval, domain_v: Rhino.Geometry.Interval) -> Rhino.Geometry.Surface: ...
def ItemIndex(list: List[Any], item: Any) -> int: ...
def Jitter(points: List[Rhino.Geometry.Point3d], amount: float) -> List[Rhino.Geometry.Point3d]: ...
def JoinCurves(curves: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Curve]: ...
def KnotVector(curve: Rhino.Geometry.NurbsCurve) -> List[float]: ...
def LargerThan(a: Union[float, int], b: Union[float, int]) -> bool: ...
def Length(curve: Rhino.Geometry.Curve) -> float: ...
def LengthDomain(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Interval: ...
def LengthParameter(curve: Rhino.Geometry.Curve, length: float) -> float: ...
def Line(start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d) -> Rhino.Geometry.Line: ...
def Line2Plane(line: Rhino.Geometry.Line) -> Rhino.Geometry.Plane: ...
def Line4Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, point3: Rhino.Geometry.Point3d, point4: Rhino.Geometry.Point3d) -> List[Rhino.Geometry.Line]: ...
def LineSDL(start: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, length: float) -> Rhino.Geometry.Line: ...
def LineXLine(line1: Rhino.Geometry.Line, line2: Rhino.Geometry.Line) -> Rhino.Geometry.Point3d: ...
def LineXPlane(line: Rhino.Geometry.Line, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Point3d: ...
def ListItem(list: List[Any], index: int) -> Any: ...
def ListLength(list: List[Any]) -> int: ...
def LogN(x: float, base: float) -> float: ...
def Logarithm(x: float) -> float: ...
def LongestList(lists: List[List[Any]]) -> List[Any]: ...
def Loft(curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Surface: ...
def Maximum(values: List[Union[float, int]]) -> Union[float, int]: ...
def MemberIndex(list: List[Any], item: Any) -> int: ...
def Minimum(values: List[Union[float, int]]) -> Union[float, int]: ...
def MirrorCurve(curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Curve: ...
def MirrorSurface(surface: Rhino.Geometry.Surface, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Surface: ...
def Modulus(a: Union[float, int], b: Union[float, int]) -> Union[float, int]: ...
def MoveAwayFrom(geometry: Any, attractor: Rhino.Geometry.Point3d, distance: float) -> Any: ...
def MoveToPlane(geometry: Any, plane: Rhino.Geometry.Plane) -> Any: ...
def MultipleCurves(curves: List[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Curve]: ...
def NakedVertices(mesh: Rhino.Geometry.Mesh) -> List[int]: ...
def Naturallogarithm(x: float) -> float: ...
def Negative(x: Union[float, int]) -> Union[float, int]: ...
def NetworkSurface(u_curves: List[Rhino.Geometry.Curve], v_curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Surface: ...
def NurbsCurve(points: List[Rhino.Geometry.Point3d], degree: int) -> Rhino.Geometry.NurbsCurve: ...
def OffsetSurface(surface: Rhino.Geometry.Surface, distance: float) -> Rhino.Geometry.Surface: ...
def OffsetSurfaceLoose(surface: Rhino.Geometry.Surface, distance: float) -> Rhino.Geometry.Surface: ...
def OffsetetonSrf(curve: Rhino.Geometry.Curve, surface: Rhino.Geometry.Surface, distance: float) -> Rhino.Geometry.Curve: ...
def OneOverX(x: float) -> float: ...
def OsculatingCircles(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Circle]: ...
def PartitionList(list: List[Any], sizes: List[int]) -> List[List[Any]]: ...
def PerpFrame(curve: Rhino.Geometry.Curve, parameter: float) -> Rhino.Geometry.Plane: ...
def PerpFrames(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Plane]: ...
def Pi() -> float: ...
def Pipe(curve: Rhino.Geometry.Curve, radius: float) -> Rhino.Geometry.Brep: ...
def PipeVariable(curve: Rhino.Geometry.Curve, radii: List[float]) -> Rhino.Geometry.Brep: ...
def Planar(curves: List[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Curve]: ...
def Planarize(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def Plane3Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, point3: Rhino.Geometry.Point3d) -> Rhino.Geometry.Plane: ...
def PlaneClosestPoint(plane: Rhino.Geometry.Plane, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d: ...
def PlaneCoordinates(plane: Rhino.Geometry.Plane, point: Rhino.Geometry.Point3d) -> Tuple[float, float, float]: ...
def PlaneFit(points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Plane: ...
def PlaneNormal(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Vector3d: ...
def PlaneOffset(plane: Rhino.Geometry.Plane, distance: float) -> Rhino.Geometry.Plane: ...
def PlaneOrigin(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Point3d: ...
def PlaneRegion(plane: Rhino.Geometry.Plane, boundary: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Brep: ...
def PlaneSurface(plane: Rhino.Geometry.Plane, x_extent: Rhino.Geometry.Interval, y_extent: Rhino.Geometry.Interval) -> Rhino.Geometry.Surface: ...
def PlaneThroughShape(shapes: List[Any]) -> Rhino.Geometry.Plane: ...
def PlaneXPlane(plane1: Rhino.Geometry.Plane, plane2: Rhino.Geometry.Plane) -> Rhino.Geometry.Line: ...
def PlaneXPlaneXPlane(plane1: Rhino.Geometry.Plane, plane2: Rhino.Geometry.Plane, plane3: Rhino.Geometry.Plane) -> Rhino.Geometry.Point3d: ...
def PointCylindrical(plane: Rhino.Geometry.Plane, radius: float, angle: float, height: float) -> Rhino.Geometry.Point3d: ...
def PointDeform(points: List[Rhino.Geometry.Point3d], base_points: List[Rhino.Geometry.Point3d], target_points: List[Rhino.Geometry.Point3d]) -> List[Rhino.Geometry.Point3d]: ...
def PointGroups(points: List[Rhino.Geometry.Point3d], distance: float) -> List[List[Rhino.Geometry.Point3d]]: ...
def PointInBrep(point: Rhino.Geometry.Point3d, brep: Rhino.Geometry.Brep) -> bool: ...
def PointInBreps(point: Rhino.Geometry.Point3d, breps: List[Rhino.Geometry.Brep]) -> List[bool]: ...
def PointInCurve(point: Rhino.Geometry.Point3d, curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane) -> int: ...
def PointInTrim(point: Rhino.Geometry.Point3d, trim: Any) -> bool: ...
def PointOriented(plane: Rhino.Geometry.Plane, x: float, y: float, z: float) -> Rhino.Geometry.Point3d: ...
def PointPolar(plane: Rhino.Geometry.Plane, radius: float, angle: float) -> Rhino.Geometry.Point3d: ...
def PointinCurves(point: Rhino.Geometry.Point3d, curves: List[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane) -> List[int]: ...
def PointstoNumbers(points: List[Rhino.Geometry.Point3d]) -> Tuple[List[float], List[float], List[float]]: ...
def PolyLine(points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Polyline: ...
def Polygon(plane: Rhino.Geometry.Plane, radius: float, sides: int) -> Rhino.Geometry.Polyline: ...
def PolygonCenter(polygon: Rhino.Geometry.Polyline) -> Rhino.Geometry.Point3d: ...
def PolygonEdge(plane: Rhino.Geometry.Plane, edge_length: float, sides: int) -> Rhino.Geometry.Polyline: ...
def PolylineCollapse(polyline: Rhino.Geometry.Polyline, tolerance: float) -> Rhino.Geometry.Polyline: ...
def Power(base: float, exponent: float) -> float: ...
def Powerof10(exponent: float) -> float: ...
def Powerof2(exponent: float) -> float: ...
def PowerofE(exponent: float) -> float: ...
def PrincipalCurvature(surface: Rhino.Geometry.Surface, u: float, v: float) -> Tuple[float, float, Rhino.Geometry.Vector3d, Rhino.Geometry.Vector3d]: ...
def ProjectCurve(curve: Rhino.Geometry.Curve, surface: Rhino.Geometry.Surface, direction: Rhino.Geometry.Vector3d) -> List[Rhino.Geometry.Curve]: ...
def ProjectPoint(point: Rhino.Geometry.Point3d, surface: Rhino.Geometry.Surface, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Point3d: ...
def PruneTree(data: Any, paths_to_remove: List[str]) -> Any: ...
def PullCurve(curve: Rhino.Geometry.Curve, surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Curve: ...
def PullPoint(point: Rhino.Geometry.Point3d, surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Point3d: ...
def QuadSphere(center: Rhino.Geometry.Point3d, radius: float, subdivisions: int) -> Rhino.Geometry.Mesh: ...
def Quadrangulate(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def Radians(degrees: float) -> float: ...
def RailRevolution(profile: Rhino.Geometry.Curve, rail: Rhino.Geometry.Curve, axis: Rhino.Geometry.Line) -> Rhino.Geometry.Surface: ...
def Random(seed: int) -> float: ...
def RandomReduce(list: List[Any], ratio: float) -> List[Any]: ...
def Range(start: float, end: float, step: float) -> List[float]: ...
def ReadFile(path: str) -> str: ...
def Rectangle(plane: Rhino.Geometry.Plane, x_size: float, y_size: float) -> Rhino.Geometry.Rectangle3d: ...
def Rectangle2Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> Rhino.Geometry.Rectangle3d: ...
def Rectangle3Pt(corner: Rhino.Geometry.Point3d, x_end: Rhino.Geometry.Point3d, y_end: Rhino.Geometry.Point3d) -> Rhino.Geometry.Rectangle3d: ...
def Rectangular(plane: Rhino.Geometry.Plane, x_size: float, y_size: float, x_count: int, y_count: int) -> List[Rhino.Geometry.Point3d]: ...
def Reduce(list: List[Any]) -> List[Any]: ...
def ReducePointCloud(cloud: List[Rhino.Geometry.Point3d], distance: float) -> List[Rhino.Geometry.Point3d]: ...
def Refine(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def RelativeDifferences(values: List[float]) -> List[float]: ...
def RelativeItem(list: List[Any], index: float) -> Any: ...
def RelativeItems(list: List[Any], indices: List[float]) -> List[Any]: ...
def RemapNumbers(values: List[float], source: Rhino.Geometry.Interval, target: Rhino.Geometry.Interval) -> List[float]: ...
def RepeatData(data: Any, count: int) -> List[Any]: ...
def ReplaceNulls(list: List[Any], replacement: Any) -> List[Any]: ...
def ReplacePaths(tree: Any, old_paths: List[str], new_paths: List[str]) -> Any: ...
def Retrim(surface: Rhino.Geometry.Surface, curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Brep: ...
def Reverse(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Curve: ...
def ReverseList(list: List[Any]) -> List[Any]: ...
def ReverseSurface(surface: Rhino.Geometry.Surface, direction: int) -> Rhino.Geometry.Surface: ...
def Revolution(profile: Rhino.Geometry.Curve, axis: Rhino.Geometry.Line, angle: float) -> Rhino.Geometry.Surface: ...
def RotatePlane(plane: Rhino.Geometry.Plane, angle: float) -> Rhino.Geometry.Plane: ...
def Round(x: float, decimals: int) -> float: ...
def RuledSurface(curve1: Rhino.Geometry.Curve, curve2: Rhino.Geometry.Curve) -> Rhino.Geometry.Surface: ...
def Seam(surface: Rhino.Geometry.Surface, seam: float) -> Rhino.Geometry.Surface: ...
def Secant(angle: float) -> float: ...
def SegmentLengths(polyline: Rhino.Geometry.Polyline) -> List[float]: ...
def Sequence(start: float, step: float, count: int) -> List[float]: ...
def Series(start: float, step: float, count: int) -> List[float]: ...
def SetDifference(set1: List[Any], set2: List[Any]) -> List[Any]: ...
def SetDifferenceS(set1: List[Any], set2: List[Any]) -> List[Any]: ...
def SetMajority(sets: List[List[Any]]) -> List[Any]: ...
def ShapeInBrep(shape: Any, brep: Rhino.Geometry.Brep) -> bool: ...
def Shatter(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Curve]: ...
def ShiftList(list: List[Any], offset: int) -> List[Any]: ...
def ShiftPaths(tree: Any, offset: int) -> Any: ...
def ShortestList(lists: List[List[Any]]) -> List[Any]: ...
def SiftPattern(list: List[Any], pattern: List[bool]) -> List[Any]: ...
def Similarity(curve1: Rhino.Geometry.Curve, curve2: Rhino.Geometry.Curve) -> float: ...
def SimpleMesh(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh: ...
def SimplifyTree(tree: Any) -> Any: ...
def Sinc(x: float) -> float: ...
def Sine(angle: float) -> float: ...
def SmallerThan(a: Union[float, int], b: Union[float, int]) -> bool: ...
def Smooth(curve: Rhino.Geometry.Curve, factor: float) -> Rhino.Geometry.Curve: ...
def SmoothPolyline(polyline: Rhino.Geometry.Polyline, factor: float) -> Rhino.Geometry.Polyline: ...
def SoapFilm(curves: List[Rhino.Geometry.Curve]) -> Rhino.Geometry.Mesh: ...
def SolidDifference(brep1: Rhino.Geometry.Brep, brep2: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Brep]: ...
def SolidIntersection(brep1: Rhino.Geometry.Brep, brep2: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Brep]: ...
def SolidUnion(breps: List[Rhino.Geometry.Brep]) -> List[Rhino.Geometry.Brep]: ...
def SortAlongCurve(points: List[Rhino.Geometry.Point3d], curve: Rhino.Geometry.Curve) -> Tuple[List[Rhino.Geometry.Point3d], List[int]]: ...
def SortPoints(points: List[Rhino.Geometry.Point3d], keys: List[float]) -> Tuple[List[Rhino.Geometry.Point3d], List[int]]: ...
def SpatialDeform(geometry: Any, reference_points: List[Rhino.Geometry.Point3d], sample_points: List[Rhino.Geometry.Point3d]) -> Any: ...
def Sphere(center: Rhino.Geometry.Point3d, radius: float) -> Rhino.Geometry.Sphere: ...
def Sphere4Pt(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, point3: Rhino.Geometry.Point3d, point4: Rhino.Geometry.Point3d) -> Rhino.Geometry.Sphere: ...
def SphereFit(points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Sphere: ...
def Split(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Curve]: ...
def SplitList(list: List[Any], index: int) -> Tuple[List[Any], List[Any]]: ...
def SplitTree(tree: Any, masks: List[bool]) -> Tuple[Any, Any]: ...
def SplitwithBrep(curve: Rhino.Geometry.Curve, brep: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Curve]: ...
def SplitwithBreps(curve: Rhino.Geometry.Curve, breps: List[Rhino.Geometry.Brep]) -> List[Rhino.Geometry.Curve]: ...
def Splop(geometry: Any, surface: Rhino.Geometry.Surface) -> Any: ...
def Square(x: Union[float, int]) -> Union[float, int]: ...
def SquareRoot(x: float) -> float: ...
def StackData(data: List[Any]) -> Any: ...
def Stretch(geometry: Any, plane: Rhino.Geometry.Plane, factor: float) -> Any: ...
def Stripper(data: Any) -> List[Any]: ...
def SubCurve(curve: Rhino.Geometry.Curve, domain: Rhino.Geometry.Interval) -> Rhino.Geometry.Curve: ...
def SubDControlPolygon(subd: Any) -> List[Rhino.Geometry.Polyline]: ...
def SurfaceXSurface(surface1: Rhino.Geometry.Surface, surface2: Rhino.Geometry.Surface) -> List[Rhino.Geometry.Curve]: ...
def SwapUV(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Surface: ...
def Tangent(angle: float) -> float: ...
def TangentLine(curve: Rhino.Geometry.Curve, parameter: float) -> Rhino.Geometry.Line: ...
def TangentLines(curve: Rhino.Geometry.Curve, parameters: List[float]) -> List[Rhino.Geometry.Line]: ...
def TrimSurface(surface: Rhino.Geometry.Surface, domain_u: Rhino.Geometry.Interval, domain_v: Rhino.Geometry.Interval) -> Rhino.Geometry.Surface: ...
def Unify(vectors: List[Rhino.Geometry.Vector3d]) -> List[Rhino.Geometry.Vector3d]: ...
def UnitVector(vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d: ...
def UnitX() -> Rhino.Geometry.Vector3d: ...
def UnitY() -> Rhino.Geometry.Vector3d: ...
def UnitZ() -> Rhino.Geometry.Vector3d: ...
def VectorAngle(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> float: ...
def VectorLength(vector: Rhino.Geometry.Vector3d) -> float: ...
def VectorReverse(vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d: ...
def VectorRotate(vector: Rhino.Geometry.Vector3d, axis: Rhino.Geometry.Vector3d, angle: float) -> Rhino.Geometry.Vector3d: ...
def VertexNormals(mesh: Rhino.Geometry.Mesh) -> List[Rhino.Geometry.Vector3d]: ...
def Weave(pattern: List[int], streams: List[List[Any]]) -> List[Any]: ...
def WeldVertices(mesh: Rhino.Geometry.Mesh, tolerance: float) -> Rhino.Geometry.Mesh: ...