"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_Archive", "EncodedStringWriter", "GH_Compression", "ID", "GH_Chunk", "GH_LooseChunk", "GH_Message_Type", "GH_Message", "GH_IChunk", "GH_IWriter", "GH_IReader", "GH_IBinarySupport", "GH_IXmlSupport", "ChunkKeyedCollection"]
# endregion

# region: Imports
from GH_IO import Types
from System import Drawing
from System import IO
from System import Text
from System import Xml
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import GH_IO
import System
# endregion

# region: GH_IO, Version=8.19.25132.1001

class GH_Archive(object):
    """This is the base archive class which takes care of all (de)serialization and messaging.

    """
    def __init__(self): ...
    @overload
    def AddMessage(self, message: GH_Message) -> None: ...
    @overload
    def AddMessage(self, messageText: str, messageType: GH_Message_Type) -> None: ...
    @overload
    def AppendObject(self, target: GH_IO.GH_ISerializable, targetName: str) -> bool: ...
    @overload
    def ClearMessages() -> None: ...
    @overload
    def CreateNewRoot(self, forWriting: bool) -> None: ...
    @overload
    def CreateTopLevelNode(self, rootName: str) -> GH_IWriter: ...
    @overload
    def Deserialize_Binary(self, data: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def Deserialize_Xml(self, xmlContent: str) -> bool: ...
    @overload
    def ExtractObject(self, target: GH_IO.GH_ISerializable, targetName: str) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @property
    def GetRootNode(self) -> GH_Chunk: ...
    @property
    def GH_IO_Version(self) -> Types.GH_Version: ...
    @property
    def GrasshopperBinaryExtension(self) -> str: ...
    @property
    def GrasshopperUserExtension(self) -> str: ...
    @property
    def GrasshopperXmlExtension(self) -> str: ...
    @property
    def IsBinaryPath(self) -> bool: ...
    @property
    def IsPath(self) -> bool: ...
    @property
    def IsXmlPath(self) -> bool: ...
    @property
    def Messages(self) -> Generic.List: ...
    @property
    def Path(self) -> str: ...
    @property
    def WorstCaseMessageType(self) -> GH_Message_Type: ...
    @overload
    def MessageCount() -> int: ...
    @overload
    def MessageCount(self, includeInfo: bool, includeWarnings: bool, includeErrors: bool) -> int: ...
    @overload
    @staticmethod
    def OpenFileDialog(title: str, additionalFilters: Generic.List) -> (bool, str): ...
    @overload
    def ReadFromFile(self, fileName: str) -> bool: ...
    @overload
    @staticmethod
    def SaveFileDialog(title: str, additionalFilters: Generic.List) -> (bool, str): ...
    @overload
    def Serialize_Binary() -> System.System.Array[System.Byte]: ...
    @overload
    def Serialize_Xml() -> str: ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @overload
    def ShowMessageLog() -> Forms.DialogResult: ...
    @overload
    def WriteToFile(self, fileName: str, overwrite: bool, rememberPath: bool) -> bool: ...

class EncodedStringWriter(IO.StringWriter):
    """This class is needed to override the UTF-16 encoding property of the default DotNET StringWriter.

    """
    def __init__(self): ...
    @property
    def Encoding(self) -> Text.Encoding: ...

class GH_Compression(object):
    """Provides static methods for compression of byte-arrays.

    """
    @overload
    @staticmethod
    def Compress(data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Decompress(compressedData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...

class ID(System.ValueType):
    """An ID is used to uniquely identify a specific item.

    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, index: int): ...
    @overload
    def CompareTo(self, other: ID) -> int: ...
    @overload
    def Equals(self, other: ID) -> bool: ...
    @property
    def Hash(self) -> int: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class GH_Chunk(object):
    """Full implementation of GH_IChunk, GH_IReader, GH_IWriter, GH_IBinarySupport and GH_IXmlSupport. Instances of this class are usually disguised as one of the interfaces it implements.

    """
    @overload
    def AddComment(self, comment_text: str) -> None: ...
    @overload
    def AddMessage(self, m: str, t: GH_Message_Type) -> None: ...
    @overload
    def ChunkExists(self, name: str) -> bool: ...
    @overload
    def ChunkExists(self, name: str, index: int) -> bool: ...
    @overload
    def CopyValuesFromChunk(self, other: GH_Chunk) -> None: ...
    @overload
    def CopyValuesToChunk() -> GH_Chunk: ...
    @overload
    def CreateChunk(self, chunk_name: str) -> GH_IWriter: ...
    @overload
    def CreateChunk(self, chunk_name: str, chunk_index: int) -> GH_IWriter: ...
    @overload
    def FindChunk(self, name: str) -> GH_IReader: ...
    @overload
    def FindChunk(self, name: str, index: int) -> GH_IReader: ...
    @overload
    def FindItem(self, name: str) -> Types.GH_Item: ...
    @overload
    def FindItem(self, name: str, index: int) -> Types.GH_Item: ...
    @property
    def Archive(self) -> GH_Archive: ...
    @property
    def ArchiveLocation(self) -> str: ...
    @property
    def ChunkCount(self) -> int: ...
    @property
    def Chunks(self) -> Generic.List: ...
    @property
    def HasComments(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def ItemCount(self) -> int: ...
    @property
    def Items(self) -> Generic.List: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetBoolean(self, item_name: str) -> bool: ...
    @overload
    def GetBoolean(self, item_name: str, item_index: int) -> bool: ...
    @overload
    def GetBoundingBox(self, item_name: str) -> Types.GH_BoundingBox: ...
    @overload
    def GetBoundingBox(self, item_name: str, item_index: int) -> Types.GH_BoundingBox: ...
    @overload
    def GetByte(self, item_name: str) -> System.Byte: ...
    @overload
    def GetByte(self, item_name: str, item_index: int) -> System.Byte: ...
    @overload
    def GetByteArray(self, item_name: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetByteArray(self, item_name: str, item_index: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetDate(self, item_name: str) -> System.DateTime: ...
    @overload
    def GetDate(self, item_name: str, item_index: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, item_name: str) -> System.Decimal: ...
    @overload
    def GetDecimal(self, item_name: str, item_index: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, item_name: str) -> float: ...
    @overload
    def GetDouble(self, item_name: str, item_index: int) -> float: ...
    @overload
    def GetDoubleArray(self, item_name: str) -> System.System.Array[float]: ...
    @overload
    def GetDoubleArray(self, item_name: str, item_index: int) -> System.System.Array[float]: ...
    @overload
    def GetDrawingBitmap(self, item_name: str) -> Drawing.Bitmap: ...
    @overload
    def GetDrawingBitmap(self, item_name: str, item_index: int) -> Drawing.Bitmap: ...
    @overload
    def GetDrawingColor(self, item_name: str) -> Drawing.Color: ...
    @overload
    def GetDrawingColor(self, item_name: str, item_index: int) -> Drawing.Color: ...
    @overload
    def GetDrawingPoint(self, item_name: str) -> Drawing.Point: ...
    @overload
    def GetDrawingPoint(self, item_name: str, item_index: int) -> Drawing.Point: ...
    @overload
    def GetDrawingPointF(self, item_name: str) -> Drawing.PointF: ...
    @overload
    def GetDrawingPointF(self, item_name: str, item_index: int) -> Drawing.PointF: ...
    @overload
    def GetDrawingRectangle(self, item_name: str) -> Drawing.Rectangle: ...
    @overload
    def GetDrawingRectangle(self, item_name: str, item_index: int) -> Drawing.Rectangle: ...
    @overload
    def GetDrawingRectangleF(self, item_name: str) -> Drawing.RectangleF: ...
    @overload
    def GetDrawingRectangleF(self, item_name: str, item_index: int) -> Drawing.RectangleF: ...
    @overload
    def GetDrawingSize(self, item_name: str) -> Drawing.Size: ...
    @overload
    def GetDrawingSize(self, item_name: str, item_index: int) -> Drawing.Size: ...
    @overload
    def GetDrawingSizeF(self, item_name: str) -> Drawing.SizeF: ...
    @overload
    def GetDrawingSizeF(self, item_name: str, item_index: int) -> Drawing.SizeF: ...
    @overload
    def GetGuid(self, item_name: str) -> System.Guid: ...
    @overload
    def GetGuid(self, item_name: str, item_index: int) -> System.Guid: ...
    @overload
    def GetInt32(self, item_name: str) -> int: ...
    @overload
    def GetInt32(self, item_name: str, item_index: int) -> int: ...
    @overload
    def GetInt64(self, item_name: str) -> System.Int64: ...
    @overload
    def GetInt64(self, item_name: str, item_index: int) -> System.Int64: ...
    @overload
    def GetInterval1D(self, item_name: str) -> Types.GH_Interval1D: ...
    @overload
    def GetInterval1D(self, item_name: str, item_index: int) -> Types.GH_Interval1D: ...
    @overload
    def GetInterval2D(self, item_name: str) -> Types.GH_Interval2D: ...
    @overload
    def GetInterval2D(self, item_name: str, item_index: int) -> Types.GH_Interval2D: ...
    @overload
    def GetLine(self, item_name: str) -> Types.GH_Line: ...
    @overload
    def GetLine(self, item_name: str, item_index: int) -> Types.GH_Line: ...
    @overload
    def GetPath(self, item_name: str, basePath: str) -> System.System.Array[str]: ...
    @overload
    def GetPath(self, item_name: str, item_index: int, basePath: str) -> System.System.Array[str]: ...
    @overload
    def GetPlane(self, item_name: str) -> Types.GH_Plane: ...
    @overload
    def GetPlane(self, item_name: str, item_index: int) -> Types.GH_Plane: ...
    @overload
    def GetPoint2D(self, item_name: str) -> Types.GH_Point2D: ...
    @overload
    def GetPoint2D(self, item_name: str, item_index: int) -> Types.GH_Point2D: ...
    @overload
    def GetPoint3D(self, item_name: str) -> Types.GH_Point3D: ...
    @overload
    def GetPoint3D(self, item_name: str, item_index: int) -> Types.GH_Point3D: ...
    @overload
    def GetPoint4D(self, item_name: str) -> Types.GH_Point4D: ...
    @overload
    def GetPoint4D(self, item_name: str, item_index: int) -> Types.GH_Point4D: ...
    @overload
    def GetSingle(self, item_name: str) -> System.Single: ...
    @overload
    def GetSingle(self, item_name: str, item_index: int) -> System.Single: ...
    @overload
    def GetString(self, item_name: str) -> str: ...
    @overload
    def GetString(self, item_name: str, item_index: int) -> str: ...
    @overload
    def GetVersion(self, item_name: str) -> Types.GH_Version: ...
    @overload
    def GetVersion(self, item_name: str, item_index: int) -> Types.GH_Version: ...
    @overload
    @staticmethod
    def InstantiateRoot(owner: GH_Archive) -> GH_Chunk: ...
    @overload
    def ItemExists(self, name: str) -> bool: ...
    @overload
    def ItemExists(self, name: str, index: int) -> bool: ...
    @overload
    def Read(self, node: Xml.XmlNode) -> None: ...
    @overload
    def Read(self, reader: IO.BinaryReader) -> None: ...
    @overload
    def RemoveChunk(self, chunk: GH_IChunk) -> bool: ...
    @overload
    def RemoveChunk(self, chunk_name: str) -> bool: ...
    @overload
    def RemoveChunk(self, chunk_name: str, chunk_index: int) -> bool: ...
    @overload
    def RemoveItem(self, itemName: str) -> bool: ...
    @overload
    def RemoveItem(self, itemName: str, itemIndex: int) -> bool: ...
    @overload
    def SetBoolean(self, item_name: str, item_value: bool) -> None: ...
    @overload
    def SetBoolean(self, item_name: str, item_index: int, item_value: bool) -> None: ...
    @overload
    def SetBoundingBox(self, item_name: str, item_value: Types.GH_BoundingBox) -> None: ...
    @overload
    def SetBoundingBox(self, item_name: str, item_index: int, item_value: Types.GH_BoundingBox) -> None: ...
    @overload
    def SetByte(self, item_name: str, item_value: System.Byte) -> None: ...
    @overload
    def SetByte(self, item_name: str, item_index: int, item_value: System.Byte) -> None: ...
    @overload
    def SetByteArray(self, item_name: str, item_value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetByteArray(self, item_name: str, item_index: int, item_value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetDate(self, item_name: str, item_value: System.DateTime) -> None: ...
    @overload
    def SetDate(self, item_name: str, item_index: int, item_value: System.DateTime) -> None: ...
    @overload
    def SetDecimal(self, item_name: str, item_value: System.Decimal) -> None: ...
    @overload
    def SetDecimal(self, item_name: str, item_index: int, item_value: System.Decimal) -> None: ...
    @overload
    def SetDouble(self, item_name: str, item_value: float) -> None: ...
    @overload
    def SetDouble(self, item_name: str, item_index: int, item_value: float) -> None: ...
    @overload
    def SetDoubleArray(self, item_name: str, item_value: System.System.Array[float]) -> None: ...
    @overload
    def SetDoubleArray(self, item_name: str, item_index: int, item_value: System.System.Array[float]) -> None: ...
    @overload
    def SetDrawingBitmap(self, item_name: str, item_value: Drawing.Bitmap) -> None: ...
    @overload
    def SetDrawingBitmap(self, item_name: str, item_index: int, item_value: Drawing.Bitmap) -> None: ...
    @overload
    def SetDrawingColor(self, item_name: str, item_value: Drawing.Color) -> None: ...
    @overload
    def SetDrawingColor(self, item_name: str, item_index: int, item_value: Drawing.Color) -> None: ...
    @overload
    def SetDrawingPoint(self, item_name: str, item_value: Drawing.Point) -> None: ...
    @overload
    def SetDrawingPoint(self, item_name: str, item_index: int, item_value: Drawing.Point) -> None: ...
    @overload
    def SetDrawingPointF(self, item_name: str, item_value: Drawing.PointF) -> None: ...
    @overload
    def SetDrawingPointF(self, item_name: str, item_index: int, item_value: Drawing.PointF) -> None: ...
    @overload
    def SetDrawingRectangle(self, item_name: str, item_value: Drawing.Rectangle) -> None: ...
    @overload
    def SetDrawingRectangle(self, item_name: str, item_index: int, item_value: Drawing.Rectangle) -> None: ...
    @overload
    def SetDrawingRectangleF(self, item_name: str, item_value: Drawing.RectangleF) -> None: ...
    @overload
    def SetDrawingRectangleF(self, item_name: str, item_index: int, item_value: Drawing.RectangleF) -> None: ...
    @overload
    def SetDrawingSize(self, item_name: str, item_value: Drawing.Size) -> None: ...
    @overload
    def SetDrawingSize(self, item_name: str, item_index: int, item_value: Drawing.Size) -> None: ...
    @overload
    def SetDrawingSizeF(self, item_name: str, item_value: Drawing.SizeF) -> None: ...
    @overload
    def SetDrawingSizeF(self, item_name: str, item_index: int, item_value: Drawing.SizeF) -> None: ...
    @overload
    def SetGuid(self, item_name: str, item_value: System.Guid) -> None: ...
    @overload
    def SetGuid(self, item_name: str, item_index: int, item_value: System.Guid) -> None: ...
    @overload
    def SetInt32(self, item_name: str, item_value: int) -> None: ...
    @overload
    def SetInt32(self, item_name: str, item_index: int, item_value: int) -> None: ...
    @overload
    def SetInt64(self, item_name: str, item_value: System.Int64) -> None: ...
    @overload
    def SetInt64(self, item_name: str, item_index: int, item_value: System.Int64) -> None: ...
    @overload
    def SetInterval1D(self, item_name: str, item_value: Types.GH_Interval1D) -> None: ...
    @overload
    def SetInterval1D(self, item_name: str, item_index: int, item_value: Types.GH_Interval1D) -> None: ...
    @overload
    def SetInterval2D(self, item_name: str, item_value: Types.GH_Interval2D) -> None: ...
    @overload
    def SetInterval2D(self, item_name: str, item_index: int, item_value: Types.GH_Interval2D) -> None: ...
    @overload
    def SetLine(self, item_name: str, item_value: Types.GH_Line) -> None: ...
    @overload
    def SetLine(self, item_name: str, item_index: int, item_value: Types.GH_Line) -> None: ...
    @overload
    def SetPath(self, item_name: str, absolutePath: str, basePath: str) -> None: ...
    @overload
    def SetPath(self, item_name: str, item_index: int, absolutePath: str, basePath: str) -> None: ...
    @overload
    def SetPlane(self, item_name: str, item_value: Types.GH_Plane) -> None: ...
    @overload
    def SetPlane(self, item_name: str, item_index: int, item_value: Types.GH_Plane) -> None: ...
    @overload
    def SetPoint2D(self, item_name: str, item_value: Types.GH_Point2D) -> None: ...
    @overload
    def SetPoint2D(self, item_name: str, item_index: int, item_value: Types.GH_Point2D) -> None: ...
    @overload
    def SetPoint3D(self, item_name: str, item_value: Types.GH_Point3D) -> None: ...
    @overload
    def SetPoint3D(self, item_name: str, item_index: int, item_value: Types.GH_Point3D) -> None: ...
    @overload
    def SetPoint4D(self, item_name: str, item_value: Types.GH_Point4D) -> None: ...
    @overload
    def SetPoint4D(self, item_name: str, item_index: int, item_value: Types.GH_Point4D) -> None: ...
    @overload
    def SetSingle(self, item_name: str, item_value: System.Single) -> None: ...
    @overload
    def SetSingle(self, item_name: str, item_index: int, item_value: System.Single) -> None: ...
    @overload
    def SetString(self, item_name: str, item_value: str) -> None: ...
    @overload
    def SetString(self, item_name: str, item_index: int, item_value: str) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_value: Types.GH_Version) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_index: int, item_value: Types.GH_Version) -> None: ...
    @overload
    def SetVersion(self, item_name: str, major: int, minor: int, revision: int) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_index: int, major: int, minor: int, revision: int) -> None: ...
    @overload
    def TryGetBoolean(self, item_name: str) -> (bool, bool): ...
    @overload
    def TryGetBoolean(self, item_name: str, item_index: int) -> (bool, bool): ...
    @overload
    def TryGetBoundingBox(self, item_name: str) -> (bool, Types.GH_BoundingBox): ...
    @overload
    def TryGetBoundingBox(self, item_name: str, item_index: int) -> (bool, Types.GH_BoundingBox): ...
    @overload
    def TryGetByte(self, item_name: str) -> (bool, System.Byte): ...
    @overload
    def TryGetByte(self, item_name: str, item_index: int) -> (bool, System.Byte): ...
    @overload
    def TryGetDate(self, item_name: str) -> (bool, System.DateTime): ...
    @overload
    def TryGetDate(self, item_name: str, item_index: int) -> (bool, System.DateTime): ...
    @overload
    def TryGetDecimal(self, item_name: str) -> (bool, System.Decimal): ...
    @overload
    def TryGetDecimal(self, item_name: str, item_index: int) -> (bool, System.Decimal): ...
    @overload
    def TryGetDouble(self, item_name: str) -> (bool, float): ...
    @overload
    def TryGetDouble(self, item_name: str, item_index: int) -> (bool, float): ...
    @overload
    def TryGetDrawingColor(self, item_name: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDrawingColor(self, item_name: str, item_index: int) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDrawingPoint(self, item_name: str) -> (bool, Drawing.Point): ...
    @overload
    def TryGetDrawingPoint(self, item_name: str, item_index: int) -> (bool, Drawing.Point): ...
    @overload
    def TryGetDrawingPointF(self, item_name: str) -> (bool, Drawing.PointF): ...
    @overload
    def TryGetDrawingPointF(self, item_name: str, item_index: int) -> (bool, Drawing.PointF): ...
    @overload
    def TryGetDrawingRectangle(self, item_name: str) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetDrawingRectangle(self, item_name: str, item_index: int) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetDrawingRectangleF(self, item_name: str) -> (bool, Drawing.RectangleF): ...
    @overload
    def TryGetDrawingRectangleF(self, item_name: str, item_index: int) -> (bool, Drawing.RectangleF): ...
    @overload
    def TryGetDrawingSize(self, item_name: str) -> (bool, Drawing.Size): ...
    @overload
    def TryGetDrawingSize(self, item_name: str, item_index: int) -> (bool, Drawing.Size): ...
    @overload
    def TryGetDrawingSizeF(self, item_name: str) -> (bool, Drawing.SizeF): ...
    @overload
    def TryGetDrawingSizeF(self, item_name: str, item_index: int) -> (bool, Drawing.SizeF): ...
    @overload
    def TryGetGuid(self, item_name: str) -> (bool, System.Guid): ...
    @overload
    def TryGetGuid(self, item_name: str, item_index: int) -> (bool, System.Guid): ...
    @overload
    def TryGetInt32(self, item_name: str) -> (bool, int): ...
    @overload
    def TryGetInt32(self, item_name: str, item_index: int) -> (bool, int): ...
    @overload
    def TryGetInt64(self, item_name: str) -> (bool, System.Int64): ...
    @overload
    def TryGetInt64(self, item_name: str, item_index: int) -> (bool, System.Int64): ...
    @overload
    def TryGetInterval1D(self, item_name: str) -> (bool, Types.GH_Interval1D): ...
    @overload
    def TryGetInterval1D(self, item_name: str, item_index: int) -> (bool, Types.GH_Interval1D): ...
    @overload
    def TryGetInterval2D(self, item_name: str) -> (bool, Types.GH_Interval2D): ...
    @overload
    def TryGetInterval2D(self, item_name: str, item_index: int) -> (bool, Types.GH_Interval2D): ...
    @overload
    def TryGetLine(self, item_name: str) -> (bool, Types.GH_Line): ...
    @overload
    def TryGetLine(self, item_name: str, item_index: int) -> (bool, Types.GH_Line): ...
    @overload
    def TryGetPlane(self, item_name: str) -> (bool, Types.GH_Plane): ...
    @overload
    def TryGetPlane(self, item_name: str, item_index: int) -> (bool, Types.GH_Plane): ...
    @overload
    def TryGetPoint2D(self, item_name: str) -> (bool, Types.GH_Point2D): ...
    @overload
    def TryGetPoint2D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point2D): ...
    @overload
    def TryGetPoint3D(self, item_name: str) -> (bool, Types.GH_Point3D): ...
    @overload
    def TryGetPoint3D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point3D): ...
    @overload
    def TryGetPoint4D(self, item_name: str) -> (bool, Types.GH_Point4D): ...
    @overload
    def TryGetPoint4D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point4D): ...
    @overload
    def TryGetSingle(self, item_name: str) -> (bool, System.Single): ...
    @overload
    def TryGetSingle(self, item_name: str, item_index: int) -> (bool, System.Single): ...
    @overload
    def TryGetString(self, item_name: str) -> (bool, str): ...
    @overload
    def TryGetString(self, item_name: str, item_index: int) -> (bool, str): ...
    @overload
    def TryGetVersion(self, item_name: str) -> (bool, Types.GH_Version): ...
    @overload
    def TryGetVersion(self, item_name: str, item_index: int) -> (bool, Types.GH_Version): ...
    @overload
    def Write(self, writer: IO.BinaryWriter) -> None: ...
    @overload
    def Write(self, writer: Xml.XmlWriter) -> None: ...

class GH_LooseChunk(GH_Chunk):
    """A utility class for creating partial archives.

    """
    @overload
    def __init__(self, chunk_name: str): ...
    @overload
    def __init__(self, chunk_name: str, chunk_index: int): ...
    @overload
    def Deserialize_Binary(self, content: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Deserialize_Xml(self, xml_content: str) -> None: ...
    @overload
    def Serialize_Binary() -> System.System.Array[System.Byte]: ...
    @overload
    def Serialize_Xml() -> str: ...

class GH_Message_Type(enum.Enum):
    info = 0
    warning = 1
    error = 2

class GH_Message(object):
    """Represents an archive log message. Messages are collected during read/write operations.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message_content: str): ...
    @overload
    def __init__(self, message_content: str, message_type: GH_Message_Type): ...
    @property
    def Message(self) -> str: ...
    @property
    def Type(self) -> GH_Message_Type: ...

class GH_IChunk:
    """Base interface for all Archive Chunks.

    """
    @overload
    def AddMessage(self, m: str, t: GH_Message_Type) -> None: ...
    @property
    def Archive(self) -> GH_Archive: ...
    @property
    def ArchiveLocation(self) -> str: ...
    @property
    def ChunkCount(self) -> int: ...
    @property
    def Chunks(self) -> Generic.List: ...
    @property
    def Index(self) -> int: ...
    @property
    def ItemCount(self) -> int: ...
    @property
    def Items(self) -> Generic.List: ...
    @property
    def Name(self) -> str: ...

class GH_IWriter:
    """Provides access to a subset of GH_Chunk methods used for writing archives.

    """
    @overload
    def AddComment(self, comment_text: str) -> None: ...
    @overload
    def CreateChunk(self, chunk_name: str) -> GH_IWriter: ...
    @overload
    def CreateChunk(self, chunk_name: str, chunk_index: int) -> GH_IWriter: ...
    @overload
    def RemoveChunk(self, chunk_name: str) -> bool: ...
    @overload
    def RemoveChunk(self, chunk: GH_IChunk) -> bool: ...
    @overload
    def RemoveChunk(self, chunk_name: str, chunk_index: int) -> bool: ...
    @overload
    def RemoveItem(self, itemName: str) -> bool: ...
    @overload
    def RemoveItem(self, itemName: str, itemIndex: int) -> bool: ...
    @overload
    def SetBoolean(self, item_name: str, item_value: bool) -> None: ...
    @overload
    def SetBoolean(self, item_name: str, item_index: int, item_value: bool) -> None: ...
    @overload
    def SetBoundingBox(self, item_name: str, item_value: Types.GH_BoundingBox) -> None: ...
    @overload
    def SetBoundingBox(self, item_name: str, item_index: int, item_value: Types.GH_BoundingBox) -> None: ...
    @overload
    def SetByte(self, item_name: str, item_value: System.Byte) -> None: ...
    @overload
    def SetByte(self, item_name: str, item_index: int, item_value: System.Byte) -> None: ...
    @overload
    def SetByteArray(self, item_name: str, item_value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetByteArray(self, item_name: str, item_index: int, item_value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetDate(self, item_name: str, item_value: System.DateTime) -> None: ...
    @overload
    def SetDate(self, item_name: str, item_index: int, item_value: System.DateTime) -> None: ...
    @overload
    def SetDecimal(self, item_name: str, item_value: System.Decimal) -> None: ...
    @overload
    def SetDecimal(self, item_name: str, item_index: int, item_value: System.Decimal) -> None: ...
    @overload
    def SetDouble(self, item_name: str, item_value: float) -> None: ...
    @overload
    def SetDouble(self, item_name: str, item_index: int, item_value: float) -> None: ...
    @overload
    def SetDoubleArray(self, item_name: str, item_value: System.System.Array[float]) -> None: ...
    @overload
    def SetDoubleArray(self, item_name: str, item_index: int, item_value: System.System.Array[float]) -> None: ...
    @overload
    def SetDrawingBitmap(self, item_name: str, item_value: Drawing.Bitmap) -> None: ...
    @overload
    def SetDrawingBitmap(self, item_name: str, item_index: int, item_value: Drawing.Bitmap) -> None: ...
    @overload
    def SetDrawingColor(self, item_name: str, item_value: Drawing.Color) -> None: ...
    @overload
    def SetDrawingColor(self, item_name: str, item_index: int, item_value: Drawing.Color) -> None: ...
    @overload
    def SetDrawingPoint(self, item_name: str, item_value: Drawing.Point) -> None: ...
    @overload
    def SetDrawingPoint(self, item_name: str, item_index: int, item_value: Drawing.Point) -> None: ...
    @overload
    def SetDrawingPointF(self, item_name: str, item_value: Drawing.PointF) -> None: ...
    @overload
    def SetDrawingPointF(self, item_name: str, item_index: int, item_value: Drawing.PointF) -> None: ...
    @overload
    def SetDrawingRectangle(self, item_name: str, item_value: Drawing.Rectangle) -> None: ...
    @overload
    def SetDrawingRectangle(self, item_name: str, item_index: int, item_value: Drawing.Rectangle) -> None: ...
    @overload
    def SetDrawingRectangleF(self, item_name: str, item_value: Drawing.RectangleF) -> None: ...
    @overload
    def SetDrawingRectangleF(self, item_name: str, item_index: int, item_value: Drawing.RectangleF) -> None: ...
    @overload
    def SetDrawingSize(self, item_name: str, item_value: Drawing.Size) -> None: ...
    @overload
    def SetDrawingSize(self, item_name: str, item_index: int, item_value: Drawing.Size) -> None: ...
    @overload
    def SetDrawingSizeF(self, item_name: str, item_value: Drawing.SizeF) -> None: ...
    @overload
    def SetDrawingSizeF(self, item_name: str, item_index: int, item_value: Drawing.SizeF) -> None: ...
    @overload
    def SetGuid(self, item_name: str, item_value: System.Guid) -> None: ...
    @overload
    def SetGuid(self, item_name: str, item_index: int, item_value: System.Guid) -> None: ...
    @overload
    def SetInt32(self, item_name: str, item_value: int) -> None: ...
    @overload
    def SetInt32(self, item_name: str, item_index: int, item_value: int) -> None: ...
    @overload
    def SetInt64(self, item_name: str, item_value: System.Int64) -> None: ...
    @overload
    def SetInt64(self, item_name: str, item_index: int, item_value: System.Int64) -> None: ...
    @overload
    def SetInterval1D(self, item_name: str, item_value: Types.GH_Interval1D) -> None: ...
    @overload
    def SetInterval1D(self, item_name: str, item_index: int, item_value: Types.GH_Interval1D) -> None: ...
    @overload
    def SetInterval2D(self, item_name: str, item_value: Types.GH_Interval2D) -> None: ...
    @overload
    def SetInterval2D(self, item_name: str, item_index: int, item_value: Types.GH_Interval2D) -> None: ...
    @overload
    def SetLine(self, item_name: str, item_value: Types.GH_Line) -> None: ...
    @overload
    def SetLine(self, item_name: str, item_index: int, item_value: Types.GH_Line) -> None: ...
    @overload
    def SetPath(self, item_name: str, absolutePath: str, basePath: str) -> None: ...
    @overload
    def SetPath(self, item_name: str, item_index: int, absolutePath: str, basePath: str) -> None: ...
    @overload
    def SetPlane(self, item_name: str, item_value: Types.GH_Plane) -> None: ...
    @overload
    def SetPlane(self, item_name: str, item_index: int, item_value: Types.GH_Plane) -> None: ...
    @overload
    def SetPoint2D(self, item_name: str, item_value: Types.GH_Point2D) -> None: ...
    @overload
    def SetPoint2D(self, item_name: str, item_index: int, item_value: Types.GH_Point2D) -> None: ...
    @overload
    def SetPoint3D(self, item_name: str, item_value: Types.GH_Point3D) -> None: ...
    @overload
    def SetPoint3D(self, item_name: str, item_index: int, item_value: Types.GH_Point3D) -> None: ...
    @overload
    def SetPoint4D(self, item_name: str, item_value: Types.GH_Point4D) -> None: ...
    @overload
    def SetPoint4D(self, item_name: str, item_index: int, item_value: Types.GH_Point4D) -> None: ...
    @overload
    def SetSingle(self, item_name: str, item_value: System.Single) -> None: ...
    @overload
    def SetSingle(self, item_name: str, item_index: int, item_value: System.Single) -> None: ...
    @overload
    def SetString(self, item_name: str, item_value: str) -> None: ...
    @overload
    def SetString(self, item_name: str, item_index: int, item_value: str) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_value: Types.GH_Version) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_index: int, item_value: Types.GH_Version) -> None: ...
    @overload
    def SetVersion(self, item_name: str, major: int, minor: int, revision: int) -> None: ...
    @overload
    def SetVersion(self, item_name: str, item_index: int, major: int, minor: int, revision: int) -> None: ...

class GH_IReader:
    """Provides access to a subset of GH_Chunk methods used for reading archives.

    """
    @overload
    def ChunkExists(self, name: str) -> bool: ...
    @overload
    def ChunkExists(self, name: str, index: int) -> bool: ...
    @overload
    def FindChunk(self, name: str) -> GH_IReader: ...
    @overload
    def FindChunk(self, name: str, index: int) -> GH_IReader: ...
    @overload
    def FindItem(self, name: str) -> Types.GH_Item: ...
    @overload
    def FindItem(self, name: str, index: int) -> Types.GH_Item: ...
    @overload
    def GetBoolean(self, item_name: str) -> bool: ...
    @overload
    def GetBoolean(self, item_name: str, item_index: int) -> bool: ...
    @overload
    def GetBoundingBox(self, item_name: str) -> Types.GH_BoundingBox: ...
    @overload
    def GetBoundingBox(self, item_name: str, item_index: int) -> Types.GH_BoundingBox: ...
    @overload
    def GetByte(self, item_name: str) -> System.Byte: ...
    @overload
    def GetByte(self, item_name: str, item_index: int) -> System.Byte: ...
    @overload
    def GetByteArray(self, item_name: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetByteArray(self, item_name: str, item_index: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetDate(self, item_name: str) -> System.DateTime: ...
    @overload
    def GetDate(self, item_name: str, item_index: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, item_name: str) -> System.Decimal: ...
    @overload
    def GetDecimal(self, item_name: str, item_index: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, item_name: str) -> float: ...
    @overload
    def GetDouble(self, item_name: str, item_index: int) -> float: ...
    @overload
    def GetDoubleArray(self, item_name: str) -> System.System.Array[float]: ...
    @overload
    def GetDoubleArray(self, item_name: str, item_index: int) -> System.System.Array[float]: ...
    @overload
    def GetDrawingBitmap(self, item_name: str) -> Drawing.Bitmap: ...
    @overload
    def GetDrawingBitmap(self, item_name: str, item_index: int) -> Drawing.Bitmap: ...
    @overload
    def GetDrawingColor(self, item_name: str) -> Drawing.Color: ...
    @overload
    def GetDrawingColor(self, item_name: str, item_index: int) -> Drawing.Color: ...
    @overload
    def GetDrawingPoint(self, item_name: str) -> Drawing.Point: ...
    @overload
    def GetDrawingPoint(self, item_name: str, item_index: int) -> Drawing.Point: ...
    @overload
    def GetDrawingPointF(self, item_name: str) -> Drawing.PointF: ...
    @overload
    def GetDrawingPointF(self, item_name: str, item_index: int) -> Drawing.PointF: ...
    @overload
    def GetDrawingRectangle(self, item_name: str) -> Drawing.Rectangle: ...
    @overload
    def GetDrawingRectangle(self, item_name: str, item_index: int) -> Drawing.Rectangle: ...
    @overload
    def GetDrawingRectangleF(self, item_name: str) -> Drawing.RectangleF: ...
    @overload
    def GetDrawingRectangleF(self, item_name: str, item_index: int) -> Drawing.RectangleF: ...
    @overload
    def GetDrawingSize(self, item_name: str) -> Drawing.Size: ...
    @overload
    def GetDrawingSize(self, item_name: str, item_index: int) -> Drawing.Size: ...
    @overload
    def GetDrawingSizeF(self, item_name: str) -> Drawing.SizeF: ...
    @overload
    def GetDrawingSizeF(self, item_name: str, item_index: int) -> Drawing.SizeF: ...
    @overload
    def GetGuid(self, item_name: str) -> System.Guid: ...
    @overload
    def GetGuid(self, item_name: str, item_index: int) -> System.Guid: ...
    @overload
    def GetInt32(self, item_name: str) -> int: ...
    @overload
    def GetInt32(self, item_name: str, item_index: int) -> int: ...
    @overload
    def GetInt64(self, item_name: str) -> System.Int64: ...
    @overload
    def GetInt64(self, item_name: str, item_index: int) -> System.Int64: ...
    @overload
    def GetInterval1D(self, item_name: str) -> Types.GH_Interval1D: ...
    @overload
    def GetInterval1D(self, item_name: str, item_index: int) -> Types.GH_Interval1D: ...
    @overload
    def GetInterval2D(self, item_name: str) -> Types.GH_Interval2D: ...
    @overload
    def GetInterval2D(self, item_name: str, item_index: int) -> Types.GH_Interval2D: ...
    @overload
    def GetLine(self, item_name: str) -> Types.GH_Line: ...
    @overload
    def GetLine(self, item_name: str, item_index: int) -> Types.GH_Line: ...
    @overload
    def GetPath(self, item_name: str, basePath: str) -> System.System.Array[str]: ...
    @overload
    def GetPath(self, item_name: str, item_index: int, basePath: str) -> System.System.Array[str]: ...
    @overload
    def GetPlane(self, item_name: str) -> Types.GH_Plane: ...
    @overload
    def GetPlane(self, item_name: str, item_index: int) -> Types.GH_Plane: ...
    @overload
    def GetPoint2D(self, item_name: str) -> Types.GH_Point2D: ...
    @overload
    def GetPoint2D(self, item_name: str, item_index: int) -> Types.GH_Point2D: ...
    @overload
    def GetPoint3D(self, item_name: str) -> Types.GH_Point3D: ...
    @overload
    def GetPoint3D(self, item_name: str, item_index: int) -> Types.GH_Point3D: ...
    @overload
    def GetPoint4D(self, item_name: str) -> Types.GH_Point4D: ...
    @overload
    def GetPoint4D(self, item_name: str, item_index: int) -> Types.GH_Point4D: ...
    @overload
    def GetSingle(self, item_name: str) -> System.Single: ...
    @overload
    def GetSingle(self, item_name: str, item_index: int) -> System.Single: ...
    @overload
    def GetString(self, item_name: str) -> str: ...
    @overload
    def GetString(self, item_name: str, item_index: int) -> str: ...
    @overload
    def GetVersion(self, item_name: str) -> Types.GH_Version: ...
    @overload
    def GetVersion(self, item_name: str, item_index: int) -> Types.GH_Version: ...
    @overload
    def ItemExists(self, name: str) -> bool: ...
    @overload
    def ItemExists(self, name: str, index: int) -> bool: ...
    @overload
    def TryGetBoolean(self, item_name: str) -> (bool, bool): ...
    @overload
    def TryGetBoolean(self, item_name: str, item_index: int) -> (bool, bool): ...
    @overload
    def TryGetBoundingBox(self, item_name: str) -> (bool, Types.GH_BoundingBox): ...
    @overload
    def TryGetBoundingBox(self, item_name: str, item_index: int) -> (bool, Types.GH_BoundingBox): ...
    @overload
    def TryGetByte(self, item_name: str) -> (bool, System.Byte): ...
    @overload
    def TryGetByte(self, item_name: str, item_index: int) -> (bool, System.Byte): ...
    @overload
    def TryGetDate(self, item_name: str) -> (bool, System.DateTime): ...
    @overload
    def TryGetDate(self, item_name: str, item_index: int) -> (bool, System.DateTime): ...
    @overload
    def TryGetDecimal(self, item_name: str) -> (bool, System.Decimal): ...
    @overload
    def TryGetDecimal(self, item_name: str, item_index: int) -> (bool, System.Decimal): ...
    @overload
    def TryGetDouble(self, item_name: str) -> (bool, float): ...
    @overload
    def TryGetDouble(self, item_name: str, item_index: int) -> (bool, float): ...
    @overload
    def TryGetDrawingColor(self, item_name: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDrawingColor(self, item_name: str, item_index: int) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDrawingPoint(self, item_name: str) -> (bool, Drawing.Point): ...
    @overload
    def TryGetDrawingPoint(self, item_name: str, item_index: int) -> (bool, Drawing.Point): ...
    @overload
    def TryGetDrawingPointF(self, item_name: str) -> (bool, Drawing.PointF): ...
    @overload
    def TryGetDrawingPointF(self, item_name: str, item_index: int) -> (bool, Drawing.PointF): ...
    @overload
    def TryGetDrawingRectangle(self, item_name: str) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetDrawingRectangle(self, item_name: str, item_index: int) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetDrawingRectangleF(self, item_name: str) -> (bool, Drawing.RectangleF): ...
    @overload
    def TryGetDrawingRectangleF(self, item_name: str, item_index: int) -> (bool, Drawing.RectangleF): ...
    @overload
    def TryGetDrawingSize(self, item_name: str) -> (bool, Drawing.Size): ...
    @overload
    def TryGetDrawingSize(self, item_name: str, item_index: int) -> (bool, Drawing.Size): ...
    @overload
    def TryGetDrawingSizeF(self, item_name: str) -> (bool, Drawing.SizeF): ...
    @overload
    def TryGetDrawingSizeF(self, item_name: str, item_index: int) -> (bool, Drawing.SizeF): ...
    @overload
    def TryGetGuid(self, item_name: str) -> (bool, System.Guid): ...
    @overload
    def TryGetGuid(self, item_name: str, item_index: int) -> (bool, System.Guid): ...
    @overload
    def TryGetInt32(self, item_name: str) -> (bool, int): ...
    @overload
    def TryGetInt32(self, item_name: str, item_index: int) -> (bool, int): ...
    @overload
    def TryGetInt64(self, item_name: str) -> (bool, System.Int64): ...
    @overload
    def TryGetInt64(self, item_name: str, item_index: int) -> (bool, System.Int64): ...
    @overload
    def TryGetInterval1D(self, item_name: str) -> (bool, Types.GH_Interval1D): ...
    @overload
    def TryGetInterval1D(self, item_name: str, item_index: int) -> (bool, Types.GH_Interval1D): ...
    @overload
    def TryGetInterval2D(self, item_name: str) -> (bool, Types.GH_Interval2D): ...
    @overload
    def TryGetInterval2D(self, item_name: str, item_index: int) -> (bool, Types.GH_Interval2D): ...
    @overload
    def TryGetLine(self, item_name: str) -> (bool, Types.GH_Line): ...
    @overload
    def TryGetLine(self, item_name: str, item_index: int) -> (bool, Types.GH_Line): ...
    @overload
    def TryGetPlane(self, item_name: str) -> (bool, Types.GH_Plane): ...
    @overload
    def TryGetPlane(self, item_name: str, item_index: int) -> (bool, Types.GH_Plane): ...
    @overload
    def TryGetPoint2D(self, item_name: str) -> (bool, Types.GH_Point2D): ...
    @overload
    def TryGetPoint2D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point2D): ...
    @overload
    def TryGetPoint3D(self, item_name: str) -> (bool, Types.GH_Point3D): ...
    @overload
    def TryGetPoint3D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point3D): ...
    @overload
    def TryGetPoint4D(self, item_name: str) -> (bool, Types.GH_Point4D): ...
    @overload
    def TryGetPoint4D(self, item_name: str, item_index: int) -> (bool, Types.GH_Point4D): ...
    @overload
    def TryGetSingle(self, item_name: str) -> (bool, System.Single): ...
    @overload
    def TryGetSingle(self, item_name: str, item_index: int) -> (bool, System.Single): ...
    @overload
    def TryGetString(self, item_name: str) -> (bool, str): ...
    @overload
    def TryGetString(self, item_name: str, item_index: int) -> (bool, str): ...
    @overload
    def TryGetVersion(self, item_name: str) -> (bool, Types.GH_Version): ...
    @overload
    def TryGetVersion(self, item_name: str, item_index: int) -> (bool, Types.GH_Version): ...

class GH_IBinarySupport:
    """Interface which declares all methods required for objects that can be (de)serialized to and from a binary archive.

    """
    @overload
    def Read(self, reader: IO.BinaryReader) -> None: ...
    @overload
    def Write(self, writer: IO.BinaryWriter) -> None: ...

class GH_IXmlSupport:
    """Interface which declares all methods required for objects that can be (de)serialized to and from an Xml archive.

    """
    @overload
    def Read(self, node: Xml.XmlNode) -> None: ...
    @overload
    def Write(self, writer: Xml.XmlWriter) -> None: ...

class ChunkKeyedCollection(object):
    """Represents a collection of chunks with associated IDs

    """
    def __init__(self): ...
    @overload
    def Add(self, chunk: GH_Chunk) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, chunk: GH_Chunk) -> bool: ...
    @overload
    def Remove(self, id_: ID) -> bool: ...
    @overload
    def TryGetValue(self, id_: ID) -> (bool, GH_Chunk): ...

# endregion
