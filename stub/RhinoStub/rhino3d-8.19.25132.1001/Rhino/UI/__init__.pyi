"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CodeEditor", "ViewModels", "Theme", "Tether", "Runtime", "ObjectProperties", "Internal", "Forms", "DialogPanels", "Interfaces", "Controls", "EtoExtensions", "ImageResources", "RhinoEtoApp", "ViewModel", "ThemeSettings"]
# endregion

# region: Imports
from Eto import Drawing
from Eto import Forms
from Rhino import Display
from Rhino import DocObjects
from Rhino.UI import Theme
from System import Drawing
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: Exports
__all__ = ["Internal"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Gumball", "Controls", "Fonts", "ShowPanelReason", "CursorStyle", "OptionPageButtons", "PropertyPageType", "RhinoPlotWidthType", "RhinoPlotWidthValue", "RhinoGetPlotWidthArgs", "RhinoPageInterop", "PanelType", "IPanelsService", "PanelIds", "IPanel", "Panels", "PanelEventArgs", "ShowPanelEventArgs", "KeyboardKey", "MouseButton", "ModifierKey", "MouseCallbackEventArgs", "MouseCallback", "ObjectPropertiesPageEventArgs", "ObjectPropertiesPageCollection", "ObjectPropertiesPage", "OptionsDialogPage", "MouseCursor", "StatusBar", "OpenFileDialog", "SaveFileDialog", "IStackedDialogPageService", "StackedDialogPage", "ToolbarFile", "Toolbar", "ToolbarGroup", "ToolbarFileCollection", "RuiUpdateUi", "DrawingUtilities", "IHelp", "RhinoHelp", "LOC", "DistanceDisplayMode", "ILocalizationService", "Localization", "LocalizeStringPair", "IDialogService", "GetColorEventArgs", "NamedColorList", "NamedColor", "WaitCursor", "ShowMessageResult", "ShowMessageButton", "ShowMessageIcon", "ShowMessageDefaultButton", "ShowMessageOptions", "ShowMessageMode", "Dialogs", "IRhinoUiDialogService", "Size", "Style", "FloatPanelMode", "PageType", "UpdateMenuItemEventHandler", "OnColorChangedEvent"]
# endregion

# region: Imports
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import PlugIns
from Rhino import Render
from Rhino.Runtime import InteropWrappers
from Rhino.UI import Gumball
from System import Collections
from System import ComponentModel
from System import Drawing
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Fonts(object):
    """Rhino.Rumtime.UI

    """
    def __init__(self): ...
    @property
    def BoldHeadingFont(self) -> Drawing.Font: ...
    @property
    def HeadingFont(self) -> Drawing.Font: ...
    @property
    def NormalFont(self) -> Drawing.Font: ...
    @property
    def SmallFont(self) -> Drawing.Font: ...
    @property
    def TitleFont(self) -> Drawing.Font: ...
    @overload
    @staticmethod
    def GetUiFont(style: Style, size: Size) -> Drawing.Font: ...

class ShowPanelReason(enum.Enum):
    Show = 0
    Hide = 1
    HideOnDeactivate = 2
    ShowOnDeactivate = 3

class CursorStyle(enum.Enum):
    Default = 0
    Wait = 1
    CrossHair = 2
    Hand = 3
    Rotate = 4
    Magnify = 5
    ArrowCopy = 6
    CrosshairCopy = 7

class OptionPageButtons(enum.Enum):
    None_ = 0
    DefaultButton = 1
    ApplyButton = 2

class PropertyPageType(enum.Enum):
    Material = 0
    Light = 1
    Custom = 2
    ObjectProperties = 3
    Dimension = 4
    Leader = 5
    Text = 6
    Hatch = 7
    Dot = 8
    TextureMapping = 9
    Detail = 10
    ClippingPlane = 11
    NamedView = 12
    Decal = 13
    View = 14
    PageCount = 15

class RhinoPlotWidthType(enum.Enum):
    ByLayer = 0
    ByParent = 1
    Hairline = 2
    Default = 3
    None_ = 4
    Varies = 5
    Width = 6

class RhinoPlotWidthValue(enum.Enum):
    Default = 0
    Varies = -20
    ByParent = -15
    ByLayer = -10
    None_ = -1

class RhinoGetPlotWidthArgs(enum.Enum):
    NoArgs = 0
    ByLayer = 1
    ByParent = 2
    HairLine = 4
    Default = 8
    None_ = 32
    All = 268435455

class RhinoPageInterop(object):
    """For internal use only, provides access to unmanaged core Rhino.

    """
    @overload
    @staticmethod
    def NewPropertiesPanelPagePointer(page: ObjectPropertiesPage, rhinoDocRuntimeSn: System.UInt32) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StackedDialogPageFromUnmanagedPointer(pointer: System.IntPtr) -> StackedDialogPage: ...

class PanelType(enum.Enum):
    PerDoc = 0
    System = 1

class IPanelsService:
    """For internal use, the IPanels service is implemented in RhinoWindows or RhinoMac as appropriate and handles the communication with core Rhino

    """
    @overload
    def CreateDockBar(self, options: object) -> bool: ...
    @overload
    def DestroyNativeWindow(self, host: object, nativeObject: object, disposeOfNativeObject: bool) -> None: ...
    @overload
    def DockBarIdInUse(self, barId: System.Guid) -> bool: ...
    @overload
    def DockBarIsVisible(self, barId: System.Guid) -> bool: ...
    @overload
    def FactoryResetSettings() -> None: ...
    @overload
    def Float(self, barId: System.Guid, point: Drawing.Point) -> bool: ...
    @overload
    def ResizeFloating(self, barId: System.Guid, size: Drawing.Size) -> bool: ...
    @overload
    def SetF1Hook(self, nativeObject: object, hook: System.EventHandler) -> None: ...
    @overload
    def ShowDockBar(self, barId: System.Guid, show: bool) -> bool: ...
    @overload
    def StartDraggingDockBar(self, barId: System.Guid, mouseDownPoint: Drawing.Point, screenStartPoint: Drawing.Point) -> bool: ...
    @overload
    def SupportedType(self, type_: System.Type) -> (bool, str): ...
    @overload
    def ToggleDocking(self, barId: System.Guid) -> bool: ...
    @overload
    def UnhookDeleteAndDestroyDockBar(self, id_: System.Guid) -> bool: ...

class PanelIds(object):
    """Standard Rhino panel ids.

    """
    @property
    def BoxEdit(self) -> System.Guid: ...
    @property
    def ContextHelp(self) -> System.Guid: ...
    @property
    def Display(self) -> System.Guid: ...
    @property
    def Environment(self) -> System.Guid: ...
    @property
    def FileExplorer(self) -> System.Guid: ...
    @property
    def GroundPlane(self) -> System.Guid: ...
    @property
    def Layers(self) -> System.Guid: ...
    @property
    def Libraries(self) -> System.Guid: ...
    @property
    def LightManager(self) -> System.Guid: ...
    @property
    def Materials(self) -> System.Guid: ...
    @property
    def Notes(self) -> System.Guid: ...
    @property
    def ObjectProperties(self) -> System.Guid: ...
    @property
    def Rendering(self) -> System.Guid: ...
    @property
    def Sun(self) -> System.Guid: ...
    @property
    def Texture(self) -> System.Guid: ...

class IPanel:
    """Implement this interface when you want to be notified of when a panel is shown, hidden or closed.

    """
    @overload
    def PanelClosing(self, documentSerialNumber: System.UInt32, onCloseDocument: bool) -> None: ...
    @overload
    def PanelHidden(self, documentSerialNumber: System.UInt32, reason: ShowPanelReason) -> None: ...
    @overload
    def PanelShown(self, documentSerialNumber: System.UInt32, reason: ShowPanelReason) -> None: ...

class Panels(object):
    """Access to Rhino panels and register custom panels

    """
    @overload
    @staticmethod
    def ChangePanelIcon(panelType: System.Type, fullPathToResource: str) -> None: ...
    @overload
    @staticmethod
    def ChangePanelIcon(panelType: System.Type, icon: Drawing.Icon) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelType: System.Type) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelId: System.Guid) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelType: System.Type, doc: Rhino.RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelId: System.Guid, doc: Rhino.RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def DockBarIdInUse(dockBarId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def FloatPanel(panelTypeId: System.Guid, mode: FloatPanelMode) -> bool: ...
    @overload
    @staticmethod
    def FloatPanel(panelType: System.Type, mode: FloatPanelMode) -> bool: ...
    @property
    def EtoPanelStyleName(self) -> str: ...
    @property
    def IconSize(self) -> Drawing.Size: ...
    @property
    def IconSizeInPixels(self) -> Drawing.Size: ...
    @property
    def ScaledIconSize(self) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetOpenPanelIds() -> System.System.Array[System.Guid]: ...
    @overload
    @staticmethod
    def GetPanel(rhinoDoc: Rhino.RhinoDoc) -> T: ...
    @overload
    @staticmethod
    def GetPanel(documentSerialNumber: System.UInt32) -> T: ...
    @overload
    @staticmethod
    def GetPanel(panelId: System.Guid, rhinoDoc: Rhino.RhinoDoc) -> object: ...
    @overload
    @staticmethod
    def GetPanel(panelId: System.Guid, documentSerialNumber: System.UInt32) -> object: ...
    @overload
    @staticmethod
    def GetPanels(documentRuntimeSerialNumber: System.UInt32) -> System.Array[T]: ...
    @overload
    @staticmethod
    def GetPanels(doc: Rhino.RhinoDoc) -> System.Array[T]: ...
    @overload
    @staticmethod
    def GetPanels(panelId: System.Guid, doc: Rhino.RhinoDoc) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def GetPanels(panelId: System.Guid, documentRuntimeSerialNumber: System.UInt32) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def IsHiding(reason: ShowPanelReason) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelId: System.Guid, isSelectedTab: bool) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelType: System.Type, isSelectedTab: bool) -> bool: ...
    @overload
    @staticmethod
    def IsShowing(reason: ShowPanelReason) -> bool: ...
    @overload
    @staticmethod
    def OnClosePanel(panelId: System.Guid, documentSerialNumber: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def OnShowPanel(panelId: System.Guid, documentSerialNumber: System.UInt32, show: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(panelId: System.Guid) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(panelType: System.Type) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(panelType: System.Type, makeSelectedPanel: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: System.Guid, panelId: System.Guid) -> System.Guid: ...
    @overload
    @staticmethod
    def OpenPanel(panelId: System.Guid, makeSelectedPanel: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: System.Guid, panelType: System.Type) -> System.Guid: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: System.Guid, panelId: System.Guid, makeSelectedPanel: bool) -> System.Guid: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: System.Guid, panelType: System.Type, makeSelectedPanel: bool) -> System.Guid: ...
    @overload
    @staticmethod
    def OpenPanelAsSibling(panelId: System.Guid, siblingPanelId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def OpenPanelAsSibling(panelId: System.Guid, siblingPanelId: System.Guid, makeSelectedPanel: bool) -> bool: ...
    @overload
    @staticmethod
    def PanelDockBar(panelType: System.Type) -> System.Guid: ...
    @overload
    @staticmethod
    def PanelDockBar(panelId: System.Guid) -> System.Guid: ...
    @overload
    @staticmethod
    def PanelDockBars(panelId: System.Guid) -> System.System.Array[System.Guid]: ...
    @overload
    @staticmethod
    def RegisterPanel(plugin: PlugIns.PlugIn, panelType: System.Type, caption: str, icon: Drawing.Icon) -> None: ...
    @overload
    @staticmethod
    def RegisterPanel(plugIn: PlugIns.PlugIn, type_: System.Type, caption: str, icon: Drawing.Icon, panelType: PanelType) -> None: ...
    @overload
    @staticmethod
    def RegisterPanel(plugIn: PlugIns.PlugIn, type_: System.Type, caption: str, iconAssembly: Reflection.Assembly, iconResourceId: str, panelType: PanelType) -> None: ...
    @property
    def Show(self): ...
    @property
    def Closed(self): ...

class PanelEventArgs(System.EventArgs):
    """Panels.Show event arguments

    """
    def __init__(self, panelId: System.Guid, documentSerialNumber: System.UInt32): ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> System.UInt32: ...
    @property
    def PanelId(self) -> System.Guid: ...

class ShowPanelEventArgs(PanelEventArgs):
    """Panels.Show event arguments

    """
    def __init__(self, panelId: System.Guid, documentSerialNumber: System.UInt32, show: bool): ...
    @property
    def Show(self) -> bool: ...

class KeyboardKey(enum.Enum):
    None_ = 0
    Tab = 9
    PageUp = 33
    PageDown = 34
    End = 35
    Home = 36
    Num0 = 48
    Num1 = 49
    Num2 = 50
    Num3 = 51
    Num4 = 52
    Num5 = 53
    Num6 = 54
    Num7 = 55
    Num8 = 56
    Num9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    Semicolon = 186
    Equal = 187
    Comma = 188
    Minus = 189
    Period = 190
    Slash = 191
    Grave = 192
    LeftBracket = 219
    BackSlash = 220
    RightBracket = 221
    Quote = 222

class MouseButton(enum.Enum):
    None_ = 0
    Left = 1
    Right = 2
    Middle = 4

class ModifierKey(enum.Enum):
    None_ = 0
    Control = 1
    MacCommand = 1
    Shift = 2
    Alt = 4
    MacControl = 8

class MouseCallbackEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @property
    def Button(self) -> Forms.MouseButtons: ...
    @property
    def CtrlKeyDown(self) -> bool: ...
    @property
    def MouseButton(self) -> MouseButton: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @property
    def View(self) -> Display.RhinoView: ...
    @property
    def ViewportPoint(self) -> Drawing.Point: ...
    @overload
    def IsOverGumball() -> Gumball.GumballMode: ...

class MouseCallback(object):
    """Used for intercepting mouse events in the Rhino views.

    """
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class ObjectPropertiesPageEventArgs(object):
    """
    """
    def __init__(self, page: ObjectPropertiesPage): ...
    @property
    def DocRuntimeSerialNumber(self) -> System.UInt32: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventRuntimeSerialNumber(self) -> System.UInt32: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @property
    def ObjectTypes(self) -> System.UInt32: ...
    @property
    def Page(self) -> ObjectPropertiesPage: ...
    @property
    def View(self) -> Display.RhinoView: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...
    @overload
    def GetObjects() -> System.Array[T]: ...
    @overload
    def GetObjects(self, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def IncludesObjectsType() -> bool: ...
    @overload
    def IncludesObjectsType(self, objectTypes: DocObjects.ObjectType) -> bool: ...
    @overload
    def IncludesObjectsType(self, allMustMatch: bool) -> bool: ...
    @overload
    def IncludesObjectsType(self, objectTypes: DocObjects.ObjectType, allMustMatch: bool) -> bool: ...

class ObjectPropertiesPageCollection(object):
    """Passed to Rhino.PlugIns.PlugIn.ObjectPropertiesPages to allow a plug-in to add custom ObjectPropertiesPage pages to the Rhino properties panel.

    """
    @overload
    def Add(self, page: ObjectPropertiesPage) -> None: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentRuntimeSerialNumber(self) -> System.UInt32: ...

class ObjectPropertiesPage(object):
    """Base class used to add object property user interface panels

    """
    @overload
    def AnySelectedObject() -> bool: ...
    @overload
    def AnySelectedObject(self, allMustMatch: bool) -> bool: ...
    @property
    def AllObjectsMustBeSupported(self) -> bool: ...
    @property
    def EnglishPageTitle(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Index(self) -> int: ...
    @property
    def LocalPageTitle(self) -> str: ...
    @property
    def PageControl(self) -> object: ...
    @property
    def PageIconEmbeddedResourceString(self) -> str: ...
    @property
    def PageType(self) -> PropertyPageType: ...
    @property
    def SelectedObjects(self) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @property
    def SupportedTypes(self) -> DocObjects.ObjectType: ...
    @property
    def SupportsSubObjects(self) -> bool: ...
    @overload
    def GetSelectedObjects() -> System.Array[T]: ...
    @overload
    def GetSelectedObjects(self, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def ModifyPage(self, callbackAction: System.Action) -> None: ...
    @overload
    def OnActivate(self, active: bool) -> bool: ...
    @overload
    def OnCreateParent(self, hwndParent: System.IntPtr) -> None: ...
    @overload
    def OnHelp() -> None: ...
    @overload
    def OnSizeParent(self, width: int, height: int) -> None: ...
    @overload
    def PageIcon(self, sizeInPixels: Drawing.Size) -> Drawing.Icon: ...
    @overload
    def RunScript(self, e: ObjectPropertiesPageEventArgs) -> Commands.Result: ...
    @overload
    def ShouldDisplay(self, e: ObjectPropertiesPageEventArgs) -> bool: ...
    @overload
    def UpdatePage(self, e: ObjectPropertiesPageEventArgs) -> None: ...

class OptionsDialogPage(StackedDialogPage):
    """    """
    @property
    def OptionsPageType(self) -> PageType: ...
    @overload
    def RunScript(self, doc: Rhino.RhinoDoc, mode: Commands.RunMode) -> Commands.Result: ...

class MouseCursor(object):
    """Contains static methods to control the mouse icon.

    """
    @property
    def Location(self) -> Geometry.Point2d: ...
    @overload
    @staticmethod
    def SetToolTip(tooltip: str) -> None: ...

class StatusBar(object):
    """Contains static methods to control the application status bar.

    """
    @overload
    @staticmethod
    def ClearMessagePane() -> None: ...
    @overload
    @staticmethod
    def HideProgressMeter() -> None: ...
    @overload
    @staticmethod
    def HideProgressMeter(docSerialNumber: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def SetDistancePane(distance: float) -> None: ...
    @overload
    @staticmethod
    def SetMessagePane(message: str) -> None: ...
    @overload
    @staticmethod
    def SetNumberPane(number: float) -> None: ...
    @overload
    @staticmethod
    def SetPointPane(point: Geometry.Point3d) -> None: ...
    @overload
    @staticmethod
    def ShowProgressMeter(lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int: ...
    @overload
    @staticmethod
    def ShowProgressMeter(docSerialNumber: System.UInt32, lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(label: str, position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(docSerialNumber: System.UInt32, position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(docSerialNumber: System.UInt32, label: str, position: int, absolute: bool) -> int: ...

class OpenFileDialog(object):
    """Similar to the System.Windows.Forms.OpenFileDialog, but with customized Rhino user interface.

    """
    def __init__(self): ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileNames(self) -> System.System.Array[str]: ...
    @property
    def Filter(self) -> str: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @DefaultExt.setter
    def DefaultExt(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: System.Void): ...
    @MultiSelect.setter
    def MultiSelect(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @overload
    def ShowOpenDialog() -> bool: ...

class SaveFileDialog(object):
    """Similar to the System.Windows.Forms.SaveFileDialog, but with customized Rhino user interface.

    """
    def __init__(self): ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Filter(self) -> str: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @DefaultExt.setter
    def DefaultExt(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @overload
    def ShowSaveDialog() -> bool: ...

class IStackedDialogPageService:
    """For internal use, the IStackedDialogPageService service is implemented in RhinoWindows or RhinoMac as appropriate and handles the communication with core Rhino

    """
    @overload
    def GetImageHandle(self, image: Drawing.Image, canBeNull: bool) -> System.IntPtr: ...
    @overload
    def GetImageHandle(self, icon: Drawing.Icon, canBeNull: bool) -> System.IntPtr: ...
    @overload
    def GetNativePageWindow(self, nativeWindowObject: object, isRhinoPanel: bool, applyPanelStyles: bool) -> (System.IntPtr, object): ...
    @overload
    def GetNativePageWindow(self, pageObject: object, isRhinoPanel: bool, applyPanelStyles: bool) -> (System.IntPtr, object, object): ...
    @overload
    def NativeHandle(self, host: object) -> System.IntPtr: ...
    @overload
    def RedrawPageControl(self, pageControl: object) -> None: ...
    @overload
    def SetNativeParent(self, hwndParent: System.IntPtr, host: object) -> bool: ...
    @overload
    def TryGetControlMinimumSize(self, controlObject: object) -> (bool, Drawing.SizeF): ...

class StackedDialogPage(object):
    """Base class to inherit from for the addition of stacked dialog pages.

    """
    @overload
    def AddChildPage(self, pageToAdd: StackedDialogPage) -> None: ...
    @property
    def Children(self) -> Generic.List: ...
    @property
    def EnglishPageTitle(self) -> str: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def LocalPageTitle(self) -> str: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def NavigationTextColor(self) -> Drawing.Color: ...
    @property
    def NavigationTextIsBold(self) -> bool: ...
    @property
    def PageControl(self) -> object: ...
    @property
    def PageImage(self) -> Drawing.Image: ...
    @property
    def ShowApplyButton(self) -> bool: ...
    @property
    def ShowDefaultsButton(self) -> bool: ...
    @overload
    def MakeActivePage() -> None: ...
    @overload
    def OnActivate(self, active: bool) -> bool: ...
    @overload
    def OnApply() -> bool: ...
    @overload
    def OnCancel() -> None: ...
    @overload
    def OnCreateParent(self, hwndParent: System.IntPtr) -> None: ...
    @overload
    def OnDefaults() -> None: ...
    @overload
    def OnHelp() -> None: ...
    @overload
    def OnSizeParent(self, width: int, height: int) -> None: ...
    @overload
    def RemovePage() -> None: ...
    @Modified.setter
    def Modified(self, value: System.Void): ...
    @NavigationTextColor.setter
    def NavigationTextColor(self, value: System.Void): ...
    @NavigationTextIsBold.setter
    def NavigationTextIsBold(self, value: System.Void): ...
    @overload
    def SetActivePageTo(self, pageName: str, documentPropertiesPage: bool) -> bool: ...
    @overload
    def SetEnglishPageTitle(self, newPageTile: str) -> None: ...

class ToolbarFile(object):
    """Represents a Rhino toolbar, or .RUI, file.

    """
    @overload
    def Close(self, prompt: bool) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def ToolbarCount(self) -> int: ...
    @overload
    def GetGroup(self, index: int) -> ToolbarGroup: ...
    @overload
    def GetGroup(self, name: str) -> ToolbarGroup: ...
    @overload
    def GetToolbar(self, index: int) -> Toolbar: ...
    @overload
    def Save() -> bool: ...
    @overload
    def SaveAs(self, path: str) -> bool: ...

class Toolbar(object):
    """Represents a toolbar in a Rhino toolbar, or .RUI, file.

    """
    @property
    def BitmapSize(self) -> Drawing.Size: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def TabSize(self) -> Drawing.Size: ...
    @BitmapSize.setter
    def BitmapSize(self, value: System.Void): ...
    @TabSize.setter
    def TabSize(self, value: System.Void): ...

class ToolbarGroup(object):
    """Represents a toolbar group in a Rhino toolbar, or .RUI, file.

    """
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class ToolbarFileCollection(object):
    """Represents a collection of Rhino toolbars, or .RUI, files.

    """
    @overload
    def FindByName(self, name: str, ignoreCase: bool) -> ToolbarFile: ...
    @overload
    def FindByPath(self, path: str) -> ToolbarFile: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ToolbarFile: ...
    @property
    def MruSidebarIsVisible(self) -> bool: ...
    @property
    def SidebarIsVisible(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Open(self, path: str) -> ToolbarFile: ...
    @MruSidebarIsVisible.setter
    def MruSidebarIsVisible(self, value: System.Void): ...
    @SidebarIsVisible.setter
    def SidebarIsVisible(self, value: System.Void): ...

class RuiUpdateUi(System.EventArgs):
    """    """
    @property
    def Checked(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FileId(self) -> System.Guid: ...
    @property
    def MenuHandle(self) -> System.IntPtr: ...
    @property
    def MenuId(self) -> System.Guid: ...
    @property
    def MenuIndex(self) -> int: ...
    @property
    def MenuItemId(self) -> System.Guid: ...
    @property
    def RadioChecked(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def WindowsMenuItemId(self) -> System.UInt32: ...
    @overload
    @staticmethod
    def RegisterMenuItem(file: System.Guid, menu: System.Guid, item: System.Guid, callBack: UpdateMenuItemEventHandler) -> bool: ...
    @overload
    @staticmethod
    def RegisterMenuItem(fileId: str, menuId: str, itemId: str, callBack: UpdateMenuItemEventHandler) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @RadioChecked.setter
    def RadioChecked(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class DrawingUtilities(object):
    """RhinoCommon Drawing Utilities

    """
    @overload
    @staticmethod
    def BitmapFromIconResource(resourceName: str, assembly: Reflection.Assembly) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromIconResource(resourceName: str, bitmapSize: Drawing.Size, assembly: Reflection.Assembly) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromSvg(svg: str, width: int, height: int) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromSvg(svg: str, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateCurvePreviewGeometry(curve: Geometry.Curve, linetype: DocObjects.Linetype, width: int, height: int) -> Generic.List: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(meshes: Generic.IEnumerable, colors: Generic.IEnumerable, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(mesh: Geometry.Mesh, color: Drawing.Color, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(doc: Rhino.RhinoDoc, meshes: Generic.IEnumerable, colors: Generic.IEnumerable, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def DarkModeConvertPixel() -> (System.Byte, System.Byte, System.Byte): ...
    @overload
    @staticmethod
    def DarkModeConvertPixels() -> (System.System.Array[System.Byte]): ...
    @overload
    @staticmethod
    def IconFromResource(resourceName: str, assembly: Reflection.Assembly) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def IconFromResource(resourceName: str, size: Drawing.Size, assembly: Reflection.Assembly) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def ImageFromResource(resourceName: str, assembly: Reflection.Assembly) -> Drawing.Image: ...
    @overload
    @staticmethod
    def LoadBitmapWithScaleDown(iconName: str, sizeDesired: int, assembly: Reflection.Assembly) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def LoadIconWithScaleDown(iconName: str, sizeDesired: int, assembly: Reflection.Assembly) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def MakeArgb(a: System.Byte, r: System.Byte, g: System.Byte, b: System.Byte) -> int: ...
    @overload
    @staticmethod
    def PixelsFromSvg(svg: str, width: int, height: int, premultiplyAlpha: bool, backgroundColor: Drawing.Color) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def SvgToRhinoDibIntPtr(svg: str, width: int, height: int, adjustForDarkMode: bool, pRhinoDib: System.IntPtr) -> None: ...

class IHelp:
    """Implement this class to add help to a modeless UI panel.

    """
    @property
    def HelpUrl(self) -> str: ...

class RhinoHelp(object):
    """Provides access to the built in Rhino help system

    """
    @overload
    @staticmethod
    def Show(helpLink: str) -> bool: ...

class LOC(object):
    """Used a placeholder which is used by LocalizationProcessor application to create contextId mapped localized strings.

    """
    @overload
    @staticmethod
    def COMMANDNAME(english: str) -> str: ...
    @overload
    @staticmethod
    def CON(english: str) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def CON(english: str, assemblyFromObject: object) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def COV(english: str) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def COV(english: str, assemblyFromObject: object) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def STR(english: str) -> str: ...
    @overload
    @staticmethod
    def STR(english: str, assemblyOrObject: object) -> str: ...

class DistanceDisplayMode(enum.Enum):
    Decimal = 0
    Fractional = 1
    FeetInches = 2

class ILocalizationService:
    """    """
    @overload
    def LocalizeCommandName(self, assembly: Reflection.Assembly, languageId: int, english: str) -> str: ...
    @overload
    def LocalizeDialogItem(self, assembly: Reflection.Assembly, languageId: int, key: str, english: str) -> str: ...
    @overload
    def LocalizeForm(self, assembly: Reflection.Assembly, languageId: int, formOrUserControl: object) -> None: ...
    @overload
    def LocalizeString(self, assembly: Reflection.Assembly, languageId: int, english: str, contextId: int) -> str: ...

class Localization(object):
    """    """
    @overload
    @staticmethod
    def FormatArea(area: float, units: Rhino.UnitSystem, dimStyle: DocObjects.DimensionStyle, alternate: bool) -> str: ...
    @overload
    @staticmethod
    def FormatDistanceAndTolerance(distance: float, units: Rhino.UnitSystem, dimStyle: DocObjects.DimensionStyle, alternate: bool) -> str: ...
    @overload
    @staticmethod
    def FormatNumber(x: float) -> str: ...
    @overload
    @staticmethod
    def FormatNumber(x: float, units: Rhino.UnitSystem, mode: DistanceDisplayMode, precision: int, appendUnitSystemName: bool) -> str: ...
    @overload
    @staticmethod
    def FormatVolume(volume: float, units: Rhino.UnitSystem, dimStyle: DocObjects.DimensionStyle, alternate: bool) -> str: ...
    @property
    def CurrentLanguageId(self) -> int: ...
    @property
    def RunningAsEnglish(self) -> bool: ...
    @overload
    @staticmethod
    def GetLanguages() -> (bool, InteropWrappers.SimpleArrayInt, InteropWrappers.ClassArrayString): ...
    @overload
    @staticmethod
    def LocalizeCommandName(english: str) -> str: ...
    @overload
    @staticmethod
    def LocalizeCommandName(english: str, assemblyOrObject: object) -> str: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionName(english: str, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionName(english: str, assemblyOrObject: object, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionValue(english: str, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionValue(english: str, assemblyOrObject: object, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeDialogItem(assemblyOrObject: object, key: str, english: str) -> str: ...
    @overload
    @staticmethod
    def LocalizeForm(formOrUserControl: object) -> None: ...
    @overload
    @staticmethod
    def LocalizeString(english: str, contextId: int) -> str: ...
    @overload
    @staticmethod
    def LocalizeString(english: str, assemblyOrObject: object, contextId: int) -> str: ...
    @overload
    @staticmethod
    def SetLanguageId(id_: int) -> bool: ...
    @overload
    @staticmethod
    def UnitSystemName(units: Rhino.UnitSystem, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...

class LocalizeStringPair(object):
    """Pair of strings used for localization.

    """
    def __init__(self, english: str, local: str): ...
    @property
    def English(self) -> str: ...
    @property
    def Local(self) -> str: ...
    @overload
    def ToString() -> str: ...

class IDialogService:
    """    """
    @overload
    def ObjectToWindowHandle(self, window: object, useMainRhinoWindowWhenNull: bool) -> System.IntPtr: ...
    @overload
    def ShowColorDialog(self, parent: object, allowAlpha: bool, colorCallback: OnColorChangedEvent) -> (bool, Display.Color4f): ...
    @overload
    def ShowMultiListBox(self, title: str, message: str, items: Generic.IList, defaults: Generic.IList) -> System.System.Array[str]: ...
    @overload
    def WrapAsIWin32Window(self, handle: System.IntPtr) -> object: ...

class GetColorEventArgs(System.EventArgs):
    """    """
    @property
    def IncludeButtonColors(self) -> bool: ...
    @property
    def InputColor(self) -> Drawing.Color: ...
    @property
    def SelectedColor(self) -> Drawing.Color: ...
    @property
    def Title(self) -> str: ...
    @SelectedColor.setter
    def SelectedColor(self, value: System.Void): ...

class NamedColorList(Generic.List):
    """A list of color name/value pairs.

    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, entries: Generic.IEnumerable): ...
    @property
    def Default(self) -> NamedColorList: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class NamedColor(object):
    """An entry with name and color for the

    """
    def __init__(self, name: str, color: Drawing.Color): ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def Name(self) -> str: ...

class WaitCursor(object):
    """    """
    def __init__(self): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Set() -> None: ...

class ShowMessageResult(enum.Enum):
    None_ = 0
    OK = 1
    Cancel = 2
    Abort = 3
    Retry = 4
    Ignore = 5
    Yes = 6
    No = 7

class ShowMessageButton(enum.Enum):
    OK = 0
    OKCancel = 1
    AbortRetryIgnore = 2
    YesNoCancel = 3
    YesNo = 4
    RetryCancel = 5

class ShowMessageIcon(enum.Enum):
    None_ = 0
    Error = 16
    Hand = 16
    Stop = 16
    Question = 32
    Exclamation = 48
    Warning = 48
    Information = 64
    Asterisk = 64

class ShowMessageDefaultButton(enum.Enum):
    Button1 = 0
    Button2 = 256
    Button3 = 512

class ShowMessageOptions(enum.Enum):
    None_ = 0
    SetForeground = 65536
    DefaultDesktopOnly = 131072
    TopMost = 262144
    RightAlign = 524288
    RtlReading = 1048576
    ServiceNotification = 2097152

class ShowMessageMode(enum.Enum):
    ApplicationModal = 0
    SystemModal = 4096
    TaskModal = 8192

class Dialogs(object):
    """    """
    @overload
    @staticmethod
    def KillSplash() -> None: ...
    @overload
    @staticmethod
    def SetCustomColorDialog(handler: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def ShowAboutDialog(forceSimpleDialog: bool) -> None: ...
    @overload
    @staticmethod
    def ShowCheckListBox(title: str, message: str, items: Collections.IList, checkState: Generic.IList) -> System.System.Array[bool]: ...
    @overload
    @staticmethod
    def ShowColorDialog() -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ShowColorDialog(allowAlpha: bool) -> (bool, Display.Color4f): ...
    @overload
    @staticmethod
    def ShowColorDialog(includeButtonColors: bool, dialogTitle: str) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, allowAlpha: bool) -> (bool, Display.Color4f): ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, allowAlpha: bool, colorCallback: OnColorChangedEvent) -> (bool, Display.Color4f): ...
    @overload
    @staticmethod
    def ShowColorDialog(includeButtonColors: bool, dialogTitle: str, namedColorList: NamedColorList) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, allowAlpha: bool, namedColorList: NamedColorList, colorCallback: OnColorChangedEvent) -> (bool, Display.Color4f): ...
    @overload
    @staticmethod
    def ShowComboListBox(title: str, message: str, items: Collections.IList) -> object: ...
    @overload
    @staticmethod
    def ShowContextMenu(items: Generic.IEnumerable, screenPoint: Drawing.Point, modes: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def ShowEditBox(title: str, message: str, defaultText: str, multiline: bool) -> (bool, str): ...
    @overload
    @staticmethod
    def ShowLayerMaterialDialog(doc: Rhino.RhinoDoc, layerIndices: Generic.IEnumerable) -> bool: ...
    @overload
    @staticmethod
    def ShowLineTypes(title: str, message: str, doc: Rhino.RhinoDoc) -> object: ...
    @overload
    @staticmethod
    def ShowLineTypes(title: str, message: str, doc: Rhino.RhinoDoc, selectedLineTypeId: System.Guid) -> System.Guid: ...
    @overload
    @staticmethod
    def ShowListBox(title: str, message: str, items: Collections.IList) -> object: ...
    @overload
    @staticmethod
    def ShowListBox(title: str, message: str, items: Collections.IList, selectedItem: object) -> object: ...
    @overload
    @staticmethod
    def ShowMessage(message: str, title: str) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMessage(message: str, title: str, buttons: ShowMessageButton, icon: ShowMessageIcon) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMessage(parent: object, message: str, title: str, buttons: ShowMessageButton, icon: ShowMessageIcon, defaultButton: ShowMessageDefaultButton, options: ShowMessageOptions, mode: ShowMessageMode) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMultiListBox(title: str, message: str, items: Generic.IList, defaults: Generic.IList) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ShowNumberBox(title: str, message: str) -> (bool, float): ...
    @overload
    @staticmethod
    def ShowNumberBox(title: str, message: str, minimum: float, maximum: float) -> (bool, float): ...
    @overload
    @staticmethod
    def ShowPrintWidths(title: str, message: str) -> float: ...
    @overload
    @staticmethod
    def ShowPrintWidths(title: str, message: str, selectedWidth: float) -> float: ...
    @overload
    @staticmethod
    def ShowPropertyListBox(title: str, message: str, items: Generic.List) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ShowPropertyListBox(title: str, message: str, items: Collections.IList, values: Generic.IList) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ShowSelectLayerDialog(dialogTitle: str, showNewLayerButton: bool, showSetCurrentButton: bool) -> (bool, int, bool): ...
    @overload
    @staticmethod
    def ShowSelectLinetypeDialog(displayByLayer: bool) -> (bool, int): ...
    @overload
    @staticmethod
    def ShowSelectMultipleLayersDialog(defaultLayerIndices: Generic.IEnumerable, dialogTitle: str, showNewLayerButton: bool) -> (bool, System.System.Array[int]): ...
    @overload
    @staticmethod
    def ShowSunDialog(sun: Render.Sun) -> bool: ...
    @overload
    @staticmethod
    def ShowTextDialog(message: str, title: str) -> None: ...

class IRhinoUiDialogService:
    """Used by Rhino.UI.Dialogs to access generic Eto dialogs from Rhino Common

    """
    @overload
    def DetectColorScheme() -> (bool, bool): ...
    @overload
    def IconFromResourceId(self, iconAssembly: Reflection.Assembly, iconResourceId: str) -> Drawing.Icon: ...
    @overload
    def SetToDefaultColorScheme(self, dark: bool) -> bool: ...
    @overload
    def ShowCheckListBox(self, title: str, message: str, items: Collections.IList, checkState: Generic.IList) -> System.System.Array[bool]: ...
    @overload
    def ShowComboListBox(self, title: str, message: str, items: Collections.IList) -> object: ...
    @overload
    def ShowEditBox(self, title: str, message: str, defaultText: str, multiline: bool) -> (bool, str): ...
    @overload
    def ShowLineTypes(self, title: str, message: str, doc: Rhino.RhinoDoc) -> object: ...
    @overload
    def ShowLineTypes(self, title: str, message: str, doc: Rhino.RhinoDoc, selectedLinetypeId: System.Guid) -> System.Guid: ...
    @overload
    def ShowListBox(self, title: str, message: str, items: Collections.IList, selectedItem: object) -> object: ...
    @overload
    def ShowMultiListBox(self, items: Generic.IList, message: str, title: str, defaults: Generic.IList) -> System.System.Array[str]: ...
    @overload
    def ShowNumberBox(self, title: str, message: str, minimum: float, maximum: float) -> (bool, float): ...
    @overload
    def ShowPopupMenu(self, arrItems: System.System.Array[str], arrModes: System.System.Array[int], screenPointX: System.Nullable, screenPointY: System.Nullable) -> int: ...
    @overload
    def ShowPrintWidths(self, title: str, message: str) -> float: ...
    @overload
    def ShowPrintWidths(self, title: str, message: str, selectedWidth: float) -> float: ...
    @overload
    def ShowPropertyListBox(self, title: str, message: str, items: Generic.List) -> System.System.Array[str]: ...
    @overload
    def ShowPropertyListBox(self, title: str, message: str, items: Collections.IList, values: Generic.IList) -> System.System.Array[str]: ...

class Size(enum.Enum):
    Small = 0
    Normal = 1
    Large = 2
    Title = 3

class Style(enum.Enum):
    Regular = 0
    Bold = 1
    Italic = 2
    Underline = 4
    Strikeout = 8

class FloatPanelMode(enum.Enum):
    Show = 0
    Hide = 1
    Toggle = 2

class PageType(enum.Enum):
    Options = 0
    DocumentProperties = 1

class UpdateMenuItemEventHandler(System.MulticastDelegate):
    """Menu item update delegate

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, cmdui: RuiUpdateUi, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, cmdui: RuiUpdateUi) -> None: ...

class OnColorChangedEvent(System.MulticastDelegate):
    """May be optionally passed to ShowColorDialog and will get called when the color value changes in the color dialog.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, color: Display.Color4f, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, color: Display.Color4f) -> None: ...

# endregion

# region: Rhino.UI, Version=8.19.25132.1001

class EtoExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetRhinoDoc(form: Forms.Form) -> Rhino.RhinoDoc: ...
    @overload
    @staticmethod
    def LocalizeAndRestore(window: Forms.Window, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def PushPickButton(panel: Forms.Panel, pickFunction: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def PushPickButton(window: Forms.Window, pickFunction: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def RestorePosition(window: Forms.Window, type_: System.Type) -> bool: ...
    @overload
    @staticmethod
    def SavePosition(window: Forms.Window, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def Show(form: Forms.Form, doc: Rhino.RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def ShowSemiModal(dialog: Forms.Dialog, doc: Rhino.RhinoDoc, parent: Forms.Control) -> T: ...
    @overload
    @staticmethod
    def ShowSemiModal(dialog: Forms.Dialog, doc: Rhino.RhinoDoc, parent: Forms.Control) -> None: ...
    @overload
    @staticmethod
    def ToColor4f(color: Drawing.Color) -> Display.Color4f: ...
    @overload
    @staticmethod
    def ToEto(color: Display.Color4f) -> Drawing.Color: ...
    @overload
    @staticmethod
    def ToEto(bmp: Drawing.Bitmap) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def ToEto(font: DocObjects.Font) -> Drawing.FontTypeface: ...
    @overload
    @staticmethod
    def ToEto(color: Drawing.Color) -> Drawing.Color: ...
    @overload
    @staticmethod
    def ToEto(font: Drawing.Font) -> Drawing.Font: ...
    @overload
    @staticmethod
    def ToEto(icon: Drawing.Icon, useMainWindowPixelSize: bool) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def ToEto(image: Drawing.Bitmap, useMainWindowPixelSize: bool) -> Drawing.Image: ...
    @overload
    @staticmethod
    def ToEto(font: DocObjects.Font, size: System.Single, decoration: Drawing.FontDecoration) -> Drawing.Font: ...
    @overload
    @staticmethod
    def ToEto(familyName: str, faceName: str, size: System.Single) -> Drawing.Font: ...
    @overload
    @staticmethod
    def ToEtoScreen(point: Drawing.Point, screen: Forms.Screen) -> Drawing.PointF: ...
    @overload
    @staticmethod
    def ToEtoScreen(rect: Drawing.Rectangle, screen: Forms.Screen) -> Drawing.RectangleF: ...
    @overload
    @staticmethod
    def ToSystemDrawing(color: Drawing.Color) -> Drawing.Color: ...
    @overload
    @staticmethod
    def ToSystemDrawingScreen(point: Drawing.Point, screen: Forms.Screen) -> Drawing.Point: ...
    @overload
    @staticmethod
    def ToSystemDrawingScreen(point: Drawing.PointF, screen: Forms.Screen) -> Drawing.Point: ...
    @overload
    @staticmethod
    def ToSystemDrawingScreen(rect: Drawing.RectangleF, screen: Forms.Screen) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def ToSystemDrawingScreen(rect: Drawing.Rectangle, screen: Forms.Screen) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def UseRhinoStyle(control: Forms.Control) -> None: ...
    @overload
    @staticmethod
    def WindowsFromDocument(doc: Rhino.RhinoDoc) -> Generic.IEnumerable: ...

class ImageResources(object):
    """    """
    @overload
    @staticmethod
    def CreateBitmap(resourceId: System.Guid, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateBitmap(resourceId: System.Guid, width: int, height: int, adjustForDarkMode: bool, forceDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateEtoBitmap(resourceId: System.Guid, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateEtoBitmap(svgContent: str, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateEtoBitmap(fullPathToResource: str, assembly: Reflection.Assembly, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CreateEtoIcon(svgContents: str, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def CreateEtoIcon(resourceId: System.Guid, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def CreateEtoIcon(fullPathToResource: str, assembly: Reflection.Assembly, width: int, height: int, adjustForDarkMode: bool) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def ModifySvgForCustomDarkModeAttributes(svgContent: str) -> (str, bool): ...
    @overload
    @staticmethod
    def SvgFromResourceId(fullPathToResource: str, assembly: Reflection.Assembly) -> str: ...
    @overload
    @staticmethod
    def SvgFromResourceId(resourceId: System.Guid, darkMode: bool) -> str: ...
    @overload
    @staticmethod
    def SvgResourceFromId(resourceId: System.Guid) -> System.Tuple: ...

class RhinoEtoApp(object):
    """    """
    @overload
    @staticmethod
    def ApplicationPreferencesWindowForPage(page: OptionsDialogPage) -> Forms.Window: ...
    @overload
    @staticmethod
    def DocumentPropertiesWindowForPage(page: OptionsDialogPage) -> Forms.Window: ...
    @property
    def MainWindow(self) -> Forms.Window: ...
    @property
    def MainWindowForOwner(self) -> Forms.Window: ...
    @overload
    @staticmethod
    def MainWindowForDocument(doc: Rhino.RhinoDoc) -> Forms.Window: ...

class ViewModel(object):
    """    """
    @overload
    def DistanceDisplayPrecisionFromDoc(self, doc: Rhino.RhinoDoc) -> None: ...
    @property
    def ModelDistanceDisplayMode(self) -> DistanceDisplayMode: ...
    @property
    def ModelDistanceDisplayPrecision(self) -> int: ...
    @property
    def ModelUnitSystem(self) -> Rhino.UnitSystem: ...
    @property
    def PageDistanceDisplayMode(self) -> DistanceDisplayMode: ...
    @property
    def PageDistanceDisplayPrecision(self) -> int: ...
    @property
    def PageUnitSystem(self) -> Rhino.UnitSystem: ...
    @overload
    def OkToClose(self, parent: object) -> bool: ...
    @ModelDistanceDisplayMode.setter
    def ModelDistanceDisplayMode(self, value: System.Void): ...
    @ModelDistanceDisplayPrecision.setter
    def ModelDistanceDisplayPrecision(self, value: System.Void): ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: System.Void): ...
    @PageDistanceDisplayMode.setter
    def PageDistanceDisplayMode(self, value: System.Void): ...
    @PageDistanceDisplayPrecision.setter
    def PageDistanceDisplayPrecision(self, value: System.Void): ...
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: System.Void): ...
    @overload
    def UnitsAndDistanceDisplayFromDoc(self, doc: Rhino.RhinoDoc) -> None: ...
    @overload
    def UnitsDistanceDisplayAndPrecisionFromDoc(self, doc: Rhino.RhinoDoc) -> None: ...
    @property
    def PropertyChanged(self): ...
    @property
    def ModleUnitsChanged(self): ...
    @property
    def PageUnitsChanged(self): ...

class ThemeSettings(object):
    """    """
    @property
    def ThemeChanged(self) -> System.EventHandler: ...
    @property
    def Content(self) -> Theme.ContentThemeZone: ...
    @property
    def Frame(self) -> Theme.FrameThemeZone: ...

# endregion
