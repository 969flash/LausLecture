"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["TabPanels", "OptionsPages", "MeshingUI", "BitmapHelpers", "DwgOptions", "eVersion", "eWriteAs", "eFlatten", "eColorMethod"]
# endregion

# region: Imports
from Eto import Drawing
from Rhino import DocObjects
from Rhino import UI
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: Exports
__all__ = ["DockBars"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Rhino.UI, Version=8.19.25132.1001

class BitmapHelpers(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def DrawDiamond(bmpSize: Drawing.Size, drawColor: Drawing.Color, outlineColor: Drawing.Color) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def DrawSquare(bmpSize: Drawing.Size, drawColor: Drawing.Color, outlineColor: Drawing.Color) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def DrawSquareGraphics(graphics: Drawing.Graphics, rect: Drawing.RectangleF, drawColor: Drawing.Color, outlineColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawStarOverlay(image: Drawing.Bitmap, numberOfStarPoints: int) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def DrawStarOverlay(icon: Drawing.Icon, numberOfStarPoints: int) -> Drawing.Icon: ...
    @overload
    @staticmethod
    def GetHatchPreviewBmp(size: Drawing.Size, drawColor: Drawing.Color, outlineColor: Drawing.Color, hatchPattern: DocObjects.HatchPattern) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def GetHatchPreviewBmp(size: Drawing.Size, drawColor: Drawing.Color, outlineColor: Drawing.Color, rotationAngle: int, hatchPattern: DocObjects.HatchPattern) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def GetLinetypePreview(size: Drawing.Size, lt: DocObjects.Linetype) -> Drawing.Bitmap: ...

class DwgOptions(UI.ViewModel):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def ColorMethodList() -> Generic.List: ...
    @overload
    @staticmethod
    def FlattenList() -> Generic.List: ...
    @overload
    @staticmethod
    def FlattenUIName(input_: eFlatten) -> str: ...
    @property
    def AcadVersion(self) -> eVersion: ...
    @property
    def AcadVersionDropdownIndex(self) -> int: ...
    @property
    def ColorMethod(self) -> eColorMethod: ...
    @property
    def ColorMethodIndex(self) -> int: ...
    @property
    def CurveChordHeight(self) -> float: ...
    @property
    def CurveMaxAngleDegrees(self) -> float: ...
    @property
    def CurveSegmentLength(self) -> float: ...
    @property
    def CurveUseChordHeight(self) -> bool: ...
    @property
    def CurveUseMaxAngle(self) -> bool: ...
    @property
    def CurveUseSegmentLength(self) -> bool: ...
    @property
    def Deleted(self) -> bool: ...
    @property
    def Flatten(self) -> eFlatten: ...
    @property
    def FlattenDropdownIndex(self) -> int: ...
    @property
    def FullLayerPath(self) -> bool: ...
    @property
    def FullLayerPathIndex(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def MinPointDistance(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def NoDxfHeader(self) -> bool: ...
    @property
    def PreserveArcNormals(self) -> bool: ...
    @property
    def PreserveArcNormalsIndex(self) -> int: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SimplifyTolerance(self) -> float: ...
    @property
    def SortIndex(self) -> int: ...
    @property
    def SplitPolycurves(self) -> bool: ...
    @property
    def SplitSplines(self) -> bool: ...
    @property
    def UseLwPolylines(self) -> bool: ...
    @property
    def WriteArcsAs(self) -> eWriteAs: ...
    @property
    def WriteArcsAsDropdownIndex(self) -> int: ...
    @property
    def WriteLinesAs(self) -> eWriteAs: ...
    @property
    def WriteLinesAsDropdownIndex(self) -> int: ...
    @property
    def WriteMeshesAs(self) -> eWriteAs: ...
    @property
    def WriteMeshesAsDropdownIndex(self) -> int: ...
    @property
    def WritePolycurvesAs(self) -> eWriteAs: ...
    @property
    def WritePolycurvesAsDropdownIndex(self) -> int: ...
    @property
    def WritePolylinesAs(self) -> eWriteAs: ...
    @property
    def WritePolylinesAsDropdownIndex(self) -> int: ...
    @property
    def WriteSplinesAs(self) -> eWriteAs: ...
    @property
    def WriteSplinesAsDropdownIndex(self) -> int: ...
    @property
    def WriteSurfacesAs(self) -> eWriteAs: ...
    @property
    def WriteSurfacesAsDropdownIndex(self) -> int: ...
    @overload
    @staticmethod
    def LocalizedDefaultName() -> str: ...
    @AcadVersion.setter
    def AcadVersion(self, value: System.Void): ...
    @AcadVersionDropdownIndex.setter
    def AcadVersionDropdownIndex(self, value: System.Void): ...
    @ColorMethod.setter
    def ColorMethod(self, value: System.Void): ...
    @ColorMethodIndex.setter
    def ColorMethodIndex(self, value: System.Void): ...
    @CurveChordHeight.setter
    def CurveChordHeight(self, value: System.Void): ...
    @CurveMaxAngleDegrees.setter
    def CurveMaxAngleDegrees(self, value: System.Void): ...
    @CurveSegmentLength.setter
    def CurveSegmentLength(self, value: System.Void): ...
    @CurveUseChordHeight.setter
    def CurveUseChordHeight(self, value: System.Void): ...
    @CurveUseMaxAngle.setter
    def CurveUseMaxAngle(self, value: System.Void): ...
    @CurveUseSegmentLength.setter
    def CurveUseSegmentLength(self, value: System.Void): ...
    @Deleted.setter
    def Deleted(self, value: System.Void): ...
    @Flatten.setter
    def Flatten(self, value: System.Void): ...
    @FlattenDropdownIndex.setter
    def FlattenDropdownIndex(self, value: System.Void): ...
    @FullLayerPath.setter
    def FullLayerPath(self, value: System.Void): ...
    @FullLayerPathIndex.setter
    def FullLayerPathIndex(self, value: System.Void): ...
    @Index.setter
    def Index(self, value: System.Void): ...
    @IsDefault.setter
    def IsDefault(self, value: System.Void): ...
    @MinPointDistance.setter
    def MinPointDistance(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @NoDxfHeader.setter
    def NoDxfHeader(self, value: System.Void): ...
    @PreserveArcNormals.setter
    def PreserveArcNormals(self, value: System.Void): ...
    @PreserveArcNormalsIndex.setter
    def PreserveArcNormalsIndex(self, value: System.Void): ...
    @Simplify.setter
    def Simplify(self, value: System.Void): ...
    @SimplifyTolerance.setter
    def SimplifyTolerance(self, value: System.Void): ...
    @SortIndex.setter
    def SortIndex(self, value: System.Void): ...
    @SplitPolycurves.setter
    def SplitPolycurves(self, value: System.Void): ...
    @SplitSplines.setter
    def SplitSplines(self, value: System.Void): ...
    @UseLwPolylines.setter
    def UseLwPolylines(self, value: System.Void): ...
    @WriteArcsAs.setter
    def WriteArcsAs(self, value: System.Void): ...
    @WriteArcsAsDropdownIndex.setter
    def WriteArcsAsDropdownIndex(self, value: System.Void): ...
    @WriteLinesAs.setter
    def WriteLinesAs(self, value: System.Void): ...
    @WriteLinesAsDropdownIndex.setter
    def WriteLinesAsDropdownIndex(self, value: System.Void): ...
    @WriteMeshesAs.setter
    def WriteMeshesAs(self, value: System.Void): ...
    @WriteMeshesAsDropdownIndex.setter
    def WriteMeshesAsDropdownIndex(self, value: System.Void): ...
    @WritePolycurvesAs.setter
    def WritePolycurvesAs(self, value: System.Void): ...
    @WritePolycurvesAsDropdownIndex.setter
    def WritePolycurvesAsDropdownIndex(self, value: System.Void): ...
    @WritePolylinesAs.setter
    def WritePolylinesAs(self, value: System.Void): ...
    @WritePolylinesAsDropdownIndex.setter
    def WritePolylinesAsDropdownIndex(self, value: System.Void): ...
    @WriteSplinesAs.setter
    def WriteSplinesAs(self, value: System.Void): ...
    @WriteSplinesAsDropdownIndex.setter
    def WriteSplinesAsDropdownIndex(self, value: System.Void): ...
    @WriteSurfacesAs.setter
    def WriteSurfacesAs(self, value: System.Void): ...
    @WriteSurfacesAsDropdownIndex.setter
    def WriteSurfacesAsDropdownIndex(self, value: System.Void): ...
    @overload
    @staticmethod
    def VersionsList() -> Generic.List: ...
    @overload
    @staticmethod
    def VersionUIName(input_: eVersion) -> str: ...
    @overload
    @staticmethod
    def WriteArcsAsList(ver: eVersion) -> Generic.List: ...
    @overload
    @staticmethod
    def WriteAsUIName(input_: eWriteAs) -> str: ...
    @overload
    @staticmethod
    def WriteLinesAsList(ver: eVersion) -> Generic.List: ...
    @overload
    @staticmethod
    def WriteMeshesAsList() -> Generic.List: ...
    @overload
    @staticmethod
    def WritePolycurvesAsList(ver: eVersion) -> Generic.List: ...
    @overload
    @staticmethod
    def WritePolylinesAsList(ver: eVersion) -> Generic.List: ...
    @overload
    @staticmethod
    def WriteSplinesAsList(ver: eVersion) -> Generic.List: ...
    @overload
    @staticmethod
    def WriteSurfacesAsList() -> Generic.List: ...
    @overload
    def WriteToSettings(self, optionsettings: Rhino.PersistentSettings) -> bool: ...
    @property
    def PropertyChanged(self): ...
    @property
    def ModleUnitsChanged(self): ...
    @property
    def PageUnitsChanged(self): ...

class eVersion(enum.Enum):
    vAC12 = 12
    vAC13 = 13
    vAC14 = 14
    vAC15 = 2000
    vAC18 = 2004
    vAC21 = 2007
    vAC24 = 2010
    vAC27 = 2013
    vAC32 = 2018

class eWriteAs(enum.Enum):
    asLines = 0
    asArcs = 1
    asPolybulges = 2
    asPolylines = 3
    asSplines = 4
    asCurves = 5
    asMeshes = 6
    as3dFaces = 7
    asAcisBody = 8
    as3dPolylines = 9

class eFlatten(enum.Enum):
    ftNone = 0
    ftCplane = 1
    ftView = 2

class eColorMethod(enum.Enum):
    clrACI = 0
    clrRGB = 1

# endregion
