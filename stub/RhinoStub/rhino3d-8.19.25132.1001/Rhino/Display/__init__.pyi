"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["VisualAnalysisMode", "FlairLayer", "PointStyle", "ShaderLanguage", "ViewCaptureSettings", "ViewTypeFilter", "BackgroundStyle", "ColorStop", "ColorGradient", "Color4f", "CustomDisplay", "ColorRGBA", "ColorHSL", "ColorCMYK", "ColorXYZ", "ColorLAB", "ColorLCH", "ColorHSV", "Text3d", "DisplayTechnology", "BlendMode", "DisplayBitmap", "DisplayBitmapDrawList", "DisplayPointAttributes", "DisplayPoint", "DisplayPointSet", "DisplayModeDescription", "DrawFrameStages", "DisplayConduit", "DisplayEngine", "DisplayPen", "DepthMode", "ZBiasMode", "CullFaceMode", "DisplayPipeline", "DrawEventArgs", "DrawForegroundEventArgs", "CullObjectEventArgs", "DrawObjectEventArgs", "CalculateBoundingBoxEventArgs", "InitFrameBufferEventArgs", "DisplayModeChangedEventArgs", "ZBufferCapture", "StereoContext", "DisplayPipelineAttributes", "DisplayMaterial", "RhinoPageView", "GradientType", "ViewCapture", "RhinoView", "ViewEventArgs", "PageViewSpaceChangeEventArgs", "PageViewPropertiesChangeEventArgs", "ViewEnableDrawingEventArgs", "DefinedViewportProjection", "IsometricCamera", "RhinoViewport", "ViewportType", "EdgeContinuityMode", "AnalysisStyle", "ViewAreaMapping", "AnchorLocation", "ColorMode", "InferenceLineType", "FrameBufferFillMode", "BoundingBoxDisplayMode", "ViewDisplayAttributes", "CurveThicknessUse", "SurfaceThicknessUse", "SurfaceNakedEdgeThicknessUse", "SurfaceIsoThicknessUse", "SurfaceEdgeColorUse", "SurfaceNakedEdgeColorUse", "SurfaceIsoColorUse", "MeshDisplayAttributes", "LightingSchema", "ContextsForDraw", "SubDEdgeColorUse", "SubDReflectionPlaneColorUse", "SubDThicknessUse", "ClippingPlaneFillColorUse", "ClippingEdgeColorUse", "ClippingShadeColorUse", "LockedObjectUse", "DynamicDisplayUse", "GridPlaneVisibilityMode", "WorldAxesIconColorUse", "GroundPlaneUsages", "LinearWorkflowUsages"]
# endregion

# region: Imports
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import Render
from System import Drawing
from System import Xml
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class VisualAnalysisMode(object):
    """Represents a base class for visual analysis modes.
This class is abstract.

    """
    @overload
    @staticmethod
    def AdjustAnalysisMeshes(doc: Rhino.RhinoDoc, analysisModeId: System.Guid) -> bool: ...
    @overload
    def EnableUserInterface(self, on: bool) -> None: ...
    @overload
    @staticmethod
    def Find(id_: System.Guid) -> VisualAnalysisMode: ...
    @overload
    @staticmethod
    def Find(t: System.Type) -> VisualAnalysisMode: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def RhinoCurvatureColorAnalyisModeId(self) -> System.Guid: ...
    @property
    def RhinoCurvatureGraphAnalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoDraftAngleAnalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoEdgeAnalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoEdgeContinuityAlalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoEmapAnalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoThicknessAnalysisModeId(self) -> System.Guid: ...
    @property
    def RhinoZebraStripeAnalysisModeId(self) -> System.Guid: ...
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def Style(self) -> AnalysisStyle: ...
    @overload
    def ObjectSupportsAnalysisMode(self, obj: DocObjects.RhinoObject) -> bool: ...
    @overload
    @staticmethod
    def Register(customAnalysisModeType: System.Type) -> VisualAnalysisMode: ...

class FlairLayer(enum.Enum):
    Normals = 0
    Depth = 1
    Shadows = 2
    Shading = 3
    Material = 4
    Details = 5
    Background = 6
    Selection = 7
    Unknown = -1

class PointStyle(enum.Enum):
    Square = 0
    Simple = 0
    ControlPoint = 1
    ActivePoint = 2
    X = 3
    RoundSimple = 4
    Circle = 4
    RoundControlPoint = 5
    RoundActivePoint = 6
    Triangle = 7
    Heart = 8
    Chevron = 9
    Clover = 10
    Tag = 11
    Asterisk = 12
    Pin = 13
    ArrowTail = 14
    ArrowTip = 15
    VariableDot = 50
    SolidSquare = 50
    RoundDot = 51
    SolidCircle = 51
    SolidRound = 51
    None_ = 1000

class ShaderLanguage(enum.Enum):
    GLSL_ES100 = 1
    GLSL_ES300 = 2
    GLSL_ES310 = 3
    GLSL_120 = 4
    GLSL_130 = 5
    GLSL_140 = 6
    GLSL_150 = 7
    GLSL_330 = 8
    GLSL_400 = 9
    GLSL_410 = 10
    GLSL_420 = 11
    GLSL_430 = 12
    GLSL_440 = 13
    Metal = 14

class ViewCaptureSettings(object):
    """Holds information required to generate high resolution output of a RhinoViewport. This is used for generating paper prints or image files

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ViewCaptureSettings): ...
    @overload
    def __init__(self, sourcePageView: RhinoPageView, dpi: float): ...
    @overload
    def __init__(self, sourceView: RhinoView, mediaSize: Drawing.Size, dpi: float): ...
    @overload
    def CreatePreviewSettings(self, size: Drawing.Size) -> ViewCaptureSettings: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, other: ViewCaptureSettings) -> bool: ...
    @property
    def ApplyDisplayModeThicknessScales(self) -> bool: ...
    @property
    def ArrowheadSizeMillimeters(self) -> float: ...
    @property
    def CropRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DefaultPrintWidthMillimeters(self) -> float: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DrawAxis(self) -> bool: ...
    @property
    def DrawBackground(self) -> bool: ...
    @property
    def DrawBackgroundBitmap(self) -> bool: ...
    @property
    def DrawClippingPlanes(self) -> bool: ...
    @property
    def DrawGrid(self) -> bool: ...
    @property
    def DrawLights(self) -> bool: ...
    @property
    def DrawLockedObjects(self) -> bool: ...
    @property
    def DrawMargins(self) -> bool: ...
    @property
    def DrawRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DrawSelectedObjectsOnly(self) -> bool: ...
    @property
    def DrawWallpaper(self) -> bool: ...
    @property
    def FooterText(self) -> str: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def HorizontalScale(self) -> float: ...
    @property
    def IsScaleToFit(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LinetypeWidthUnitsArePageLengths(self) -> bool: ...
    @property
    def MatchLinetypePatternDefinition(self) -> bool: ...
    @property
    def MediaSize(self) -> Drawing.Size: ...
    @property
    def ModelScaleType(self) -> int: ...
    @property
    def OffsetAnchor(self) -> AnchorLocation: ...
    @property
    def OutputColor(self) -> ColorMode: ...
    @property
    def PointSizeMillimeters(self) -> float: ...
    @property
    def RasterMode(self) -> bool: ...
    @property
    def Resolution(self) -> float: ...
    @property
    def TextDotPointSize(self) -> float: ...
    @property
    def UsePrintWidths(self) -> bool: ...
    @property
    def VerticalScale(self) -> float: ...
    @property
    def ViewArea(self) -> ViewAreaMapping: ...
    @property
    def WireThicknessScale(self) -> float: ...
    @overload
    def GetMargins(self, lengthUnits: Rhino.UnitSystem) -> (bool, float, float, float, float): ...
    @overload
    def GetModelScale(self, pageUnits: Rhino.UnitSystem, modelUnits: Rhino.UnitSystem) -> float: ...
    @overload
    def GetOffset(self, lengthUnits: Rhino.UnitSystem) -> (bool, float, float): ...
    @overload
    def GetViewport() -> RhinoViewport: ...
    @overload
    def Load(self, name: str, settings: Rhino.PersistentSettings) -> bool: ...
    @overload
    def MatchViewportAspectRatio() -> bool: ...
    @overload
    def MaximizePrintableArea() -> None: ...
    @overload
    def Save(self, name: str, settings: Rhino.PersistentSettings) -> None: ...
    @ApplyDisplayModeThicknessScales.setter
    def ApplyDisplayModeThicknessScales(self, value: System.Void): ...
    @ArrowheadSizeMillimeters.setter
    def ArrowheadSizeMillimeters(self, value: System.Void): ...
    @DefaultPrintWidthMillimeters.setter
    def DefaultPrintWidthMillimeters(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @DrawAxis.setter
    def DrawAxis(self, value: System.Void): ...
    @DrawBackground.setter
    def DrawBackground(self, value: System.Void): ...
    @DrawBackgroundBitmap.setter
    def DrawBackgroundBitmap(self, value: System.Void): ...
    @DrawClippingPlanes.setter
    def DrawClippingPlanes(self, value: System.Void): ...
    @DrawGrid.setter
    def DrawGrid(self, value: System.Void): ...
    @DrawLights.setter
    def DrawLights(self, value: System.Void): ...
    @DrawLockedObjects.setter
    def DrawLockedObjects(self, value: System.Void): ...
    @DrawMargins.setter
    def DrawMargins(self, value: System.Void): ...
    @DrawSelectedObjectsOnly.setter
    def DrawSelectedObjectsOnly(self, value: System.Void): ...
    @DrawWallpaper.setter
    def DrawWallpaper(self, value: System.Void): ...
    @FooterText.setter
    def FooterText(self, value: System.Void): ...
    @HeaderText.setter
    def HeaderText(self, value: System.Void): ...
    @HorizontalScale.setter
    def HorizontalScale(self, value: System.Void): ...
    @LinetypeWidthUnitsArePageLengths.setter
    def LinetypeWidthUnitsArePageLengths(self, value: System.Void): ...
    @MatchLinetypePatternDefinition.setter
    def MatchLinetypePatternDefinition(self, value: System.Void): ...
    @ModelScaleType.setter
    def ModelScaleType(self, value: System.Void): ...
    @OffsetAnchor.setter
    def OffsetAnchor(self, value: System.Void): ...
    @OutputColor.setter
    def OutputColor(self, value: System.Void): ...
    @PointSizeMillimeters.setter
    def PointSizeMillimeters(self, value: System.Void): ...
    @RasterMode.setter
    def RasterMode(self, value: System.Void): ...
    @Resolution.setter
    def Resolution(self, value: System.Void): ...
    @TextDotPointSize.setter
    def TextDotPointSize(self, value: System.Void): ...
    @UsePrintWidths.setter
    def UsePrintWidths(self, value: System.Void): ...
    @VerticalScale.setter
    def VerticalScale(self, value: System.Void): ...
    @ViewArea.setter
    def ViewArea(self, value: System.Void): ...
    @WireThicknessScale.setter
    def WireThicknessScale(self, value: System.Void): ...
    @overload
    def SetLayout(self, mediaSize: Drawing.Size, cropRectangle: Drawing.Rectangle) -> None: ...
    @overload
    def SetMarginBottom(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool: ...
    @overload
    def SetMarginLeft(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool: ...
    @overload
    def SetMarginRight(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool: ...
    @overload
    def SetMargins(self, lengthUnits: Rhino.UnitSystem, left: float, top: float, right: float, bottom: float) -> bool: ...
    @overload
    def SetMarginTop(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool: ...
    @overload
    def SetModelScaleToFit(self, promptOnChange: bool) -> None: ...
    @overload
    def SetModelScaleToValue(self, scale: float) -> None: ...
    @overload
    def SetOffset(self, lengthUnits: Rhino.UnitSystem, fromMargin: bool, x: float, y: float) -> None: ...
    @overload
    def SetViewport(self, viewport: RhinoViewport) -> None: ...
    @overload
    def SetWindowRect(self, worldPoint1: Geometry.Point3d, worldPoint2: Geometry.Point3d) -> None: ...
    @overload
    def SetWindowRect(self, screenPoint1: Geometry.Point2d, screenPoint2: Geometry.Point2d) -> None: ...

class ViewTypeFilter(enum.Enum):
    None_ = 0
    Model = 1
    Page = 2
    UVEditor = 4
    BlockEditor = 8
    ModelStyleViews = 268435453
    All = 268435455

class BackgroundStyle(enum.Enum):
    SolidColor = 0
    WallpaperImage = 1
    Gradient = 2
    Environment = 3

class ColorStop(System.ValueType):
    """Combination of a color and position. Used in defining gradient fills

    """
    def __init__(self, color: Drawing.Color, t: float): ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def Position(self) -> float: ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...

class ColorGradient(object):
    """
    """
    def __init__(self): ...
    @overload
    def Duplicate() -> ColorGradient: ...
    @property
    def EndPoint(self) -> Geometry.Point3d: ...
    @property
    def GradientType(self) -> GradientType: ...
    @property
    def Repeat(self) -> float: ...
    @property
    def StartPoint(self) -> Geometry.Point3d: ...
    @overload
    def GetColorStops() -> System.Array[ColorStop]: ...
    @EndPoint.setter
    def EndPoint(self, value: System.Void): ...
    @GradientType.setter
    def GradientType(self, value: System.Void): ...
    @Repeat.setter
    def Repeat(self, value: System.Void): ...
    @StartPoint.setter
    def StartPoint(self, value: System.Void): ...
    @overload
    def SetColorStops(self, stops: Generic.IEnumerable) -> None: ...

class Color4f(System.ValueType):
    """Color defined by 4 floating point values.

    """
    @overload
    def __init__(self, color: Drawing.Color): ...
    @overload
    def __init__(self, color: Color4f): ...
    @overload
    def __init__(self, argb: int): ...
    @overload
    def __init__(self, red: System.Single, green: System.Single, blue: System.Single, alpha: System.Single): ...
    @overload
    @staticmethod
    def ApplyGamma(col: Color4f, gamma: System.Single) -> Color4f: ...
    @overload
    def AsSystemColor() -> Drawing.Color: ...
    @overload
    def BlendTo(self, t: System.Single, col: Color4f) -> Color4f: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(a: System.Single, color: Color4f) -> Color4f: ...
    @overload
    @staticmethod
    def FromArgb(a: System.Single, r: System.Single, g: System.Single, b: System.Single) -> Color4f: ...
    @property
    def A(self) -> System.Single: ...
    @property
    def B(self) -> System.Single: ...
    @property
    def Black(self) -> Color4f: ...
    @property
    def Empty(self) -> Color4f: ...
    @property
    def G(self) -> System.Single: ...
    @property
    def L(self) -> System.Single: ...
    @property
    def R(self) -> System.Single: ...
    @property
    def White(self) -> Color4f: ...
    @overload
    def GetHashCode() -> int: ...

class CustomDisplay(object):
    """Provides some basic (indeed, very basic) mechanisms for drawing custom geometry in viewports.

    """
    def __init__(self, enable: bool): ...
    @overload
    def AddArc(self, arc: Geometry.Arc) -> None: ...
    @overload
    def AddArc(self, arc: Geometry.Arc, color: Drawing.Color) -> None: ...
    @overload
    def AddArc(self, arc: Geometry.Arc, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle) -> None: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle, color: Drawing.Color) -> None: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve) -> None: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve, color: Drawing.Color) -> None: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def AddLine(self, line: Geometry.Line) -> None: ...
    @overload
    def AddLine(self, line: Geometry.Line, color: Drawing.Color) -> None: ...
    @overload
    def AddLine(self, line: Geometry.Line, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d) -> None: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d, color: Drawing.Color) -> None: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d, color: Drawing.Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable) -> None: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, color: Drawing.Color) -> None: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, color: Drawing.Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddPolygon(self, polygon: Generic.IEnumerable, fillColor: Drawing.Color, edgeColor: Drawing.Color, drawFill: bool, drawEdge: bool) -> None: ...
    @overload
    def AddText(self, text: Text3d, color: Drawing.Color) -> None: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, size: float) -> None: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, size: float, color: Drawing.Color) -> None: ...
    @overload
    def AddVector(self, anchor: Geometry.Point3d, span: Geometry.Vector3d) -> None: ...
    @overload
    def AddVector(self, anchor: Geometry.Point3d, span: Geometry.Vector3d, color: Drawing.Color) -> None: ...
    @overload
    def AddVector(self, anchor: Geometry.Point3d, span: Geometry.Vector3d, color: Drawing.Color, drawAnchor: bool) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class ColorRGBA(System.ValueType):
    """Represents a sRGBA (Red, Green, Blue, Alpha) color with double precision floating point channel.

    """
    @overload
    def __init__(self, color: ColorRGBA): ...
    @overload
    def __init__(self, color: Drawing.Color): ...
    @overload
    def __init__(self, argb: int): ...
    @overload
    def __init__(self, color: ColorRGBA, alpha: float): ...
    @overload
    def __init__(self, red: float, green: float, blue: float): ...
    @overload
    def __init__(self, red: float, green: float, blue: float, alpha: float): ...
    @overload
    @staticmethod
    def ApplyGamma(col: ColorRGBA, gamma: float) -> ColorRGBA: ...
    @overload
    def BlendTo(self, col: ColorRGBA, coefficient: float) -> ColorRGBA: ...
    @overload
    def CompareTo(self, other: ColorRGBA) -> int: ...
    @overload
    @staticmethod
    def CreateFromArgb(red: System.Byte, green: System.Byte, blue: System.Byte) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromArgb(alpha: System.Byte, red: System.Byte, green: System.Byte, blue: System.Byte) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorRGBA: ...
    @overload
    def EpsilonEquals(self, other: ColorRGBA, epsilon: float) -> bool: ...
    @overload
    def Equals(self, other: ColorRGBA) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def A(self) -> float: ...
    @property
    def B(self) -> float: ...
    @property
    def Black(self) -> ColorRGBA: ...
    @property
    def Blue(self) -> ColorRGBA: ...
    @property
    def G(self) -> float: ...
    @property
    def Green(self) -> ColorRGBA: ...
    @property
    def R(self) -> float: ...
    @property
    def Red(self) -> ColorRGBA: ...
    @property
    def White(self) -> ColorRGBA: ...
    @overload
    def GetHashCode() -> int: ...
    @A.setter
    def A(self, value: System.Void): ...
    @B.setter
    def B(self, value: System.Void): ...
    @G.setter
    def G(self, value: System.Void): ...
    @R.setter
    def R(self, value: System.Void): ...
    @overload
    def ToArgb() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...

class ColorHSL(System.ValueType):
    """Represents an HSL (Hue, Saturation, Luminance) color with double precision floating point channels. HSL colors are used primarily in Graphical User Interface environments as they provide a very natural approach to picking colors.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, luminance: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, luminance: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSL: ...
    @property
    def A(self) -> float: ...
    @property
    def H(self) -> float: ...
    @property
    def L(self) -> float: ...
    @property
    def S(self) -> float: ...
    @A.setter
    def A(self, value: System.Void): ...
    @H.setter
    def H(self, value: System.Void): ...
    @L.setter
    def L(self, value: System.Void): ...
    @S.setter
    def S(self, value: System.Void): ...
    @overload
    def ToArgbColor() -> Drawing.Color: ...

class ColorCMYK(System.ValueType):
    """Represents a CMYK (Cyan, Magenta, Yellow, Key) color with double precision floating point channels. CMYK colors are used primarily in printing environments as they provide a good simulation of physical ink.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float, key: float): ...
    @overload
    def __init__(self, alpha: float, cyan: float, magenta: float, yellow: float, key: float): ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorCMYK: ...
    @property
    def A(self) -> float: ...
    @property
    def C(self) -> float: ...
    @property
    def K(self) -> float: ...
    @property
    def M(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @A.setter
    def A(self, value: System.Void): ...
    @C.setter
    def C(self, value: System.Void): ...
    @K.setter
    def K(self, value: System.Void): ...
    @M.setter
    def M(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...

class ColorXYZ(System.ValueType):
    """Represents an XYZ (Hue, Saturation, Luminance) color with double precision floating point channels. XYZ colors are based on the CIE 1931 XYZ color space standard and they mimic the natural sensitivity of cones in the human retina.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, x: float, y: float, z: float): ...
    @overload
    def __init__(self, alpha: float, x: float, y: float, z: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorXYZ: ...
    @property
    def A(self) -> float: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def Z(self) -> float: ...
    @A.setter
    def A(self, value: System.Void): ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @Z.setter
    def Z(self, value: System.Void): ...

class ColorLAB(System.ValueType):
    """Represents a LAB (Lightness, A, B) color with double precision floating point channels. LAB colors are based on nonlinearly compressed CIE XYZ color space coordinates. The A and B parameters of a LAB color represent the opponents.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, lightness: float, a: float, b: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, a: float, b: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgb: ColorRGBA) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLAB: ...
    @property
    def A(self) -> float: ...
    @property
    def Alpha(self) -> float: ...
    @property
    def B(self) -> float: ...
    @property
    def L(self) -> float: ...
    @A.setter
    def A(self, value: System.Void): ...
    @Alpha.setter
    def Alpha(self, value: System.Void): ...
    @B.setter
    def B(self, value: System.Void): ...
    @L.setter
    def L(self, value: System.Void): ...

class ColorLCH(System.ValueType):
    """Represents an LCH (Lightness, A, B) color with double precision floating point channels. LCH colors (also sometimes called CIELUV) are transformation of the 1931 CIE XYZ color space, in order to approach perceptual uniformity. They are primarily used in computer graphics which deal with colored lights.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, lightness: float, chroma: float, hue: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, chroma: float, hue: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgb: ColorRGBA) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLCH: ...
    @property
    def A(self) -> float: ...
    @property
    def C(self) -> float: ...
    @property
    def H(self) -> float: ...
    @property
    def L(self) -> float: ...
    @overload
    def MakePositive() -> None: ...
    @A.setter
    def A(self, value: System.Void): ...
    @C.setter
    def C(self, value: System.Void): ...
    @H.setter
    def H(self, value: System.Void): ...
    @L.setter
    def L(self, value: System.Void): ...

class ColorHSV(System.ValueType):
    """Represents an HSV (Hue, Saturation, Value) color with double precision floating point channels. HSV colors (also sometimes called HSB, where B means Brightness) are similar to HSL colors in that they represent colors in a cylindrical color space, and are intended to provide intuitive means to edit the brightness of a particular color over RGB color space where each color channel would need to be modified to affect the color brightness.

    """
    @overload
    def __init__(self, rgb: Drawing.Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, value: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, value: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSV: ...
    @property
    def A(self) -> float: ...
    @property
    def H(self) -> float: ...
    @property
    def S(self) -> float: ...
    @property
    def V(self) -> float: ...
    @A.setter
    def A(self, value: System.Void): ...
    @H.setter
    def H(self, value: System.Void): ...
    @S.setter
    def S(self, value: System.Void): ...
    @V.setter
    def V(self, value: System.Void): ...
    @overload
    def ToArgbColor() -> Drawing.Color: ...

class Text3d(object):
    """3D aligned text with font settings.

    """
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, plane: Geometry.Plane, height: float): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def BoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def FontFace(self) -> str: ...
    @property
    def Height(self) -> float: ...
    @property
    def HorizontalAlignment(self) -> DocObjects.TextHorizontalAlignment: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextPlane(self) -> Geometry.Plane: ...
    @property
    def VerticalAlignment(self) -> DocObjects.TextVerticalAlignment: ...
    @Bold.setter
    def Bold(self, value: System.Void): ...
    @FontFace.setter
    def FontFace(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value: System.Void): ...
    @Italic.setter
    def Italic(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextPlane.setter
    def TextPlane(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...

class DisplayTechnology(enum.Enum):
    None_ = 0
    OpenGL = 1
    Metal = 2
    DirectX = 3
    Software = 4
    Vulkan = 5

class BlendMode(enum.Enum):
    Zero = 0
    One = 1
    SourceColor = 768
    OneMinusSourceColor = 769
    SourceAlpha = 770
    OneMinusSourceAlpha = 771
    DestinationAlpha = 772
    OneMinusDestinationAlpha = 773
    DestinationColor = 774
    OneMinusDestinationColor = 775
    SourceAlphaSaturate = 776

class DisplayBitmap(object):
    """A bitmap resource that can be used by the display pipeline (currently only in OpenGL display). Reuse DisplayBitmaps for drawing if possible; it is much more expensive to construct new DisplayBitmaps than it is to reuse existing DisplayBitmaps.

    """
    @overload
    def __init__(self, bitmap: Drawing.Bitmap): ...
    @overload
    def __init__(self, path: str, bitmap: Drawing.Bitmap): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @overload
    def GetBlendModes() -> (BlendMode, BlendMode): ...
    @overload
    @staticmethod
    def Load(path: str) -> DisplayBitmap: ...
    @overload
    def SetBlendFunction(self, source: BlendMode, destination: BlendMode) -> None: ...
    @overload
    def Update(self, bitmap: Drawing.Bitmap) -> None: ...

class DisplayBitmapDrawList(object):
    """    """
    def __init__(self): ...
    @property
    def BoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def MaximumCachedSortLists(self) -> int: ...
    @property
    def SortAngleTolerance(self) -> float: ...
    @MaximumCachedSortLists.setter
    def MaximumCachedSortLists(self, value: System.Void): ...
    @SortAngleTolerance.setter
    def SortAngleTolerance(self, value: System.Void): ...
    @overload
    def SetPoints(self, points: Generic.IEnumerable) -> None: ...
    @overload
    def SetPoints(self, points: Generic.IEnumerable, blendColor: Drawing.Color) -> None: ...
    @overload
    def SetPoints(self, points: Generic.IEnumerable, colors: Generic.IEnumerable) -> None: ...
    @overload
    def Sort(self, cameraDirection: Geometry.Vector3d) -> System.System.Array[int]: ...

class DisplayPointAttributes(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: DisplayPointAttributes): ...
    @property
    def Diameter(self) -> System.Nullable: ...
    @property
    def FillColor(self) -> System.Nullable: ...
    @property
    def PointStyle(self) -> System.Nullable: ...
    @property
    def RotationRadians(self) -> System.Nullable: ...
    @property
    def SecondarySize(self) -> System.Nullable: ...
    @property
    def StrokeColor(self) -> System.Nullable: ...
    @property
    def StrokeWidth(self) -> System.Nullable: ...
    @Diameter.setter
    def Diameter(self, value: System.Void): ...
    @FillColor.setter
    def FillColor(self, value: System.Void): ...
    @PointStyle.setter
    def PointStyle(self, value: System.Void): ...
    @RotationRadians.setter
    def RotationRadians(self, value: System.Void): ...
    @SecondarySize.setter
    def SecondarySize(self, value: System.Void): ...
    @StrokeColor.setter
    def StrokeColor(self, value: System.Void): ...
    @StrokeWidth.setter
    def StrokeWidth(self, value: System.Void): ...

class DisplayPoint(object):
    """A 3d point with attributes used by the display pipeline

    """
    def __init__(self, location: Geometry.Point3d): ...
    @property
    def Location(self) -> Geometry.Point3d: ...
    @overload
    def WithAttributes(self, attributes: DisplayPointAttributes) -> DisplayPoint: ...

class DisplayPointSet(object):
    """    """
    @overload
    @staticmethod
    def Create(points: Generic.IEnumerable) -> DisplayPointSet: ...
    @overload
    def Dispose() -> None: ...

class DisplayModeDescription(object):
    """Description of a how Rhino will display in a viewport. These are the modes that are listed under "Advanced display" in the options dialog.

    """
    @overload
    @staticmethod
    def AddDisplayMode(name: str) -> System.Guid: ...
    @overload
    @staticmethod
    def AddDisplayMode(displayMode: DisplayModeDescription) -> System.Guid: ...
    @overload
    @staticmethod
    def CopyDisplayMode(id_: System.Guid, name: str) -> System.Guid: ...
    @overload
    @staticmethod
    def DeleteDisplayMode(id_: System.Guid) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def ExportToFile(displayMode: DisplayModeDescription, filename: str) -> bool: ...
    @overload
    @staticmethod
    def FindByName(englishName: str) -> DisplayModeDescription: ...
    @property
    def AllowObjectAssignment(self) -> bool: ...
    @property
    def AmbientOcclusionId(self) -> System.Guid: ...
    @property
    def ArtisticId(self) -> System.Guid: ...
    @property
    def DisplayAttributes(self) -> DisplayPipelineAttributes: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def GhostedId(self) -> System.Guid: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def InMenu(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def MonochromeId(self) -> System.Guid: ...
    @property
    def PenId(self) -> System.Guid: ...
    @property
    def PipelineLocked(self) -> bool: ...
    @property
    def RaytracedId(self) -> System.Guid: ...
    @property
    def RenderedId(self) -> System.Guid: ...
    @property
    def RenderedShadowsId(self) -> System.Guid: ...
    @property
    def ShadedId(self) -> System.Guid: ...
    @property
    def ShadedPipelineRequired(self) -> bool: ...
    @property
    def SupportsShadeCommand(self) -> bool: ...
    @property
    def SupportsShading(self) -> bool: ...
    @property
    def TechId(self) -> System.Guid: ...
    @property
    def WireframeId(self) -> System.Guid: ...
    @property
    def WireframePipelineRequired(self) -> bool: ...
    @property
    def XRayId(self) -> System.Guid: ...
    @overload
    @staticmethod
    def GetDisplayMode(id_: System.Guid) -> DisplayModeDescription: ...
    @overload
    @staticmethod
    def GetDisplayModes() -> System.Array[DisplayModeDescription]: ...
    @overload
    @staticmethod
    def ImportFromFile(filename: str) -> System.Guid: ...
    @AllowObjectAssignment.setter
    def AllowObjectAssignment(self, value: System.Void): ...
    @EnglishName.setter
    def EnglishName(self, value: System.Void): ...
    @InMenu.setter
    def InMenu(self, value: System.Void): ...
    @PipelineLocked.setter
    def PipelineLocked(self, value: System.Void): ...
    @ShadedPipelineRequired.setter
    def ShadedPipelineRequired(self, value: System.Void): ...
    @SupportsShadeCommand.setter
    def SupportsShadeCommand(self, value: System.Void): ...
    @SupportsShading.setter
    def SupportsShading(self, value: System.Void): ...
    @WireframePipelineRequired.setter
    def WireframePipelineRequired(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateDisplayMode(displayMode: DisplayModeDescription) -> bool: ...

class DrawFrameStages(enum.Enum):
    InitializeFrameBuffer = 1
    SetupFrustum = 2
    ObjectCulling = 4
    CalculateBoundingBox = 8
    CalculateClippingPlanes = 16
    SetupLighting = 32
    DrawBackground = 64
    PreDrawObjects = 128
    DrawObject = 256
    PostDrawObjects = 512
    DrawMiddleGround = 896
    DrawForeGround = 1024
    DrawOverlay = 2048
    PostProcessFrameBuffer = 4096
    MeshingParameters = 8192
    ObjectDisplayAttributes = 16384
    PreObjectDraw = 32768
    PostObjectDraw = 65536
    ObjectBasedChannel = 114948
    ViewExtents = 131072
    All = 4294836223

class DisplayConduit(object):
    """    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def GeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def SpaceFilter(self) -> DocObjects.ActiveSpace: ...
    @overload
    def GetSelectionFilter() -> (bool, bool): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @GeometryFilter.setter
    def GeometryFilter(self, value: System.Void): ...
    @SpaceFilter.setter
    def SpaceFilter(self, value: System.Void): ...
    @overload
    def SetObjectIdFilter(self, id_: System.Guid) -> None: ...
    @overload
    def SetObjectIdFilter(self, ids: Generic.IEnumerable) -> None: ...
    @overload
    def SetSelectionFilter(self, on: bool, checkSubObjects: bool) -> None: ...

class DisplayEngine(object):
    """    """
    @overload
    def Dispose() -> None: ...

class DisplayPen(object):
    """Pen used to define stroke applied to several DisplayPipeline draw functions

    """
    def __init__(self): ...
    @overload
    def Duplicate() -> DisplayPen: ...
    @overload
    @staticmethod
    def FromLinetype(linetype: DocObjects.Linetype, color: Drawing.Color, patternScale: float) -> DisplayPen: ...
    @property
    def CapStyle(self) -> DocObjects.LineCapStyle: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def HaloColor(self) -> Drawing.Color: ...
    @property
    def HaloThickness(self) -> System.Single: ...
    @property
    def JoinStyle(self) -> DocObjects.LineJoinStyle: ...
    @property
    def PatternBySegment(self) -> bool: ...
    @property
    def PatternLengthInWorldUnits(self) -> bool: ...
    @property
    def PatternOffset(self) -> System.Single: ...
    @property
    def Thickness(self) -> System.Single: ...
    @property
    def ThicknessSpace(self) -> DocObjects.CoordinateSystem: ...
    @overload
    def PatternAsArray() -> System.System.Array[System.Single]: ...
    @CapStyle.setter
    def CapStyle(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @HaloColor.setter
    def HaloColor(self, value: System.Void): ...
    @HaloThickness.setter
    def HaloThickness(self, value: System.Void): ...
    @JoinStyle.setter
    def JoinStyle(self, value: System.Void): ...
    @PatternBySegment.setter
    def PatternBySegment(self, value: System.Void): ...
    @PatternLengthInWorldUnits.setter
    def PatternLengthInWorldUnits(self, value: System.Void): ...
    @PatternOffset.setter
    def PatternOffset(self, value: System.Void): ...
    @Thickness.setter
    def Thickness(self, value: System.Void): ...
    @ThicknessSpace.setter
    def ThicknessSpace(self, value: System.Void): ...
    @overload
    def SetPattern(self, dashesAndGaps: Generic.IEnumerable) -> None: ...
    @overload
    def SetTaper(self, startThickness: System.Single, endThickness: System.Single, taperPoint: Geometry.Point2f) -> None: ...
    @overload
    def TaperAsArray() -> Geometry.System.Array[Geometry.Point2f]: ...

class DepthMode(enum.Enum):
    Neutral = 0
    AlwaysInFront = 1
    AlwaysInBack = 2

class ZBiasMode(enum.Enum):
    Neutral = 0
    TowardsCamera = 1
    AwayFromCamera = 2

class CullFaceMode(enum.Enum):
    DrawFrontAndBack = 0
    DrawFrontFaces = 1
    DrawBackFaces = 2

class DisplayPipeline(object):
    """The display pipeline calls events during specific phases of drawing During the drawing of a single frame the events are called in the following order.
[Begin Drawing of a Frame]
CalculateBoundingBox
CalculateClippingPanes
SetupFrustum
SetupLighting
InitializeFrameBuffer
DrawBackground
If this is a layout and detail objects exist the channels are called in the same order for each detail object (drawn as a nested viewport)
PreDrawObjects
For Each Visible Non Highlighted Object
SetupObjectDisplayAttributes
PreDrawObject
DrawObject
PostDrawObject
PostDrawObjects - depth writing/testing on
DrawForeGround - depth writing/testing off
For Each Visible Highlighted Object
SetupObjectDisplayAttributes
PreDrawObject
DrawObject
PostDrawObject
PostProcessFrameBuffer (If a delegate exists that requires this)
DrawOverlay (if Rhino is in a feedback mode)
[End of Drawing of a Frame]
NOTE: There may be multiple DrawObject calls for a single object. An example of when this could happen would be with a shaded sphere. The shaded mesh is first drawn and these channels would be processed; then at a later time the isocurves for the sphere would be drawn.

    """
    @overload
    def AddClippingPlane(self, point: Geometry.Point3d, normal: Geometry.Vector3d) -> int: ...
    @overload
    @staticmethod
    def AvailableOpenGLVersion() -> (System.UInt32, bool): ...
    @overload
    def ClearFrameBuffer(self, color: Drawing.Color) -> None: ...
    @overload
    def Clone(self, viewport: RhinoViewport) -> DisplayPipeline: ...
    @overload
    def Close() -> bool: ...
    @overload
    @staticmethod
    def CullControlPolygon() -> bool: ...
    @overload
    def Draw2dLine(self, from_: Drawing.Point, to: Drawing.Point, color: Drawing.Color, thickness: System.Single) -> None: ...
    @overload
    def Draw2dLine(self, from_: Drawing.PointF, to: Drawing.PointF, color: Drawing.Color, thickness: System.Single) -> None: ...
    @overload
    def Draw2dRectangle(self, rectangle: Drawing.Rectangle, strokeColor: Drawing.Color, thickness: int, fillColor: Drawing.Color) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, screenCoordinate: Geometry.Point2d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, worldCoordinate: Geometry.Point3d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, worldCoordinate: Geometry.Point3d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, screenCoordinate: Geometry.Point2d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, screenCoordinate: Geometry.Point2d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Drawing.Color, worldCoordinate: Geometry.Point3d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Drawing.Color) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Drawing.Color, textPlane: Geometry.Plane) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Drawing.Color, textPlaneOrigin: Geometry.Point3d) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Drawing.Color, textPlane: Geometry.Plane, height: float, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Drawing.Color, textPlane: Geometry.Plane, height: float, fontface: str, bold: bool, italic: bool) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Drawing.Color, textPlane: Geometry.Plane, height: float, fontface: str, bold: bool, italic: bool, horizontalAlignment: DocObjects.TextHorizontalAlignment, verticalAlignment: DocObjects.TextVerticalAlignment) -> None: ...
    @overload
    def DrawActivePoint(self, point: Geometry.Point3d) -> None: ...
    @overload
    def DrawAnnotation(self, annotation: Geometry.AnnotationBase, color: Drawing.Color) -> None: ...
    @overload
    def DrawAnnotationArrowhead(self, arrowhead: Geometry.Arrowhead, xform: Geometry.Transform, color: Drawing.Color) -> None: ...
    @overload
    def DrawArc(self, arc: Geometry.Arc, color: Drawing.Color) -> None: ...
    @overload
    def DrawArc(self, arc: Geometry.Arc, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawArrow(self, line: Geometry.Line, color: Drawing.Color) -> None: ...
    @overload
    def DrawArrow(self, line: Geometry.Line, color: Drawing.Color, screenSize: float, relativeSize: float) -> None: ...
    @overload
    def DrawArrowHead(self, tip: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color, screenSize: float, worldSize: float) -> None: ...
    @overload
    def DrawArrows(self, lines: Generic.IEnumerable, color: Drawing.Color) -> None: ...
    @overload
    def DrawArrows(self, lines: Geometry.System.Array[Geometry.Line], color: Drawing.Color) -> None: ...
    @overload
    def DrawBitmap(self, bitmap: DisplayBitmap, left: int, top: int) -> None: ...
    @overload
    def DrawBox(self, box: Geometry.Box, color: Drawing.Color) -> None: ...
    @overload
    def DrawBox(self, box: Geometry.BoundingBox, color: Drawing.Color) -> None: ...
    @overload
    def DrawBox(self, box: Geometry.Box, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawBox(self, box: Geometry.BoundingBox, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawBoxCorners(self, box: Geometry.BoundingBox, color: Drawing.Color) -> None: ...
    @overload
    def DrawBoxCorners(self, box: Geometry.BoundingBox, color: Drawing.Color, size: float) -> None: ...
    @overload
    def DrawBoxCorners(self, box: Geometry.BoundingBox, color: Drawing.Color, size: float, thickness: int) -> None: ...
    @overload
    def DrawBrepShaded(self, brep: Geometry.Brep, material: DisplayMaterial) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Geometry.Brep, color: Drawing.Color) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Geometry.Brep, color: Drawing.Color, wireDensity: int) -> None: ...
    @overload
    def DrawCircle(self, circle: Geometry.Circle, color: Drawing.Color) -> None: ...
    @overload
    def DrawCircle(self, circle: Geometry.Circle, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawCone(self, cone: Geometry.Cone, color: Drawing.Color) -> None: ...
    @overload
    def DrawCone(self, cone: Geometry.Cone, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawConstructionPlane(self, constructionPlane: DocObjects.ConstructionPlane) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Geometry.Curve, color: Drawing.Color) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Geometry.Curve, color: Drawing.Color, hairScale: int) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Geometry.Curve, color: Drawing.Color, hairScale: int, hairDensity: int, sampleDensity: int) -> None: ...
    @overload
    def DrawCurve(self, curve: Geometry.Curve, color: Drawing.Color) -> None: ...
    @overload
    def DrawCurve(self, curve: Geometry.Curve, pen: DisplayPen) -> None: ...
    @overload
    def DrawCurve(self, curve: Geometry.Curve, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Geometry.Cylinder, color: Drawing.Color) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Geometry.Cylinder, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawDirectionArrow(self, location: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Geometry.Point3d, text: str) -> None: ...
    @overload
    def DrawDot(self, screenX: System.Single, screenY: System.Single, text: str) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Geometry.Point3d, text: str, dotColor: Drawing.Color, textColor: Drawing.Color) -> None: ...
    @overload
    def DrawDot(self, dot: Geometry.TextDot, fillColor: Drawing.Color, textColor: Drawing.Color, borderColor: Drawing.Color) -> None: ...
    @overload
    def DrawDot(self, screenX: System.Single, screenY: System.Single, text: str, dotColor: Drawing.Color, textColor: Drawing.Color) -> None: ...
    @overload
    def DrawDottedLine(self, line: Geometry.Line, color: Drawing.Color) -> None: ...
    @overload
    def DrawDottedLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawDottedPolyline(self, points: Generic.IEnumerable, color: Drawing.Color, close: bool) -> None: ...
    @overload
    def DraweInferencePoint(self, P: Geometry.Point3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Geometry.Extrusion, color: Drawing.Color) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Geometry.Extrusion, color: Drawing.Color, wireDensity: int) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Geometry.Hatch, color1: Drawing.Color, color2: Drawing.Color, point1: Geometry.Point3d, point2: Geometry.Point3d, linearGradient: bool, boundaryThickness: System.Single, boundaryColor: Drawing.Color) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Geometry.Hatch, stops: Generic.IEnumerable, point1: Geometry.Point3d, point2: Geometry.Point3d, linearGradient: bool, repeat: System.Single, boundary: DisplayPen, backgroundFillColor: Drawing.Color) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Geometry.Hatch, stops: Generic.IEnumerable, point1: Geometry.Point3d, point2: Geometry.Point3d, linearGradient: bool, repeat: System.Single, boundaryThickness: System.Single, boundaryColor: Drawing.Color) -> None: ...
    @overload
    def DrawGradientLines(self, lines: Generic.IEnumerable, strokeWidth: System.Single, stops: Generic.IEnumerable, point1: Geometry.Point3d, point2: Geometry.Point3d, linearGradient: bool, repeat: System.Single) -> None: ...
    @overload
    def DrawGradientMesh(self, mesh: Geometry.Mesh, stops: Generic.IEnumerable, point1: Geometry.Point3d, point2: Geometry.Point3d, linearGradient: bool, repeat: System.Single) -> None: ...
    @overload
    def DrawHatch(self, hatch: Geometry.Hatch, hatchColor: Drawing.Color, boundaryColor: Drawing.Color) -> None: ...
    @overload
    def DrawHatch(self, hatch: Geometry.Hatch, hatchColor: Drawing.Color, boundary: DisplayPen, backgroundFillColor: Drawing.Color) -> None: ...
    @overload
    def DrawInferenceLine(self, P: Geometry.Point3d, O: Geometry.Point3d, color: Drawing.Color, type_: InferenceLineType) -> None: ...
    @overload
    def DrawInstanceDefinition(self, instanceDefinition: DocObjects.InstanceDefinition) -> None: ...
    @overload
    def DrawInstanceDefinition(self, instanceDefinition: DocObjects.InstanceDefinition, xform: Geometry.Transform) -> None: ...
    @overload
    def DrawLight(self, light: Geometry.Light, wireframeColor: Drawing.Color) -> None: ...
    @overload
    def DrawLine(self, line: Geometry.Line, pen: DisplayPen) -> None: ...
    @overload
    def DrawLine(self, line: Geometry.Line, color: Drawing.Color) -> None: ...
    @overload
    def DrawLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawLine(self, line: Geometry.Line, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawLineArrow(self, line: Geometry.Line, color: Drawing.Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawLineNoClip(self, from_: Geometry.Point3d, to: Geometry.Point3d, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawLines(self, lines: Geometry.System.Array[Geometry.Line], pen: DisplayPen) -> None: ...
    @overload
    def DrawLines(self, lines: Generic.IEnumerable, color: Drawing.Color) -> None: ...
    @overload
    def DrawLines(self, lines: Generic.IEnumerable, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawLinesNoClip(self, lines: Generic.IEnumerable, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawMarker(self, tip: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawMarker(self, tip: Geometry.Point3d, direction: Geometry.Vector3d, color: Drawing.Color, thickness: int, size: float, rotation: float) -> None: ...
    @overload
    def DrawMeshFalseColors(self, mesh: Geometry.Mesh) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Geometry.Mesh, material: DisplayMaterial) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Geometry.Mesh, material: DisplayMaterial, faceIndices: System.System.Array[int]) -> None: ...
    @overload
    def DrawMeshVertices(self, mesh: Geometry.Mesh, color: Drawing.Color) -> None: ...
    @overload
    def DrawMeshWires(self, mesh: Geometry.Mesh, color: Drawing.Color) -> None: ...
    @overload
    def DrawMeshWires(self, mesh: Geometry.Mesh, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawObject(self, rhinoObject: DocObjects.RhinoObject) -> None: ...
    @overload
    def DrawObject(self, rhinoObject: DocObjects.RhinoObject, xform: Geometry.Transform) -> None: ...
    @overload
    def DrawParticles(self, particles: Geometry.ParticleSystem) -> None: ...
    @overload
    def DrawParticles(self, particles: Geometry.ParticleSystem, bitmap: DisplayBitmap) -> None: ...
    @overload
    def DrawParticles(self, particles: Geometry.ParticleSystem, bitmaps: System.Array[DisplayBitmap]) -> None: ...
    @overload
    def DrawPatternedLine(self, line: Geometry.Line, color: Drawing.Color, pattern: int, thickness: int) -> None: ...
    @overload
    def DrawPatternedLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, color: Drawing.Color, pattern: int, thickness: int) -> None: ...
    @overload
    def DrawPatternedPolyline(self, points: Generic.IEnumerable, color: Drawing.Color, pattern: int, thickness: int, close: bool) -> None: ...
    @overload
    def DrawPoint(self, point: Geometry.Point3d) -> None: ...
    @overload
    def DrawPoint(self, point: Geometry.Point3d, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoint(self, point: Geometry.Point3d, style: PointStyle, radius: System.Single, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoint(self, point: Geometry.Point3d, style: PointStyle, radius: int, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoint(self, point: Geometry.Point3d, style: PointStyle, strokeColor: Drawing.Color, fillColor: Drawing.Color, radius: System.Single, strokeWidth: System.Single, secondarySize: System.Single, rotationRadians: System.Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: Geometry.PointCloud, size: System.Single) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: Geometry.PointCloud, size: int) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: Geometry.PointCloud, size: int, color: Drawing.Color) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: Geometry.PointCloud, size: System.Single, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoints(self, points: DisplayPointSet) -> None: ...
    @overload
    def DrawPoints(self, points: DisplayPointSet, fallbackAttributes: DisplayPointAttributes, overrideAttributes: DisplayPointAttributes) -> None: ...
    @overload
    def DrawPoints(self, points: Generic.IEnumerable, style: PointStyle, radius: System.Single, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoints(self, points: Generic.IEnumerable, style: PointStyle, radius: int, color: Drawing.Color) -> None: ...
    @overload
    def DrawPoints(self, points: Generic.IEnumerable, style: PointStyle, strokeColor: Drawing.Color, fillColor: Drawing.Color, radius: System.Single, strokeWidth: System.Single, secondarySize: System.Single, rotationRadians: System.Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPolygon(self, points: Generic.IEnumerable, color: Drawing.Color, filled: bool) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Generic.IEnumerable, color: Drawing.Color) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Generic.IEnumerable, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawRoundedRectangle(self, center: Drawing.PointF, pixelWidth: System.Single, pixelHeight: System.Single, cornerRadius: System.Single, strokeColor: Drawing.Color, strokeWidth: System.Single, fillColor: Drawing.Color) -> None: ...
    @overload
    def DrawSphere(self, sphere: Geometry.Sphere, color: Drawing.Color) -> None: ...
    @overload
    def DrawSphere(self, sphere: Geometry.Sphere, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Geometry.Point2d, size: System.Single) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Geometry.Point2d, size: System.Single, blendColor: Drawing.Color) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Geometry.Point3d, size: System.Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Geometry.Point2d, width: System.Single, height: System.Single) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Geometry.Point3d, size: System.Single, blendColor: Drawing.Color, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: System.Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: System.Single, translation: Geometry.Vector3d, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawStereoFrameBuffer(self, viewportLeft: DocObjects.ViewportInfo, viewportRight: DocObjects.ViewportInfo) -> (bool, System.UInt32, System.UInt32): ...
    @overload
    def DrawSubDShaded(self, subd: Geometry.SubD, material: DisplayMaterial) -> None: ...
    @overload
    def DrawSubDWires(self, subd: Geometry.SubD, color: Drawing.Color, thickness: System.Single) -> None: ...
    @overload
    def DrawSubDWires(self, subd: Geometry.SubD, boundaryPen: DisplayPen, smoothInteriorPen: DisplayPen, creasePen: DisplayPen, nonmanifoldPen: DisplayPen) -> None: ...
    @overload
    def DrawSurface(self, surface: Geometry.Surface, wireColor: Drawing.Color, wireDensity: int) -> None: ...
    @overload
    def DrawText(self, text: Geometry.TextEntity, color: Drawing.Color) -> None: ...
    @overload
    def DrawText(self, text: Geometry.TextEntity, color: Drawing.Color, xform: Geometry.Transform) -> None: ...
    @overload
    def DrawText(self, text: Geometry.TextEntity, color: Drawing.Color, scale: float) -> None: ...
    @overload
    @staticmethod
    def DrawToBitmap(viewport: RhinoViewport, width: int, height: int) -> Drawing.Bitmap: ...
    @overload
    def DrawTorus(self, torus: Geometry.Torus, color: Drawing.Color) -> None: ...
    @overload
    def DrawTorus(self, torus: Geometry.Torus, color: Drawing.Color, thickness: int) -> None: ...
    @overload
    def DrawZebraPreview(self, brep: Geometry.Brep, color: Drawing.Color) -> None: ...
    @overload
    def DrawZebraPreview(self, mesh: Geometry.Mesh, color: Drawing.Color) -> None: ...
    @overload
    def EnableClippingPlanes(self, enable: bool) -> None: ...
    @overload
    def EnableColorWriting(self, enable: bool) -> None: ...
    @overload
    def EnableDepthTesting(self, enable: bool) -> None: ...
    @overload
    def EnableDepthWriting(self, enable: bool) -> None: ...
    @overload
    def EnableLighting(self, enable: bool) -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def ActiveObject(self) -> DocObjects.RhinoObject: ...
    @property
    def ActiveObjectNestingLevel(self) -> int: ...
    @property
    def ActiveObjectNestingStack(self) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @property
    def ActiveTopLevelObject(self) -> DocObjects.RhinoObject: ...
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def DepthMode(self) -> DepthMode: ...
    @property
    def DisplayPipelineAttributes(self) -> DisplayPipelineAttributes: ...
    @property
    def DpiScale(self) -> System.Single: ...
    @property
    def DrawingGrips(self) -> bool: ...
    @property
    def DrawingSurfaces(self) -> bool: ...
    @property
    def DrawingWires(self) -> bool: ...
    @property
    def FrameBuffer(self) -> Drawing.Bitmap: ...
    @property
    def FrameSize(self) -> Drawing.Size: ...
    @property
    def IsDynamicDisplay(self) -> bool: ...
    @property
    def IsInViewCapture(self) -> bool: ...
    @property
    def IsOpen(self) -> bool: ...
    @property
    def IsOpenGL(self) -> bool: ...
    @property
    def IsPrinting(self) -> bool: ...
    @property
    def IsStereoMode(self) -> bool: ...
    @property
    def ModelTransform(self) -> Geometry.Transform: ...
    @property
    def ModelTransformIsIdentity(self) -> bool: ...
    @property
    def NestLevel(self) -> int: ...
    @property
    def RenderPass(self) -> int: ...
    @property
    def ShadingRequired(self) -> bool: ...
    @property
    def StereoProjection(self) -> int: ...
    @property
    def SupportsShading(self) -> bool: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def ZBiasMode(self) -> ZBiasMode: ...
    @overload
    @staticmethod
    def GetDrawListSerialNumbers() -> (System.UInt32, System.UInt32): ...
    @overload
    def GetLights() -> Geometry.System.Array[Geometry.Light]: ...
    @overload
    def GetOpenGLCameraToClip() -> System.System.Array[System.Single]: ...
    @overload
    def GetOpenGLWorldToCamera(self, includeModelTransform: bool) -> System.System.Array[System.Single]: ...
    @overload
    def GetOpenGLWorldToClip(self, includeModelTransform: bool) -> System.System.Array[System.Single]: ...
    @overload
    def InterruptDrawing() -> bool: ...
    @overload
    def IsActive(self, rhinoObject: DocObjects.RhinoObject) -> bool: ...
    @overload
    def IsInTiledDraw() -> (bool, Drawing.Size, Drawing.Rectangle): ...
    @overload
    def IsVisible(self, worldCoordinate: Geometry.Point3d) -> bool: ...
    @overload
    def IsVisible(self, rhinoObject: DocObjects.RhinoObject) -> bool: ...
    @overload
    def IsVisible(self, bbox: Geometry.BoundingBox) -> bool: ...
    @overload
    @staticmethod
    def MakeDefaultOpenGLContextCurrent() -> bool: ...
    @overload
    def Measure2dText(self, text: str, definitionPoint: Geometry.Point2d, middleJustified: bool, rotationRadians: float, height: int, fontFace: str) -> Drawing.Rectangle: ...
    @overload
    def Open() -> bool: ...
    @overload
    def PopCullFaceMode() -> None: ...
    @overload
    def PopDepthTesting() -> None: ...
    @overload
    def PopDepthWriting() -> None: ...
    @overload
    def PopModelTransform() -> None: ...
    @overload
    def PopProjection() -> None: ...
    @overload
    def Push2dProjection() -> None: ...
    @overload
    def PushCullFaceMode(self, mode: CullFaceMode) -> None: ...
    @overload
    def PushDepthTesting(self, enable: bool) -> None: ...
    @overload
    def PushDepthWriting(self, enable: bool) -> None: ...
    @overload
    def PushModelTransform(self, xform: Geometry.Transform) -> None: ...
    @overload
    def RemoveClippingPlane(self, index: int) -> None: ...
    @DepthMode.setter
    def DepthMode(self, value: System.Void): ...
    @ModelTransform.setter
    def ModelTransform(self, value: System.Void): ...
    @ShadingRequired.setter
    def ShadingRequired(self, value: System.Void): ...
    @ZBiasMode.setter
    def ZBiasMode(self, value: System.Void): ...
    @overload
    def SetupDisplayMaterial(self, color: Drawing.Color) -> DisplayMaterial: ...
    @overload
    def SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: DocObjects.RhinoObject) -> DisplayMaterial: ...
    @overload
    def SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: DocObjects.RhinoObject, attributes: DocObjects.ObjectAttributes) -> DisplayMaterial: ...
    @overload
    def SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: DocObjects.RhinoObject, attributes: DocObjects.ObjectAttributes, instanceTransform: Geometry.Transform) -> DisplayMaterial: ...
    @property
    def ObjectCulling(self): ...
    @property
    def CalculateBoundingBox(self): ...
    @property
    def CalculateBoundingBoxZoomExtents(self): ...
    @property
    def InitFrameBuffer(self): ...
    @property
    def PreDrawObjects(self): ...
    @property
    def PreDrawTransparentObjects(self): ...
    @property
    def PreDrawObject(self): ...
    @property
    def PostDrawObject(self): ...
    @property
    def PostDrawObjects(self): ...
    @property
    def DrawForeground(self): ...
    @property
    def DrawOverlay(self): ...
    @property
    def ViewportProjectionChanged(self): ...
    @property
    def DisplayModeChanged(self): ...

class DrawEventArgs(System.EventArgs):
    """    """
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def RhinoDoc(self) -> Rhino.RhinoDoc: ...
    @property
    def Viewport(self) -> RhinoViewport: ...

class DrawForegroundEventArgs(DrawEventArgs):
    """    """
    @property
    def DrawWorldAxes(self) -> bool: ...
    @property
    def WorldAxesDrawn(self) -> bool: ...
    @DrawWorldAxes.setter
    def DrawWorldAxes(self, value: System.Void): ...
    @WorldAxesDrawn.setter
    def WorldAxesDrawn(self, value: System.Void): ...

class CullObjectEventArgs(DrawEventArgs):
    """    """
    @property
    def CullObject(self) -> bool: ...
    @property
    def RhinoObject(self) -> DocObjects.RhinoObject: ...
    @property
    def RhinoObjectSerialNumber(self) -> System.UInt32: ...
    @CullObject.setter
    def CullObject(self, value: System.Void): ...

class DrawObjectEventArgs(DrawEventArgs):
    """    """
    @property
    def DrawObject(self) -> bool: ...
    @property
    def RhinoObject(self) -> DocObjects.RhinoObject: ...
    @DrawObject.setter
    def DrawObject(self, value: System.Void): ...

class CalculateBoundingBoxEventArgs(DrawEventArgs):
    """    """
    @property
    def BoundingBox(self) -> Geometry.BoundingBox: ...
    @overload
    def IncludeBoundingBox(self, box: Geometry.BoundingBox) -> None: ...

class InitFrameBufferEventArgs(System.EventArgs):
    """    """
    @overload
    def SetFill(self, color: Drawing.Color) -> None: ...
    @overload
    def SetFill(self, top: Drawing.Color, bottom: Drawing.Color) -> None: ...
    @overload
    def SetFill(self, topLeft: Drawing.Color, bottomLeft: Drawing.Color, topRight: Drawing.Color, bottomRight: Drawing.Color) -> None: ...

class DisplayModeChangedEventArgs(System.EventArgs):
    """    """
    @property
    def ChangedDisplayModeId(self) -> System.Guid: ...
    @property
    def OldDisplayModeId(self) -> System.Guid: ...
    @property
    def RhinoDoc(self) -> Rhino.RhinoDoc: ...
    @property
    def Viewport(self) -> RhinoViewport: ...

class ZBufferCapture(object):
    """Provides functionality for getting the z-buffer values from a viewport and a given display mode

    """
    def __init__(self, viewport: RhinoViewport): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GrayscaleDib() -> Drawing.Bitmap: ...
    @overload
    def HitCount() -> int: ...
    @overload
    def MaxZ() -> System.Single: ...
    @overload
    def MinZ() -> System.Single: ...
    @overload
    def SetDisplayMode(self, modeId: System.Guid) -> None: ...
    @overload
    def ShowAnnotations(self, on: bool) -> None: ...
    @overload
    def ShowCurves(self, on: bool) -> None: ...
    @overload
    def ShowIsocurves(self, on: bool) -> None: ...
    @overload
    def ShowLights(self, on: bool) -> None: ...
    @overload
    def ShowMeshWires(self, on: bool) -> None: ...
    @overload
    def ShowPoints(self, on: bool) -> None: ...
    @overload
    def ShowText(self, on: bool) -> None: ...
    @overload
    def WorldPointAt(self, x: int, y: int) -> Geometry.Point3d: ...
    @overload
    def ZValueAt(self, x: int, y: int) -> System.Single: ...

class StereoContext(enum.Enum):
    None_ = 0
    LeftEye = 1
    RightEye = 2
    BothEyes = 3

class DisplayPipelineAttributes(object):
    """Represents display pipeline settings, such as "show transparency" and "show grips".

    """
    @overload
    def Dispose() -> None: ...
    @property
    def AmbientLightingColor(self) -> Drawing.Color: ...
    @property
    def AxesSizePercentage(self) -> int: ...
    @property
    def BackMaterialDiffuseColor(self) -> Drawing.Color: ...
    @property
    def BackMaterialShine(self) -> float: ...
    @property
    def BackMaterialTransparency(self) -> float: ...
    @property
    def BakeTextures(self) -> bool: ...
    @property
    def BoundingBoxMode(self) -> BoundingBoxDisplayMode: ...
    @property
    def CastShadows(self) -> bool: ...
    @property
    def ClippingEdgeColor(self) -> Drawing.Color: ...
    @property
    def ClippingEdgeColorUsage(self) -> ClippingEdgeColorUse: ...
    @property
    def ClippingEdgeThickness(self) -> int: ...
    @property
    def ClippingFillColor(self) -> Drawing.Color: ...
    @property
    def ClippingPlaneFillColorUsage(self) -> ClippingPlaneFillColorUse: ...
    @property
    def ClippingShadeColor(self) -> Drawing.Color: ...
    @property
    def ClippingShadeColorUsage(self) -> ClippingShadeColorUse: ...
    @property
    def ClippingShadeSelectedPlane(self) -> bool: ...
    @property
    def ClippingShadeTransparency(self) -> int: ...
    @property
    def ClipSelectionHighlight(self) -> bool: ...
    @property
    def ColorReductionPct(self) -> int: ...
    @property
    def ContextForDraw(self) -> ContextsForDraw: ...
    @property
    def ControlPolygonColor(self) -> Drawing.Color: ...
    @property
    def ControlPolygonGripSize(self) -> int: ...
    @property
    def ControlPolygonHighlight(self) -> bool: ...
    @property
    def ControlPolygonShow(self) -> bool: ...
    @property
    def ControlPolygonShowPoints(self) -> bool: ...
    @property
    def ControlPolygonShowSurface(self) -> bool: ...
    @property
    def ControlPolygonStyle(self) -> PointStyle: ...
    @property
    def ControlPolygonUseFixedSingleColor(self) -> bool: ...
    @property
    def ControlPolygonUseSolidLines(self) -> bool: ...
    @property
    def ControlPolygonWireThickness(self) -> int: ...
    @property
    def CullBackfaces(self) -> bool: ...
    @property
    def CurveColor(self) -> Drawing.Color: ...
    @property
    def CurveThickness(self) -> int: ...
    @property
    def CurveThicknessScale(self) -> System.Single: ...
    @property
    def CurveThicknessUsage(self) -> CurveThicknessUse: ...
    @property
    def CustomGroundPlaneAltitude(self) -> float: ...
    @property
    def CustomGroundPlaneAutomaticAltitude(self) -> bool: ...
    @property
    def CustomGroundPlaneOn(self) -> bool: ...
    @property
    def CustomGroundPlaneShadowOnly(self) -> bool: ...
    @property
    def DisableConduits(self) -> bool: ...
    @property
    def DisableTransparency(self) -> bool: ...
    @property
    def DynamicDisplayUsage(self) -> DynamicDisplayUse: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def FillMode(self) -> FrameBufferFillMode: ...
    @property
    def FrontDiffuse(self) -> Drawing.Color: ...
    @property
    def FrontFlatShaded(self) -> bool: ...
    @property
    def FrontMaterialShine(self) -> float: ...
    @property
    def FrontMaterialTransparency(self) -> float: ...
    @property
    def FrontOverrideObjectColor(self) -> bool: ...
    @property
    def GhostLockedObjects(self) -> bool: ...
    @property
    def GridPlaneColor(self) -> Drawing.Color: ...
    @property
    def GridPlaneTransparency(self) -> int: ...
    @property
    def GridPlaneVisibility(self) -> GridPlaneVisibilityMode: ...
    @property
    def GridTransparency(self) -> int: ...
    @property
    def GroundPlaneUsage(self) -> GroundPlaneUsages: ...
    @property
    def HighlightSurfaces(self) -> bool: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IgnoreHighlights(self) -> bool: ...
    @property
    def LayersFollowLockUsage(self) -> bool: ...
    @property
    def LightingScheme(self) -> LightingSchema: ...
    @property
    def LinearWorkflowUsage(self) -> LinearWorkflowUsages: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def LockedColor(self) -> Drawing.Color: ...
    @property
    def LockedObjectsDrawBehindOthers(self) -> bool: ...
    @property
    def LockedObjectTransparency(self) -> int: ...
    @property
    def LockedObjectUsage(self) -> LockedObjectUse: ...
    @property
    def MeshEdgeColor(self) -> Drawing.Color: ...
    @property
    def MeshEdgeColorReduction(self) -> int: ...
    @property
    def MeshEdgeThickness(self) -> int: ...
    @property
    def MeshNakedEdgeColor(self) -> Drawing.Color: ...
    @property
    def MeshNakedEdgeColorReduction(self) -> int: ...
    @property
    def MeshNakedEdgeThickness(self) -> int: ...
    @property
    def MeshNonmanifoldEdgeColor(self) -> Drawing.Color: ...
    @property
    def MeshNonmanifoldEdgeColorReduction(self) -> int: ...
    @property
    def MeshNonmanifoldEdgeThickness(self) -> int: ...
    @property
    def MeshSpecificAttributes(self) -> MeshDisplayAttributes: ...
    @property
    def MeshVertexSize(self) -> int: ...
    @property
    def ObjectColor(self) -> Drawing.Color: ...
    @property
    def PlaneUsesGridColor(self) -> bool: ...
    @property
    def PointCloudRadius(self) -> System.Single: ...
    @property
    def PointCloudStyle(self) -> PointStyle: ...
    @property
    def PointRadius(self) -> System.Single: ...
    @property
    def PointStyle(self) -> PointStyle: ...
    @property
    def PostProcessFrameBuffer(self) -> bool: ...
    @property
    def PostProcessGamma(self) -> bool: ...
    @property
    def PreProcessColors(self) -> bool: ...
    @property
    def PreProcessGamma(self) -> System.Single: ...
    @property
    def PreProcessTextures(self) -> bool: ...
    @property
    def RealtimeDisplayId(self) -> System.Guid: ...
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @property
    def ShadeVertexColors(self) -> bool: ...
    @property
    def ShadingEnabled(self) -> bool: ...
    @property
    def ShadowBiasX(self) -> float: ...
    @property
    def ShadowClippingRadius(self) -> System.Single: ...
    @property
    def ShadowColor(self) -> Drawing.Color: ...
    @property
    def ShadowEdgeBlur(self) -> float: ...
    @property
    def ShadowIntensity(self) -> int: ...
    @property
    def ShadowMemoryUsage(self) -> int: ...
    @property
    def ShadowsIgnoreUserDefinedClippingPlanes(self) -> bool: ...
    @property
    def ShadowSoftEdgeQuality(self) -> int: ...
    @property
    def ShadowsOn(self) -> bool: ...
    @property
    def ShadowTransparencyTolerance(self) -> int: ...
    @property
    def ShowAnnotations(self) -> bool: ...
    @property
    def ShowClipIntersectionEdges(self) -> bool: ...
    @property
    def ShowClipIntersectionSurfaces(self) -> bool: ...
    @property
    def ShowClippingEdges(self) -> bool: ...
    @property
    def ShowClippingFills(self) -> bool: ...
    @property
    def ShowClippingPlanes(self) -> bool: ...
    @property
    def ShowCurves(self) -> bool: ...
    @property
    def ShowGrips(self) -> bool: ...
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def ShowLights(self) -> bool: ...
    @property
    def ShowMeshEdges(self) -> bool: ...
    @property
    def ShowMeshNakedEdges(self) -> bool: ...
    @property
    def ShowMeshNonmanifoldEdges(self) -> bool: ...
    @property
    def ShowPointClouds(self) -> bool: ...
    @property
    def ShowPoints(self) -> bool: ...
    @property
    def ShowRealtimeRenderProgressBar(self) -> bool: ...
    @property
    def ShowSubDBoundary(self) -> bool: ...
    @property
    def ShowSubDCreases(self) -> bool: ...
    @property
    def ShowSubDEdges(self) -> bool: ...
    @property
    def ShowSubDNonmanifoldEdges(self) -> bool: ...
    @property
    def ShowSubDReflectionPlanePreview(self) -> bool: ...
    @property
    def ShowSurfaceEdge(self) -> bool: ...
    @property
    def ShowSurfaceEdges(self) -> bool: ...
    @property
    def ShowSurfaceNakedEdge(self) -> bool: ...
    @property
    def ShowTangentEdges(self) -> bool: ...
    @property
    def ShowTangentSeams(self) -> bool: ...
    @property
    def ShowText(self) -> bool: ...
    @property
    def SkylightShadowQuality(self) -> int: ...
    @property
    def StereoContext(self) -> StereoContext: ...
    @property
    def SubDBoundaryApplyPattern(self) -> bool: ...
    @property
    def SubDBoundaryColorReduction(self) -> int: ...
    @property
    def SubDBoundaryEdgeColor(self) -> Drawing.Color: ...
    @property
    def SubDBoundaryEdgeColorUsage(self) -> SubDEdgeColorUse: ...
    @property
    def SubDBoundaryEdgeThickness(self) -> System.Single: ...
    @property
    def SubDBoundaryThicknessScale(self) -> System.Single: ...
    @property
    def SubDBoundaryThicknessUsage(self) -> SubDThicknessUse: ...
    @property
    def SubDCreaseInteriorApplyPattern(self) -> bool: ...
    @property
    def SubDCreaseInteriorColorReduction(self) -> int: ...
    @property
    def SubDCreaseInteriorEdgeColor(self) -> Drawing.Color: ...
    @property
    def SubDCreaseInteriorEdgeColorUsage(self) -> SubDEdgeColorUse: ...
    @property
    def SubDCreaseInteriorEdgeThickness(self) -> System.Single: ...
    @property
    def SubDCreaseInteriorThicknessScale(self) -> System.Single: ...
    @property
    def SubDCreaseInteriorThicknessUsage(self) -> SubDThicknessUse: ...
    @property
    def SubDNonManifoldApplyPattern(self) -> bool: ...
    @property
    def SubDNonManifoldColorReduction(self) -> int: ...
    @property
    def SubDNonManifoldEdgeColor(self) -> Drawing.Color: ...
    @property
    def SubDNonManifoldEdgeColorUsage(self) -> SubDEdgeColorUse: ...
    @property
    def SubDNonManifoldEdgeThickness(self) -> System.Single: ...
    @property
    def SubDNonManifoldThicknessScale(self) -> System.Single: ...
    @property
    def SubDNonManifoldThicknessUsage(self) -> SubDThicknessUse: ...
    @property
    def SubDReflectionAxisLineColor(self) -> Drawing.Color: ...
    @property
    def SubDReflectionPlaneAxisLineOn(self) -> bool: ...
    @property
    def SubDReflectionPlaneColor(self) -> Drawing.Color: ...
    @property
    def SubDReflectionPlaneColorReduction(self) -> int: ...
    @property
    def SubDReflectionPlaneColorUsage(self) -> SubDReflectionPlaneColorUse: ...
    @property
    def SubDSmoothInteriorApplyPattern(self) -> bool: ...
    @property
    def SubDSmoothInteriorColorReduction(self) -> int: ...
    @property
    def SubDSmoothInteriorEdgeColor(self) -> Drawing.Color: ...
    @property
    def SubDSmoothInteriorEdgeColorUsage(self) -> SubDEdgeColorUse: ...
    @property
    def SubDSmoothInteriorEdgeThickness(self) -> System.Single: ...
    @property
    def SubDSmoothInteriorThicknessScale(self) -> System.Single: ...
    @property
    def SubDSmoothInteriorThicknessUsage(self) -> SubDThicknessUse: ...
    @property
    def SubDThicknessUsage(self) -> SubDThicknessUse: ...
    @property
    def SurfaceEdgeApplyPattern(self) -> bool: ...
    @property
    def SurfaceEdgeColor(self) -> Drawing.Color: ...
    @property
    def SurfaceEdgeColorReduction(self) -> int: ...
    @property
    def SurfaceEdgeColorReductionPercent(self) -> int: ...
    @property
    def SurfaceEdgeColorUsage(self) -> SurfaceEdgeColorUse: ...
    @property
    def SurfaceEdgeThickness(self) -> int: ...
    @property
    def SurfaceEdgeThicknessScale(self) -> System.Single: ...
    @property
    def SurfaceIsoColorsUsed(self) -> bool: ...
    @property
    def SurfaceIsoShowForFlatFaces(self) -> bool: ...
    @property
    def SurfaceIsoSingleColor(self) -> bool: ...
    @property
    def SurfaceIsoThickness(self) -> int: ...
    @property
    def SurfaceIsoThicknessUScale(self) -> System.Single: ...
    @property
    def SurfaceIsoThicknessUsed(self) -> bool: ...
    @property
    def SurfaceIsoThicknessVScale(self) -> System.Single: ...
    @property
    def SurfaceIsoThicknessWScale(self) -> System.Single: ...
    @property
    def SurfaceIsoUColor(self) -> Drawing.Color: ...
    @property
    def SurfaceIsoUThickness(self) -> int: ...
    @property
    def SurfaceIsoUVColor(self) -> Drawing.Color: ...
    @property
    def SurfaceIsoVColor(self) -> Drawing.Color: ...
    @property
    def SurfaceIsoVThickness(self) -> int: ...
    @property
    def SurfaceNakedAdgeColorReduction(self) -> int: ...
    @property
    def SurfaceNakedEdgeApplyPattern(self) -> bool: ...
    @property
    def SurfaceNakedEdgeColor(self) -> Drawing.Color: ...
    @property
    def SurfaceNakedEdgeColorReductionPercent(self) -> int: ...
    @property
    def SurfaceNakedEdgeColorUsage(self) -> SurfaceNakedEdgeColorUse: ...
    @property
    def SurfaceNakedEdgeThickness(self) -> int: ...
    @property
    def SurfaceNakedEdgeThicknessScale(self) -> System.Single: ...
    @property
    def UseAssignedObjectMaterial(self) -> bool: ...
    @property
    def UseCustomObjectColor(self) -> bool: ...
    @property
    def UseCustomObjectColorBackfaces(self) -> bool: ...
    @property
    def UseCustomObjectMaterial(self) -> bool: ...
    @property
    def UseCustomObjectMaterialBackfaces(self) -> bool: ...
    @property
    def UseLightColor(self) -> bool: ...
    @property
    def UseSectionStyles(self) -> bool: ...
    @property
    def UseSingleCurveColor(self) -> bool: ...
    @property
    def ViewSpecificAttributes(self) -> ViewDisplayAttributes: ...
    @property
    def WorldAxesIconColorUsage(self) -> WorldAxesIconColorUse: ...
    @property
    def XrayAllObjects(self) -> bool: ...
    @overload
    def GetColorFadeEffect() -> (Drawing.Color, System.Single): ...
    @overload
    def GetCurveThicknessUsage() -> CurveThicknessUse: ...
    @overload
    def GetDiagonalHatchEffect() -> (System.Single, System.Single): ...
    @overload
    def GetDitherTransparencyEffect() -> System.Single: ...
    @overload
    def GetFill() -> (Drawing.Color, Drawing.Color, Drawing.Color, Drawing.Color): ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetSurfaceEdgeThicknessUsage() -> SurfaceThicknessUse: ...
    @overload
    def GetSurfaceIsoApplyPattern() -> (bool, bool, bool): ...
    @overload
    def GetSurfaceIsoColorUsage() -> SurfaceIsoColorUse: ...
    @overload
    def GetSurfaceIsoThicknessUsage() -> SurfaceIsoThicknessUse: ...
    @overload
    def GetSurfaceNakedEdgeThicknessUsage() -> SurfaceNakedEdgeThicknessUse: ...
    @overload
    def HasColorFadeEffect() -> bool: ...
    @overload
    def HasDiagonalHatchEffect() -> bool: ...
    @overload
    def HasDitherTransparencyEffect() -> bool: ...
    @AmbientLightingColor.setter
    def AmbientLightingColor(self, value: System.Void): ...
    @AxesSizePercentage.setter
    def AxesSizePercentage(self, value: System.Void): ...
    @BackMaterialDiffuseColor.setter
    def BackMaterialDiffuseColor(self, value: System.Void): ...
    @BackMaterialShine.setter
    def BackMaterialShine(self, value: System.Void): ...
    @BackMaterialTransparency.setter
    def BackMaterialTransparency(self, value: System.Void): ...
    @BakeTextures.setter
    def BakeTextures(self, value: System.Void): ...
    @BoundingBoxMode.setter
    def BoundingBoxMode(self, value: System.Void): ...
    @CastShadows.setter
    def CastShadows(self, value: System.Void): ...
    @ClippingEdgeColor.setter
    def ClippingEdgeColor(self, value: System.Void): ...
    @ClippingEdgeColorUsage.setter
    def ClippingEdgeColorUsage(self, value: System.Void): ...
    @ClippingEdgeThickness.setter
    def ClippingEdgeThickness(self, value: System.Void): ...
    @ClippingFillColor.setter
    def ClippingFillColor(self, value: System.Void): ...
    @ClippingPlaneFillColorUsage.setter
    def ClippingPlaneFillColorUsage(self, value: System.Void): ...
    @ClippingShadeColor.setter
    def ClippingShadeColor(self, value: System.Void): ...
    @ClippingShadeColorUsage.setter
    def ClippingShadeColorUsage(self, value: System.Void): ...
    @ClippingShadeSelectedPlane.setter
    def ClippingShadeSelectedPlane(self, value: System.Void): ...
    @ClippingShadeTransparency.setter
    def ClippingShadeTransparency(self, value: System.Void): ...
    @ClipSelectionHighlight.setter
    def ClipSelectionHighlight(self, value: System.Void): ...
    @ColorReductionPct.setter
    def ColorReductionPct(self, value: System.Void): ...
    @ControlPolygonColor.setter
    def ControlPolygonColor(self, value: System.Void): ...
    @ControlPolygonGripSize.setter
    def ControlPolygonGripSize(self, value: System.Void): ...
    @ControlPolygonHighlight.setter
    def ControlPolygonHighlight(self, value: System.Void): ...
    @ControlPolygonShow.setter
    def ControlPolygonShow(self, value: System.Void): ...
    @ControlPolygonShowPoints.setter
    def ControlPolygonShowPoints(self, value: System.Void): ...
    @ControlPolygonShowSurface.setter
    def ControlPolygonShowSurface(self, value: System.Void): ...
    @ControlPolygonStyle.setter
    def ControlPolygonStyle(self, value: System.Void): ...
    @ControlPolygonUseFixedSingleColor.setter
    def ControlPolygonUseFixedSingleColor(self, value: System.Void): ...
    @ControlPolygonUseSolidLines.setter
    def ControlPolygonUseSolidLines(self, value: System.Void): ...
    @ControlPolygonWireThickness.setter
    def ControlPolygonWireThickness(self, value: System.Void): ...
    @CullBackfaces.setter
    def CullBackfaces(self, value: System.Void): ...
    @CurveColor.setter
    def CurveColor(self, value: System.Void): ...
    @CurveThickness.setter
    def CurveThickness(self, value: System.Void): ...
    @CurveThicknessScale.setter
    def CurveThicknessScale(self, value: System.Void): ...
    @CurveThicknessUsage.setter
    def CurveThicknessUsage(self, value: System.Void): ...
    @CustomGroundPlaneAltitude.setter
    def CustomGroundPlaneAltitude(self, value: System.Void): ...
    @CustomGroundPlaneAutomaticAltitude.setter
    def CustomGroundPlaneAutomaticAltitude(self, value: System.Void): ...
    @CustomGroundPlaneOn.setter
    def CustomGroundPlaneOn(self, value: System.Void): ...
    @CustomGroundPlaneShadowOnly.setter
    def CustomGroundPlaneShadowOnly(self, value: System.Void): ...
    @DisableConduits.setter
    def DisableConduits(self, value: System.Void): ...
    @DisableTransparency.setter
    def DisableTransparency(self, value: System.Void): ...
    @DynamicDisplayUsage.setter
    def DynamicDisplayUsage(self, value: System.Void): ...
    @EnglishName.setter
    def EnglishName(self, value: System.Void): ...
    @FillMode.setter
    def FillMode(self, value: System.Void): ...
    @FrontDiffuse.setter
    def FrontDiffuse(self, value: System.Void): ...
    @FrontFlatShaded.setter
    def FrontFlatShaded(self, value: System.Void): ...
    @FrontMaterialShine.setter
    def FrontMaterialShine(self, value: System.Void): ...
    @FrontMaterialTransparency.setter
    def FrontMaterialTransparency(self, value: System.Void): ...
    @FrontOverrideObjectColor.setter
    def FrontOverrideObjectColor(self, value: System.Void): ...
    @GhostLockedObjects.setter
    def GhostLockedObjects(self, value: System.Void): ...
    @GridPlaneColor.setter
    def GridPlaneColor(self, value: System.Void): ...
    @GridPlaneTransparency.setter
    def GridPlaneTransparency(self, value: System.Void): ...
    @GridPlaneVisibility.setter
    def GridPlaneVisibility(self, value: System.Void): ...
    @GridTransparency.setter
    def GridTransparency(self, value: System.Void): ...
    @GroundPlaneUsage.setter
    def GroundPlaneUsage(self, value: System.Void): ...
    @HighlightSurfaces.setter
    def HighlightSurfaces(self, value: System.Void): ...
    @IgnoreHighlights.setter
    def IgnoreHighlights(self, value: System.Void): ...
    @LayersFollowLockUsage.setter
    def LayersFollowLockUsage(self, value: System.Void): ...
    @LightingScheme.setter
    def LightingScheme(self, value: System.Void): ...
    @LinearWorkflowUsage.setter
    def LinearWorkflowUsage(self, value: System.Void): ...
    @LockedColor.setter
    def LockedColor(self, value: System.Void): ...
    @LockedObjectsDrawBehindOthers.setter
    def LockedObjectsDrawBehindOthers(self, value: System.Void): ...
    @LockedObjectTransparency.setter
    def LockedObjectTransparency(self, value: System.Void): ...
    @LockedObjectUsage.setter
    def LockedObjectUsage(self, value: System.Void): ...
    @MeshEdgeColor.setter
    def MeshEdgeColor(self, value: System.Void): ...
    @MeshEdgeColorReduction.setter
    def MeshEdgeColorReduction(self, value: System.Void): ...
    @MeshEdgeThickness.setter
    def MeshEdgeThickness(self, value: System.Void): ...
    @MeshNakedEdgeColor.setter
    def MeshNakedEdgeColor(self, value: System.Void): ...
    @MeshNakedEdgeColorReduction.setter
    def MeshNakedEdgeColorReduction(self, value: System.Void): ...
    @MeshNakedEdgeThickness.setter
    def MeshNakedEdgeThickness(self, value: System.Void): ...
    @MeshNonmanifoldEdgeColor.setter
    def MeshNonmanifoldEdgeColor(self, value: System.Void): ...
    @MeshNonmanifoldEdgeColorReduction.setter
    def MeshNonmanifoldEdgeColorReduction(self, value: System.Void): ...
    @MeshNonmanifoldEdgeThickness.setter
    def MeshNonmanifoldEdgeThickness(self, value: System.Void): ...
    @MeshVertexSize.setter
    def MeshVertexSize(self, value: System.Void): ...
    @ObjectColor.setter
    def ObjectColor(self, value: System.Void): ...
    @PlaneUsesGridColor.setter
    def PlaneUsesGridColor(self, value: System.Void): ...
    @PointCloudRadius.setter
    def PointCloudRadius(self, value: System.Void): ...
    @PointCloudStyle.setter
    def PointCloudStyle(self, value: System.Void): ...
    @PointRadius.setter
    def PointRadius(self, value: System.Void): ...
    @PointStyle.setter
    def PointStyle(self, value: System.Void): ...
    @PostProcessFrameBuffer.setter
    def PostProcessFrameBuffer(self, value: System.Void): ...
    @PostProcessGamma.setter
    def PostProcessGamma(self, value: System.Void): ...
    @PreProcessColors.setter
    def PreProcessColors(self, value: System.Void): ...
    @PreProcessGamma.setter
    def PreProcessGamma(self, value: System.Void): ...
    @PreProcessTextures.setter
    def PreProcessTextures(self, value: System.Void): ...
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self, value: System.Void): ...
    @ShadeVertexColors.setter
    def ShadeVertexColors(self, value: System.Void): ...
    @ShadingEnabled.setter
    def ShadingEnabled(self, value: System.Void): ...
    @ShadowBiasX.setter
    def ShadowBiasX(self, value: System.Void): ...
    @ShadowClippingRadius.setter
    def ShadowClippingRadius(self, value: System.Void): ...
    @ShadowColor.setter
    def ShadowColor(self, value: System.Void): ...
    @ShadowEdgeBlur.setter
    def ShadowEdgeBlur(self, value: System.Void): ...
    @ShadowIntensity.setter
    def ShadowIntensity(self, value: System.Void): ...
    @ShadowMemoryUsage.setter
    def ShadowMemoryUsage(self, value: System.Void): ...
    @ShadowsIgnoreUserDefinedClippingPlanes.setter
    def ShadowsIgnoreUserDefinedClippingPlanes(self, value: System.Void): ...
    @ShadowSoftEdgeQuality.setter
    def ShadowSoftEdgeQuality(self, value: System.Void): ...
    @ShadowsOn.setter
    def ShadowsOn(self, value: System.Void): ...
    @ShadowTransparencyTolerance.setter
    def ShadowTransparencyTolerance(self, value: System.Void): ...
    @ShowAnnotations.setter
    def ShowAnnotations(self, value: System.Void): ...
    @ShowClipIntersectionEdges.setter
    def ShowClipIntersectionEdges(self, value: System.Void): ...
    @ShowClipIntersectionSurfaces.setter
    def ShowClipIntersectionSurfaces(self, value: System.Void): ...
    @ShowClippingEdges.setter
    def ShowClippingEdges(self, value: System.Void): ...
    @ShowClippingFills.setter
    def ShowClippingFills(self, value: System.Void): ...
    @ShowClippingPlanes.setter
    def ShowClippingPlanes(self, value: System.Void): ...
    @ShowCurves.setter
    def ShowCurves(self, value: System.Void): ...
    @ShowGrips.setter
    def ShowGrips(self, value: System.Void): ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: System.Void): ...
    @ShowLights.setter
    def ShowLights(self, value: System.Void): ...
    @ShowMeshEdges.setter
    def ShowMeshEdges(self, value: System.Void): ...
    @ShowMeshNakedEdges.setter
    def ShowMeshNakedEdges(self, value: System.Void): ...
    @ShowMeshNonmanifoldEdges.setter
    def ShowMeshNonmanifoldEdges(self, value: System.Void): ...
    @ShowPointClouds.setter
    def ShowPointClouds(self, value: System.Void): ...
    @ShowPoints.setter
    def ShowPoints(self, value: System.Void): ...
    @ShowRealtimeRenderProgressBar.setter
    def ShowRealtimeRenderProgressBar(self, value: System.Void): ...
    @ShowSubDBoundary.setter
    def ShowSubDBoundary(self, value: System.Void): ...
    @ShowSubDCreases.setter
    def ShowSubDCreases(self, value: System.Void): ...
    @ShowSubDEdges.setter
    def ShowSubDEdges(self, value: System.Void): ...
    @ShowSubDNonmanifoldEdges.setter
    def ShowSubDNonmanifoldEdges(self, value: System.Void): ...
    @ShowSubDReflectionPlanePreview.setter
    def ShowSubDReflectionPlanePreview(self, value: System.Void): ...
    @ShowSurfaceEdge.setter
    def ShowSurfaceEdge(self, value: System.Void): ...
    @ShowSurfaceEdges.setter
    def ShowSurfaceEdges(self, value: System.Void): ...
    @ShowSurfaceNakedEdge.setter
    def ShowSurfaceNakedEdge(self, value: System.Void): ...
    @ShowTangentEdges.setter
    def ShowTangentEdges(self, value: System.Void): ...
    @ShowTangentSeams.setter
    def ShowTangentSeams(self, value: System.Void): ...
    @ShowText.setter
    def ShowText(self, value: System.Void): ...
    @SkylightShadowQuality.setter
    def SkylightShadowQuality(self, value: System.Void): ...
    @StereoContext.setter
    def StereoContext(self, value: System.Void): ...
    @SubDBoundaryApplyPattern.setter
    def SubDBoundaryApplyPattern(self, value: System.Void): ...
    @SubDBoundaryColorReduction.setter
    def SubDBoundaryColorReduction(self, value: System.Void): ...
    @SubDBoundaryEdgeColor.setter
    def SubDBoundaryEdgeColor(self, value: System.Void): ...
    @SubDBoundaryEdgeColorUsage.setter
    def SubDBoundaryEdgeColorUsage(self, value: System.Void): ...
    @SubDBoundaryEdgeThickness.setter
    def SubDBoundaryEdgeThickness(self, value: System.Void): ...
    @SubDBoundaryThicknessScale.setter
    def SubDBoundaryThicknessScale(self, value: System.Void): ...
    @SubDBoundaryThicknessUsage.setter
    def SubDBoundaryThicknessUsage(self, value: System.Void): ...
    @SubDCreaseInteriorApplyPattern.setter
    def SubDCreaseInteriorApplyPattern(self, value: System.Void): ...
    @SubDCreaseInteriorColorReduction.setter
    def SubDCreaseInteriorColorReduction(self, value: System.Void): ...
    @SubDCreaseInteriorEdgeColor.setter
    def SubDCreaseInteriorEdgeColor(self, value: System.Void): ...
    @SubDCreaseInteriorEdgeColorUsage.setter
    def SubDCreaseInteriorEdgeColorUsage(self, value: System.Void): ...
    @SubDCreaseInteriorEdgeThickness.setter
    def SubDCreaseInteriorEdgeThickness(self, value: System.Void): ...
    @SubDCreaseInteriorThicknessScale.setter
    def SubDCreaseInteriorThicknessScale(self, value: System.Void): ...
    @SubDCreaseInteriorThicknessUsage.setter
    def SubDCreaseInteriorThicknessUsage(self, value: System.Void): ...
    @SubDNonManifoldApplyPattern.setter
    def SubDNonManifoldApplyPattern(self, value: System.Void): ...
    @SubDNonManifoldColorReduction.setter
    def SubDNonManifoldColorReduction(self, value: System.Void): ...
    @SubDNonManifoldEdgeColor.setter
    def SubDNonManifoldEdgeColor(self, value: System.Void): ...
    @SubDNonManifoldEdgeColorUsage.setter
    def SubDNonManifoldEdgeColorUsage(self, value: System.Void): ...
    @SubDNonManifoldEdgeThickness.setter
    def SubDNonManifoldEdgeThickness(self, value: System.Void): ...
    @SubDNonManifoldThicknessScale.setter
    def SubDNonManifoldThicknessScale(self, value: System.Void): ...
    @SubDNonManifoldThicknessUsage.setter
    def SubDNonManifoldThicknessUsage(self, value: System.Void): ...
    @SubDReflectionAxisLineColor.setter
    def SubDReflectionAxisLineColor(self, value: System.Void): ...
    @SubDReflectionPlaneAxisLineOn.setter
    def SubDReflectionPlaneAxisLineOn(self, value: System.Void): ...
    @SubDReflectionPlaneColor.setter
    def SubDReflectionPlaneColor(self, value: System.Void): ...
    @SubDReflectionPlaneColorReduction.setter
    def SubDReflectionPlaneColorReduction(self, value: System.Void): ...
    @SubDReflectionPlaneColorUsage.setter
    def SubDReflectionPlaneColorUsage(self, value: System.Void): ...
    @SubDSmoothInteriorApplyPattern.setter
    def SubDSmoothInteriorApplyPattern(self, value: System.Void): ...
    @SubDSmoothInteriorColorReduction.setter
    def SubDSmoothInteriorColorReduction(self, value: System.Void): ...
    @SubDSmoothInteriorEdgeColor.setter
    def SubDSmoothInteriorEdgeColor(self, value: System.Void): ...
    @SubDSmoothInteriorEdgeColorUsage.setter
    def SubDSmoothInteriorEdgeColorUsage(self, value: System.Void): ...
    @SubDSmoothInteriorEdgeThickness.setter
    def SubDSmoothInteriorEdgeThickness(self, value: System.Void): ...
    @SubDSmoothInteriorThicknessScale.setter
    def SubDSmoothInteriorThicknessScale(self, value: System.Void): ...
    @SubDSmoothInteriorThicknessUsage.setter
    def SubDSmoothInteriorThicknessUsage(self, value: System.Void): ...
    @SubDThicknessUsage.setter
    def SubDThicknessUsage(self, value: System.Void): ...
    @SurfaceEdgeApplyPattern.setter
    def SurfaceEdgeApplyPattern(self, value: System.Void): ...
    @SurfaceEdgeColor.setter
    def SurfaceEdgeColor(self, value: System.Void): ...
    @SurfaceEdgeColorReduction.setter
    def SurfaceEdgeColorReduction(self, value: System.Void): ...
    @SurfaceEdgeColorReductionPercent.setter
    def SurfaceEdgeColorReductionPercent(self, value: System.Void): ...
    @SurfaceEdgeColorUsage.setter
    def SurfaceEdgeColorUsage(self, value: System.Void): ...
    @SurfaceEdgeThickness.setter
    def SurfaceEdgeThickness(self, value: System.Void): ...
    @SurfaceEdgeThicknessScale.setter
    def SurfaceEdgeThicknessScale(self, value: System.Void): ...
    @SurfaceIsoColorsUsed.setter
    def SurfaceIsoColorsUsed(self, value: System.Void): ...
    @SurfaceIsoShowForFlatFaces.setter
    def SurfaceIsoShowForFlatFaces(self, value: System.Void): ...
    @SurfaceIsoSingleColor.setter
    def SurfaceIsoSingleColor(self, value: System.Void): ...
    @SurfaceIsoThickness.setter
    def SurfaceIsoThickness(self, value: System.Void): ...
    @SurfaceIsoThicknessUScale.setter
    def SurfaceIsoThicknessUScale(self, value: System.Void): ...
    @SurfaceIsoThicknessUsed.setter
    def SurfaceIsoThicknessUsed(self, value: System.Void): ...
    @SurfaceIsoThicknessVScale.setter
    def SurfaceIsoThicknessVScale(self, value: System.Void): ...
    @SurfaceIsoThicknessWScale.setter
    def SurfaceIsoThicknessWScale(self, value: System.Void): ...
    @SurfaceIsoUColor.setter
    def SurfaceIsoUColor(self, value: System.Void): ...
    @SurfaceIsoUThickness.setter
    def SurfaceIsoUThickness(self, value: System.Void): ...
    @SurfaceIsoUVColor.setter
    def SurfaceIsoUVColor(self, value: System.Void): ...
    @SurfaceIsoVColor.setter
    def SurfaceIsoVColor(self, value: System.Void): ...
    @SurfaceIsoVThickness.setter
    def SurfaceIsoVThickness(self, value: System.Void): ...
    @SurfaceNakedAdgeColorReduction.setter
    def SurfaceNakedAdgeColorReduction(self, value: System.Void): ...
    @SurfaceNakedEdgeApplyPattern.setter
    def SurfaceNakedEdgeApplyPattern(self, value: System.Void): ...
    @SurfaceNakedEdgeColor.setter
    def SurfaceNakedEdgeColor(self, value: System.Void): ...
    @SurfaceNakedEdgeColorReductionPercent.setter
    def SurfaceNakedEdgeColorReductionPercent(self, value: System.Void): ...
    @SurfaceNakedEdgeColorUsage.setter
    def SurfaceNakedEdgeColorUsage(self, value: System.Void): ...
    @SurfaceNakedEdgeThickness.setter
    def SurfaceNakedEdgeThickness(self, value: System.Void): ...
    @SurfaceNakedEdgeThicknessScale.setter
    def SurfaceNakedEdgeThicknessScale(self, value: System.Void): ...
    @UseAssignedObjectMaterial.setter
    def UseAssignedObjectMaterial(self, value: System.Void): ...
    @UseCustomObjectColor.setter
    def UseCustomObjectColor(self, value: System.Void): ...
    @UseCustomObjectColorBackfaces.setter
    def UseCustomObjectColorBackfaces(self, value: System.Void): ...
    @UseCustomObjectMaterial.setter
    def UseCustomObjectMaterial(self, value: System.Void): ...
    @UseCustomObjectMaterialBackfaces.setter
    def UseCustomObjectMaterialBackfaces(self, value: System.Void): ...
    @UseLightColor.setter
    def UseLightColor(self, value: System.Void): ...
    @UseSectionStyles.setter
    def UseSectionStyles(self, value: System.Void): ...
    @UseSingleCurveColor.setter
    def UseSingleCurveColor(self, value: System.Void): ...
    @WorldAxesIconColorUsage.setter
    def WorldAxesIconColorUsage(self, value: System.Void): ...
    @XrayAllObjects.setter
    def XrayAllObjects(self, value: System.Void): ...
    @overload
    def SetColorFadeEffect() -> (Drawing.Color, System.Single): ...
    @overload
    def SetCurveThicknessUsage(self, usage: CurveThicknessUse) -> None: ...
    @overload
    def SetDiagonalHatchEffect() -> (System.Single, System.Single): ...
    @overload
    def SetDitherTransparencyEffect() -> (System.Single): ...
    @overload
    def SetFill(self, singleColor: Drawing.Color) -> None: ...
    @overload
    def SetFill(self, gradientTop: Drawing.Color, gradientBottom: Drawing.Color) -> None: ...
    @overload
    def SetFill(self, gradientTopLeft: Drawing.Color, gradientBottomLeft: Drawing.Color, gradientTopRight: Drawing.Color, gradientBottomRight: Drawing.Color) -> None: ...
    @overload
    def SetSurfaceEdgeThicknessUsage(self, use: SurfaceThicknessUse) -> None: ...
    @overload
    def SetSurfaceIsoApplyPattern(self, u: bool, v: bool, w: bool) -> None: ...
    @overload
    def SetSurfaceIsoColorUsage(self, use: SurfaceIsoColorUse) -> None: ...
    @overload
    def SetSurfaceIsoThicknessUsage(self, value: SurfaceIsoThicknessUse) -> None: ...
    @overload
    def SetSurfaceNakedEdgeThicknessUsage(self, use: SurfaceNakedEdgeThicknessUse) -> None: ...

class DisplayMaterial(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: DisplayMaterial): ...
    @overload
    def __init__(self, material: DocObjects.Material): ...
    @overload
    def __init__(self, diffuse: Drawing.Color): ...
    @overload
    def __init__(self, diffuse: Drawing.Color, transparency: float): ...
    @overload
    def __init__(self, diffuse: Drawing.Color, specular: Drawing.Color, ambient: Drawing.Color, emission: Drawing.Color, shine: float, transparency: float): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Ambient(self) -> Drawing.Color: ...
    @property
    def BackAmbient(self) -> Drawing.Color: ...
    @property
    def BackDiffuse(self) -> Drawing.Color: ...
    @property
    def BackEmission(self) -> Drawing.Color: ...
    @property
    def BackShine(self) -> float: ...
    @property
    def BackSpecular(self) -> Drawing.Color: ...
    @property
    def BackTransparency(self) -> float: ...
    @property
    def Diffuse(self) -> Drawing.Color: ...
    @property
    def Emission(self) -> Drawing.Color: ...
    @property
    def IsTwoSided(self) -> bool: ...
    @property
    def Shine(self) -> float: ...
    @property
    def Specular(self) -> Drawing.Color: ...
    @property
    def Transparency(self) -> float: ...
    @overload
    def GetBitmapTexture(self, front: bool) -> DocObjects.Texture: ...
    @overload
    def GetBumpTexture(self, front: bool) -> DocObjects.Texture: ...
    @overload
    def GetEnvironmentTexture(self, front: bool) -> DocObjects.Texture: ...
    @overload
    def GetTransparencyTexture(self, front: bool) -> DocObjects.Texture: ...
    @Ambient.setter
    def Ambient(self, value: System.Void): ...
    @BackAmbient.setter
    def BackAmbient(self, value: System.Void): ...
    @BackDiffuse.setter
    def BackDiffuse(self, value: System.Void): ...
    @BackEmission.setter
    def BackEmission(self, value: System.Void): ...
    @BackShine.setter
    def BackShine(self, value: System.Void): ...
    @BackSpecular.setter
    def BackSpecular(self, value: System.Void): ...
    @BackTransparency.setter
    def BackTransparency(self, value: System.Void): ...
    @Diffuse.setter
    def Diffuse(self, value: System.Void): ...
    @Emission.setter
    def Emission(self, value: System.Void): ...
    @IsTwoSided.setter
    def IsTwoSided(self, value: System.Void): ...
    @Shine.setter
    def Shine(self, value: System.Void): ...
    @Specular.setter
    def Specular(self, value: System.Void): ...
    @Transparency.setter
    def Transparency(self, value: System.Void): ...
    @overload
    def SetBitmapTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetBitmapTexture(self, texture: DocObjects.Texture, front: bool) -> bool: ...
    @overload
    def SetBumpTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetBumpTexture(self, texture: DocObjects.Texture, front: bool) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, texture: DocObjects.Texture, front: bool) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetTransparencyTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetTransparencyTexture(self, texture: DocObjects.Texture, front: bool) -> bool: ...

class RhinoPageView(RhinoView):
    """A window that contains a single layout 'page'

    """
    @overload
    def AddDetailView(self, title: str, corner0: Geometry.Point2d, corner1: Geometry.Point2d, initialProjection: DefinedViewportProjection) -> DocObjects.DetailViewObject: ...
    @overload
    def Duplicate(self, duplicatePageGeometry: bool) -> RhinoPageView: ...
    @property
    def ActiveDetail(self) -> DocObjects.DetailViewObject: ...
    @property
    def ActiveDetailId(self) -> System.Guid: ...
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    @property
    def PageHeight(self) -> float: ...
    @property
    def PageIsActive(self) -> bool: ...
    @property
    def PageName(self) -> str: ...
    @property
    def PageNumber(self) -> int: ...
    @property
    def PageWidth(self) -> float: ...
    @property
    def PaperName(self) -> str: ...
    @property
    def PrinterName(self) -> str: ...
    @overload
    def GetDetailViews() -> DocObjects.System.Array[DocObjects.DetailViewObject]: ...
    @overload
    def GetPreviewImage(self, size: Drawing.Size, grayScale: bool) -> Drawing.Bitmap: ...
    @PageHeight.setter
    def PageHeight(self, value: System.Void): ...
    @PageName.setter
    def PageName(self, value: System.Void): ...
    @PageNumber.setter
    def PageNumber(self, value: System.Void): ...
    @PageWidth.setter
    def PageWidth(self, value: System.Void): ...
    @overload
    def SetActiveDetail(self, detailId: System.Guid) -> bool: ...
    @overload
    def SetActiveDetail(self, detailName: str, compareCase: bool) -> bool: ...
    @overload
    def SetPageAsActive() -> None: ...
    @property
    def PageViewSpaceChange(self): ...
    @property
    def PageViewPropertiesChange(self): ...

class GradientType(enum.Enum):
    None_ = 0
    Linear = 1
    Radial = 2
    LinearDisabled = 3
    RadialDisabled = 4

class ViewCapture(object):
    """    """
    def __init__(self): ...
    @overload
    def CaptureToBitmap(self, sourceView: RhinoView) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CaptureToBitmap(settings: ViewCaptureSettings) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def CaptureToSvg(settings: ViewCaptureSettings) -> Xml.XmlDocument: ...
    @property
    def DrawAxes(self) -> bool: ...
    @property
    def DrawGrid(self) -> bool: ...
    @property
    def DrawGridAxes(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def Preview(self) -> bool: ...
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @property
    def ScaleScreenItems(self) -> bool: ...
    @property
    def TransparentBackground(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    @staticmethod
    def SendToPrinter(printerName: str, settings: System.Array[ViewCaptureSettings]) -> bool: ...
    @overload
    @staticmethod
    def SendToPrinter(printerName: str, settings: System.Array[ViewCaptureSettings], copies: int) -> bool: ...
    @DrawAxes.setter
    def DrawAxes(self, value: System.Void): ...
    @DrawGrid.setter
    def DrawGrid(self, value: System.Void): ...
    @DrawGridAxes.setter
    def DrawGridAxes(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Preview.setter
    def Preview(self, value: System.Void): ...
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self, value: System.Void): ...
    @ScaleScreenItems.setter
    def ScaleScreenItems(self, value: System.Void): ...
    @TransparentBackground.setter
    def TransparentBackground(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...

class RhinoView(object):
    """A RhinoView represents a single "window" display of a document. A view could contain one or many RhinoViewports (many in the case of Layout views with detail viewports). Standard Rhino modeling views have one viewport.

    """
    @overload
    def CaptureToBitmap() -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, attributes: DisplayPipelineAttributes) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, mode: DisplayModeDescription) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Drawing.Size, mode: DisplayModeDescription) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Drawing.Size, attributes: DisplayPipelineAttributes) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Drawing.Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Drawing.Size, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Drawing.Bitmap: ...
    @overload
    def ClientToScreen(self, clientPoint: Drawing.Point) -> Drawing.Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Geometry.Point2d) -> Geometry.Point2d: ...
    @overload
    def Close() -> bool: ...
    @overload
    def CreateShadedPreviewImage(self, imagePath: str, size: Drawing.Size, ignoreHighlights: bool, drawConstructionPlane: bool, useGhostedShading: bool) -> bool: ...
    @overload
    def CreateWireframePreviewImage(self, imagePath: str, size: Drawing.Size, ignoreHighlights: bool, drawConstructionPlane: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: System.UInt32) -> RhinoView: ...
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    @property
    def ActiveViewportID(self) -> System.Guid: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ClientRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DisplayPipeline(self) -> DisplayPipeline: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EnableDrawing(self) -> bool: ...
    @property
    def Floating(self) -> bool: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def InDynamicViewChange(self) -> bool: ...
    @property
    def MainViewport(self) -> RhinoViewport: ...
    @property
    def Maximized(self) -> bool: ...
    @property
    def RealtimeDisplayMode(self) -> Render.RealtimeDisplayMode: ...
    @property
    def RuntimeSerialNumber(self) -> System.UInt32: ...
    @property
    def ScreenRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def TitleVisible(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MouseCaptured(self, bIncludeMovement: bool) -> bool: ...
    @overload
    def Redraw() -> None: ...
    @overload
    def ScreenToClient(self, screenPoint: Drawing.Point) -> Drawing.Point: ...
    @overload
    def ScreenToClient(self, screenPoint: Geometry.Point2d) -> Geometry.Point2d: ...
    @EnableDrawing.setter
    def EnableDrawing(self, value: System.Void): ...
    @Floating.setter
    def Floating(self, value: System.Void): ...
    @Maximized.setter
    def Maximized(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TitleVisible.setter
    def TitleVisible(self, value: System.Void): ...
    @overload
    def ShowToast(self, message: str) -> System.UInt32: ...
    @overload
    def ShowToast(self, message: str, textHeight: int) -> System.UInt32: ...
    @overload
    def ShowToast(self, message: str, textHeight: int, location: Drawing.PointF) -> System.UInt32: ...
    @overload
    def SpeedTest(self, frameCount: int, freezeDrawList: bool, direction: int, angleDeltaRadians: float) -> float: ...
    @property
    def EnableDrawingChanged(self): ...
    @property
    def Create(self): ...
    @property
    def Destroy(self): ...
    @property
    def SetActive(self): ...
    @property
    def Rename(self): ...
    @property
    def Modified(self): ...

class ViewEventArgs(System.EventArgs):
    """View event arguments.

    """
    @property
    def View(self) -> RhinoView: ...

class PageViewSpaceChangeEventArgs(System.EventArgs):
    """PageView space change event arguments.

    """
    @property
    def NewActiveDetailId(self) -> System.Guid: ...
    @property
    def OldActiveDetailId(self) -> System.Guid: ...
    @property
    def PageView(self) -> RhinoPageView: ...

class PageViewPropertiesChangeEventArgs(System.EventArgs):
    """PageView properties change event arguments.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> System.UInt32: ...
    @property
    def PageView(self) -> RhinoPageView: ...
    @property
    def PageViewSerialNumber(self) -> System.UInt32: ...

class ViewEnableDrawingEventArgs(System.EventArgs):
    """View enable drawing event argument.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> System.UInt32: ...
    @property
    def DrawingEnabled(self) -> bool: ...

class DefinedViewportProjection(enum.Enum):
    None_ = 0
    Top = 1
    Bottom = 2
    Left = 3
    Right = 4
    Front = 5
    Back = 6
    Perspective = 7
    TwoPointPerspective = 8
    ParallelReflected = 9

class IsometricCamera(enum.Enum):
    None_ = 0
    Northeast = 1
    Northwest = 2
    Southeast = 3
    Southwest = 4

class RhinoViewport(object):
    """Displays geometry with a given projection. In standard modeling views there is a one to one relationship between RhinoView and RhinoViewports. In a page layout, there may be multiple RhinoViewports for a single layout.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: RhinoViewport): ...
    @overload
    def ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool: ...
    @overload
    def ChangeToParallelReflectedProjection() -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, lensLength: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Geometry.Vector3d, lensLength: float) -> bool: ...
    @overload
    def ClearTraceImage() -> None: ...
    @overload
    def ClientToScreen(self, clientPoint: Geometry.Point2d) -> Drawing.Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Drawing.Point) -> Drawing.Point: ...
    @overload
    def ClientToWorld(self, clientPoint: Drawing.Point) -> Geometry.Line: ...
    @overload
    def ClientToWorld(self, clientPoint: Geometry.Point2d) -> Geometry.Line: ...
    @overload
    def ConstructionPlane() -> Geometry.Plane: ...
    @overload
    def DeleteAllUserStrings() -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def FromId(id_: System.Guid) -> RhinoViewport: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Camera35mmLensLength(self) -> float: ...
    @property
    def CameraDirection(self) -> Geometry.Vector3d: ...
    @property
    def CameraLocation(self) -> Geometry.Point3d: ...
    @property
    def CameraTarget(self) -> Geometry.Point3d: ...
    @property
    def CameraUp(self) -> Geometry.Vector3d: ...
    @property
    def CameraX(self) -> Geometry.Vector3d: ...
    @property
    def CameraY(self) -> Geometry.Vector3d: ...
    @property
    def CameraZ(self) -> Geometry.Vector3d: ...
    @property
    def ChangeCounter(self) -> System.UInt32: ...
    @property
    def ConstructionAxesVisible(self) -> bool: ...
    @property
    def ConstructionGridVisible(self) -> bool: ...
    @property
    def DisplayMode(self) -> DisplayModeDescription: ...
    @property
    def FrustumAspect(self) -> float: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsParallelProjection(self) -> bool: ...
    @property
    def IsPerspectiveProjection(self) -> bool: ...
    @property
    def IsPlanView(self) -> bool: ...
    @property
    def IsTwoPointPerspectiveProjection(self) -> bool: ...
    @property
    def IsValidCamera(self) -> bool: ...
    @property
    def IsValidFrustum(self) -> bool: ...
    @property
    def LockedProjection(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentView(self) -> RhinoView: ...
    @property
    def ScreenPortAspect(self) -> float: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def UserStringCount(self) -> int: ...
    @property
    def ViewportType(self) -> ViewportType: ...
    @property
    def WallpaperFilename(self) -> str: ...
    @property
    def WallpaperGrayscale(self) -> bool: ...
    @property
    def WallpaperVisible(self) -> bool: ...
    @property
    def WorldAxesVisible(self) -> bool: ...
    @overload
    def GetCameraAngle() -> (bool, float, float, float): ...
    @overload
    def GetCameraExtents(self, points: Generic.IEnumerable) -> Geometry.BoundingBox: ...
    @overload
    def GetCameraFrame() -> (bool, Geometry.Plane): ...
    @overload
    def GetConstructionPlane() -> DocObjects.ConstructionPlane: ...
    @overload
    def GetDepth(self, point: Geometry.Point3d) -> (bool, float): ...
    @overload
    def GetDepth(self, bbox: Geometry.BoundingBox) -> (bool, float, float): ...
    @overload
    def GetDepth(self, sphere: Geometry.Sphere) -> (bool, float, float): ...
    @overload
    def GetFarRect() -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def GetFrustum() -> (bool, float, float, float, float, float, float): ...
    @overload
    def GetFrustumBottomPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetFrustumBoundingBox() -> Geometry.BoundingBox: ...
    @overload
    def GetFrustumCenter() -> (bool, Geometry.Point3d): ...
    @overload
    def GetFrustumFarPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetFrustumLeftPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetFrustumLine(self, screenX: float, screenY: float) -> (bool, Geometry.Line): ...
    @overload
    def GetFrustumNearPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetFrustumRightPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetFrustumTopPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetNearRect() -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def GetPickTransform(self, clientRectangle: Drawing.Rectangle) -> Geometry.Transform: ...
    @overload
    def GetPickTransform(self, clientPoint: Drawing.Point) -> Geometry.Transform: ...
    @overload
    def GetPickTransform(self, clientX: int, clientY: int) -> Geometry.Transform: ...
    @overload
    def GetScreenPort() -> (bool, int, int, int, int, int, int): ...
    @overload
    def GetTransform(self, sourceSystem: DocObjects.CoordinateSystem, destinationSystem: DocObjects.CoordinateSystem) -> Geometry.Transform: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings() -> Specialized.NameValueCollection: ...
    @overload
    def GetViewScale() -> System.System.Array[float]: ...
    @overload
    def GetWorldToScreenScale(self, pointInFrustum: Geometry.Point3d) -> (bool, float): ...
    @overload
    def IsVisible(self, point: Geometry.Point3d) -> bool: ...
    @overload
    def IsVisible(self, bbox: Geometry.BoundingBox) -> bool: ...
    @overload
    def KeyboardDolly(self, leftRight: bool, amount: float) -> bool: ...
    @overload
    def KeyboardDollyInOut(self, amount: float) -> bool: ...
    @overload
    def KeyboardRotate(self, leftRight: bool, angleRadians: float) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool, fixedScreenPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseAdjustLensLength(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point, moveTarget: bool) -> bool: ...
    @overload
    def MouseDollyZoom(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseInOutDolly(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseLateralDolly(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseMagnify(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseRotateAroundTarget(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseRotateCamera(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def MouseTilt(self, mousePreviousPoint: Drawing.Point, mouseCurrentPoint: Drawing.Point) -> bool: ...
    @overload
    def NextConstructionPlane() -> bool: ...
    @overload
    def NextViewProjection() -> bool: ...
    @overload
    def PopConstructionPlane() -> bool: ...
    @overload
    def PopViewProjection() -> bool: ...
    @overload
    def PreviousConstructionPlane() -> bool: ...
    @overload
    def PreviousViewProjection() -> bool: ...
    @overload
    def PushConstructionPlane(self, cplane: DocObjects.ConstructionPlane) -> None: ...
    @overload
    def PushViewInfo(self, viewinfo: DocObjects.ViewInfo, includeTraceImage: bool) -> bool: ...
    @overload
    def PushViewProjection() -> None: ...
    @overload
    def Rotate(self, angleRadians: float, rotationAxis: Geometry.Vector3d, rotationCenter: Geometry.Point3d) -> bool: ...
    @overload
    def ScreenToClient(self, screenPoint: Drawing.Point) -> Drawing.Point: ...
    @Camera35mmLensLength.setter
    def Camera35mmLensLength(self, value: System.Void): ...
    @CameraUp.setter
    def CameraUp(self, value: System.Void): ...
    @ConstructionAxesVisible.setter
    def ConstructionAxesVisible(self, value: System.Void): ...
    @ConstructionGridVisible.setter
    def ConstructionGridVisible(self, value: System.Void): ...
    @DisplayMode.setter
    def DisplayMode(self, value: System.Void): ...
    @LockedProjection.setter
    def LockedProjection(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @WorldAxesVisible.setter
    def WorldAxesVisible(self, value: System.Void): ...
    @overload
    def SetCameraDirection(self, cameraDirection: Geometry.Vector3d, updateTargetLocation: bool) -> None: ...
    @overload
    def SetCameraLocation(self, cameraLocation: Geometry.Point3d, updateTargetLocation: bool) -> None: ...
    @overload
    def SetCameraLocations(self, targetLocation: Geometry.Point3d, cameraLocation: Geometry.Point3d) -> None: ...
    @overload
    def SetCameraTarget(self, targetLocation: Geometry.Point3d, updateCameraLocation: bool) -> None: ...
    @overload
    def SetClippingPlanes(self, box: Geometry.BoundingBox) -> None: ...
    @overload
    def SetConstructionPlane(self, cplane: DocObjects.ConstructionPlane) -> None: ...
    @overload
    def SetConstructionPlane(self, plane: Geometry.Plane) -> None: ...
    @overload
    def SetProjection(self, projection: DefinedViewportProjection, viewName: str, updateConstructionPlane: bool) -> bool: ...
    @overload
    def SetToPlanView(self, planeOrigin: Geometry.Point3d, planeXaxis: Geometry.Vector3d, planeYaxis: Geometry.Vector3d, setConstructionPlane: bool) -> bool: ...
    @overload
    def SetTraceImage(self, bitmapFileName: str, plane: Geometry.Plane, width: float, height: float, grayscale: bool, filtered: bool) -> bool: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def SetUserStrings(self, items: Generic.IEnumerable, replace: bool) -> bool: ...
    @overload
    def SetViewProjection(self, projection: DocObjects.ViewportInfo, updateTargetLocation: bool) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool, visible: bool) -> bool: ...
    @overload
    def WorldToClient(self, worldPoint: Geometry.Point3d) -> Geometry.Point2d: ...
    @overload
    def ZoomBoundingBox(self, box: Geometry.BoundingBox) -> bool: ...
    @overload
    def ZoomExtents() -> bool: ...
    @overload
    def ZoomExtentsSelected() -> bool: ...
    @overload
    def ZoomWindow(self, rect: Drawing.Rectangle) -> bool: ...

class ViewportType(enum.Enum):
    StandardModelingViewport = 0
    PageViewMainViewport = 1
    DetailViewport = 2
    UVEditorViewport = 3
    BlockEditorViewport = 4

class EdgeContinuityMode(enum.Enum):
    Distance = 0
    Tangency = 1
    Curvature = 2

class AnalysisStyle(enum.Enum):
    Wireframe = 1
    Texture = 2
    FalseColor = 4

class ViewAreaMapping(enum.Enum):
    View = 0
    Extents = 1
    Window = 2

class AnchorLocation(enum.Enum):
    LowerLeft = 0
    UpperLeft = 1
    LowerRight = 2
    UpperRight = 3
    Center = 4

class ColorMode(enum.Enum):
    DisplayColor = 0
    PrintColor = 1
    BlackAndWhite = 2

class InferenceLineType(enum.Enum):
    Chord = 0
    Ray = 1
    InfiniteLine = 2

class FrameBufferFillMode(enum.Enum):
    DefaultColor = 1
    SolidColor = 2
    Gradient2Color = 3
    Gradient4Color = 4
    Bitmap = 5
    Renderer = 6
    Transparent = 7

class BoundingBoxDisplayMode(enum.Enum):
    None_ = 0
    OnAlways = 1
    OnDuringDynamicDisplay = 2

class ViewDisplayAttributes(object):
    """    """
    @property
    def BlendGrid(self) -> bool: ...
    @property
    def DrawGrid(self) -> bool: ...
    @property
    def DrawGridAxes(self) -> bool: ...
    @property
    def DrawTransparentGridPlane(self) -> bool: ...
    @property
    def DrawWorldAxes(self) -> bool: ...
    @property
    def DrawZAxis(self) -> bool: ...
    @property
    def HorizontalViewportScale(self) -> float: ...
    @property
    def ShowGridOnTop(self) -> bool: ...
    @property
    def UseDocumentGrid(self) -> bool: ...
    @property
    def VerticalViewportScale(self) -> float: ...
    @property
    def WorldAxisColorX(self) -> Drawing.Color: ...
    @property
    def WorldAxisColorY(self) -> Drawing.Color: ...
    @property
    def WorldAxisColorZ(self) -> Drawing.Color: ...
    @BlendGrid.setter
    def BlendGrid(self, value: System.Void): ...
    @DrawGrid.setter
    def DrawGrid(self, value: System.Void): ...
    @DrawGridAxes.setter
    def DrawGridAxes(self, value: System.Void): ...
    @DrawTransparentGridPlane.setter
    def DrawTransparentGridPlane(self, value: System.Void): ...
    @DrawWorldAxes.setter
    def DrawWorldAxes(self, value: System.Void): ...
    @DrawZAxis.setter
    def DrawZAxis(self, value: System.Void): ...
    @HorizontalViewportScale.setter
    def HorizontalViewportScale(self, value: System.Void): ...
    @ShowGridOnTop.setter
    def ShowGridOnTop(self, value: System.Void): ...
    @UseDocumentGrid.setter
    def UseDocumentGrid(self, value: System.Void): ...
    @VerticalViewportScale.setter
    def VerticalViewportScale(self, value: System.Void): ...
    @WorldAxisColorX.setter
    def WorldAxisColorX(self, value: System.Void): ...
    @WorldAxisColorY.setter
    def WorldAxisColorY(self, value: System.Void): ...
    @WorldAxisColorZ.setter
    def WorldAxisColorZ(self, value: System.Void): ...

class CurveThicknessUse(enum.Enum):
    ObjectWidth = 0
    Pixels = 1

class SurfaceThicknessUse(enum.Enum):
    ObjectWidth = 0
    Pixels = 1

class SurfaceNakedEdgeThicknessUse(enum.Enum):
    UseSurfaceEdgeSettings = 0
    ObjectWidth = 1
    Pixels = 2

class SurfaceIsoThicknessUse(enum.Enum):
    ObjectWidth = 0
    SingleWidthForAllCurves = 1
    PixelsUV = 2

class SurfaceEdgeColorUse(enum.Enum):
    ObjectColor = 0
    IsocurveColor = 1
    SingleColorForAll = 2

class SurfaceNakedEdgeColorUse(enum.Enum):
    UseSurfaceEdgeSettings = 0
    ObjectColor = 1
    IsoCurveColor = 2
    SingleColorForAll = 3

class SurfaceIsoColorUse(enum.Enum):
    ObjectColor = 0
    SingleColorForAll = 1
    SpecifiedUV = 2

class MeshDisplayAttributes(object):
    """    """
    @property
    def AllMeshWiresColor(self) -> Drawing.Color: ...
    @property
    def HighlightMeshes(self) -> bool: ...
    @property
    def MeshWireThickness(self) -> int: ...
    @property
    def ShowMeshVertices(self) -> bool: ...
    @property
    def ShowMeshWires(self) -> bool: ...
    @AllMeshWiresColor.setter
    def AllMeshWiresColor(self, value: System.Void): ...
    @HighlightMeshes.setter
    def HighlightMeshes(self, value: System.Void): ...
    @MeshWireThickness.setter
    def MeshWireThickness(self, value: System.Void): ...
    @ShowMeshVertices.setter
    def ShowMeshVertices(self, value: System.Void): ...
    @ShowMeshWires.setter
    def ShowMeshWires(self, value: System.Void): ...

class LightingSchema(enum.Enum):
    None_ = 0
    DefaultLighting = 1
    SceneLighting = 2
    CustomLighting = 3
    AmbientOcclusion = 4

class ContextsForDraw(enum.Enum):
    Unset = 0
    FilePreview = 1
    ViewCapture = 2
    Printing = 3
    UIPreview = 4
    Mask = 5
    RenderOverlays = 6

class SubDEdgeColorUse(enum.Enum):
    ObjectColor = 0
    SingleColorForAll = 1

class SubDReflectionPlaneColorUse(enum.Enum):
    ObjectColor = 0
    CustomColor = 1
    SingleColorForAll = 2

class SubDThicknessUse(enum.Enum):
    ObjectWidth = 0
    Pixels = 1

class ClippingPlaneFillColorUse(enum.Enum):
    ViewportColor = 0
    RenderMaterialColor = 1
    PlaneMaterialColor = 2
    SolidColor = 3

class ClippingEdgeColorUse(enum.Enum):
    PlaneColor = 0
    SolidColor = 1
    ObjectColor = 2

class ClippingShadeColorUse(enum.Enum):
    PlaneColor = 0
    PlaneMaterialColor = 1
    SolidColor = 2

class LockedObjectUse(enum.Enum):
    UseObjectAttributes = 0
    SpecifyColor = 1
    UseAppSettings = 2

class DynamicDisplayUse(enum.Enum):
    UseAppSettings = 0
    DisplayObjectBoundingBox = 1

class GridPlaneVisibilityMode(enum.Enum):
    ShowOnlyIfGridVisible = 0
    AlwaysShow = 1

class WorldAxesIconColorUse(enum.Enum):
    UseApplicationSettings = 0
    SameAsGridAxesColors = 1
    Custom = 2

class GroundPlaneUsages(enum.Enum):
    ByDocument = 0
    Custom = 1

class LinearWorkflowUsages(enum.Enum):
    ByDocument = 0
    Custom = 1

# endregion
