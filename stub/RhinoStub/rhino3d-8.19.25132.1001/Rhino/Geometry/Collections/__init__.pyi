"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BrepVertexList", "BrepFaceList", "BrepSurfaceList", "BrepCurveList", "BrepEdgeList", "BrepTrimList", "BrepLoopList", "MeshVertexList", "MeshTopologyVertexList", "MeshTopologyEdgeList", "MeshVertexNormalList", "MeshFaceList", "MeshNgonList", "MeshFaceNormalList", "MeshVertexColorList", "MeshTextureCoordinateList", "MeshVertexStatusList", "NurbsSurfacePointList", "NurbsSurfaceKnotList", "SubDVertexList", "SubDEdgeList", "SubDFaceList", "NurbsCurveKnotList", "NurbsCurvePointList"]
# endregion

# region: Imports
from Rhino import FileIO
from Rhino import Geometry
from Rhino import Render
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class BrepVertexList(object):
    """Provides access to all the Vertices in a Brep object

    """
    @overload
    def Add() -> Geometry.BrepVertex: ...
    @overload
    def Add(self, point: Geometry.Point3d, vertexTolerance: float) -> Geometry.BrepVertex: ...
    @overload
    def AddPointOnFace(self, face: Geometry.BrepFace, s: float, t: float) -> Geometry.BrepVertex: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.BrepVertex: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class BrepFaceList(object):
    """Provides access to all the Faces in a Brep object.

    """
    @overload
    def Add(self, surface: Geometry.Surface) -> Geometry.BrepFace: ...
    @overload
    def Add(self, surfaceIndex: int) -> Geometry.BrepFace: ...
    @overload
    def AddConeFace(self, vertex: Geometry.BrepVertex, edge: Geometry.BrepEdge, revEdge: bool) -> Geometry.BrepFace: ...
    @overload
    def AddRuledFace(self, edgeA: Geometry.BrepEdge, revEdgeA: bool, edgeB: Geometry.BrepEdge, revEdgeB: bool) -> Geometry.BrepFace: ...
    @overload
    def ClearPerFaceColors() -> System.UInt32: ...
    @overload
    def ExtractFace(self, faceIndex: int) -> Geometry.Brep: ...
    @overload
    def Flip(self, onlyReversedFaces: bool) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def HasPerFaceColors(self) -> bool: ...
    @property
    def Item(self) -> Geometry.BrepFace: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def RemoveAt(self, faceIndex: int) -> None: ...
    @overload
    def RemoveSlits() -> bool: ...
    @overload
    def ShrinkFaces() -> bool: ...
    @overload
    def SplitBipolarFaces() -> bool: ...
    @overload
    def SplitClosedFaces(self, minimumDegree: int) -> bool: ...
    @overload
    def SplitFaceAtTangents(self, faceIndex: int) -> bool: ...
    @overload
    def SplitFacesAtTangents() -> bool: ...
    @overload
    def SplitKinkyFace(self, faceIndex: int, kinkTolerance: float) -> bool: ...
    @overload
    def SplitKinkyFaces() -> bool: ...
    @overload
    def SplitKinkyFaces(self, kinkTolerance: float) -> bool: ...
    @overload
    def SplitKinkyFaces(self, kinkTolerance: float, compact: bool) -> bool: ...
    @overload
    def StandardizeFaceSurface(self, faceIndex: int) -> bool: ...
    @overload
    def StandardizeFaceSurfaces() -> None: ...

class BrepSurfaceList(object):
    """Provides access to all the underlying surfaces in a Brep object.

    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Surface: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class BrepCurveList(object):
    """Provides access to all the underlying curves in a Brep object.

    """
    @overload
    def Add(self, curve: Geometry.Curve) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Curve: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class BrepEdgeList(object):
    """Provides access to all the Edges in a Brep object.

    """
    @overload
    def Add(self, curve3dIndex: int) -> Geometry.BrepEdge: ...
    @overload
    def Add(self, startVertexIndex: int, endVertexIndex: int, curve3dIndex: int, edgeTolerance: float) -> Geometry.BrepEdge: ...
    @overload
    def Add(self, startVertex: Geometry.BrepVertex, endVertex: Geometry.BrepVertex, curve3dIndex: int, edgeTolerance: float) -> Geometry.BrepEdge: ...
    @overload
    def Add(self, startVertexIndex: int, endVertexIndex: int, curve3dIndex: int, subDomain: Geometry.Interval, edgeTolerance: float) -> Geometry.BrepEdge: ...
    @overload
    def Add(self, startVertex: Geometry.BrepVertex, endVertex: Geometry.BrepVertex, curve3dIndex: int, subDomain: Geometry.Interval, edgeTolerance: float) -> Geometry.BrepEdge: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.BrepEdge: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def MergeAllEdges(self, angleTolerance: float) -> int: ...
    @overload
    def MergeEdge(self, edgeIndex: int, angleTolerance: float) -> int: ...
    @overload
    def RemoveNakedMicroEdges(self, tolerance: float) -> int: ...
    @overload
    def RemoveNakedMicroEdges(self, tolerance: float, cleanUp: bool) -> int: ...
    @overload
    def SplitEdgeAtParameters(self, edgeIndex: int, edgeParameters: Generic.IEnumerable) -> int: ...
    @overload
    def SplitKinkyEdge(self, edgeIndex: int, kinkToleranceRadians: float) -> bool: ...

class BrepTrimList(object):
    """Provides access to all the Trims in a Brep object

    """
    @overload
    def Add(self, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @overload
    def Add(self, rev3d: bool, loop: Geometry.BrepLoop, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @overload
    def Add(self, rev3d: bool, edge: Geometry.BrepEdge, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @overload
    def Add(self, edge: Geometry.BrepEdge, rev3d: bool, loop: Geometry.BrepLoop, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @overload
    def AddCurveOnFace(self, face: Geometry.BrepFace, edge: Geometry.BrepEdge, rev3d: bool, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @overload
    def AddSingularTrim(self, vertex: Geometry.BrepVertex, loop: Geometry.BrepLoop, iso: Geometry.IsoStatus, curve2dIndex: int) -> Geometry.BrepTrim: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.BrepTrim: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def MatchEnds() -> bool: ...
    @overload
    def MatchEnds(self, loop: Geometry.BrepLoop) -> bool: ...
    @overload
    def MatchEnds(self, trimIndex: int) -> bool: ...
    @overload
    def MatchEnds(self, trim0: Geometry.BrepTrim, trim1: Geometry.BrepTrim) -> bool: ...

class BrepLoopList(object):
    """Provides access to all the Loops in a Brep object.

    """
    @overload
    def Add(self, loopType: Geometry.BrepLoopType) -> Geometry.BrepLoop: ...
    @overload
    def Add(self, loopType: Geometry.BrepLoopType, face: Geometry.BrepFace) -> Geometry.BrepLoop: ...
    @overload
    def AddOuterLoop(self, faceIndex: int) -> Geometry.BrepLoop: ...
    @overload
    def AddPlanarFaceLoop(self, faceIndex: int, loopType: Geometry.BrepLoopType, boundaryCurves: Generic.IEnumerable) -> Geometry.BrepLoop: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.BrepLoop: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class MeshVertexList(object):
    """Provides access to the vertices and vertex-related functionality of a mesh.

    """
    @overload
    def Add(self, vertex: Geometry.Point3d) -> int: ...
    @overload
    def Add(self, vertex: Geometry.Point3f) -> int: ...
    @overload
    def Add(self, x: System.Single, y: System.Single, z: System.Single) -> int: ...
    @overload
    def Add(self, x: float, y: float, z: float) -> int: ...
    @overload
    def AddVertices(self, vertices: Generic.IEnumerable) -> None: ...
    @overload
    def AddVertices(self, vertices: Generic.IEnumerable) -> None: ...
    @overload
    def Align(self, distance: float, whichVertices: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def Align(meshes: Generic.IEnumerable, distance: float, whichVertices: Generic.IEnumerable) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CombineIdentical(self, ignoreNormals: bool, ignoreAdditional: bool) -> bool: ...
    @overload
    def CullUnused() -> int: ...
    @overload
    def Destroy() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Point3f: ...
    @property
    def UseDoublePrecisionVertices(self) -> bool: ...
    @overload
    def GetConnectedVertices(self, vertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetTopologicalIndenticalVertices(self, vertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetVertexFaces(self, vertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def Hide(self, vertexIndex: int) -> None: ...
    @overload
    def HideAll() -> None: ...
    @overload
    def IsHidden(self, vertexIndex: int) -> bool: ...
    @overload
    def Point3dAt(self, index: int) -> Geometry.Point3d: ...
    @overload
    def Remove(self, indices: Generic.IEnumerable, shrinkFaces: bool) -> bool: ...
    @overload
    def Remove(self, index: int, shrinkFaces: bool) -> bool: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @UseDoublePrecisionVertices.setter
    def UseDoublePrecisionVertices(self, value: System.Void): ...
    @overload
    def SetVertex(self, index: int, vertex: Geometry.Point3d) -> bool: ...
    @overload
    def SetVertex(self, index: int, vertex: Geometry.Point3f) -> bool: ...
    @overload
    def SetVertex(self, index: int, x: System.Single, y: System.Single, z: System.Single) -> bool: ...
    @overload
    def SetVertex(self, index: int, x: float, y: float, z: float) -> bool: ...
    @overload
    def SetVertex(self, index: int, x: float, y: float, z: float, updateNormals: bool) -> bool: ...
    @overload
    def Show(self, vertexIndex: int) -> None: ...
    @overload
    def ShowAll() -> None: ...
    @overload
    def ToFloatArray() -> System.System.Array[System.Single]: ...
    @overload
    def ToPoint3dArray() -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def ToPoint3fArray() -> Geometry.System.Array[Geometry.Point3f]: ...

class MeshTopologyVertexList(object):
    """Provides access to the mesh topology vertices of a mesh. Topology vertices are sets of vertices in the MeshVertexList that can topologically be considered the same vertex.

    """
    @overload
    def ConnectedEdge(self, topologyVertexIndex: int, edgeAtVertexIndex: int) -> int: ...
    @overload
    def ConnectedEdges(self, topologyVertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def ConnectedEdgesCount(self, topologyVertexIndex: int) -> int: ...
    @overload
    def ConnectedFaces(self, topologyVertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def ConnectedTopologyVertices(self, topologyVertexIndex: int) -> System.System.Array[int]: ...
    @overload
    def ConnectedTopologyVertices(self, topologyVertexIndex: int, sorted_: bool) -> System.System.Array[int]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Point3f: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndicesFromFace(self, faceIndex: int) -> System.System.Array[int]: ...
    @overload
    def IsHidden(self, topologyVertexIndex: int) -> bool: ...
    @overload
    def MeshVertexIndices(self, topologyVertexIndex: int) -> System.System.Array[int]: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SortEdges() -> bool: ...
    @overload
    def SortEdges(self, topologyVertexIndex: int) -> bool: ...
    @overload
    def TopologyVertexIndex(self, vertexIndex: int) -> int: ...

class MeshTopologyEdgeList(object):
    """Represents an entry point to the list of edges in a mesh topology.

    """
    @overload
    def CollapseEdge(self, topologyEdgeIndex: int) -> bool: ...
    @overload
    def EdgeLine(self, topologyEdgeIndex: int) -> Geometry.Line: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetConnectedFaces(self, topologyEdgeIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetConnectedFaces(self, topologyEdgeIndex: int) -> (System.System.Array[int], System.System.Array[bool]): ...
    @overload
    def GetEdgeIndex(self, topologyVertex1: int, topologyVertex2: int) -> int: ...
    @overload
    def GetEdgesForFace(self, faceIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetEdgesForFace(self, faceIndex: int) -> (System.System.Array[int], System.System.Array[bool]): ...
    @overload
    def GetTopologyVertices(self, topologyEdgeIndex: int) -> Rhino.IndexPair: ...
    @overload
    def IsEdgeUnwelded(self, topologyEdgeIndex: int) -> bool: ...
    @overload
    def IsHidden(self, topologyEdgeIndex: int) -> bool: ...
    @overload
    def IsNgonInterior(self, topologyEdgeIndex: int) -> bool: ...
    @overload
    def IsSwappableEdge(self, topologyEdgeIndex: int) -> bool: ...
    @overload
    def SplitEdge(self, topologyEdgeIndex: int, point: Geometry.Point3d) -> bool: ...
    @overload
    def SplitEdge(self, topologyEdgeIndex: int, t: float) -> bool: ...
    @overload
    def SwapEdge(self, topologyEdgeIndex: int) -> bool: ...

class MeshVertexNormalList(object):
    """Provides access to the Vertex Normals of a Mesh.

    """
    @overload
    def Add(self, normal: Geometry.Vector3f) -> int: ...
    @overload
    def Add(self, normal: Geometry.Vector3d) -> int: ...
    @overload
    def Add(self, x: System.Single, y: System.Single, z: System.Single) -> int: ...
    @overload
    def Add(self, x: float, y: float, z: float) -> int: ...
    @overload
    def AddRange(self, normals: Geometry.System.Array[Geometry.Vector3f]) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ComputeNormals() -> bool: ...
    @overload
    def Destroy() -> None: ...
    @overload
    def Flip() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Vector3f: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetNormal(self, index: int, normal: Geometry.Vector3f) -> bool: ...
    @overload
    def SetNormal(self, index: int, normal: Geometry.Vector3d) -> bool: ...
    @overload
    def SetNormal(self, index: int, x: float, y: float, z: float) -> bool: ...
    @overload
    def SetNormal(self, index: int, x: System.Single, y: System.Single, z: System.Single) -> bool: ...
    @overload
    def SetNormals(self, normals: Geometry.System.Array[Geometry.Vector3f]) -> bool: ...
    @overload
    def ToFloatArray() -> System.System.Array[System.Single]: ...
    @overload
    def UnitizeNormals() -> bool: ...

class MeshFaceList(object):
    """Provides access to the faces and Face related functionality of a Mesh.

    """
    @overload
    def AddFace(self, face: Geometry.MeshFace) -> int: ...
    @overload
    def AddFace(self, vertex1: int, vertex2: int, vertex3: int) -> int: ...
    @overload
    def AddFace(self, vertex1: int, vertex2: int, vertex3: int, vertex4: int) -> int: ...
    @overload
    def AddFaces(self, faces: Generic.IEnumerable) -> System.System.Array[int]: ...
    @overload
    def AdjacentFaces(self, faceIndex: int) -> System.System.Array[int]: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ConvertNonPlanarQuadsToTriangles(self, planarTolerance: float, angleToleranceRadians: float, splitMethod: int) -> int: ...
    @overload
    def ConvertQuadsToTriangles() -> bool: ...
    @overload
    def ConvertTrianglesToQuads(self, angleToleranceRadians: float, minimumDiagonalLengthRatio: float) -> bool: ...
    @overload
    def CullDegenerateFaces() -> int: ...
    @overload
    def DeleteFaces(self, faceIndexes: Generic.IEnumerable) -> int: ...
    @overload
    def DeleteFaces(self, faceIndexes: Generic.IEnumerable, compact: bool) -> int: ...
    @overload
    def Destroy() -> None: ...
    @overload
    def ExtractDuplicateFaces() -> Geometry.Mesh: ...
    @overload
    def ExtractFaces(self, faceIndices: Generic.IEnumerable) -> Geometry.Mesh: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.MeshFace: ...
    @property
    def QuadCount(self) -> int: ...
    @property
    def TriangleCount(self) -> int: ...
    @overload
    def GetClashingFacePairs(self, maxPairCount: int) -> Rhino.System.Array[Rhino.IndexPair]: ...
    @overload
    def GetConnectedFaces(self, faceIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetConnectedFaces(self, faceIndex: int, angleRadians: float, greaterThanAngle: bool) -> System.System.Array[int]: ...
    @overload
    def GetConnectedFacesToEdges(self, startFaceIndex: int, treatNonmanifoldLikeUnwelded: bool) -> System.System.Array[int]: ...
    @overload
    def GetDuplicateFaces() -> System.System.Array[int]: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetFace(self, index: int) -> Geometry.MeshFace: ...
    @overload
    def GetFaceAspectRatio(self, index: int) -> float: ...
    @overload
    def GetFaceBoundingBox(self, faceIndex: int) -> Geometry.BoundingBox: ...
    @overload
    def GetFaceCenter(self, faceIndex: int) -> Geometry.Point3d: ...
    @overload
    def GetFaceVertices(self, faceIndex: int) -> (bool, Geometry.Point3f, Geometry.Point3f, Geometry.Point3f, Geometry.Point3f): ...
    @overload
    def GetTopologicalVertices(self, faceIndex: int) -> System.System.Array[int]: ...
    @overload
    def GetZeroAreaFaces() -> (bool, System.System.Array[int], System.System.Array[int]): ...
    @overload
    def HasNakedEdges(self, faceIndex: int) -> bool: ...
    @overload
    def Insert(self, index: int, face: Geometry.MeshFace) -> None: ...
    @overload
    def IsHidden(self, faceIndex: int) -> bool: ...
    @overload
    def MergeAdjacentFaces(self, edgeIndex: int) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveAt(self, index: int, compact: bool) -> None: ...
    @overload
    def RemoveZeroAreaFaces() -> (int, int): ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetFace(self, index: int, face: Geometry.MeshFace) -> bool: ...
    @overload
    def SetFace(self, index: int, vertex1: int, vertex2: int, vertex3: int) -> bool: ...
    @overload
    def SetFace(self, index: int, vertex1: int, vertex2: int, vertex3: int, vertex4: int) -> bool: ...
    @overload
    def ToIntArray(self, asTriangles: bool) -> System.System.Array[int]: ...
    @overload
    def ToIntArray(self, asTriangles: bool) -> (System.System.Array[int], Generic.List): ...

class MeshNgonList(object):
    """Provides access to the ngons and ngon-related functionality of a Mesh. See also the
property for Ngon functionality details.

    """
    @overload
    def AddNgon(self, ngon: Geometry.MeshNgon) -> int: ...
    @overload
    def AddNgons(self, ngons: Generic.IEnumerable) -> System.System.Array[int]: ...
    @overload
    def AddPlanarNgons(self, planarTolerance: float) -> int: ...
    @overload
    def AddPlanarNgons(self, planarTolerance: float, minimumNgonVertexCount: int, minimumNgonFaceCount: int, allowHoles: bool) -> int: ...
    @overload
    def Clear() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.MeshNgon: ...
    @property
    def UnsignedCount(self) -> System.UInt32: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetNgon(self, index: int) -> Geometry.MeshNgon: ...
    @overload
    def GetNgonBoundary(self, ngonFaceIndexList: Generic.IEnumerable) -> System.System.Array[int]: ...
    @overload
    def GetNgonBoundingBox(self, ngon: Geometry.MeshNgon) -> Geometry.BoundingBox: ...
    @overload
    def GetNgonBoundingBox(self, index: int) -> Geometry.BoundingBox: ...
    @overload
    def GetNgonCenter(self, ngon: Geometry.MeshNgon) -> Geometry.Point3d: ...
    @overload
    def GetNgonCenter(self, index: int) -> Geometry.Point3d: ...
    @overload
    def GetNgonEdgeCount(self, index: int) -> int: ...
    @overload
    def GetNgonOuterEdgeCount(self, index: int) -> int: ...
    @overload
    def Insert(self, index: int, ngon: Geometry.MeshNgon) -> None: ...
    @overload
    def IsValid(self, index: int) -> System.UInt32: ...
    @overload
    def IsValid(self, index: int, textLog: FileIO.TextLog) -> System.UInt32: ...
    @overload
    def NgonBoundaryVertexList(self, ngon: Geometry.MeshNgon, bAppendStartPoint: bool) -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def NgonHasHoles(self, index: int) -> bool: ...
    @overload
    def NgonIndexFromFaceIndex(self, meshFaceIndex: int) -> int: ...
    @overload
    def Orientation(self, index: int, permitHoles: bool) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveNgons(self, indices: Generic.IEnumerable) -> int: ...
    @overload
    def ReverseOuterBoundary(self, index: int) -> None: ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @UnsignedCount.setter
    def UnsignedCount(self, value: System.Void): ...
    @overload
    def SetNgon(self, index: int, ngon: Geometry.MeshNgon) -> None: ...

class MeshFaceNormalList(object):
    """Provides access to the Face normals of a Mesh.

    """
    @overload
    def AddFaceNormal(self, normal: Geometry.Vector3f) -> int: ...
    @overload
    def AddFaceNormal(self, normal: Geometry.Vector3d) -> int: ...
    @overload
    def AddFaceNormal(self, x: float, y: float, z: float) -> int: ...
    @overload
    def AddFaceNormal(self, x: System.Single, y: System.Single, z: System.Single) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ComputeFaceNormals() -> bool: ...
    @overload
    def Destroy() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Vector3f: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetFaceNormal(self, index: int, normal: Geometry.Vector3d) -> bool: ...
    @overload
    def SetFaceNormal(self, index: int, normal: Geometry.Vector3f) -> bool: ...
    @overload
    def SetFaceNormal(self, index: int, x: System.Single, y: System.Single, z: System.Single) -> bool: ...
    @overload
    def SetFaceNormal(self, index: int, x: float, y: float, z: float) -> bool: ...
    @overload
    def UnitizeFaceNormals() -> bool: ...

class MeshVertexColorList(object):
    """Provides access to the vertex colors of a mesh object.

    """
    @overload
    def Add(self, color: Drawing.Color) -> int: ...
    @overload
    def Add(self, red: int, green: int, blue: int) -> int: ...
    @overload
    def AddRange(self, colors: Generic.IEnumerable) -> bool: ...
    @overload
    def AppendColors(self, colors: Drawing.System.Array[Drawing.Color]) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CreateMonotoneMesh(self, baseColor: Drawing.Color) -> bool: ...
    @overload
    def Destroy() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Drawing.Color: ...
    @property
    def Tag(self) -> Render.MappingTag: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def SetColor(self, face: Geometry.MeshFace, color: Drawing.Color) -> bool: ...
    @overload
    def SetColor(self, index: int, color: Drawing.Color) -> bool: ...
    @overload
    def SetColor(self, index: int, red: int, green: int, blue: int) -> bool: ...
    @overload
    def SetColors(self, colors: Drawing.System.Array[Drawing.Color]) -> bool: ...
    @overload
    def ToARGBArray() -> System.System.Array[int]: ...

class MeshTextureCoordinateList(object):
    """Provides access to the Vertex Texture coordinates of a Mesh.

    """
    @overload
    def Add(self, tc: Geometry.Point2f) -> int: ...
    @overload
    def Add(self, tc: Geometry.Point3d) -> int: ...
    @overload
    def Add(self, s: System.Single, t: System.Single) -> int: ...
    @overload
    def Add(self, s: float, t: float) -> int: ...
    @overload
    def AddRange(self, textureCoordinates: Geometry.System.Array[Geometry.Point2f]) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Destroy() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Point2f: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def NormalizeTextureCoordinates() -> bool: ...
    @overload
    def ReverseTextureCoordinates(self, direction: int) -> bool: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetTextureCoordinate(self, index: int, tc: Geometry.Point2f) -> bool: ...
    @overload
    def SetTextureCoordinate(self, index: int, tc: Geometry.Point3f) -> bool: ...
    @overload
    def SetTextureCoordinate(self, index: int, s: System.Single, t: System.Single) -> bool: ...
    @overload
    def SetTextureCoordinate(self, index: int, s: float, t: float) -> bool: ...
    @overload
    def SetTextureCoordinates(self, textureCoordinates: Geometry.System.Array[Geometry.Point2f]) -> bool: ...
    @overload
    def SetTextureCoordinates(self, mapping: Render.TextureMapping) -> bool: ...
    @overload
    def ToFloatArray() -> System.System.Array[System.Single]: ...
    @overload
    def TransposeTextureCoordinates() -> bool: ...

class MeshVertexStatusList(object):
    """Provides access to status information relative to components of a mesh.

    """
    @overload
    def Add(self, hidden: bool) -> None: ...
    @overload
    def AddRange(self, values: Generic.IEnumerable) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, hidden: bool) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[bool], arrayIndex: int) -> None: ...
    @overload
    def Destroy() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def HiddenCount(self) -> int: ...
    @property
    def Item(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class NurbsSurfacePointList(object):
    """Provides access to the control points of a NURBS surface.

    """
    @overload
    def EnsurePrivateCopy() -> None: ...
    @overload
    def EpsilonEquals(self, other: NurbsSurfacePointList, epsilon: float) -> bool: ...
    @property
    def CountU(self) -> int: ...
    @property
    def CountV(self) -> int: ...
    @property
    def PointSize(self) -> int: ...
    @overload
    def GetControlPoint(self, u: int, v: int) -> Geometry.ControlPoint: ...
    @overload
    def GetGrevillePoint(self, u: int, v: int) -> Geometry.Point2d: ...
    @overload
    def GetPoint(self, u: int, v: int) -> (bool, Geometry.Point3d): ...
    @overload
    def GetPoint(self, u: int, v: int) -> (bool, Geometry.Point4d): ...
    @overload
    def GetWeight(self, u: int, v: int) -> float: ...
    @overload
    def SetControlPoint(self, u: int, v: int, cp: Geometry.ControlPoint) -> bool: ...
    @overload
    def SetPoint(self, u: int, v: int, point: Geometry.Point3d) -> bool: ...
    @overload
    def SetPoint(self, u: int, v: int, point: Geometry.Point4d) -> bool: ...
    @overload
    def SetPoint(self, u: int, v: int, point: Geometry.Point3d, weight: float) -> bool: ...
    @overload
    def SetPoint(self, u: int, v: int, x: float, y: float, z: float) -> bool: ...
    @overload
    def SetPoint(self, u: int, v: int, x: float, y: float, z: float, weight: float) -> bool: ...
    @overload
    def SetWeight(self, u: int, v: int, weight: float) -> bool: ...
    @overload
    def UVNDirectionsAt(self, u: int, v: int) -> (bool, Geometry.Vector3d, Geometry.Vector3d, Geometry.Vector3d): ...
    @overload
    def ValidateSpacing(self, closeTolerance: float, stackTolerance: float) -> (bool, Rhino.System.Array[Rhino.IndexPair], Rhino.System.Array[Rhino.IndexPair]): ...

class NurbsSurfaceKnotList(object):
    """Provides access to the knot vector of a NURBS surface.

    """
    @overload
    def CreatePeriodicKnots(self, knotSpacing: float) -> bool: ...
    @overload
    def CreateUniformKnots(self, knotSpacing: float) -> bool: ...
    @overload
    def EnsurePrivateCopy() -> None: ...
    @overload
    def EpsilonEquals(self, other: NurbsSurfaceKnotList, epsilon: float) -> bool: ...
    @property
    def ClampedAtEnd(self) -> bool: ...
    @property
    def ClampedAtStart(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> float: ...
    @property
    def KnotStyle(self) -> Geometry.KnotStyle: ...
    @overload
    def InsertKnot(self, value: float) -> bool: ...
    @overload
    def InsertKnot(self, value: float, multiplicity: int) -> bool: ...
    @overload
    def KnotMultiplicity(self, index: int) -> int: ...
    @overload
    def RemoveKnots(self, index0: int, index1: int) -> bool: ...
    @overload
    def RemoveKnotsAt(self, u: float, v: float) -> bool: ...
    @overload
    def RemoveMultipleKnots(self, minimumMultiplicity: int, maximumMultiplicity: int, tolerance: float) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SuperfluousKnot(self, start: bool) -> float: ...

class SubDVertexList(object):
    """Provides access to all the vertices and vertex-related functionality of a SubD

    """
    @overload
    def Add(self, tag: Geometry.SubDVertexTag, vertex: Geometry.Point3d) -> Geometry.SubDVertex: ...
    @overload
    def Find(self, id_: System.UInt32) -> Geometry.SubDVertex: ...
    @overload
    def Find(self, id_: int) -> Geometry.SubDVertex: ...
    @property
    def Count(self) -> int: ...
    @property
    def First(self) -> Geometry.SubDVertex: ...

class SubDEdgeList(object):
    """All edges in a SubD

    """
    @overload
    def Add(self, tag: Geometry.SubDEdgeTag, v0: Geometry.SubDVertex, v1: Geometry.SubDVertex) -> Geometry.SubDEdge: ...
    @overload
    def Find(self, id_: System.UInt32) -> Geometry.SubDEdge: ...
    @overload
    def Find(self, id_: int) -> Geometry.SubDEdge: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def SetEdgeTags(self, edgeIndices: Generic.IEnumerable, tag: Geometry.SubDEdgeTag) -> None: ...
    @overload
    def SetEdgeTags(self, edges: Generic.IEnumerable, tag: Geometry.SubDEdgeTag) -> None: ...

class SubDFaceList(object):
    """All faces in a SubD

    """
    @overload
    def ClearPerFaceColors() -> System.UInt32: ...
    @overload
    def Find(self, id_: System.UInt32) -> Geometry.SubDFace: ...
    @overload
    def Find(self, id_: int) -> Geometry.SubDFace: ...
    @property
    def Count(self) -> int: ...
    @property
    def HasPerFaceColors(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class NurbsCurveKnotList(object):
    """Provides access to the knot vector of a NURBS curve.

    """
    @overload
    def ClampEnd(self, end: Geometry.CurveEnd) -> bool: ...
    @overload
    def Contains(self, item: float) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[float], arrayIndex: int) -> None: ...
    @overload
    def CreatePeriodicKnots(self, knotSpacing: float) -> bool: ...
    @overload
    def CreateUniformKnots(self, knotSpacing: float) -> bool: ...
    @overload
    def EnsurePrivateCopy() -> None: ...
    @overload
    def EpsilonEquals(self, other: NurbsCurveKnotList, epsilon: float) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsClampedEnd(self) -> bool: ...
    @property
    def IsClampedStart(self) -> bool: ...
    @property
    def Item(self) -> float: ...
    @property
    def KnotStyle(self) -> Geometry.KnotStyle: ...
    @overload
    def IndexOf(self, item: float) -> int: ...
    @overload
    def InsertKnot(self, value: float) -> bool: ...
    @overload
    def InsertKnot(self, value: float, multiplicity: int) -> bool: ...
    @overload
    def KnotMultiplicity(self, index: int) -> int: ...
    @overload
    def RemoveKnotAt(self, t: float) -> bool: ...
    @overload
    def RemoveKnots(self, index0: int, index1: int) -> bool: ...
    @overload
    def RemoveMultipleKnots(self, minimumMultiplicity: int, maximumMultiplicity: int, tolerance: float) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SuperfluousKnot(self, start: bool) -> float: ...

class NurbsCurvePointList(object):
    """Provides access to the control points of a NURBS curve.

    """
    @overload
    def ChangeEndWeights(self, w0: float, w1: float) -> bool: ...
    @overload
    def Contains(self, item: Geometry.ControlPoint) -> bool: ...
    @overload
    def ControlPolygon() -> Geometry.Polyline: ...
    @overload
    def CopyTo(self, array: Geometry.System.Array[Geometry.ControlPoint], arrayIndex: int) -> None: ...
    @overload
    def EnsurePrivateCopy() -> None: ...
    @overload
    def EpsilonEquals(self, other: NurbsCurvePointList, epsilon: float) -> bool: ...
    @property
    def ControlPolygonLength(self) -> float: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.ControlPoint: ...
    @property
    def PointSize(self) -> int: ...
    @overload
    def GetPoint(self, index: int) -> (bool, Geometry.Point3d): ...
    @overload
    def GetPoint(self, index: int) -> (bool, Geometry.Point4d): ...
    @overload
    def GetWeight(self, index: int) -> float: ...
    @overload
    def IndexOf(self, item: Geometry.ControlPoint) -> int: ...
    @overload
    def MakeNonRational() -> bool: ...
    @overload
    def MakeRational() -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetPoint(self, index: int, point: Geometry.Point4d) -> bool: ...
    @overload
    def SetPoint(self, index: int, point: Geometry.Point3d) -> bool: ...
    @overload
    def SetPoint(self, index: int, point: Geometry.Point3d, weight: float) -> bool: ...
    @overload
    def SetPoint(self, index: int, x: float, y: float, z: float) -> bool: ...
    @overload
    def SetPoint(self, index: int, x: float, y: float, z: float, weight: float) -> bool: ...
    @overload
    def SetWeight(self, index: int, weight: float) -> bool: ...
    @overload
    def UVNDirectionsAt(self, index: int) -> (bool, Geometry.Vector3d, Geometry.Vector3d, Geometry.Vector3d): ...
    @overload
    def ValidateSpacing(self, closeTolerance: float, stackTolerance: float) -> (bool, System.System.Array[int], System.System.Array[int]): ...

# endregion
