"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Intersection", "PlaneCircleIntersection", "PlaneSphereIntersection", "LineCircleIntersection", "LineSphereIntersection", "LineCylinderIntersection", "SphereSphereIntersection", "ArcArcIntersection", "CircleCircleIntersection", "IntersectionEvent", "RayShootEvent", "CurveIntersections", "MeshIntersectionCache", "MeshInterference", "MeshClash"]
# endregion

# region: Imports
from Rhino import DocObjects
from Rhino import FileIO
from Rhino import Geometry
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Intersection(object):
    """Provides static methods for the computation of intersections, projections, sections and similar.

    """
    @overload
    @staticmethod
    def ArcArc(arcA: Geometry.Arc, arcB: Geometry.Arc) -> (ArcArcIntersection, Geometry.Point3d, Geometry.Point3d): ...
    @overload
    @staticmethod
    def BrepBrep(brepA: Geometry.Brep, brepB: Geometry.Brep, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def BrepBrep(brepA: Geometry.Brep, brepB: Geometry.Brep, tolerance: float, joinCurves: bool) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def BrepPlane(brep: Geometry.Brep, plane: Geometry.Plane, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def BrepSurface(brep: Geometry.Brep, surface: Geometry.Surface, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def BrepSurface(brep: Geometry.Brep, surface: Geometry.Surface, tolerance: float, joinCurves: bool) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def CircleCircle(circleA: Geometry.Circle, circleB: Geometry.Circle) -> (CircleCircleIntersection, Geometry.Point3d, Geometry.Point3d): ...
    @overload
    @staticmethod
    def CurveBrep(curve: Geometry.Curve, brep: Geometry.Brep, tolerance: float, angleTolerance: float) -> (bool, System.System.Array[float]): ...
    @overload
    @staticmethod
    def CurveBrep(curve: Geometry.Curve, brep: Geometry.Brep, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def CurveBrep(curve: Geometry.Curve, brep: Geometry.Brep, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d], System.System.Array[float]): ...
    @overload
    @staticmethod
    def CurveBrepFace(curve: Geometry.Curve, face: Geometry.BrepFace, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    @staticmethod
    def CurveCurve(curveA: Geometry.Curve, curveB: Geometry.Curve, tolerance: float, overlapTolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurveCurveValidate(curveA: Geometry.Curve, curveB: Geometry.Curve, tolerance: float, overlapTolerance: float) -> (CurveIntersections, System.System.Array[int], FileIO.TextLog): ...
    @overload
    @staticmethod
    def CurveLine(curve: Geometry.Curve, line: Geometry.Line, tolerance: float, overlapTolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurvePlane(curve: Geometry.Curve, plane: Geometry.Plane, tolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurveSelf(curve: Geometry.Curve, tolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurveSurface(curve: Geometry.Curve, surface: Geometry.Surface, tolerance: float, overlapTolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurveSurface(curve: Geometry.Curve, curveDomain: Geometry.Interval, surface: Geometry.Surface, tolerance: float, overlapTolerance: float) -> CurveIntersections: ...
    @overload
    @staticmethod
    def CurveSurfaceValidate(curve: Geometry.Curve, surface: Geometry.Surface, tolerance: float, overlapTolerance: float) -> (CurveIntersections, System.System.Array[int], FileIO.TextLog): ...
    @overload
    @staticmethod
    def CurveSurfaceValidate(curve: Geometry.Curve, curveDomain: Geometry.Interval, surface: Geometry.Surface, tolerance: float, overlapTolerance: float) -> (CurveIntersections, System.System.Array[int], FileIO.TextLog): ...
    @property
    def MeshIntersectionsTolerancesCoefficient(self) -> float: ...
    @overload
    @staticmethod
    def LineBox(line: Geometry.Line, box: Geometry.Box, tolerance: float) -> (bool, Geometry.Interval): ...
    @overload
    @staticmethod
    def LineBox(line: Geometry.Line, box: Geometry.BoundingBox, tolerance: float) -> (bool, Geometry.Interval): ...
    @overload
    @staticmethod
    def LineCircle(line: Geometry.Line, circle: Geometry.Circle) -> (LineCircleIntersection, float, Geometry.Point3d, float, Geometry.Point3d): ...
    @overload
    @staticmethod
    def LineCylinder(line: Geometry.Line, cylinder: Geometry.Cylinder) -> (LineCylinderIntersection, Geometry.Point3d, Geometry.Point3d): ...
    @overload
    @staticmethod
    def LineLine(lineA: Geometry.Line, lineB: Geometry.Line) -> (bool, float, float): ...
    @overload
    @staticmethod
    def LineLine(lineA: Geometry.Line, lineB: Geometry.Line, tolerance: float, finiteSegments: bool) -> (bool, float, float): ...
    @overload
    @staticmethod
    def LinePlane(line: Geometry.Line, plane: Geometry.Plane) -> (bool, float): ...
    @overload
    @staticmethod
    def LineSphere(line: Geometry.Line, sphere: Geometry.Sphere) -> (LineSphereIntersection, Geometry.Point3d, Geometry.Point3d): ...
    @overload
    @staticmethod
    def MeshLine(mesh: Geometry.Mesh, line: Geometry.Line) -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    @staticmethod
    def MeshLine(mesh: Geometry.Mesh, line: Geometry.Line) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def MeshLineSorted(mesh: Geometry.Mesh, line: Geometry.Line) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def MeshMesh(meshes: Generic.IEnumerable, tolerance: float, overlapsPolylines: bool, overlapsMesh: bool, textLog: FileIO.TextLog, cancel: Threading.CancellationToken, progress: System.IProgress) -> (bool, Geometry.System.Array[Geometry.Polyline], Geometry.System.Array[Geometry.Polyline], Geometry.Mesh): ...
    @overload
    @staticmethod
    def MeshMeshAccurate(meshA: Geometry.Mesh, meshB: Geometry.Mesh, tolerance: float) -> Geometry.System.Array[Geometry.Polyline]: ...
    @overload
    @staticmethod
    def MeshMeshFast(meshA: Geometry.Mesh, meshB: Geometry.Mesh) -> Geometry.System.Array[Geometry.Line]: ...
    @overload
    @staticmethod
    def MeshMeshPredicate(meshes: Generic.IEnumerable, tolerance: float, textLog: FileIO.TextLog) -> (bool, System.System.Array[int]): ...
    @overload
    @staticmethod
    def MeshPlane(mesh: Geometry.Mesh, planes: Generic.IEnumerable) -> Geometry.System.Array[Geometry.Polyline]: ...
    @overload
    @staticmethod
    def MeshPlane(mesh: Geometry.Mesh, plane: Geometry.Plane) -> Geometry.System.Array[Geometry.Polyline]: ...
    @overload
    @staticmethod
    def MeshPlane(mesh: Geometry.Mesh, cache: MeshIntersectionCache, plane: Geometry.Plane, tolerance: float) -> Geometry.System.Array[Geometry.Polyline]: ...
    @overload
    @staticmethod
    def MeshPlane(mesh: Geometry.Mesh, cache: MeshIntersectionCache, planes: Generic.IEnumerable, tolerance: float) -> Geometry.System.Array[Geometry.Polyline]: ...
    @overload
    @staticmethod
    def MeshPolyline(mesh: Geometry.Mesh, curve: Geometry.PolylineCurve) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def MeshPolylineSorted(mesh: Geometry.Mesh, curve: Geometry.PolylineCurve) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def MeshRay(mesh: Geometry.Mesh, ray: Geometry.Ray3d) -> float: ...
    @overload
    @staticmethod
    def MeshRay(mesh: Geometry.Mesh, ray: Geometry.Ray3d) -> (float, System.System.Array[int]): ...
    @overload
    @staticmethod
    def PlaneBoundingBox(plane: Geometry.Plane, boundingBox: Geometry.BoundingBox) -> (bool, Geometry.Polyline): ...
    @overload
    @staticmethod
    def PlaneCircle(plane: Geometry.Plane, circle: Geometry.Circle) -> (PlaneCircleIntersection, float, float): ...
    @overload
    @staticmethod
    def PlanePlane(planeA: Geometry.Plane, planeB: Geometry.Plane) -> (bool, Geometry.Line): ...
    @overload
    @staticmethod
    def PlanePlanePlane(planeA: Geometry.Plane, planeB: Geometry.Plane, planeC: Geometry.Plane) -> (bool, Geometry.Point3d): ...
    @overload
    @staticmethod
    def PlaneSphere(plane: Geometry.Plane, sphere: Geometry.Sphere) -> (PlaneSphereIntersection, Geometry.Circle): ...
    @overload
    @staticmethod
    def ProjectPointsToBreps(breps: Generic.IEnumerable, points: Generic.IEnumerable, direction: Geometry.Vector3d, tolerance: float) -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    @staticmethod
    def ProjectPointsToBrepsEx(breps: Generic.IEnumerable, points: Generic.IEnumerable, direction: Geometry.Vector3d, tolerance: float) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def ProjectPointsToMeshes(meshes: Generic.IEnumerable, points: Generic.IEnumerable, direction: Geometry.Vector3d, tolerance: float) -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    @staticmethod
    def ProjectPointsToMeshesEx(meshes: Generic.IEnumerable, points: Generic.IEnumerable, direction: Geometry.Vector3d, tolerance: float) -> (Geometry.System.Array[Geometry.Point3d], System.System.Array[int]): ...
    @overload
    @staticmethod
    def RayShoot(ray: Geometry.Ray3d, geometry: Generic.IEnumerable, maxReflections: int) -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    @staticmethod
    def RayShoot(geometry: Generic.IEnumerable, ray: Geometry.Ray3d, maxReflections: int) -> System.Array[RayShootEvent]: ...
    @overload
    @staticmethod
    def SphereSphere(sphereA: Geometry.Sphere, sphereB: Geometry.Sphere) -> (SphereSphereIntersection, Geometry.Circle): ...
    @overload
    @staticmethod
    def SurfaceSurface(surfaceA: Geometry.Surface, surfaceB: Geometry.Surface, tolerance: float) -> (bool, Geometry.System.Array[Geometry.Curve], Geometry.System.Array[Geometry.Point3d]): ...

class PlaneCircleIntersection(enum.Enum):
    None_ = 0
    Tangent = 1
    Secant = 2
    Parallel = 3
    Coincident = 4

class PlaneSphereIntersection(enum.Enum):
    None_ = 0
    Point = 1
    Circle = 2

class LineCircleIntersection(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2

class LineSphereIntersection(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2

class LineCylinderIntersection(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2
    Overlap = 3

class SphereSphereIntersection(enum.Enum):
    None_ = 0
    Point = 1
    Circle = 2
    Overlap = 3

class ArcArcIntersection(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2
    Overlap = 3

class CircleCircleIntersection(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2
    Overlap = 3

class IntersectionEvent(object):
    """Provides all the information for a single Curve Intersection event.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def CompareEquivalent(eventA: IntersectionEvent, eventB: IntersectionEvent, relativePointTolerance: float) -> bool: ...
    @overload
    @staticmethod
    def CompareEquivalent(eventA: IntersectionEvent, eventB: IntersectionEvent, relativePointTolerance: float, log: FileIO.TextLog) -> bool: ...
    @property
    def IsOverlap(self) -> bool: ...
    @property
    def IsPoint(self) -> bool: ...
    @property
    def OverlapA(self) -> Geometry.Interval: ...
    @property
    def OverlapB(self) -> Geometry.Interval: ...
    @property
    def ParameterA(self) -> float: ...
    @property
    def ParameterB(self) -> float: ...
    @property
    def PointA(self) -> Geometry.Point3d: ...
    @property
    def PointA2(self) -> Geometry.Point3d: ...
    @property
    def PointB(self) -> Geometry.Point3d: ...
    @property
    def PointB2(self) -> Geometry.Point3d: ...
    @overload
    def SurfaceOverlapParameter() -> (Geometry.Interval, Geometry.Interval): ...
    @overload
    def SurfacePointParameter() -> (float, float): ...

class RayShootEvent(System.ValueType):
    """Represents an element which is part of a ray shoot.

    """
    @property
    def BrepFaceIndex(self) -> int: ...
    @property
    def GeometryIndex(self) -> int: ...
    @property
    def Point(self) -> Geometry.Point3d: ...
    @BrepFaceIndex.setter
    def BrepFaceIndex(self, value: System.Void): ...
    @GeometryIndex.setter
    def GeometryIndex(self, value: System.Void): ...
    @Point.setter
    def Point(self, value: System.Void): ...

class CurveIntersections(object):
    """Maintains an ordered list of Curve Intersection results.

    """
    @overload
    def CopyTo(self, array: System.Array[IntersectionEvent], arrayIndex: int) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IntersectionEvent: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class MeshIntersectionCache(object):
    """Provides a mechanism for lazily evaluating mesh data.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...

class MeshInterference(System.ValueType):
    """Represents an element which is part of a clash or intersection between two meshes.

    """
    @property
    def HitPoints(self) -> Geometry.System.Array[Geometry.Point3d]: ...
    @property
    def IndexA(self) -> int: ...
    @property
    def IndexB(self) -> int: ...
    @HitPoints.setter
    def HitPoints(self, value: System.Void): ...
    @IndexA.setter
    def IndexA(self, value: System.Void): ...
    @IndexB.setter
    def IndexB(self, value: System.Void): ...

class MeshClash(object):
    """Represents a particular instance of a clash or intersection between two meshes.

    """
    @overload
    @staticmethod
    def FindDetail(objA: DocObjects.RhinoObject, objB: DocObjects.RhinoObject, distance: float) -> Geometry.System.Array[Geometry.Mesh]: ...
    @overload
    @staticmethod
    def FindDetail(objA: DocObjects.RhinoObject, objB: DocObjects.RhinoObject, distance: float, meshType: Geometry.MeshType, meshingParameters: Geometry.MeshingParameters) -> Geometry.System.Array[Geometry.Mesh]: ...
    @property
    def ClashPoint(self) -> Geometry.Point3d: ...
    @property
    def ClashRadius(self) -> float: ...
    @property
    def MeshA(self) -> Geometry.Mesh: ...
    @property
    def MeshB(self) -> Geometry.Mesh: ...
    @overload
    @staticmethod
    def Search(setA: Generic.IEnumerable, setB: Generic.IEnumerable, distance: float) -> System.Array[MeshInterference]: ...
    @overload
    @staticmethod
    def Search(setA: Generic.IEnumerable, setB: Generic.IEnumerable, distance: float, maxEventCount: int) -> System.Array[MeshClash]: ...
    @overload
    @staticmethod
    def Search(meshA: Geometry.Mesh, setB: Generic.IEnumerable, distance: float, maxEventCount: int) -> System.Array[MeshClash]: ...
    @overload
    @staticmethod
    def Search(meshA: Geometry.Mesh, meshB: Geometry.Mesh, distance: float, maxEventCount: int) -> System.Array[MeshClash]: ...
    @overload
    @staticmethod
    def Search(setA: Generic.IEnumerable, setB: Generic.IEnumerable, distance: float, meshType: Geometry.MeshType, meshingParameters: Geometry.MeshingParameters) -> System.Array[MeshInterference]: ...

# endregion
