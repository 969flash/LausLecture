"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["PaintColor", "WidgetColor", "AppearanceSettingsState", "CommandPromptPosition", "AppearanceSettings", "CommandAliasList", "DraftAngleAnalysisSettingsState", "DraftAngleAnalysisSettings", "EdgeAnalysisSettingsState", "EdgeAnalysisSettings", "FileSettingsState", "FileSettings", "NeverRepeatList", "MouseSelectMode", "MiddleMouseMode", "GeneralSettingsState", "GeneralSettings", "ClipboardState", "CursorMode", "OsnapModes", "PointDisplayMode", "ModelAidSettingsState", "ModelAidSettings", "ViewSettingsState", "ViewSettings", "OpenGLSettingsState", "OpenGLSettings", "ShortcutKey", "KeyboardShortcut", "ShortcutKeySettings", "SmartTrackSettingsState", "SmartTrackSettings", "CursorTooltipSettingsState", "CursorTooltipSettings", "ZebraAnalysisSettingsState", "ZebraAnalysisSettings", "CurvatureGraphSettingsState", "CurvatureGraphSettings", "CurvatureAnalysisSettingsState", "CurvatureAnalysisSettings", "SelectionFilterSettingsState", "SelectionFilterSettings", "PackageManagerSettings", "ChooseOneObjectSettingsState", "ChooseOneObjectSettings", "HistorySettings", "LicenseNode", "Installation", "ViewRotationStyle", "CurvatureStyle"]
# endregion

# region: Imports
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import UI
from System import Drawing
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class PaintColor(enum.Enum):
    NormalStart = 0
    NormalEnd = 1
    NormalBorder = 2
    HotStart = 3
    HotEnd = 4
    HotBorder = 5
    PressedStart = 6
    PressedEnd = 7
    PressedBorder = 8
    TextEnabled = 9
    TextDisabled = 10
    MouseOverControlStart = 11
    MouseOverControlEnd = 12
    MouseOverControlBorder = 13
    ActiveCaption = 14
    InactiveCaption = 15
    PanelBackground = 16
    ActiveViewportTitle = 17
    InactiveViewportTitle = 18
    ModifiedValueControlColor = 19
    EditBoxBackground = 20
    GridLinesOnPanelBackground = 21
    GridLinesOnEditBoxBackground = 22
    InactiveTabBackground = 23

class WidgetColor(enum.Enum):
    UAxisColor = 0
    VAxisColor = 1
    WAxisColor = 2

class AppearanceSettingsState(object):
    """snapshot of the values in

    """
    @property
    def CommandPromptBackgroundColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptFontName(self) -> str: ...
    @property
    def CommandPromptFontSize(self) -> int: ...
    @property
    def CommandPromptHypertextColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptTextColor(self) -> Drawing.Color: ...
    @property
    def CrosshairColor(self) -> Drawing.Color: ...
    @property
    def CurrentLayerBackgroundColor(self) -> Drawing.Color: ...
    @property
    def DefaultFontFaceName(self) -> str: ...
    @property
    def DefaultLayerColor(self) -> Drawing.Color: ...
    @property
    def DefaultObjectColor(self) -> Drawing.Color: ...
    @property
    def DirectionArrowIconHeadSize(self) -> int: ...
    @property
    def DirectionArrowIconShaftSize(self) -> int: ...
    @property
    def EchoCommandsToHistoryWindow(self) -> bool: ...
    @property
    def EchoPromptsToHistoryWindow(self) -> bool: ...
    @property
    def EditCandidateColor(self) -> Drawing.Color: ...
    @property
    def FeedbackColor(self) -> Drawing.Color: ...
    @property
    def FrameBackgroundColor(self) -> Drawing.Color: ...
    @property
    def GridThickLineColor(self) -> Drawing.Color: ...
    @property
    def GridThinLineColor(self) -> Drawing.Color: ...
    @property
    def GridXAxisLineColor(self) -> Drawing.Color: ...
    @property
    def GridYAxisLineColor(self) -> Drawing.Color: ...
    @property
    def GridZAxisLineColor(self) -> Drawing.Color: ...
    @property
    def LockedObjectColor(self) -> Drawing.Color: ...
    @property
    def MenuVisible(self) -> bool: ...
    @property
    def PageviewPaperColor(self) -> Drawing.Color: ...
    @property
    def SelectedObjectColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowCrossingFillColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowCrossingStrokeColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowFillColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowStrokeColor(self) -> Drawing.Color: ...
    @property
    def ShowCrosshairs(self) -> bool: ...
    @property
    def ShowFullPathInTitleBar(self) -> bool: ...
    @property
    def ShowLayoutDropShadow(self) -> bool: ...
    @property
    def ShowStatusBar(self) -> bool: ...
    @property
    def ShowTitleBar(self) -> bool: ...
    @property
    def ShowViewportTitles(self) -> bool: ...
    @property
    def TrackingColor(self) -> Drawing.Color: ...
    @property
    def ViewportBackgroundColor(self) -> Drawing.Color: ...
    @property
    def ViewportTabsVisibleAtStart(self) -> bool: ...
    @property
    def WorldCoordIconXAxisColor(self) -> Drawing.Color: ...
    @property
    def WorldCoordIconYAxisColor(self) -> Drawing.Color: ...
    @property
    def WorldCoordIconZAxisColor(self) -> Drawing.Color: ...
    @CommandPromptBackgroundColor.setter
    def CommandPromptBackgroundColor(self, value: System.Void): ...
    @CommandPromptFontName.setter
    def CommandPromptFontName(self, value: System.Void): ...
    @CommandPromptFontSize.setter
    def CommandPromptFontSize(self, value: System.Void): ...
    @CommandPromptHypertextColor.setter
    def CommandPromptHypertextColor(self, value: System.Void): ...
    @CommandPromptTextColor.setter
    def CommandPromptTextColor(self, value: System.Void): ...
    @CrosshairColor.setter
    def CrosshairColor(self, value: System.Void): ...
    @CurrentLayerBackgroundColor.setter
    def CurrentLayerBackgroundColor(self, value: System.Void): ...
    @DefaultFontFaceName.setter
    def DefaultFontFaceName(self, value: System.Void): ...
    @DefaultLayerColor.setter
    def DefaultLayerColor(self, value: System.Void): ...
    @DefaultObjectColor.setter
    def DefaultObjectColor(self, value: System.Void): ...
    @DirectionArrowIconHeadSize.setter
    def DirectionArrowIconHeadSize(self, value: System.Void): ...
    @DirectionArrowIconShaftSize.setter
    def DirectionArrowIconShaftSize(self, value: System.Void): ...
    @EchoCommandsToHistoryWindow.setter
    def EchoCommandsToHistoryWindow(self, value: System.Void): ...
    @EchoPromptsToHistoryWindow.setter
    def EchoPromptsToHistoryWindow(self, value: System.Void): ...
    @EditCandidateColor.setter
    def EditCandidateColor(self, value: System.Void): ...
    @FeedbackColor.setter
    def FeedbackColor(self, value: System.Void): ...
    @FrameBackgroundColor.setter
    def FrameBackgroundColor(self, value: System.Void): ...
    @GridThickLineColor.setter
    def GridThickLineColor(self, value: System.Void): ...
    @GridThinLineColor.setter
    def GridThinLineColor(self, value: System.Void): ...
    @GridXAxisLineColor.setter
    def GridXAxisLineColor(self, value: System.Void): ...
    @GridYAxisLineColor.setter
    def GridYAxisLineColor(self, value: System.Void): ...
    @GridZAxisLineColor.setter
    def GridZAxisLineColor(self, value: System.Void): ...
    @LockedObjectColor.setter
    def LockedObjectColor(self, value: System.Void): ...
    @MenuVisible.setter
    def MenuVisible(self, value: System.Void): ...
    @PageviewPaperColor.setter
    def PageviewPaperColor(self, value: System.Void): ...
    @SelectedObjectColor.setter
    def SelectedObjectColor(self, value: System.Void): ...
    @SelectionWindowCrossingFillColor.setter
    def SelectionWindowCrossingFillColor(self, value: System.Void): ...
    @SelectionWindowCrossingStrokeColor.setter
    def SelectionWindowCrossingStrokeColor(self, value: System.Void): ...
    @SelectionWindowFillColor.setter
    def SelectionWindowFillColor(self, value: System.Void): ...
    @SelectionWindowStrokeColor.setter
    def SelectionWindowStrokeColor(self, value: System.Void): ...
    @ShowCrosshairs.setter
    def ShowCrosshairs(self, value: System.Void): ...
    @ShowFullPathInTitleBar.setter
    def ShowFullPathInTitleBar(self, value: System.Void): ...
    @ShowLayoutDropShadow.setter
    def ShowLayoutDropShadow(self, value: System.Void): ...
    @ShowStatusBar.setter
    def ShowStatusBar(self, value: System.Void): ...
    @ShowTitleBar.setter
    def ShowTitleBar(self, value: System.Void): ...
    @ShowViewportTitles.setter
    def ShowViewportTitles(self, value: System.Void): ...
    @TrackingColor.setter
    def TrackingColor(self, value: System.Void): ...
    @ViewportBackgroundColor.setter
    def ViewportBackgroundColor(self, value: System.Void): ...
    @ViewportTabsVisibleAtStart.setter
    def ViewportTabsVisibleAtStart(self, value: System.Void): ...
    @WorldCoordIconXAxisColor.setter
    def WorldCoordIconXAxisColor(self, value: System.Void): ...
    @WorldCoordIconYAxisColor.setter
    def WorldCoordIconYAxisColor(self, value: System.Void): ...
    @WorldCoordIconZAxisColor.setter
    def WorldCoordIconZAxisColor(self, value: System.Void): ...

class CommandPromptPosition(enum.Enum):
    Top = 0
    Bottom = 1
    Floating = 2
    Hidden = 3

class AppearanceSettings(object):
    """Provides static methods and properties to deal with the appearance of the application.

    """
    @overload
    @staticmethod
    def DefaultPaintColor(whichColor: PaintColor) -> Drawing.Color: ...
    @overload
    @staticmethod
    def DefaultPaintColor(whichColor: PaintColor, darkMode: bool) -> Drawing.Color: ...
    @overload
    @staticmethod
    def DefaultWidgetColor(whichColor: WidgetColor) -> Drawing.Color: ...
    @property
    def CommandPromptBackgroundColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptFontSize(self) -> int: ...
    @property
    def CommandPromptHypertextColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptPosition(self) -> CommandPromptPosition: ...
    @property
    def CommandPromptTextColor(self) -> Drawing.Color: ...
    @property
    def CrosshairColor(self) -> Drawing.Color: ...
    @property
    def CurrentLayerBackgroundColor(self) -> Drawing.Color: ...
    @property
    def DefaultFontFaceName(self) -> str: ...
    @property
    def DefaultLayerColor(self) -> Drawing.Color: ...
    @property
    def DefaultObjectColor(self) -> Drawing.Color: ...
    @property
    def DirectionArrowIconHeadSize(self) -> int: ...
    @property
    def DirectionArrowIconShaftSize(self) -> int: ...
    @property
    def EchoCommandsToHistoryWindow(self) -> bool: ...
    @property
    def EchoPromptsToHistoryWindow(self) -> bool: ...
    @property
    def EditCandidateColor(self) -> Drawing.Color: ...
    @property
    def FeedbackColor(self) -> Drawing.Color: ...
    @property
    def FrameBackgroundColor(self) -> Drawing.Color: ...
    @property
    def GridThickLineColor(self) -> Drawing.Color: ...
    @property
    def GridThinLineColor(self) -> Drawing.Color: ...
    @property
    def GridXAxisLineColor(self) -> Drawing.Color: ...
    @property
    def GridYAxisLineColor(self) -> Drawing.Color: ...
    @property
    def GridZAxisLineColor(self) -> Drawing.Color: ...
    @property
    def LanguageIdentifier(self) -> int: ...
    @property
    def LockedObjectColor(self) -> Drawing.Color: ...
    @property
    def MenuVisible(self) -> bool: ...
    @property
    def PageviewPaperColor(self) -> Drawing.Color: ...
    @property
    def PreviousLanguageIdentifier(self) -> int: ...
    @property
    def SelectedObjectColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowCrossingFillColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowCrossingStrokeColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowFillColor(self) -> Drawing.Color: ...
    @property
    def SelectionWindowStrokeColor(self) -> Drawing.Color: ...
    @property
    def ShowCrosshairs(self) -> bool: ...
    @property
    def ShowFullPathInTitleBar(self) -> bool: ...
    @property
    def ShowLayoutDropShadow(self) -> bool: ...
    @property
    def ShowOsnapBar(self) -> bool: ...
    @property
    def ShowSelectionFilterBar(self) -> bool: ...
    @property
    def ShowSideBar(self) -> bool: ...
    @property
    def ShowStatusBar(self) -> bool: ...
    @property
    def ShowTitleBar(self) -> bool: ...
    @property
    def ShowViewportTitles(self) -> bool: ...
    @property
    def TrackingColor(self) -> Drawing.Color: ...
    @property
    def UsePaintColors(self) -> bool: ...
    @property
    def ViewportBackgroundColor(self) -> Drawing.Color: ...
    @property
    def ViewportTabsVisibleAtStart(self) -> bool: ...
    @property
    def WorldCoordIconXAxisColor(self) -> Drawing.Color: ...
    @property
    def WorldCoordIconYAxisColor(self) -> Drawing.Color: ...
    @property
    def WorldCoordIconZAxisColor(self) -> Drawing.Color: ...
    @overload
    @staticmethod
    def GetCurrentState() -> AppearanceSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> AppearanceSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState(darkMode: bool) -> AppearanceSettingsState: ...
    @overload
    @staticmethod
    def GetPaintColor(whichColor: PaintColor) -> Drawing.Color: ...
    @overload
    @staticmethod
    def GetPaintColor(whichColor: PaintColor, compute: bool) -> Drawing.Color: ...
    @overload
    @staticmethod
    def GetWidgetColor(whichColor: WidgetColor) -> Drawing.Color: ...
    @overload
    @staticmethod
    def InitialMainWindowPosition() -> (bool, Drawing.Rectangle): ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @CommandPromptBackgroundColor.setter
    def CommandPromptBackgroundColor(self, value: System.Void): ...
    @CommandPromptFontSize.setter
    def CommandPromptFontSize(self, value: System.Void): ...
    @CommandPromptHypertextColor.setter
    def CommandPromptHypertextColor(self, value: System.Void): ...
    @CommandPromptPosition.setter
    def CommandPromptPosition(self, value: System.Void): ...
    @CommandPromptTextColor.setter
    def CommandPromptTextColor(self, value: System.Void): ...
    @CrosshairColor.setter
    def CrosshairColor(self, value: System.Void): ...
    @CurrentLayerBackgroundColor.setter
    def CurrentLayerBackgroundColor(self, value: System.Void): ...
    @DefaultLayerColor.setter
    def DefaultLayerColor(self, value: System.Void): ...
    @DefaultObjectColor.setter
    def DefaultObjectColor(self, value: System.Void): ...
    @DirectionArrowIconHeadSize.setter
    def DirectionArrowIconHeadSize(self, value: System.Void): ...
    @DirectionArrowIconShaftSize.setter
    def DirectionArrowIconShaftSize(self, value: System.Void): ...
    @EchoCommandsToHistoryWindow.setter
    def EchoCommandsToHistoryWindow(self, value: System.Void): ...
    @EchoPromptsToHistoryWindow.setter
    def EchoPromptsToHistoryWindow(self, value: System.Void): ...
    @EditCandidateColor.setter
    def EditCandidateColor(self, value: System.Void): ...
    @FeedbackColor.setter
    def FeedbackColor(self, value: System.Void): ...
    @FrameBackgroundColor.setter
    def FrameBackgroundColor(self, value: System.Void): ...
    @GridThickLineColor.setter
    def GridThickLineColor(self, value: System.Void): ...
    @GridThinLineColor.setter
    def GridThinLineColor(self, value: System.Void): ...
    @GridXAxisLineColor.setter
    def GridXAxisLineColor(self, value: System.Void): ...
    @GridYAxisLineColor.setter
    def GridYAxisLineColor(self, value: System.Void): ...
    @GridZAxisLineColor.setter
    def GridZAxisLineColor(self, value: System.Void): ...
    @LanguageIdentifier.setter
    def LanguageIdentifier(self, value: System.Void): ...
    @LockedObjectColor.setter
    def LockedObjectColor(self, value: System.Void): ...
    @MenuVisible.setter
    def MenuVisible(self, value: System.Void): ...
    @PageviewPaperColor.setter
    def PageviewPaperColor(self, value: System.Void): ...
    @PreviousLanguageIdentifier.setter
    def PreviousLanguageIdentifier(self, value: System.Void): ...
    @SelectedObjectColor.setter
    def SelectedObjectColor(self, value: System.Void): ...
    @SelectionWindowCrossingFillColor.setter
    def SelectionWindowCrossingFillColor(self, value: System.Void): ...
    @SelectionWindowCrossingStrokeColor.setter
    def SelectionWindowCrossingStrokeColor(self, value: System.Void): ...
    @SelectionWindowFillColor.setter
    def SelectionWindowFillColor(self, value: System.Void): ...
    @SelectionWindowStrokeColor.setter
    def SelectionWindowStrokeColor(self, value: System.Void): ...
    @ShowCrosshairs.setter
    def ShowCrosshairs(self, value: System.Void): ...
    @ShowFullPathInTitleBar.setter
    def ShowFullPathInTitleBar(self, value: System.Void): ...
    @ShowLayoutDropShadow.setter
    def ShowLayoutDropShadow(self, value: System.Void): ...
    @ShowOsnapBar.setter
    def ShowOsnapBar(self, value: System.Void): ...
    @ShowSelectionFilterBar.setter
    def ShowSelectionFilterBar(self, value: System.Void): ...
    @ShowSideBar.setter
    def ShowSideBar(self, value: System.Void): ...
    @ShowStatusBar.setter
    def ShowStatusBar(self, value: System.Void): ...
    @ShowTitleBar.setter
    def ShowTitleBar(self, value: System.Void): ...
    @ShowViewportTitles.setter
    def ShowViewportTitles(self, value: System.Void): ...
    @TrackingColor.setter
    def TrackingColor(self, value: System.Void): ...
    @ViewportBackgroundColor.setter
    def ViewportBackgroundColor(self, value: System.Void): ...
    @ViewportTabsVisibleAtStart.setter
    def ViewportTabsVisibleAtStart(self, value: System.Void): ...
    @WorldCoordIconXAxisColor.setter
    def WorldCoordIconXAxisColor(self, value: System.Void): ...
    @WorldCoordIconYAxisColor.setter
    def WorldCoordIconYAxisColor(self, value: System.Void): ...
    @WorldCoordIconZAxisColor.setter
    def WorldCoordIconZAxisColor(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetPaintColor(whichColor: PaintColor, c: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def SetPaintColor(whichColor: PaintColor, c: Drawing.Color, forceUiUpdate: bool) -> None: ...
    @overload
    @staticmethod
    def SetToDarkMode() -> bool: ...
    @overload
    @staticmethod
    def SetToLightMode() -> bool: ...
    @overload
    @staticmethod
    def SetWidgetColor(whichColor: WidgetColor, c: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def SetWidgetColor(whichColor: WidgetColor, c: Drawing.Color, forceUiUpdate: bool) -> None: ...
    @overload
    @staticmethod
    def UpdateFromState(state: AppearanceSettingsState) -> None: ...
    @overload
    @staticmethod
    def UsingDefaultDarkModeColors() -> bool: ...
    @overload
    @staticmethod
    def UsingDefaultLightModeColors() -> bool: ...

class CommandAliasList(object):
    """Contains static methods and properties to access command aliases.

    """
    @overload
    @staticmethod
    def Add(alias: str, macro: str) -> bool: ...
    @overload
    @staticmethod
    def Clear() -> None: ...
    @overload
    @staticmethod
    def Delete(alias: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @overload
    @staticmethod
    def GetDefaults() -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def GetMacro(alias: str) -> str: ...
    @overload
    @staticmethod
    def GetNames() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def IsAlias(alias: str) -> bool: ...
    @overload
    @staticmethod
    def IsDefault() -> bool: ...
    @overload
    @staticmethod
    def SetMacro(alias: str, macro: str) -> bool: ...
    @overload
    @staticmethod
    def ToDictionary() -> Generic.Dictionary: ...

class DraftAngleAnalysisSettingsState(object):
    """Represents a snapshot of

    """
    @property
    def AngleRange(self) -> Geometry.Interval: ...
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def UpDirection(self) -> Geometry.Vector3d: ...
    @AngleRange.setter
    def AngleRange(self, value: System.Void): ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: System.Void): ...
    @UpDirection.setter
    def UpDirection(self, value: System.Void): ...

class DraftAngleAnalysisSettings(object):
    """
    """
    @property
    def AngleRange(self) -> Geometry.Interval: ...
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def UpDirection(self) -> Geometry.Vector3d: ...
    @overload
    @staticmethod
    def GetCurrentState() -> DraftAngleAnalysisSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> DraftAngleAnalysisSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @AngleRange.setter
    def AngleRange(self, value: System.Void): ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: System.Void): ...
    @UpDirection.setter
    def UpDirection(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: DraftAngleAnalysisSettingsState) -> None: ...

class EdgeAnalysisSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def ShowEdgeColor(self) -> Drawing.Color: ...
    @property
    def ShowEdges(self) -> int: ...
    @ShowEdgeColor.setter
    def ShowEdgeColor(self, value: System.Void): ...
    @ShowEdges.setter
    def ShowEdges(self, value: System.Void): ...

class EdgeAnalysisSettings(object):
    """Contains static methods and properties to modify the visibility of edges in edge-related commands.

    """
    @property
    def ShowEdgeColor(self) -> Drawing.Color: ...
    @property
    def ShowEdges(self) -> int: ...
    @overload
    @staticmethod
    def GetCurrentState() -> EdgeAnalysisSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> EdgeAnalysisSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @ShowEdgeColor.setter
    def ShowEdgeColor(self, value: System.Void): ...
    @ShowEdges.setter
    def ShowEdges(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: EdgeAnalysisSettingsState) -> None: ...

class FileSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def AutoSaveEnabled(self) -> bool: ...
    @property
    def AutoSaveInterval(self) -> System.TimeSpan: ...
    @property
    def AutoSaveMeshes(self) -> bool: ...
    @property
    def ClipboardCopyToPreviousRhinoVersion(self) -> bool: ...
    @property
    def ClipboardOnExit(self) -> ClipboardState: ...
    @property
    def CreateBackupFiles(self) -> bool: ...
    @property
    def FileLockingEnabled(self) -> bool: ...
    @property
    def FileLockingOpenWarning(self) -> bool: ...
    @property
    def SaveViewChanges(self) -> bool: ...
    @property
    def TemplateFileDir(self) -> str: ...
    @AutoSaveEnabled.setter
    def AutoSaveEnabled(self, value: System.Void): ...
    @AutoSaveInterval.setter
    def AutoSaveInterval(self, value: System.Void): ...
    @AutoSaveMeshes.setter
    def AutoSaveMeshes(self, value: System.Void): ...
    @ClipboardCopyToPreviousRhinoVersion.setter
    def ClipboardCopyToPreviousRhinoVersion(self, value: System.Void): ...
    @ClipboardOnExit.setter
    def ClipboardOnExit(self, value: System.Void): ...
    @CreateBackupFiles.setter
    def CreateBackupFiles(self, value: System.Void): ...
    @FileLockingEnabled.setter
    def FileLockingEnabled(self, value: System.Void): ...
    @FileLockingOpenWarning.setter
    def FileLockingOpenWarning(self, value: System.Void): ...
    @SaveViewChanges.setter
    def SaveViewChanges(self, value: System.Void): ...
    @TemplateFileDir.setter
    def TemplateFileDir(self, value: System.Void): ...

class FileSettings(object):
    """Contains static methods and properties relating Rhino files.

    """
    @overload
    @staticmethod
    def AddSearchPath(folder: str, index: int) -> int: ...
    @overload
    @staticmethod
    def AutoSaveBeforeCommands() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def DefaultTemplateFolderForLanguageID(languageID: int) -> str: ...
    @overload
    @staticmethod
    def DeleteSearchPath(folder: str) -> bool: ...
    @overload
    @staticmethod
    def FindFile(fileName: str) -> str: ...
    @property
    def AutoSaveEnabled(self) -> bool: ...
    @property
    def AutoSaveFile(self) -> str: ...
    @property
    def AutoSaveInterval(self) -> System.TimeSpan: ...
    @property
    def AutoSaveMeshes(self) -> bool: ...
    @property
    def ClipboardCopyToPreviousRhinoVersion(self) -> bool: ...
    @property
    def ClipboardOnExit(self) -> ClipboardState: ...
    @property
    def CreateBackupFiles(self) -> bool: ...
    @property
    def DefaultRuiFile(self) -> str: ...
    @property
    def ExecutableFolder(self) -> str: ...
    @property
    def FileLockingEnabled(self) -> bool: ...
    @property
    def FileLockingOpenWarning(self) -> bool: ...
    @property
    def HelpFilePath(self) -> str: ...
    @property
    def InstallFolder(self) -> IO.DirectoryInfo: ...
    @property
    def LocalProfileDataFolder(self) -> str: ...
    @property
    def SaveViewChanges(self) -> bool: ...
    @property
    def SearchPathCount(self) -> int: ...
    @property
    def TemplateFile(self) -> str: ...
    @property
    def TemplateFolder(self) -> str: ...
    @property
    def WorkingFolder(self) -> str: ...
    @overload
    @staticmethod
    def GetCurrentState() -> FileSettingsState: ...
    @overload
    @staticmethod
    def GetDataFolder(currentUser: bool) -> str: ...
    @overload
    @staticmethod
    def GetDefaultState() -> FileSettingsState: ...
    @overload
    @staticmethod
    def GetSearchPaths() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def RecentlyOpenedFiles() -> System.System.Array[str]: ...
    @AutoSaveEnabled.setter
    def AutoSaveEnabled(self, value: System.Void): ...
    @AutoSaveFile.setter
    def AutoSaveFile(self, value: System.Void): ...
    @AutoSaveInterval.setter
    def AutoSaveInterval(self, value: System.Void): ...
    @AutoSaveMeshes.setter
    def AutoSaveMeshes(self, value: System.Void): ...
    @ClipboardCopyToPreviousRhinoVersion.setter
    def ClipboardCopyToPreviousRhinoVersion(self, value: System.Void): ...
    @ClipboardOnExit.setter
    def ClipboardOnExit(self, value: System.Void): ...
    @CreateBackupFiles.setter
    def CreateBackupFiles(self, value: System.Void): ...
    @FileLockingEnabled.setter
    def FileLockingEnabled(self, value: System.Void): ...
    @FileLockingOpenWarning.setter
    def FileLockingOpenWarning(self, value: System.Void): ...
    @SaveViewChanges.setter
    def SaveViewChanges(self, value: System.Void): ...
    @TemplateFile.setter
    def TemplateFile(self, value: System.Void): ...
    @TemplateFolder.setter
    def TemplateFolder(self, value: System.Void): ...
    @WorkingFolder.setter
    def WorkingFolder(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetAutoSaveBeforeCommands(commands: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def UpdateFromState(state: FileSettingsState) -> None: ...

class NeverRepeatList(object):
    """Contains static methods and properties relating to the list of commands that are never repeated.

    """
    @overload
    @staticmethod
    def CommandNames() -> System.System.Array[str]: ...
    @property
    def UseNeverRepeatList(self) -> bool: ...
    @overload
    @staticmethod
    def SetList(commandNames: System.System.Array[str]) -> int: ...

class MouseSelectMode(enum.Enum):
    Crossing = 0
    Window = 1
    Combo = 2

class MiddleMouseMode(enum.Enum):
    PopupMenu = 0
    PopupToolbar = 1
    RunMacro = 2

class GeneralSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def AutoUpdateCommandHelp(self) -> bool: ...
    @property
    def ContextMenuDelay(self) -> System.TimeSpan: ...
    @property
    def EnableContextMenu(self) -> bool: ...
    @property
    def MaximumPopupMenuLines(self) -> int: ...
    @property
    def MaximumUndoMemoryMb(self) -> int: ...
    @property
    def MiddleMouseMacro(self) -> str: ...
    @property
    def MiddleMouseMode(self) -> MiddleMouseMode: ...
    @property
    def MiddleMousePopupToolbar(self) -> str: ...
    @property
    def MinimumUndoSteps(self) -> int: ...
    @property
    def MouseSelectMode(self) -> MouseSelectMode: ...
    @property
    def NewObjectIsoparmCount(self) -> int: ...
    @AutoUpdateCommandHelp.setter
    def AutoUpdateCommandHelp(self, value: System.Void): ...
    @ContextMenuDelay.setter
    def ContextMenuDelay(self, value: System.Void): ...
    @EnableContextMenu.setter
    def EnableContextMenu(self, value: System.Void): ...
    @MaximumPopupMenuLines.setter
    def MaximumPopupMenuLines(self, value: System.Void): ...
    @MaximumUndoMemoryMb.setter
    def MaximumUndoMemoryMb(self, value: System.Void): ...
    @MiddleMouseMacro.setter
    def MiddleMouseMacro(self, value: System.Void): ...
    @MiddleMouseMode.setter
    def MiddleMouseMode(self, value: System.Void): ...
    @MiddleMousePopupToolbar.setter
    def MiddleMousePopupToolbar(self, value: System.Void): ...
    @MinimumUndoSteps.setter
    def MinimumUndoSteps(self, value: System.Void): ...
    @MouseSelectMode.setter
    def MouseSelectMode(self, value: System.Void): ...
    @NewObjectIsoparmCount.setter
    def NewObjectIsoparmCount(self, value: System.Void): ...

class GeneralSettings(object):
    """Contains static methods and properties to give access to Rhinoceros settings.

    """
    @property
    def AutoUpdateCommandHelp(self) -> bool: ...
    @property
    def ContextMenuDelay(self) -> System.TimeSpan: ...
    @property
    def EnableContextMenu(self) -> bool: ...
    @property
    def MaximumPopupMenuLines(self) -> int: ...
    @property
    def MaximumUndoMemoryMb(self) -> int: ...
    @property
    def MiddleMouseMacro(self) -> str: ...
    @property
    def MiddleMouseMode(self) -> MiddleMouseMode: ...
    @property
    def MiddleMousePopupToolbar(self) -> str: ...
    @property
    def MinimumUndoSteps(self) -> int: ...
    @property
    def MouseSelectMode(self) -> MouseSelectMode: ...
    @property
    def NewObjectIsoparmCount(self) -> int: ...
    @property
    def UseExtrusions(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> GeneralSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> GeneralSettingsState: ...
    @AutoUpdateCommandHelp.setter
    def AutoUpdateCommandHelp(self, value: System.Void): ...
    @ContextMenuDelay.setter
    def ContextMenuDelay(self, value: System.Void): ...
    @EnableContextMenu.setter
    def EnableContextMenu(self, value: System.Void): ...
    @MaximumPopupMenuLines.setter
    def MaximumPopupMenuLines(self, value: System.Void): ...
    @MaximumUndoMemoryMb.setter
    def MaximumUndoMemoryMb(self, value: System.Void): ...
    @MiddleMouseMacro.setter
    def MiddleMouseMacro(self, value: System.Void): ...
    @MiddleMouseMode.setter
    def MiddleMouseMode(self, value: System.Void): ...
    @MiddleMousePopupToolbar.setter
    def MiddleMousePopupToolbar(self, value: System.Void): ...
    @MinimumUndoSteps.setter
    def MinimumUndoSteps(self, value: System.Void): ...
    @MouseSelectMode.setter
    def MouseSelectMode(self, value: System.Void): ...
    @NewObjectIsoparmCount.setter
    def NewObjectIsoparmCount(self, value: System.Void): ...

class ClipboardState(enum.Enum):
    KeepData = 0
    DeleteData = 1
    PromptWhenBig = 2

class CursorMode(enum.Enum):
    None_ = 0
    BlackOnWhite = 1
    WhiteOnBlack = 2

class OsnapModes(enum.Enum):
    None_ = 0
    Near = 2
    Focus = 8
    Center = 32
    Vertex = 64
    Knot = 128
    Quadrant = 512
    Midpoint = 2048
    Intersection = 8192
    End = 131072
    Perpendicular = 524288
    Tangent = 2097152
    Point = 134217728

class PointDisplayMode(enum.Enum):
    WorldPoint = 0
    CplanePoint = 1

class ModelAidSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def AltPlusArrow(self) -> bool: ...
    @property
    def AutoAlignCPlane(self) -> bool: ...
    @property
    def AutoCPlaneAlignment(self) -> int: ...
    @property
    def ControlPolygonDisplayDensity(self) -> int: ...
    @property
    def CtrlNudgeKeyStep(self) -> float: ...
    @property
    def DisplayControlPolygon(self) -> bool: ...
    @property
    def ExtendToApparentIntersection(self) -> bool: ...
    @property
    def ExtendTrimLines(self) -> bool: ...
    @property
    def GridSnap(self) -> bool: ...
    @property
    def HighlightControlPolygon(self) -> bool: ...
    @property
    def MousePickboxRadius(self) -> int: ...
    @property
    def NudgeKeyStep(self) -> float: ...
    @property
    def NudgeMode(self) -> int: ...
    @property
    def OrientAutoCPlaneToView(self) -> bool: ...
    @property
    def Ortho(self) -> bool: ...
    @property
    def OrthoAngle(self) -> float: ...
    @property
    def OrthoUseZ(self) -> bool: ...
    @property
    def Osnap(self) -> bool: ...
    @property
    def OsnapCursorMode(self) -> CursorMode: ...
    @property
    def OsnapModes(self) -> OsnapModes: ...
    @property
    def OsnapPickboxRadius(self) -> int: ...
    @property
    def Planar(self) -> bool: ...
    @property
    def PointDisplay(self) -> PointDisplayMode: ...
    @property
    def ProjectSnapToCPlane(self) -> bool: ...
    @property
    def ShiftNudgeKeyStep(self) -> float: ...
    @property
    def SnapToLocked(self) -> bool: ...
    @property
    def StickyAutoCPlane(self) -> bool: ...
    @property
    def UniversalConstructionPlaneMode(self) -> bool: ...
    @property
    def UseHorizontalDialog(self) -> bool: ...
    @AltPlusArrow.setter
    def AltPlusArrow(self, value: System.Void): ...
    @AutoAlignCPlane.setter
    def AutoAlignCPlane(self, value: System.Void): ...
    @AutoCPlaneAlignment.setter
    def AutoCPlaneAlignment(self, value: System.Void): ...
    @ControlPolygonDisplayDensity.setter
    def ControlPolygonDisplayDensity(self, value: System.Void): ...
    @CtrlNudgeKeyStep.setter
    def CtrlNudgeKeyStep(self, value: System.Void): ...
    @DisplayControlPolygon.setter
    def DisplayControlPolygon(self, value: System.Void): ...
    @ExtendToApparentIntersection.setter
    def ExtendToApparentIntersection(self, value: System.Void): ...
    @ExtendTrimLines.setter
    def ExtendTrimLines(self, value: System.Void): ...
    @GridSnap.setter
    def GridSnap(self, value: System.Void): ...
    @HighlightControlPolygon.setter
    def HighlightControlPolygon(self, value: System.Void): ...
    @MousePickboxRadius.setter
    def MousePickboxRadius(self, value: System.Void): ...
    @NudgeKeyStep.setter
    def NudgeKeyStep(self, value: System.Void): ...
    @NudgeMode.setter
    def NudgeMode(self, value: System.Void): ...
    @OrientAutoCPlaneToView.setter
    def OrientAutoCPlaneToView(self, value: System.Void): ...
    @Ortho.setter
    def Ortho(self, value: System.Void): ...
    @OrthoAngle.setter
    def OrthoAngle(self, value: System.Void): ...
    @OrthoUseZ.setter
    def OrthoUseZ(self, value: System.Void): ...
    @Osnap.setter
    def Osnap(self, value: System.Void): ...
    @OsnapCursorMode.setter
    def OsnapCursorMode(self, value: System.Void): ...
    @OsnapModes.setter
    def OsnapModes(self, value: System.Void): ...
    @OsnapPickboxRadius.setter
    def OsnapPickboxRadius(self, value: System.Void): ...
    @Planar.setter
    def Planar(self, value: System.Void): ...
    @PointDisplay.setter
    def PointDisplay(self, value: System.Void): ...
    @ProjectSnapToCPlane.setter
    def ProjectSnapToCPlane(self, value: System.Void): ...
    @ShiftNudgeKeyStep.setter
    def ShiftNudgeKeyStep(self, value: System.Void): ...
    @SnapToLocked.setter
    def SnapToLocked(self, value: System.Void): ...
    @StickyAutoCPlane.setter
    def StickyAutoCPlane(self, value: System.Void): ...
    @UniversalConstructionPlaneMode.setter
    def UniversalConstructionPlaneMode(self, value: System.Void): ...
    @UseHorizontalDialog.setter
    def UseHorizontalDialog(self, value: System.Void): ...

class ModelAidSettings(object):
    """Contains static methods and properties to modify model aid settings.

    """
    @property
    def AltPlusArrow(self) -> bool: ...
    @property
    def AutoAlignCPlane(self) -> bool: ...
    @property
    def AutoCPlaneAlignment(self) -> int: ...
    @property
    def AutoGumballEnabled(self) -> bool: ...
    @property
    def ControlPolygonDisplayDensity(self) -> int: ...
    @property
    def CtrlNudgeKeyStep(self) -> float: ...
    @property
    def DisplayControlPolygon(self) -> bool: ...
    @property
    def ExtendToApparentIntersection(self) -> bool: ...
    @property
    def ExtendTrimLines(self) -> bool: ...
    @property
    def GridSnap(self) -> bool: ...
    @property
    def GumballAutoReset(self) -> bool: ...
    @property
    def GumballExtrudeMergeFaces(self) -> bool: ...
    @property
    def HighlightControlPolygon(self) -> bool: ...
    @property
    def MousePickboxRadius(self) -> int: ...
    @property
    def NudgeKeyStep(self) -> float: ...
    @property
    def NudgeMode(self) -> int: ...
    @property
    def OnlySnapToSelected(self) -> bool: ...
    @property
    def OrientAutoCPlaneToView(self) -> bool: ...
    @property
    def Ortho(self) -> bool: ...
    @property
    def OrthoAngle(self) -> float: ...
    @property
    def OrthoUseZ(self) -> bool: ...
    @property
    def Osnap(self) -> bool: ...
    @property
    def OsnapCursorMode(self) -> CursorMode: ...
    @property
    def OsnapModes(self) -> OsnapModes: ...
    @property
    def OsnapPickboxRadius(self) -> int: ...
    @property
    def Planar(self) -> bool: ...
    @property
    def PointDisplay(self) -> PointDisplayMode: ...
    @property
    def ProjectSnapToCPlane(self) -> bool: ...
    @property
    def ShiftNudgeKeyStep(self) -> float: ...
    @property
    def SnappyGumballEnabled(self) -> bool: ...
    @property
    def SnapToFiltered(self) -> bool: ...
    @property
    def SnapToLocked(self) -> bool: ...
    @property
    def SnapToOccluded(self) -> bool: ...
    @property
    def StickyAutoCPlane(self) -> bool: ...
    @property
    def UniversalConstructionPlaneMode(self) -> bool: ...
    @property
    def UseHorizontalDialog(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> ModelAidSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> ModelAidSettingsState: ...
    @AltPlusArrow.setter
    def AltPlusArrow(self, value: System.Void): ...
    @AutoAlignCPlane.setter
    def AutoAlignCPlane(self, value: System.Void): ...
    @AutoCPlaneAlignment.setter
    def AutoCPlaneAlignment(self, value: System.Void): ...
    @AutoGumballEnabled.setter
    def AutoGumballEnabled(self, value: System.Void): ...
    @ControlPolygonDisplayDensity.setter
    def ControlPolygonDisplayDensity(self, value: System.Void): ...
    @CtrlNudgeKeyStep.setter
    def CtrlNudgeKeyStep(self, value: System.Void): ...
    @DisplayControlPolygon.setter
    def DisplayControlPolygon(self, value: System.Void): ...
    @ExtendToApparentIntersection.setter
    def ExtendToApparentIntersection(self, value: System.Void): ...
    @ExtendTrimLines.setter
    def ExtendTrimLines(self, value: System.Void): ...
    @GridSnap.setter
    def GridSnap(self, value: System.Void): ...
    @GumballAutoReset.setter
    def GumballAutoReset(self, value: System.Void): ...
    @GumballExtrudeMergeFaces.setter
    def GumballExtrudeMergeFaces(self, value: System.Void): ...
    @HighlightControlPolygon.setter
    def HighlightControlPolygon(self, value: System.Void): ...
    @MousePickboxRadius.setter
    def MousePickboxRadius(self, value: System.Void): ...
    @NudgeKeyStep.setter
    def NudgeKeyStep(self, value: System.Void): ...
    @NudgeMode.setter
    def NudgeMode(self, value: System.Void): ...
    @OnlySnapToSelected.setter
    def OnlySnapToSelected(self, value: System.Void): ...
    @OrientAutoCPlaneToView.setter
    def OrientAutoCPlaneToView(self, value: System.Void): ...
    @Ortho.setter
    def Ortho(self, value: System.Void): ...
    @OrthoAngle.setter
    def OrthoAngle(self, value: System.Void): ...
    @OrthoUseZ.setter
    def OrthoUseZ(self, value: System.Void): ...
    @Osnap.setter
    def Osnap(self, value: System.Void): ...
    @OsnapCursorMode.setter
    def OsnapCursorMode(self, value: System.Void): ...
    @OsnapModes.setter
    def OsnapModes(self, value: System.Void): ...
    @OsnapPickboxRadius.setter
    def OsnapPickboxRadius(self, value: System.Void): ...
    @Planar.setter
    def Planar(self, value: System.Void): ...
    @PointDisplay.setter
    def PointDisplay(self, value: System.Void): ...
    @ProjectSnapToCPlane.setter
    def ProjectSnapToCPlane(self, value: System.Void): ...
    @ShiftNudgeKeyStep.setter
    def ShiftNudgeKeyStep(self, value: System.Void): ...
    @SnappyGumballEnabled.setter
    def SnappyGumballEnabled(self, value: System.Void): ...
    @SnapToFiltered.setter
    def SnapToFiltered(self, value: System.Void): ...
    @SnapToLocked.setter
    def SnapToLocked(self, value: System.Void): ...
    @SnapToOccluded.setter
    def SnapToOccluded(self, value: System.Void): ...
    @StickyAutoCPlane.setter
    def StickyAutoCPlane(self, value: System.Void): ...
    @UniversalConstructionPlaneMode.setter
    def UniversalConstructionPlaneMode(self, value: System.Void): ...
    @UseHorizontalDialog.setter
    def UseHorizontalDialog(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: ModelAidSettingsState) -> None: ...

class ViewSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def AlwaysPanParallelViews(self) -> bool: ...
    @property
    def DefinedViewSetCPlane(self) -> bool: ...
    @property
    def DefinedViewSetProjection(self) -> bool: ...
    @property
    def LinkedViewports(self) -> bool: ...
    @property
    def PanReverseKeyboardAction(self) -> bool: ...
    @property
    def PanScreenFraction(self) -> float: ...
    @property
    def RotateCircleIncrement(self) -> int: ...
    @property
    def RotateReverseKeyboard(self) -> bool: ...
    @property
    def RotateToView(self) -> bool: ...
    @property
    def SingleClickMaximize(self) -> bool: ...
    @property
    def ViewRotation(self) -> ViewRotationStyle: ...
    @property
    def ZoomExtentsParallelViewBorder(self) -> float: ...
    @property
    def ZoomExtentsPerspectiveViewBorder(self) -> float: ...
    @property
    def ZoomScale(self) -> float: ...
    @AlwaysPanParallelViews.setter
    def AlwaysPanParallelViews(self, value: System.Void): ...
    @DefinedViewSetCPlane.setter
    def DefinedViewSetCPlane(self, value: System.Void): ...
    @DefinedViewSetProjection.setter
    def DefinedViewSetProjection(self, value: System.Void): ...
    @LinkedViewports.setter
    def LinkedViewports(self, value: System.Void): ...
    @PanReverseKeyboardAction.setter
    def PanReverseKeyboardAction(self, value: System.Void): ...
    @PanScreenFraction.setter
    def PanScreenFraction(self, value: System.Void): ...
    @RotateCircleIncrement.setter
    def RotateCircleIncrement(self, value: System.Void): ...
    @RotateReverseKeyboard.setter
    def RotateReverseKeyboard(self, value: System.Void): ...
    @RotateToView.setter
    def RotateToView(self, value: System.Void): ...
    @SingleClickMaximize.setter
    def SingleClickMaximize(self, value: System.Void): ...
    @ViewRotation.setter
    def ViewRotation(self, value: System.Void): ...
    @ZoomExtentsParallelViewBorder.setter
    def ZoomExtentsParallelViewBorder(self, value: System.Void): ...
    @ZoomExtentsPerspectiveViewBorder.setter
    def ZoomExtentsPerspectiveViewBorder(self, value: System.Void): ...
    @ZoomScale.setter
    def ZoomScale(self, value: System.Void): ...

class ViewSettings(object):
    """Contains static methods and properties to control view settings.

    """
    @property
    def AlwaysPanParallelViews(self) -> bool: ...
    @property
    def AutoAdjustTargetDepth(self) -> bool: ...
    @property
    def DefinedViewSetClippingPlanes(self) -> bool: ...
    @property
    def DefinedViewSetCPlane(self) -> bool: ...
    @property
    def DefinedViewSetDisplayMode(self) -> bool: ...
    @property
    def DefinedViewSetProjection(self) -> bool: ...
    @property
    def LinkedViewports(self) -> bool: ...
    @property
    def PanPlanParallelViewsWithControlShiftRMB(self) -> bool: ...
    @property
    def PanReverseKeyboardAction(self) -> bool: ...
    @property
    def PanScreenFraction(self) -> float: ...
    @property
    def RotateCircleIncrement(self) -> int: ...
    @property
    def RotateReverseKeyboard(self) -> bool: ...
    @property
    def RotateToView(self) -> bool: ...
    @property
    def RotateViewAroundAutogumball(self) -> bool: ...
    @property
    def RotateViewAroundObjectAtMouseCursor(self) -> bool: ...
    @property
    def SingleClickMaximize(self) -> bool: ...
    @property
    def ViewRotation(self) -> ViewRotationStyle: ...
    @property
    def ZoomExtentsParallelViewBorder(self) -> float: ...
    @property
    def ZoomExtentsPerspectiveViewBorder(self) -> float: ...
    @property
    def ZoomScale(self) -> float: ...
    @overload
    @staticmethod
    def GetCurrentState() -> ViewSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> ViewSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @AlwaysPanParallelViews.setter
    def AlwaysPanParallelViews(self, value: System.Void): ...
    @AutoAdjustTargetDepth.setter
    def AutoAdjustTargetDepth(self, value: System.Void): ...
    @DefinedViewSetClippingPlanes.setter
    def DefinedViewSetClippingPlanes(self, value: System.Void): ...
    @DefinedViewSetCPlane.setter
    def DefinedViewSetCPlane(self, value: System.Void): ...
    @DefinedViewSetDisplayMode.setter
    def DefinedViewSetDisplayMode(self, value: System.Void): ...
    @DefinedViewSetProjection.setter
    def DefinedViewSetProjection(self, value: System.Void): ...
    @LinkedViewports.setter
    def LinkedViewports(self, value: System.Void): ...
    @PanPlanParallelViewsWithControlShiftRMB.setter
    def PanPlanParallelViewsWithControlShiftRMB(self, value: System.Void): ...
    @PanReverseKeyboardAction.setter
    def PanReverseKeyboardAction(self, value: System.Void): ...
    @PanScreenFraction.setter
    def PanScreenFraction(self, value: System.Void): ...
    @RotateCircleIncrement.setter
    def RotateCircleIncrement(self, value: System.Void): ...
    @RotateReverseKeyboard.setter
    def RotateReverseKeyboard(self, value: System.Void): ...
    @RotateToView.setter
    def RotateToView(self, value: System.Void): ...
    @RotateViewAroundAutogumball.setter
    def RotateViewAroundAutogumball(self, value: System.Void): ...
    @RotateViewAroundObjectAtMouseCursor.setter
    def RotateViewAroundObjectAtMouseCursor(self, value: System.Void): ...
    @SingleClickMaximize.setter
    def SingleClickMaximize(self, value: System.Void): ...
    @ViewRotation.setter
    def ViewRotation(self, value: System.Void): ...
    @ZoomExtentsParallelViewBorder.setter
    def ZoomExtentsParallelViewBorder(self, value: System.Void): ...
    @ZoomExtentsPerspectiveViewBorder.setter
    def ZoomExtentsPerspectiveViewBorder(self, value: System.Void): ...
    @ZoomScale.setter
    def ZoomScale(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: ViewSettingsState) -> None: ...

class OpenGLSettingsState(object):
    """Represents a snapshot of

    """
    @property
    def AntialiasLevel(self) -> Rhino.AntialiasLevel: ...
    @AntialiasLevel.setter
    def AntialiasLevel(self, value: System.Void): ...

class OpenGLSettings(object):
    """Static methods and properties to control OpenGL settings

    """
    def __init__(self): ...
    @property
    def AntialiasLevel(self) -> Rhino.AntialiasLevel: ...
    @overload
    @staticmethod
    def GetCurrentState() -> OpenGLSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> OpenGLSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @AntialiasLevel.setter
    def AntialiasLevel(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: OpenGLSettingsState) -> None: ...

class ShortcutKey(enum.Enum):
    F1 = 0
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 4
    F6 = 5
    F7 = 6
    F8 = 7
    F9 = 8
    F10 = 9
    F11 = 10
    F12 = 11
    CtrlF1 = 12
    CtrlF2 = 13
    CtrlF3 = 14
    CtrlF4 = 15
    CtrlF5 = 16
    CtrlF6 = 17
    CtrlF7 = 18
    CtrlF8 = 19
    CtrlF9 = 20
    CtrlF10 = 21
    CtrlF11 = 22
    CtrlF12 = 23
    ShiftCtrlF1 = 24
    ShiftCtrlF2 = 25
    ShiftCtrlF3 = 26
    ShiftCtrlF4 = 27
    ShiftCtrlF5 = 28
    ShiftCtrlF6 = 29
    ShiftCtrlF7 = 30
    ShiftCtrlF8 = 31
    ShiftCtrlF9 = 32
    ShiftCtrlF10 = 33
    ShiftCtrlF11 = 34
    ShiftCtrlF12 = 35
    AltCtrlF1 = 36
    AltCtrlF2 = 37
    AltCtrlF3 = 38
    AltCtrlF4 = 39
    AltCtrlF5 = 40
    AltCtrlF6 = 41
    AltCtrlF7 = 42
    AltCtrlF8 = 43
    AltCtrlF9 = 44
    AltCtrlF10 = 45
    AltCtrlF11 = 46
    AltCtrlF12 = 47
    CtrlA = 48
    CtrlB = 49
    CtrlC = 50
    CtrlD = 51
    CtrlE = 52
    CtrlF = 53
    CtrlG = 54
    CtrlH = 55
    CtrlI = 56
    CtrlJ = 57
    CtrlK = 58
    CtrlL = 59
    CtrlM = 60
    CtrlN = 61
    CtrlO = 62
    CtrlP = 63
    CtrlQ = 64
    CtrlR = 65
    CtrlS = 66
    CtrlT = 67
    CtrlU = 68
    CtrlV = 69
    CtrlW = 70
    CtrlX = 71
    CtrlY = 72
    CtrlZ = 73
    ShiftCtrlA = 74
    ShiftCtrlB = 75
    ShiftCtrlC = 76
    ShiftCtrlD = 77
    ShiftCtrlE = 78
    ShiftCtrlF = 79
    ShiftCtrlG = 80
    ShiftCtrlH = 81
    ShiftCtrlI = 82
    ShiftCtrlJ = 83
    ShiftCtrlK = 84
    ShiftCtrlL = 85
    ShiftCtrlM = 86
    ShiftCtrlN = 87
    ShiftCtrlO = 88
    ShiftCtrlP = 89
    ShiftCtrlQ = 90
    ShiftCtrlR = 91
    ShiftCtrlS = 92
    ShiftCtrlT = 93
    ShiftCtrlU = 94
    ShiftCtrlV = 95
    ShiftCtrlW = 96
    ShiftCtrlX = 97
    ShiftCtrlY = 98
    ShiftCtrlZ = 99
    AltCtrlA = 100
    AltCtrlB = 101
    AltCtrlC = 102
    AltCtrlD = 103
    AltCtrlE = 104
    AltCtrlF = 105
    AltCtrlG = 106
    AltCtrlH = 107
    AltCtrlI = 108
    AltCtrlJ = 109
    AltCtrlK = 110
    AltCtrlL = 111
    AltCtrlM = 112
    AltCtrlN = 113
    AltCtrlO = 114
    AltCtrlP = 115
    AltCtrlQ = 116
    AltCtrlR = 117
    AltCtrlS = 118
    AltCtrlT = 119
    AltCtrlU = 120
    AltCtrlV = 121
    AltCtrlW = 122
    AltCtrlX = 123
    AltCtrlY = 124
    AltCtrlZ = 125
    Ctrl0 = 126
    Ctrl1 = 127
    Ctrl2 = 128
    Ctrl3 = 129
    Ctrl4 = 130
    Ctrl5 = 131
    Ctrl6 = 132
    Ctrl7 = 133
    Ctrl8 = 134
    Ctrl9 = 135
    ShiftCtrl0 = 136
    ShiftCtrl1 = 137
    ShiftCtrl2 = 138
    ShiftCtrl3 = 139
    ShiftCtrl4 = 140
    ShiftCtrl5 = 141
    ShiftCtrl6 = 142
    ShiftCtrl7 = 143
    ShiftCtrl8 = 144
    ShiftCtrl9 = 145
    AltCtrl0 = 146
    AltCtrl1 = 147
    AltCtrl2 = 148
    AltCtrl3 = 149
    AltCtrl4 = 150
    AltCtrl5 = 151
    AltCtrl6 = 152
    AltCtrl7 = 153
    AltCtrl8 = 154
    AltCtrl9 = 155
    Home = 156
    End = 157
    CtrlHome = 158
    CtrlEnd = 159
    ShiftHome = 160
    ShiftEnd = 161
    ShiftCtrlHome = 162
    ShiftCtrlEnd = 163
    AltCtrlHome = 164
    AltCtrlEnd = 165
    Tab = 166
    PageUp = 167
    PageDown = 168
    ShiftPageUp = 169
    ShiftPageDown = 170
    CtrlPageUp = 171
    CtrlPageDown = 172
    ShiftCtrlPageUp = 173
    ShiftCtrlPageDown = 174
    AltCtrlPageUp = 175
    AltCtrlPageDown = 176
    None_ = 177
    AltHome = 178
    AltEnd = 179
    AltA = 180
    AltB = 181
    AltC = 182
    AltD = 183
    AltE = 184
    AltF = 185
    AltG = 186
    AltH = 187
    AltI = 188
    AltJ = 189
    AltK = 190
    AltL = 191
    AltM = 192
    AltN = 193
    AltO = 194
    AltP = 195
    AltQ = 196
    AltR = 197
    AltS = 198
    AltT = 199
    AltU = 200
    AltV = 201
    AltW = 202
    AltX = 203
    AltY = 204
    AltZ = 205
    Alt0 = 206
    Alt1 = 207
    Alt2 = 208
    Alt3 = 209
    Alt4 = 210
    Alt5 = 211
    Alt6 = 212
    Alt7 = 213
    Alt8 = 214
    Alt9 = 215
    AltF1 = 216
    AltF2 = 217
    AltF3 = 218
    AltF4 = 219
    AltF5 = 220
    AltF6 = 221
    AltF7 = 222
    AltF8 = 223
    AltF9 = 224
    AltF10 = 225
    AltF11 = 226
    AltF12 = 227
    AltShiftHome = 228
    AltShiftEnd = 229
    AltShiftA = 230
    AltShiftB = 231
    AltShiftC = 232
    AltShiftD = 233
    AltShiftE = 234
    AltShiftF = 235
    AltShiftG = 236
    AltShiftH = 237
    AltShiftI = 238
    AltShiftJ = 239
    AltShiftK = 240
    AltShiftL = 241
    AltShiftM = 242
    AltShiftN = 243
    AltShiftO = 244
    AltShiftP = 245
    AltShiftQ = 246
    AltShiftR = 247
    AltShiftS = 248
    AltShiftT = 249
    AltShiftU = 250
    AltShiftV = 251
    AltShiftW = 252
    AltShiftX = 253
    AltShiftY = 254
    AltShiftZ = 255
    AltShift0 = 256
    AltShift1 = 257
    AltShift2 = 258
    AltShift3 = 259
    AltShift4 = 260
    AltShift5 = 261
    AltShift6 = 262
    AltShift7 = 263
    AltShift8 = 264
    AltShift9 = 265
    AltShiftF1 = 266
    AltShiftF2 = 267
    AltShiftF3 = 268
    AltShiftF4 = 269
    AltShiftF5 = 270
    AltShiftF6 = 271
    AltShiftF7 = 272
    AltShiftF8 = 273
    AltShiftF9 = 274
    AltShiftF10 = 275
    AltShiftF11 = 276
    AltShiftF12 = 277
    MacControlHome = 278
    MacControlEnd = 279
    MacControlA = 280
    MacControlB = 281
    MacControlC = 282
    MacControlD = 283
    MacControlE = 284
    MacControlF = 285
    MacControlG = 286
    MacControlH = 287
    MacControlI = 288
    MacControlJ = 289
    MacControlK = 290
    MacControlL = 291
    MacControlM = 292
    MacControlN = 293
    MacControlO = 294
    MacControlP = 295
    MacControlQ = 296
    MacControlR = 297
    MacControlS = 298
    MacControlT = 299
    MacControlU = 300
    MacControlV = 301
    MacControlW = 302
    MacControlX = 303
    MacControlY = 304
    MacControlZ = 305
    MacControl0 = 306
    MacControl1 = 307
    MacControl2 = 308
    MacControl3 = 309
    MacControl4 = 310
    MacControl5 = 311
    MacControl6 = 312
    MacControl7 = 313
    MacControl8 = 314
    MacControl9 = 315
    MacControlF1 = 316
    MacControlF2 = 317
    MacControlF3 = 318
    MacControlF4 = 319
    MacControlF5 = 320
    MacControlF6 = 321
    MacControlF7 = 322
    MacControlF8 = 323
    MacControlF9 = 324
    MacControlF10 = 325
    MacControlF11 = 326
    MacControlF12 = 327
    MacControlAltHome = 328
    MacControlAltEnd = 329
    MacControlAltA = 330
    MacControlAltB = 331
    MacControlAltC = 332
    MacControlAltD = 333
    MacControlAltE = 334
    MacControlAltF = 335
    MacControlAltG = 336
    MacControlAltH = 337
    MacControlAltI = 338
    MacControlAltJ = 339
    MacControlAltK = 340
    MacControlAltL = 341
    MacControlAltM = 342
    MacControlAltN = 343
    MacControlAltO = 344
    MacControlAltP = 345
    MacControlAltQ = 346
    MacControlAltR = 347
    MacControlAltS = 348
    MacControlAltT = 349
    MacControlAltU = 350
    MacControlAltV = 351
    MacControlAltW = 352
    MacControlAltX = 353
    MacControlAltY = 354
    MacControlAltZ = 355
    MacControlAlt0 = 356
    MacControlAlt1 = 357
    MacControlAlt2 = 358
    MacControlAlt3 = 359
    MacControlAlt4 = 360
    MacControlAlt5 = 361
    MacControlAlt6 = 362
    MacControlAlt7 = 363
    MacControlAlt8 = 364
    MacControlAlt9 = 365
    MacControlAltF1 = 366
    MacControlAltF2 = 367
    MacControlAltF3 = 368
    MacControlAltF4 = 369
    MacControlAltF5 = 370
    MacControlAltF6 = 371
    MacControlAltF7 = 372
    MacControlAltF8 = 373
    MacControlAltF9 = 374
    MacControlAltF10 = 375
    MacControlAltF11 = 376
    MacControlAltF12 = 377
    MacControlOptionHome = 378
    MacControlOptionEnd = 379
    MacControlOptionA = 380
    MacControlOptionB = 381
    MacControlOptionC = 382
    MacControlOptionD = 383
    MacControlOptionE = 384
    MacControlOptionF = 385
    MacControlOptionG = 386
    MacControlOptionH = 387
    MacControlOptionI = 388
    MacControlOptionJ = 389
    MacControlOptionK = 390
    MacControlOptionL = 391
    MacControlOptionM = 392
    MacControlOptionN = 393
    MacControlOptionO = 394
    MacControlOptionP = 395
    MacControlOptionQ = 396
    MacControlOptionR = 397
    MacControlOptionS = 398
    MacControlOptionT = 399
    MacControlOptionU = 400
    MacControlOptionV = 401
    MacControlOptionW = 402
    MacControlOptionX = 403
    MacControlOptionY = 404
    MacControlOptionZ = 405
    MacControlOption0 = 406
    MacControlOption1 = 407
    MacControlOption2 = 408
    MacControlOption3 = 409
    MacControlOption4 = 410
    MacControlOption5 = 411
    MacControlOption6 = 412
    MacControlOption7 = 413
    MacControlOption8 = 414
    MacControlOption9 = 415
    MacControlOptionF1 = 416
    MacControlOptionF2 = 417
    MacControlOptionF3 = 418
    MacControlOptionF4 = 419
    MacControlOptionF5 = 420
    MacControlOptionF6 = 421
    MacControlOptionF7 = 422
    MacControlOptionF8 = 423
    MacControlOptionF9 = 424
    MacControlOptionF10 = 425
    MacControlOptionF11 = 426
    MacControlOptionF12 = 427
    MacControlShiftHome = 428
    MacControlShiftEnd = 429
    MacControlShiftA = 430
    MacControlShiftB = 431
    MacControlShiftC = 432
    MacControlShiftD = 433
    MacControlShiftE = 434
    MacControlShiftF = 435
    MacControlShiftG = 436
    MacControlShiftH = 437
    MacControlShiftI = 438
    MacControlShiftJ = 439
    MacControlShiftK = 440
    MacControlShiftL = 441
    MacControlShiftM = 442
    MacControlShiftN = 443
    MacControlShiftO = 444
    MacControlShiftP = 445
    MacControlShiftQ = 446
    MacControlShiftR = 447
    MacControlShiftS = 448
    MacControlShiftT = 449
    MacControlShiftU = 450
    MacControlShiftV = 451
    MacControlShiftW = 452
    MacControlShiftX = 453
    MacControlShiftY = 454
    MacControlShiftZ = 455
    MacControlShift0 = 456
    MacControlShift1 = 457
    MacControlShift2 = 458
    MacControlShift3 = 459
    MacControlShift4 = 460
    MacControlShift5 = 461
    MacControlShift6 = 462
    MacControlShift7 = 463
    MacControlShift8 = 464
    MacControlShift9 = 465
    MacControlShiftF1 = 466
    MacControlShiftF2 = 467
    MacControlShiftF3 = 468
    MacControlShiftF4 = 469
    MacControlShiftF5 = 470
    MacControlShiftF6 = 471
    MacControlShiftF7 = 472
    MacControlShiftF8 = 473
    MacControlShiftF9 = 474
    MacControlShiftF10 = 475
    MacControlShiftF11 = 476
    MacControlShiftF12 = 477

class KeyboardShortcut(object):
    """A shortcut is a key plus modifier combination that executes a macro

    """
    def __init__(self): ...
    @property
    def Key(self) -> UI.KeyboardKey: ...
    @property
    def Macro(self) -> str: ...
    @property
    def Modifier(self) -> UI.ModifierKey: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @Macro.setter
    def Macro(self, value: System.Void): ...
    @Modifier.setter
    def Modifier(self, value: System.Void): ...

class ShortcutKeySettings(object):
    """Contains static methods and properties to control keyboard shortcut keys

    """
    @overload
    @staticmethod
    def GetDefaults() -> System.Array[KeyboardShortcut]: ...
    @overload
    @staticmethod
    def GetLabel(key: ShortcutKey) -> str: ...
    @overload
    @staticmethod
    def GetMacro(key: ShortcutKey) -> str: ...
    @overload
    @staticmethod
    def GetShortcuts() -> System.Array[KeyboardShortcut]: ...
    @overload
    @staticmethod
    def IsAcceptableKeyCombo(key: UI.KeyboardKey, modifier: UI.ModifierKey) -> bool: ...
    @overload
    @staticmethod
    def SetMacro(key: ShortcutKey, macro: str) -> None: ...
    @overload
    @staticmethod
    def SetMacro(key: UI.KeyboardKey, modifier: UI.ModifierKey, macro: str) -> None: ...
    @overload
    @staticmethod
    def Update(shortcuts: Generic.IEnumerable, replaceAll: bool) -> None: ...

class SmartTrackSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def ActivationDelayMilliseconds(self) -> int: ...
    @property
    def ActivePointColor(self) -> Drawing.Color: ...
    @property
    def LineColor(self) -> Drawing.Color: ...
    @property
    def MaxSmartPoints(self) -> int: ...
    @property
    def PointColor(self) -> Drawing.Color: ...
    @property
    def SmartOrtho(self) -> bool: ...
    @property
    def SmartTangents(self) -> bool: ...
    @property
    def TanPerpLineColor(self) -> Drawing.Color: ...
    @property
    def UseDottedLines(self) -> bool: ...
    @property
    def UseSmartTrack(self) -> bool: ...
    @ActivationDelayMilliseconds.setter
    def ActivationDelayMilliseconds(self, value: System.Void): ...
    @ActivePointColor.setter
    def ActivePointColor(self, value: System.Void): ...
    @LineColor.setter
    def LineColor(self, value: System.Void): ...
    @MaxSmartPoints.setter
    def MaxSmartPoints(self, value: System.Void): ...
    @PointColor.setter
    def PointColor(self, value: System.Void): ...
    @SmartOrtho.setter
    def SmartOrtho(self, value: System.Void): ...
    @SmartTangents.setter
    def SmartTangents(self, value: System.Void): ...
    @TanPerpLineColor.setter
    def TanPerpLineColor(self, value: System.Void): ...
    @UseDottedLines.setter
    def UseDottedLines(self, value: System.Void): ...
    @UseSmartTrack.setter
    def UseSmartTrack(self, value: System.Void): ...

class SmartTrackSettings(object):
    """Contains static methods and properties that target the Smart Track feature behavior.

    """
    @property
    def ActivationDelayMilliseconds(self) -> int: ...
    @property
    def ActivePointColor(self) -> Drawing.Color: ...
    @property
    def LineColor(self) -> Drawing.Color: ...
    @property
    def MaxSmartPoints(self) -> int: ...
    @property
    def PointColor(self) -> Drawing.Color: ...
    @property
    def SmartOrtho(self) -> bool: ...
    @property
    def SmartTangents(self) -> bool: ...
    @property
    def TanPerpLineColor(self) -> Drawing.Color: ...
    @property
    def UseDottedLines(self) -> bool: ...
    @property
    def UseSmartTrack(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> SmartTrackSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> SmartTrackSettingsState: ...
    @ActivationDelayMilliseconds.setter
    def ActivationDelayMilliseconds(self, value: System.Void): ...
    @ActivePointColor.setter
    def ActivePointColor(self, value: System.Void): ...
    @LineColor.setter
    def LineColor(self, value: System.Void): ...
    @MaxSmartPoints.setter
    def MaxSmartPoints(self, value: System.Void): ...
    @PointColor.setter
    def PointColor(self, value: System.Void): ...
    @SmartOrtho.setter
    def SmartOrtho(self, value: System.Void): ...
    @SmartTangents.setter
    def SmartTangents(self, value: System.Void): ...
    @TanPerpLineColor.setter
    def TanPerpLineColor(self, value: System.Void): ...
    @UseDottedLines.setter
    def UseDottedLines(self, value: System.Void): ...
    @UseSmartTrack.setter
    def UseSmartTrack(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: SmartTrackSettingsState) -> None: ...

class CursorTooltipSettingsState(object):
    """Represents a snapshot of
.

    """
    def __init__(self): ...
    @property
    def AutoSuppress(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptPane(self) -> bool: ...
    @property
    def DistancePane(self) -> bool: ...
    @property
    def EnableGumballToolTips(self) -> bool: ...
    @property
    def Offset(self) -> Drawing.Point: ...
    @property
    def OsnapPane(self) -> bool: ...
    @property
    def PointPane(self) -> bool: ...
    @property
    def RelativePointPane(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def TooltipsEnabled(self) -> bool: ...
    @AutoSuppress.setter
    def AutoSuppress(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @CommandPromptPane.setter
    def CommandPromptPane(self, value: System.Void): ...
    @DistancePane.setter
    def DistancePane(self, value: System.Void): ...
    @EnableGumballToolTips.setter
    def EnableGumballToolTips(self, value: System.Void): ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @OsnapPane.setter
    def OsnapPane(self, value: System.Void): ...
    @PointPane.setter
    def PointPane(self, value: System.Void): ...
    @RelativePointPane.setter
    def RelativePointPane(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @TooltipsEnabled.setter
    def TooltipsEnabled(self, value: System.Void): ...

class CursorTooltipSettings(object):
    """Cursor tooltips place information at the cursor location. Note: Turning on cursor tooltips turns off object snap cursors.

    """
    @property
    def AutoSuppress(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def CommandPromptPane(self) -> bool: ...
    @property
    def DistancePane(self) -> bool: ...
    @property
    def EnableGumballToolTips(self) -> bool: ...
    @property
    def Offset(self) -> Drawing.Point: ...
    @property
    def OsnapPane(self) -> bool: ...
    @property
    def PointPane(self) -> bool: ...
    @property
    def RelativePointPane(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def TooltipsEnabled(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> CursorTooltipSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> CursorTooltipSettingsState: ...
    @AutoSuppress.setter
    def AutoSuppress(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @CommandPromptPane.setter
    def CommandPromptPane(self, value: System.Void): ...
    @DistancePane.setter
    def DistancePane(self, value: System.Void): ...
    @EnableGumballToolTips.setter
    def EnableGumballToolTips(self, value: System.Void): ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @OsnapPane.setter
    def OsnapPane(self, value: System.Void): ...
    @PointPane.setter
    def PointPane(self, value: System.Void): ...
    @RelativePointPane.setter
    def RelativePointPane(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @TooltipsEnabled.setter
    def TooltipsEnabled(self, value: System.Void): ...

class ZebraAnalysisSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def StripeColor(self) -> Drawing.Color: ...
    @property
    def StripeThickness(self) -> int: ...
    @property
    def VerticalStripes(self) -> bool: ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: System.Void): ...
    @StripeColor.setter
    def StripeColor(self, value: System.Void): ...
    @StripeThickness.setter
    def StripeThickness(self, value: System.Void): ...
    @VerticalStripes.setter
    def VerticalStripes(self, value: System.Void): ...

class ZebraAnalysisSettings(object):
    """Contains static methods and properties to modify Zebra analysis-related commands.

    """
    @property
    def ShowIsoCurves(self) -> bool: ...
    @property
    def StripeColor(self) -> Drawing.Color: ...
    @property
    def StripeThickness(self) -> int: ...
    @property
    def VerticalStripes(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> ZebraAnalysisSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> ZebraAnalysisSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: System.Void): ...
    @StripeColor.setter
    def StripeColor(self, value: System.Void): ...
    @StripeThickness.setter
    def StripeThickness(self, value: System.Void): ...
    @VerticalStripes.setter
    def VerticalStripes(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: ZebraAnalysisSettingsState) -> None: ...

class CurvatureGraphSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def CurveHairColor(self) -> Drawing.Color: ...
    @property
    def HairDensity(self) -> int: ...
    @property
    def HairScale(self) -> int: ...
    @property
    def SampleDensity(self) -> int: ...
    @property
    def SrfUHair(self) -> bool: ...
    @property
    def SrfVHair(self) -> bool: ...
    @property
    def SurfaceUHairColor(self) -> Drawing.Color: ...
    @property
    def SurfaceVHairColor(self) -> Drawing.Color: ...
    @CurveHairColor.setter
    def CurveHairColor(self, value: System.Void): ...
    @HairDensity.setter
    def HairDensity(self, value: System.Void): ...
    @HairScale.setter
    def HairScale(self, value: System.Void): ...
    @SampleDensity.setter
    def SampleDensity(self, value: System.Void): ...
    @SrfUHair.setter
    def SrfUHair(self, value: System.Void): ...
    @SrfVHair.setter
    def SrfVHair(self, value: System.Void): ...
    @SurfaceUHairColor.setter
    def SurfaceUHairColor(self, value: System.Void): ...
    @SurfaceVHairColor.setter
    def SurfaceVHairColor(self, value: System.Void): ...

class CurvatureGraphSettings(object):
    """Contains static methods and properties to modify curvature graph commands.

    """
    @property
    def CurveHairColor(self) -> Drawing.Color: ...
    @property
    def HairDensity(self) -> int: ...
    @property
    def HairScale(self) -> int: ...
    @property
    def SampleDensity(self) -> int: ...
    @property
    def SrfUHair(self) -> bool: ...
    @property
    def SrfVHair(self) -> bool: ...
    @property
    def SurfaceUHairColor(self) -> Drawing.Color: ...
    @property
    def SurfaceVHairColor(self) -> Drawing.Color: ...
    @overload
    @staticmethod
    def GetCurrentState() -> CurvatureGraphSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> CurvatureGraphSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @CurveHairColor.setter
    def CurveHairColor(self, value: System.Void): ...
    @HairDensity.setter
    def HairDensity(self, value: System.Void): ...
    @HairScale.setter
    def HairScale(self, value: System.Void): ...
    @SampleDensity.setter
    def SampleDensity(self, value: System.Void): ...
    @SrfUHair.setter
    def SrfUHair(self, value: System.Void): ...
    @SrfVHair.setter
    def SrfVHair(self, value: System.Void): ...
    @SurfaceUHairColor.setter
    def SurfaceUHairColor(self, value: System.Void): ...
    @SurfaceVHairColor.setter
    def SurfaceVHairColor(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: CurvatureGraphSettingsState) -> None: ...

class CurvatureAnalysisSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def GaussRange(self) -> Geometry.Interval: ...
    @property
    def MaxRadiusRange(self) -> Geometry.Interval: ...
    @property
    def MeanRange(self) -> Geometry.Interval: ...
    @property
    def MinRadiusRange(self) -> Geometry.Interval: ...
    @property
    def Style(self) -> CurvatureStyle: ...
    @GaussRange.setter
    def GaussRange(self, value: System.Void): ...
    @MaxRadiusRange.setter
    def MaxRadiusRange(self, value: System.Void): ...
    @MeanRange.setter
    def MeanRange(self, value: System.Void): ...
    @MinRadiusRange.setter
    def MinRadiusRange(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...

class CurvatureAnalysisSettings(object):
    """Contains static methods and properties to modify curvature analysis-related commands.

    """
    @overload
    @staticmethod
    def CalculateCurvatureAutoRange(meshes: Generic.IEnumerable) -> (bool, CurvatureAnalysisSettingsState): ...
    @property
    def GaussRange(self) -> Geometry.Interval: ...
    @property
    def MaxRadiusRange(self) -> Geometry.Interval: ...
    @property
    def MeanRange(self) -> Geometry.Interval: ...
    @property
    def MinRadiusRange(self) -> Geometry.Interval: ...
    @property
    def Style(self) -> CurvatureStyle: ...
    @overload
    @staticmethod
    def GetCurrentState() -> CurvatureAnalysisSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> CurvatureAnalysisSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @GaussRange.setter
    def GaussRange(self, value: System.Void): ...
    @MaxRadiusRange.setter
    def MaxRadiusRange(self, value: System.Void): ...
    @MeanRange.setter
    def MeanRange(self, value: System.Void): ...
    @MinRadiusRange.setter
    def MinRadiusRange(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: CurvatureAnalysisSettingsState) -> None: ...

class SelectionFilterSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def GlobalGeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def OneShotGeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def SubObjectSelect(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @GlobalGeometryFilter.setter
    def GlobalGeometryFilter(self, value: System.Void): ...
    @OneShotGeometryFilter.setter
    def OneShotGeometryFilter(self, value: System.Void): ...
    @SubObjectSelect.setter
    def SubObjectSelect(self, value: System.Void): ...

class SelectionFilterSettings(object):
    """Selection filter settings restrict any selection mode (SelWindow, SelCrossing, SelAll, etc.) to specified object types. Note, selection filter settings are not persistent.

    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def GlobalGeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def OneShotGeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def SubObjectSelect(self) -> bool: ...
    @overload
    @staticmethod
    def GetCurrentState() -> SelectionFilterSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> SelectionFilterSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @GlobalGeometryFilter.setter
    def GlobalGeometryFilter(self, value: System.Void): ...
    @OneShotGeometryFilter.setter
    def OneShotGeometryFilter(self, value: System.Void): ...
    @SubObjectSelect.setter
    def SubObjectSelect(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: SelectionFilterSettingsState) -> None: ...

class PackageManagerSettings(object):
    """Settings specific to Rhino's package manager

    """
    @property
    def Sources(self) -> str: ...
    @Sources.setter
    def Sources(self, value: System.Void): ...

class ChooseOneObjectSettingsState(object):
    """Represents a snapshot of
.

    """
    @property
    def AutomaticResize(self) -> bool: ...
    @property
    def DynamicHighlight(self) -> bool: ...
    @property
    def FollowCursor(self) -> bool: ...
    @property
    def HighlightColor(self) -> Drawing.Color: ...
    @property
    def MaxAutoResizeItems(self) -> int: ...
    @property
    def ShowAllOption(self) -> bool: ...
    @property
    def ShowObjectColor(self) -> bool: ...
    @property
    def ShowObjectLayer(self) -> bool: ...
    @property
    def ShowObjectName(self) -> bool: ...
    @property
    def ShowObjectType(self) -> bool: ...
    @property
    def ShowObjectTypeDetails(self) -> bool: ...
    @property
    def ShowTitlebarAndBorder(self) -> bool: ...
    @property
    def UseCustomColor(self) -> bool: ...
    @property
    def XOffset(self) -> int: ...
    @property
    def YOffset(self) -> int: ...
    @AutomaticResize.setter
    def AutomaticResize(self, value: System.Void): ...
    @DynamicHighlight.setter
    def DynamicHighlight(self, value: System.Void): ...
    @FollowCursor.setter
    def FollowCursor(self, value: System.Void): ...
    @HighlightColor.setter
    def HighlightColor(self, value: System.Void): ...
    @MaxAutoResizeItems.setter
    def MaxAutoResizeItems(self, value: System.Void): ...
    @ShowAllOption.setter
    def ShowAllOption(self, value: System.Void): ...
    @ShowObjectColor.setter
    def ShowObjectColor(self, value: System.Void): ...
    @ShowObjectLayer.setter
    def ShowObjectLayer(self, value: System.Void): ...
    @ShowObjectName.setter
    def ShowObjectName(self, value: System.Void): ...
    @ShowObjectType.setter
    def ShowObjectType(self, value: System.Void): ...
    @ShowObjectTypeDetails.setter
    def ShowObjectTypeDetails(self, value: System.Void): ...
    @ShowTitlebarAndBorder.setter
    def ShowTitlebarAndBorder(self, value: System.Void): ...
    @UseCustomColor.setter
    def UseCustomColor(self, value: System.Void): ...
    @XOffset.setter
    def XOffset(self, value: System.Void): ...
    @YOffset.setter
    def YOffset(self, value: System.Void): ...

class ChooseOneObjectSettings(object):
    """Contains static methods and properties to modify "choose one object" settings.

    """
    @property
    def AutomaticResize(self) -> bool: ...
    @property
    def DynamicHighlight(self) -> bool: ...
    @property
    def FollowCursor(self) -> bool: ...
    @property
    def HighlightColor(self) -> Drawing.Color: ...
    @property
    def MaxAutoResizeItems(self) -> int: ...
    @property
    def ShowAllOption(self) -> bool: ...
    @property
    def ShowObjectColor(self) -> bool: ...
    @property
    def ShowObjectLayer(self) -> bool: ...
    @property
    def ShowObjectName(self) -> bool: ...
    @property
    def ShowObjectType(self) -> bool: ...
    @property
    def ShowObjectTypeDetails(self) -> bool: ...
    @property
    def ShowTitlebarAndBorder(self) -> bool: ...
    @property
    def UseCustomColor(self) -> bool: ...
    @property
    def XOffset(self) -> int: ...
    @property
    def YOffset(self) -> int: ...
    @overload
    @staticmethod
    def GetCurrentState() -> ChooseOneObjectSettingsState: ...
    @overload
    @staticmethod
    def GetDefaultState() -> ChooseOneObjectSettingsState: ...
    @overload
    @staticmethod
    def RestoreDefaults() -> None: ...
    @AutomaticResize.setter
    def AutomaticResize(self, value: System.Void): ...
    @DynamicHighlight.setter
    def DynamicHighlight(self, value: System.Void): ...
    @FollowCursor.setter
    def FollowCursor(self, value: System.Void): ...
    @HighlightColor.setter
    def HighlightColor(self, value: System.Void): ...
    @MaxAutoResizeItems.setter
    def MaxAutoResizeItems(self, value: System.Void): ...
    @ShowAllOption.setter
    def ShowAllOption(self, value: System.Void): ...
    @ShowObjectColor.setter
    def ShowObjectColor(self, value: System.Void): ...
    @ShowObjectLayer.setter
    def ShowObjectLayer(self, value: System.Void): ...
    @ShowObjectName.setter
    def ShowObjectName(self, value: System.Void): ...
    @ShowObjectType.setter
    def ShowObjectType(self, value: System.Void): ...
    @ShowObjectTypeDetails.setter
    def ShowObjectTypeDetails(self, value: System.Void): ...
    @ShowTitlebarAndBorder.setter
    def ShowTitlebarAndBorder(self, value: System.Void): ...
    @UseCustomColor.setter
    def UseCustomColor(self, value: System.Void): ...
    @XOffset.setter
    def XOffset(self, value: System.Void): ...
    @YOffset.setter
    def YOffset(self, value: System.Void): ...
    @overload
    @staticmethod
    def UpdateFromState(state: ChooseOneObjectSettingsState) -> None: ...

class HistorySettings(object):
    """Provides static (Shared in Vb.Net) properties to modify Rhino History settings.

    """
    @property
    def BrokenRecordWarningEnabled(self) -> bool: ...
    @property
    def ObjectLockingEnabled(self) -> bool: ...
    @property
    def RecordingEnabled(self) -> bool: ...
    @property
    def RecordNextCommand(self) -> bool: ...
    @property
    def UpdateEnabled(self) -> bool: ...
    @BrokenRecordWarningEnabled.setter
    def BrokenRecordWarningEnabled(self, value: System.Void): ...
    @ObjectLockingEnabled.setter
    def ObjectLockingEnabled(self, value: System.Void): ...
    @RecordingEnabled.setter
    def RecordingEnabled(self, value: System.Void): ...
    @RecordNextCommand.setter
    def RecordNextCommand(self, value: System.Void): ...
    @UpdateEnabled.setter
    def UpdateEnabled(self, value: System.Void): ...

class LicenseNode(enum.Enum):
    Standalone = 0
    Network = 1
    NetworkCheckedOut = 2

class Installation(enum.Enum):
    Undefined = 0
    Commercial = 1
    Educational = 2
    EducationalLab = 3
    NotForResale = 4
    NotForResaleLab = 5
    Beta = 6
    BetaLab = 7
    Evaluation = 8
    Corporate = 9
    EvaluationTimed = 10

class ViewRotationStyle(enum.Enum):
    RotateAroundWorldAxes = 0
    RotateRelativeToView = 1
    RotateRelativeToViewV2Style = 2
    RotateAroundCplaneZaxis = 3

class CurvatureStyle(enum.Enum):
    Gaussian = 0
    Mean = 1
    MinRadius = 2
    MaxRadius = 3

# endregion
