"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Style", "RunMode", "CommandStyleAttribute", "Result", "MostRecentCommandDescription", "Command", "CommandEventArgs", "UndoRedoEventArgs", "SelCommand", "TransformCommand", "CustomUndoEventArgs", "RunCommandDelegate"]
# endregion

# region: Imports
from Rhino import PlugIns
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Style(enum.Enum):
    None_ = 0
    Hidden = 1
    ScriptRunner = 2
    Transparent = 4
    DoNotRepeat = 8
    NotUndoable = 16

class RunMode(enum.Enum):
    Interactive = 0
    Scripted = 1

class CommandStyleAttribute(System.Attribute):
    """Decorates
commands
to provide styles.

    """
    def __init__(self, styles: Style): ...
    @property
    def Styles(self) -> Style: ...

class Result(enum.Enum):
    Success = 0
    Cancel = 1
    Nothing = 2
    Failure = 3
    UnknownCommand = 4
    CancelModelessDialog = 5
    ExitRhino = 268435455

class MostRecentCommandDescription(object):
    """Stores the macro and display string of the most recent command.

    """
    def __init__(self): ...
    @property
    def DisplayString(self) -> str: ...
    @property
    def Macro(self) -> str: ...
    @DisplayString.setter
    def DisplayString(self, value: System.Void): ...
    @Macro.setter
    def Macro(self, value: System.Void): ...

class Command(object):
    """Defines a base class for all commands. This class is abstract.

    """
    @overload
    @staticmethod
    def DisplayHelp(commandId: System.Guid) -> None: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def LastCommandId(self) -> System.Guid: ...
    @property
    def LastCommandResult(self) -> Result: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def PlugIn(self) -> PlugIns.PlugIn: ...
    @property
    def Settings(self) -> Rhino.PersistentSettings: ...
    @overload
    @staticmethod
    def GetCommandContextHelpUrl(commandId: System.Guid) -> str: ...
    @overload
    @staticmethod
    def GetCommandNames(english: bool, loaded: bool) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetCommandStack() -> System.System.Array[System.Guid]: ...
    @overload
    @staticmethod
    def GetMostRecentCommands() -> System.Array[MostRecentCommandDescription]: ...
    @overload
    @staticmethod
    def InCommand() -> bool: ...
    @overload
    @staticmethod
    def InScriptRunnerCommand() -> bool: ...
    @overload
    @staticmethod
    def IsCommand(name: str) -> bool: ...
    @overload
    @staticmethod
    def IsValidCommandName(name: str) -> bool: ...
    @overload
    @staticmethod
    def LookupCommandId(name: str, searchForEnglishName: bool) -> System.Guid: ...
    @overload
    @staticmethod
    def LookupCommandName(commandId: System.Guid, englishName: bool) -> str: ...
    @overload
    @staticmethod
    def RunProxyCommand(commandCallback: RunCommandDelegate, doc: Rhino.RhinoDoc, data: object) -> None: ...
    @property
    def BeginCommand(self): ...
    @property
    def EndCommand(self): ...
    @property
    def UndoRedo(self): ...

class CommandEventArgs(System.EventArgs):
    """    """
    @property
    def CommandEnglishName(self) -> str: ...
    @property
    def CommandHelpURL(self) -> str: ...
    @property
    def CommandId(self) -> System.Guid: ...
    @property
    def CommandLocalName(self) -> str: ...
    @property
    def CommandPluginName(self) -> str: ...
    @property
    def CommandResult(self) -> Result: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentRuntimeSerialNumber(self) -> System.UInt32: ...

class UndoRedoEventArgs(System.EventArgs):
    """    """
    @property
    def CommandId(self) -> System.Guid: ...
    @property
    def IsBeforeBeginRecording(self) -> bool: ...
    @property
    def IsBeforeEndRecording(self) -> bool: ...
    @property
    def IsBeginRecording(self) -> bool: ...
    @property
    def IsBeginRedo(self) -> bool: ...
    @property
    def IsBeginUndo(self) -> bool: ...
    @property
    def IsEndRecording(self) -> bool: ...
    @property
    def IsEndRedo(self) -> bool: ...
    @property
    def IsEndUndo(self) -> bool: ...
    @property
    def IsPurgeRecord(self) -> bool: ...
    @property
    def UndoSerialNumber(self) -> System.UInt32: ...

class SelCommand(Command):
    """For adding nestable whole object and subobject selection commands, derive your command from SelCommand and override the abstract SelFilter and virtual SelSubObjectFilter functions.

    """
    @property
    def BeQuiet(self) -> bool: ...
    @property
    def TestGrips(self) -> bool: ...
    @property
    def TestLights(self) -> bool: ...
    @BeQuiet.setter
    def BeQuiet(self, value: System.Void): ...
    @TestGrips.setter
    def TestGrips(self, value: System.Void): ...
    @TestLights.setter
    def TestLights(self, value: System.Void): ...

class TransformCommand(Command):
    """    """

class CustomUndoEventArgs(System.EventArgs):
    """Argument package that is passed to a custom undo delegate

    """
    @property
    def ActionDescription(self) -> str: ...
    @property
    def CommandId(self) -> System.Guid: ...
    @property
    def CreatedByRedo(self) -> bool: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Tag(self) -> object: ...
    @property
    def UndoSerialNumber(self) -> System.UInt32: ...

class RunCommandDelegate(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, doc: Rhino.RhinoDoc, mode: RunMode, data: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> Result: ...
    @overload
    def Invoke(self, doc: Rhino.RhinoDoc, mode: RunMode, data: object) -> Result: ...

# endregion
