"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["RhinoAccounts", "Notifications", "InteropWrappers", "InProcess", "Analytics", "Mode", "ImportOptionsSections", "AdvancedSetting", "NotLicensedException", "LicenseStateChangedEventArgs", "NamedParametersEventArgs", "Skin", "PythonCompiledCode", "PythonScript", "RiskyAction", "IPlatformServiceLocator", "HostUtils", "RdkNotLoadedException", "Interop", "LicenseTypes", "ZooClientParameters", "IZooClientUtilities", "IShrinkWrapService", "DocumentCollectedException", "CorruptGeometryException", "CommonObject", "AssemblyResolver", "ViewCaptureWriter", "TextFields", "ExceptionReportDelegate", "LogMessageType", "SendLogMessageToCloudDelegate", "SetClipRectProc", "FillProc", "VectorPolylineProc", "VectorArcProc", "VectorStringProc", "VectorFillPolygonProc", "VectorPathProc", "VectorPointProc", "VectorBitmapProc", "VectorRoundedRectProc", "VectorClipPathProc", "VectorGradientProc", "Pen", "PointType", "PathPoint", "InstanceAttributeField"]
# endregion

# region: Imports
from Rhino import Collections
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import FileIO
from Rhino import Geometry
from Rhino import PlugIns
from Rhino.DocObjects import Custom
from Rhino.Input import Custom
from System import Drawing
from System import Reflection
from System import Threading
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Analytics(object):
    """Provides tools for sending Google Analytics events using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details.

    """
    @overload
    def __init__(self, TrackingID: str, Name: str): ...
    @overload
    def __init__(self, TrackingID: str, Name: str, Platform: str, InstallerId: str, Version: str): ...
    @property
    def AppInstallerId(self) -> str: ...
    @property
    def AppName(self) -> str: ...
    @property
    def AppPlatform(self) -> str: ...
    @property
    def AppVersion(self) -> str: ...
    @property
    def GoogleAnalyticsTrackingID(self) -> str: ...
    @property
    def UsageStatisticsEnabled(self) -> bool: ...
    @property
    def UserId(self) -> System.Guid: ...
    @overload
    def Send(self, data: Specialized.NameValueCollection) -> None: ...
    @overload
    def Send(self, Category: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str, Value: System.UInt32) -> None: ...
    @AppInstallerId.setter
    def AppInstallerId(self, value: System.Void): ...
    @AppName.setter
    def AppName(self, value: System.Void): ...
    @AppPlatform.setter
    def AppPlatform(self, value: System.Void): ...
    @AppVersion.setter
    def AppVersion(self, value: System.Void): ...
    @GoogleAnalyticsTrackingID.setter
    def GoogleAnalyticsTrackingID(self, value: System.Void): ...

class Mode(enum.Enum):
    NormalMode = 0
    ViewerMode = 1
    BetaMode = 2
    InvalidMode = 100

class ImportOptionsSections(enum.Enum):
    AdvancedDisplay = 0
    Alias = 1
    Appearance = 2
    ChooseOneObject = 3
    ControlPointContextMenu = 4
    CursorToolTip = 5
    Display = 6
    File = 7
    General = 8
    Grid = 9
    ModelAid = 10
    Mouse = 11
    NeverRepeatCommands = 12
    ObjectContextMenu = 13
    SearchPath = 14
    ShortcutKey = 15
    Smarttrack = 16
    View = 17
    ViewportContextMenu = 18
    ToolPaletteSettings = 19
    Count = 20

class AdvancedSetting(enum.Enum):
    UseNewDraftAngleAnalysisUi = 0
    UseCompressionWhenSaving = 1
    TestAdvancedString = 2
    TestAdvancedInt = 3
    PdfOptionalContentGroups = 4
    LeaveFloatingPanelsHiddenOnMac = 5
    DisableFileWatchers = 6
    EnableCheckForUpdates = 7
    LeftJustifyNumericText = 8
    EnableWindowsGestures = 9
    MakeInteriorNgonVertexesSelectable = 10
    MacDisplayOldVersionAutosaveWarning = 11
    UseNewMissingFontUI = 12
    ExportDocumentUserText = 13
    CommandsToIgnoreWhenAutoHidingToolPalettes = 14
    DisplayNonOriginModelBasepointWarning = 15
    UseEntireWidthForTopBand = 16
    UseMFCMenuBar = 17
    IgnoreRUIPlatform = 18
    EnableMcNeelOnlyFeatures = 19
    UseRhinoColorsForModalDialogs = 20
    AcadExportSelectUnexportableObjects = 21
    AcadExportSortLayers = 22
    AcadExportWriteEmptyLayers = 23
    DisableModelAndPageUnitsDifferDialog = 24
    DisablePageUnitsNotInchesOrMMDialog = 25
    UseLegacyCurveJoiner = 26
    UseLegacyBrepCapper = 27
    HideFloatingWindowsOnDeactivate = 28
    RecordAnimationTargetFolder = 29

class NotLicensedException(System.Exception):
    """Exception thrown when calling functions in RhinoCommon and the application is executing without a license

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class LicenseStateChangedEventArgs(System.EventArgs):
    """Passed to LicenseStateChanged event on RhinoApp

    """
    def __init__(self, callingRhinoCommonAllowed: bool): ...
    @property
    def CallingRhinoCommonAllowed(self) -> bool: ...

class NamedParametersEventArgs(System.EventArgs):
    """Dictionary style class used for named callbacks from C++ -> .NET

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Set(self, name: str, value: Drawing.Color) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.Point3d) -> None: ...
    @overload
    def Set(self, name: str, value: str) -> None: ...
    @overload
    def Set(self, name: str, value: Drawing.Point) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.Arc) -> None: ...
    @overload
    def Set(self, name: str, value: float) -> None: ...
    @overload
    def Set(self, name: str, values: Generic.IEnumerable) -> None: ...
    @overload
    def Set(self, name: str, value: System.UInt32) -> None: ...
    @overload
    def Set(self, name: str, plane: Geometry.Plane) -> None: ...
    @overload
    def Set(self, name: str, value: int) -> None: ...
    @overload
    def Set(self, name: str, pts: Geometry.System.Array[Geometry.Point3d]) -> None: ...
    @overload
    def Set(self, name: str, value: bool) -> None: ...
    @overload
    def Set(self, name: str, value: System.Guid) -> None: ...
    @overload
    def Set(self, name: str, guidList: Generic.IEnumerable) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.MeshingParameters) -> None: ...
    @overload
    def Set(self, name: str, values: Generic.IEnumerable) -> None: ...
    @overload
    def Set(self, name: str, values: Generic.IEnumerable) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.GeometryBase) -> None: ...
    @overload
    def Set(self, name: str, strings: Generic.IEnumerable) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.Line) -> None: ...
    @overload
    def Set(self, name: str, value: Geometry.Vector3d) -> None: ...
    @overload
    def SetWindowHandle(self, name: str, value: System.IntPtr) -> None: ...
    @overload
    def SetWindowImageHandle(self, name: str, value: System.IntPtr) -> None: ...
    @overload
    def TryGetArc(self, name: str) -> (bool, Geometry.Arc): ...
    @overload
    def TryGetBool(self, name: str) -> (bool, bool): ...
    @overload
    def TryGetColor(self, name: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDouble(self, name: str) -> (bool, float): ...
    @overload
    def TryGetGeometry(self, name: str) -> (bool, Geometry.System.Array[Geometry.GeometryBase]): ...
    @overload
    def TryGetGuid(self, name: str) -> (bool, System.Guid): ...
    @overload
    def TryGetGuids(self, name: str) -> (bool, System.System.Array[System.Guid]): ...
    @overload
    def TryGetInt(self, name: str) -> (bool, int): ...
    @overload
    def TryGetLine(self, name: str) -> (bool, Geometry.Line): ...
    @overload
    def TryGetMeshParameters(self, name: str) -> (bool, Geometry.MeshingParameters): ...
    @overload
    def TryGetObjRefs(self, name: str) -> (bool, DocObjects.System.Array[DocObjects.ObjRef]): ...
    @overload
    def TryGetPlane(self, name: str) -> (bool, Geometry.Plane): ...
    @overload
    def TryGetPoint(self, name: str) -> (bool, Geometry.Point3d): ...
    @overload
    def TryGetPoint2i(self, name: str) -> (bool, Drawing.Point): ...
    @overload
    def TryGetPoints(self, name: str) -> (bool, Geometry.System.Array[Geometry.Point3d]): ...
    @overload
    def TryGetRhinoObjects(self, key: str) -> (bool, DocObjects.System.Array[DocObjects.RhinoObject]): ...
    @overload
    def TryGetString(self, name: str) -> (bool, str): ...
    @overload
    def TryGetStrings(self, name: str) -> (bool, System.System.Array[str]): ...
    @overload
    def TryGetUints(self, name: str) -> (bool, System.System.Array[System.UInt32]): ...
    @overload
    def TryGetUnmangedPointer(self, name: str) -> (bool, System.IntPtr): ...
    @overload
    def TryGetUnsignedInt(self, name: str) -> (bool, System.UInt32): ...
    @overload
    def TryGetVector(self, name: str) -> (bool, Geometry.Vector3d): ...
    @overload
    def TryGetViewport(self, name: str) -> (bool, DocObjects.ViewportInfo): ...
    @overload
    def TryGetWindowHandle(self, name: str) -> (bool, System.IntPtr): ...
    @overload
    def TryGetWindowImageHandle(self, name: str) -> (bool, System.IntPtr): ...

class Skin(object):
    """Represents a customized environment that changes the appearance of Rhino.
Skin DLLs must contain a single class that derives from the Skin class.

    """
    @property
    def ActiveSkin(self) -> Skin: ...
    @property
    def Settings(self) -> Rhino.PersistentSettings: ...

class PythonCompiledCode(object):
    """Represents scripting compiled code.

    """
    @overload
    def Execute(self, scope: PythonScript) -> None: ...

class PythonScript(object):
    """Represents a Python script.

    """
    @overload
    @staticmethod
    def AddRuntimeAssembly(assembly: Reflection.Assembly) -> None: ...
    @overload
    def Compile(self, script: str) -> PythonCompiledCode: ...
    @overload
    def ContainsVariable(self, name: str) -> bool: ...
    @overload
    @staticmethod
    def Create() -> PythonScript: ...
    @overload
    def CreateTextEditorControl(self, script: str, helpcallback: System.Action) -> object: ...
    @overload
    def EvaluateExpression(self, statements: str, expression: str) -> object: ...
    @overload
    def ExecuteFile(self, path: str) -> bool: ...
    @overload
    def ExecuteFileInScope(self, path: str) -> bool: ...
    @overload
    def ExecuteScript(self, script: str) -> bool: ...
    @property
    def ContextId(self) -> int: ...
    @property
    def Output(self) -> System.Action: ...
    @property
    def ScriptContextCommand(self) -> Commands.Command: ...
    @property
    def ScriptContextDoc(self) -> object: ...
    @property
    def SearchPaths(self) -> System.System.Array[str]: ...
    @overload
    def GetStackTraceFromException(self, ex: System.Exception) -> str: ...
    @overload
    def GetVariable(self, name: str) -> object: ...
    @overload
    def GetVariableNames() -> Generic.IEnumerable: ...
    @overload
    def RemoveVariable(self, name: str) -> None: ...
    @overload
    @staticmethod
    def RuntimeAssemblies() -> Reflection.System.Array[Reflection.Assembly]: ...
    @ContextId.setter
    def ContextId(self, value: System.Void): ...
    @Output.setter
    def Output(self, value: System.Void): ...
    @ScriptContextCommand.setter
    def ScriptContextCommand(self, value: System.Void): ...
    @ScriptContextDoc.setter
    def ScriptContextDoc(self, value: System.Void): ...
    @SearchPaths.setter
    def SearchPaths(self, value: System.Void): ...
    @overload
    def SetIntellisenseVariable(self, name: str, value: object) -> None: ...
    @overload
    def SetupScriptContext(self, doc: object) -> None: ...
    @overload
    def SetVariable(self, name: str, value: object) -> None: ...

class RiskyAction(object):
    """Defines risky actions that need to be reported in crash exceptions

    """
    def __init__(self, description: str, file: str, member: str, line: int): ...
    @overload
    def Dispose() -> None: ...

class IPlatformServiceLocator:
    """Get platform specific services that are used internally for general cross platform funtions in RhinoCommon. This includes services like localization and GUI components that have concrete implementations in the RhinoWindows or RhinoMac assemblies

    """
    @overload
    def GetService() -> T: ...

class HostUtils(object):
    """Contains static methods to deal with the runtime environment.

    """
    @overload
    @staticmethod
    def AutoInstallPlugInFolder(currentUser: bool) -> str: ...
    @overload
    @staticmethod
    def CallFromCoreRhino(task: str) -> int: ...
    @overload
    @staticmethod
    def CheckForRdk(throwOnFalse: bool, usePreviousResult: bool) -> bool: ...
    @overload
    @staticmethod
    def ClearFpuExceptionStatus() -> None: ...
    @overload
    @staticmethod
    def CreateCommands(plugin: PlugIns.PlugIn) -> None: ...
    @overload
    @staticmethod
    def CreateCommands(pPlugIn: System.IntPtr, pluginAssembly: Reflection.Assembly) -> int: ...
    @overload
    @staticmethod
    def CreatePlugIn(pluginType: System.Type, printDebugMessages: bool) -> PlugIns.PlugIn: ...
    @overload
    @staticmethod
    def DebugDumpToString(bezierCurve: Geometry.BezierCurve) -> str: ...
    @overload
    @staticmethod
    def DebugDumpToString(geometry: Geometry.GeometryBase) -> str: ...
    @overload
    @staticmethod
    def DebugString(msg: str) -> None: ...
    @overload
    @staticmethod
    def DebugString(format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def DescribeGeometry(geometry: Geometry.GeometryBase) -> str: ...
    @overload
    @staticmethod
    def DisplayOleAlerts(display: bool) -> None: ...
    @overload
    @staticmethod
    def ExceptionReport(ex: System.Exception) -> None: ...
    @overload
    @staticmethod
    def ExceptionReport(source: str, ex: System.Exception) -> None: ...
    @overload
    @staticmethod
    def ExecuteNamedCallback(name: str, args: NamedParametersEventArgs) -> bool: ...
    @overload
    @staticmethod
    def FileNameEndsWithRhinoBackupExtension(fileName: str) -> bool: ...
    @overload
    @staticmethod
    def FileNameEndsWithRhinoExtension(fileName: str) -> bool: ...
    @property
    def ComputerSerialNumber(self) -> str: ...
    @property
    def CurrentOSLanguage(self) -> System.UInt32: ...
    @property
    def DeviceId(self) -> System.Guid: ...
    @property
    def DeviceName(self) -> str: ...
    @property
    def IsPreRelease(self) -> bool: ...
    @property
    def OperatingSystemBuildNumber(self) -> str: ...
    @property
    def OperatingSystemEdition(self) -> str: ...
    @property
    def OperatingSystemInstallationType(self) -> str: ...
    @property
    def OperatingSystemProductName(self) -> str: ...
    @property
    def OperatingSystemVersion(self) -> str: ...
    @property
    def RhinoAssemblyDirectory(self) -> str: ...
    @property
    def RunningAsRhinoInside(self) -> bool: ...
    @property
    def RunningInDarkMode(self) -> bool: ...
    @property
    def RunningInMono(self) -> bool: ...
    @property
    def RunningInNetCore(self) -> bool: ...
    @property
    def RunningInNetFramework(self) -> bool: ...
    @property
    def RunningInRhino(self) -> bool: ...
    @property
    def RunningInWindowsContainer(self) -> bool: ...
    @property
    def RunningOniOS(self) -> bool: ...
    @property
    def RunningOnOSX(self) -> bool: ...
    @property
    def RunningOnServer(self) -> bool: ...
    @property
    def RunningOnWindows(self) -> bool: ...
    @property
    def SendDebugToCommandLine(self) -> bool: ...
    @overload
    @staticmethod
    def GetAbsolutePath(relativePath: str, bRelativePathisFileName: bool, relativeTo: str, bRelativeToIsFileName: bool) -> (bool, str): ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders(currentUser: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetAssemblySearchPaths() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetCurrentProcessInfo() -> (str, System.Version): ...
    @overload
    @staticmethod
    def GetCustomComputeEndpoints() -> System.System.Array[System.Tuple]: ...
    @overload
    @staticmethod
    def GetPlatformService(assemblyPath: str, typeFullName: str) -> T: ...
    @overload
    @staticmethod
    def GetPrinterDPI(printerName: str, horizontal: bool) -> float: ...
    @overload
    @staticmethod
    def GetPrinterFormMargins(printerName: str, formName: str, portrait: bool) -> (bool, float, float, float, float): ...
    @overload
    @staticmethod
    def GetPrinterFormNames(printerName: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetPrinterFormSize(printerName: str, formName: str) -> (bool, float, float): ...
    @overload
    @staticmethod
    def GetPrinterNames() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetRhinoDotNetAssembly() -> Reflection.Assembly: ...
    @overload
    @staticmethod
    def GetSystemProcessorCount() -> int: ...
    @overload
    @staticmethod
    def GetSystemReferenceAssemblies() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def InitializeRhinoCommon() -> None: ...
    @overload
    @staticmethod
    def InitializeRhinoCommon_RDK() -> None: ...
    @overload
    @staticmethod
    def InitializeZooClient() -> None: ...
    @overload
    @staticmethod
    def InPlaceConstCast(geometry: Geometry.GeometryBase, makeNonConst: bool) -> None: ...
    @overload
    @staticmethod
    def IsManagedDll(path: str) -> bool: ...
    @overload
    @staticmethod
    def IsRhinoBackupFileExtension(fileExtension: str) -> bool: ...
    @overload
    @staticmethod
    def IsRhinoFileExtension(fileExtension: str) -> bool: ...
    @overload
    @staticmethod
    def LoadAssemblyFrom(path: str) -> Reflection.Assembly: ...
    @overload
    @staticmethod
    def LogDebugEvent(message: str) -> None: ...
    @overload
    @staticmethod
    def RecordInitInstanceTime(description: str) -> None: ...
    @overload
    @staticmethod
    def RegisterComputeEndpoint(endpointPath: str, t: System.Type) -> None: ...
    @overload
    @staticmethod
    def RegisterDynamicCommand(plugin: PlugIns.PlugIn, cmd: Commands.Command) -> bool: ...
    @overload
    @staticmethod
    def RegisterNamedCallback(name: str, callback: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def RemoveNamedCallback(name: str) -> None: ...
    @overload
    @staticmethod
    def RhinoCommonExceptionHandler(title: str, sender: object, ex: System.Exception) -> None: ...
    @overload
    @staticmethod
    def SendLogMessageToCloudCallbackProc(msg_type: LogMessageType, pwStringClass: System.IntPtr, pwStringDesc: System.IntPtr, pwStringMessage: System.IntPtr) -> None: ...
    @SendDebugToCommandLine.setter
    def SendDebugToCommandLine(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetInShutDown() -> None: ...
    @overload
    @staticmethod
    def ShutDownRhinoCommon_RDK() -> None: ...
    @overload
    @staticmethod
    def UnhandledThreadException(sender: object, e: Threading.ThreadExceptionEventArgs) -> None: ...
    @property
    def OnExceptionReport(self): ...
    @property
    def OnSendLogMessageToCloud(self): ...

class RdkNotLoadedException(System.Exception):
    """Is thrown when the RDK is not loaded.

    """
    def __init__(self): ...

class Interop(object):
    """Contains static methods to marshal objects between RhinoCommon and legacy Rhino_DotNet or C++.

    """
    @overload
    @staticmethod
    def CommandLineOptionFromNativePointer(ptrCommandLineOption: System.IntPtr) -> Custom.CommandLineOption: ...
    @overload
    @staticmethod
    def CreateFromNativePointer(pGeometry: System.IntPtr) -> Geometry.GeometryBase: ...
    @overload
    @staticmethod
    def FileReadOptionsConstPointer(options: FileIO.FileReadOptions) -> System.IntPtr: ...
    @overload
    @staticmethod
    def FileWriteOptionsConstPointer(options: FileIO.FileWriteOptions) -> System.IntPtr: ...
    @overload
    @staticmethod
    def FontFromPointer(ptrManagedFont: System.IntPtr) -> DocObjects.Font: ...
    @overload
    @staticmethod
    def FromOnBrep(source: object) -> Geometry.Brep: ...
    @overload
    @staticmethod
    def FromOnCurve(source: object) -> Geometry.Curve: ...
    @overload
    @staticmethod
    def FromOnMesh(source: object) -> Geometry.Mesh: ...
    @overload
    @staticmethod
    def FromOnSurface(source: object) -> Geometry.Surface: ...
    @overload
    @staticmethod
    def NativeGeometryConstPointer(geometry: Geometry.GeometryBase) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeGeometryNonConstPointer(geometry: Geometry.GeometryBase) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(getPoint: Custom.GetPoint) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(pipeline: Display.DisplayPipeline) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: Display.RhinoViewport) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: DocObjects.ViewportInfo) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(settings: Display.ViewCaptureSettings) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NativeRhinoDocPointer(doc: Rhino.RhinoDoc) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: DocObjects.Font) -> System.IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: DocObjects.Font, pointSize: float) -> System.IntPtr: ...
    @overload
    @staticmethod
    def PlugInPointer(plugin: PlugIns.PlugIn) -> System.IntPtr: ...
    @overload
    @staticmethod
    def RhinoObjectConstPointer(rhinoObject: DocObjects.RhinoObject) -> System.IntPtr: ...
    @overload
    @staticmethod
    def RhinoObjectFromPointer(pRhinoObject: System.IntPtr) -> DocObjects.RhinoObject: ...
    @overload
    @staticmethod
    def ToIRhinoViewport(source: Display.RhinoViewport) -> object: ...
    @overload
    @staticmethod
    def ToOnBrep(source: Geometry.Brep) -> object: ...
    @overload
    @staticmethod
    def ToOnCurve(source: Geometry.Curve) -> object: ...
    @overload
    @staticmethod
    def ToOnMesh(source: Geometry.Mesh) -> object: ...
    @overload
    @staticmethod
    def ToOnSurface(source: Geometry.Surface) -> object: ...
    @overload
    @staticmethod
    def ToOnXform(source: Geometry.Transform) -> object: ...
    @overload
    @staticmethod
    def TryCopyFromOnArc(source: object) -> (bool, Geometry.Arc): ...
    @overload
    @staticmethod
    def TryCopyToOnArc(source: Geometry.Arc, destination: object) -> bool: ...
    @overload
    @staticmethod
    def ViewCaptureFromPointer(ptrViewCapture: System.IntPtr) -> Display.ViewCaptureSettings: ...

class LicenseTypes(enum.Enum):
    Undefined = 0
    Standalone = 1
    ZooAutoDetect = 2
    ZooManualDetect = 3
    CloudZoo = 4

class ZooClientParameters(object):
    """ZooClientParameters is a read-only set of parameters that control the flow of licensing inside ZooClient. Because this class flows through a number of other classes, functions, and UI, it is read-only so that inadvertent changes are not made to the data as it propagates from the caller.

    """
    def __init__(self, productGuid: System.Guid, licenseGuid: System.Guid, productTitle: str, productBuildType: int, capabilities: PlugIns.LicenseCapabilities, licenseEntryTextMask: str, productPath: str, parentWindow: object, selectedLicenseType: LicenseTypes, validateProductKey: PlugIns.ValidateProductKeyDelegate, onLeaseChangedDelegate: PlugIns.OnLeaseChangedDelegate, verifyLicenseKeyDelegate: PlugIns.VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: PlugIns.VerifyPreviousVersionLicenseDelegate): ...
    @property
    def Capabilities(self) -> PlugIns.LicenseCapabilities: ...
    @property
    def LicenseEntryTextMask(self) -> str: ...
    @property
    def LicenseGuid(self) -> System.Guid: ...
    @property
    def OnLeaseChanged(self) -> PlugIns.OnLeaseChangedDelegate: ...
    @property
    def ParentWindow(self) -> object: ...
    @property
    def ProductBuildType(self) -> int: ...
    @property
    def ProductGuid(self) -> System.Guid: ...
    @property
    def ProductPath(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def SelectedLicenseType(self) -> LicenseTypes: ...
    @Capabilities.setter
    def Capabilities(self, value: System.Void): ...
    @SelectedLicenseType.setter
    def SelectedLicenseType(self, value: System.Void): ...
    @overload
    def VerifyLicenseKey(self, licenseKey: str, validationCode: str, validationCodeInstallDate: System.DateTime, gracePeriodExpired: bool) -> (PlugIns.ValidateResult, PlugIns.LicenseData): ...
    @overload
    def VerifyPreviousVersionLicense(self, license: str, previousVersionLicense: str) -> (bool, str): ...

class IZooClientUtilities:
    """Interface implemented in ZooClient and added to Rhino via dependency injection

    """
    @overload
    def AskUserForLicense(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def CheckInLicense(self, verify: object, productId: System.Guid) -> bool: ...
    @overload
    def CheckOutLicense(self, verify: object, productId: System.Guid) -> bool: ...
    @overload
    def ConvertLicense(self, verify: object, productId: System.Guid) -> bool: ...
    @overload
    def DeleteLicense(self, verify: object, productId: System.Guid) -> bool: ...
    @overload
    def Echo(self, verify: object, message: str) -> str: ...
    @property
    def LoggedInUserAvatar(self) -> Drawing.Image: ...
    @property
    def LoggedInUserName(self) -> str: ...
    @property
    def UserIsLoggedIn(self) -> bool: ...
    @overload
    def GetCurrentTime() -> System.DateTime: ...
    @overload
    def GetLicense(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def GetLicenseStatus(self, verify: object) -> PlugIns.System.Array[PlugIns.LicenseStatus]: ...
    @overload
    def GetLicenseType(self, verify: object, productId: System.Guid) -> int: ...
    @overload
    def GetOneLicenseStatus(self, verify: object, productId: System.Guid) -> PlugIns.LicenseStatus: ...
    @overload
    def GetRegisteredOwnerInfo(self, verify: object, productId: System.Guid) -> (bool, str, str): ...
    @overload
    def Initialize(self, verify: object) -> bool: ...
    @overload
    def IsCheckOutEnabled(self, verify: object) -> bool: ...
    @overload
    def LicenseOptionsHandler(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def LoginToCloudZoo() -> bool: ...
    @overload
    def LogoutOfCloudZoo() -> bool: ...
    @overload
    def ReturnLicense(self, verify: object, productId: System.Guid) -> bool: ...
    @overload
    def ReturnLicense(self, verify: object, productPath: str, productId: System.Guid) -> bool: ...
    @overload
    def ShowBuyLicenseUi(self, verify: object, productId: System.Guid) -> None: ...
    @overload
    def ShowLicenseValidationUi(self, verify: object, cdkey: str) -> bool: ...
    @overload
    def ShowRhinoExpiredMessage(self, mode: Mode) -> (bool, int): ...

class IShrinkWrapService:
    """Internal interface used by ShrinkWrap functions

    """
    @overload
    def ShrinkWrap(self, mesh: Geometry.Mesh, parameters: Geometry.ShrinkWrapParameters) -> Geometry.Mesh: ...
    @overload
    def ShrinkWrap(self, meshes: Generic.IEnumerable, parameters: Geometry.ShrinkWrapParameters) -> Geometry.Mesh: ...
    @overload
    def ShrinkWrap(self, pointCloud: Geometry.PointCloud, parameters: Geometry.ShrinkWrapParameters) -> Geometry.Mesh: ...
    @overload
    def ShrinkWrap(self, geometryBases: Generic.IEnumerable, parameters: Geometry.ShrinkWrapParameters, meshingParameters: Geometry.MeshingParameters) -> Geometry.Mesh: ...

class DocumentCollectedException(System.Exception):
    """Represents the error that happen when a class user attempts to execute a modifying operation on an object that has been added to a document.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...

class CorruptGeometryException(System.Exception):
    """Thrown when Rhino finds a brep or mesh that will cause a crash if used for calculations.

    """
    @property
    def CommonObject(self) -> CommonObject: ...
    @property
    def Pointer(self) -> System.IntPtr: ...

class CommonObject(object):
    """Base class for .NET classes that wrap C++ unmanaged Rhino classes.

    """
    @overload
    def Dispose() -> None: ...
    @overload
    def EnsurePrivateCopy() -> None: ...
    @overload
    @staticmethod
    def FromBase64String(archive3dm: int, opennurbs: int, base64Data: str) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(jsonDictionary: Generic.Dictionary) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(json: str) -> CommonObject: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PerformCorruptionTesting(self) -> bool: ...
    @property
    def UserData(self) -> Custom.UserDataList: ...
    @property
    def UserDictionary(self) -> Collections.ArchivableDictionary: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def IsValidWithLog() -> (bool, str): ...
    @PerformCorruptionTesting.setter
    def PerformCorruptionTesting(self, value: System.Void): ...
    @overload
    def ToJSON(self, options: FileIO.SerializationOptions) -> str: ...

class AssemblyResolver(object):
    """Assembly Resolver for the Rhino App Domain.

    """
    @overload
    @staticmethod
    def AddSearchFile(file: str) -> None: ...
    @overload
    @staticmethod
    def AddSearchFolder(folder: str) -> None: ...
    @property
    def CurrentDomainAssemblyResolve(self) -> System.ResolveEventHandler: ...
    @property
    def CurrentDomainReflectionOnlyAssemblyResolve(self) -> System.ResolveEventHandler: ...

class ViewCaptureWriter(object):
    """Callback system used by SVG and PDF exporter to generate documents. Not intended for general SDK usage

    """
    def __init__(self, dpi: float, pageSize: Drawing.Size): ...
    @overload
    def Draw(self, constPtrPrintInfo: System.IntPtr, doc: Rhino.RhinoDoc) -> None: ...

class TextFields(object):
    """This Class Processes Text Field Functions

    """
    @overload
    @staticmethod
    def Area(id_: str) -> float: ...
    @overload
    @staticmethod
    def Area(id_: str, unitSystem: str) -> float: ...
    @overload
    @staticmethod
    def BlockAttributeText(key: str, prompt: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def BlockDescription(definitionNameOrId: str) -> str: ...
    @overload
    @staticmethod
    def BlockInstanceCount(instanceDefinitionNameOrId: str) -> int: ...
    @overload
    @staticmethod
    def BlockInstanceName(blockId: str) -> str: ...
    @overload
    @staticmethod
    def BlockName(blockId: str) -> str: ...
    @overload
    @staticmethod
    def CurveLength(id_: str) -> float: ...
    @overload
    @staticmethod
    def CurveLength(id_: str, unitSystem: str) -> float: ...
    @overload
    @staticmethod
    def Date() -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str, languageId: str) -> str: ...
    @overload
    @staticmethod
    def DateModified() -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str, languageId: str) -> str: ...
    @overload
    @staticmethod
    def DetailScale(detailId: str, scaleFormat: str) -> str: ...
    @overload
    @staticmethod
    def DocumentText(key: str) -> str: ...
    @overload
    @staticmethod
    def FileName() -> str: ...
    @overload
    @staticmethod
    def FileName(options: str) -> str: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(idef: DocObjects.InstanceDefinition) -> System.Array[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(text: DocObjects.TextObject) -> System.Array[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(str_: str) -> System.Array[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def LayerName(layerId: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(key: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(layoutId: str, key: str) -> str: ...
    @overload
    @staticmethod
    def ModelUnits() -> str: ...
    @overload
    @staticmethod
    def Notes() -> str: ...
    @overload
    @staticmethod
    def NumPages() -> int: ...
    @overload
    @staticmethod
    def ObjectLayer(id_: str) -> str: ...
    @overload
    @staticmethod
    def ObjectName() -> str: ...
    @overload
    @staticmethod
    def ObjectName(id_: str) -> str: ...
    @overload
    @staticmethod
    def ObjectPageName(id_: str) -> str: ...
    @overload
    @staticmethod
    def ObjectPageNumber(id_: str) -> int: ...
    @overload
    @staticmethod
    def PageHeight() -> float: ...
    @overload
    @staticmethod
    def PageName() -> str: ...
    @overload
    @staticmethod
    def PageName(id_: str) -> str: ...
    @overload
    @staticmethod
    def PageNumber() -> int: ...
    @overload
    @staticmethod
    def PageWidth() -> float: ...
    @overload
    @staticmethod
    def PaperName() -> str: ...
    @overload
    @staticmethod
    def PointCoordinate(pointId: str, axis: str) -> str: ...
    @overload
    @staticmethod
    def TryFormat(text: str, doc: Rhino.RhinoDoc) -> (bool, str): ...
    @overload
    @staticmethod
    def TryParse(text: str, doc: Rhino.RhinoDoc) -> (bool, Generic.List): ...
    @overload
    @staticmethod
    def UserText(id_: str, key: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id_: str, key: str, prompt: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id_: str, key: str, prompt: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def Volume(id_: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id_: str, opt: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id_: str, unitSystem: str, allowOpenObjects: str) -> float: ...

class ExceptionReportDelegate(System.MulticastDelegate):
    """Represents a reference to a method that will be called when an exception occurs.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, source: str, ex: System.Exception, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, source: str, ex: System.Exception) -> None: ...

class LogMessageType(enum.Enum):
    unknown = 0
    information = 1
    warning = 2
    error = 3
    assert_ = 4

class SendLogMessageToCloudDelegate(System.MulticastDelegate):
    """Represents a reference to a method that will be called when an exception occurs.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str) -> None: ...

class SetClipRectProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, int, int, int, int): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (int, int, int, int): ...
    @overload
    def Invoke() -> (int, int, int, int): ...

class FillProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, topl: int, bottoml: int, topr: int, bottomr: int, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, topl: int, bottoml: int, topr: int, bottomr: int) -> None: ...

class VectorPolylineProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, thickness: System.Single, dashed: int, capStyle: int, joinStyle: int, count: int, points: System.IntPtr, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, argb: int, thickness: System.Single, dashed: int, capStyle: int, joinStyle: int, count: int, points: System.IntPtr) -> None: ...

class VectorArcProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, thickness: System.Single, dashed: int, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, Geometry.Arc): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (Geometry.Arc): ...
    @overload
    def Invoke(self, argb: int, thickness: System.Single, dashed: int) -> (Geometry.Arc): ...

class VectorStringProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, constPtrString: System.IntPtr, argbTextColor: int, x: float, y: float, angle: System.Single, alignment: int, heightPixels: System.Single, constPtrFont: System.IntPtr, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, constPtrString: System.IntPtr, argbTextColor: int, x: float, y: float, angle: System.Single, alignment: int, heightPixels: System.Single, constPtrFont: System.IntPtr) -> None: ...

class VectorFillPolygonProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, count: int, points: System.IntPtr, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, argb: int, count: int, points: System.IntPtr) -> None: ...

class VectorPathProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, begin: int, brush: System.IntPtr, screenLine: System.IntPtr, stops: System.IntPtr, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, begin: int, brush: System.IntPtr, screenLine: System.IntPtr, stops: System.IntPtr) -> None: ...

class VectorPointProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, style: int, screenX: System.Single, screenY: System.Single, fillArgb: int, strokeArgb: int, diameterPixels: System.Single, innerDiameterPixels: System.Single, strokeWidthPixels: System.Single, rotationRadians: System.Single, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, style: int, screenX: System.Single, screenY: System.Single, fillArgb: int, strokeArgb: int, diameterPixels: System.Single, innerDiameterPixels: System.Single, strokeWidthPixels: System.Single, rotationRadians: System.Single) -> None: ...

class VectorBitmapProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, hBmp: System.IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, hBmp: System.IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...

class VectorRoundedRectProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, centerX: System.Single, centerY: System.Single, pixelWidth: System.Single, pixelHeight: System.Single, cornerRadius: System.Single, strokeColor: int, strokeWidth: System.Single, fillColor: int, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, centerX: System.Single, centerY: System.Single, pixelWidth: System.Single, pixelHeight: System.Single, cornerRadius: System.Single, strokeColor: int, strokeWidth: System.Single, fillColor: int) -> None: ...

class VectorClipPathProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, loops: System.IntPtr, asBeziers: int, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, loops: System.IntPtr, asBeziers: int) -> None: ...

class VectorGradientProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, pEngine: System.IntPtr, pHatch: System.IntPtr, strokeWidth: System.Single, pHatchPattern: System.IntPtr, gradientCount: int, colors: System.IntPtr, stops: System.IntPtr, points: System.IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, pEngine: System.IntPtr, pHatch: System.IntPtr, strokeWidth: System.Single, pHatchPattern: System.IntPtr, gradientCount: int, colors: System.IntPtr, stops: System.IntPtr, points: System.IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float) -> None: ...

class Pen(object):
    """    """
    def __init__(self): ...
    @property
    def Cap(self) -> DocObjects.LineCapStyle: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def Join(self) -> DocObjects.LineJoinStyle: ...
    @property
    def Pattern(self) -> System.System.Array[System.Single]: ...
    @property
    def Width(self) -> System.Single: ...

class PointType(enum.Enum):
    Move = 0
    Line = 1
    CubicBezier = 2
    Close = 3
    Arc = 4

class PathPoint(System.ValueType):
    """    """
    @property
    def Location(self) -> Drawing.PointF: ...
    @property
    def PointType(self) -> PointType: ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @PointType.setter
    def PointType(self, value: System.Void): ...

class InstanceAttributeField(object):
    """
    """
    def __init__(self, key: str, prompt: str, defaultValue: str): ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Key(self) -> str: ...
    @property
    def Prompt(self) -> str: ...

# endregion
