"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IOAuth2Token", "IOpenIDConnectToken", "IRhinoAccountsManager", "RhinoAccountsException", "RhinoAccountsCannotListenException", "RhinoAccountsProxyException", "RhinoAccountsInvalidStateException", "RhinoAccountsServerNotReachableException", "RhinoAccountsOperationInProgressException", "RhinoAccountsInvalidTokenException", "RhinoAccountsInvalidResponseException", "RhinoAccountsAuthTokenMismatchException", "RhinoAccountsServerException", "RhinoAccountsGroup", "RhinoAccountsManager", "ProgressState", "RhinoAccoountsProgressInfo", "SecretKey"]
# endregion

# region: Imports
from System import Reflection
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class IOAuth2Token:
    """Represents an OAuth2 Token that can be used for authorization purposes.

    """
    @property
    def Exp(self) -> System.Nullable: ...
    @property
    def IsExpired(self) -> bool: ...
    @property
    def RawToken(self) -> str: ...
    @property
    def Scope(self) -> Generic.IReadOnlyCollection: ...

class IOpenIDConnectToken:
    """This class represents an OpenIDConnect token issued from an OpenID provider. The token is immutable.

    """
    @property
    def AdminGroups(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def AllGroups(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def AtHash(self) -> str: ...
    @property
    def Aud(self) -> str: ...
    @property
    def AuthTime(self) -> System.Nullable: ...
    @property
    def Emails(self) -> Generic.IReadOnlyCollection: ...
    @property
    def EmailVerified(self) -> System.Nullable: ...
    @property
    def Exp(self) -> System.Nullable: ...
    @property
    def Iat(self) -> System.Nullable: ...
    @property
    def IsExpired(self) -> bool: ...
    @property
    def Iss(self) -> str: ...
    @property
    def IsUpdated(self) -> bool: ...
    @property
    def Locale(self) -> str: ...
    @property
    def MemberGroups(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def Name(self) -> str: ...
    @property
    def Nonce(self) -> str: ...
    @property
    def OwnerGroups(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def Phone(self) -> str: ...
    @property
    def Picture(self) -> str: ...
    @property
    def RawToken(self) -> str: ...
    @property
    def Sub(self) -> str: ...
    @property
    def UpdatedAt(self) -> System.Nullable: ...

class IRhinoAccountsManager:
    """Performs various Rhino Accounts-related tasks.

    """
    @overload
    def ExecuteProtectedCode(self, protectedCode: System.Action) -> None: ...
    @overload
    def ExecuteProtectedCodeAsync(self, protectedCode: System.Func) -> Tasks.Task: ...
    @overload
    def GetAuthTokensAsync(self, clientId: str, clientSecret: str, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAuthTokensAsync(self, clientId: str, clientSecret: str, scope: Generic.IEnumerable, prompt: str, maxAge: System.Nullable, showUI: bool, progress: System.IProgress, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def RevokeAuthTokenAsync(self, oauth2Token: IOAuth2Token, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def TryGetAuthTokens(self, clientId: str, secretKey: SecretKey) -> System.Tuple: ...
    @overload
    def TryGetAuthTokens(self, clientId: str, scope: Generic.IEnumerable, secretKey: SecretKey) -> System.Tuple: ...
    @overload
    def UpdateOpenIDConnectTokenAsync(self, currentToken: IOpenIDConnectToken, oauth2Token: IOAuth2Token, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class RhinoAccountsException(System.Exception):
    """Base exception for all Rhino Accounts operations.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsCannotListenException(RhinoAccountsException):
    """Exception thrown when there is no port available on the machine for Rhino to listen for Rhino Accounts' response.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsProxyException(RhinoAccountsException):
    """Exception thrown when there is a problem with a proxy setting during a Rhino Accounts operation.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsInvalidStateException(RhinoAccountsException):
    """Occurs when the state returned by the Rhino Accounts server is not the same as the one sent to the server. It usually indicates the request has been tampered with.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsServerNotReachableException(RhinoAccountsException):
    """Exception thrown when the Rhino Accounts server cannot be reached due to a network problem.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsOperationInProgressException(RhinoAccountsException):
    """Exception thrown when there is already a Rhino Accounts operation taking place.

    """
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly, innerException: System.Exception): ...

class RhinoAccountsInvalidTokenException(RhinoAccountsException):
    """Exception thrown when the token returned by Rhino Accounts is not valid.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsInvalidResponseException(RhinoAccountsException):
    """Exception thrown when the response returned by Rhino Accounts is not valid.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsAuthTokenMismatchException(RhinoAccountsException):
    """Exception thrown when the currently logged in user is different from the newly logged in user.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, currentUsername: str, newUsername: str, innerException: System.Exception): ...

class RhinoAccountsServerException(RhinoAccountsException):
    """Exception thrown when the Rhino Accounts server returned an unsuccessful HTTP response with a code of 400 or greater.

    """
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RhinoAccountsGroup(object):
    """Represents a Rhino Accounts group.

    """
    def __init__(self, id_: str, name: str): ...
    @property
    def Id(self) -> str: ...
    @property
    def Name(self) -> str: ...

class RhinoAccountsManager(object):
    """Performs various Rhino Accounts-related tasks.

    """
    @overload
    @staticmethod
    def ExecuteProtectedCode(protectedCode: System.Action) -> None: ...
    @overload
    @staticmethod
    def ExecuteProtectedCodeAsync(protectedCode: System.Func) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetAuthTokensAsync(clientId: str, clientSecret: str, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetAuthTokensAsync(clientId: str, clientSecret: str, scope: Generic.IEnumerable, prompt: str, maxAge: System.Nullable, showUI: bool, progress: System.IProgress, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def RevokeAuthTokenAsync(oauth2Token: IOAuth2Token, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def TryGetAuthTokens(clientId: str, secretKey: SecretKey) -> System.Tuple: ...
    @overload
    @staticmethod
    def TryGetAuthTokens(clientId: str, scope: Generic.IEnumerable, secretKey: SecretKey) -> System.Tuple: ...
    @overload
    @staticmethod
    def UpdateOpenIDConnectTokenAsync(currentToken: IOpenIDConnectToken, oauth2Token: IOAuth2Token, secretKey: SecretKey, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class ProgressState(enum.Enum):
    AwaitingLogin = 0
    RetrievingTokens = 1
    AwaitingRedirect = 2
    Other = 3

class RhinoAccoountsProgressInfo(object):
    """This class is designed to convey the progress of an asynchronous operation through .NET's
interface. It can be used by callers of such tasks to relay the tasks' progress, as well as useful metadata information that may be of interest.

    """
    def __init__(self, state: ProgressState, metadata: Generic.Dictionary, customDescription: str): ...
    @property
    def Description(self) -> str: ...
    @property
    def Metadata(self) -> Generic.Dictionary: ...
    @property
    def State(self) -> ProgressState: ...

class SecretKey(object):
    """An instance of this of this class is given to the function you pass to ExceuteProtectedCodeAsync and must be passed to any method of the RhinoAccountsManager that requires it. Failure to do so will throw an
.

    """
    def __init__(self): ...

# endregion
