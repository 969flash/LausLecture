"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["StringHolder", "SimpleArrayInt", "SimpleArrayUint", "SimpleArrayIntPtr", "SimpleArrayByte", "StdVectorByte", "SimpleArrayFloat", "StdVectorFloat", "SimpleArrayGuidPointer", "SimpleArrayGuid", "SimpleArrayInterval", "SimpleArrayDouble", "SimpleArrayPoint2d", "SimpleArrayPoint3d", "SimpleArrayArrayPoint3d", "SimpleArrayPlane", "SimpleArrayLine", "SimpleArray2dex", "SimpleArraySurfacePointer", "SimpleArrayCurvePointer", "SimpleArrayGeometryPointer", "SimpleArrayMeshPointer", "StdVectorGuid", "StdVectorOfSharedPtrToMesh", "SimpleArrayMeshFace", "SimpleArraySubDPointer", "SimpleArrayBrepPointer", "SimpleArrayLinetypePointer", "SimpleArrayExtrusionPointer", "SimpleArrayBinaryArchiveReader", "ClassArrayString", "ClassArrayObjRef", "ClassArrayOnObjRef", "SimpleArrayClippingPlaneObjectPointer", "CurveSegment", "SimpleArrayHatchLinePointer", "MeshPointDataStruct", "StringWrapper", "RhDisplayPoint"]
# endregion

# region: Imports
from Rhino import DocObjects
from Rhino import FileIO
from Rhino import Geometry
from System import Collections
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class StringHolder(object):
    """This class is used to pass strings back and forth between managed and unmanaged code. This should not be needed by plug-ins.
If you are just dealing with an ON_wString*, use

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def GetString(pStringHolder: System.IntPtr) -> str: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToStringSafe() -> str: ...

class SimpleArrayInt(object):
    """Wrapper for ON_SimpleArray<int>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[int]: ...

class SimpleArrayUint(object):
    """Wrapper for ON_SimpleArray<unsigned int>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def UnsignedCount(self) -> System.UInt32: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.UInt32]: ...

class SimpleArrayIntPtr(object):
    """Wrapper for ON_SimpleArray<IntPtr>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.IntPtr]: ...

class SimpleArrayByte(object):
    """Wrapper for ON_SimpleArray<unsigned char>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: int): ...
    @overload
    def __init__(self, other: SimpleArrayByte): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def Array() -> System.IntPtr: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def CopyTo(self, other: SimpleArrayByte) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Byte]: ...

class StdVectorByte(object):
    """Wrapper for std::vector<unsigned char>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: System.UInt64): ...
    @overload
    def __init__(self, other: StdVectorByte): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def CopyTo(self, other: StdVectorByte) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> System.UInt64: ...
    @overload
    def Memory() -> System.IntPtr: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Byte]: ...

class SimpleArrayFloat(object):
    """Wrapper for ON_SimpleArray<float>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: int): ...
    @overload
    def __init__(self, other: SimpleArrayFloat): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def Array() -> System.IntPtr: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def CopyTo(self, other: SimpleArrayFloat) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Single]: ...

class StdVectorFloat(object):
    """Wrapper for ON_SimpleArray<float>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: System.UInt64): ...
    @overload
    def __init__(self, other: StdVectorFloat): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def CopyTo(self, other: StdVectorFloat) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> System.UInt64: ...
    @overload
    def Memory() -> System.IntPtr: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Single]: ...

class SimpleArrayGuidPointer(object):
    """Wrapper for ON_SimpleArray<ON_UUID>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> System.Guid: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Guid]: ...

class SimpleArrayGuid(object):
    """Wrapper for ON_SimpleArray<ON_UUID>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def Append(self, uuid: System.Guid) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> System.Guid: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Guid]: ...

class SimpleArrayInterval(object):
    """Wrapper for ON_SimpleArray<ON_Interval>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, interval: Geometry.Interval) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.Interval]: ...

class SimpleArrayDouble(object):
    """Wrapper for ON_SimpleArray<double>. If you are not writing C++ code, then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[float]: ...

class SimpleArrayPoint2d(object):
    """ON_SimpleArray<ON_2dPoint> class wrapper. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.Point2d]: ...

class SimpleArrayPoint3d(object):
    """ON_SimpleArray<ON_3dPoint>, ON_3dPointArray, ON_PolyLine all have the same size This class wraps all of these C++ versions. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def Add(self, pt: Geometry.Point3d) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.Point3d]: ...

class SimpleArrayArrayPoint3d(object):
    """Wrapper for ON_SimpleArray<ON_PolyLine*>, ON_SimpleArray<ON_3dPointArray*> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Geometry.Point3d: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def PointCountAt(self, index: int) -> int: ...
    @overload
    def PolylineAt(self, index: int) -> Geometry.Polyline: ...

class SimpleArrayPlane(object):
    """Wrapper for ON_SimpleArray<ON_Plane>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.Plane]: ...

class SimpleArrayLine(object):
    """Wrapper for ON_SimpleArray<ON_Line>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.Line]: ...

class SimpleArray2dex(object):
    """Wrapper for ON_SimpleArray<ON_2dex>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Rhino.System.Array[Rhino.IndexPair]: ...

class SimpleArraySurfacePointer(object):
    """Wrapper for a C++ ON_SimpleArray of ON_Surface* or constant ON_Surface*. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Surface]: ...

class SimpleArrayCurvePointer(object):
    """Wrapper for a C++ ON_SimpleArray of ON_Curve* or constant ON_Curve*. If you are not writing C++ code, then you can ignore this class.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, curves: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Curve]: ...

class SimpleArrayGeometryPointer(object):
    """Wrapper for a C++ ON_SimpleArray<ON_Geometry*>* or ON_SimpleArray<constant ON_Geometry*>. If you are not writing C++ code, then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, geometry: Generic.IEnumerable): ...
    @overload
    def __init__(self, geometry: Collections.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.GeometryBase]: ...

class SimpleArrayMeshPointer(object):
    """Represents a wrapper to an unmanaged array of mesh pointers.
Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, mesh: Geometry.Mesh, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Mesh]: ...

class StdVectorGuid(object):
    """Wrapper for std::vector<ON_UUID>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Generic.IEnumerable): ...
    @overload
    def Append(self, uuid: System.Guid) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> System.UInt64: ...
    @property
    def Item(self) -> System.Guid: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[System.Guid]: ...

class StdVectorOfSharedPtrToMesh(object):
    """Represents a wrapper to an unmanaged array of mesh pointers.
Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, mesh: Geometry.Mesh, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Mesh]: ...

class SimpleArrayMeshFace(object):
    """Wrapper for ON_SimpleArray<ON_MeshFace>. If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> Geometry.System.Array[Geometry.MeshFace]: ...

class SimpleArraySubDPointer(object):
    """Wrapper for a C++ ON_SimpleArray<ON_SubD*> or ON_SimpleArray<constant ON_SubD*> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, subd: Geometry.SubD, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.SubD]: ...

class SimpleArrayBrepPointer(object):
    """Wrapper for a C++ ON_SimpleArray<ON_Brep*> or ON_SimpleArray<constant ON_Brep*> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, brep: Geometry.Brep, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Brep]: ...

class SimpleArrayLinetypePointer(object):
    """Wrapper for a C++ ON_SimpleArray<ON_Linetype*> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> DocObjects.System.Array[DocObjects.Linetype]: ...

class SimpleArrayExtrusionPointer(object):
    """Wrapper for a C++ ON_SimpleArray<ON_Extrusion*> or ON_SimpleArray<constant ON_Extrusion*> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, extrusion: Geometry.Extrusion, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> Geometry.System.Array[Geometry.Extrusion]: ...

class SimpleArrayBinaryArchiveReader(object):
    """Wrapper for ON_SimpleArray<ON_BinaryArchive>. If you are not writing C++ code then this class is not for you.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, p: System.IntPtr): ...
    @overload
    def Add(self, reader: FileIO.BinaryArchiveReader) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def Get(self, index: int) -> FileIO.BinaryArchiveReader: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...

class ClassArrayString(object):
    """Wrapper for a C++ ON_ClassArray<ON_wString> If you are not writing C++ code then this class is not for you.

    """
    def __init__(self): ...
    @overload
    def Add(self, s: str) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToArray() -> System.System.Array[str]: ...

class ClassArrayObjRef(object):
    """Represents a wrapper to an unmanaged "array" (list) of CRhinoObjRef instances.
Wrapper for a C++ ON_ClassArray of CRhinoObjRef

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, objrefs: Generic.IEnumerable): ...
    @overload
    def __init__(self, ptr: System.IntPtr, deleteOnDispose: bool): ...
    @overload
    def Add(self, objref: DocObjects.ObjRef) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> DocObjects.System.Array[DocObjects.ObjRef]: ...

class ClassArrayOnObjRef(object):
    """Represents a wrapper to an unmanaged "array" (list) of ON_ObjRef instances.
Wrapper for a C++ ON_ClassArray of ON_ObjRef

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, objrefs: Generic.IEnumerable): ...
    @overload
    def Add(self, objref: DocObjects.ObjRef) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def ToNonConstArray() -> DocObjects.System.Array[DocObjects.ObjRef]: ...
    @overload
    def ToNonConstArray(self, doc: Rhino.RhinoDoc) -> DocObjects.System.Array[DocObjects.ObjRef]: ...

class SimpleArrayClippingPlaneObjectPointer(object):
    """ON_SimpleArray of CRhinoClippingPlaneObject*

    """
    def __init__(self): ...
    @overload
    def Add(self, clippingplane: DocObjects.ClippingPlaneObject, asConst: bool) -> None: ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...

class CurveSegment(System.ValueType):
    """For internal use only.

    """
    @property
    def Index(self) -> int: ...
    @property
    def Reversed(self) -> bool: ...
    @property
    def SubDomain(self) -> Geometry.Interval: ...

class SimpleArrayHatchLinePointer(object):
    """Wrapper for a C++ ON_SimpleArray of ON_HatchLine*. If you are not writing C++ code, then you can ignore this class.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, hatchLines: Generic.IEnumerable): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...

class MeshPointDataStruct(System.ValueType):
    """This is only needed when passing values to the Rhino C++ core, ignore for .NET plug-ins.

    """
    @property
    def m_et(self) -> float: ...
    @property
    def m_ci_type(self) -> System.UInt32: ...
    @property
    def m_ci_index(self) -> int: ...
    @property
    def m_edge_index(self) -> int: ...
    @property
    def m_face_index(self) -> int: ...
    @property
    def m_Triangle(self) -> System.Char: ...
    @property
    def m_t0(self) -> float: ...
    @property
    def m_t1(self) -> float: ...
    @property
    def m_t2(self) -> float: ...
    @property
    def m_t3(self) -> float: ...
    @property
    def m_Px(self) -> float: ...
    @property
    def m_Py(self) -> float: ...
    @property
    def m_Pz(self) -> float: ...

class StringWrapper(object):
    """Represents a wrapper to an unmanaged OpenNurbs string.
Wraps a C++ ON_wString*.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def ConstPointer(self) -> System.IntPtr: ...
    @property
    def NonConstPointer(self) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetStringFromPointer(pConstON_wString: System.IntPtr) -> str: ...
    @overload
    def SetString(self, s: str) -> None: ...
    @overload
    @staticmethod
    def SetStringOnPointer(pON_wString: System.IntPtr, s: str) -> None: ...
    @overload
    def ToString() -> str: ...

class RhDisplayPoint(System.ValueType):
    """    """
    def __init__(self, location: Geometry.Point3d): ...
    @property
    def m_vertex(self) -> Geometry.Point3f: ...
    @property
    def m__padding1(self) -> System.Single: ...
    @property
    def m_style(self) -> int: ...
    @property
    def m_strokeColor(self) -> int: ...
    @property
    def m_fillColor(self) -> int: ...
    @property
    def m_diameterPixels(self) -> System.Single: ...
    @property
    def m_strokeWidthPixels(self) -> System.Single: ...
    @property
    def m_innerDiameterPixels(self) -> System.Single: ...
    @property
    def m_rotationRadians(self) -> System.Single: ...
    @property
    def m__padding2(self) -> System.Single: ...

# endregion
