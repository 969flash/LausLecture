"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Resources", "Ui", "UI"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["PlugIns", "Commands", "Collections", "NodeInCode", "Render", "Input", "ApplicationSettings", "UI", "Display", "FileIO", "DocObjects", "Geometry", "Runtime", "RuntimeEnvironment", "ReadFileResult", "UnitSystem", "AngleUnitSystem", "LengthValue", "ScaleValue", "RhinoFileWatcherChangeReason", "IEpsilonComparable", "IEpsilonFComparable", "GpuDeviceInfo", "DisplayDeviceInfo", "BitmapExtensions", "RhinoDoc", "RhinoDocObserverArgs", "IRhinoDocObserver", "DocumentEventArgs", "UnitsChangedWithScalingEventArgs", "DocumentOpenEventArgs", "DocumentSaveEventArgs", "RhinoWindow", "RhinoApp", "IndexPair", "RhinoMath", "AntialiasLevel", "Symbols", "PersistentSettingsConverter", "PersistentSettingsSavedEventArgs", "PersistentSettingsEventArgs", "PersistentSettings", "StringFormat", "ScaleStringFormat", "UserStringChangedArgs", "RenderContentTableEventType", "RenderContentTableEventArgs", "RenderMaterialAssignmentChangedEventArgs", "TextureMappingEventType", "TextureMappingEventArgs", "CommandLineTextWriter", "KeyboardHookEvent"]
# endregion

# region: Imports
from Rhino import ApplicationSettings
from Rhino import Collections
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import FileIO
from Rhino import Geometry
from Rhino import Input
from Rhino import PlugIns
from Rhino import Render
from Rhino import UI
from Rhino.DocObjects import Tables
from Rhino.Render import CustomRenderMeshes
from Rhino.Render import PostEffects
from System import Drawing
from System import IO
from System import Text
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class RuntimeEnvironment(enum.Enum):
    Unset = 0
    None_ = 1
    Windows = 2
    Apple = 3
    Android = 4
    Linux = 5
    WebAssembly = 6

class ReadFileResult(enum.Enum):
    Unset = 0
    Completed = 1
    CompletedWithErrors = 2
    Failed = 3

class UnitSystem(enum.Enum):
    None_ = 0
    Microns = 1
    Millimeters = 2
    Centimeters = 3
    Meters = 4
    Kilometers = 5
    Microinches = 6
    Mils = 7
    Inches = 8
    Feet = 9
    Miles = 10
    CustomUnits = 11
    Angstroms = 12
    Nanometers = 13
    Decimeters = 14
    Dekameters = 15
    Hectometers = 16
    Megameters = 17
    Gigameters = 18
    Yards = 19
    PrinterPoints = 20
    PrinterPicas = 21
    NauticalMiles = 22
    AstronomicalUnits = 23
    LightYears = 24
    Parsecs = 25
    Unset = 255

class AngleUnitSystem(enum.Enum):
    None_ = 0
    Turns = 1
    Radians = 2
    Degrees = 3
    Minutes = 4
    Seconds = 5
    Gradians = 6
    Unset = 255

class LengthValue(object):
    """Represents a length with an associated unit system and a string representation of that length. This allows for going back and forth from numerical representation of a length and a string representation without "guessing" at the initial string

    """
    @overload
    def ChangeLength(self, newLength: float) -> LengthValue: ...
    @overload
    def ChangeUnitSystem(self, newUnits: UnitSystem) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(s: str, ps: Input.StringParserSettings) -> (LengthValue, bool): ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format_: StringFormat) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format_: StringFormat, localeId: System.UInt32) -> LengthValue: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ContextAngleUnitSystem(self) -> AngleUnitSystem: ...
    @property
    def ContextLocaleId(self) -> System.UInt32: ...
    @property
    def LengthString(self) -> str: ...
    @property
    def LengthStringFormat(self) -> StringFormat: ...
    @property
    def ParseSettings(self) -> Input.StringParserSettings: ...
    @property
    def UnitSystem(self) -> UnitSystem: ...
    @overload
    def IsUnset() -> bool: ...
    @overload
    def Length() -> float: ...
    @overload
    def Length(self, units: UnitSystem) -> float: ...

class ScaleValue(object):
    """Represents a scale with associated LengthValues and string representations of the scale. This allows for going back and forth from numerical representations of a scale and a string representation without "guessing" at the initial scale.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def Create(s: str, ps: Input.StringParserSettings) -> ScaleValue: ...
    @overload
    @staticmethod
    def Create(left: LengthValue, right: LengthValue, format_: ScaleStringFormat) -> ScaleValue: ...
    @overload
    def Dispose() -> None: ...
    @property
    def LeftToRightScale(self) -> float: ...
    @property
    def RightToLeftScale(self) -> float: ...
    @overload
    def IsUnset() -> bool: ...
    @overload
    def LeftLengthValue() -> LengthValue: ...
    @overload
    @staticmethod
    def OneToOne() -> ScaleValue: ...
    @overload
    def RightLengthValue() -> LengthValue: ...

class RhinoFileWatcherChangeReason(enum.Enum):
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 5

class IEpsilonComparable:
    """    IEpsilonComparable[T]
    """
    @overload
    def EpsilonEquals(self, other: T, epsilon: float) -> bool: ...

class IEpsilonFComparable:
    """    IEpsilonFComparable[T]
    """
    @overload
    def EpsilonEquals(self, other: T, epsilon: System.Single) -> bool: ...

class GpuDeviceInfo(object):
    """Represents a GPU device providing name, vendor and memory all as strings. Currently fully implemented only on Windows.

    """
    @property
    def DriverDateAsString(self) -> str: ...
    @property
    def Memory(self) -> System.UInt64: ...
    @property
    def MemoryAsString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Vendor(self) -> str: ...

class DisplayDeviceInfo(object):
    """Get information about display devices found on this machine (GPUs).

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def GpuDeviceInfos() -> Generic.List: ...
    @overload
    @staticmethod
    def GpuNames() -> Generic.List: ...

class BitmapExtensions(object):
    """Rhino specific extension methods for System.Drawing.Bitmap

    """
    @overload
    @staticmethod
    def BitmapAsTextureFileReference(bitmap: Drawing.Bitmap, crc: System.UInt32) -> FileIO.FileReference: ...
    @overload
    @staticmethod
    def ConvertToNormalMap(bitmap: Drawing.Bitmap, bLossyCompressionSource: bool) -> (Drawing.Bitmap, bool): ...
    @overload
    @staticmethod
    def IsNormalMap(bitmap: Drawing.Bitmap, bLossyCompressionSource: bool) -> (bool, bool): ...

class RhinoDoc(object):
    """Represents an active model.

    """
    @overload
    def AddCustomUndoEvent(self, description: str, handler: System.EventHandler) -> bool: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: System.EventHandler, tag: object) -> bool: ...
    @overload
    def AdjustModelUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @overload
    def AdjustPageUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @overload
    def Audit(self, textLog: FileIO.TextLog, attemptRepair: bool) -> bool: ...
    @overload
    def BeginUndoRecord(self, description: str) -> System.UInt32: ...
    @overload
    def ClearRedoRecords() -> None: ...
    @overload
    def ClearUndoRecords(self, purgeDeletedObjects: bool) -> None: ...
    @overload
    def ClearUndoRecords(self, undoSerialNumber: System.UInt32, purgeDeletedObjects: bool) -> None: ...
    @overload
    @staticmethod
    def Create(modelTemplateFileName: str) -> RhinoDoc: ...
    @overload
    def CreateDefaultAttributes() -> DocObjects.ObjectAttributes: ...
    @overload
    @staticmethod
    def CreateHeadless(file3dmTemplatePath: str) -> RhinoDoc: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: Geometry.MeshType, vp: DocObjects.ViewportInfo, plugin: PlugIns.PlugIn, attrs: Display.DisplayPipelineAttributes) -> (bool, CustomRenderMeshes.Flags, Geometry.BoundingBox): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EndUndoRecord(self, undoRecordSerialNumber: System.UInt32) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Export(self, filePath: str) -> bool: ...
    @overload
    def Export(self, filePath: str, options: Collections.ArchivableDictionary) -> bool: ...
    @overload
    def ExportSelected(self, filePath: str) -> bool: ...
    @overload
    def ExportSelected(self, filePath: str, options: Collections.ArchivableDictionary) -> bool: ...
    @overload
    @staticmethod
    def ExtractPreviewImage(path: str) -> Drawing.Bitmap: ...
    @overload
    def FindFile(self, filename: str) -> str: ...
    @overload
    def FormatNumber(self, value: float) -> str: ...
    @overload
    def FormatNumber(self, value: float, appendUnitSystemName: bool, abbreviate: bool) -> str: ...
    @overload
    @staticmethod
    def FromFilePath(filePath: str) -> RhinoDoc: ...
    @overload
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: System.UInt32) -> RhinoDoc: ...
    @property
    def ActiveCommandId(self) -> System.Guid: ...
    @property
    def ActiveDoc(self) -> RhinoDoc: ...
    @property
    def ActiveSpace(self) -> DocObjects.ActiveSpace: ...
    @property
    def AnimationProperties(self) -> DocObjects.AnimationProperties: ...
    @property
    def Bitmaps(self) -> Tables.BitmapTable: ...
    @property
    def CurrentEnvironment(self) -> Render.ICurrentEnvironment: ...
    @property
    def CurrentUndoRecordSerialNumber(self) -> System.UInt32: ...
    @property
    def CustomRenderSizes(self) -> Generic.List: ...
    @property
    def DateCreated(self) -> System.DateTime: ...
    @property
    def DateLastEdited(self) -> System.DateTime: ...
    @property
    def DimStyles(self) -> Tables.DimStyleTable: ...
    @property
    def DistanceDisplayPrecision(self) -> int: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def EarthAnchorPoint(self) -> DocObjects.EarthAnchorPoint: ...
    @property
    def Fonts(self) -> Tables.FontTable: ...
    @property
    def GroundPlane(self) -> Render.GroundPlane: ...
    @property
    def Groups(self) -> Tables.GroupTable: ...
    @property
    def HatchPatterns(self) -> Tables.HatchPatternTable: ...
    @property
    def InGetPoint(self) -> bool: ...
    @property
    def InstanceDefinitions(self) -> Tables.InstanceDefinitionTable: ...
    @property
    def IsAvailable(self) -> bool: ...
    @property
    def IsClosing(self) -> bool: ...
    @property
    def IsCommandRunning(self) -> bool: ...
    @property
    def IsCreating(self) -> bool: ...
    @property
    def IsHeadless(self) -> bool: ...
    @property
    def IsInitializing(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsOpening(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSendingMail(self) -> bool: ...
    @property
    def Layers(self) -> Tables.LayerTable: ...
    @property
    def LayoutSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def Lights(self) -> Tables.LightTable: ...
    @property
    def Linetypes(self) -> Tables.LinetypeTable: ...
    @property
    def Manifest(self) -> FileIO.ManifestTable: ...
    @property
    def Materials(self) -> Tables.MaterialTable: ...
    @property
    def MeshingParameterStyle(self) -> Geometry.MeshingParameterStyle: ...
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @property
    def ModelBasepoint(self) -> Geometry.Point3d: ...
    @property
    def ModelDistanceDisplayPrecision(self) -> int: ...
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @property
    def ModelSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceHatchScale(self) -> float: ...
    @property
    def ModelSpaceHatchScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceTextScale(self) -> float: ...
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamedConstructionPlanes(self) -> Tables.NamedConstructionPlaneTable: ...
    @property
    def NamedLayerStates(self) -> Tables.NamedLayerStateTable: ...
    @property
    def NamedPositions(self) -> Tables.NamedPositionTable: ...
    @property
    def NamedViews(self) -> Tables.NamedViewTable: ...
    @property
    def NextUndoRecordSerialNumber(self) -> System.UInt32: ...
    @property
    def Notes(self) -> str: ...
    @property
    def NotesLocked(self) -> bool: ...
    @property
    def Objects(self) -> Tables.ObjectTable: ...
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @property
    def PageDistanceDisplayPrecision(self) -> int: ...
    @property
    def PageRelativeTolerance(self) -> float: ...
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @property
    def Path(self) -> str: ...
    @property
    def PostEffects(self) -> PostEffects.IPostEffects: ...
    @property
    def RedoActive(self) -> bool: ...
    @property
    def RenderEnvironments(self) -> Render.RenderEnvironmentTable: ...
    @property
    def RenderMaterials(self) -> Render.RenderMaterialTable: ...
    @property
    def RenderSettings(self) -> Render.RenderSettings: ...
    @property
    def RenderTextures(self) -> Render.RenderTextureTable: ...
    @property
    def RuntimeData(self) -> Tables.RuntimeDocumentDataTable: ...
    @property
    def RuntimeSerialNumber(self) -> System.UInt32: ...
    @property
    def Snapshots(self) -> Tables.SnapshotTable: ...
    @property
    def Strings(self) -> Tables.StringTable: ...
    @property
    def SubDAppearance(self) -> Geometry.SubDComponentLocation: ...
    @property
    def TemplateFileUsed(self) -> str: ...
    @property
    def UndoActive(self) -> bool: ...
    @property
    def UndoRecordingEnabled(self) -> bool: ...
    @property
    def UndoRecordingIsActive(self) -> bool: ...
    @property
    def Views(self) -> Tables.ViewTable: ...
    @property
    def Worksession(self) -> DocObjects.Worksession: ...
    @overload
    def GetAnalysisMeshingParameters() -> Geometry.MeshingParameters: ...
    @overload
    def GetCurrentMeshingParameters() -> Geometry.MeshingParameters: ...
    @overload
    def GetCustomUnitSystem(self, modelUnits: bool) -> (bool, str, float): ...
    @overload
    def GetEmbeddedFilesList(self, missingOnly: bool) -> System.System.Array[str]: ...
    @overload
    def GetGridDefaults() -> DocObjects.ConstructionPlaneGridDefaults: ...
    @overload
    def GetGumballPlane() -> (bool, Geometry.Plane): ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMeshingParameters(self, style: Geometry.MeshingParameterStyle) -> Geometry.MeshingParameters: ...
    @overload
    def GetUnitSystemName(self, modelUnits: bool, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...
    @overload
    def HasCustomRenderMeshes(self, mt: Geometry.MeshType, vp: DocObjects.ViewportInfo, plugin: PlugIns.PlugIn, attrs: Display.DisplayPipelineAttributes) -> (bool, CustomRenderMeshes.Flags): ...
    @overload
    def Import(self, filePath: str) -> bool: ...
    @overload
    def Import(self, filePath: str, options: Collections.ArchivableDictionary) -> bool: ...
    @overload
    def InCommand(self, bIgnoreScriptRunnerCommands: bool) -> int: ...
    @overload
    def IsMetricUnitSystem(self, modelUnits: bool) -> bool: ...
    @overload
    @staticmethod
    def Open(filePath: str) -> (RhinoDoc, bool): ...
    @overload
    @staticmethod
    def OpenDocuments() -> System.Array[RhinoDoc]: ...
    @overload
    @staticmethod
    def OpenDocuments(includeHeadless: bool) -> System.Array[RhinoDoc]: ...
    @overload
    @staticmethod
    def OpenHeadless(file3dmPath: str) -> RhinoDoc: ...
    @overload
    @staticmethod
    def ReadFile(path: str, options: FileIO.FileReadOptions) -> bool: ...
    @overload
    def ReadFileVersion() -> int: ...
    @overload
    def Redo() -> bool: ...
    @overload
    def RenderMeshes(self, mt: Geometry.MeshType, vp: DocObjects.ViewportInfo, plugin: PlugIns.PlugIn, attrs: Display.DisplayPipelineAttributes) -> (CustomRenderMeshes.System.Array[CustomRenderMeshes.RenderMeshes], CustomRenderMeshes.Flags): ...
    @overload
    def Save() -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int, saveSmall: bool, saveTextures: bool, saveGeometryOnly: bool, savePluginData: bool) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str, version: int) -> bool: ...
    @overload
    def SelectRenderContentInEditor(self, collection: Render.RenderContentCollection, append: bool) -> None: ...
    @ActiveDoc.setter
    def ActiveDoc(self, value: System.Void): ...
    @AnimationProperties.setter
    def AnimationProperties(self, value: System.Void): ...
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self, value: System.Void): ...
    @LayoutSpaceAnnotationScalingEnabled.setter
    def LayoutSpaceAnnotationScalingEnabled(self, value: System.Void): ...
    @MeshingParameterStyle.setter
    def MeshingParameterStyle(self, value: System.Void): ...
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self, value: System.Void): ...
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self, value: System.Void): ...
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self, value: System.Void): ...
    @ModelBasepoint.setter
    def ModelBasepoint(self, value: System.Void): ...
    @ModelDistanceDisplayPrecision.setter
    def ModelDistanceDisplayPrecision(self, value: System.Void): ...
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self, value: System.Void): ...
    @ModelSpaceAnnotationScalingEnabled.setter
    def ModelSpaceAnnotationScalingEnabled(self, value: System.Void): ...
    @ModelSpaceHatchScale.setter
    def ModelSpaceHatchScale(self, value: System.Void): ...
    @ModelSpaceHatchScalingEnabled.setter
    def ModelSpaceHatchScalingEnabled(self, value: System.Void): ...
    @ModelSpaceTextScale.setter
    def ModelSpaceTextScale(self, value: System.Void): ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: System.Void): ...
    @Modified.setter
    def Modified(self, value: System.Void): ...
    @Notes.setter
    def Notes(self, value: System.Void): ...
    @NotesLocked.setter
    def NotesLocked(self, value: System.Void): ...
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self, value: System.Void): ...
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self, value: System.Void): ...
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self, value: System.Void): ...
    @PageDistanceDisplayPrecision.setter
    def PageDistanceDisplayPrecision(self, value: System.Void): ...
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self, value: System.Void): ...
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: System.Void): ...
    @RenderSettings.setter
    def RenderSettings(self, value: System.Void): ...
    @SubDAppearance.setter
    def SubDAppearance(self, value: System.Void): ...
    @UndoRecordingEnabled.setter
    def UndoRecordingEnabled(self, value: System.Void): ...
    @overload
    def SetCustomMeshingParameters(self, mp: Geometry.MeshingParameters) -> None: ...
    @overload
    def SetCustomUnitSystem(self, modelUnits: bool, customUnitName: str, metersPerCustomUnit: float, scale: bool) -> bool: ...
    @overload
    def SetGridDefaults(self, defaults: DocObjects.ConstructionPlaneGridDefaults) -> None: ...
    @overload
    def Undo() -> bool: ...
    @overload
    def Write3dmFile(self, path: str, options: FileIO.FileWriteOptions) -> bool: ...
    @overload
    def WriteFile(self, path: str, options: FileIO.FileWriteOptions) -> bool: ...
    @property
    def CloseDocument(self): ...
    @property
    def NewDocument(self): ...
    @property
    def ActiveDocumentChanged(self): ...
    @property
    def DocumentPropertiesChanged(self): ...
    @property
    def UnitsChangedWithScaling(self): ...
    @property
    def UserStringChanged(self): ...
    @property
    def BeginOpenDocument(self): ...
    @property
    def EndOpenDocument(self): ...
    @property
    def EndOpenDocumentInitialiViewUpdate(self): ...
    @property
    def EndOpenDocumentInitialViewUpdate(self): ...
    @property
    def BeginSaveDocument(self): ...
    @property
    def EndSaveDocument(self): ...
    @property
    def AddRhinoObject(self): ...
    @property
    def DeleteRhinoObject(self): ...
    @property
    def ReplaceRhinoObject(self): ...
    @property
    def UndeleteRhinoObject(self): ...
    @property
    def PurgeRhinoObject(self): ...
    @property
    def SelectObjects(self): ...
    @property
    def DeselectObjects(self): ...
    @property
    def DeselectAllObjects(self): ...
    @property
    def ModifyObjectAttributes(self): ...
    @property
    def BeforeTransformObjects(self): ...
    @property
    def AfterTransformObjects(self): ...
    @property
    def LayerTableEvent(self): ...
    @property
    def LinetypeTableEvent(self): ...
    @property
    def HatchPatternTableEvent(self): ...
    @property
    def DimensionStyleTableEvent(self): ...
    @property
    def InstanceDefinitionTableEvent(self): ...
    @property
    def LightTableEvent(self): ...
    @property
    def MaterialTableEvent(self): ...
    @property
    def GroupTableEvent(self): ...
    @property
    def RenderMaterialsTableEvent(self): ...
    @property
    def RenderEnvironmentTableEvent(self): ...
    @property
    def RenderTextureTableEvent(self): ...
    @property
    def TextureMappingEvent(self): ...

class RhinoDocObserverArgs(object):
    """Arguments passed to
methods.

    """
    def __init__(self, doc: RhinoDoc): ...
    @property
    def Doc(self) -> RhinoDoc: ...
    @property
    def RuntimeSerialNumber(self) -> System.UInt32: ...

class IRhinoDocObserver:
    """Implement this interface if you are a modeless interface to aid in handling multiple document implementations

    """
    @overload
    def ActiveRhinoDocChanged(self, e: RhinoDocObserverArgs) -> None: ...
    @overload
    def RhinoDocClosed(self, e: RhinoDocObserverArgs) -> None: ...

class DocumentEventArgs(System.EventArgs):
    """Provides document information for RhinoDoc events.

    """
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> System.UInt32: ...

class UnitsChangedWithScalingEventArgs(System.EventArgs):
    """Provides information about UnitsChangedWithScaling events.

    """
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> System.UInt32: ...
    @property
    def Scale(self) -> float: ...

class DocumentOpenEventArgs(DocumentEventArgs):
    """Provides document information for RhinoDoc events.

    """
    @property
    def FileName(self) -> str: ...
    @property
    def Merge(self) -> bool: ...
    @property
    def Reference(self) -> bool: ...

class DocumentSaveEventArgs(DocumentEventArgs):
    """Provides document information for RhinoDoc events.

    """
    @property
    def ExportSelected(self) -> bool: ...
    @property
    def FileName(self) -> str: ...

class RhinoWindow(object):
    """Represents the top level window in Rhino

    """
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    def Invoke(self, method: System.Delegate) -> None: ...

class RhinoApp(object):
    """.NET RhinoApp is parallel to C++ CRhinoApp.

    """
    @overload
    @staticmethod
    def AskUserForRhinoLicense(standAlone: bool, parentWindow: object) -> bool: ...
    @overload
    @staticmethod
    def CapturedCommandWindowStrings(clearBuffer: bool) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ChangeLicenseKey(pluginId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def ClearCommandHistoryWindow() -> None: ...
    @overload
    @staticmethod
    def ExecuteCommand(document: RhinoDoc, commandName: str) -> Commands.Result: ...
    @overload
    @staticmethod
    def Exit() -> None: ...
    @overload
    @staticmethod
    def Exit(allowCancel: bool) -> None: ...
    @property
    def BuildDate(self) -> System.DateTime: ...
    @property
    def CanSave(self) -> bool: ...
    @property
    def CheckNewObject(self) -> bool: ...
    @property
    def CommandHistoryWindowText(self) -> str: ...
    @property
    def CommandLineOut(self) -> CommandLineTextWriter: ...
    @property
    def CommandPrompt(self) -> str: ...
    @property
    def CommandWindowCaptureEnabled(self) -> bool: ...
    @property
    def CurrentRhinoId(self) -> System.Guid: ...
    @property
    def DaysUntilExpiration(self) -> int: ...
    @property
    def DefaultUiFont(self) -> DocObjects.Font: ...
    @property
    def ExeServiceRelease(self) -> int: ...
    @property
    def ExeVersion(self) -> int: ...
    @property
    def InCommand(self) -> int: ...
    @property
    def InstallationType(self) -> ApplicationSettings.Installation: ...
    @property
    def InstallationTypeString(self) -> str: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsClosing(self) -> bool: ...
    @property
    def IsCloudZooNode(self) -> bool: ...
    @property
    def IsExiting(self) -> bool: ...
    @property
    def IsInternetAccessAllowed(self) -> bool: ...
    @property
    def IsLicenseValidated(self) -> bool: ...
    @property
    def IsOnMainThread(self) -> bool: ...
    @property
    def IsParentDesktop(self) -> bool: ...
    @property
    def IsPreRelease(self) -> bool: ...
    @property
    def IsRunningAutomated(self) -> bool: ...
    @property
    def IsRunningHeadless(self) -> bool: ...
    @property
    def IsSafeModeEnabled(self) -> bool: ...
    @property
    def IsSkinned(self) -> bool: ...
    @property
    def LicenseExpires(self) -> bool: ...
    @property
    def LicenseUserName(self) -> str: ...
    @property
    def LicenseUserOrganization(self) -> str: ...
    @property
    def LoggedInUserAvatar(self) -> Drawing.Image: ...
    @property
    def LoggedInUserName(self) -> str: ...
    @property
    def MainApplicationWindow(self) -> RhinoWindow: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> ApplicationSettings.LicenseNode: ...
    @property
    def Rhino2Id(self) -> System.Guid: ...
    @property
    def Rhino3Id(self) -> System.Guid: ...
    @property
    def Rhino4Id(self) -> System.Guid: ...
    @property
    def Rhino5Id(self) -> System.Guid: ...
    @property
    def Rhino6Id(self) -> System.Guid: ...
    @property
    def Rhino7Id(self) -> System.Guid: ...
    @property
    def SchemeName(self) -> str: ...
    @property
    def SdkServiceRelease(self) -> int: ...
    @property
    def SdkVersion(self) -> int: ...
    @property
    def SendWriteToConsole(self) -> bool: ...
    @property
    def SerialNumber(self) -> str: ...
    @property
    def ToolbarFiles(self) -> UI.ToolbarFileCollection: ...
    @property
    def UpdatesAndStatisticsStatus(self) -> int: ...
    @property
    def UserIsLoggedIn(self) -> bool: ...
    @property
    def ValidationGracePeriodDaysLeft(self) -> int: ...
    @property
    def Version(self) -> System.Version: ...
    @property
    def VersionControlRevision(self) -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool) -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool, subDirectory: str) -> str: ...
    @overload
    @staticmethod
    def GetExecutableDirectory() -> IO.DirectoryInfo: ...
    @overload
    @staticmethod
    def GetPlugInObject(plugin: str) -> object: ...
    @overload
    @staticmethod
    def GetPlugInObject(pluginId: System.Guid) -> object: ...
    @overload
    @staticmethod
    def InFullScreen() -> bool: ...
    @overload
    @staticmethod
    def InvokeAndWait(action: System.Action) -> None: ...
    @overload
    @staticmethod
    def InvokeOnUiThread(method: System.Delegate, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def IsInstallationBeta(licenseType: ApplicationSettings.Installation) -> bool: ...
    @overload
    @staticmethod
    def IsInstallationCommercial(licenseType: ApplicationSettings.Installation) -> bool: ...
    @overload
    @staticmethod
    def IsInstallationEvaluation(licenseType: ApplicationSettings.Installation) -> bool: ...
    @overload
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def MainWindowHandle() -> System.IntPtr: ...
    @overload
    @staticmethod
    def OutputDebugString(str_: str) -> None: ...
    @overload
    @staticmethod
    def ParseTextField(formula: str, obj: DocObjects.RhinoObject, topParentObject: DocObjects.RhinoObject) -> str: ...
    @overload
    @staticmethod
    def ParseTextField(formula: str, obj: DocObjects.RhinoObject, topParentObject: DocObjects.RhinoObject, immediateParent: DocObjects.InstanceObject) -> str: ...
    @overload
    @staticmethod
    def PostCancelEvent(runtimeDocSerialNumber: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def PostEnterEvent(runtimeDocSerialNumber: System.UInt32, bRepeatedEnter: bool) -> None: ...
    @overload
    @staticmethod
    def RefreshRhinoLicense() -> bool: ...
    @overload
    @staticmethod
    def ReleaseMouseCapture() -> bool: ...
    @overload
    @staticmethod
    def RunMenuScript(script: str) -> bool: ...
    @overload
    @staticmethod
    def RunningInRdp() -> bool: ...
    @overload
    @staticmethod
    def RunningOnVMWare() -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: System.UInt32, script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: System.UInt32, script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def SendKeystrokes(characters: str, appendReturn: bool) -> None: ...
    @CheckNewObject.setter
    def CheckNewObject(self, value: System.Void): ...
    @CommandPrompt.setter
    def CommandPrompt(self, value: System.Void): ...
    @CommandWindowCaptureEnabled.setter
    def CommandWindowCaptureEnabled(self, value: System.Void): ...
    @SendWriteToConsole.setter
    def SendWriteToConsole(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str, promptDefault: str) -> None: ...
    @overload
    @staticmethod
    def SetCommandPromptMessage(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow() -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow(doc: RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def Wait() -> None: ...
    @overload
    @staticmethod
    def Write(message: str) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine() -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @property
    def EscapeKeyPressed(self): ...
    @property
    def KeyboardEvent(self): ...
    @property
    def Initialized(self): ...
    @property
    def Closing(self): ...
    @property
    def AppSettingsChanged(self): ...
    @property
    def Idle(self): ...
    @property
    def MainLoop(self): ...
    @property
    def LicenseStateChanged(self): ...
    @property
    def RdkNewDocument(self): ...
    @property
    def RdkGlobalSettingsChanged(self): ...
    @property
    def RdkUpdateAllPreviews(self): ...
    @property
    def RdkCacheImageChanged(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def RdkPlugInUnloading(self): ...

class IndexPair(System.ValueType):
    """Represents two indices: I and J.

    """
    def __init__(self, i: int, j: int): ...
    @overload
    def Contains(self, item: int) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[int], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def I(self) -> int: ...
    @property
    def Item(self) -> int: ...
    @property
    def J(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: int) -> int: ...
    @I.setter
    def I(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @J.setter
    def J(self, value: System.Void): ...

class RhinoMath(object):
    """Provides constants and static methods that are additional to
.

    """
    @property
    def HalfPI(self) -> float: ...
    @property
    def QuarterPI(self) -> float: ...
    @property
    def TwoPI(self) -> float: ...
    @property
    def Tau(self) -> float: ...
    @property
    def ZeroTolerance(self) -> float: ...
    @property
    def UnsetValue(self) -> float: ...
    @property
    def Epsilon(self) -> float: ...
    @property
    def SqrtEpsilon(self) -> float: ...
    @property
    def DefaultAngleTolerance(self) -> float: ...
    @property
    def DefaultDistanceToleranceMillimeters(self) -> float: ...
    @property
    def UnsetSingle(self) -> System.Single: ...
    @property
    def UnsetIntIndex(self) -> int: ...
    @overload
    @staticmethod
    def Clamp(value: int, bound1: int, bound2: int) -> int: ...
    @overload
    @staticmethod
    def Clamp(value: float, bound1: float, bound2: float) -> float: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: System.UInt32, value: float) -> System.UInt32: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: System.UInt32, value: int) -> System.UInt32: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: System.UInt32, buffer: System.System.Array[System.Byte]) -> System.UInt32: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: System.Single, y: System.Single, epsilon: System.Single) -> bool: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: float, y: float, epsilon: float) -> bool: ...
    @overload
    @staticmethod
    def EvaluateNormal(limitDirection: int, ds: Geometry.Vector3d, dt: Geometry.Vector3d, dss: Geometry.Vector3d, dst: Geometry.Vector3d, dtt: Geometry.Vector3d) -> (bool, Geometry.Vector3d): ...
    @overload
    @staticmethod
    def EvaluateNormalPartials(ds: Geometry.Vector3d, dt: Geometry.Vector3d, dss: Geometry.Vector3d, dst: Geometry.Vector3d, dtt: Geometry.Vector3d) -> (bool, Geometry.Vector3d, Geometry.Vector3d): ...
    @overload
    @staticmethod
    def EvaluateSectionalCurvature(ds: Geometry.Vector3d, dt: Geometry.Vector3d, dss: Geometry.Vector3d, dst: Geometry.Vector3d, dtt: Geometry.Vector3d, planeNormal: Geometry.Vector3d) -> (bool, Geometry.Vector3d): ...
    @overload
    @staticmethod
    def IntIndexToString(index: int) -> str: ...
    @overload
    @staticmethod
    def IsValidDouble(x: float) -> bool: ...
    @overload
    @staticmethod
    def IsValidSingle(x: System.Single) -> bool: ...
    @overload
    @staticmethod
    def MetersPerUnit(units: UnitSystem) -> float: ...
    @overload
    @staticmethod
    def ParseNumber(expression: str) -> float: ...
    @overload
    @staticmethod
    def ToDegrees(radians: float) -> float: ...
    @overload
    @staticmethod
    def ToRadians(degrees: float) -> float: ...
    @overload
    @staticmethod
    def TryParseNumber(expression: str) -> (bool, float): ...
    @overload
    @staticmethod
    def UnitScale(from_: UnitSystem, to: UnitSystem) -> float: ...
    @overload
    @staticmethod
    def UnitScale(from_: UnitSystem, fromMetersPerUnit: float, to: UnitSystem, toMetersPerUnit: float) -> float: ...
    @overload
    @staticmethod
    def Wrap(value: float, bound1: float, bound2: float) -> float: ...

class AntialiasLevel(enum.Enum):
    None_ = 0
    Draft = 1
    Good = 2
    High = 3

class Symbols(object):
    """Characters used for different 'drafting style' symbols

    """
    @property
    def DegreeSymbol(self) -> System.Char: ...
    @property
    def DiameterSymbol(self) -> System.Char: ...
    @property
    def PlusMinusSymbol(self) -> System.Char: ...
    @property
    def RadiusSymbol(self) -> System.Char: ...

class PersistentSettingsConverter(object):
    """Used to convert string to string lists and string dictionaries and back to strings again.

    """
    @overload
    @staticmethod
    def IsStringDictionary(s: str) -> bool: ...
    @overload
    @staticmethod
    def IsStringList(s: str) -> bool: ...
    @overload
    @staticmethod
    def ToString(values: System.System.Array[str]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Generic.System.Array[Generic.KeyValuePair]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @overload
    @staticmethod
    def TryParseDouble(s: str) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParseEnum(type_: System.Type, intValueAsString: str) -> (bool, str): ...
    @overload
    @staticmethod
    def TryParseEnum(type_: System.Type, enumValueName: str) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParseStringDictionary(s: str) -> (bool, Generic.System.Array[Generic.KeyValuePair]): ...
    @overload
    @staticmethod
    def TryParseStringList(s: str) -> (bool, System.System.Array[str]): ...

class PersistentSettingsSavedEventArgs(System.EventArgs):
    """Event argument passed to the
event.

    """
    @overload
    def CommandSettings(self, englishCommandName: str) -> PersistentSettings: ...
    @property
    def PlugInSettings(self) -> PersistentSettings: ...
    @property
    def SavedByThisRhino(self) -> bool: ...

class PersistentSettingsEventArgs(System.EventArgs):
    """Represents event data that is passed as state in persistent settings events.

    """
    @property
    def Cancel(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...

class PersistentSettingsEventArgs(PersistentSettingsEventArgs):
    """Represents the persistent settings modification event arguments.

    PersistentSettingsEventArgs[T]
    """
    def __init__(self, currentValue: T, newValue: T): ...
    @property
    def CurrentValue(self) -> T: ...
    @property
    def NewValue(self) -> T: ...
    @CurrentValue.setter
    def CurrentValue(self, value: System.Void): ...

class PersistentSettings(object):
    """A dictionary of SettingValue items.

    """
    @overload
    def AddChild(self, key: str) -> PersistentSettings: ...
    @overload
    def ClearChangedFlag() -> None: ...
    @overload
    def ContainsChangedValues() -> bool: ...
    @overload
    def ContainsModifiedValues(self, allUserSettings: PersistentSettings) -> bool: ...
    @overload
    def DeleteChild(self, key: str) -> None: ...
    @overload
    def DeleteItem(self, key: str) -> None: ...
    @overload
    @staticmethod
    def FromPlugInId(pluginId: System.Guid) -> PersistentSettings: ...
    @property
    def ChildKeys(self) -> Generic.ICollection: ...
    @property
    def HiddenFromUserInterface(self) -> bool: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def RhinoAppSettings(self) -> PersistentSettings: ...
    @property
    def StringListRootKey(self) -> str: ...
    @overload
    def GetBool(self, key: str) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool, legacyKeyList: Generic.IEnumerable) -> bool: ...
    @overload
    def GetByte(self, key: str) -> System.Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: System.Byte) -> System.Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: System.Byte, legacyKeyList: Generic.IEnumerable) -> System.Byte: ...
    @overload
    def GetChar(self, key: str) -> System.Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: System.Char) -> System.Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: System.Char, legacyKeyList: Generic.IEnumerable) -> System.Char: ...
    @overload
    def GetChild(self, key: str) -> PersistentSettings: ...
    @overload
    def GetColor(self, key: str) -> Drawing.Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: System.Nullable) -> System.Nullable: ...
    @overload
    def GetColor(self, key: str, defaultValue: Drawing.Color) -> Drawing.Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: System.Nullable, legacyKeyList: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    def GetColor(self, key: str, defaultValue: Drawing.Color, legacyKeyList: Generic.IEnumerable) -> Drawing.Color: ...
    @overload
    def GetDate(self, key: str) -> System.DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: System.DateTime) -> System.DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: System.DateTime, legacyKeyList: Generic.IEnumerable) -> System.DateTime: ...
    @overload
    def GetDouble(self, key: str) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float, legacyKeyList: Generic.IEnumerable) -> float: ...
    @overload
    def GetEnumValue(self, defaultValue: T) -> T: ...
    @overload
    def GetEnumValue(self, key: str) -> T: ...
    @overload
    def GetEnumValue(self, key: str, defaultValue: T) -> T: ...
    @overload
    def GetGuid(self, key: str) -> System.Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: System.Guid) -> System.Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: System.Guid, legacyKeyList: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def GetInteger(self, key: str) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, legacyKeyList: Generic.IEnumerable) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, lowerBound: int, upperBound: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, bound: int, boundIsLower: bool) -> int: ...
    @overload
    def GetPoint(self, key: str) -> Drawing.Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Drawing.Point) -> Drawing.Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Drawing.Point, legacyKeyList: Generic.IEnumerable) -> Drawing.Point: ...
    @overload
    def GetPoint3d(self, key: str) -> Geometry.Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Geometry.Point3d) -> Geometry.Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Geometry.Point3d, legacyKeyList: Generic.IEnumerable) -> Geometry.Point3d: ...
    @overload
    def GetRectangle(self, key: str) -> Drawing.Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Drawing.Rectangle, legacyKeyList: Generic.IEnumerable) -> Drawing.Rectangle: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str) -> bool: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Generic.IEnumerable) -> bool: ...
    @overload
    def GetSettingIsReadOnly(self, key: str) -> bool: ...
    @overload
    def GetSettingType(self, key: str) -> System.Type: ...
    @overload
    def GetSize(self, key: str) -> Drawing.Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Drawing.Size) -> Drawing.Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Drawing.Size, legacyKeyList: Generic.IEnumerable) -> Drawing.Size: ...
    @overload
    def GetString(self, key: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str, legacyKeyList: Generic.IEnumerable) -> str: ...
    @overload
    def GetStringDictionary(self, key: str) -> Generic.System.Array[Generic.KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Generic.System.Array[Generic.KeyValuePair]) -> Generic.System.Array[Generic.KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Generic.System.Array[Generic.KeyValuePair], legacyKeyList: Generic.IEnumerable) -> Generic.System.Array[Generic.KeyValuePair]: ...
    @overload
    def GetStringList(self, key: str) -> System.System.Array[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: System.System.Array[str]) -> System.System.Array[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: System.System.Array[str], legacyKeyList: Generic.IEnumerable) -> System.System.Array[str]: ...
    @overload
    def GetUnsignedInteger(self, key: str) -> System.UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: System.UInt32) -> System.UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: System.UInt32, legacyKeyList: Generic.IEnumerable) -> System.UInt32: ...
    @overload
    def GetValidator(self, key: str) -> System.EventHandler: ...
    @overload
    def HideSettingFromUserInterface(self, key: str) -> None: ...
    @overload
    def RegisterSettingsValidator(self, key: str, validator: System.EventHandler) -> None: ...
    @HiddenFromUserInterface.setter
    def HiddenFromUserInterface(self, value: System.Void): ...
    @overload
    def SetBool(self, key: str, value: bool) -> None: ...
    @overload
    def SetByte(self, key: str, value: System.Byte) -> None: ...
    @overload
    def SetChar(self, key: str, value: System.Char) -> None: ...
    @overload
    def SetColor(self, key: str, value: System.Nullable) -> None: ...
    @overload
    def SetColor(self, key: str, value: Drawing.Color) -> None: ...
    @overload
    def SetDate(self, key: str, value: System.DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.Nullable) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Geometry.Point3d) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Drawing.Color) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Drawing.Rectangle) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Drawing.Size) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Drawing.Point) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.System.Array[str]) -> None: ...
    @overload
    def SetDefault(self, key: str, value: bool) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.Byte) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.Guid) -> None: ...
    @overload
    def SetDefault(self, key: str, value: int) -> None: ...
    @overload
    def SetDefault(self, key: str, value: float) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Generic.System.Array[Generic.KeyValuePair]) -> None: ...
    @overload
    def SetDefault(self, key: str, value: System.Char) -> None: ...
    @overload
    def SetDefault(self, key: str, value: str) -> None: ...
    @overload
    def SetDouble(self, key: str, value: float) -> None: ...
    @overload
    def SetEnumValue(self, enumValue: T) -> None: ...
    @overload
    def SetEnumValue(self, key: str, value: T) -> None: ...
    @overload
    def SetGuid(self, key: str, value: System.Guid) -> None: ...
    @overload
    def SetInteger(self, key: str, value: int) -> None: ...
    @overload
    def SetPoint(self, key: str, value: Drawing.Point) -> None: ...
    @overload
    def SetPoint3d(self, key: str, value: Geometry.Point3d) -> None: ...
    @overload
    def SetRectangle(self, key: str, value: Drawing.Rectangle) -> None: ...
    @overload
    def SetSize(self, key: str, value: Drawing.Size) -> None: ...
    @overload
    def SetString(self, key: str, value: str) -> None: ...
    @overload
    def SetStringDictionary(self, key: str, value: Generic.System.Array[Generic.KeyValuePair]) -> None: ...
    @overload
    def SetStringList(self, key: str, value: System.System.Array[str]) -> None: ...
    @overload
    def SetUnsignedInteger(self, key: str, value: System.UInt32) -> None: ...
    @overload
    def TryGetBool(self, key: str) -> (bool, bool): ...
    @overload
    def TryGetBool(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, bool): ...
    @overload
    def TryGetByte(self, key: str) -> (bool, System.Byte): ...
    @overload
    def TryGetByte(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.Byte): ...
    @overload
    def TryGetChar(self, key: str) -> (bool, System.Char): ...
    @overload
    def TryGetChar(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.Char): ...
    @overload
    def TryGetChild(self, key: str) -> (bool, PersistentSettings): ...
    @overload
    def TryGetColor(self, key: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetColor(self, key: str) -> (bool, System.Nullable): ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Drawing.Color): ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.Nullable): ...
    @overload
    def TryGetDate(self, key: str) -> (bool, System.DateTime): ...
    @overload
    def TryGetDate(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.DateTime): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, str): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, System.System.Array[str]): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, float): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, Drawing.Size): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, Geometry.Point3d): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, bool): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, System.Byte): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, int): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, System.Char): ...
    @overload
    def TryGetDefault(self, key: str) -> (bool, System.DateTime): ...
    @overload
    def TryGetDouble(self, key: str) -> (bool, float): ...
    @overload
    def TryGetDouble(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, float): ...
    @overload
    def TryGetEnumValue(self, key: str) -> (bool, T): ...
    @overload
    def TryGetGuid(self, key: str) -> (bool, System.Guid): ...
    @overload
    def TryGetGuid(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.Guid): ...
    @overload
    def TryGetInteger(self, key: str) -> (bool, int): ...
    @overload
    def TryGetInteger(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, int): ...
    @overload
    def TryGetPoint(self, key: str) -> (bool, Drawing.Point): ...
    @overload
    def TryGetPoint(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Drawing.Point): ...
    @overload
    def TryGetPoint3d(self, key: str) -> (bool, Geometry.Point3d): ...
    @overload
    def TryGetPoint3d(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Geometry.Point3d): ...
    @overload
    def TryGetRectangle(self, key: str) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetRectangle(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Drawing.Rectangle): ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str) -> (bool, bool): ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, bool): ...
    @overload
    def TryGetSettingIsReadOnly(self, key: str) -> (bool, bool): ...
    @overload
    def TryGetSettingType(self, key: str) -> (bool, System.Type): ...
    @overload
    def TryGetSize(self, key: str) -> (bool, Drawing.Size): ...
    @overload
    def TryGetSize(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Drawing.Size): ...
    @overload
    def TryGetString(self, key: str) -> (bool, str): ...
    @overload
    def TryGetString(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, str): ...
    @overload
    def TryGetStringDictionary(self, key: str) -> (bool, Generic.System.Array[Generic.KeyValuePair]): ...
    @overload
    def TryGetStringDictionary(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, Generic.System.Array[Generic.KeyValuePair]): ...
    @overload
    def TryGetStringList(self, key: str) -> (bool, System.System.Array[str]): ...
    @overload
    def TryGetStringList(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.System.Array[str]): ...
    @overload
    def TryGetUnsignedInteger(self, key: str) -> (bool, System.UInt32): ...
    @overload
    def TryGetUnsignedInteger(self, key: str, legacyKeyList: Generic.IEnumerable) -> (bool, System.UInt32): ...

class StringFormat(enum.Enum):
    ExactDecimal = 0
    ExactProperFraction = 1
    ExactImproperFraction = 2
    CleanDecimal = 3
    CleanProperFraction = 4
    CleanImproperFraction = 5

class ScaleStringFormat(enum.Enum):
    None_ = 0
    RatioFormat = 1
    EquationFormat = 2
    FractionFormat = 3
    Unset = 255

class UserStringChangedArgs(System.EventArgs):
    """This event is raised when document user text strings are changed

    """
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Key(self) -> str: ...

class RenderContentTableEventType(enum.Enum):
    Loaded = 0
    Clearing = 1
    Cleared = 2
    MaterialAssignmentChanged = 3

class RenderContentTableEventArgs(System.EventArgs):
    """Passed to the
,
and the
events.

    """
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...

class RenderMaterialAssignmentChangedEventArgs(RenderContentTableEventArgs):
    """    """
    @property
    def IsLayer(self) -> bool: ...
    @property
    def IsObject(self) -> bool: ...
    @property
    def LayerId(self) -> System.Guid: ...
    @property
    def NewRenderMaterial(self) -> System.Guid: ...
    @property
    def ObjectId(self) -> System.Guid: ...
    @property
    def OldRenderMaterial(self) -> System.Guid: ...

class TextureMappingEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3

class TextureMappingEventArgs(System.EventArgs):
    """Event arguments passed to the RhinoDoc.TextureMappingEvent.

    """
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> TextureMappingEventType: ...
    @property
    def NewMapping(self) -> Render.TextureMapping: ...
    @property
    def OldMapping(self) -> Render.TextureMapping: ...

class CommandLineTextWriter(IO.TextWriter):
    """Provides a text writer that writes to the command line.

    """
    def __init__(self): ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @overload
    def write(self, str_: str) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...

class KeyboardHookEvent(System.MulticastDelegate):
    """KeyboardEvent delegate

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, key: int, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, key: int) -> None: ...

# endregion

