"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["DescriptionType", "LoadReturnCode", "PlugInDescriptionAttribute", "LicenseIdAttribute", "PlugInLoadTime", "PlugInType", "LoadPlugInResult", "LicenseChangedEventArgs", "PlugIn", "PlugInInfo", "FileTypeList", "FileImportPlugIn", "WriteFileResult", "FileExportPlugIn", "PreviewNotification", "RenderPlugIn", "CustomRenderSaveFileTypes", "DigitizerPlugIn", "LicenseUtils", "ValidateResult", "ValidateProductKeyDelegate", "VerifyLicenseKeyDelegate", "OnLeaseChangedDelegate", "VerifyPreviousVersionLicenseDelegate", "LicenseBuildType", "LicenseCapabilities", "LicenseLease", "LicenseLeaseChangedEventArgs", "LicenseData", "LicenseType", "LicenseStatus", "UnknownUserDataEventArgs", "RenderFeature", "PreviewRenderTypes", "SaveFileHandler"]
# endregion

# region: Imports
from Rhino import Commands
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import Render
from Rhino import Runtime
from Rhino import UI
from System import Drawing
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class DescriptionType(enum.Enum):
    Organization = 0
    Address = 1
    Country = 2
    Phone = 3
    WebSite = 4
    Email = 5
    UpdateUrl = 6
    Fax = 7
    Icon = 8

class LoadReturnCode(enum.Enum):
    ErrorShowDialog = 0
    Success = 1
    ErrorNoDialog = -1

class PlugInDescriptionAttribute(System.Attribute):
    """Rhino plug-in developer information attributes.

    """
    def __init__(self, descriptionType: DescriptionType, value: str): ...
    @property
    def DescriptionType(self) -> DescriptionType: ...
    @property
    def Value(self) -> str: ...

class LicenseIdAttribute(System.Attribute):
    """    """
    def __init__(self, value: str): ...
    @property
    def Value(self) -> str: ...

class PlugInLoadTime(enum.Enum):
    Disabled = 0
    AtStartup = 1
    WhenNeeded = 2
    WhenNeededIgnoreDockingBars = 6
    WhenNeededOrOptionsDialog = 10
    WhenNeededOrTabbedDockBar = 18

class PlugInType(enum.Enum):
    None_ = 0
    Render = 1
    FileImport = 2
    FileExport = 4
    Digitizer = 8
    Utility = 16
    DisplayPipeline = 32
    DisplayEngine = 64
    Any = 127

class LoadPlugInResult(enum.Enum):
    Success = 0
    SuccessAlreadyLoaded = 1
    ErrorUnknown = 2

class LicenseChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self): ...

class PlugIn(object):
    """A general purpose utility plug-in that can contain one or more commands.

    """
    @overload
    def CommandSettings(self, name: str) -> Rhino.PersistentSettings: ...
    @overload
    def DisplayHelp(self, windowHandle: System.IntPtr) -> bool: ...
    @overload
    @staticmethod
    def Find(pluginAssembly: Reflection.Assembly) -> PlugIn: ...
    @overload
    @staticmethod
    def Find(plugInId: System.Guid) -> PlugIn: ...
    @overload
    @staticmethod
    def FlushSettingsSavedQueue() -> None: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    def AskOnLoadProtection(self) -> bool: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def InstalledPlugInCount(self) -> int: ...
    @property
    def LicenseId(self) -> System.Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> Rhino.PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> Rhino.PersistentSettings: ...
    @overload
    def GetCommands() -> Commands.System.Array[Commands.Command]: ...
    @overload
    @staticmethod
    def GetEnglishCommandNames(pluginId: System.Guid) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInFolders() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool, localizedPlugInName: bool) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns() -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns(localizedPlugInName: bool) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def GetLoadProtection(pluginId: System.Guid) -> (bool, bool): ...
    @overload
    @staticmethod
    def GetPlugInInfo(pluginId: System.Guid) -> PlugInInfo: ...
    @overload
    def GetPlugInObject() -> object: ...
    @overload
    @staticmethod
    def GetPluginSettings(plugInId: System.Guid, load: bool) -> Rhino.PersistentSettings: ...
    @overload
    def Icon(self, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def IdFromFileName(filename: str) -> System.Guid: ...
    @overload
    @staticmethod
    def IdFromName(pluginName: str) -> System.Guid: ...
    @overload
    @staticmethod
    def IdFromPath(pluginPath: str) -> System.Guid: ...
    @overload
    def IsTextureSupported(self, texture: Render.RenderTexture) -> bool: ...
    @overload
    @staticmethod
    def LoadComputeExtensionPlugins() -> None: ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def LoadPlugIn(path: str) -> (LoadPlugInResult, System.Guid): ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: System.Guid, loadQuietly: bool, forceLoad: bool) -> bool: ...
    @overload
    @staticmethod
    def NameFromPath(pluginPath: str) -> str: ...
    @overload
    @staticmethod
    def PathFromId(pluginId: System.Guid) -> str: ...
    @overload
    @staticmethod
    def PathFromName(pluginName: str) -> str: ...
    @overload
    @staticmethod
    def PlugInExists(id_: System.Guid) -> (bool, bool, bool): ...
    @overload
    @staticmethod
    def RaiseOnPlugInSettingsSavedEvent() -> None: ...
    @overload
    @staticmethod
    def SavePluginSettings(plugInId: System.Guid) -> None: ...
    @overload
    def SaveSettings() -> None: ...
    @AskOnLoadProtection.setter
    def AskOnLoadProtection(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetLoadProtection(pluginId: System.Guid, loadSilently: bool) -> None: ...
    @property
    def UnknownUserData(self): ...
    @property
    def SettingsSaved(self): ...

class PlugInInfo(object):
    """Contains detailed information about a Rhino plug-in.

    """
    @property
    def Address(self) -> str: ...
    @property
    def CommandNames(self) -> System.System.Array[str]: ...
    @property
    def Country(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def Fax(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileTypeDescriptions(self) -> System.System.Array[str]: ...
    @property
    def FileTypeExtensions(self) -> System.System.Array[str]: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsDotNet(self) -> bool: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Organization(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PlugInLoadTime(self) -> PlugInLoadTime: ...
    @property
    def PlugInType(self) -> PlugInType: ...
    @property
    def RegistryPath(self) -> str: ...
    @property
    def ShipsWithRhino(self) -> bool: ...
    @property
    def UpdateUrl(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WebSite(self) -> str: ...
    @overload
    def Icon(self, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    def IsLoadProtected() -> (bool, bool): ...

class FileTypeList(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str, extension: str): ...
    @overload
    def __init__(self, description: str, extension: str, showOptionsButtonInFileDialog: bool): ...
    @overload
    def AddFileType(self, description: str, extension: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Generic.IEnumerable) -> int: ...
    @overload
    def AddFileType(self, description: str, extension: str, showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Generic.IEnumerable, showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str, showOptionsButtonInFileDialog: bool) -> int: ...

class FileImportPlugIn(PlugIn):
    """Rhino plug-in that imports data from other file formats into Rhino; can support more that one format.

    """
    @property
    def SettingsSaved(self): ...

class WriteFileResult(enum.Enum):
    Failure = 0
    Success = 1
    Cancel = -1

class FileExportPlugIn(PlugIn):
    """Rhino plug-in that exports data from Rhino to other file formats; can support more than one format.

    """
    @property
    def SettingsSaved(self): ...

class PreviewNotification(object):
    """    """
    @overload
    def NotifyIntermediateUpdate(self, rw: Render.RenderWindow) -> None: ...

class RenderPlugIn(PlugIn):
    """A Rhino rendering plugin; applies materials, textures, and lights to a scene to produce rendered images.

    """
    @overload
    @staticmethod
    def CurrentRendererSupportsFeature(feature: RenderFeature) -> bool: ...
    @overload
    def EnableAssignMaterialButton() -> bool: ...
    @overload
    def EnableCreateMaterialButton() -> bool: ...
    @overload
    def EnableEditMaterialButton(self, doc: Rhino.RhinoDoc, material: DocObjects.Material) -> bool: ...
    @property
    def PerferBasicContent(self) -> bool: ...
    @overload
    def GetRenderSettingsSections() -> Generic.List: ...
    @overload
    def OnAssignMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc) -> (bool, DocObjects.Material): ...
    @overload
    def OnCreateMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc) -> (bool, DocObjects.Material): ...
    @overload
    def OnEditMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc) -> (bool, DocObjects.Material): ...
    @overload
    def RenderSettingsCustomSections(self, sections: Generic.List) -> None: ...
    @PerferBasicContent.setter
    def PerferBasicContent(self, value: System.Void): ...
    @overload
    def SunCustomSections(self, sections: Generic.List) -> None: ...
    @property
    def SettingsSaved(self): ...

class CustomRenderSaveFileTypes(object):
    """    """
    @overload
    def RegisterFileType(self, extensions: Generic.IEnumerable, description: str, saveFileHandler: SaveFileHandler) -> None: ...

class DigitizerPlugIn(PlugIn):
    """A Rhino plug-in that interfaces with 3-D digitizing or input devices.

    """
    @overload
    def SendPoint(self, point: Geometry.Point3d, mousebuttons: UI.MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    @overload
    def SendRay(self, ray: Geometry.Ray3d, mousebuttons: UI.MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    @property
    def SettingsSaved(self): ...

class LicenseUtils(object):
    """License Manager Utilities.

    """
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid, capabilities: LicenseCapabilities) -> bool: ...
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid, capabilities: LicenseCapabilities) -> bool: ...
    @overload
    @staticmethod
    def CheckInLicense(productId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def CheckOutLicense(productId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def ConvertLicense(productId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def DeleteLicense(productId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def Echo(message: str) -> str: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def GetLicenseCapabilities(filter_: int) -> LicenseCapabilities: ...
    @overload
    @staticmethod
    def GetLicenseStatus() -> System.Array[LicenseStatus]: ...
    @overload
    @staticmethod
    def GetLicenseType(productId: System.Guid) -> int: ...
    @overload
    @staticmethod
    def GetOneLicenseStatus(productid: System.Guid) -> LicenseStatus: ...
    @overload
    @staticmethod
    def Initialize() -> bool: ...
    @overload
    @staticmethod
    def IsCheckOutEnabled() -> bool: ...
    @overload
    @staticmethod
    def LicenseOptionsHandler(pluginId: System.Guid, licenseId: System.Guid, productTitle: str, standAlone: bool) -> bool: ...
    @overload
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def LogoutOfCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def ReturnLicense(productId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def ShowBuyLicenseUi(productId: System.Guid) -> None: ...
    @overload
    @staticmethod
    def ShowLicenseValidationUi(cdkey: str) -> bool: ...
    @overload
    @staticmethod
    def ShowRhinoExpiredMessage(mode: Runtime.Mode) -> (bool, int): ...

class ValidateResult(enum.Enum):
    ErrorShowMessage = 0
    Success = 1
    ErrorHideMessage = -1

class ValidateProductKeyDelegate(System.MulticastDelegate):
    """Validates a product key or license.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, productKey: str, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, LicenseData): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (ValidateResult, LicenseData): ...
    @overload
    def Invoke(self, productKey: str) -> (ValidateResult, LicenseData): ...

class VerifyLicenseKeyDelegate(System.MulticastDelegate):
    """Called by Rhino to verify a license key. For details, see http://developer.rhino3d.com/guides/rhinocommon/rhinocommon-zoo-plugins/

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: System.DateTime, gracePeriodExpired: bool, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, LicenseData): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (ValidateResult, LicenseData): ...
    @overload
    def Invoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: System.DateTime, gracePeriodExpired: bool) -> (ValidateResult, LicenseData): ...

class OnLeaseChangedDelegate(System.MulticastDelegate):
    """Called by Rhino to signal that a lease from Rhino Accounts has changed. If LicenseLeaseChangedEventArgs.Lease is null, then the server has signaled that this product is no longer licensed. Your plug-in must change behavior to behave appropriately.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, args: LicenseLeaseChangedEventArgs, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, Drawing.Icon): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (Drawing.Icon): ...
    @overload
    def Invoke(self, args: LicenseLeaseChangedEventArgs) -> (Drawing.Icon): ...

class VerifyPreviousVersionLicenseDelegate(System.MulticastDelegate):
    """Called by GetLicense/AskUserForLicense to verify that a previous version license.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, license: str, previousVersionLicense: str, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, str): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (bool, str): ...
    @overload
    def Invoke(self, license: str, previousVersionLicense: str) -> (bool, str): ...

class LicenseBuildType(enum.Enum):
    Unspecified = 0
    Release = 100
    Evaluation = 200
    Beta = 300

class LicenseCapabilities(enum.Enum):
    NoCapabilities = 0
    CanBePurchased = 1
    CanBeSpecified = 2
    CanBeEvaluated = 4
    EvaluationIsExpired = 8
    SupportsRhinoAccounts = 16
    SupportsStandalone = 32
    SupportsZooPerUser = 64
    SupportsZooPerCore = 128
    SupportsLicenseDiscovery = 256

class LicenseLease(object):
    """LicenseLease represents a lease returned from the Cloud Zoo

    """
    @overload
    def __init__(self, unmanagedPointer: System.IntPtr): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: System.DateTime, exp: System.DateTime): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: System.DateTime, exp: System.DateTime, renewable_until: System.DateTime): ...
    @property
    def Expiration(self) -> System.DateTime: ...
    @property
    def GroupId(self) -> str: ...
    @property
    def GroupName(self) -> str: ...
    @property
    def IssuedAt(self) -> System.DateTime: ...
    @property
    def LeaseId(self) -> str: ...
    @property
    def ProductEdition(self) -> str: ...
    @property
    def ProductId(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RenewableUntil(self) -> System.Nullable: ...
    @property
    def UserId(self) -> str: ...
    @property
    def UserName(self) -> str: ...

class LicenseLeaseChangedEventArgs(object):
    """Arguments for OnLeaseChangedDelegate

    """
    def __init__(self, lease: LicenseLease): ...
    @property
    def Lease(self) -> LicenseLease: ...

class LicenseData(object):
    """Zoo plug-in license data.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: System.Nullable): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: System.Nullable, productIcon: Drawing.Icon): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: System.Nullable, productIcon: Drawing.Icon, requiresOnlineValidation: bool, isUpgradeFromPreviousVersion: bool): ...
    @overload
    def Dispose() -> None: ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def DateToExpire(self) -> System.Nullable: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def IsUpgradeFromPreviousVersion(self) -> bool: ...
    @property
    def LicenseCount(self) -> int: ...
    @property
    def LicenseExpires(self) -> bool: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def ProductIcon(self) -> Drawing.Icon: ...
    @property
    def ProductLicense(self) -> str: ...
    @property
    def RequiresOnlineValidation(self) -> bool: ...
    @property
    def SerialNumber(self) -> str: ...
    @overload
    @staticmethod
    def IsNotValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid() -> bool: ...
    @overload
    @staticmethod
    def IsValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid(self, ignoreExpirationDate: bool) -> bool: ...
    @BuildType.setter
    def BuildType(self, value: System.Void): ...
    @DateToExpire.setter
    def DateToExpire(self, value: System.Void): ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: System.Void): ...
    @IsUpgradeFromPreviousVersion.setter
    def IsUpgradeFromPreviousVersion(self, value: System.Void): ...
    @LicenseCount.setter
    def LicenseCount(self, value: System.Void): ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: System.Void): ...
    @ProductIcon.setter
    def ProductIcon(self, value: System.Void): ...
    @ProductLicense.setter
    def ProductLicense(self, value: System.Void): ...
    @RequiresOnlineValidation.setter
    def RequiresOnlineValidation(self, value: System.Void): ...
    @SerialNumber.setter
    def SerialNumber(self, value: System.Void): ...

class LicenseType(enum.Enum):
    Standalone = 0
    Network = 1
    NetworkLoanedOut = 2
    NetworkCheckedOut = 3
    CloudZoo = 4

class LicenseStatus(object):
    """LicenseStatus class.

    """
    def __init__(self): ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def CheckOutExpirationDate(self) -> System.Nullable: ...
    @property
    def CloudZooLeaseExpiration(self) -> System.Nullable: ...
    @property
    def CloudZooLeaseIsValid(self) -> bool: ...
    @property
    def ExpirationDate(self) -> System.Nullable: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def LicenseType(self) -> LicenseType: ...
    @property
    def PluginId(self) -> System.Guid: ...
    @property
    def ProductIcon(self) -> Drawing.Icon: ...
    @property
    def ProductId(self) -> System.Guid: ...
    @property
    def RegisteredOrganization(self) -> str: ...
    @property
    def RegisteredOwner(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    @BuildType.setter
    def BuildType(self, value: System.Void): ...
    @CheckOutExpirationDate.setter
    def CheckOutExpirationDate(self, value: System.Void): ...
    @CloudZooLeaseExpiration.setter
    def CloudZooLeaseExpiration(self, value: System.Void): ...
    @CloudZooLeaseIsValid.setter
    def CloudZooLeaseIsValid(self, value: System.Void): ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: System.Void): ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: System.Void): ...
    @LicenseType.setter
    def LicenseType(self, value: System.Void): ...
    @PluginId.setter
    def PluginId(self, value: System.Void): ...
    @ProductIcon.setter
    def ProductIcon(self, value: System.Void): ...
    @ProductId.setter
    def ProductId(self, value: System.Void): ...
    @RegisteredOrganization.setter
    def RegisteredOrganization(self, value: System.Void): ...
    @RegisteredOwner.setter
    def RegisteredOwner(self, value: System.Void): ...
    @SerialNumber.setter
    def SerialNumber(self, value: System.Void): ...

class UnknownUserDataEventArgs(System.EventArgs):
    """Event argument passed to the
event.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def PlugInId(self) -> System.Guid: ...

class RenderFeature(enum.Enum):
    Materials = 0
    Environments = 1
    Textures = 2
    PostEffects = 3
    Sun = 4
    CustomRenderMeshes = 5
    Decals = 6
    GroundPlane = 7
    SkyLight = 8
    CustomDecalProperties = 9
    LinearWorkflow = 10
    Exposure = 11
    ShadowOnlyGroundPlane = 12
    RenderBlowup = 13
    RenderWindow = 14
    RenderInWindow = 15
    FocalBlur = 17
    RenderArctic = 18
    RenderViewSource = 19
    CustomSkylightEnvironment = 20
    CustomReflectionEnvironment = 21
    RenderChannels = 22
    LightMaterials = 23

class PreviewRenderTypes(enum.Enum):
    None_ = 0
    ThreeSeparateImages = 1
    SingleImage = 2
    Progressive = 3

class SaveFileHandler(System.MulticastDelegate):
    """Called when a user chooses to save a rendered scene as this custom file type.

    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, fileName: str, includeAlpha: bool, renderWindow: Render.RenderWindow, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, fileName: str, includeAlpha: bool, renderWindow: Render.RenderWindow) -> bool: ...

# endregion
