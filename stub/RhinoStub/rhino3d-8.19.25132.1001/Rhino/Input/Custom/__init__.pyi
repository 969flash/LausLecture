"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GetSphere", "GetEllipse", "GetEllipsoid", "GetTruncatedCone", "GetTorus", "GetArc", "GetCircle", "ConeConstraint", "GetCone", "CylinderConstraint", "GetCylinder", "GetLineMode", "GetLine", "GetPolyline", "GetTransform", "PickStyle", "PickMode", "PickContext", "GetFileNameMode", "GetString", "GetOption", "GetNumber", "GetInteger", "GetObjectGeometryFilter", "GetObject", "GeometryAttributeFilter", "GetPoint", "GetPointDrawEventArgs", "GetPointMouseEventArgs", "GetBaseClass", "CommandLineOptionType", "CommandLineOption", "OptionToggle", "OptionDouble", "OptionInteger", "OptionColor", "TaskCompleteEventArgs", "GetCancel", "MeshSphereStyle", "MeshPickStyle", "MeshHitFlag"]
# endregion

# region: Imports
from Rhino import ApplicationSettings
from Rhino import Collections
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import Input
from Rhino import UI
from System import Drawing
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class GetSphere(object):
    """Class provides user interface to define a sphere.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Sphere): ...
    @overload
    def GetMesh() -> (Commands.Result, MeshSphereStyle, int, int, int, int, Geometry.Sphere): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...

class GetEllipse(object):
    """Class provides user interface to define an ellipse.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def FirstPoint(self) -> Geometry.Point3d: ...
    @property
    def IsModeFromFoci(self) -> bool: ...
    @property
    def MarkFoci(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.NurbsCurve): ...
    @property
    def SecondPoint(self) -> Geometry.Point3d: ...
    @MarkFoci.setter
    def MarkFoci(self, value: System.Void): ...

class GetEllipsoid(object):
    """Class provides user interface to define an ellipsoid.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def FirstPoint(self) -> Geometry.Point3d: ...
    @property
    def IsModeFromFoci(self) -> bool: ...
    @property
    def MarkFoci(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.NurbsSurface): ...
    @property
    def SecondPoint(self) -> Geometry.Point3d: ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, Geometry.Mesh): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, bool, Geometry.Mesh): ...
    @MarkFoci.setter
    def MarkFoci(self, value: System.Void): ...

class GetTruncatedCone(object):
    """Class provides user interface to define a truncated cone.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Brep): ...
    @property
    def SecondRadius(self) -> float: ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, Geometry.Mesh): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, int, Geometry.Mesh): ...
    @Cap.setter
    def Cap(self, value: System.Void): ...
    @CylinderConstraint.setter
    def CylinderConstraint(self, value: System.Void): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...
    @SecondRadius.setter
    def SecondRadius(self, value: System.Void): ...

class GetTorus(object):
    """Class provides user interface to define a torus.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AroundDirectionCount(self) -> int: ...
    @property
    def AroundDirectionMinimumCount(self) -> int: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def FixInnerRadius(self) -> bool: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @property
    def InSecondDiameterMode(self) -> bool: ...
    @property
    def PromptForMeshDensity(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Torus): ...
    @property
    def SecondSize(self) -> float: ...
    @property
    def VerticalDirectionCount(self) -> int: ...
    @property
    def VerticalDirectionMinimumCount(self) -> int: ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, Geometry.Torus): ...
    @AroundDirectionCount.setter
    def AroundDirectionCount(self, value: System.Void): ...
    @AroundDirectionMinimumCount.setter
    def AroundDirectionMinimumCount(self, value: System.Void): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @FixInnerRadius.setter
    def FixInnerRadius(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...
    @InSecondDiameterMode.setter
    def InSecondDiameterMode(self, value: System.Void): ...
    @PromptForMeshDensity.setter
    def PromptForMeshDensity(self, value: System.Void): ...
    @SecondSize.setter
    def SecondSize(self, value: System.Void): ...
    @VerticalDirectionCount.setter
    def VerticalDirectionCount(self, value: System.Void): ...
    @VerticalDirectionMinimumCount.setter
    def VerticalDirectionMinimumCount(self, value: System.Void): ...

class GetArc(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AllowDeformable(self) -> bool: ...
    @property
    def DefaultRadius(self) -> float: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def DeformableDegree(self) -> int: ...
    @property
    def DeformablePointCount(self) -> int: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Arc): ...
    @property
    def UseActiveLayerLinetypeForCurves(self) -> bool: ...
    @AllowDeformable.setter
    def AllowDeformable(self, value: System.Void): ...
    @DefaultRadius.setter
    def DefaultRadius(self, value: System.Void): ...
    @Deformable.setter
    def Deformable(self, value: System.Void): ...
    @DeformableDegree.setter
    def DeformableDegree(self, value: System.Void): ...
    @DeformablePointCount.setter
    def DeformablePointCount(self, value: System.Void): ...
    @UseActiveLayerLinetypeForCurves.setter
    def UseActiveLayerLinetypeForCurves(self, value: System.Void): ...

class GetCircle(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AllowDeformable(self) -> bool: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def DeformableDegree(self) -> int: ...
    @property
    def DeformablePointCount(self) -> int: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Circle): ...
    @property
    def UseActiveLayerLinetypeForCurves(self) -> bool: ...
    @AllowDeformable.setter
    def AllowDeformable(self, value: System.Void): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @Deformable.setter
    def Deformable(self, value: System.Void): ...
    @DeformableDegree.setter
    def DeformableDegree(self, value: System.Void): ...
    @DeformablePointCount.setter
    def DeformablePointCount(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...
    @UseActiveLayerLinetypeForCurves.setter
    def UseActiveLayerLinetypeForCurves(self, value: System.Void): ...

class ConeConstraint(enum.Enum):
    None_ = 0
    Vertical = 1
    AroundCurve = 2

class GetCone(object):
    """Class provides user interface to define a cone.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AllowInputAngle(self) -> bool: ...
    @property
    def ApexAngleDegrees(self) -> float: ...
    @property
    def BaseAngleDegrees(self) -> float: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def ConeConstraint(self) -> ConeConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Cone): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, Geometry.Cone): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, int, Geometry.Cone): ...
    @AllowInputAngle.setter
    def AllowInputAngle(self, value: System.Void): ...
    @ApexAngleDegrees.setter
    def ApexAngleDegrees(self, value: System.Void): ...
    @BaseAngleDegrees.setter
    def BaseAngleDegrees(self, value: System.Void): ...
    @Cap.setter
    def Cap(self, value: System.Void): ...
    @ConeConstraint.setter
    def ConeConstraint(self, value: System.Void): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...

class CylinderConstraint(enum.Enum):
    None_ = 0
    Vertical = 1
    AroundCurve = 2

class GetCylinder(object):
    """Class provides user interface to define a cylinder.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def BothSidesOption(self) -> bool: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Cylinder): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, Geometry.Cylinder): ...
    @overload
    def GetMesh() -> (Commands.Result, int, int, int, Geometry.Cylinder): ...
    @BothSidesOption.setter
    def BothSidesOption(self, value: System.Void): ...
    @Cap.setter
    def Cap(self, value: System.Void): ...
    @CylinderConstraint.setter
    def CylinderConstraint(self, value: System.Void): ...
    @DefaultSize.setter
    def DefaultSize(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @InDiameterMode.setter
    def InDiameterMode(self, value: System.Void): ...

class GetLineMode(enum.Enum):
    TwoPoint = 0
    SurfaceNormal = 1
    Angled = 2
    Vertical = 3
    FourPoint = 4
    Bisector = 5
    Perpendicular = 6
    Tangent = 7
    CurveEnd = 8
    CPlaneNormalVector = 9

class GetLine(object):
    """Use to interactively get a line. The Rhino "Line" command uses GetLine.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnableAllVariations(self, on: bool) -> None: ...
    @overload
    def EnableFromBothSidesOption(self, on: bool) -> None: ...
    @overload
    def EnableFromMidPointOption(self, on: bool) -> None: ...
    @property
    def AcceptZeroLengthLine(self) -> bool: ...
    @property
    def FeedbackColor(self) -> Drawing.Color: ...
    @property
    def FirstPointPrompt(self) -> str: ...
    @property
    def FixedLength(self) -> float: ...
    @property
    def GetLineMode(self) -> GetLineMode: ...
    @property
    def HaveFeedbackColor(self) -> bool: ...
    @property
    def MidPointPrompt(self) -> str: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Line): ...
    @property
    def SecondPointPrompt(self) -> str: ...
    @AcceptZeroLengthLine.setter
    def AcceptZeroLengthLine(self, value: System.Void): ...
    @FeedbackColor.setter
    def FeedbackColor(self, value: System.Void): ...
    @FirstPointPrompt.setter
    def FirstPointPrompt(self, value: System.Void): ...
    @FixedLength.setter
    def FixedLength(self, value: System.Void): ...
    @GetLineMode.setter
    def GetLineMode(self, value: System.Void): ...
    @MidPointPrompt.setter
    def MidPointPrompt(self, value: System.Void): ...
    @SecondPointPrompt.setter
    def SecondPointPrompt(self, value: System.Void): ...
    @overload
    def SetFirstPoint(self, point: Geometry.Point3d) -> None: ...

class GetPolyline(object):
    """Use to interactively get a polyline.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def FirstPointPrompt(self) -> str: ...
    @property
    def FourthPointPrompt(self) -> str: ...
    @property
    def MaxPointCount(self) -> int: ...
    @property
    def MinPointCount(self) -> int: ...
    @overload
    def Get() -> (Commands.Result, Geometry.Polyline): ...
    @property
    def SecondPointPrompt(self) -> str: ...
    @property
    def ThirdPointPrompt(self) -> str: ...
    @FirstPointPrompt.setter
    def FirstPointPrompt(self, value: System.Void): ...
    @FourthPointPrompt.setter
    def FourthPointPrompt(self, value: System.Void): ...
    @MaxPointCount.setter
    def MaxPointCount(self, value: System.Void): ...
    @MinPointCount.setter
    def MinPointCount(self, value: System.Void): ...
    @SecondPointPrompt.setter
    def SecondPointPrompt(self, value: System.Void): ...
    @ThirdPointPrompt.setter
    def ThirdPointPrompt(self, value: System.Void): ...
    @overload
    def SetFirstPoint(self, point: Geometry.Point3d) -> None: ...

class GetTransform(GetPoint):
    """Used for getting a Transform

    """
    @overload
    def AddTransformObjects(self, list_: Collections.TransformObjectList) -> None: ...
    @overload
    def CalculateTransform(self, viewport: Display.RhinoViewport, point: Geometry.Point3d) -> Geometry.Transform: ...
    @property
    def HaveTransform(self) -> bool: ...
    @property
    def ObjectList(self) -> Collections.TransformObjectList: ...
    @property
    def Transform(self) -> Geometry.Transform: ...
    @overload
    def GetXform() -> Input.GetResult: ...
    @HaveTransform.setter
    def HaveTransform(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseDown(self): ...
    @property
    def DynamicDraw(self): ...
    @property
    def PostDrawObjects(self): ...

class PickStyle(enum.Enum):
    None_ = 0
    PointPick = 1
    WindowPick = 2
    CrossingPick = 3

class PickMode(enum.Enum):
    Wireframe = 1
    Shaded = 2

class PickContext(object):
    """Utility for determining if objects are picked

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def GetObjectUsed(self) -> GetObject: ...
    @property
    def PickGroupsEnabled(self) -> bool: ...
    @property
    def PickLine(self) -> Geometry.Line: ...
    @property
    def PickMode(self) -> PickMode: ...
    @property
    def PickStyle(self) -> PickStyle: ...
    @property
    def SubObjectSelectionEnabled(self) -> bool: ...
    @property
    def View(self) -> Display.RhinoView: ...
    @overload
    def PickFrustumTest(self, box: Geometry.BoundingBox) -> (bool, bool): ...
    @overload
    def PickFrustumTest(self, point: Geometry.Point3d) -> (bool, float, float): ...
    @overload
    def PickFrustumTest(self, cloud: Geometry.PointCloud) -> (bool, int, float, float): ...
    @overload
    def PickFrustumTest(self, curve: Geometry.NurbsCurve) -> (bool, float, float, float): ...
    @overload
    def PickFrustumTest(self, points: Geometry.System.Array[Geometry.Point3d]) -> (bool, int, float, float): ...
    @overload
    def PickFrustumTest(self, bezier: Geometry.BezierCurve) -> (bool, float, float, float): ...
    @overload
    def PickFrustumTest(self, line: Geometry.Line) -> (bool, float, float, float): ...
    @overload
    def PickFrustumTest(self, mesh: Geometry.Mesh, pickStyle: MeshPickStyle) -> (bool, Geometry.Point3d, float, float, MeshHitFlag, int): ...
    @overload
    def PickFrustumTest(self, mesh: Geometry.Mesh, pickStyle: MeshPickStyle) -> (bool, Geometry.Point3d, Geometry.Point2d, Geometry.Point2d, float, float, MeshHitFlag, int): ...
    @overload
    def PickMeshTopologyVertices(self, mesh: Geometry.Mesh) -> System.System.Array[int]: ...
    @PickGroupsEnabled.setter
    def PickGroupsEnabled(self, value: System.Void): ...
    @PickLine.setter
    def PickLine(self, value: System.Void): ...
    @PickMode.setter
    def PickMode(self, value: System.Void): ...
    @PickStyle.setter
    def PickStyle(self, value: System.Void): ...
    @SubObjectSelectionEnabled.setter
    def SubObjectSelectionEnabled(self, value: System.Void): ...
    @View.setter
    def View(self, value: System.Void): ...
    @overload
    def SetPickTransform(self, transform: Geometry.Transform) -> None: ...
    @overload
    def UpdateClippingPlanes() -> None: ...

class GetFileNameMode(enum.Enum):
    Open = 0
    OpenTemplate = 1
    OpenImage = 2
    OpenRhinoOnly = 3
    OpenTextFile = 5
    OpenWorksession = 6
    Import = 7
    Attach = 8
    LoadPlugIn = 9
    Save = 10
    SaveSmall = 11
    SaveTemplate = 12
    SaveImage = 13
    Export = 14
    SaveTextFile = 17
    SaveWorksession = 18

class GetString(GetBaseClass):
    """Used to get strings.

    """
    def __init__(self): ...
    @overload
    def Get() -> Input.GetResult: ...
    @overload
    def GetLiteralString() -> Input.GetResult: ...

class GetOption(GetBaseClass):
    """If you want to explicitly get string input, then use GetString class with options. If you only want to get options, then use this class (GetOption)

    """
    def __init__(self): ...
    @overload
    def Get() -> Input.GetResult: ...

class GetNumber(GetBaseClass):
    """Used to get double precision numbers.

    """
    def __init__(self): ...
    @overload
    def Get() -> Input.GetResult: ...
    @overload
    def SetLowerLimit(self, lowerLimit: float, strictlyGreaterThan: bool) -> None: ...
    @overload
    def SetUpperLimit(self, upperLimit: float, strictlyLessThan: bool) -> None: ...

class GetInteger(GetBaseClass):
    """Used to get integer numbers.

    """
    def __init__(self): ...
    @overload
    def Get() -> Input.GetResult: ...
    @overload
    def Number() -> int: ...
    @overload
    def SetLowerLimit(self, lowerLimit: int, strictlyGreaterThan: bool) -> None: ...
    @overload
    def SetUpperLimit(self, upperLimit: int, strictlyLessThan: bool) -> None: ...

class GetObjectGeometryFilter(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, rhObject: DocObjects.RhinoObject, geometry: Geometry.GeometryBase, componentIndex: Geometry.ComponentIndex, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, rhObject: DocObjects.RhinoObject, geometry: Geometry.GeometryBase, componentIndex: Geometry.ComponentIndex) -> bool: ...

class GetObject(GetBaseClass):
    """The GetObject class is the tool commands use to interactively select objects.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def ActiveGetObject(doc: Rhino.RhinoDoc) -> GetObject: ...
    @overload
    def AppendToPickList(self, objref: DocObjects.ObjRef) -> None: ...
    @overload
    def ClearObjects() -> None: ...
    @overload
    def CustomGeometryFilter(self, rhObject: DocObjects.RhinoObject, geometry: Geometry.GeometryBase, componentIndex: Geometry.ComponentIndex) -> bool: ...
    @overload
    def DisablePreSelect() -> None: ...
    @overload
    def EnableClearObjectsOnEntry(self, enable: bool) -> None: ...
    @overload
    def EnableHighlight(self, enable: bool) -> None: ...
    @overload
    def EnableIgnoreGrips(self, enable: bool) -> None: ...
    @overload
    def EnablePostSelect(self, enable: bool) -> None: ...
    @overload
    def EnablePreSelect(self, enable: bool, ignoreUnacceptablePreselectedObjects: bool) -> None: ...
    @overload
    def EnablePressEnterWhenDonePrompt(self, enable: bool) -> None: ...
    @overload
    def EnableSelPrevious(self, enable: bool) -> None: ...
    @overload
    def EnableUnselectObjectsOnExit(self, enable: bool) -> None: ...
    @overload
    def Get() -> Input.GetResult: ...
    @property
    def AlreadySelectedObjectSelect(self) -> bool: ...
    @property
    def BottomObjectPreference(self) -> bool: ...
    @property
    def ChooseOneQuestion(self) -> bool: ...
    @property
    def DeselectAllBeforePostSelect(self) -> bool: ...
    @property
    def GeometryAttributeFilter(self) -> GeometryAttributeFilter: ...
    @property
    def GeometryFilter(self) -> DocObjects.ObjectType: ...
    @property
    def GroupSelect(self) -> bool: ...
    @property
    def InactiveDetailPickEnabled(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def ObjectsWerePreselected(self) -> bool: ...
    @property
    def OneByOnePostSelect(self) -> bool: ...
    @property
    def ProxyBrepFromSubD(self) -> bool: ...
    @property
    def ReferenceObjectSelect(self) -> bool: ...
    @property
    def SerialNumber(self) -> System.UInt32: ...
    @property
    def SubObjectSelect(self) -> bool: ...
    @overload
    def GetMultiple(self, minimumNumber: int, maximumNumber: int) -> Input.GetResult: ...
    @overload
    def Object(self, index: int) -> DocObjects.ObjRef: ...
    @overload
    def Objects() -> DocObjects.System.Array[DocObjects.ObjRef]: ...
    @overload
    def PassesGeometryAttributeFilter(self, rhObject: DocObjects.RhinoObject, geometry: Geometry.GeometryBase, componentIndex: Geometry.ComponentIndex) -> bool: ...
    @AlreadySelectedObjectSelect.setter
    def AlreadySelectedObjectSelect(self, value: System.Void): ...
    @BottomObjectPreference.setter
    def BottomObjectPreference(self, value: System.Void): ...
    @ChooseOneQuestion.setter
    def ChooseOneQuestion(self, value: System.Void): ...
    @DeselectAllBeforePostSelect.setter
    def DeselectAllBeforePostSelect(self, value: System.Void): ...
    @GeometryAttributeFilter.setter
    def GeometryAttributeFilter(self, value: System.Void): ...
    @GeometryFilter.setter
    def GeometryFilter(self, value: System.Void): ...
    @GroupSelect.setter
    def GroupSelect(self, value: System.Void): ...
    @InactiveDetailPickEnabled.setter
    def InactiveDetailPickEnabled(self, value: System.Void): ...
    @OneByOnePostSelect.setter
    def OneByOnePostSelect(self, value: System.Void): ...
    @ProxyBrepFromSubD.setter
    def ProxyBrepFromSubD(self, value: System.Void): ...
    @ReferenceObjectSelect.setter
    def ReferenceObjectSelect(self, value: System.Void): ...
    @SubObjectSelect.setter
    def SubObjectSelect(self, value: System.Void): ...
    @overload
    def SetCustomGeometryFilter(self, filter_: GetObjectGeometryFilter) -> None: ...
    @overload
    def SetPressEnterWhenDonePrompt(self, prompt: str) -> None: ...

class GeometryAttributeFilter(enum.Enum):
    WireCurve = 1
    EdgeCurve = 2
    ClosedCurve = 4
    OpenCurve = 8
    SeamEdge = 16
    ManifoldEdge = 32
    NonmanifoldEdge = 64
    MatedEdge = 112
    SurfaceBoundaryEdge = 128
    TrimmingBoundaryEdge = 256
    BoundaryEdge = 384
    ClosedSurface = 512
    OpenSurface = 1024
    TrimmedSurface = 2048
    UntrimmedSurface = 4096
    SubSurface = 8192
    TopSurface = 16384
    ManifoldPolysrf = 32768
    NonmanifoldPolysrf = 65536
    ClosedPolysrf = 131072
    OpenPolysrf = 262144
    ClosedMesh = 524288
    OpenMesh = 1048576
    BoundaryInnerLoop = 2097152
    MatedInnerLoop = 4194304
    InnerLoop = 6291456
    BoundaryOuterLoop = 8388608
    MatedOuterLoop = 16777216
    OuterLoop = 25165824
    SpecialLoop = 33554432
    AcceptAllAttributes = 4294967295

class GetPoint(GetBaseClass):
    """Used to interactively get a point.

    """
    def __init__(self): ...
    @overload
    def AddConstructionPoint(self, point: Geometry.Point3d) -> int: ...
    @overload
    def AddConstructionPoints(self, points: Geometry.System.Array[Geometry.Point3d]) -> int: ...
    @overload
    def AddSnapPoint(self, point: Geometry.Point3d) -> int: ...
    @overload
    def AddSnapPoints(self, points: Geometry.System.Array[Geometry.Point3d]) -> int: ...
    @overload
    def ClearConstraints() -> None: ...
    @overload
    def ClearConstructionPoints() -> None: ...
    @overload
    def ClearSnapPoints() -> None: ...
    @overload
    def Constrain(self, line: Geometry.Line) -> bool: ...
    @overload
    def Constrain(self, circle: Geometry.Circle) -> bool: ...
    @overload
    def Constrain(self, sphere: Geometry.Sphere) -> bool: ...
    @overload
    def Constrain(self, cylinder: Geometry.Cylinder) -> bool: ...
    @overload
    def Constrain(self, arc: Geometry.Arc) -> bool: ...
    @overload
    def Constrain(self, surface: Geometry.Surface, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, from_: Geometry.Point3d, to: Geometry.Point3d) -> bool: ...
    @overload
    def Constrain(self, plane: Geometry.Plane, allowElevator: bool) -> bool: ...
    @overload
    def Constrain(self, curve: Geometry.Curve, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, mesh: Geometry.Mesh, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, brep: Geometry.Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def ConstrainDistanceFromBasePoint(self, distance: float) -> None: ...
    @overload
    def ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool: ...
    @overload
    def ConstrainToTargetPlane() -> None: ...
    @overload
    def ConstrainToVirtualCPlaneIntersection(self, plane: Geometry.Plane) -> bool: ...
    @overload
    def DrawLineFromPoint(self, startPoint: Geometry.Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None: ...
    @overload
    def EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableDrawLineFromPoint(self, enable: bool) -> None: ...
    @overload
    def EnableNoRedrawOnExit(self, noRedraw: bool) -> None: ...
    @overload
    def EnableObjectSnapCursors(self, enable: bool) -> None: ...
    @overload
    def EnableSnapToCurves(self, enable: bool) -> None: ...
    @overload
    def Get() -> Input.GetResult: ...
    @property
    def DynamicDrawColor(self) -> Drawing.Color: ...
    @property
    def FullFrameRedrawDuringGet(self) -> bool: ...
    @property
    def OsnapEventType(self) -> ApplicationSettings.OsnapModes: ...
    @overload
    def Get(self, onMouseUp: bool) -> Input.GetResult: ...
    @overload
    def Get(self, onMouseUp: bool, get2DPoint: bool) -> Input.GetResult: ...
    @property
    def Tag(self) -> object: ...
    @overload
    def GetConstructionPoints() -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def GetPlanarConstraint() -> (bool, Display.RhinoViewport, Geometry.Plane): ...
    @overload
    def GetSnapPoints() -> Geometry.System.Array[Geometry.Point3d]: ...
    @overload
    def InterruptMouseMove() -> bool: ...
    @overload
    def NumberPreview() -> (bool, float): ...
    @overload
    def PermitConstraintOptions(self, permit: bool) -> None: ...
    @overload
    def PermitElevatorMode(self, permitMode: int) -> None: ...
    @overload
    def PermitFromOption(self, permit: bool) -> None: ...
    @overload
    def PermitObjectSnap(self, permit: bool) -> None: ...
    @overload
    def PermitOrthoSnap(self, permit: bool) -> None: ...
    @overload
    def PermitTabMode(self, permit: bool) -> None: ...
    @overload
    def PointOnBrep() -> (Geometry.BrepFace, float, float): ...
    @overload
    def PointOnCurve() -> (Geometry.Curve, float): ...
    @overload
    def PointOnObject() -> DocObjects.ObjRef: ...
    @overload
    def PointOnSurface() -> (Geometry.Surface, float, float): ...
    @DynamicDrawColor.setter
    def DynamicDrawColor(self, value: System.Void): ...
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def SetBasePoint(self, basePoint: Geometry.Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def SetCursor(self, cursor: UI.CursorStyle) -> None: ...
    @overload
    def TryGetBasePoint() -> (bool, Geometry.Point3d): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseDown(self): ...
    @property
    def DynamicDraw(self): ...
    @property
    def PostDrawObjects(self): ...

class GetPointDrawEventArgs(Display.DrawEventArgs):
    """Arguments for drawing during point getting.

    """
    @property
    def CurrentPoint(self) -> Geometry.Point3d: ...
    @property
    def Source(self) -> GetPoint: ...

class GetPointMouseEventArgs(System.EventArgs):
    """Arguments for mouse information during point getting.

    """
    @property
    def ControlKeyDown(self) -> bool: ...
    @property
    def LeftButtonDown(self) -> bool: ...
    @property
    def MiddleButtonDown(self) -> bool: ...
    @property
    def Point(self) -> Geometry.Point3d: ...
    @property
    def RightButtonDown(self) -> bool: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @property
    def Source(self) -> GetPoint: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...
    @property
    def WindowPoint(self) -> Drawing.Point: ...

class GetBaseClass(object):
    """Base class for GetObject, GetPoint, GetSphere, etc. You will never directly create a GetBaseClass but you will use its member functions after calling GetObject.Gets(), GetPoint.Get(), and so on. Provides tools to set command prompt, set command options, and specify if the "get" can optionally accept numbers, nothing (pressing enter), and undo.

    """
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: UI.LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: UI.LocalizeStringPair, optionValue: UI.LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: UI.LocalizeStringPair, optionValue: UI.LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str) -> (int, OptionColor): ...
    @overload
    def AddOptionColor(self, optionName: UI.LocalizeStringPair) -> (int, OptionColor): ...
    @overload
    def AddOptionColor(self, optionName: UI.LocalizeStringPair, prompt: str) -> (int, OptionColor): ...
    @overload
    def AddOptionColor(self, englishName: str, prompt: str) -> (int, OptionColor): ...
    @overload
    def AddOptionDouble(self, englishName: str) -> (int, OptionDouble): ...
    @overload
    def AddOptionDouble(self, optionName: UI.LocalizeStringPair) -> (int, OptionDouble): ...
    @overload
    def AddOptionDouble(self, englishName: str, prompt: str) -> (int, OptionDouble): ...
    @overload
    def AddOptionDouble(self, optionName: UI.LocalizeStringPair, prompt: str) -> (int, OptionDouble): ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: System.Array[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Generic.IEnumerable, listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: UI.LocalizeStringPair) -> (int, OptionInteger): ...
    @overload
    def AddOptionInteger(self, englishName: str) -> (int, OptionInteger): ...
    @overload
    def AddOptionInteger(self, optionName: UI.LocalizeStringPair, prompt: str) -> (int, OptionInteger): ...
    @overload
    def AddOptionInteger(self, englishName: str, prompt: str) -> (int, OptionInteger): ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Generic.IEnumerable, listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: UI.LocalizeStringPair, listValues: Generic.IEnumerable, listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str) -> (int, OptionToggle): ...
    @overload
    def AddOptionToggle(self, optionName: UI.LocalizeStringPair) -> (int, OptionToggle): ...
    @overload
    def ClearCommandOptions() -> None: ...
    @overload
    def ClearDefault() -> None: ...
    @overload
    def Color() -> Drawing.Color: ...
    @overload
    def CommandResult() -> Commands.Result: ...
    @overload
    def CustomMessage() -> object: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def GetSelectedEnumValue() -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Generic.IEnumerable) -> T: ...
    @overload
    def GotDefault() -> bool: ...
    @overload
    def Line2d() -> Drawing.System.Array[Drawing.Point]: ...
    @overload
    def Number() -> float: ...
    @overload
    def Option() -> CommandLineOption: ...
    @overload
    def OptionIndex() -> int: ...
    @overload
    def PickRectangle() -> Drawing.Rectangle: ...
    @overload
    def Point() -> Geometry.Point3d: ...
    @overload
    def Point2d() -> Drawing.Point: ...
    @overload
    @staticmethod
    def PostCustomMessage(messageData: object) -> None: ...
    @overload
    def Rectangle2d() -> Drawing.Rectangle: ...
    @overload
    def Result() -> Input.GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Drawing.Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Geometry.Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult() -> str: ...
    @overload
    def Vector() -> Geometry.Vector3d: ...
    @overload
    def View() -> Display.RhinoView: ...

class CommandLineOptionType(enum.Enum):
    Simple = 0
    Number = 1
    Toggle = 2
    Color = 3
    List = 4
    Hidden = 5

class CommandLineOption(object):
    """    """
    @property
    def CurrentListOptionIndex(self) -> int: ...
    @property
    def CurrentNumericValue(self) -> float: ...
    @property
    def CurrentToggleValue(self) -> System.Nullable: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def Index(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def OptionType(self) -> CommandLineOptionType: ...
    @property
    def StringOptionValue(self) -> str: ...
    @overload
    @staticmethod
    def IsValidOptionName(optionName: str) -> bool: ...
    @overload
    @staticmethod
    def IsValidOptionValueName(optionValue: str) -> bool: ...
    @overload
    def ListOptions(self, english: bool) -> System.System.Array[str]: ...
    @overload
    def ToggleValues(self, english: bool) -> (str, str): ...

class OptionToggle(object):
    """    """
    @overload
    def __init__(self, initialValue: bool, offValue: str, onValue: str): ...
    @overload
    def __init__(self, initialValue: bool, offValue: UI.LocalizeStringPair, onValue: UI.LocalizeStringPair): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CurrentValue(self) -> bool: ...
    @property
    def InitialValue(self) -> bool: ...
    @CurrentValue.setter
    def CurrentValue(self, value: System.Void): ...

class OptionDouble(object):
    """    """
    @overload
    def __init__(self, initialValue: float): ...
    @overload
    def __init__(self, initialValue: float, lowerLimit: float, upperLimit: float): ...
    @overload
    def __init__(self, initialValue: float, setLowerLimit: bool, limit: float): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CurrentValue(self) -> float: ...
    @property
    def InitialValue(self) -> float: ...
    @CurrentValue.setter
    def CurrentValue(self, value: System.Void): ...

class OptionInteger(object):
    """    """
    @overload
    def __init__(self, initialValue: int): ...
    @overload
    def __init__(self, initialValue: int, lowerLimit: int, upperLimit: int): ...
    @overload
    def __init__(self, initialValue: int, setLowerLimit: bool, limit: int): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CurrentValue(self) -> int: ...
    @property
    def InitialValue(self) -> int: ...
    @CurrentValue.setter
    def CurrentValue(self, value: System.Void): ...

class OptionColor(object):
    """    """
    def __init__(self, initialValue: Drawing.Color): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CurrentValue(self) -> Drawing.Color: ...
    @property
    def InitialValue(self) -> Drawing.Color: ...
    @CurrentValue.setter
    def CurrentValue(self, value: System.Void): ...

class TaskCompleteEventArgs(System.EventArgs):
    """    """
    def __init__(self, task: Tasks.Task, doc: Rhino.RhinoDoc): ...
    @property
    def Doc(self) -> Rhino.RhinoDoc: ...
    @property
    def Redraw(self) -> bool: ...
    @property
    def Task(self) -> Tasks.Task: ...
    @Doc.setter
    def Doc(self, value: System.Void): ...
    @Redraw.setter
    def Redraw(self, value: System.Void): ...
    @Task.setter
    def Task(self, value: System.Void): ...

class GetCancel(GetBaseClass):
    """    """
    def __init__(self): ...
    @property
    def Progress(self) -> System.IProgress: ...
    @property
    def ProgressMessage(self) -> str: ...
    @property
    def ProgressReporting(self) -> bool: ...
    @property
    def Token(self) -> Threading.CancellationToken: ...
    @ProgressMessage.setter
    def ProgressMessage(self, value: System.Void): ...
    @ProgressReporting.setter
    def ProgressReporting(self, value: System.Void): ...
    @overload
    def Wait(self, task: Tasks.Task, doc: Rhino.RhinoDoc) -> Commands.Result: ...
    @overload
    def Wait(self, task: Tasks.Task, doc: Rhino.RhinoDoc) -> Commands.Result: ...
    @overload
    def WaitAll(self, tasks: Generic.IEnumerable, doc: Rhino.RhinoDoc) -> Commands.Result: ...
    @overload
    def WaitAll(self, tasks: Generic.IEnumerable, doc: Rhino.RhinoDoc) -> Commands.Result: ...
    @property
    def TaskCompleted(self): ...

class MeshSphereStyle(enum.Enum):
    UV = 0
    Triangle = 1
    Quad = 2

class MeshPickStyle(enum.Enum):
    WireframePicking = 0
    ShadedModePicking = 1
    VertexOnlyPicking = 2

class MeshHitFlag(enum.Enum):
    Vertex = 0
    Edge = 1
    Face = 2
    Invalid = -1

# endregion
