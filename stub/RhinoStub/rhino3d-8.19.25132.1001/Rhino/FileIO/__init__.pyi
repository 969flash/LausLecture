"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["FileReferenceStatus", "FileFindPreference", "DracoCompression", "DracoColorFormat", "DracoCompressionOptions", "File3ds", "File3dsWriteOptions", "File3dsReadOptions", "File3mf", "File3mfWriteOptions", "FileAmf", "FileAmfWriteOptions", "FileAi", "FileAiWriteOptions", "FileAiReadOptions", "FileCd", "FileCdWriteOptions", "FileCsv", "FileCsvWriteOptions", "FileDgn", "FileDgnReadOptions", "FileDst", "FileDstReadOptions", "FileDwg", "FileDwgReadOptions", "FileDwgWriteOptions", "FileEps", "FileEpsReadOptions", "FileFbx", "FileFbxWriteOptions", "FileFbxReadOptions", "FileGHS", "FileGHSReadOptions", "FileGltf", "FileGltfWriteOptions", "FileGts", "FileGtsWriteOptions", "FileIgs", "FileIgsWriteOptions", "FileLwo", "FileLwoWriteOptions", "FileLwoReadOptions", "FileObj", "FileObjWriteOptions", "FileObjReadOptions", "FilePdfEventArgs", "FilePdf", "FilePdfReadOptions", "FilePly", "FilePlyReadOptions", "FilePlyWriteOptions", "FilePov", "FilePovWriteOptions", "FileRaw", "FileRawWriteOptions", "FileRawReadOptions", "FileSat", "FileSatWriteOptions", "FileSkp", "FileSkpReadOptions", "FileSkpWriteOptions", "FileSlc", "FileSlcWriteOptions", "FileStl", "FileStlWriteOptions", "FileStlReadOptions", "FileStp", "FileStpReadOptions", "FileStpWriteOptions", "FileSvg", "FileSvgReadOptions", "FileSW", "FileSwReadOptions", "FileTxt", "FileTxtReadOptions", "FileTxtWriteOptions", "FileUdo", "FileUdoWriteOptions", "FileUsd", "FileUsdWriteOptions", "FileVda", "FileVdaWriteOptions", "FileVrml", "FileVrmlWriteOptions", "FileX3dv", "FileX3dvWriteOptions", "FileXaml", "FileXamlWriteOptions", "FileX_T", "FileX_TWriteOptions", "ImageFile", "File3dmSettings", "File3dmEmbeddedFiles", "File3dmEmbeddedFile", "File3dm", "File3dmWriteOptions", "File3dmObject", "ICommonComponentTable", "CommonComponentTable", "File3dmCommonComponentTable", "ManifestTable", "File3dmObjectTable", "File3dmPlugInData", "File3dmPlugInDataTable", "File3dmMaterialTable", "File3dmLinetypeTable", "File3dmLayerTable", "File3dmGroupTable", "File3dmDimStyleTable", "File3dmHatchPatternTable", "File3dmInstanceDefinitionTable", "File3dmViewTable", "File3dmNamedConstructionPlanes", "File3dmStringTable", "FileReference", "NameHash", "ContentHash", "SHA1OpenNURBS", "File3dmDisplacement", "File3dmEdgeSoftening", "File3dmThickening", "File3dmCurvePiping", "File3dmShutLining", "File3dmMeshModifiers", "File3dmRenderMaterials", "File3dmRenderEnvironments", "File3dmRenderTextures", "File3dmRenderContent", "File3dmRenderMaterial", "File3dmRenderEnvironment", "File3dmRenderTexture", "TextLog", "File3dmTypeCodes", "FileWriteOptions", "FileReadOptions", "FileType", "File3dmNotes", "BinaryArchiveException", "BinaryArchiveWriter", "BinaryArchiveReader", "BinaryArchiveMode", "BinaryArchiveFile", "SerializationOptions", "Units", "MeshPrecisionMode", "AutocadVersion", "ExportMeshMode", "ExportSurfaceMode", "ExportLineMode", "ExportArcMode", "ExportSplineMode", "ExportPolylineMode", "ExportPolycurveMode", "FlattenMode", "ColorMethodType", "ObjectType", "MaterialType", "ReadViewType", "SubDMeshing", "IgesStringTypeMode", "IgeswVersionMode", "EolMode", "PointObjectsMode", "MaxDegreeMode", "SurfacesMode", "PolySurfacesMode", "SolidsMode", "MeshesMode", "AsciiEol", "CurveType", "GeometryType", "ObjObjectNames", "ObjGroupNames", "PolylineExportType", "VertexWelding", "NGons", "UseObjGsAs", "UseObjOsAs", "PDF_UNITS", "SatTypes", "SketchUpVersion", "StepSchema", "ImportFillMode", "DelimiterMode", "AnimationMode", "X_T_Types", "TableTypeFilter", "ObjectTypeFilter", "SweepResolutionFormulas", "CapTypes"]
# endregion

# region: Imports
from Rhino import Collections
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import PlugIns
from Rhino import Render
from System import Drawing
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Security import Cryptography
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class FileReferenceStatus(enum.Enum):
    Unknown = 0
    FullPathValid = 1
    FileNotFound = 2

class FileFindPreference(enum.Enum):
    None_ = 0
    FullPath = 1
    RelativePath = 2
    BasePath = 3
    ContentMatch = 4
    MostRecent = 5

class DracoCompression(object):
    """Google Draco compression for mesh and point cloud data

    """
    @overload
    @staticmethod
    def Compress(mesh: Geometry.Mesh) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(pointCloud: Geometry.PointCloud) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(mesh: Geometry.Mesh, options: DracoCompressionOptions) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(pointCloud: Geometry.PointCloud, options: DracoCompressionOptions) -> DracoCompression: ...
    @overload
    @staticmethod
    def DecompressBase64String(encoded: str) -> Geometry.GeometryBase: ...
    @overload
    @staticmethod
    def DecompressByteArray(bytes_: System.System.Array[System.Byte]) -> Geometry.GeometryBase: ...
    @overload
    @staticmethod
    def DecompressFile(path: str) -> Geometry.GeometryBase: ...
    @overload
    def Dispose() -> None: ...
    @property
    def NormalAttributePosition(self) -> int: ...
    @property
    def TextureCoordinatesAttributePosition(self) -> int: ...
    @property
    def VertexAttributePosition(self) -> int: ...
    @property
    def VertexColorAttributePosition(self) -> int: ...
    @overload
    def ToBase64String() -> str: ...
    @overload
    def ToByteArray() -> System.System.Array[System.Byte]: ...
    @overload
    def Write(self, path: str) -> bool: ...

class DracoColorFormat(enum.Enum):
    ARGB = 0
    RGBA = 1

class DracoCompressionOptions(object):
    """Options for applying Draco compression

    """
    def __init__(self): ...
    @property
    def IncludeNormals(self) -> bool: ...
    @property
    def IncludeTextureCoordinates(self) -> bool: ...
    @property
    def IncludeVertexColors(self) -> bool: ...
    @property
    def VertexColorFormat(self) -> DracoColorFormat: ...
    @property
    def CompressionLevel(self) -> int: ...
    @property
    def NormalQuantizationBits(self) -> int: ...
    @property
    def PositionQuantizationBits(self) -> int: ...
    @property
    def TextureCoordintateQuantizationBits(self) -> int: ...
    @CompressionLevel.setter
    def CompressionLevel(self, value: System.Void): ...
    @NormalQuantizationBits.setter
    def NormalQuantizationBits(self, value: System.Void): ...
    @PositionQuantizationBits.setter
    def PositionQuantizationBits(self, value: System.Void): ...
    @TextureCoordintateQuantizationBits.setter
    def TextureCoordintateQuantizationBits(self, value: System.Void): ...

class File3ds(object):
    """Support for writing 3ds file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: File3dsReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: File3dsWriteOptions) -> bool: ...

class File3dsWriteOptions(object):
    """Options for writing a 3ds file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def SaveLights(self) -> bool: ...
    @property
    def SaveViews(self) -> bool: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @SaveLights.setter
    def SaveLights(self, value: System.Void): ...
    @SaveViews.setter
    def SaveViews(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class File3dsReadOptions(object):
    """Options for reading a 3ds file

    """
    def __init__(self): ...
    @property
    def ImportCameras(self) -> bool: ...
    @property
    def ImportLights(self) -> bool: ...
    @property
    def Unweld(self) -> bool: ...
    @property
    def UnweldAngle(self) -> float: ...
    @ImportCameras.setter
    def ImportCameras(self, value: System.Void): ...
    @ImportLights.setter
    def ImportLights(self, value: System.Void): ...
    @Unweld.setter
    def Unweld(self, value: System.Void): ...
    @UnweldAngle.setter
    def UnweldAngle(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class File3mf(object):
    """Support for writing 3mf file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: File3mfWriteOptions) -> bool: ...

class File3mfWriteOptions(object):
    """Options for writing a 3mf file

    """
    def __init__(self): ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Designer(self) -> str: ...
    @property
    def LicenseTerms(self) -> str: ...
    @property
    def Metadata(self) -> Generic.Dictionary: ...
    @property
    def MoveOutputToPositiveXYZOctant(self) -> bool: ...
    @property
    def Rating(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Designer.setter
    def Designer(self, value: System.Void): ...
    @LicenseTerms.setter
    def LicenseTerms(self, value: System.Void): ...
    @MoveOutputToPositiveXYZOctant.setter
    def MoveOutputToPositiveXYZOctant(self, value: System.Void): ...
    @Rating.setter
    def Rating(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileAmf(object):
    """Support for writing amf file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileAmfWriteOptions) -> bool: ...

class FileAmfWriteOptions(object):
    """Options for writing a amf file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileAi(object):
    """Support for writing ai file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileAiReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileAiWriteOptions) -> bool: ...

class FileAiWriteOptions(object):
    """Options for writing a ai file

    """
    def __init__(self): ...
    @property
    def AIScale(self) -> float: ...
    @property
    def AiUnits(self) -> Units: ...
    @property
    def ExportHatchesAsSolidFills(self) -> bool: ...
    @property
    def ExportViewBoundary(self) -> bool: ...
    @property
    def OrderLayers(self) -> bool: ...
    @property
    def PreserveModelScale(self) -> bool: ...
    @property
    def RhinoScale(self) -> float: ...
    @property
    def UseCMYK(self) -> bool: ...
    @AIScale.setter
    def AIScale(self, value: System.Void): ...
    @AiUnits.setter
    def AiUnits(self, value: System.Void): ...
    @ExportHatchesAsSolidFills.setter
    def ExportHatchesAsSolidFills(self, value: System.Void): ...
    @ExportViewBoundary.setter
    def ExportViewBoundary(self, value: System.Void): ...
    @OrderLayers.setter
    def OrderLayers(self, value: System.Void): ...
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: System.Void): ...
    @RhinoScale.setter
    def RhinoScale(self, value: System.Void): ...
    @UseCMYK.setter
    def UseCMYK(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileAiReadOptions(object):
    """Options for reading a AI file (old ai files, ps not pdf)

    """
    def __init__(self): ...
    @property
    def AiScale(self) -> float: ...
    @property
    def AiUnits(self) -> Units: ...
    @property
    def PreserveModelScale(self) -> bool: ...
    @property
    def RhinoScale(self) -> float: ...
    @AiScale.setter
    def AiScale(self, value: System.Void): ...
    @AiUnits.setter
    def AiUnits(self, value: System.Void): ...
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: System.Void): ...
    @RhinoScale.setter
    def RhinoScale(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileCd(object):
    """Support for writing CD file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileCdWriteOptions) -> bool: ...

class FileCdWriteOptions(object):
    """Options for writing a CD file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileCsv(object):
    """Support for writing Csv file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileCsvWriteOptions) -> bool: ...

class FileCsvWriteOptions(object):
    """Options for writing a Csv file. Set any value you want included in the output to true. With the exception of Header and CumulativeMassProperties, all checked items apply to each and every object exported.

    """
    def __init__(self): ...
    @property
    def Area(self) -> bool: ...
    @property
    def AreaCentroid(self) -> bool: ...
    @property
    def AreaMoments(self) -> bool: ...
    @property
    def AttributesKeys(self) -> bool: ...
    @property
    def AttributesTexts(self) -> bool: ...
    @property
    def CumulativeMassProperties(self) -> bool: ...
    @property
    def GroupIndexes(self) -> bool: ...
    @property
    def GroupName(self) -> bool: ...
    @property
    def Header(self) -> bool: ...
    @property
    def LayerColor(self) -> bool: ...
    @property
    def LayerHierarchy(self) -> bool: ...
    @property
    def LayerIndex(self) -> bool: ...
    @property
    def LayerName(self) -> bool: ...
    @property
    def Length(self) -> bool: ...
    @property
    def ObjectColor(self) -> bool: ...
    @property
    def ObjectDescription(self) -> bool: ...
    @property
    def ObjectID(self) -> bool: ...
    @property
    def ObjectKeys(self) -> bool: ...
    @property
    def ObjectMaterial(self) -> bool: ...
    @property
    def ObjectName(self) -> bool: ...
    @property
    def ObjectsTexts(self) -> bool: ...
    @property
    def Perimeter(self) -> bool: ...
    @property
    def SurroundPointsWithDoubleQuotes(self) -> bool: ...
    @property
    def Volume(self) -> bool: ...
    @property
    def VolumeCentroid(self) -> bool: ...
    @property
    def VolumeMoments(self) -> bool: ...
    @Area.setter
    def Area(self, value: System.Void): ...
    @AreaCentroid.setter
    def AreaCentroid(self, value: System.Void): ...
    @AreaMoments.setter
    def AreaMoments(self, value: System.Void): ...
    @AttributesKeys.setter
    def AttributesKeys(self, value: System.Void): ...
    @AttributesTexts.setter
    def AttributesTexts(self, value: System.Void): ...
    @CumulativeMassProperties.setter
    def CumulativeMassProperties(self, value: System.Void): ...
    @GroupIndexes.setter
    def GroupIndexes(self, value: System.Void): ...
    @GroupName.setter
    def GroupName(self, value: System.Void): ...
    @Header.setter
    def Header(self, value: System.Void): ...
    @LayerColor.setter
    def LayerColor(self, value: System.Void): ...
    @LayerHierarchy.setter
    def LayerHierarchy(self, value: System.Void): ...
    @LayerIndex.setter
    def LayerIndex(self, value: System.Void): ...
    @LayerName.setter
    def LayerName(self, value: System.Void): ...
    @Length.setter
    def Length(self, value: System.Void): ...
    @ObjectColor.setter
    def ObjectColor(self, value: System.Void): ...
    @ObjectDescription.setter
    def ObjectDescription(self, value: System.Void): ...
    @ObjectID.setter
    def ObjectID(self, value: System.Void): ...
    @ObjectKeys.setter
    def ObjectKeys(self, value: System.Void): ...
    @ObjectMaterial.setter
    def ObjectMaterial(self, value: System.Void): ...
    @ObjectName.setter
    def ObjectName(self, value: System.Void): ...
    @ObjectsTexts.setter
    def ObjectsTexts(self, value: System.Void): ...
    @Perimeter.setter
    def Perimeter(self, value: System.Void): ...
    @SurroundPointsWithDoubleQuotes.setter
    def SurroundPointsWithDoubleQuotes(self, value: System.Void): ...
    @Volume.setter
    def Volume(self, value: System.Void): ...
    @VolumeCentroid.setter
    def VolumeCentroid(self, value: System.Void): ...
    @VolumeMoments.setter
    def VolumeMoments(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileDgn(object):
    """Support for writing Dgn file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileDgnReadOptions) -> bool: ...

class FileDgnReadOptions(object):
    """Options for reading a Dgn file

    """
    def __init__(self): ...
    @property
    def GroupCellHeaders(self) -> bool: ...
    @property
    def ImportUnreferencedBlocks(self) -> bool: ...
    @property
    def ImportUnreferencedLayers(self) -> bool: ...
    @property
    def ImportUnreferencedLineStyles(self) -> bool: ...
    @property
    def ImportViews(self) -> bool: ...
    @GroupCellHeaders.setter
    def GroupCellHeaders(self, value: System.Void): ...
    @ImportUnreferencedBlocks.setter
    def ImportUnreferencedBlocks(self, value: System.Void): ...
    @ImportUnreferencedLayers.setter
    def ImportUnreferencedLayers(self, value: System.Void): ...
    @ImportUnreferencedLineStyles.setter
    def ImportUnreferencedLineStyles(self, value: System.Void): ...
    @ImportViews.setter
    def ImportViews(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileDst(object):
    """Support for writing dst file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileDstReadOptions) -> bool: ...

class FileDstReadOptions(object):
    """Options for reading a Dst file

    """
    def __init__(self): ...
    @property
    def ImportJumps(self) -> bool: ...
    @ImportJumps.setter
    def ImportJumps(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileDwg(object):
    """Support for writing DWG file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileDwgReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileDwgWriteOptions) -> bool: ...

class FileDwgReadOptions(object):
    """Options for reading a DWG file

    """
    def __init__(self): ...
    @property
    def ConvertRegionsToCurves(self) -> bool: ...
    @property
    def ConvertWidePolylinesToSurfaces(self) -> bool: ...
    @property
    def IgnoreThickness(self) -> bool: ...
    @property
    def ImportUnreferencedBlocks(self) -> bool: ...
    @property
    def ImportUnreferencedLayers(self) -> bool: ...
    @property
    def ImportUnreferencedLinetypes(self) -> bool: ...
    @property
    def LayoutUnits(self) -> Rhino.UnitSystem: ...
    @property
    def MeshPrecision(self) -> MeshPrecisionMode: ...
    @property
    def ModelUnits(self) -> Rhino.UnitSystem: ...
    @property
    def SetLayerMaterialToLayerColor(self) -> bool: ...
    @ConvertRegionsToCurves.setter
    def ConvertRegionsToCurves(self, value: System.Void): ...
    @ConvertWidePolylinesToSurfaces.setter
    def ConvertWidePolylinesToSurfaces(self, value: System.Void): ...
    @IgnoreThickness.setter
    def IgnoreThickness(self, value: System.Void): ...
    @ImportUnreferencedBlocks.setter
    def ImportUnreferencedBlocks(self, value: System.Void): ...
    @ImportUnreferencedLayers.setter
    def ImportUnreferencedLayers(self, value: System.Void): ...
    @ImportUnreferencedLinetypes.setter
    def ImportUnreferencedLinetypes(self, value: System.Void): ...
    @LayoutUnits.setter
    def LayoutUnits(self, value: System.Void): ...
    @MeshPrecision.setter
    def MeshPrecision(self, value: System.Void): ...
    @ModelUnits.setter
    def ModelUnits(self, value: System.Void): ...
    @SetLayerMaterialToLayerColor.setter
    def SetLayerMaterialToLayerColor(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileDwgWriteOptions(object):
    """Options for writing a DWG file

    """
    def __init__(self): ...
    @property
    def ColorMethod(self) -> ColorMethodType: ...
    @property
    def CurveChordHeight(self) -> float: ...
    @property
    def CurveMaxAngleDegrees(self) -> float: ...
    @property
    def CurveMaxAngleRadians(self) -> float: ...
    @property
    def CurveSegmentLength(self) -> float: ...
    @property
    def CurveUseChordHeight(self) -> bool: ...
    @property
    def CurveUseMaxAngle(self) -> bool: ...
    @property
    def CurveUseSegmentLength(self) -> bool: ...
    @property
    def ExportArcsAs(self) -> ExportArcMode: ...
    @property
    def ExportLinesAs(self) -> ExportLineMode: ...
    @property
    def ExportMeshesAs(self) -> ExportMeshMode: ...
    @property
    def ExportPolycurvesAs(self) -> ExportPolycurveMode: ...
    @property
    def ExportPolylinesAs(self) -> ExportPolylineMode: ...
    @property
    def ExportSplinesAs(self) -> ExportSplineMode: ...
    @property
    def ExportSurfacesAs(self) -> ExportSurfaceMode: ...
    @property
    def Flatten(self) -> FlattenMode: ...
    @property
    def FullLayerPath(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def MinPointDistance(self) -> float: ...
    @property
    def NoDxfHeader(self) -> bool: ...
    @property
    def PreserveArcNormals(self) -> bool: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SimplifyTolerance(self) -> float: ...
    @property
    def SplitPolycurves(self) -> bool: ...
    @property
    def SplitSplines(self) -> bool: ...
    @property
    def UseLWPolylines(self) -> bool: ...
    @property
    def Version(self) -> AutocadVersion: ...
    @ColorMethod.setter
    def ColorMethod(self, value: System.Void): ...
    @CurveChordHeight.setter
    def CurveChordHeight(self, value: System.Void): ...
    @CurveMaxAngleDegrees.setter
    def CurveMaxAngleDegrees(self, value: System.Void): ...
    @CurveMaxAngleRadians.setter
    def CurveMaxAngleRadians(self, value: System.Void): ...
    @CurveSegmentLength.setter
    def CurveSegmentLength(self, value: System.Void): ...
    @CurveUseChordHeight.setter
    def CurveUseChordHeight(self, value: System.Void): ...
    @CurveUseMaxAngle.setter
    def CurveUseMaxAngle(self, value: System.Void): ...
    @CurveUseSegmentLength.setter
    def CurveUseSegmentLength(self, value: System.Void): ...
    @ExportArcsAs.setter
    def ExportArcsAs(self, value: System.Void): ...
    @ExportLinesAs.setter
    def ExportLinesAs(self, value: System.Void): ...
    @ExportMeshesAs.setter
    def ExportMeshesAs(self, value: System.Void): ...
    @ExportPolycurvesAs.setter
    def ExportPolycurvesAs(self, value: System.Void): ...
    @ExportPolylinesAs.setter
    def ExportPolylinesAs(self, value: System.Void): ...
    @ExportSplinesAs.setter
    def ExportSplinesAs(self, value: System.Void): ...
    @ExportSurfacesAs.setter
    def ExportSurfacesAs(self, value: System.Void): ...
    @Flatten.setter
    def Flatten(self, value: System.Void): ...
    @FullLayerPath.setter
    def FullLayerPath(self, value: System.Void): ...
    @IsDefault.setter
    def IsDefault(self, value: System.Void): ...
    @MinPointDistance.setter
    def MinPointDistance(self, value: System.Void): ...
    @NoDxfHeader.setter
    def NoDxfHeader(self, value: System.Void): ...
    @PreserveArcNormals.setter
    def PreserveArcNormals(self, value: System.Void): ...
    @Simplify.setter
    def Simplify(self, value: System.Void): ...
    @SimplifyTolerance.setter
    def SimplifyTolerance(self, value: System.Void): ...
    @SplitPolycurves.setter
    def SplitPolycurves(self, value: System.Void): ...
    @SplitSplines.setter
    def SplitSplines(self, value: System.Void): ...
    @UseLWPolylines.setter
    def UseLWPolylines(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileEps(object):
    """Support for reading eps file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileEpsReadOptions) -> bool: ...

class FileEpsReadOptions(object):
    """Options for reading a AI file (old ai files, ps not pdf)

    """
    def __init__(self): ...
    @property
    def EpsScale(self) -> float: ...
    @property
    def EpsUnits(self) -> Units: ...
    @property
    def PreserveModelScale(self) -> bool: ...
    @property
    def RhinoScale(self) -> float: ...
    @EpsScale.setter
    def EpsScale(self, value: System.Void): ...
    @EpsUnits.setter
    def EpsUnits(self, value: System.Void): ...
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: System.Void): ...
    @RhinoScale.setter
    def RhinoScale(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileFbx(object):
    """Support for writing Fbx file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileFbxReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileFbxWriteOptions) -> bool: ...

class FileFbxWriteOptions(object):
    """Options for writing a Fbx file

    """
    def __init__(self): ...
    @property
    def MapRhinoZtoFbxY(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def SaveFileAs(self) -> FileType: ...
    @property
    def SaveLights(self) -> bool: ...
    @property
    def SaveMaterialsAs(self) -> MaterialType: ...
    @property
    def SaveObjectsAs(self) -> ObjectType: ...
    @property
    def SaveVertexNormals(self) -> bool: ...
    @property
    def SaveViews(self) -> bool: ...
    @MapRhinoZtoFbxY.setter
    def MapRhinoZtoFbxY(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @SaveFileAs.setter
    def SaveFileAs(self, value: System.Void): ...
    @SaveLights.setter
    def SaveLights(self, value: System.Void): ...
    @SaveMaterialsAs.setter
    def SaveMaterialsAs(self, value: System.Void): ...
    @SaveObjectsAs.setter
    def SaveObjectsAs(self, value: System.Void): ...
    @SaveVertexNormals.setter
    def SaveVertexNormals(self, value: System.Void): ...
    @SaveViews.setter
    def SaveViews(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileFbxReadOptions(object):
    """Options for reading a Fbx file

    """
    def __init__(self): ...
    @property
    def ImportCameras(self) -> bool: ...
    @property
    def ImportLights(self) -> bool: ...
    @property
    def ImportMeshesAsSubD(self) -> bool: ...
    @property
    def MapFbxYtoRhinoZ(self) -> bool: ...
    @property
    def Unweld(self) -> bool: ...
    @property
    def UnweldAngle(self) -> float: ...
    @ImportCameras.setter
    def ImportCameras(self, value: System.Void): ...
    @ImportLights.setter
    def ImportLights(self, value: System.Void): ...
    @ImportMeshesAsSubD.setter
    def ImportMeshesAsSubD(self, value: System.Void): ...
    @MapFbxYtoRhinoZ.setter
    def MapFbxYtoRhinoZ(self, value: System.Void): ...
    @Unweld.setter
    def Unweld(self, value: System.Void): ...
    @UnweldAngle.setter
    def UnweldAngle(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileGHS(object):
    """Support for reading eps file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileGHSReadOptions) -> bool: ...

class FileGHSReadOptions(object):
    """Options for reading a GHS file

    """
    def __init__(self): ...
    @property
    def AttachGhsData(self) -> bool: ...
    @property
    def RemoveColinearPoints(self) -> bool: ...
    @property
    def ViewType(self) -> ReadViewType: ...
    @AttachGhsData.setter
    def AttachGhsData(self, value: System.Void): ...
    @RemoveColinearPoints.setter
    def RemoveColinearPoints(self, value: System.Void): ...
    @ViewType.setter
    def ViewType(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileGltf(object):
    """Support for writing glTF file format

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileGltfWriteOptions) -> bool: ...

class FileGltfWriteOptions(object):
    """Options used when writing a glTF file

    """
    def __init__(self): ...
    @property
    def CullBackfaces(self) -> bool: ...
    @property
    def DracoCompressionLevel(self) -> int: ...
    @property
    def DracoQuantizationBitsNormal(self) -> int: ...
    @property
    def DracoQuantizationBitsPosition(self) -> int: ...
    @property
    def DracoQuantizationBitsTextureCoordinate(self) -> int: ...
    @property
    def ExportLayers(self) -> bool: ...
    @property
    def ExportMaterials(self) -> bool: ...
    @property
    def ExportOpenMeshes(self) -> bool: ...
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @property
    def ExportVertexColors(self) -> bool: ...
    @property
    def ExportVertexNormals(self) -> bool: ...
    @property
    def MapZToY(self) -> bool: ...
    @property
    def SubDMeshType(self) -> SubDMeshing: ...
    @property
    def SubDSurfaceMeshingDensity(self) -> int: ...
    @property
    def UseDisplayColorForUnsetMaterials(self) -> bool: ...
    @property
    def UseDracoCompression(self) -> bool: ...
    @CullBackfaces.setter
    def CullBackfaces(self, value: System.Void): ...
    @DracoCompressionLevel.setter
    def DracoCompressionLevel(self, value: System.Void): ...
    @DracoQuantizationBitsNormal.setter
    def DracoQuantizationBitsNormal(self, value: System.Void): ...
    @DracoQuantizationBitsPosition.setter
    def DracoQuantizationBitsPosition(self, value: System.Void): ...
    @DracoQuantizationBitsTextureCoordinate.setter
    def DracoQuantizationBitsTextureCoordinate(self, value: System.Void): ...
    @ExportLayers.setter
    def ExportLayers(self, value: System.Void): ...
    @ExportMaterials.setter
    def ExportMaterials(self, value: System.Void): ...
    @ExportOpenMeshes.setter
    def ExportOpenMeshes(self, value: System.Void): ...
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: System.Void): ...
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: System.Void): ...
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: System.Void): ...
    @MapZToY.setter
    def MapZToY(self, value: System.Void): ...
    @SubDMeshType.setter
    def SubDMeshType(self, value: System.Void): ...
    @SubDSurfaceMeshingDensity.setter
    def SubDSurfaceMeshingDensity(self, value: System.Void): ...
    @UseDisplayColorForUnsetMaterials.setter
    def UseDisplayColorForUnsetMaterials(self, value: System.Void): ...
    @UseDracoCompression.setter
    def UseDracoCompression(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileGts(object):
    """Support for writing Gts file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileGtsWriteOptions) -> bool: ...

class FileGtsWriteOptions(object):
    """Options for writing a Gts file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileIgs(object):
    """Support for writing Igs file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileIgsWriteOptions) -> bool: ...

class FileIgsWriteOptions(object):
    """Options for writing a Igs file

    """
    def __init__(self): ...
    @property
    def Author(self) -> str: ...
    @property
    def CatiaTolsize(self) -> float: ...
    @property
    def CatiaVersion(self) -> int: ...
    @property
    def ClampCurveEndKnots(self) -> bool: ...
    @property
    def ClampSurfaceEndKnots(self) -> bool: ...
    @property
    def CompositeCurvesAsSingleBsplines(self) -> bool: ...
    @property
    def CurveMaxDegree(self) -> MaxDegreeMode: ...
    @property
    def DoublesUseE(self) -> bool: ...
    @property
    def EolType(self) -> EolMode: ...
    @property
    def FitRationalCurves(self) -> bool: ...
    @property
    def FitRationalSurfaces(self) -> bool: ...
    @property
    def FlagDependentCurvesAs03(self) -> bool: ...
    @property
    def FlagDependentSurfacesAs03(self) -> bool: ...
    @property
    def ForceBezierKnotsOnCurves(self) -> bool: ...
    @property
    def ForceBezierKnotsOnSurfaces(self) -> bool: ...
    @property
    def ForceTrimmedSurfaces(self) -> bool: ...
    @property
    def HideDependentObjects(self) -> bool: ...
    @property
    def IgesStringType(self) -> IgesStringTypeMode: ...
    @property
    def IgesVersion(self) -> IgeswVersionMode: ...
    @property
    def MaxSurfaceDegree(self) -> MaxDegreeMode: ...
    @property
    def MeshType(self) -> MeshesMode: ...
    @property
    def NotesInStartSection(self) -> bool: ...
    @property
    def NoZerosInTSection(self) -> bool: ...
    @property
    def Organization(self) -> str: ...
    @property
    def PointType(self) -> PointObjectsMode: ...
    @property
    def PolySurfaceType(self) -> PolySurfacesMode: ...
    @property
    def Receiver(self) -> str: ...
    @property
    def RenderColorAsIgesColor(self) -> bool: ...
    @property
    def Scale(self) -> float: ...
    @property
    def Sender(self) -> str: ...
    @property
    def SimplifyCurves(self) -> bool: ...
    @property
    def SimplifySurfaces(self) -> bool: ...
    @property
    def SolidType(self) -> SolidsMode: ...
    @property
    def SplitBiPolarSurfaces(self) -> bool: ...
    @property
    def SplitClosedSurfaces(self) -> bool: ...
    @property
    def SurfaceType(self) -> SurfacesMode: ...
    @property
    def Tolerance(self) -> float: ...
    @property
    def Units(self) -> Rhino.UnitSystem: ...
    @property
    def UseParentLabelOnCurves(self) -> bool: ...
    @property
    def UseParentLabelOnSurfaces(self) -> bool: ...
    @property
    def WriteNonPlanarUnitNormal(self) -> bool: ...
    @Author.setter
    def Author(self, value: System.Void): ...
    @CatiaTolsize.setter
    def CatiaTolsize(self, value: System.Void): ...
    @CatiaVersion.setter
    def CatiaVersion(self, value: System.Void): ...
    @ClampCurveEndKnots.setter
    def ClampCurveEndKnots(self, value: System.Void): ...
    @ClampSurfaceEndKnots.setter
    def ClampSurfaceEndKnots(self, value: System.Void): ...
    @CompositeCurvesAsSingleBsplines.setter
    def CompositeCurvesAsSingleBsplines(self, value: System.Void): ...
    @CurveMaxDegree.setter
    def CurveMaxDegree(self, value: System.Void): ...
    @DoublesUseE.setter
    def DoublesUseE(self, value: System.Void): ...
    @EolType.setter
    def EolType(self, value: System.Void): ...
    @FitRationalCurves.setter
    def FitRationalCurves(self, value: System.Void): ...
    @FitRationalSurfaces.setter
    def FitRationalSurfaces(self, value: System.Void): ...
    @FlagDependentCurvesAs03.setter
    def FlagDependentCurvesAs03(self, value: System.Void): ...
    @FlagDependentSurfacesAs03.setter
    def FlagDependentSurfacesAs03(self, value: System.Void): ...
    @ForceBezierKnotsOnCurves.setter
    def ForceBezierKnotsOnCurves(self, value: System.Void): ...
    @ForceBezierKnotsOnSurfaces.setter
    def ForceBezierKnotsOnSurfaces(self, value: System.Void): ...
    @ForceTrimmedSurfaces.setter
    def ForceTrimmedSurfaces(self, value: System.Void): ...
    @HideDependentObjects.setter
    def HideDependentObjects(self, value: System.Void): ...
    @IgesStringType.setter
    def IgesStringType(self, value: System.Void): ...
    @IgesVersion.setter
    def IgesVersion(self, value: System.Void): ...
    @MaxSurfaceDegree.setter
    def MaxSurfaceDegree(self, value: System.Void): ...
    @MeshType.setter
    def MeshType(self, value: System.Void): ...
    @NotesInStartSection.setter
    def NotesInStartSection(self, value: System.Void): ...
    @NoZerosInTSection.setter
    def NoZerosInTSection(self, value: System.Void): ...
    @Organization.setter
    def Organization(self, value: System.Void): ...
    @PointType.setter
    def PointType(self, value: System.Void): ...
    @PolySurfaceType.setter
    def PolySurfaceType(self, value: System.Void): ...
    @Receiver.setter
    def Receiver(self, value: System.Void): ...
    @RenderColorAsIgesColor.setter
    def RenderColorAsIgesColor(self, value: System.Void): ...
    @Scale.setter
    def Scale(self, value: System.Void): ...
    @Sender.setter
    def Sender(self, value: System.Void): ...
    @SimplifyCurves.setter
    def SimplifyCurves(self, value: System.Void): ...
    @SimplifySurfaces.setter
    def SimplifySurfaces(self, value: System.Void): ...
    @SolidType.setter
    def SolidType(self, value: System.Void): ...
    @SplitBiPolarSurfaces.setter
    def SplitBiPolarSurfaces(self, value: System.Void): ...
    @SplitClosedSurfaces.setter
    def SplitClosedSurfaces(self, value: System.Void): ...
    @SurfaceType.setter
    def SurfaceType(self, value: System.Void): ...
    @Tolerance.setter
    def Tolerance(self, value: System.Void): ...
    @Units.setter
    def Units(self, value: System.Void): ...
    @UseParentLabelOnCurves.setter
    def UseParentLabelOnCurves(self, value: System.Void): ...
    @UseParentLabelOnSurfaces.setter
    def UseParentLabelOnSurfaces(self, value: System.Void): ...
    @WriteNonPlanarUnitNormal.setter
    def WriteNonPlanarUnitNormal(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileLwo(object):
    """Support for writing lwo file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileLwoReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileLwoWriteOptions) -> bool: ...

class FileLwoWriteOptions(object):
    """Options for writing a Lwo file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def WriteVersion6(self) -> bool: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @WriteVersion6.setter
    def WriteVersion6(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileLwoReadOptions(object):
    """Options for reading a Lwo file

    """
    def __init__(self): ...
    @property
    def Unweld(self) -> bool: ...
    @property
    def UnweldAngle(self) -> float: ...
    @Unweld.setter
    def Unweld(self, value: System.Void): ...
    @UnweldAngle.setter
    def UnweldAngle(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileObj(object):
    """Support for obj file format

    """
    @overload
    @staticmethod
    def Read(filename: str, doc: Rhino.RhinoDoc, options: FileObjReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileObjWriteOptions) -> PlugIns.WriteFileResult: ...
    @overload
    @staticmethod
    def Write(stream: IO.StreamWriter, doc: Rhino.RhinoDoc, options: FileObjWriteOptions) -> PlugIns.WriteFileResult: ...
    @overload
    @staticmethod
    def Write(filename: str, meshes: Geometry.System.Array[Geometry.Mesh], options: FileObjWriteOptions) -> PlugIns.WriteFileResult: ...

class FileObjWriteOptions(object):
    """    """
    def __init__(self, writeOptions: FileWriteOptions): ...
    @property
    def AngleTolRadians(self) -> float: ...
    @property
    def WriteOptions(self) -> FileWriteOptions: ...
    @property
    def ActualFilePathOnMac(self) -> str: ...
    @property
    def CreateNgons(self) -> bool: ...
    @property
    def CullUnnecessaryVertexesInNgons(self) -> bool: ...
    @property
    def EolType(self) -> AsciiEol: ...
    @property
    def ExportAsTriangles(self) -> bool: ...
    @property
    def ExportGroupNameLayerNames(self) -> ObjGroupNames: ...
    @property
    def ExportMaterialDefinitions(self) -> bool: ...
    @property
    def ExportNormals(self) -> bool: ...
    @property
    def ExportObjectNames(self) -> ObjObjectNames: ...
    @property
    def ExportOpenMeshes(self) -> bool: ...
    @property
    def ExportTcs(self) -> bool: ...
    @property
    def ExportVcs(self) -> bool: ...
    @property
    def IncludeUnweldedEdgesInNgons(self) -> bool: ...
    @property
    def MapZtoY(self) -> bool: ...
    @property
    def MergeNestedGroupingNames(self) -> bool: ...
    @property
    def MeshParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def MeshType(self) -> VertexWelding: ...
    @property
    def MinNgonFaceCount(self) -> int: ...
    @property
    def NgonMode(self) -> NGons: ...
    @property
    def ObjectType(self) -> GeometryType: ...
    @property
    def PolylineType(self) -> PolylineExportType: ...
    @property
    def SignificantDigits(self) -> int: ...
    @property
    def SortObjGroups(self) -> bool: ...
    @property
    def SubDMeshType(self) -> SubDMeshing: ...
    @property
    def SubDSurfaceMeshingDensity(self) -> int: ...
    @property
    def TrimCurveType(self) -> CurveType: ...
    @property
    def UnderbarMaterialNames(self) -> bool: ...
    @property
    def UseDisplayColorForMaterial(self) -> bool: ...
    @property
    def UseRelativeIndexing(self) -> bool: ...
    @property
    def UseRenderMeshes(self) -> bool: ...
    @property
    def UseSimpleDialog(self) -> bool: ...
    @property
    def VcsFormat(self) -> int: ...
    @property
    def WrapLongLines(self) -> bool: ...
    @overload
    def GetTransform() -> Geometry.Transform: ...
    @ActualFilePathOnMac.setter
    def ActualFilePathOnMac(self, value: System.Void): ...
    @CreateNgons.setter
    def CreateNgons(self, value: System.Void): ...
    @CullUnnecessaryVertexesInNgons.setter
    def CullUnnecessaryVertexesInNgons(self, value: System.Void): ...
    @EolType.setter
    def EolType(self, value: System.Void): ...
    @ExportAsTriangles.setter
    def ExportAsTriangles(self, value: System.Void): ...
    @ExportGroupNameLayerNames.setter
    def ExportGroupNameLayerNames(self, value: System.Void): ...
    @ExportMaterialDefinitions.setter
    def ExportMaterialDefinitions(self, value: System.Void): ...
    @ExportNormals.setter
    def ExportNormals(self, value: System.Void): ...
    @ExportObjectNames.setter
    def ExportObjectNames(self, value: System.Void): ...
    @ExportOpenMeshes.setter
    def ExportOpenMeshes(self, value: System.Void): ...
    @ExportTcs.setter
    def ExportTcs(self, value: System.Void): ...
    @ExportVcs.setter
    def ExportVcs(self, value: System.Void): ...
    @IncludeUnweldedEdgesInNgons.setter
    def IncludeUnweldedEdgesInNgons(self, value: System.Void): ...
    @MapZtoY.setter
    def MapZtoY(self, value: System.Void): ...
    @MergeNestedGroupingNames.setter
    def MergeNestedGroupingNames(self, value: System.Void): ...
    @MeshParameters.setter
    def MeshParameters(self, value: System.Void): ...
    @MeshType.setter
    def MeshType(self, value: System.Void): ...
    @MinNgonFaceCount.setter
    def MinNgonFaceCount(self, value: System.Void): ...
    @NgonMode.setter
    def NgonMode(self, value: System.Void): ...
    @ObjectType.setter
    def ObjectType(self, value: System.Void): ...
    @PolylineType.setter
    def PolylineType(self, value: System.Void): ...
    @SignificantDigits.setter
    def SignificantDigits(self, value: System.Void): ...
    @SortObjGroups.setter
    def SortObjGroups(self, value: System.Void): ...
    @SubDMeshType.setter
    def SubDMeshType(self, value: System.Void): ...
    @SubDSurfaceMeshingDensity.setter
    def SubDSurfaceMeshingDensity(self, value: System.Void): ...
    @TrimCurveType.setter
    def TrimCurveType(self, value: System.Void): ...
    @UnderbarMaterialNames.setter
    def UnderbarMaterialNames(self, value: System.Void): ...
    @UseDisplayColorForMaterial.setter
    def UseDisplayColorForMaterial(self, value: System.Void): ...
    @UseRelativeIndexing.setter
    def UseRelativeIndexing(self, value: System.Void): ...
    @UseRenderMeshes.setter
    def UseRenderMeshes(self, value: System.Void): ...
    @UseSimpleDialog.setter
    def UseSimpleDialog(self, value: System.Void): ...
    @VcsFormat.setter
    def VcsFormat(self, value: System.Void): ...
    @WrapLongLines.setter
    def WrapLongLines(self, value: System.Void): ...

class FileObjReadOptions(object):
    """Options used when reading an obj file.

    """
    def __init__(self, readOptions: FileReadOptions): ...
    @property
    def ReadOptions(self) -> FileReadOptions: ...
    @property
    def DisplayColorFromObjMaterial(self) -> bool: ...
    @property
    def IgnoreTextures(self) -> bool: ...
    @property
    def MapYtoZ(self) -> bool: ...
    @property
    def MorphTargetOnly(self) -> bool: ...
    @property
    def ReverseGroupOrder(self) -> bool: ...
    @property
    def Split32BitTextures(self) -> bool: ...
    @property
    def UseObjGroupsAs(self) -> UseObjGsAs: ...
    @property
    def UseObjObjectsAs(self) -> UseObjOsAs: ...
    @overload
    def GetTransform() -> Geometry.Transform: ...
    @DisplayColorFromObjMaterial.setter
    def DisplayColorFromObjMaterial(self, value: System.Void): ...
    @IgnoreTextures.setter
    def IgnoreTextures(self, value: System.Void): ...
    @MapYtoZ.setter
    def MapYtoZ(self, value: System.Void): ...
    @MorphTargetOnly.setter
    def MorphTargetOnly(self, value: System.Void): ...
    @ReverseGroupOrder.setter
    def ReverseGroupOrder(self, value: System.Void): ...
    @Split32BitTextures.setter
    def Split32BitTextures(self, value: System.Void): ...
    @UseObjGroupsAs.setter
    def UseObjGroupsAs(self, value: System.Void): ...
    @UseObjObjectsAs.setter
    def UseObjObjectsAs(self, value: System.Void): ...

class FilePdfEventArgs(System.EventArgs):
    """Used for events that are fired while constructing/saving a PDF

    """
    @property
    def Pdf(self) -> FilePdf: ...

class FilePdf(object):
    """Support for PDF file format

    """
    @overload
    def AddPage(self, settings: Display.ViewCaptureSettings) -> int: ...
    @overload
    def AddPage(self, widthInDots: int, heightInDots: int, dotsPerInch: int) -> int: ...
    @overload
    @staticmethod
    def Create() -> FilePdf: ...
    @overload
    def DrawBitmap(self, pageNumber: int, bitmap: Drawing.Bitmap, left: System.Single, top: System.Single, width: System.Single, height: System.Single, rotationInDegrees: System.Single) -> None: ...
    @overload
    def DrawLine(self, pageNumber: int, from_: Drawing.PointF, to: Drawing.PointF, strokeColor: Drawing.Color, strokeWidth: System.Single) -> None: ...
    @overload
    def DrawPolyline(self, pageNumber: int, polyline: Drawing.System.Array[Drawing.PointF], fillColor: Drawing.Color, strokeColor: Drawing.Color, strokeWidth: System.Single) -> None: ...
    @overload
    def DrawText(self, pageNumber: int, text: str, x: float, y: float, heightPoints: System.Single, onfont: DocObjects.Font, fillColor: Drawing.Color, strokeColor: Drawing.Color, strokeWidth: System.Single, angleDegrees: System.Single, horizontalAlignment: DocObjects.TextHorizontalAlignment, verticalAlignment: DocObjects.TextVerticalAlignment) -> None: ...
    @property
    def LayersAsOptionalContentGroups(self) -> bool: ...
    @overload
    def PdfDocumentImplementation() -> object: ...
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FilePdfReadOptions) -> bool: ...
    @LayersAsOptionalContentGroups.setter
    def LayersAsOptionalContentGroups(self, value: System.Void): ...
    @overload
    def Write(self, filename: str) -> None: ...
    @overload
    def Write(self, stream: IO.Stream) -> None: ...
    @property
    def PreWrite(self): ...

class FilePdfReadOptions(object):
    """Options for reading a PDF file

    """
    def __init__(self): ...
    @property
    def ImportFillsAsHatches(self) -> bool: ...
    @property
    def LoadText(self) -> bool: ...
    @property
    def PDFScale(self) -> float: ...
    @property
    def PdfUnits(self) -> PDF_UNITS: ...
    @property
    def PreserveModelScale(self) -> bool: ...
    @property
    def RhinoScale(self) -> float: ...
    @ImportFillsAsHatches.setter
    def ImportFillsAsHatches(self, value: System.Void): ...
    @LoadText.setter
    def LoadText(self, value: System.Void): ...
    @PDFScale.setter
    def PDFScale(self, value: System.Void): ...
    @PdfUnits.setter
    def PdfUnits(self, value: System.Void): ...
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: System.Void): ...
    @RhinoScale.setter
    def RhinoScale(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FilePly(object):
    """Support for ply file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FilePlyReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FilePlyWriteOptions) -> PlugIns.WriteFileResult: ...

class FilePlyReadOptions(object):
    """Options for reading a PLY file

    """
    def __init__(self): ...
    @property
    def PLYModelUnits(self) -> Rhino.UnitSystem: ...
    @PLYModelUnits.setter
    def PLYModelUnits(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FilePlyWriteOptions(object):
    """    """
    def __init__(self, writeOptions: FileWriteOptions): ...
    @property
    def WriteOptions(self) -> FileWriteOptions: ...
    @property
    def ExportASCII(self) -> bool: ...
    @property
    def ExportColors(self) -> bool: ...
    @property
    def ExportDoubles(self) -> bool: ...
    @property
    def ExportMaterial(self) -> bool: ...
    @property
    def ExportNormals(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def UseSimpleDialog(self) -> bool: ...
    @ExportASCII.setter
    def ExportASCII(self, value: System.Void): ...
    @ExportColors.setter
    def ExportColors(self, value: System.Void): ...
    @ExportDoubles.setter
    def ExportDoubles(self, value: System.Void): ...
    @ExportMaterial.setter
    def ExportMaterial(self, value: System.Void): ...
    @ExportNormals.setter
    def ExportNormals(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @UseSimpleDialog.setter
    def UseSimpleDialog(self, value: System.Void): ...

class FilePov(object):
    """Support for writing POV file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FilePovWriteOptions) -> bool: ...

class FilePovWriteOptions(object):
    """Options for writing a POV file

    """
    def __init__(self): ...
    @property
    def ExportAsOneFile(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @ExportAsOneFile.setter
    def ExportAsOneFile(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileRaw(object):
    """Support for writing Raw file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileRawReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileRawWriteOptions) -> bool: ...

class FileRawWriteOptions(object):
    """Options for writing a Raw file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileRawReadOptions(object):
    """Options for reading a Raw file

    """
    def __init__(self): ...
    @property
    def RawModelUnits(self) -> Rhino.UnitSystem: ...
    @RawModelUnits.setter
    def RawModelUnits(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSat(object):
    """Support for writing Sat file format

    """
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileSatWriteOptions) -> bool: ...

class FileSatWriteOptions(object):
    """Options used when writing a Sat file

    """
    def __init__(self): ...
    @property
    def Type(self) -> SatTypes: ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSkp(object):
    """Support for writing Skp file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileSkpReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileSkpWriteOptions) -> bool: ...

class FileSkpReadOptions(object):
    """Options used when reading a Skp file

    """
    def __init__(self): ...
    @property
    def AddObjectsToGroups(self) -> bool: ...
    @property
    def EmbedTexturesInModel(self) -> bool: ...
    @property
    def ImportCurves(self) -> bool: ...
    @property
    def ImportFacesAsMeshes(self) -> bool: ...
    @property
    def JoinEdges(self) -> bool: ...
    @property
    def JoinFaces(self) -> bool: ...
    @property
    def UseGroupLayers(self) -> bool: ...
    @property
    def UseSketchUpTextureWriter(self) -> bool: ...
    @property
    def Weld(self) -> bool: ...
    @property
    def WeldAngle(self) -> float: ...
    @AddObjectsToGroups.setter
    def AddObjectsToGroups(self, value: System.Void): ...
    @EmbedTexturesInModel.setter
    def EmbedTexturesInModel(self, value: System.Void): ...
    @ImportCurves.setter
    def ImportCurves(self, value: System.Void): ...
    @ImportFacesAsMeshes.setter
    def ImportFacesAsMeshes(self, value: System.Void): ...
    @JoinEdges.setter
    def JoinEdges(self, value: System.Void): ...
    @JoinFaces.setter
    def JoinFaces(self, value: System.Void): ...
    @UseGroupLayers.setter
    def UseGroupLayers(self, value: System.Void): ...
    @UseSketchUpTextureWriter.setter
    def UseSketchUpTextureWriter(self, value: System.Void): ...
    @Weld.setter
    def Weld(self, value: System.Void): ...
    @WeldAngle.setter
    def WeldAngle(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSkpWriteOptions(object):
    """Options used when writing a Skp file

    """
    def __init__(self): ...
    @property
    def ExportPlanarRegionsAsPolygons(self) -> bool: ...
    @property
    def Version(self) -> SketchUpVersion: ...
    @ExportPlanarRegionsAsPolygons.setter
    def ExportPlanarRegionsAsPolygons(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSlc(object):
    """Support for writing slice (SLC) file format

    """
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileSlcWriteOptions) -> bool: ...

class FileSlcWriteOptions(object):
    """Options used when writing a SLC file

    """
    def __init__(self): ...
    @property
    def AngleBetweenSegmentsDegrees(self) -> float: ...
    @property
    def EndPoint(self) -> Geometry.Point3d: ...
    @property
    def SliceDistance(self) -> float: ...
    @property
    def StartPoint(self) -> Geometry.Point3d: ...
    @property
    def UseMeshes(self) -> bool: ...
    @AngleBetweenSegmentsDegrees.setter
    def AngleBetweenSegmentsDegrees(self, value: System.Void): ...
    @EndPoint.setter
    def EndPoint(self, value: System.Void): ...
    @SliceDistance.setter
    def SliceDistance(self, value: System.Void): ...
    @StartPoint.setter
    def StartPoint(self, value: System.Void): ...
    @UseMeshes.setter
    def UseMeshes(self, value: System.Void): ...

class FileStl(object):
    """Support for writing STL file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileStlReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileStlWriteOptions) -> bool: ...

class FileStlWriteOptions(object):
    """Options for writing a STL file

    """
    def __init__(self): ...
    @property
    def BinaryFile(self) -> bool: ...
    @property
    def ExportOpenObjects(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @BinaryFile.setter
    def BinaryFile(self, value: System.Void): ...
    @ExportOpenObjects.setter
    def ExportOpenObjects(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileStlReadOptions(object):
    """Options for reading a STL file

    """
    def __init__(self): ...
    @property
    def SplitDisjointMeshes(self) -> bool: ...
    @property
    def STLModelUnits(self) -> Rhino.UnitSystem: ...
    @property
    def Weld(self) -> bool: ...
    @property
    def WeldAngle(self) -> float: ...
    @SplitDisjointMeshes.setter
    def SplitDisjointMeshes(self, value: System.Void): ...
    @STLModelUnits.setter
    def STLModelUnits(self, value: System.Void): ...
    @Weld.setter
    def Weld(self, value: System.Void): ...
    @WeldAngle.setter
    def WeldAngle(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileStp(object):
    """Support for writing STEP (STP) file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileStpReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileStpWriteOptions) -> bool: ...

class FileStpReadOptions(object):
    """Options used when reading a STP file

    """
    def __init__(self): ...
    @property
    def JoinSurfaces(self) -> bool: ...
    @property
    def LimitFaces(self) -> bool: ...
    @property
    def MaxFaceCount(self) -> int: ...
    @JoinSurfaces.setter
    def JoinSurfaces(self, value: System.Void): ...
    @LimitFaces.setter
    def LimitFaces(self, value: System.Void): ...
    @MaxFaceCount.setter
    def MaxFaceCount(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileStpWriteOptions(object):
    """Options used when writing a STP file

    """
    def __init__(self): ...
    @property
    def Export2dCurves(self) -> bool: ...
    @property
    def ExportBlack(self) -> bool: ...
    @property
    def Schema(self) -> StepSchema: ...
    @property
    def SplitClosedSurfaces(self) -> bool: ...
    @Export2dCurves.setter
    def Export2dCurves(self, value: System.Void): ...
    @ExportBlack.setter
    def ExportBlack(self, value: System.Void): ...
    @Schema.setter
    def Schema(self, value: System.Void): ...
    @SplitClosedSurfaces.setter
    def SplitClosedSurfaces(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSvg(object):
    """Support for writing Svg file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileSvgReadOptions) -> bool: ...

class FileSvgReadOptions(object):
    """Options used when reading a Svg file

    """
    def __init__(self): ...
    @property
    def GroupMultiCurvePaths(self) -> bool: ...
    @property
    def ImportFilledObjectAs(self) -> ImportFillMode: ...
    @property
    def RetainGrouping(self) -> bool: ...
    @GroupMultiCurvePaths.setter
    def GroupMultiCurvePaths(self, value: System.Void): ...
    @ImportFilledObjectAs.setter
    def ImportFilledObjectAs(self, value: System.Void): ...
    @RetainGrouping.setter
    def RetainGrouping(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileSW(object):
    """    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileSwReadOptions) -> bool: ...

class FileSwReadOptions(object):
    """Options used when reading a SW file

    """
    def __init__(self): ...
    @property
    def ImportConstructionGeometry(self) -> bool: ...
    @property
    def ImportPartsAsBlocks(self) -> bool: ...
    @property
    def RotateYtoZ(self) -> bool: ...
    @ImportConstructionGeometry.setter
    def ImportConstructionGeometry(self, value: System.Void): ...
    @ImportPartsAsBlocks.setter
    def ImportPartsAsBlocks(self, value: System.Void): ...
    @RotateYtoZ.setter
    def RotateYtoZ(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileTxt(object):
    """Support for writing Txt (points) file format

    """
    @overload
    @staticmethod
    def Read(path: str, doc: Rhino.RhinoDoc, options: FileTxtReadOptions) -> bool: ...
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileTxtWriteOptions) -> bool: ...

class FileTxtReadOptions(object):
    """Options for writing a Txt file.

    """
    def __init__(self): ...
    @property
    def CreatePointCloud(self) -> bool: ...
    @property
    def Delimiter(self) -> DelimiterMode: ...
    @property
    def DelimiterCharacter(self) -> System.Char: ...
    @CreatePointCloud.setter
    def CreatePointCloud(self, value: System.Void): ...
    @Delimiter.setter
    def Delimiter(self, value: System.Void): ...
    @DelimiterCharacter.setter
    def DelimiterCharacter(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileTxtWriteOptions(object):
    """Options for writing a Txt file.

    """
    def __init__(self): ...
    @property
    def Delimiter(self) -> DelimiterMode: ...
    @property
    def DelimiterCharacter(self) -> System.Char: ...
    @property
    def ExportVertexColors(self) -> bool: ...
    @property
    def Precision(self) -> int: ...
    @property
    def SurroundWithDoubleQuotes(self) -> bool: ...
    @Delimiter.setter
    def Delimiter(self, value: System.Void): ...
    @DelimiterCharacter.setter
    def DelimiterCharacter(self, value: System.Void): ...
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: System.Void): ...
    @Precision.setter
    def Precision(self, value: System.Void): ...
    @SurroundWithDoubleQuotes.setter
    def SurroundWithDoubleQuotes(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileUdo(object):
    """Support for writing Moray UDO file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileUdoWriteOptions) -> bool: ...

class FileUdoWriteOptions(object):
    """Options for writing a Moray UDO file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileUsd(object):
    """Support for writing USD file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileUsdWriteOptions) -> bool: ...

class FileUsdWriteOptions(object):
    """Options for writing a USD file

    """
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileVda(object):
    """Support for writing Igs file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileVdaWriteOptions) -> bool: ...

class FileVdaWriteOptions(object):
    """Options for writing a Vda file

    """
    def __init__(self): ...
    @property
    def Address(self) -> str: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Confidentiality(self) -> str: ...
    @property
    def DateEffective(self) -> str: ...
    @property
    def ObjectCode(self) -> str: ...
    @property
    def PointDeviationHairsAsMDI(self) -> bool: ...
    @property
    def ProjectName(self) -> str: ...
    @property
    def ReceivingDepartment(self) -> str: ...
    @property
    def SendersName(self) -> str: ...
    @property
    def SendingCompany(self) -> str: ...
    @property
    def TelephoneNumber(self) -> str: ...
    @property
    def Variant(self) -> str: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @CompanyName.setter
    def CompanyName(self, value: System.Void): ...
    @Confidentiality.setter
    def Confidentiality(self, value: System.Void): ...
    @DateEffective.setter
    def DateEffective(self, value: System.Void): ...
    @ObjectCode.setter
    def ObjectCode(self, value: System.Void): ...
    @PointDeviationHairsAsMDI.setter
    def PointDeviationHairsAsMDI(self, value: System.Void): ...
    @ProjectName.setter
    def ProjectName(self, value: System.Void): ...
    @ReceivingDepartment.setter
    def ReceivingDepartment(self, value: System.Void): ...
    @SendersName.setter
    def SendersName(self, value: System.Void): ...
    @SendingCompany.setter
    def SendingCompany(self, value: System.Void): ...
    @TelephoneNumber.setter
    def TelephoneNumber(self, value: System.Void): ...
    @Variant.setter
    def Variant(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileVrml(object):
    """Support for writing wrl file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileVrmlWriteOptions) -> bool: ...

class FileVrmlWriteOptions(object):
    """Options for writing a wrl file

    """
    def __init__(self): ...
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @property
    def ExportVertexColors(self) -> bool: ...
    @property
    def ExportVertexNormals(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def Version(self) -> int: ...
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: System.Void): ...
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: System.Void): ...
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileX3dv(object):
    """Support for writing x3dv file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileX3dvWriteOptions) -> bool: ...

class FileX3dvWriteOptions(object):
    """Options for writing a x3dv file

    """
    def __init__(self): ...
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @property
    def ExportVertexColors(self) -> bool: ...
    @property
    def ExportVertexNormals(self) -> bool: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: System.Void): ...
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: System.Void): ...
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileXaml(object):
    """Support for writing Xaml file format

    """
    @overload
    @staticmethod
    def Write(path: str, doc: Rhino.RhinoDoc, options: FileFbxWriteOptions) -> bool: ...

class FileXamlWriteOptions(object):
    """Options for writing a Xaml file

    """
    def __init__(self): ...
    @property
    def AddRotationAnimation(self) -> bool: ...
    @property
    def AddRotationScrollbars(self) -> bool: ...
    @property
    def AnimationAxis(self) -> AnimationMode: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def UseExistingRenderMeshes(self) -> bool: ...
    @property
    def UseOriginForRotationCenter(self) -> bool: ...
    @AddRotationAnimation.setter
    def AddRotationAnimation(self, value: System.Void): ...
    @AddRotationScrollbars.setter
    def AddRotationScrollbars(self, value: System.Void): ...
    @AnimationAxis.setter
    def AnimationAxis(self, value: System.Void): ...
    @MeshingParameters.setter
    def MeshingParameters(self, value: System.Void): ...
    @UseExistingRenderMeshes.setter
    def UseExistingRenderMeshes(self, value: System.Void): ...
    @UseOriginForRotationCenter.setter
    def UseOriginForRotationCenter(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class FileX_T(object):
    """Support for writing X_T file format

    """
    @overload
    @staticmethod
    def Write(filename: str, doc: Rhino.RhinoDoc, options: FileX_TWriteOptions) -> bool: ...

class FileX_TWriteOptions(object):
    """Options used when writing a X_T file

    """
    def __init__(self): ...
    @property
    def Type(self) -> X_T_Types: ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def ToDictionary() -> Collections.ArchivableDictionary: ...

class ImageFile(object):
    """Support functions for image files

    """
    @overload
    @staticmethod
    def SupportsAlphaChannel(filename: str) -> bool: ...

class File3dmSettings(object):
    """General settings in a 3dm file.

    """
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @property
    def ModelBasepoint(self) -> Geometry.Point3d: ...
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @property
    def ModelUnitSystem(self) -> Rhino.UnitSystem: ...
    @property
    def ModelUrl(self) -> str: ...
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @property
    def PageRelativeTolerance(self) -> float: ...
    @property
    def PageUnitSystem(self) -> Rhino.UnitSystem: ...
    @property
    def RenderSettings(self) -> Render.RenderSettings: ...
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self, value: System.Void): ...
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self, value: System.Void): ...
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self, value: System.Void): ...
    @ModelBasepoint.setter
    def ModelBasepoint(self, value: System.Void): ...
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self, value: System.Void): ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: System.Void): ...
    @ModelUrl.setter
    def ModelUrl(self, value: System.Void): ...
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self, value: System.Void): ...
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self, value: System.Void): ...
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self, value: System.Void): ...
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self, value: System.Void): ...
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: System.Void): ...

class File3dmEmbeddedFiles(object):
    """
    """
    def __init__(self, f: File3dm): ...
    @overload
    def Add(self, filename: str) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmEmbeddedFile(DocObjects.ModelComponent):
    """    """
    def __init__(self): ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Filename(self) -> str: ...
    @overload
    def SaveToFile(self, filename: str) -> bool: ...

class File3dm(object):
    """Represents a 3dm file, which is stored using the OpenNURBS file standard.
The 3dm format is the main Rhinoceros storage format.
Visit http://www.opennurbs.com/ for more details.

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Dump() -> str: ...
    @overload
    def DumpSummary() -> str: ...
    @overload
    def DumpToTextLog(self, log: TextLog) -> None: ...
    @overload
    @staticmethod
    def FromByteArray(bytes_: System.System.Array[System.Byte]) -> File3dm: ...
    @property
    def AllDimStyles(self) -> File3dmDimStyleTable: ...
    @property
    def AllGroups(self) -> File3dmGroupTable: ...
    @property
    def AllHatchPatterns(self) -> File3dmHatchPatternTable: ...
    @property
    def AllInstanceDefinitions(self) -> File3dmInstanceDefinitionTable: ...
    @property
    def AllLayers(self) -> File3dmLayerTable: ...
    @property
    def AllLinetypes(self) -> File3dmLinetypeTable: ...
    @property
    def AllMaterials(self) -> File3dmMaterialTable: ...
    @property
    def AllNamedConstructionPlanes(self) -> File3dmNamedConstructionPlanes: ...
    @property
    def AllNamedViews(self) -> File3dmViewTable: ...
    @property
    def AllViews(self) -> File3dmViewTable: ...
    @property
    def ApplicationDetails(self) -> str: ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def ApplicationUrl(self) -> str: ...
    @property
    def ArchiveVersion(self) -> int: ...
    @property
    def Created(self) -> System.DateTime: ...
    @property
    def CreatedBy(self) -> str: ...
    @property
    def DimStyles(self) -> Generic.IList: ...
    @property
    def EarthAnchorPoint(self) -> DocObjects.EarthAnchorPoint: ...
    @property
    def EmbeddedFiles(self) -> File3dmEmbeddedFiles: ...
    @property
    def HatchPatterns(self) -> Generic.IList: ...
    @property
    def InstanceDefinitions(self) -> Generic.IList: ...
    @property
    def LastEdited(self) -> System.DateTime: ...
    @property
    def LastEditedBy(self) -> str: ...
    @property
    def Layers(self) -> Generic.IList: ...
    @property
    def Linetypes(self) -> Generic.IList: ...
    @property
    def Manifest(self) -> ManifestTable: ...
    @property
    def Materials(self) -> Generic.IList: ...
    @property
    def NamedConstructionPlanes(self) -> Generic.IList: ...
    @property
    def NamedViews(self) -> Generic.IList: ...
    @property
    def Notes(self) -> File3dmNotes: ...
    @property
    def Objects(self) -> File3dmObjectTable: ...
    @property
    def PlugInData(self) -> File3dmPlugInDataTable: ...
    @property
    def RenderEnvironments(self) -> File3dmRenderEnvironments: ...
    @property
    def RenderMaterials(self) -> File3dmRenderMaterials: ...
    @property
    def RenderTextures(self) -> File3dmRenderTextures: ...
    @property
    def Revision(self) -> int: ...
    @property
    def Settings(self) -> File3dmSettings: ...
    @property
    def StartSectionComments(self) -> str: ...
    @property
    def Strings(self) -> File3dmStringTable: ...
    @property
    def Views(self) -> Generic.IList: ...
    @overload
    def GetPreviewImage() -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def Read(path: str) -> File3dm: ...
    @overload
    @staticmethod
    def Read(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> File3dm: ...
    @overload
    @staticmethod
    def ReadApplicationData(path: str) -> (str, str, str): ...
    @overload
    @staticmethod
    def ReadArchiveVersion(path: str) -> int: ...
    @overload
    @staticmethod
    def ReadDimensionStyles(path: str) -> DocObjects.System.Array[DocObjects.DimensionStyle]: ...
    @overload
    @staticmethod
    def ReadEarthAnchorPoint(path: str) -> DocObjects.EarthAnchorPoint: ...
    @overload
    @staticmethod
    def ReadNotes(path: str) -> str: ...
    @overload
    @staticmethod
    def ReadPreviewImage(path: str) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def ReadRevisionHistory(path: str) -> (bool, str, str, int, System.DateTime, System.DateTime): ...
    @overload
    @staticmethod
    def ReadWithLog(path: str) -> (File3dm, str): ...
    @overload
    @staticmethod
    def ReadWithLog(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> (File3dm, str): ...
    @ApplicationDetails.setter
    def ApplicationDetails(self, value: System.Void): ...
    @ApplicationName.setter
    def ApplicationName(self, value: System.Void): ...
    @ApplicationUrl.setter
    def ApplicationUrl(self, value: System.Void): ...
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self, value: System.Void): ...
    @Notes.setter
    def Notes(self, value: System.Void): ...
    @Revision.setter
    def Revision(self, value: System.Void): ...
    @StartSectionComments.setter
    def StartSectionComments(self, value: System.Void): ...
    @overload
    def SetPreviewImage(self, image: Drawing.Bitmap) -> None: ...
    @overload
    def ToByteArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ToByteArray(self, options: File3dmWriteOptions) -> System.System.Array[System.Byte]: ...
    @overload
    def Write(self, path: str, version: int) -> bool: ...
    @overload
    def Write(self, path: str, options: File3dmWriteOptions) -> bool: ...
    @overload
    @staticmethod
    def WriteMultipleObjects(path: str, geometry: Generic.IEnumerable) -> bool: ...
    @overload
    @staticmethod
    def WriteOneObject(path: str, geometry: Geometry.GeometryBase) -> bool: ...
    @overload
    def WriteWithLog(self, path: str, version: int) -> (bool, str): ...
    @overload
    def WriteWithLog(self, path: str, options: File3dmWriteOptions) -> (bool, str): ...

class File3dmWriteOptions(object):
    """Options used by File3dm.Write

    """
    def __init__(self): ...
    @overload
    def EnableAnalysisMeshes(self, objectType: DocObjects.ObjectType, enable: bool) -> None: ...
    @overload
    def EnableRenderMeshes(self, objectType: DocObjects.ObjectType, enable: bool) -> None: ...
    @property
    def SaveAnalysisMeshes(self) -> bool: ...
    @property
    def SaveRenderMeshes(self) -> bool: ...
    @property
    def SaveUserData(self) -> bool: ...
    @property
    def Version(self) -> int: ...
    @SaveAnalysisMeshes.setter
    def SaveAnalysisMeshes(self, value: System.Void): ...
    @SaveRenderMeshes.setter
    def SaveRenderMeshes(self, value: System.Void): ...
    @SaveUserData.setter
    def SaveUserData(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...

class File3dmObject(DocObjects.ModelComponent):
    """Used to store geometry table object definition and attributes in a File3dm.

    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: File3dmObject) -> bool: ...
    @property
    def Attributes(self) -> DocObjects.ObjectAttributes: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Geometry(self) -> Geometry.GeometryBase: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTextureMapping(self, mappingChannelId: int) -> (Render.TextureMapping, Geometry.Transform): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def TryReadUserData(self, userDataId: System.Guid, readFromAttributes: bool, dataReader: System.Func) -> bool: ...

class ICommonComponentTable:
    """Provides methods to use all File3dm and RhinoDoc tables under the same contract. Do not derive from this interface. This is to ensure all tables can be used with the same method list.

    ICommonComponentTable[T]
    """
    @overload
    def FindId(self, id_: System.Guid) -> T: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> T: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class CommonComponentTable(object):
    """Provides a base table type that encompasses all document tables, both in RhinoDoc and File3dm.

    CommonComponentTable[T]
    """
    @overload
    def Clear() -> None: ...
    @overload
    def Delete(self, item: T) -> bool: ...
    @overload
    def FindId(self, id_: System.Guid) -> T: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmCommonComponentTable(CommonComponentTable):
    """Provides a base table type that is shared among all File3dm tables.

    File3dmCommonComponentTable[T]
    """
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Delete(self, item: T) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump() -> str: ...

class ManifestTable(object):
    """Maintains an index to every model component that is in the 3dm file. This is the "more comprehensive" table that contains all objects in all other tables.

    """
    @overload
    def ActiveObjectCount(self, type_: DocObjects.ModelComponentType) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: DocObjects.ModelComponent) -> bool: ...
    @overload
    def CopyTo(self, array: DocObjects.System.Array[DocObjects.ModelComponent], arrayIndex: int) -> None: ...
    @overload
    def FindId(self, id_: System.Guid) -> DocObjects.ModelComponent: ...
    @overload
    def FindId(self, id_: System.Guid) -> T: ...
    @overload
    def FindId(self, id_: System.Guid, type_: DocObjects.ModelComponentType) -> DocObjects.ModelComponent: ...
    @overload
    def FindIndex(self, index: int) -> T: ...
    @overload
    def FindIndex(self, index: int, type_: DocObjects.ModelComponentType) -> DocObjects.ModelComponent: ...
    @overload
    def FindName(self, name: str, parent: System.Guid) -> T: ...
    @overload
    def FindName(self, name: str, type_: DocObjects.ModelComponentType, parent: System.Guid) -> DocObjects.ModelComponent: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> T: ...
    @overload
    def FindNameHash(self, nameHash: NameHash, type_: DocObjects.ModelComponentType) -> DocObjects.ModelComponent: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def LongCount(self) -> System.Int64: ...
    @property
    def Parent(self) -> object: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetEnumerator(self, type_: DocObjects.ModelComponentType) -> Generic.IEnumerator: ...
    @overload
    @staticmethod
    def GetModelComponentTypeFromGenericType() -> DocObjects.ModelComponentType: ...

class File3dmObjectTable(File3dmCommonComponentTable):
    """Represents a simple object table for a file that is open externally.
This class mimics Rhino.DocObjects.Tables.ObjectTable while providing external access to the file.

    """
    @overload
    def Add(self, item: File3dmObject) -> None: ...
    @overload
    def Add(self, item: Geometry.GeometryBase, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddAngularDimension(self, dimension: Geometry.AngularDimension) -> System.Guid: ...
    @overload
    def AddAngularDimension(self, dimension: Geometry.AngularDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddArc(self, arc: Geometry.Arc) -> System.Guid: ...
    @overload
    def AddArc(self, arc: Geometry.Arc, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle) -> System.Guid: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve) -> System.Guid: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddEllipse(self, ellipse: Geometry.Ellipse) -> System.Guid: ...
    @overload
    def AddEllipse(self, ellipse: Geometry.Ellipse, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Geometry.Extrusion) -> System.Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Geometry.Extrusion, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddHatch(self, hatch: Geometry.Hatch) -> System.Guid: ...
    @overload
    def AddHatch(self, hatch: Geometry.Hatch, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: Geometry.InstanceReferenceGeometry) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: Geometry.InstanceReferenceGeometry, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Geometry.Transform) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Geometry.Transform, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLeader(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, plane: Geometry.Plane, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, plane: Geometry.Plane, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Geometry.Plane, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Geometry.Plane, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLine(self, line: Geometry.Line) -> System.Guid: ...
    @overload
    def AddLine(self, from_: Geometry.Point3d, to: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddLine(self, line: Geometry.Line, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLinearDimension(self, dimension: Geometry.LinearDimension) -> System.Guid: ...
    @overload
    def AddLinearDimension(self, dimension: Geometry.LinearDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: Geometry.OrdinateDimension) -> System.Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: Geometry.OrdinateDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3f) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3f, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoint(self, x: float, y: float, z: float) -> System.Guid: ...
    @overload
    def AddPointCloud(self, cloud: Geometry.PointCloud) -> System.Guid: ...
    @overload
    def AddPointCloud(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddPointCloud(self, cloud: Geometry.PointCloud, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPointCloud(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable) -> System.System.Array[System.Guid]: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable) -> System.System.Array[System.Guid]: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.System.Array[System.Guid]: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.System.Array[System.Guid]: ...
    @overload
    def AddPolyline(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddPolyline(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddRadialDimension(self, dimension: Geometry.RadialDimension) -> System.Guid: ...
    @overload
    def AddRadialDimension(self, dimension: Geometry.RadialDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSphere(self, sphere: Geometry.Sphere) -> System.Guid: ...
    @overload
    def AddSphere(self, sphere: Geometry.Sphere, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSubD(self, subd: Geometry.SubD) -> System.Guid: ...
    @overload
    def AddSubD(self, subd: Geometry.SubD, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSurface(self, surface: Geometry.Surface) -> System.Guid: ...
    @overload
    def AddSurface(self, surface: Geometry.Surface, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text3d: Display.Text3d) -> System.Guid: ...
    @overload
    def AddText(self, text3d: Display.Text3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Geometry.TextJustification) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Geometry.TextJustification, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddTextDot(self, dot: Geometry.TextDot) -> System.Guid: ...
    @overload
    def AddTextDot(self, dot: Geometry.TextDot, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def Delete(self, objectId: System.Guid) -> bool: ...
    @overload
    def Delete(self, objectIds: Generic.IEnumerable) -> int: ...
    @overload
    def FindByGroup(self, group: DocObjects.Group) -> System.Array[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: DocObjects.Layer) -> System.Array[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: str) -> System.Array[File3dmObject]: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetBoundingBox() -> Geometry.BoundingBox: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmPlugInData(object):
    """Represents custom plug-in data, in the 3dm file, written by a plug-in.

    """
    @property
    def PlugInId(self) -> System.Guid: ...

class File3dmPlugInDataTable(object):
    """Table of custom data provided by plug-ins

    """
    @overload
    def Clear() -> None: ...
    @overload
    def Dump() -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> File3dmPlugInData: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def TryRead(self, pluginData: File3dmPlugInData, dataReader: System.Func) -> bool: ...

class File3dmMaterialTable(File3dmCommonComponentTable):
    """Provides access to materials in the 3dm file.

    """
    @overload
    def AddMaterial(self, material: DocObjects.Material) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Material: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmLinetypeTable(File3dmCommonComponentTable):
    """Provides access to Linetypes in the 3dm file.

    """
    @overload
    def FindIndex(self, index: int) -> DocObjects.Linetype: ...
    @overload
    def FindName(self, name: str) -> DocObjects.Linetype: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DocObjects.Linetype: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmLayerTable(File3dmCommonComponentTable):
    """Provides access to layers in the 3dm file.

    """
    @overload
    def AddDefaultLayer(self, name: str, color: Drawing.Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Drawing.Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Drawing.Color, parentId: System.Guid) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Layer: ...
    @overload
    def FindName(self, name: str, parentId: System.Guid) -> DocObjects.Layer: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DocObjects.Layer: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmGroupTable(File3dmCommonComponentTable):
    """Provides access to groups in the 3dm file.

    """
    @overload
    def AddGroup() -> int: ...
    @overload
    def FindIndex(self, groupIndex: int) -> DocObjects.Group: ...
    @overload
    def FindName(self, name: str) -> DocObjects.Group: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DocObjects.Group: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @overload
    def GroupMembers(self, groupIndex: int) -> System.Array[File3dmObject]: ...

class File3dmDimStyleTable(File3dmCommonComponentTable):
    """Provides access to annotation styles in the 3dm file.

    """
    @overload
    def FindIndex(self, index: int) -> DocObjects.DimensionStyle: ...
    @overload
    def FindName(self, name: str) -> DocObjects.DimensionStyle: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DocObjects.DimensionStyle: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmHatchPatternTable(File3dmCommonComponentTable):
    """Provides access to hatch pattern definitions in the 3dm file.

    """
    @overload
    def FindIndex(self, index: int) -> DocObjects.HatchPattern: ...
    @overload
    def FindName(self, name: str) -> DocObjects.HatchPattern: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DocObjects.HatchPattern: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmInstanceDefinitionTable(File3dmCommonComponentTable):
    """Provides access to instance (block) definitions in the 3dm file.

    """
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable, attributes: Generic.IEnumerable) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Geometry.GeometryBase, attributes: DocObjects.ObjectAttributes) -> int: ...
    @overload
    def Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable, attributes: Generic.IEnumerable) -> int: ...
    @overload
    def AddLinked(self, filename: str, name: str, description: str) -> int: ...
    @overload
    def FindName(self, name: str) -> Geometry.InstanceDefinitionGeometry: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Geometry.InstanceDefinitionGeometry: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...

class File3dmViewTable(object):
    """Provides access to views in the 3dm file.

    """
    @overload
    def Add(self, item: DocObjects.ViewInfo) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: DocObjects.ViewInfo) -> bool: ...
    @overload
    def CopyTo(self, array: DocObjects.System.Array[DocObjects.ViewInfo], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, item: DocObjects.ViewInfo) -> bool: ...
    @overload
    def FindName(self, name: str) -> DocObjects.ViewInfo: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DocObjects.ViewInfo: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: DocObjects.ViewInfo) -> int: ...

class File3dmNamedConstructionPlanes(object):
    """Provides access to named construction planes in the 3dm file.

    """
    @overload
    def Add(self, cplane: DocObjects.ConstructionPlane) -> None: ...
    @overload
    def Add(self, name: str, plane: Geometry.Plane) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, cplane: DocObjects.ConstructionPlane) -> bool: ...
    @overload
    def CopyTo(self, array: DocObjects.System.Array[DocObjects.ConstructionPlane], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, cplane: DocObjects.ConstructionPlane) -> bool: ...
    @overload
    def FindName(self, name: str) -> DocObjects.ConstructionPlane: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DocObjects.ConstructionPlane: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, cplane: DocObjects.ConstructionPlane) -> int: ...

class File3dmStringTable(object):
    """Provides access to document strings in the 3dm file.

    """
    @overload
    def Delete(self, key: str) -> None: ...
    @overload
    def Delete(self, section: str, entry: str) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def DocumentUserTextCount(self) -> int: ...
    @overload
    def GetEntryNames(self, section: str) -> System.System.Array[str]: ...
    @overload
    def GetKey(self, i: int) -> str: ...
    @overload
    def GetSectionNames() -> System.System.Array[str]: ...
    @overload
    def GetValue(self, i: int) -> str: ...
    @overload
    def GetValue(self, key: str) -> str: ...
    @overload
    def GetValue(self, section: str, entry: str) -> str: ...
    @overload
    def SetString(self, key: str, value: str) -> str: ...
    @overload
    def SetString(self, section: str, entry: str, value: str) -> str: ...

class FileReference(object):
    """Manages a reference to an existing or non-existing file, using either or both absolute or relative paths. Once constructed, this class is immutable.

    """
    def __init__(self, fullPath: str, relativePath: str, hash_: ContentHash, status: FileReferenceStatus): ...
    @overload
    @staticmethod
    def CreateFromFullAndRelativePaths(fullPath: str, relativePath: str) -> FileReference: ...
    @overload
    @staticmethod
    def CreateFromFullPath(fullPath: str) -> FileReference: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ContentHash(self) -> ContentHash: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def FullPathStatus(self) -> FileReferenceStatus: ...
    @property
    def IsSet(self) -> bool: ...
    @property
    def RelativePath(self) -> str: ...

class NameHash(object):
    """Contains information that is useful to uniquely identify an object name.
This object is immutable.

    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, parentId: System.Guid): ...
    @overload
    def __init__(self, name: str, parentId: System.Guid, type_: DocObjects.ModelComponentType): ...
    @overload
    def __init__(self, name: str, parentId: System.Guid, ignoreCase: bool): ...
    @overload
    def Clone() -> NameHash: ...
    @overload
    @staticmethod
    def CreateFilePathHash(path: str) -> NameHash: ...
    @overload
    def Equals(self, other: NameHash) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def MappedCodePoints(self) -> System.UInt32: ...
    @property
    def ParentId(self) -> System.Guid: ...
    @property
    def Sha1Hash(self) -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashCode() -> int: ...

class ContentHash(object):
    """Contains information that is useful to uniquely identify an object.
This object is immutable.

    """
    @overload
    def Clone() -> ContentHash: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> ContentHash: ...
    @overload
    def Equals(self, other: ContentHash) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ByteCount(self) -> System.UInt64: ...
    @property
    def HashTime(self) -> System.DateTime: ...
    @property
    def Sha1ContentHash(self) -> System.System.Array[System.Byte]: ...
    @property
    def Sha1NameHash(self) -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashCode() -> int: ...

class SHA1OpenNURBS(Cryptography.SHA1):
    """Provides the OpenNURBS implementation of SHA1.
This class is provided only with the purpose of hashing. It is not meant to be used for any cryptographic purpose.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def FileSystemPathHash(path: str, ignoreCase: System.Nullable) -> System.System.Array[System.Byte]: ...
    @overload
    def Initialize() -> None: ...
    @overload
    @staticmethod
    def StringHash(input_: str) -> System.System.Array[System.Byte]: ...

class File3dmDisplacement(object):
    """Represents the displacement attached to file3dm object attributes.

    """
    @overload
    def AddSubItem(self, face_index: int, on: bool, texture: System.Guid, mapping_channel: int, black_point: float, white_point: float) -> bool: ...
    @overload
    def DeleteAllSubItems() -> None: ...
    @overload
    def DeleteSubItem(self, face_index: int) -> None: ...
    @property
    def BlackPoint(self) -> float: ...
    @property
    def Fairing(self) -> int: ...
    @property
    def FairingOn(self) -> bool: ...
    @property
    def FinalMaxFaces(self) -> int: ...
    @property
    def FinalMaxFacesOn(self) -> bool: ...
    @property
    def InitialQuality(self) -> int: ...
    @property
    def MappingChannel(self) -> int: ...
    @property
    def MeshMemoryLimit(self) -> int: ...
    @property
    def On(self) -> bool: ...
    @property
    def PostWeldAngle(self) -> float: ...
    @property
    def RefineSensitivity(self) -> float: ...
    @property
    def RefineSteps(self) -> int: ...
    @property
    def SweepResolutionFormula(self) -> SweepResolutionFormulas: ...
    @property
    def TextureId(self) -> System.Guid: ...
    @property
    def WhitePoint(self) -> float: ...
    @overload
    def GetSubItemFaceIndexes() -> System.System.Array[int]: ...
    @BlackPoint.setter
    def BlackPoint(self, value: System.Void): ...
    @Fairing.setter
    def Fairing(self, value: System.Void): ...
    @FairingOn.setter
    def FairingOn(self, value: System.Void): ...
    @FinalMaxFaces.setter
    def FinalMaxFaces(self, value: System.Void): ...
    @FinalMaxFacesOn.setter
    def FinalMaxFacesOn(self, value: System.Void): ...
    @InitialQuality.setter
    def InitialQuality(self, value: System.Void): ...
    @MappingChannel.setter
    def MappingChannel(self, value: System.Void): ...
    @MeshMemoryLimit.setter
    def MeshMemoryLimit(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...
    @PostWeldAngle.setter
    def PostWeldAngle(self, value: System.Void): ...
    @RefineSensitivity.setter
    def RefineSensitivity(self, value: System.Void): ...
    @RefineSteps.setter
    def RefineSteps(self, value: System.Void): ...
    @SweepResolutionFormula.setter
    def SweepResolutionFormula(self, value: System.Void): ...
    @TextureId.setter
    def TextureId(self, value: System.Void): ...
    @WhitePoint.setter
    def WhitePoint(self, value: System.Void): ...
    @overload
    def SetSubItemBlackPoint(self, face_index: int, black_point: float) -> None: ...
    @overload
    def SetSubItemMappingChannel(self, face_index: int, chan: int) -> None: ...
    @overload
    def SetSubItemOn(self, face_index: int, on: bool) -> None: ...
    @overload
    def SetSubItemTexture(self, face_index: int, texture_id: System.Guid) -> None: ...
    @overload
    def SetSubItemWhitePoint(self, face_index: int, white_point: float) -> None: ...
    @overload
    def SubItemBlackPoint(self, face_index: int) -> float: ...
    @overload
    def SubItemMappingChannel(self, face_index: int) -> int: ...
    @overload
    def SubItemOn(self, face_index: int) -> bool: ...
    @overload
    def SubItemTexture(self, face_index: int) -> System.Guid: ...
    @overload
    def SubItemWhitePoint(self, face_index: int) -> float: ...

class File3dmEdgeSoftening(object):
    """Represents the edge softening attached to file3dm object attributes.

    """
    @property
    def Chamfer(self) -> bool: ...
    @property
    def EdgeAngleThreshold(self) -> float: ...
    @property
    def Faceted(self) -> bool: ...
    @property
    def ForceSoftening(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @property
    def Softening(self) -> float: ...
    @Chamfer.setter
    def Chamfer(self, value: System.Void): ...
    @EdgeAngleThreshold.setter
    def EdgeAngleThreshold(self, value: System.Void): ...
    @Faceted.setter
    def Faceted(self, value: System.Void): ...
    @ForceSoftening.setter
    def ForceSoftening(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...
    @Softening.setter
    def Softening(self, value: System.Void): ...

class File3dmThickening(object):
    """Represents the thickening attached to file3dm object attributes.

    """
    @property
    def BothSides(self) -> bool: ...
    @property
    def Distance(self) -> float: ...
    @property
    def OffsetOnly(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @property
    def Solid(self) -> bool: ...
    @BothSides.setter
    def BothSides(self, value: System.Void): ...
    @Distance.setter
    def Distance(self, value: System.Void): ...
    @OffsetOnly.setter
    def OffsetOnly(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...
    @Solid.setter
    def Solid(self, value: System.Void): ...

class File3dmCurvePiping(object):
    """Represents the curve piping attached to file3dm object attributes.

    """
    @property
    def Accuracy(self) -> int: ...
    @property
    def CapType(self) -> CapTypes: ...
    @property
    def Faceted(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @property
    def Radius(self) -> float: ...
    @property
    def Segments(self) -> int: ...
    @Accuracy.setter
    def Accuracy(self, value: System.Void): ...
    @CapType.setter
    def CapType(self, value: System.Void): ...
    @Faceted.setter
    def Faceted(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...
    @Radius.setter
    def Radius(self, value: System.Void): ...
    @Segments.setter
    def Segments(self, value: System.Void): ...

class File3dmShutLining(object):
    """Represents the shut-lining attached to file3dm object attributes.

    """
    @overload
    def AddCurve() -> System.Guid: ...
    @overload
    def CurveEnabled(self, curve_id: System.Guid) -> bool: ...
    @overload
    def CurveIsBump(self, curve_id: System.Guid) -> bool: ...
    @overload
    def CurveProfile(self, curve_id: System.Guid) -> int: ...
    @overload
    def CurvePull(self, curve_id: System.Guid) -> bool: ...
    @overload
    def CurveRadius(self, curve_id: System.Guid) -> float: ...
    @overload
    def DeleteAllCurves() -> None: ...
    @property
    def AutoUpdate(self) -> bool: ...
    @property
    def Faceted(self) -> bool: ...
    @property
    def ForceUpdate(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @overload
    def GetCurves() -> System.System.Array[System.Guid]: ...
    @AutoUpdate.setter
    def AutoUpdate(self, value: System.Void): ...
    @Faceted.setter
    def Faceted(self, value: System.Void): ...
    @ForceUpdate.setter
    def ForceUpdate(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...
    @overload
    def SetCurveEnabled(self, curve_id: System.Guid, enabled: bool) -> None: ...
    @overload
    def SetCurveIsBump(self, curve_id: System.Guid, b: bool) -> None: ...
    @overload
    def SetCurveProfile(self, curve_id: System.Guid, profile: int) -> None: ...
    @overload
    def SetCurvePull(self, curve_id: System.Guid, pull: bool) -> None: ...
    @overload
    def SetCurveRadius(self, curve_id: System.Guid, radius: float) -> None: ...

class File3dmMeshModifiers(object):
    """Represents the mesh modifiers attached to file3dm object attributes.

    """
    @property
    def CurvePiping(self) -> File3dmCurvePiping: ...
    @property
    def Displacement(self) -> File3dmDisplacement: ...
    @property
    def EdgeSoftening(self) -> File3dmEdgeSoftening: ...
    @property
    def ShutLining(self) -> File3dmShutLining: ...
    @property
    def Thickening(self) -> File3dmThickening: ...

class File3dmRenderMaterials(object):
    """
    """
    def __init__(self, f: File3dm): ...
    @overload
    def Find(self, g: System.Guid) -> File3dmRenderMaterial: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmRenderEnvironments(object):
    """
    """
    def __init__(self, f: File3dm): ...
    @overload
    def Find(self, g: System.Guid) -> File3dmRenderEnvironment: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmRenderTextures(object):
    """
    """
    def __init__(self, f: File3dm): ...
    @overload
    def Find(self, g: System.Guid) -> File3dmRenderTexture: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class File3dmRenderContent(DocObjects.ModelComponent):
    """
    """
    @overload
    def ChildSlotOn(self, child_slot_name: str) -> bool: ...
    @overload
    def DeleteChild(self, child_slot_name: str) -> bool: ...
    @overload
    def FindChild(self, child_slot_name: str) -> File3dmRenderContent: ...
    @property
    def AutoDelete(self) -> bool: ...
    @property
    def Children(self) -> Generic.IEnumerable: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def File3dmParent(self) -> File3dm: ...
    @property
    def GroupId(self) -> System.Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsChild(self) -> bool: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def Kind(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> File3dmRenderContent: ...
    @property
    def PlugInId(self) -> System.Guid: ...
    @property
    def Reference(self) -> bool: ...
    @property
    def RenderEngineId(self) -> System.Guid: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TopLevel(self) -> File3dmRenderContent: ...
    @property
    def TypeId(self) -> System.Guid: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetParameter(self, param: str) -> System.IConvertible: ...
    @overload
    def SetParameter(self, param: str, value: object) -> bool: ...
    @overload
    def XML(self, recursive: bool) -> str: ...

class File3dmRenderMaterial(File3dmRenderContent):
    """
    """
    @overload
    def ToMaterial() -> DocObjects.Material: ...

class File3dmRenderEnvironment(File3dmRenderContent):
    """
    """
    @overload
    def ToEnvironment() -> DocObjects.Environment: ...

class File3dmRenderTexture(File3dmRenderContent):
    """
    """
    @property
    def Filename(self) -> str: ...
    @overload
    def ToTexture() -> DocObjects.Texture: ...

class TextLog(object):
    """Used for collecting text data

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, ptr: System.IntPtr): ...
    @overload
    def Dispose() -> None: ...
    @property
    def IndentSize(self) -> int: ...
    @overload
    @staticmethod
    def NewCommandLine() -> TextLog: ...
    @overload
    def PopIndent() -> None: ...
    @overload
    def Print(self, text: str) -> None: ...
    @overload
    def Print(self, format_: str, arg0: object) -> None: ...
    @overload
    def Print(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def PrintWrappedText(self, text: str, lineLength: int) -> None: ...
    @overload
    def PushIndent() -> None: ...
    @IndentSize.setter
    def IndentSize(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class File3dmTypeCodes(object):
    """Typecode format 4 bytes long
x xxxxxxxxxxxxxxx,x xxx xxxx xxxx x x xx | | | | | | | | | | | | | | | +--- "stuff" bit | | | | | | | +-- specific codes | | | | | +-- RESERVED - DO NOT USE (should be 0) (will be used to control CRC on/off) | | | +-- category:_000 0000 0000 0001 Legacy geometry TCODE_LEGACY_GEOMETRY | _000 0000 0000 0010 openNURBS object TCODE_OPENNURBS_OBJECT | _000 0000 0000 0100 -- RESERVED - DO NOT USE (should be 0 in any typecode) -- | _000 0000 0000 1000 -- RESERVED - DO NOT USE (should be 0 in any typecode) -- | _000 0000 0001 0000 Geometry TCODE_GEOMETRY | _000 0000 0010 0000 Annotation | _000 0000 0100 0000 Display Attributes TCODE_DISPLAY | _000 0000 1000 0000 Rendering TCODE_RENDER | _000 0001 0000 0000 | _000 0010 0000 0000 Interface TCODE_INTERFACE | _000 0100 0000 0000 -- RESERVED - DO NOT USE (should be 0 in any typecode) -- | _000 1000 0000 0000 Tolerances TCODE_TOLERANCE | _001 0000 0000 0000 Tables TCODE_TABLE | _010 0000 0000 0000 Table record TCODE_TABLEREC | _100 0000 0000 0000 User information TCODE_USER | +-- format: 0 - data size in header - data block follows TCODE_SHORT 1 - data in header - no data block follows

    """
    @property
    def TCODE_COMMENTBLOCK(self) -> System.UInt32: ...
    @property
    def TCODE_ENDOFFILE(self) -> System.UInt32: ...
    @property
    def TCODE_ENDOFFILE_GOO(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_GEOMETRY(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_OBJECT(self) -> System.UInt32: ...
    @property
    def TCODE_GEOMETRY(self) -> System.UInt32: ...
    @property
    def TCODE_ANNOTATION(self) -> System.UInt32: ...
    @property
    def TCODE_DISPLAY(self) -> System.UInt32: ...
    @property
    def TCODE_RENDER(self) -> System.UInt32: ...
    @property
    def TCODE_INTERFACE(self) -> System.UInt32: ...
    @property
    def TCODE_TOLERANCE(self) -> System.UInt32: ...
    @property
    def TCODE_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_TABLEREC(self) -> System.UInt32: ...
    @property
    def TCODE_USER(self) -> System.UInt32: ...
    @property
    def TCODE_SHORT(self) -> System.UInt32: ...
    @property
    def TCODE_CRC(self) -> System.UInt32: ...
    @property
    def TCODE_ANONYMOUS_CHUNK(self) -> System.UInt32: ...
    @property
    def TCODE_MATERIAL_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LIGHT_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_BITMAP_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_USER_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_GROUP_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_FONT_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_DIMSTYLE_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_INSTANCE_DEFINITION_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_HATCHPATTERN_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LINETYPE_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_OBSOLETE_LAYERSET_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_TEXTURE_MAPPING_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_HISTORYRECORD_TABLE(self) -> System.UInt32: ...
    @property
    def TCODE_ENDOFTABLE(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_REVISIONHISTORY(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_NOTES(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_PREVIEWIMAGE(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_APPLICATION(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_COMPRESSED_PREVIEWIMAGE(self) -> System.UInt32: ...
    @property
    def TCODE_PROPERTIES_OPENNURBS_VERSION(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_PLUGINLIST(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_UNITSANDTOLS(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_RENDERMESH(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_ANALYSISMESH(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_ANNOTATION(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_NAMED_CPLANE_LIST(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_NAMED_VIEW_LIST(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_VIEW_LIST(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_LAYER_INDEX(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_MATERIAL_INDEX(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_COLOR(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS__NEVER__USE__THIS(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_WIRE_DENSITY(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_RENDER(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_GRID_DEFAULTS(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_MODEL_URL(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_FONT_INDEX(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_CURRENT_DIMSTYLE_INDEX(self) -> System.UInt32: ...
    @property
    def TCODE_SETTINGS_ATTRIBUTES(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_CPLANE(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_VIEWPORT(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_SHOWCONGRID(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_SHOWCONAXES(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_SHOWWORLDAXES(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_TRACEIMAGE(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_WALLPAPER(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_WALLPAPER_V3(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_TARGET(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_DISPLAYMODE(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_NAME(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_POSITION(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_ATTRIBUTES(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW_VIEWPORT_USERDATA(self) -> System.UInt32: ...
    @property
    def TCODE_BITMAP_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_MATERIAL_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_LIGHT_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_LIGHT_RECORD_ATTRIBUTES(self) -> System.UInt32: ...
    @property
    def TCODE_LIGHT_RECORD_ATTRIBUTES_USERDATA(self) -> System.UInt32: ...
    @property
    def TCODE_LIGHT_RECORD_END(self) -> System.UInt32: ...
    @property
    def TCODE_USER_TABLE_UUID(self) -> System.UInt32: ...
    @property
    def TCODE_USER_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_GROUP_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_FONT_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_DIMSTYLE_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_INSTANCE_DEFINITION_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_HATCHPATTERN_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_LINETYPE_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_OBSOLETE_LAYERSET_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_TEXTURE_MAPPING_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_HISTORYRECORD_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_TYPE(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_ATTRIBUTES(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_ATTRIBUTES_USERDATA(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_HISTORY(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_HISTORY_HEADER(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_HISTORY_DATA(self) -> System.UInt32: ...
    @property
    def TCODE_OBJECT_RECORD_END(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS_UUID(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS_DATA(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS_USERDATA(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS_USERDATA_HEADER(self) -> System.UInt32: ...
    @property
    def TCODE_OPENNURBS_CLASS_END(self) -> System.UInt32: ...
    @property
    def TCODE_ANNOTATION_SETTINGS(self) -> System.UInt32: ...
    @property
    def TCODE_TEXT_BLOCK(self) -> System.UInt32: ...
    @property
    def TCODE_ANNOTATION_LEADER(self) -> System.UInt32: ...
    @property
    def TCODE_LINEAR_DIMENSION(self) -> System.UInt32: ...
    @property
    def TCODE_ANGULAR_DIMENSION(self) -> System.UInt32: ...
    @property
    def TCODE_RADIAL_DIMENSION(self) -> System.UInt32: ...
    @property
    def TCODE_RHINOIO_OBJECT_NURBS_CURVE(self) -> System.UInt32: ...
    @property
    def TCODE_RHINOIO_OBJECT_NURBS_SURFACE(self) -> System.UInt32: ...
    @property
    def TCODE_RHINOIO_OBJECT_BREP(self) -> System.UInt32: ...
    @property
    def TCODE_RHINOIO_OBJECT_DATA(self) -> System.UInt32: ...
    @property
    def TCODE_RHINOIO_OBJECT_END(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_ASM(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_PRT(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SHL(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_FAC(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_BND(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_TRM(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SRF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_CRV(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SPL(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_PNT(self) -> System.UInt32: ...
    @property
    def TCODE_STUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_ASMSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_PRTSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SHLSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_FACSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_BNDSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_TRMSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SRFSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_CRVSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_SPLSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_PNTSTUFF(self) -> System.UInt32: ...
    @property
    def TCODE_RH_POINT(self) -> System.UInt32: ...
    @property
    def TCODE_RH_SPOTLIGHT(self) -> System.UInt32: ...
    @property
    def TCODE_OLD_RH_TRIMESH(self) -> System.UInt32: ...
    @property
    def TCODE_OLD_MESH_VERTEX_NORMALS(self) -> System.UInt32: ...
    @property
    def TCODE_OLD_MESH_UV(self) -> System.UInt32: ...
    @property
    def TCODE_OLD_FULLMESH(self) -> System.UInt32: ...
    @property
    def TCODE_MESH_OBJECT(self) -> System.UInt32: ...
    @property
    def TCODE_COMPRESSED_MESH_GEOMETRY(self) -> System.UInt32: ...
    @property
    def TCODE_ANALYSIS_MESH(self) -> System.UInt32: ...
    @property
    def TCODE_NAME(self) -> System.UInt32: ...
    @property
    def TCODE_VIEW(self) -> System.UInt32: ...
    @property
    def TCODE_CPLANE(self) -> System.UInt32: ...
    @property
    def TCODE_NAMED_CPLANE(self) -> System.UInt32: ...
    @property
    def TCODE_NAMED_VIEW(self) -> System.UInt32: ...
    @property
    def TCODE_VIEWPORT(self) -> System.UInt32: ...
    @property
    def TCODE_SHOWGRID(self) -> System.UInt32: ...
    @property
    def TCODE_SHOWGRIDAXES(self) -> System.UInt32: ...
    @property
    def TCODE_SHOWWORLDAXES(self) -> System.UInt32: ...
    @property
    def TCODE_VIEWPORT_POSITION(self) -> System.UInt32: ...
    @property
    def TCODE_VIEWPORT_TRACEINFO(self) -> System.UInt32: ...
    @property
    def TCODE_SNAPSIZE(self) -> System.UInt32: ...
    @property
    def TCODE_NEAR_CLIP_PLANE(self) -> System.UInt32: ...
    @property
    def TCODE_HIDE_TRACE(self) -> System.UInt32: ...
    @property
    def TCODE_NOTES(self) -> System.UInt32: ...
    @property
    def TCODE_UNIT_AND_TOLERANCES(self) -> System.UInt32: ...
    @property
    def TCODE_MAXIMIZED_VIEWPORT(self) -> System.UInt32: ...
    @property
    def TCODE_VIEWPORT_WALLPAPER(self) -> System.UInt32: ...
    @property
    def TCODE_SUMMARY(self) -> System.UInt32: ...
    @property
    def TCODE_BITMAPPREVIEW(self) -> System.UInt32: ...
    @property
    def TCODE_VIEWPORT_DISPLAY_MODE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERTABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERREF(self) -> System.UInt32: ...
    @property
    def TCODE_XDATA(self) -> System.UInt32: ...
    @property
    def TCODE_RGB(self) -> System.UInt32: ...
    @property
    def TCODE_TEXTUREMAP(self) -> System.UInt32: ...
    @property
    def TCODE_BUMPMAP(self) -> System.UInt32: ...
    @property
    def TCODE_TRANSPARENCY(self) -> System.UInt32: ...
    @property
    def TCODE_DISP_AM_RESOLUTION(self) -> System.UInt32: ...
    @property
    def TCODE_RGBDISPLAY(self) -> System.UInt32: ...
    @property
    def TCODE_RENDER_MATERIAL_ID(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER_OBSELETE_1(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER_OBSELETE_2(self) -> System.UInt32: ...
    @property
    def TCODE_LAYER_OBSELETE_3(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERON(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERTHAWED(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERLOCKED(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERVISIBLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERPICKABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERSNAPABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERRENDERABLE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERSTATE(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERINDEX(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERMATERIALINDEX(self) -> System.UInt32: ...
    @property
    def TCODE_RENDERMESHPARAMS(self) -> System.UInt32: ...
    @property
    def TCODE_DISP_CPLINES(self) -> System.UInt32: ...
    @property
    def TCODE_DISP_MAXLENGTH(self) -> System.UInt32: ...
    @property
    def TCODE_CURRENTLAYER(self) -> System.UInt32: ...
    @property
    def TCODE_LAYERNAME(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_TOL_FIT(self) -> System.UInt32: ...
    @property
    def TCODE_LEGACY_TOL_ANGLE(self) -> System.UInt32: ...
    @property
    def TCODE_DICTIONARY(self) -> System.UInt32: ...
    @property
    def TCODE_DICTIONARY_ID(self) -> System.UInt32: ...
    @property
    def TCODE_DICTIONARY_ENTRY(self) -> System.UInt32: ...
    @property
    def TCODE_DICTIONARY_END(self) -> System.UInt32: ...

class FileWriteOptions(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def DestinationFileName(self) -> str: ...
    @property
    def FileVersion(self) -> int: ...
    @property
    def IncludeBitmapTable(self) -> bool: ...
    @property
    def IncludeHistory(self) -> bool: ...
    @property
    def IncludePreviewImage(self) -> bool: ...
    @property
    def IncludeRenderMeshes(self) -> bool: ...
    @property
    def OptionsDictionary(self) -> Collections.ArchivableDictionary: ...
    @property
    def RhinoDoc(self) -> Rhino.RhinoDoc: ...
    @property
    def SuppressAllInput(self) -> bool: ...
    @property
    def SuppressDialogBoxes(self) -> bool: ...
    @property
    def UpdateDocumentPath(self) -> bool: ...
    @property
    def WriteAsTemplate(self) -> bool: ...
    @property
    def WriteGeometryOnly(self) -> bool: ...
    @property
    def WriteSelectedObjectsOnly(self) -> bool: ...
    @property
    def WriteUserData(self) -> bool: ...
    @property
    def Xform(self) -> Geometry.Transform: ...
    @FileVersion.setter
    def FileVersion(self, value: System.Void): ...
    @IncludeBitmapTable.setter
    def IncludeBitmapTable(self, value: System.Void): ...
    @IncludeHistory.setter
    def IncludeHistory(self, value: System.Void): ...
    @IncludePreviewImage.setter
    def IncludePreviewImage(self, value: System.Void): ...
    @IncludeRenderMeshes.setter
    def IncludeRenderMeshes(self, value: System.Void): ...
    @SuppressAllInput.setter
    def SuppressAllInput(self, value: System.Void): ...
    @SuppressDialogBoxes.setter
    def SuppressDialogBoxes(self, value: System.Void): ...
    @UpdateDocumentPath.setter
    def UpdateDocumentPath(self, value: System.Void): ...
    @WriteGeometryOnly.setter
    def WriteGeometryOnly(self, value: System.Void): ...
    @WriteSelectedObjectsOnly.setter
    def WriteSelectedObjectsOnly(self, value: System.Void): ...
    @WriteUserData.setter
    def WriteUserData(self, value: System.Void): ...
    @Xform.setter
    def Xform(self, value: System.Void): ...

class FileReadOptions(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def BatchMode(self) -> bool: ...
    @property
    def ImportMode(self) -> bool: ...
    @property
    def ImportReferenceMode(self) -> bool: ...
    @property
    def InsertMode(self) -> bool: ...
    @property
    def LinkedInstanceDefinitionSerialNumber(self) -> System.UInt32: ...
    @property
    def NewMode(self) -> bool: ...
    @property
    def OpenMode(self) -> bool: ...
    @property
    def OptionsDictionary(self) -> Collections.ArchivableDictionary: ...
    @property
    def ReferenceModelGrandParentLayerId(self) -> System.Guid: ...
    @property
    def ScaleGeometry(self) -> bool: ...
    @property
    def UseScaleGeometry(self) -> bool: ...
    @property
    def WorkSessionReferenceModelSerialNumber(self) -> System.UInt32: ...
    @BatchMode.setter
    def BatchMode(self, value: System.Void): ...
    @ImportMode.setter
    def ImportMode(self, value: System.Void): ...
    @ImportReferenceMode.setter
    def ImportReferenceMode(self, value: System.Void): ...
    @InsertMode.setter
    def InsertMode(self, value: System.Void): ...
    @NewMode.setter
    def NewMode(self, value: System.Void): ...
    @OpenMode.setter
    def OpenMode(self, value: System.Void): ...
    @ScaleGeometry.setter
    def ScaleGeometry(self, value: System.Void): ...
    @UseScaleGeometry.setter
    def UseScaleGeometry(self, value: System.Void): ...

class FileType(object):
    """    """
    def __init__(self, extension: str, description: str): ...
    @property
    def Description(self) -> str: ...
    @property
    def Extension(self) -> str: ...

class File3dmNotes(object):
    """Represents the notes information stored in a 3dm file.

    """
    def __init__(self): ...
    @property
    def IsHtml(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Notes(self) -> str: ...
    @property
    def WindowRectangle(self) -> Drawing.Rectangle: ...
    @IsHtml.setter
    def IsHtml(self, value: System.Void): ...
    @IsVisible.setter
    def IsVisible(self, value: System.Void): ...
    @Notes.setter
    def Notes(self, value: System.Void): ...
    @WindowRectangle.setter
    def WindowRectangle(self, value: System.Void): ...

class BinaryArchiveException(IO.IOException):
    """Thrown by BinaryArchiveReader and BinaryArchiveWriter classes when an IO error has occurred.

    """
    def __init__(self, message: str): ...

class BinaryArchiveWriter(object):
    """Represents an entity that is able to write data to an archive.

    """
    @overload
    def BeginWrite3dmChunk(self, typecode: System.UInt32, value: System.Int64) -> bool: ...
    @overload
    def BeginWrite3dmChunk(self, typecode: System.UInt32, majorVersion: int, minorVersion: int) -> bool: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndWrite3dmChunk() -> bool: ...
    @property
    def Archive3dmVersion(self) -> int: ...
    @property
    def WriteErrorOccured(self) -> bool: ...
    @WriteErrorOccured.setter
    def WriteErrorOccured(self, value: System.Void): ...
    @overload
    def Write3dmChunkVersion(self, major: int, minor: int) -> None: ...
    @overload
    def WriteBool(self, value: bool) -> None: ...
    @overload
    def WriteBoolArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteBoundingBox(self, value: Geometry.BoundingBox) -> None: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...
    @overload
    def WriteByteArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteColor(self, value: Drawing.Color) -> None: ...
    @overload
    def WriteCompressedBuffer(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteDictionary(self, dictionary: Collections.ArchivableDictionary) -> None: ...
    @overload
    def WriteDouble(self, value: float) -> None: ...
    @overload
    def WriteDoubleArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteFont(self, value: Drawing.Font) -> None: ...
    @overload
    def WriteGeometry(self, value: Geometry.GeometryBase) -> None: ...
    @overload
    def WriteGeometryArray(self, geometry: Generic.IEnumerable) -> None: ...
    @overload
    def WriteGuid(self, value: System.Guid) -> None: ...
    @overload
    def WriteGuidArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteInt(self, value: int) -> None: ...
    @overload
    def WriteInt64(self, value: System.Int64) -> None: ...
    @overload
    def WriteIntArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteInterval(self, value: Geometry.Interval) -> None: ...
    @overload
    def WriteLine(self, value: Geometry.Line) -> None: ...
    @overload
    def WriteMeshingParameters(self, value: Geometry.MeshingParameters) -> None: ...
    @overload
    def WriteObjRef(self, objref: DocObjects.ObjRef) -> None: ...
    @overload
    def WriteObjRefArray(self, objrefs: Generic.IEnumerable) -> None: ...
    @overload
    def WritePlane(self, value: Geometry.Plane) -> None: ...
    @overload
    def WritePoint(self, value: Drawing.Point) -> None: ...
    @overload
    def WritePoint2d(self, value: Geometry.Point2d) -> None: ...
    @overload
    def WritePoint3d(self, value: Geometry.Point3d) -> None: ...
    @overload
    def WritePoint3f(self, value: Geometry.Point3f) -> None: ...
    @overload
    def WritePoint4d(self, value: Geometry.Point4d) -> None: ...
    @overload
    def WritePointF(self, value: Drawing.PointF) -> None: ...
    @overload
    def WriteRay3d(self, value: Geometry.Ray3d) -> None: ...
    @overload
    def WriteRectangle(self, value: Drawing.Rectangle) -> None: ...
    @overload
    def WriteRectangleF(self, value: Drawing.RectangleF) -> None: ...
    @overload
    def WriteRenderSettings(self, value: Render.RenderSettings) -> None: ...
    @overload
    def WriteSByte(self, value: System.SByte) -> None: ...
    @overload
    def WriteSByteArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteShort(self, value: System.Int16) -> None: ...
    @overload
    def WriteShortArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteSingle(self, value: System.Single) -> None: ...
    @overload
    def WriteSingleArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteSize(self, value: Drawing.Size) -> None: ...
    @overload
    def WriteSizeF(self, value: Drawing.SizeF) -> None: ...
    @overload
    def WriteString(self, value: str) -> None: ...
    @overload
    def WriteStringArray(self, value: Generic.IEnumerable) -> None: ...
    @overload
    def WriteTransform(self, value: Geometry.Transform) -> None: ...
    @overload
    def WriteUInt(self, value: System.UInt32) -> None: ...
    @overload
    def WriteUShort(self, value: System.UInt16) -> None: ...
    @overload
    def WriteUtf8String(self, value: str) -> None: ...
    @overload
    def WriteVector2d(self, value: Geometry.Vector2d) -> None: ...
    @overload
    def WriteVector3d(self, value: Geometry.Vector3d) -> None: ...
    @overload
    def WriteVector3f(self, value: Geometry.Vector3f) -> None: ...

class BinaryArchiveReader(object):
    """Represents an entity that is capable of reading a binary archive and instantiating strongly-typed objects.

    """
    @overload
    def AtEnd() -> bool: ...
    @overload
    def BeginRead3dmChunk() -> (bool, System.UInt32, System.Int64): ...
    @overload
    def BeginRead3dmChunk(self, expectedTypeCode: System.UInt32) -> (bool, int, int): ...
    @overload
    def Dump3dmChunk(self, log: TextLog) -> System.UInt32: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndRead3dmChunk(self, suppressPartiallyReadChunkWarning: bool) -> bool: ...
    @property
    def Archive3dmVersion(self) -> int: ...
    @property
    def CurrentPosition(self) -> System.UInt64: ...
    @property
    def ReadErrorOccured(self) -> bool: ...
    @overload
    def Read3dmChunkVersion() -> (int, int): ...
    @overload
    def Read3dmStartSection() -> (bool, int, str): ...
    @overload
    def ReadBool() -> bool: ...
    @overload
    def ReadBoolArray() -> System.System.Array[bool]: ...
    @overload
    def ReadBoundingBox() -> Geometry.BoundingBox: ...
    @overload
    def ReadByte() -> System.Byte: ...
    @overload
    def ReadByteArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadColor() -> Drawing.Color: ...
    @overload
    def ReadCompressedBuffer() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadDictionary() -> Collections.ArchivableDictionary: ...
    @overload
    def ReadDouble() -> float: ...
    @overload
    def ReadDoubleArray() -> System.System.Array[float]: ...
    @overload
    def ReadFont() -> Drawing.Font: ...
    @overload
    def ReadGeometry() -> Geometry.GeometryBase: ...
    @overload
    def ReadGeometryArray() -> Geometry.System.Array[Geometry.GeometryBase]: ...
    @overload
    def ReadGuid() -> System.Guid: ...
    @overload
    def ReadGuidArray() -> System.System.Array[System.Guid]: ...
    @overload
    def ReadInt() -> int: ...
    @overload
    def ReadInt64() -> System.Int64: ...
    @overload
    def ReadIntArray() -> System.System.Array[int]: ...
    @overload
    def ReadInterval() -> Geometry.Interval: ...
    @overload
    def ReadLine() -> Geometry.Line: ...
    @overload
    def ReadMeshingParameters() -> Geometry.MeshingParameters: ...
    @overload
    def ReadObjRef() -> DocObjects.ObjRef: ...
    @overload
    def ReadObjRefArray() -> DocObjects.System.Array[DocObjects.ObjRef]: ...
    @overload
    def ReadPlane() -> Geometry.Plane: ...
    @overload
    def ReadPoint() -> Drawing.Point: ...
    @overload
    def ReadPoint2d() -> Geometry.Point2d: ...
    @overload
    def ReadPoint3d() -> Geometry.Point3d: ...
    @overload
    def ReadPoint3f() -> Geometry.Point3f: ...
    @overload
    def ReadPoint4d() -> Geometry.Point4d: ...
    @overload
    def ReadPointF() -> Drawing.PointF: ...
    @overload
    def ReadRay3d() -> Geometry.Ray3d: ...
    @overload
    def ReadRectangle() -> Drawing.Rectangle: ...
    @overload
    def ReadRectangleF() -> Drawing.RectangleF: ...
    @overload
    def ReadRenderSettings() -> Render.RenderSettings: ...
    @overload
    def ReadSByte() -> System.SByte: ...
    @overload
    def ReadSByteArray() -> System.System.Array[System.SByte]: ...
    @overload
    def ReadShort() -> System.Int16: ...
    @overload
    def ReadShortArray() -> System.System.Array[System.Int16]: ...
    @overload
    def ReadSingle() -> System.Single: ...
    @overload
    def ReadSingleArray() -> System.System.Array[System.Single]: ...
    @overload
    def ReadSize() -> Drawing.Size: ...
    @overload
    def ReadSizeF() -> Drawing.SizeF: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ReadStringArray() -> System.System.Array[str]: ...
    @overload
    def ReadTransform() -> Geometry.Transform: ...
    @overload
    def ReadUInt() -> System.UInt32: ...
    @overload
    def ReadUShort() -> System.UInt16: ...
    @overload
    def ReadUtf8String() -> str: ...
    @overload
    def ReadVector2d() -> Geometry.Vector2d: ...
    @overload
    def ReadVector3d() -> Geometry.Vector3d: ...
    @overload
    def ReadVector3f() -> Geometry.Vector3f: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: System.Int64) -> bool: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: System.UInt64, forward: bool) -> bool: ...
    @overload
    def SeekFromStart(self, byteOffset: System.UInt64) -> bool: ...
    @ReadErrorOccured.setter
    def ReadErrorOccured(self, value: System.Void): ...

class BinaryArchiveMode(enum.Enum):
    Unknown = 0
    Read = 1
    Write = 2
    ReadWrite = 3
    Read3dm = 5
    Write3dm = 6

class BinaryArchiveFile(object):
    """    """
    def __init__(self, filename: str, mode: BinaryArchiveMode): ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Reader(self) -> BinaryArchiveReader: ...
    @property
    def Writer(self) -> BinaryArchiveWriter: ...
    @overload
    def Open() -> bool: ...

class SerializationOptions(object):
    """Contains options for serializing -or storing- data, such as Rhino version, user data, and meshes.

    """
    def __init__(self): ...
    @property
    def MaxRhinoVersion(self) -> int: ...
    @property
    def MinRhinoVersion(self) -> int: ...
    @property
    def RhinoVersion(self) -> int: ...
    @property
    def WriteAnalysisMeshes(self) -> bool: ...
    @property
    def WriteRenderMeshes(self) -> bool: ...
    @property
    def WriteUserData(self) -> bool: ...
    @RhinoVersion.setter
    def RhinoVersion(self, value: System.Void): ...
    @WriteAnalysisMeshes.setter
    def WriteAnalysisMeshes(self, value: System.Void): ...
    @WriteRenderMeshes.setter
    def WriteRenderMeshes(self, value: System.Void): ...
    @WriteUserData.setter
    def WriteUserData(self, value: System.Void): ...

class Units(enum.Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3

class Units(enum.Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3

class MeshPrecisionMode(enum.Enum):
    Automatic = 0
    DoublePrecision = 1
    SinglePrecision = 2

class AutocadVersion(enum.Enum):
    Release12 = 12
    Release14 = 14
    Acad2000 = 2000
    Acad2004 = 2004
    Acad2007 = 2007
    Acad2010 = 2010
    Acad2013 = 2013
    Acad2018 = 2018

class ExportMeshMode(enum.Enum):
    Meshes = 0
    ThreeDFace = 1

class ExportSurfaceMode(enum.Enum):
    Solids = 0
    Curves = 1
    Meshes = 2

class ExportLineMode(enum.Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3

class ExportArcMode(enum.Enum):
    Lines = 0
    Arcs = 1
    Polybulges = 2
    Polylines = 3
    Splines = 4
    ThreeDPolylines = 5

class ExportSplineMode(enum.Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3

class ExportPolylineMode(enum.Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3

class ExportPolycurveMode(enum.Enum):
    Lines = 0
    Polybulges = 1
    Polylines = 2
    Splines = 3
    ThreeDPolylines = 4

class FlattenMode(enum.Enum):
    None_ = 0
    Cplane = 1
    View = 2

class ColorMethodType(enum.Enum):
    ACI = 0
    RGB = 1

class Units(enum.Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3

class ObjectType(enum.Enum):
    Nurbs = 0
    Mesh = 1

class MaterialType(enum.Enum):
    Lambert = 0
    Phong = 1

class FileType(enum.Enum):
    Binary7 = 0
    Ascii7 = 1
    Binary6 = 2
    Ascii6 = 3

class ReadViewType(enum.Enum):
    Body = 0
    Profile = 1
    Plan = 2
    Wire = 3
    Solid = 4
    Camera = 5
    Custom = 6

class SubDMeshing(enum.Enum):
    Surface = 0
    ControlNet = 1

class IgesStringTypeMode(enum.Enum):
    Unicode = 0
    BIG5 = 1

class IgeswVersionMode(enum.Enum):
    Igv52 = 1
    Igv53 = 2

class EolMode(enum.Enum):
    Crlf = 1
    Cr = 2
    Lf = 3

class PointObjectsMode(enum.Enum):
    PoSets = 106
    PoSeparate = 116

class MaxDegreeMode(enum.Enum):
    MdNoLimit = 0
    Md3 = 3
    Md5 = 5

class SurfacesMode(enum.Enum):
    Srf128 = 128
    Srf143 = 143
    Srf144 = 144

class PolySurfacesMode(enum.Enum):
    PsrfSeparate = 0
    PsrfUnorderedGroup = 402

class SolidsMode(enum.Enum):
    SldSeparate = 0
    Sld184 = 184
    SldManifoldBRep = 186
    SldUnorderedGroup = 402

class MeshesMode(enum.Enum):
    MeshNone = 0
    Mesh10612 = 12
    Mesh10613 = 13

class AsciiEol(enum.Enum):
    Crlf = 0
    Lf = 1
    Cr = 2

class CurveType(enum.Enum):
    Polyline = 0
    Nurbs = 1

class GeometryType(enum.Enum):
    Nurbs = 0
    Mesh = 1

class ObjObjectNames(enum.Enum):
    NoObjects = 0
    ObjectAsGroup = 1
    ObjectAsObject = 2

class ObjGroupNames(enum.Enum):
    NoGroups = 0
    LayerAsGroup = 1
    GroupAsGroup = 2

class PolylineExportType(enum.Enum):
    Bspline = 0
    Single = 1
    Multiple = 2

class VertexWelding(enum.Enum):
    Normal = 0
    Welded = 1
    Unwelded = 2

class SubDMeshing(enum.Enum):
    Surface = 0
    ControlNet = 1

class NGons(enum.Enum):
    None_ = 0
    Preserve = 1
    Create = 2

class UseObjGsAs(enum.Enum):
    IgnoreObjGroups = 0
    ObjGroupsAsLayers = 1
    ObjGroupsAsGroups = 2
    ObjGroupsAsObjects = 3

class UseObjOsAs(enum.Enum):
    IgnoreObjObjects = 0
    ObjObjectsAsLayers = 1
    ObjObjectsAsGroups = 2
    ObjObjectsAsObjects = 3

class PDF_UNITS(enum.Enum):
    inches = 0
    centimeters = 1
    millimeters = 2
    points = 3

class SatTypes(enum.Enum):
    Default = 0
    ACIS15 = 1
    ACIS20 = 2
    ACIS30 = 3
    ACIS40 = 4
    AutoCAD = 5
    MechanicalDesktop = 6
    Inventor = 7
    SolidWorks = 8
    SolidEdge = 9

class SketchUpVersion(enum.Enum):
    SketchUp3 = 0
    SketchUp4 = 1
    SketchUp5 = 2
    SketchUp6 = 3
    SketchUp7 = 4
    SketchUp8 = 5
    SketchUp2013 = 6
    SketchUp2014 = 7
    SketchUp2015 = 8
    SketchUp2016 = 9
    SketchUp2017 = 10
    SketchUp2018 = 11
    SketchUp2019 = 12
    SketchUp2020 = 13
    SketchUp2021 = 14

class StepSchema(enum.Enum):
    SF_203 = 0
    SF_214 = 1
    SF_214_CC2 = 2
    SF_242 = 3

class ImportFillMode(enum.Enum):
    AsCurves = 0
    AsHatches = 1
    AsTrimmedPlanes = 2

class DelimiterMode(enum.Enum):
    Comma = 0
    Semicolon = 1
    Space = 2
    Tab = 3
    Other = 4
    Automatic = 5

class DelimiterMode(enum.Enum):
    Comma = 0
    Semicolon = 1
    Space = 2
    Tab = 3
    Other = 4

class AnimationMode(enum.Enum):
    X = 0
    Y = 1
    Z = 2

class X_T_Types(enum.Enum):
    Default = 0
    Edgecam = 1
    Mastercam = 2
    SolidEdge = 3
    SolidWorks = 4

class TableTypeFilter(enum.Enum):
    None_ = 0
    Properties = 1
    Settings = 2
    Bitmap = 4
    TextureMapping = 8
    Material = 16
    Linetype = 32
    Layer = 64
    Group = 128
    Font = 256
    FutureFont = 512
    Dimstyle = 1024
    Light = 2048
    Hatchpattern = 4096
    InstanceDefinition = 8192
    ObjectTable = 16384
    Historyrecord = 32768
    UserTable = 65536

class ObjectTypeFilter(enum.Enum):
    None_ = 0
    Point = 1
    Pointset = 2
    Curve = 4
    Surface = 8
    Brep = 16
    Mesh = 32
    Annotation = 512
    InstanceDefinition = 2048
    InstanceReference = 4096
    TextDot = 8192
    DetailView = 32768
    Hatch = 65536
    Extrusion = 1073741824
    Any = 4294967295

class SweepResolutionFormulas(enum.Enum):
    Default = 0
    AbsoluteToleranceDependent = 1

class CapTypes(enum.Enum):
    None_ = 0
    Flat = 1
    Box = 2
    Dome = 3

# endregion
