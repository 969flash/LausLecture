"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["PostEffectType", "CustomPostEffectAttribute", "PostEffectStyles", "PostEffectExecuteWhileRenderingOptions", "PostEffectUuids", "PostEffect", "PostEffectState", "PostEffectUI", "PostEffectHistograms", "PostEffectExecuteContexts", "PostEffectPipeline", "PostEffectChannel", "PostEffectJob", "PostEffectJobChannels", "PostEffectThreadEngine", "IPostEffects", "PostEffectData", "PostEffectCollection", "PostEffectExecutionControl"]
# endregion

# region: Imports
from Rhino import PlugIns
from Rhino import Render
from Rhino.UI import Controls
from System import Drawing
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class PostEffectType(enum.Enum):
    Early = 0
    ToneMapping = 1
    Late = 2

class CustomPostEffectAttribute(System.Attribute):
    """    """
    def __init__(self, postEffectType: PostEffectType, name: str, styles: PostEffectStyles, executeWhileRenderingOption: PostEffectExecuteWhileRenderingOptions, canDisplayHelp: bool, executeWhileRenderingDelay: int): ...
    @property
    def CanDisplayHelp(self) -> bool: ...
    @property
    def ExecuteWhileRenderingDelay(self) -> int: ...
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @property
    def Name(self) -> str: ...
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @property
    def Styles(self) -> PostEffectStyles: ...
    @CanDisplayHelp.setter
    def CanDisplayHelp(self, value: System.Void): ...
    @ExecuteWhileRenderingDelay.setter
    def ExecuteWhileRenderingDelay(self, value: System.Void): ...
    @ExecuteWhileRenderingOption.setter
    def ExecuteWhileRenderingOption(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PostEffectType.setter
    def PostEffectType(self, value: System.Void): ...
    @Styles.setter
    def Styles(self, value: System.Void): ...

class PostEffectStyles(enum.Enum):
    ExecuteForProductionRendering = 1
    ExecuteForRealtimeRendering = 2
    ExecuteForViewportDisplay = 4
    Fixed = 256
    DefaultShown = 512
    DefaultOn = 1024

class PostEffectExecuteWhileRenderingOptions(enum.Enum):
    None_ = 0
    Never = 0
    Always = 1
    UseDelay = 2
    UseExecutionControl = 3

class PostEffectUuids(object):
    """    """
    @property
    def Bloom(self) -> System.Guid: ...
    @property
    def BriCon(self) -> System.Guid: ...
    @property
    def DepthOfField(self) -> System.Guid: ...
    @property
    def Dithering(self) -> System.Guid: ...
    @property
    def Fog(self) -> System.Guid: ...
    @property
    def Gamma(self) -> System.Guid: ...
    @property
    def GaussianBlur(self) -> System.Guid: ...
    @property
    def Glare(self) -> System.Guid: ...
    @property
    def Glow(self) -> System.Guid: ...
    @property
    def HueSatLum(self) -> System.Guid: ...
    @property
    def Multiplier(self) -> System.Guid: ...
    @property
    def Noise(self) -> System.Guid: ...
    @property
    def ToneMapper_BlackWhitePoint(self) -> System.Guid: ...
    @property
    def ToneMapper_Clamp(self) -> System.Guid: ...
    @property
    def ToneMapper_FalseColor(self) -> System.Guid: ...
    @property
    def ToneMapper_Filmic(self) -> System.Guid: ...
    @property
    def ToneMapper_Logarithmic(self) -> System.Guid: ...
    @property
    def Watermark(self) -> System.Guid: ...
    @property
    def WireframeAnnotationsRGBA(self) -> System.Guid: ...
    @property
    def WireframeCurvesRGBA(self) -> System.Guid: ...
    @property
    def WireframeIsocurvesRGBA(self) -> System.Guid: ...
    @property
    def WireframePointsRGBA(self) -> System.Guid: ...

class PostEffect(object):
    """    """
    def __init__(self): ...
    @overload
    def AddUISections(self, ui: PostEffectUI) -> None: ...
    @overload
    def BeginChange(self, changeContext: Render.ChangeContexts) -> None: ...
    @overload
    def CanExecute(self, pipeline: PostEffectPipeline) -> bool: ...
    @overload
    def Changed() -> None: ...
    @overload
    def DisplayHelp() -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def EndChange() -> bool: ...
    @overload
    def Execute(self, pipeline: PostEffectPipeline, rect: Drawing.Rectangle) -> bool: ...
    @property
    def CanDisplayHelp(self) -> bool: ...
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def On(self) -> bool: ...
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @property
    def RequiredChannels(self) -> System.System.Array[System.Guid]: ...
    @property
    def SerialNumber(self) -> int: ...
    @property
    def Shown(self) -> bool: ...
    @property
    def Styles(self) -> PostEffectStyles: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetParam(self, param: str) -> (bool, object): ...
    @overload
    def ReadState(self, state: PostEffectState) -> bool: ...
    @overload
    @staticmethod
    def RegisterPostEffect(plugin: PlugIns.PlugIn) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def RegisterPostEffect(assembly: Reflection.Assembly, pluginId: System.Guid) -> System.System.Array[System.Type]: ...
    @overload
    def ResetToFactoryDefaults() -> None: ...
    @On.setter
    def On(self, value: System.Void): ...
    @SerialNumber.setter
    def SerialNumber(self, value: System.Void): ...
    @Shown.setter
    def Shown(self, value: System.Void): ...
    @overload
    def SetParam(self, param: str, v: object) -> bool: ...
    @overload
    def WriteState() -> (bool, PostEffectState): ...

class PostEffectState(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def SetValue(self, name: str, vValue: T) -> bool: ...
    @overload
    def TryGetValue(self, name: str) -> (bool, T): ...

class PostEffectUI(object):
    """PostEffectUI class provides a way for post effect plug-ins to add ui sections.

    """
    @overload
    def AddSection(self, section: Controls.ICollapsibleSection) -> None: ...
    @overload
    def Dispose() -> None: ...

class PostEffectHistograms(enum.Enum):
    None_ = 0
    BeforeEarlyEffects = 1
    BeforeToneMapping = 2
    AfterEarlyEffects = 2
    AfterToneMapping = 4
    BeforeLateEffects = 4
    ToneMappingDisplay = 6
    AfterLateEffects = 8
    All = 15

class PostEffectExecuteContexts(enum.Enum):
    ProductionRendering = 0
    RealtimeRendering = 1
    ViewportDisplay = 2
    ThumbnailCreation = 3
    ConvertingToHDR = 4

class PostEffectPipeline(object):
    """This object provides a way for post effects to access the frame buffer channels from a rendering and create new channels containing post-processed information which can be passed to the next post effect in the chain. Consider a simple post effect that just modifies the red component of a rendering.It will call GetChannel() to get the red channel as its input, and it will call NewChannel() to get a new red channel for its output. It will then read the input channel, do calculations and write to the output channel.When finished, it will call Commit() passing the new channel.Because both channels have the same identifier, this will replace the old channel with the new one so that subsequent post effects in the chain will use the new channel instead of the original.Note that this will only replace the channel used by the pipeline.The original channel will still exist in the frame buffer.This system allows any post effect to access any number of channels for reading and create any number of new channels which may or may not replace existing channels depending on the channel id.The final stage (convert to 8-bit) operates on the channels left in the pipeline by the post effect chain to produce the final 32-bit RGBA image in a dib. It is also possible for a post effect to create and use any number of 'scratch' channels.If a post effect needs a temporary pixel buffer for some intermediate results, it can call NewChannel() with a custom (random) id. Once it is finished with this scratch channel, it can call Discard() on it.

    """
    @overload
    def Dimensions() -> Drawing.Size: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Execute(self, p: Drawing.Rectangle, renderingInProgress: bool, usageContexts: PostEffectExecuteContexts, histogramsToUpdate: PostEffectHistograms) -> bool: ...
    @overload
    def ExecutionOrder() -> System.System.Array[System.Guid]: ...
    @property
    def GPUAllowed(self) -> bool: ...
    @property
    def IsRendering(self) -> bool: ...
    @property
    def RenderingId(self) -> System.Guid: ...
    @overload
    def GetChannelForRead(self, id_: System.Guid) -> PostEffectChannel: ...
    @overload
    def GetChannelForWrite(self, id_: System.Guid) -> PostEffectChannel: ...
    @overload
    def GetEndTimeInMilliseconds() -> System.UInt64: ...
    @overload
    def GetMaxLuminance() -> System.Single: ...
    @overload
    def GetStartTimeInMilliseconds() -> System.UInt64: ...
    @overload
    def SetStartTimeInMilliseconds(self, ms: System.UInt64) -> None: ...
    @overload
    def ThreadEngine() -> PostEffectThreadEngine: ...

class PostEffectChannel(object):
    """    """
    @overload
    def Clone() -> PostEffectChannel: ...
    @overload
    def Commit() -> None: ...
    @overload
    def CPU() -> Render.Channel: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def PixelSize(self) -> int: ...
    @overload
    def GPU() -> Render.ChannelGPU: ...

class PostEffectJob(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> PostEffectJob: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def Execute(self, rect: Drawing.Rectangle, access: PostEffectJobChannels) -> bool: ...

class PostEffectJobChannels(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def GetChannel(self, channelId: System.Guid) -> PostEffectChannel: ...

class PostEffectThreadEngine(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def RunPostEffect(self, job: PostEffectJob, pipeline: PostEffectPipeline, plugin: PostEffect, rect: Drawing.Rectangle, channels: System.System.Array[System.Guid]) -> bool: ...

class IPostEffects:
    """    """
    @overload
    def GetPostEffects(self, type_: PostEffectType) -> System.Array[PostEffect]: ...
    @overload
    def PostEffectFromId(self, uuid: System.Guid) -> PostEffect: ...

class PostEffectData(object):
    """This is a wrapper around the data ('on', 'shown', 'state' parameters, etc.) of a post effect.

    """
    @overload
    def DataCRC(self, current_remainder: System.UInt32) -> System.UInt32: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Collection(self) -> PostEffectCollection: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def On(self) -> bool: ...
    @property
    def Shown(self) -> bool: ...
    @property
    def Type(self) -> PostEffectType: ...
    @overload
    def GetParameter(self, param_name: str) -> System.IConvertible: ...
    @On.setter
    def On(self, value: System.Void): ...
    @Shown.setter
    def Shown(self, value: System.Void): ...
    @overload
    def SetParameter(self, param_name: str, param_value: object) -> bool: ...

class PostEffectCollection(Render.DocumentOrFreeFloatingBase):
    """Represents the collection of post effects in render settings.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, c: PostEffectCollection): ...
    @overload
    def CopyFrom(self, src: Render.FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetSelectedPostEffect(self, type_: PostEffectType) -> (bool, System.Guid): ...
    @overload
    def MovePostEffectBefore(self, id_move: System.Guid, id_before: System.Guid) -> bool: ...
    @overload
    def PostEffectDataFromId(self, id_: System.Guid) -> PostEffectData: ...
    @overload
    def SetSelectedPostEffect(self, type_: PostEffectType, id_: System.Guid) -> None: ...

class PostEffectExecutionControl(object):
    """    """
    def __init__(self): ...
    @overload
    def Detach() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def ReadyToExecutePostEffect(self, pep_id: System.Guid) -> bool: ...

# endregion
