"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Instance", "RenderMeshes", "MeshProviderIds", "RenderMeshProviderProgress", "CustomRenderMeshProviderAttribute", "RenderMeshProvider", "Flags"]
# endregion

# region: Imports
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import PlugIns
from Rhino import Render
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Instance(object):
    """The core of the custom render primitive delivery system - and instance defines a single mesh. Each instance has a shared mesh and a transform, along with a material, mapping channels (at the mesh and instance level).

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def IsForcedMaterial(self) -> bool: ...
    @property
    def IsRequestingPlugInDependent(self) -> bool: ...
    @property
    def IsViewDependent(self) -> bool: ...
    @property
    def Material(self) -> Render.RenderMaterial: ...
    @property
    def Mesh(self) -> Geometry.Mesh: ...
    @property
    def Transform(self) -> Geometry.Transform: ...
    @IsForcedMaterial.setter
    def IsForcedMaterial(self, value: System.Void): ...
    @IsRequestingPlugInDependent.setter
    def IsRequestingPlugInDependent(self, value: System.Void): ...
    @IsViewDependent.setter
    def IsViewDependent(self, value: System.Void): ...
    @Material.setter
    def Material(self, value: System.Void): ...
    @Mesh.setter
    def Mesh(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...

class RenderMeshes(object):
    """RenderMeshes is a collection of geometry instances for a given ObjectId typically returned by the Custom Render primitive system. As each set of primitives is returned by the RenderMeshProviders in turn, the running hash is updated with new information about the primitive modifications that have been made along the way.

    """
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, objectId: System.Guid, renderMeshProviderId: System.Guid, runningHash: System.UInt32): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, objectId: System.Guid, renderMeshProviderId: System.Guid, runningHash: System.UInt32, flags: System.UInt32): ...
    @overload
    def AddInstance(self, instance: Instance) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Hash(self) -> System.UInt32: ...
    @property
    def InstanceCount(self) -> int: ...
    @property
    def ObjectId(self) -> System.Guid: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @Hash.setter
    def Hash(self, value: System.Void): ...

class MeshProviderIds(object):
    """Built in primitive provider ids.

    """
    @property
    def CurvePiping(self) -> System.Guid: ...
    @property
    def Displacement(self) -> System.Guid: ...
    @property
    def EdgeSoftening(self) -> System.Guid: ...
    @property
    def Shutlining(self) -> System.Guid: ...
    @property
    def Thickening(self) -> System.Guid: ...

class RenderMeshProviderProgress(object):
    """Expresses the progress of a custom render mesh provider.

    """
    def __init__(self): ...
    @property
    def Amount(self) -> float: ...
    @property
    def IsComplete(self) -> bool: ...
    @property
    def ProviderId(self) -> System.Guid: ...
    @property
    def Target(self) -> float: ...
    @property
    def Text(self) -> str: ...
    @Amount.setter
    def Amount(self, value: System.Void): ...
    @IsComplete.setter
    def IsComplete(self, value: System.Void): ...
    @ProviderId.setter
    def ProviderId(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class CustomRenderMeshProviderAttribute(System.Attribute):
    """Attributes for RenderMeshProvider

    """
    def __init__(self, nonObjectIdsOnly: bool): ...
    @property
    def NonObjectIdsOnly(self) -> bool: ...
    @NonObjectIdsOnly.setter
    def NonObjectIdsOnly(self, value: System.Void): ...

class RenderMeshProvider(object):
    """A RenderMeshProvider delivers custom render primitives (in the form of RenderMeshes). Derive a public class from this with a public constructor, and this primitive provider will be added to the RDK forming a collection of providers. Each RenderMeshProvider::HasCustomRenderMeshes will be called and if it returns true, a call to RenderMeshes will be made. It is up to the provider to cache its own primitives - the IRenderMeshes::ProviderTracking class is provided for that. A provider may optionally return a collection of non-object Ids that it will provide custom render primitives for. An example of this is Grasshopper, which which will typically return a collection of the Ids of each CustomPreview component. Override this class if you are a plug-in developer intending to supply a custom set of primitives for a given object, or objectId. Examples of IRenderMeshProviders are CurvePiping, EdgeSoftening, Displacement, Shutlining, Grasshopper's CustomPreview component.

    """
    @overload
    def Dispose() -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def NonObjectIds(self) -> Generic.List: ...
    @property
    def ProviderId(self) -> System.Guid: ...
    @overload
    def GetParameter(self, doc: Rhino.RhinoDoc, objectId: System.Guid, parameterName: str) -> object: ...
    @overload
    def HasCustomRenderMeshes(self, mt: Geometry.MeshType, vp: DocObjects.ViewportInfo, doc: Rhino.RhinoDoc, objectId: System.Guid, plugin: PlugIns.PlugIn, attrs: Display.DisplayPipelineAttributes) -> (bool, Flags): ...
    @overload
    def Progress(self, doc: Rhino.RhinoDoc, optional_objectIds: System.System.Array[System.Guid]) -> RenderMeshProviderProgress: ...
    @overload
    @staticmethod
    def ProgressForAll(doc: Rhino.RhinoDoc, optional_objectIds: System.System.Array[System.Guid]) -> System.Array[RenderMeshProviderProgress]: ...
    @overload
    @staticmethod
    def RegisterProvider(provider: RenderMeshProvider, plugin: PlugIns.PlugIn) -> bool: ...
    @overload
    @staticmethod
    def RegisterProviders(plugin: PlugIns.PlugIn) -> None: ...
    @overload
    @staticmethod
    def RegisterProviders(assembly: Reflection.Assembly, plugin: PlugIns.PlugIn) -> None: ...
    @overload
    def RenderMeshes(self, mt: Geometry.MeshType, vp: DocObjects.ViewportInfo, doc: Rhino.RhinoDoc, objectId: System.Guid, ancestry: Generic.List, previousPrimitives: RenderMeshes, plugin: PlugIns.PlugIn, attrs: Display.DisplayPipelineAttributes) -> (RenderMeshes, Flags): ...
    @overload
    def SetParameter(self, doc: Rhino.RhinoDoc, objectId: System.Guid, parameterName: str, value: object) -> None: ...

class Flags(enum.Enum):
    None_ = 0
    Canceled = 1
    DisableCaching = 2
    Recursive = 4
    IsDocumentObject = 8
    AlwaysCopyDocumentContent = 16
    ReturnNullForStandardMaterial = 32
    Incomplete = 64

# endregion
