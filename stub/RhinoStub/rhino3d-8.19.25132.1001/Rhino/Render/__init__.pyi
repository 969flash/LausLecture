"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["PostEffects", "Fields", "ChildSlotNames", "ParameterNames", "UI", "ChangeQueue", "DataSources", "CustomRenderMeshes", "Dithering", "RenderChannels", "RenderSettings", "CachedTextureCoordinates", "MappingTag", "TextureMappingType", "TextureSpace", "Projection", "TextureMapping", "City", "RenderContentSerializer", "RenderPropertyChangedEvent", "GroundPlane", "RenderContentStyles", "ContentUuids", "DynamicIconUsage", "CustomRenderContentAttribute", "RenderContentKind", "it_strategy", "ProxyTypes", "RenderContentKindList", "FilterContentByUsage", "RenderContentCollection", "ContentCollectionIterator", "RenderContent", "CrcRenderHashFlags", "RenderContentEventArgs", "RenderContentChangedEventArgs", "RenderContentChangeReason", "RenderContentFieldChangedEventArgs", "PreviewRenderedEventArgs", "RenderContentType", "RenderMaterialTable", "RenderEnvironmentTable", "RenderTextureTable", "RenderPrimitiveType", "DecalMapping", "DecalProjection", "Decal", "Decals", "DecalCreateParams", "FreeFloatingBase", "DocumentOrFreeFloatingBase", "ICurrentEnvironment_Get", "ICurrentEnvironment", "RenderEnvironment", "Utilities", "LightManagerSupportClient", "LightArray", "LightMangerSupportCustomEvent", "LightManagerSupport", "LinearWorkflow", "TexturedValue", "TexturedColor", "TexturedFloat", "RenderMaterial", "ComponentOrders", "PreviewJobSignature", "IRhRdkPreviewSceneServer_eRotationType", "PreviewAppearance", "MetaDataProxy", "PreviewBackground", "PreviewGeometry", "PreviewLighting", "PreviewSceneQuality", "CreatePreviewReason", "CreatePreviewEventArgs", "CreateTexture2dPreviewEventArgs", "SceneServerDataUsage", "SceneServerData", "PreviewSceneServer", "RenderPrimitive", "SupportOptions", "RenderPlugInList", "RenderPlugInInfo", "RealtimeDisplayModeClassInfo", "RealtimeDisplayMode", "PixelBuffer", "RenderWindowClonedEventArgs", "RenderWindow", "RenderPanelType", "RenderTabs", "RenderPanels", "RenderPipeline", "RenderSourceView", "AsyncRenderContext", "RenderEndEventArgs", "SimulatedEnvironment", "SafeFrame", "TextureProjectionMode", "ExtensionMethods", "TextureMode", "TextureWrapType", "TextureEnvironmentMappingMode", "TextureGeneration", "TextureRenderHashFlags", "RenderTexture", "TextureGraphInfo", "TwoColorRenderTexture", "TextureEvaluator", "TimeZone", "ContentUndoHelper", "ContentUndoBlocker", "RdkUndoRecord", "RdkUndo", "NamedValue", "ConvertibleExtensions", "SimulatedTexture", "AddCustomUISections", "AddCustomUISectionsEventArgs", "UndoRedo", "Sun", "Skylight", "ImageFileEventArgs", "ImageFileEvent", "ImageFile", "RenderContentManager", "Methods", "Modes", "RenderingSources", "EnvironmentUsage", "EnvironmentPurpose", "LoadMultipleFlags", "ShowContentChooserFlags", "EmbedFilesChoice", "ContentInstanceBrowserButtons", "MatchDataResult", "ExtraRequirementsSetContexts", "ChangeContexts", "PreviewRenderResult", "PreviewQuality", "ContentChooserFlags", "ShowContentChooserResults", "AssignToSubFaceChoices", "AssignToBlockChoices", "StandardChildSlots", "BasicMaterialParameterNames", "PreviewGeometryType", "PreviewBackgroundType", "SceneObject", "RdkInitialLocation", "RdkTextureSize", "DisplayPipelineSettingsChangedEventArgs", "InitFramebufferEventArgs", "DrawMiddlegroundEventArgs", "HudMaxPassesChangedEventArgs", "RenderSuccessCode", "StandardChannels", "Channel", "ChannelGPU", "ImageAdjust", "ExtraSidePanePosition", "RenderReturnCode", "BackgroundProjections", "TextureEvaluatorFlags", "eLocalMappingType", "Axis", "ProjectionModes", "EnvironmentMappingModes", "Accuracies"]
# endregion

# region: Imports
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import PlugIns
from Rhino import Runtime
from Rhino.Render import DataSources
from Rhino.Render import Fields
from Rhino.Render import PostEffects
from Rhino.Runtime import InteropWrappers
from Rhino.UI import Controls
from System import Collections
from System import Drawing
from System import Reflection
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class Dithering(DocumentOrFreeFloatingBase):
    """This is the interface to dithering settings.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, d: Dithering): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Method(self) -> Methods: ...
    @property
    def On(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @On.setter
    def On(self, value: System.Void): ...

class RenderChannels(DocumentOrFreeFloatingBase):
    """Render Channels. This corresponds to the user's settings in the Rendering panel.

    """
    def __init__(self): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CustomList(self) -> System.System.Array[System.Guid]: ...
    @property
    def Mode(self) -> Modes: ...
    @CustomList.setter
    def CustomList(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @property
    def Changed(self): ...

class RenderSettings(Runtime.CommonObject):
    """Contains settings used in rendering.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source: RenderSettings): ...
    @overload
    def Duplicate() -> RenderSettings: ...
    @property
    def AmbientLight(self) -> Drawing.Color: ...
    @property
    def AntialiasLevel(self) -> Rhino.AntialiasLevel: ...
    @property
    def BackgroundColorBottom(self) -> Drawing.Color: ...
    @property
    def BackgroundColorTop(self) -> Drawing.Color: ...
    @property
    def BackgroundStyle(self) -> Display.BackgroundStyle: ...
    @property
    def DepthCue(self) -> bool: ...
    @property
    def Dithering(self) -> Dithering: ...
    @property
    def FlatShade(self) -> bool: ...
    @property
    def GroundPlane(self) -> GroundPlane: ...
    @property
    def ImageDpi(self) -> float: ...
    @property
    def ImageSize(self) -> Drawing.Size: ...
    @property
    def ImageUnitSystem(self) -> Rhino.UnitSystem: ...
    @property
    def LinearWorkflow(self) -> LinearWorkflow: ...
    @property
    def NamedView(self) -> str: ...
    @property
    def PostEffects(self) -> PostEffects.PostEffectCollection: ...
    @property
    def RenderAnnotations(self) -> bool: ...
    @property
    def RenderBackfaces(self) -> bool: ...
    @property
    def RenderChannels(self) -> RenderChannels: ...
    @property
    def RenderCurves(self) -> bool: ...
    @property
    def RenderIsoparams(self) -> bool: ...
    @property
    def RenderMeshEdges(self) -> bool: ...
    @property
    def RenderPoints(self) -> bool: ...
    @property
    def RenderSource(self) -> RenderingSources: ...
    @property
    def SafeFrame(self) -> SafeFrame: ...
    @property
    def ScaleBackgroundToFit(self) -> bool: ...
    @property
    def ShadowmapLevel(self) -> int: ...
    @property
    def Skylight(self) -> Skylight: ...
    @property
    def Snapshot(self) -> str: ...
    @property
    def SpecificViewport(self) -> str: ...
    @property
    def Sun(self) -> Sun: ...
    @property
    def TransparentBackground(self) -> bool: ...
    @property
    def UseHiddenLights(self) -> bool: ...
    @property
    def UseViewportSize(self) -> bool: ...
    @overload
    def RenderEnvironment(self, usage: EnvironmentUsage, purpose: EnvironmentPurpose) -> RenderEnvironment: ...
    @overload
    def RenderEnvironmentId(self, usage: EnvironmentUsage, purpose: EnvironmentPurpose) -> System.Guid: ...
    @overload
    def RenderEnvironmentOverride(self, usage: EnvironmentUsage) -> bool: ...
    @AmbientLight.setter
    def AmbientLight(self, value: System.Void): ...
    @AntialiasLevel.setter
    def AntialiasLevel(self, value: System.Void): ...
    @BackgroundColorBottom.setter
    def BackgroundColorBottom(self, value: System.Void): ...
    @BackgroundColorTop.setter
    def BackgroundColorTop(self, value: System.Void): ...
    @BackgroundStyle.setter
    def BackgroundStyle(self, value: System.Void): ...
    @DepthCue.setter
    def DepthCue(self, value: System.Void): ...
    @FlatShade.setter
    def FlatShade(self, value: System.Void): ...
    @ImageDpi.setter
    def ImageDpi(self, value: System.Void): ...
    @ImageSize.setter
    def ImageSize(self, value: System.Void): ...
    @ImageUnitSystem.setter
    def ImageUnitSystem(self, value: System.Void): ...
    @NamedView.setter
    def NamedView(self, value: System.Void): ...
    @RenderAnnotations.setter
    def RenderAnnotations(self, value: System.Void): ...
    @RenderBackfaces.setter
    def RenderBackfaces(self, value: System.Void): ...
    @RenderCurves.setter
    def RenderCurves(self, value: System.Void): ...
    @RenderIsoparams.setter
    def RenderIsoparams(self, value: System.Void): ...
    @RenderMeshEdges.setter
    def RenderMeshEdges(self, value: System.Void): ...
    @RenderPoints.setter
    def RenderPoints(self, value: System.Void): ...
    @RenderSource.setter
    def RenderSource(self, value: System.Void): ...
    @ScaleBackgroundToFit.setter
    def ScaleBackgroundToFit(self, value: System.Void): ...
    @ShadowmapLevel.setter
    def ShadowmapLevel(self, value: System.Void): ...
    @Snapshot.setter
    def Snapshot(self, value: System.Void): ...
    @SpecificViewport.setter
    def SpecificViewport(self, value: System.Void): ...
    @TransparentBackground.setter
    def TransparentBackground(self, value: System.Void): ...
    @UseHiddenLights.setter
    def UseHiddenLights(self, value: System.Void): ...
    @UseViewportSize.setter
    def UseViewportSize(self, value: System.Void): ...
    @overload
    def SetRenderEnvironment(self, usage: EnvironmentUsage, env: RenderEnvironment) -> None: ...
    @overload
    def SetRenderEnvironmentId(self, usage: EnvironmentUsage, guid: System.Guid) -> None: ...
    @overload
    def SetRenderEnvironmentOverride(self, usage: EnvironmentUsage, on: bool) -> None: ...

class CachedTextureCoordinates(Runtime.CommonObject):
    """Used for cached texture coordinates

    """
    @overload
    def Contains(self, item: Geometry.Point3d) -> bool: ...
    @overload
    def CopyTo(self, array: Geometry.System.Array[Geometry.Point3d], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Dim(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Geometry.Point3d: ...
    @property
    def MappingId(self) -> System.Guid: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: Geometry.Point3d) -> int: ...
    @overload
    def TryGetAt(self, index: int) -> (bool, float, float, float): ...

class MappingTag(object):
    """Holds texture mapping information.

    """
    def __init__(self): ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def MappingCRC(self) -> System.UInt32: ...
    @property
    def MappingType(self) -> TextureMappingType: ...
    @property
    def MeshTransform(self) -> Geometry.Transform: ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @MappingCRC.setter
    def MappingCRC(self, value: System.Void): ...
    @MappingType.setter
    def MappingType(self, value: System.Void): ...
    @MeshTransform.setter
    def MeshTransform(self, value: System.Void): ...

class TextureMappingType(enum.Enum):
    None_ = 0
    SurfaceParameters = 1
    PlaneMapping = 2
    CylinderMapping = 3
    SphereMapping = 4
    BoxMapping = 5
    MeshMappingPrimitive = 6
    SurfaceMappingPrimitive = 7
    BrepMappingPrimitive = 8
    OcsMapping = 9
    FalseColors = 10

class TextureSpace(enum.Enum):
    Single = 0
    Divided = 1

class Projection(enum.Enum):
    None_ = 0
    ClosestPoint = 1
    Ray = 2

class TextureMapping(DocObjects.ModelComponent):
    """Represents a texture mapping.

    """
    @overload
    @staticmethod
    def CreateBoxMapping(plane: Geometry.Plane, dx: Geometry.Interval, dy: Geometry.Interval, dz: Geometry.Interval, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateCustomMeshMapping(mesh: Geometry.Mesh) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateCylinderMapping(cylinder: Geometry.Cylinder, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateOcsMapping(plane: Geometry.Plane) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreatePlaneMapping(plane: Geometry.Plane, dx: Geometry.Interval, dy: Geometry.Interval, dz: Geometry.Interval) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreatePlaneMapping(plane: Geometry.Plane, dx: Geometry.Interval, dy: Geometry.Interval, dz: Geometry.Interval, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateSphereMapping(sphere: Geometry.Sphere) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateSurfaceParameterMapping() -> TextureMapping: ...
    @overload
    def Evaluate(self, p: Geometry.Point3d, n: Geometry.Vector3d) -> (int, Geometry.Point3d): ...
    @overload
    def Evaluate(self, p: Geometry.Point3d, n: Geometry.Vector3d, pXform: Geometry.Transform, nXform: Geometry.Transform) -> (int, Geometry.Point3d): ...
    @property
    def Capped(self) -> bool: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def MappingType(self) -> TextureMappingType: ...
    @property
    def NormalTransform(self) -> Geometry.Transform: ...
    @property
    def PrimativeTransform(self) -> Geometry.Transform: ...
    @property
    def PrimitiveTransform(self) -> Geometry.Transform: ...
    @property
    def Projection(self) -> Projection: ...
    @property
    def TextureSpace(self) -> TextureSpace: ...
    @property
    def UvwTransform(self) -> Geometry.Transform: ...
    @Capped.setter
    def Capped(self, value: System.Void): ...
    @NormalTransform.setter
    def NormalTransform(self, value: System.Void): ...
    @PrimativeTransform.setter
    def PrimativeTransform(self, value: System.Void): ...
    @PrimitiveTransform.setter
    def PrimitiveTransform(self, value: System.Void): ...
    @Projection.setter
    def Projection(self, value: System.Void): ...
    @TextureSpace.setter
    def TextureSpace(self, value: System.Void): ...
    @UvwTransform.setter
    def UvwTransform(self, value: System.Void): ...
    @overload
    def TryGetMappingBox() -> (bool, Geometry.Plane, Geometry.Interval, Geometry.Interval, Geometry.Interval): ...
    @overload
    def TryGetMappingBox() -> (bool, Geometry.Plane, Geometry.Interval, Geometry.Interval, Geometry.Interval, bool): ...
    @overload
    def TryGetMappingCylinder() -> (bool, Geometry.Cylinder): ...
    @overload
    def TryGetMappingCylinder() -> (bool, Geometry.Cylinder, bool): ...
    @overload
    def TryGetMappingMesh() -> (bool, Geometry.Mesh): ...
    @overload
    def TryGetMappingPlane() -> (bool, Geometry.Plane, Geometry.Interval, Geometry.Interval, Geometry.Interval): ...
    @overload
    def TryGetMappingPlane() -> (bool, Geometry.Plane, Geometry.Interval, Geometry.Interval, Geometry.Interval, bool): ...
    @overload
    def TryGetMappingSphere() -> (bool, Geometry.Sphere): ...

class City(object):
    """City

    """
    @overload
    @staticmethod
    def Cities() -> int: ...
    @overload
    @staticmethod
    def CityAt(index: int) -> City: ...
    @overload
    @staticmethod
    def FindNearest(latitude: float, longitude: float) -> City: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def TimeZone(self) -> float: ...

class RenderContentSerializer(object):
    """Used to import and export custom render content such as materials, environments and textures. You must override RenderPlugIn.RenderContentSerializers() and return an array of derived RenderContentSerializer class types to add to the content browsers.

    """
    @overload
    def CanLoadMultiple() -> bool: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def ContentKind(self) -> RenderContentKind: ...
    @property
    def ContentType(self) -> RenderContentKind: ...
    @property
    def EnglishDescription(self) -> str: ...
    @property
    def FileExtension(self) -> str: ...
    @property
    def LocalDescription(self) -> str: ...
    @overload
    def LoadMultiple(self, doc: Rhino.RhinoDoc, fileNames: Generic.IEnumerable, contentKind: RenderContentKind, flags: LoadMultipleFlags) -> bool: ...
    @overload
    def Read(self, pathToFile: str) -> RenderContent: ...
    @overload
    def RegisterSerializer(self, id_: System.Guid) -> bool: ...
    @overload
    def ReportContentAndFile(self, renderContent: RenderContent, pathToFile: str, flags: int) -> None: ...
    @overload
    def ReportDeferredContentAndFile(self, renderContent: RenderContent, pathToFile: str, flags: int) -> None: ...
    @overload
    def Write(self, pathToFile: str, renderContent: RenderContent, previewArgs: CreatePreviewEventArgs) -> bool: ...

class RenderPropertyChangedEvent(System.EventArgs):
    """Used by Rhino.Render object property value has changed events.

    """
    @property
    def Context(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...

class GroundPlane(DocumentOrFreeFloatingBase):
    """Represents an infinite plane for implementation by renderers. See
SupportsFeature
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, g: GroundPlane): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Altitude(self) -> float: ...
    @property
    def AutoAltitude(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def MaterialInstanceId(self) -> System.Guid: ...
    @property
    def ShadowOnly(self) -> bool: ...
    @property
    def ShowUnderside(self) -> bool: ...
    @property
    def TextureOffset(self) -> Geometry.Vector2d: ...
    @property
    def TextureOffsetLocked(self) -> bool: ...
    @property
    def TextureRotation(self) -> float: ...
    @property
    def TextureSize(self) -> Geometry.Vector2d: ...
    @property
    def TextureSizeLocked(self) -> bool: ...
    @Altitude.setter
    def Altitude(self, value: System.Void): ...
    @AutoAltitude.setter
    def AutoAltitude(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @MaterialInstanceId.setter
    def MaterialInstanceId(self, value: System.Void): ...
    @ShadowOnly.setter
    def ShadowOnly(self, value: System.Void): ...
    @ShowUnderside.setter
    def ShowUnderside(self, value: System.Void): ...
    @TextureOffset.setter
    def TextureOffset(self, value: System.Void): ...
    @TextureOffsetLocked.setter
    def TextureOffsetLocked(self, value: System.Void): ...
    @TextureRotation.setter
    def TextureRotation(self, value: System.Void): ...
    @TextureSize.setter
    def TextureSize(self, value: System.Void): ...
    @TextureSizeLocked.setter
    def TextureSizeLocked(self, value: System.Void): ...
    @property
    def Changed(self): ...

class RenderContentStyles(enum.Enum):
    None_ = 0
    TextureSummary = 1
    QuickPreview = 2
    PreviewCache = 4
    ProgressivePreview = 8
    LocalTextureMapping = 16
    GraphDisplay = 32
    SharedUI = 64
    Adjustment = 128
    Fields = 256
    ModalEditing = 512
    DynamicFields = 1024
    NameTypeSection = 2048

class ContentUuids(object):
    """Content Guids of RenderContent provided by the RDK SDK. These Guids can be used to check against RenderContent.TypeId.

    """
    @property
    def AddTextureType(self) -> System.Guid: ...
    @property
    def AdvancedDotTextureType(self) -> System.Guid: ...
    @property
    def BasicEnvironmentCCI(self) -> System.Guid: ...
    @property
    def BasicEnvironmentType(self) -> System.Guid: ...
    @property
    def BasicMaterialCCI(self) -> System.Guid: ...
    @property
    def BasicMaterialType(self) -> System.Guid: ...
    @property
    def BitmapTextureType(self) -> System.Guid: ...
    @property
    def BlendMaterialCCI(self) -> System.Guid: ...
    @property
    def BlendMaterialType(self) -> System.Guid: ...
    @property
    def BlendTextureType(self) -> System.Guid: ...
    @property
    def CompositeMaterialCCI(self) -> System.Guid: ...
    @property
    def CompositeMaterialType(self) -> System.Guid: ...
    @property
    def CrossHatchBumpTexture(self) -> System.Guid: ...
    @property
    def CubeMapTextureType(self) -> System.Guid: ...
    @property
    def DefaultEnvironmentInstance(self) -> System.Guid: ...
    @property
    def DefaultMaterialInstance(self) -> System.Guid: ...
    @property
    def DisplayAttributeMaterialType(self) -> System.Guid: ...
    @property
    def DotBumpTexture(self) -> System.Guid: ...
    @property
    def DoubleSidedMaterialType(self) -> System.Guid: ...
    @property
    def EmissionMaterialType(self) -> System.Guid: ...
    @property
    def ExposureTextureType(self) -> System.Guid: ...
    @property
    def EXRTextureType(self) -> System.Guid: ...
    @property
    def FBmTextureType(self) -> System.Guid: ...
    @property
    def GemMaterialType(self) -> System.Guid: ...
    @property
    def GlassMaterialType(self) -> System.Guid: ...
    @property
    def GradientTextureType(self) -> System.Guid: ...
    @property
    def GraniteTextureType(self) -> System.Guid: ...
    @property
    def GridTextureType(self) -> System.Guid: ...
    @property
    def GritBumpTexture(self) -> System.Guid: ...
    @property
    def HatchBumpTexture(self) -> System.Guid: ...
    @property
    def HDRTextureType(self) -> System.Guid: ...
    @property
    def LeatherBumpTexture(self) -> System.Guid: ...
    @property
    def MarbleTextureType(self) -> System.Guid: ...
    @property
    def MaskTextureType(self) -> System.Guid: ...
    @property
    def MetalMaterialType(self) -> System.Guid: ...
    @property
    def MultiplyTextureType(self) -> System.Guid: ...
    @property
    def NoiseTextureType(self) -> System.Guid: ...
    @property
    def PaintMaterialType(self) -> System.Guid: ...
    @property
    def PerlinMarbleTextureType(self) -> System.Guid: ...
    @property
    def PerturbingTextureType(self) -> System.Guid: ...
    @property
    def PhysicallyBasedMaterialType(self) -> System.Guid: ...
    @property
    def PhysicalSkyTextureType(self) -> System.Guid: ...
    @property
    def PictureMaterialType(self) -> System.Guid: ...
    @property
    def PlasterMaterialType(self) -> System.Guid: ...
    @property
    def PlasticMaterialType(self) -> System.Guid: ...
    @property
    def ProjectionChangerTextureType(self) -> System.Guid: ...
    @property
    def RealtimeDisplayMaterialType(self) -> System.Guid: ...
    @property
    def ResampleTextureType(self) -> System.Guid: ...
    @property
    def SimpleBitmapTextureType(self) -> System.Guid: ...
    @property
    def SingleColorTextureType(self) -> System.Guid: ...
    @property
    def SpeckleBumpTexture(self) -> System.Guid: ...
    @property
    def StuccoTextureType(self) -> System.Guid: ...
    @property
    def Texture2DCheckerTextureType(self) -> System.Guid: ...
    @property
    def Texture3DCheckerTextureType(self) -> System.Guid: ...
    @property
    def TextureAdjustmentTextureType(self) -> System.Guid: ...
    @property
    def TileTextureType(self) -> System.Guid: ...
    @property
    def TurbulenceTextureType(self) -> System.Guid: ...
    @property
    def V8BlendMaterialType(self) -> System.Guid: ...
    @property
    def WavesTextureType(self) -> System.Guid: ...
    @property
    def WoodBumpTexture(self) -> System.Guid: ...
    @property
    def WoodTextureType(self) -> System.Guid: ...

class DynamicIconUsage(enum.Enum):
    TreeControl = 0
    SubnodeControl = 1
    ContentControl = 2
    General = 3

class CustomRenderContentAttribute(System.Attribute):
    """Attributes for RenderContent

    """
    @overload
    def __init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool): ...
    @overload
    def __init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool, is_linear: bool, is_hdrcapable: bool, is_normalmap: bool): ...
    @property
    def Category(self) -> str: ...
    @property
    def ImageBased(self) -> bool: ...
    @property
    def IsBuiltIn(self) -> bool: ...
    @property
    def IsElevated(self) -> bool: ...
    @property
    def IsHdrCapable(self) -> bool: ...
    @property
    def IsLinear(self) -> bool: ...
    @property
    def IsNormalMap(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def RenderEngineId(self) -> System.Guid: ...
    @Category.setter
    def Category(self, value: System.Void): ...
    @ImageBased.setter
    def ImageBased(self, value: System.Void): ...
    @IsBuiltIn.setter
    def IsBuiltIn(self, value: System.Void): ...
    @IsElevated.setter
    def IsElevated(self, value: System.Void): ...
    @IsHdrCapable.setter
    def IsHdrCapable(self, value: System.Void): ...
    @IsLinear.setter
    def IsLinear(self, value: System.Void): ...
    @IsNormalMap.setter
    def IsNormalMap(self, value: System.Void): ...
    @IsPrivate.setter
    def IsPrivate(self, value: System.Void): ...

class RenderContentKind(enum.Enum):
    None_ = 0
    Material = 1
    Environment = 2
    Texture = 4

class it_strategy(enum.Enum):
    ContentDataBase = 0
    ContentSelection = 1

class ProxyTypes(enum.Enum):
    None_ = 0
    Single = 1
    Multi = 2
    Texture = 3

class RenderContentKindList(object):
    """Models a collection of kinds.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, kind_list: RenderContentKindList): ...
    @overload
    def __init__(self, pRdkRenderContentKindList: System.IntPtr): ...
    @overload
    def Add(self, kind: RenderContentKind) -> None: ...
    @overload
    def Contains(self, kind: RenderContentKind) -> bool: ...
    @overload
    def Count() -> int: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SingleKind() -> RenderContentKind: ...

class FilterContentByUsage(enum.Enum):
    None_ = 0
    Used = 1
    Unused = 2
    UsedSelected = 3

class RenderContentCollection(object):
    """A collection of Render content

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nativePtr: System.IntPtr): ...
    @overload
    def Add(self, collection: RenderContentCollection) -> None: ...
    @overload
    def Append(self, content: RenderContent) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContentAt(self, index: int) -> RenderContent: ...
    @overload
    def ContentNeedsPreviewThumbnail(self, c: RenderContent, includeChildren: bool) -> bool: ...
    @overload
    def Count() -> int: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Find_Sel(self, uuid: System.Guid) -> RenderContent: ...
    @overload
    def FirstTag() -> str: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetFilterContentByUsage() -> FilterContentByUsage: ...
    @overload
    def GetForcedVaries() -> bool: ...
    @overload
    def GetSearchPattern() -> str: ...
    @overload
    def Iterator() -> ContentCollectionIterator: ...
    @overload
    def NextTag() -> str: ...
    @overload
    def Remove(self, collection: RenderContentCollection) -> None: ...
    @overload
    def Set(self, collection: RenderContentCollection) -> None: ...
    @overload
    def SetForcedVaries(self, b: bool) -> None: ...
    @overload
    def SetSearchPattern(self, pattern: str) -> None: ...

class ContentCollectionIterator(object):
    """An iterator for the RenderContentCollection

    """
    def __init__(self, pCollection: System.IntPtr): ...
    @overload
    def DeleteThis() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def First() -> RenderContent: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def Next() -> RenderContent: ...

class RenderContent(object):
    """Base class for all RenderContent - RenderMaterial, RenderTexture and RenderEnvironment Contents have a unique type id which is the same for all instances of the same class and an instance id which is unique for each instance.They know how to provide a shader for rendering, how to read and write their state as XML and how to create their own user interfaces. There are two flavors of content in the RDK -- temporary and persistent.It is very important to understand the distinction between a temporary content instance and a persistent content instance, and the fact that a temporary instance (and all its children) can become persistent.Persistent content is registered with a document and is usually(but not always) owned by it. Temporary contents get created and deleted very often during the normal operation of the RDK.In fact, just about anything the user clicks on might result in a temporary content being created and deleted again.They are created by the content browser, the thumbnail rendering, and so on.They are 'free floating' and are owned by whomever created them.They do not appear in the modeless UI, they do not get saved in the 3dm file, and they can freely be deleted again after use. Contrast this with persistent contents which are attached to a document.They are always owned by RDK, appear in the modeless UI and get saved in the 3dm file. Pointers to persistent contents should never be stored by clients; you should only store their instance ids and look them up again using RenderContent.FromId. They can be deleted only after detaching them from the document. RenderContent::Create is the highest-level function for creating a content.It creates it, initializes it, adds it to the document and sends many events.It even records undo.You cannot call this method from just anywhere. It must only be called by 'UI code'; scripts or buttons on a dialog.It results in a persistent (usually top-level) content being attached to the document and appearing in all the RDK UI elements that display contents, like the thumbnail and tree views.If you call this method and specify a parent and child-slot name, your new content will be attached to the document-resident parent as a child and the UI will be updated accordingly. The important point is that everything is temporary while the content structure is being built. Only after the whole structure is complete will the top-level parent be attached to the document making the whole structure persistent.

    """
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id_: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: Controls.ICollapsibleSection) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Fields.Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Fields.Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertUnits(self, from_: Rhino.UnitSystem, to: Rhino.UnitSystem) -> None: ...
    @overload
    @staticmethod
    def Create(doc: Rhino.RhinoDoc, type_: System.Type) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: Rhino.RhinoDoc, type_: System.Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type_: System.Guid, flags: ShowContentChooserFlags, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type_: System.Type, flags: ShowContentChooserFlags, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: Rhino.RhinoDoc, type_: System.Type, parent: RenderContent, childSlotName: str) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: Rhino.RhinoDoc, type_: System.Guid, parent: RenderContent, childSlotName: str) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type_: System.Type, parent: RenderContent, childSlotName: str, flags: ShowContentChooserFlags, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type_: System.Guid, parent: RenderContent, childSlotName: str, flags: ShowContentChooserFlags, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DynamicIcon(self, size: Drawing.Size, usage: DynamicIconUsage) -> (bool, Drawing.Bitmap): ...
    @overload
    def Edit() -> RenderContent: ...
    @overload
    def EndChange() -> None: ...
    @overload
    def EndCreateDynamicFields() -> None: ...
    @overload
    def Factory() -> DataSources.ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay() -> RenderContent: ...
    @overload
    @staticmethod
    def FromId(document: Rhino.RhinoDoc, id_: System.Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def FromXml(xml: str, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def GenerateQuickContentPreview(c: RenderContent, width: int, height: int, psc: PreviewSceneServer, bSuppressLocalMapping: bool, reason: int) -> (Drawing.Bitmap, Commands.Result): ...
    @overload
    @staticmethod
    def GenerateQuickContentPreview(lw: LinearWorkflow, c: RenderContent, width: int, height: int, psc: PreviewSceneServer, bSuppressLocalMapping: bool, reason: int) -> (Drawing.Bitmap, Commands.Result): ...
    @overload
    @staticmethod
    def GenerateRenderContentPreview(lwf: LinearWorkflow, c: RenderContent, width: int, height: int, bSuppressLocalMapping: bool, pjs: PreviewJobSignature, pa: PreviewAppearance) -> (Drawing.Bitmap, PreviewRenderResult): ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentOwner(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> Rhino.RhinoDoc: ...
    @property
    def Fields(self) -> Fields.FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Generic.IEnumerable: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GroupId(self) -> System.Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> System.UInt32: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> System.Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetEmbeddedFilesList() -> System.System.Array[str]: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetUiHash() -> System.UInt64: ...
    @overload
    def GetUnderlyingInstances() -> (bool, RenderContentCollection): ...
    @overload
    def Icon(self, size: Drawing.Size) -> (bool, Drawing.Bitmap): ...
    @overload
    def IsCompatible(self, renderEngineId: System.Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type_: System.Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: DataSources.ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: System.Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsReference() -> bool: ...
    @overload
    @staticmethod
    def LoadFromFile(filename: str) -> RenderContent: ...
    @overload
    def MakeCopy() -> RenderContent: ...
    @overload
    def MakeGroupInstance() -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor() -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    @staticmethod
    def RegisterContent(plugin: PlugIns.PlugIn) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def RegisterContent(assembly: Reflection.Assembly, pluginId: System.Guid) -> System.System.Array[System.Type]: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> System.UInt32: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> System.UInt32: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> System.UInt32: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: System.Void): ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: System.Void): ...
    @Filename.setter
    def Filename(self, value: System.Void): ...
    @GroupId.setter
    def GroupId(self, value: System.Void): ...
    @Hidden.setter
    def Hidden(self, value: System.Void): ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @IsLocked.setter
    def IsLocked(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Notes.setter
    def Notes(self, value: System.Void): ...
    @Tags.setter
    def Tags(self, value: System.Void): ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    @staticmethod
    def ShowContentInstanceBrowser(doc: Rhino.RhinoDoc, kinds: RenderContentKind, buttons: ContentInstanceBrowserButtons) -> (bool, System.Guid): ...
    @overload
    def SmartUngroupRecursive() -> bool: ...
    @overload
    def Ungroup() -> bool: ...
    @overload
    def UngroupRecursive() -> bool: ...
    @overload
    def UseCount() -> int: ...
    @overload
    def VirtualIcon(self, size: Drawing.Size) -> (bool, Drawing.Bitmap): ...
    @property
    def ContentAdded(self): ...
    @property
    def ContentRenamed(self): ...
    @property
    def ContentDeleting(self): ...
    @property
    def ContentDeleted(self): ...
    @property
    def ContentReplacing(self): ...
    @property
    def ContentReplaced(self): ...
    @property
    def ContentChanged(self): ...
    @property
    def PreviewRendered(self): ...
    @property
    def ContentFieldChanged(self): ...
    @property
    def ContentUpdatePreview(self): ...
    @property
    def CurrentEnvironmentChanged(self): ...

class CrcRenderHashFlags(enum.Enum):
    Normal = 0
    ExcludeLinearWorkflow = 1
    ForSimulation = 1
    ExcludeLocalMapping = 2
    ExcludeUnits = 4
    Reserved2 = 8
    ExcludeDocumentEffects = 13

class RenderContentEventArgs(System.EventArgs):
    """Event args for RenderContent

    """
    @property
    def Content(self) -> RenderContent: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EnvironmentUsage(self) -> Usage: ...
    @property
    def EnvironmentUsageEx(self) -> EnvironmentUsage: ...
    @property
    def Reason(self) -> RenderContentChangeReason: ...

class RenderContentChangedEventArgs(RenderContentEventArgs):
    """EventArgs for the RenderContentChanged event

    """
    @property
    def ChangeContext(self) -> ChangeContexts: ...
    @property
    def OldContent(self) -> RenderContent: ...

class RenderContentChangeReason(enum.Enum):
    None_ = 0
    Attach = 1
    Detach = 2
    ChangeAttach = 3
    ChangeDetach = 4
    AttachUndo = 5
    DetachUndo = 6
    Open = 7
    Delete = 8

class RenderContentFieldChangedEventArgs(RenderContentChangedEventArgs):
    """EventArgs for the RenderContentFieldChanged event

    """
    @property
    def FieldName(self) -> str: ...

class PreviewRenderedEventArgs(System.EventArgs):
    """PreviewRenderedEventArgs is raised when a content preview has been rendered

    """
    def __init__(self): ...
    @property
    def Bitmap(self) -> Drawing.Bitmap: ...
    @property
    def PreviewJobSignature(self) -> PreviewJobSignature: ...
    @property
    def Quality(self) -> PreviewQuality: ...
    @Bitmap.setter
    def Bitmap(self, value: System.Void): ...
    @PreviewJobSignature.setter
    def PreviewJobSignature(self, value: System.Void): ...
    @Quality.setter
    def Quality(self, value: System.Void): ...

class RenderContentType(object):
    """Represents one of the render content types registered with Rhino.

    """
    def __init__(self, typeId: System.Guid): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def InternalName(self) -> str: ...
    @property
    def PlugInId(self) -> System.Guid: ...
    @property
    def RenderEngineId(self) -> System.Guid: ...
    @overload
    @staticmethod
    def GetAllAvailableTypes() -> System.Array[RenderContentType]: ...
    @overload
    @staticmethod
    def NewContentFromTypeId(typeId: System.Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def NewContentFromTypeId(typeId: System.Guid, doc: Rhino.RhinoDoc) -> RenderContent: ...
    @overload
    def NewRenderContent() -> RenderContent: ...

class RenderMaterialTable(object):
    """    """
    @overload
    def Add(self, c: RenderMaterial) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange() -> None: ...
    @overload
    def Find(self, id_: System.Guid) -> RenderMaterial: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> RenderMaterial: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, c: RenderMaterial) -> bool: ...

class RenderEnvironmentTable(object):
    """    """
    @overload
    def Add(self, c: RenderEnvironment) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange() -> None: ...
    @overload
    def Find(self, id_: System.Guid) -> RenderEnvironment: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> RenderEnvironment: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, c: RenderEnvironment) -> bool: ...

class RenderTextureTable(object):
    """    """
    @overload
    def Add(self, c: RenderTexture) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange() -> None: ...
    @overload
    def Find(self, id_: System.Guid) -> RenderTexture: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> RenderTexture: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, c: RenderTexture) -> bool: ...

class RenderPrimitiveType(enum.Enum):
    None_ = 0
    Mesh = 1
    Sphere = 2
    Plane = 3
    Box = 4
    Cone = 5

class DecalMapping(enum.Enum):
    Planar = 0
    Cylindrical = 1
    Spherical = 2
    UV = 3

class DecalProjection(enum.Enum):
    Forward = 0
    Backward = 1
    Both = 2
    None_ = -1

class Decal(object):
    """Represents a decal, or a picture that can be moved on an object.

    """
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    @staticmethod
    def Create(createParams: DecalCreateParams) -> Decal: ...
    @overload
    def CustomData() -> Generic.List: ...
    @overload
    def CustomData(self, renderer: System.Guid) -> Generic.List: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Dispose(self, isDisposing: bool) -> None: ...
    @property
    def CRC(self) -> int: ...
    @property
    def DecalMapping(self) -> DecalMapping: ...
    @property
    def DecalProjection(self) -> DecalProjection: ...
    @property
    def EndLatitude(self) -> float: ...
    @property
    def EndLongitude(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Mapping(self) -> DecalMapping: ...
    @property
    def MapToInside(self) -> bool: ...
    @property
    def Origin(self) -> Geometry.Point3d: ...
    @property
    def Projection(self) -> DecalProjection: ...
    @property
    def Radius(self) -> float: ...
    @property
    def StartLatitude(self) -> float: ...
    @property
    def StartLongitude(self) -> float: ...
    @property
    def TextureInstanceId(self) -> System.Guid: ...
    @property
    def Transparency(self) -> float: ...
    @property
    def VectorAcross(self) -> Geometry.Vector3d: ...
    @property
    def VectorUp(self) -> Geometry.Vector3d: ...
    @overload
    def GetTextureMapping() -> TextureMapping: ...
    @overload
    def GetUVBounds() -> (float, float, float, float): ...
    @overload
    def HorzSweep() -> (float, float): ...
    @overload
    def NonConstPointer() -> System.IntPtr: ...
    @overload
    def UVBounds() -> (float, float, float, float): ...
    @overload
    def VertSweep() -> (float, float): ...

class Decals(object):
    """Represents all the decals of an object.

    """
    @overload
    def Add(self, decal: Decal) -> System.UInt32: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, decal: Decal) -> bool: ...
    @overload
    def RemoveAllDecals() -> None: ...

class DecalCreateParams(object):
    """Used by RhinoObject.AddDecal() to create and add a decal

    """
    def __init__(self): ...
    @property
    def DecalMapping(self) -> DecalMapping: ...
    @property
    def DecalProjection(self) -> DecalProjection: ...
    @property
    def EndLatitude(self) -> float: ...
    @property
    def EndLongitude(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def MapToInside(self) -> bool: ...
    @property
    def MaxU(self) -> float: ...
    @property
    def MaxV(self) -> float: ...
    @property
    def MinU(self) -> float: ...
    @property
    def MinV(self) -> float: ...
    @property
    def Origin(self) -> Geometry.Point3d: ...
    @property
    def Radius(self) -> float: ...
    @property
    def StartLatitude(self) -> float: ...
    @property
    def StartLongitude(self) -> float: ...
    @property
    def TextureInstanceId(self) -> System.Guid: ...
    @property
    def Transparency(self) -> float: ...
    @property
    def VectorAcross(self) -> Geometry.Vector3d: ...
    @property
    def VectorUp(self) -> Geometry.Vector3d: ...
    @DecalMapping.setter
    def DecalMapping(self, value: System.Void): ...
    @DecalProjection.setter
    def DecalProjection(self, value: System.Void): ...
    @EndLatitude.setter
    def EndLatitude(self, value: System.Void): ...
    @EndLongitude.setter
    def EndLongitude(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @MapToInside.setter
    def MapToInside(self, value: System.Void): ...
    @MaxU.setter
    def MaxU(self, value: System.Void): ...
    @MaxV.setter
    def MaxV(self, value: System.Void): ...
    @MinU.setter
    def MinU(self, value: System.Void): ...
    @MinV.setter
    def MinV(self, value: System.Void): ...
    @Origin.setter
    def Origin(self, value: System.Void): ...
    @Radius.setter
    def Radius(self, value: System.Void): ...
    @StartLatitude.setter
    def StartLatitude(self, value: System.Void): ...
    @StartLongitude.setter
    def StartLongitude(self, value: System.Void): ...
    @TextureInstanceId.setter
    def TextureInstanceId(self, value: System.Void): ...
    @Transparency.setter
    def Transparency(self, value: System.Void): ...
    @VectorAcross.setter
    def VectorAcross(self, value: System.Void): ...
    @VectorUp.setter
    def VectorUp(self, value: System.Void): ...

class FreeFloatingBase(object):
    """Base class for Rhino.Render objects that are owned by the document, or can be delivered separately from other functions. In general, you cannot create these objects yourself.

    """
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...

class DocumentOrFreeFloatingBase(FreeFloatingBase):
    """Base class for Rhino.Render objects that are owned by the document, or can be delivered separately from other functions. In general, you cannot create these objects yourself.

    """
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def EndChange() -> bool: ...

class ICurrentEnvironment_Get:
    """    """
    @property
    def ForBackground(self) -> RenderEnvironment: ...
    @property
    def ForBackground_CheckMode(self) -> RenderEnvironment: ...
    @property
    def ForLighting(self) -> RenderEnvironment: ...
    @property
    def ForReflectionAndRefraction(self) -> RenderEnvironment: ...

class ICurrentEnvironment:
    """    """
    @property
    def ForBackground(self) -> RenderEnvironment: ...
    @property
    def ForBackground_CheckMode(self) -> RenderEnvironment: ...
    @property
    def ForLighting(self) -> RenderEnvironment: ...
    @property
    def ForReflectionAndRefraction(self) -> RenderEnvironment: ...
    @ForAnyUsage.setter
    def ForAnyUsage(self, value: System.Void): ...
    @ForBackground_CheckMode.setter
    def ForBackground_CheckMode(self, value: System.Void): ...
    @ForBackground.setter
    def ForBackground(self, value: System.Void): ...
    @ForLighting.setter
    def ForLighting(self, value: System.Void): ...
    @ForReflectionAndRefraction.setter
    def ForReflectionAndRefraction(self, value: System.Void): ...

class RenderEnvironment(RenderContent):
    """    """
    @property
    def CurrentEnvironment(self) -> RenderEnvironment: ...
    @property
    def TextureChildSlotName(self) -> str: ...
    @overload
    @staticmethod
    def NewBasicEnvironment(environment: SimulatedEnvironment) -> RenderEnvironment: ...
    @overload
    @staticmethod
    def NewBasicEnvironment(environment: SimulatedEnvironment, doc: Rhino.RhinoDoc) -> RenderEnvironment: ...
    @CurrentEnvironment.setter
    def CurrentEnvironment(self, value: System.Void): ...
    @overload
    def SimulateEnvironment(self, isForDataOnly: bool) -> SimulatedEnvironment: ...
    @overload
    def SimulateEnvironment(self, isForDataOnly: bool) -> (SimulatedEnvironment): ...

class Utilities(object):
    """    """
    @overload
    @staticmethod
    def ChangeContentType(oldContent: RenderContent, newType: System.Guid, harvestParameters: bool) -> RenderContent: ...
    @overload
    @staticmethod
    def FindFile(doc: Rhino.RhinoDoc, fullPathToFile: str) -> str: ...
    @overload
    @staticmethod
    def FindFile(doc: Rhino.RhinoDoc, fullPathToFile: str, unpackFromBitmapTableIfNecessary: bool) -> str: ...
    @property
    def DefaultRenderPlugInId(self) -> System.Guid: ...
    @property
    def ShowIncompatibleEnvironments(self) -> bool: ...
    @property
    def ShowIncompatibleMaterials(self) -> bool: ...
    @property
    def ShowIncompatibleTextures(self) -> bool: ...
    @overload
    @staticmethod
    def GetUnpackedFilesCacheFolder(doc: Rhino.RhinoDoc, create: bool) -> str: ...
    @overload
    @staticmethod
    def IsCachedTextureFileInUse(textureFileName: str) -> bool: ...
    @overload
    @staticmethod
    def LoadPersistentRenderContentFromFile(docSerialNumber: System.UInt32, filename: str) -> RenderContent: ...
    @overload
    @staticmethod
    def MoveWindow(hwnd: System.IntPtr, rect: Drawing.Rectangle, bRepaint: bool, bRepaintNC: bool) -> None: ...
    @overload
    @staticmethod
    def PromptForSaveImageFileParameters(filename: str) -> (str, int, int, int): ...
    @overload
    @staticmethod
    def SafeFrameEnabled(doc: Rhino.RhinoDoc) -> bool: ...
    @ShowIncompatibleEnvironments.setter
    def ShowIncompatibleEnvironments(self, value: System.Void): ...
    @ShowIncompatibleMaterials.setter
    def ShowIncompatibleMaterials(self, value: System.Void): ...
    @ShowIncompatibleTextures.setter
    def ShowIncompatibleTextures(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetDefaultRenderPlugIn(pluginId: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def ShowContentChooser(defaultType: System.Guid, defaultInstanceId: System.Guid, kinds: RenderContentKind, flags: ShowContentChooserFlags, doc: Rhino.RhinoDoc) -> (ShowContentChooserResults, System.Guid): ...
    @overload
    @staticmethod
    def ShowContentChooser(doc: Rhino.RhinoDoc, defaultType: System.Guid, defaultInstanceId: System.Guid, kinds: RenderContentKind, flags: ContentChooserFlags, presetCategory: str, categories: Generic.IEnumerable, types: Generic.IEnumerable) -> (ShowContentChooserResults, System.System.Array[System.Guid]): ...
    @overload
    @staticmethod
    def ShowContentChooser(doc: Rhino.RhinoDoc, defaultType: System.Guid, defaultInstanceId: System.Guid, kinds: RenderContentKind, flags: ShowContentChooserFlags, presetCategory: str, categories: Generic.IEnumerable, types: Generic.IEnumerable) -> (ShowContentChooserResults, System.System.Array[System.Guid]): ...
    @overload
    @staticmethod
    def ShowIORMenu(hwnd: System.IntPtr, pt: Drawing.Point) -> (bool, float, str): ...

class LightManagerSupportClient(object):
    """    """
    def __init__(self, doc_uuid: System.UInt32): ...
    @overload
    def DeleteLight(self, light: Geometry.Light) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def GetLightFromId(self, uuid: System.Guid) -> Geometry.Light: ...
    @overload
    def GetLights() -> LightArray: ...
    @overload
    def GetLightSolo(self, light: Geometry.Light) -> bool: ...
    @overload
    def GroupLights(self, lights: LightArray) -> None: ...
    @overload
    def LightDescription(self, light: Geometry.Light) -> str: ...
    @overload
    def LightsInSoloStorage() -> int: ...
    @overload
    def ModifyLight(self, light: Geometry.Light) -> None: ...
    @overload
    def ObjectFromLight(self, light: Geometry.Light) -> DocObjects.RhinoObject: ...
    @overload
    def OnEditLight(self, lights: LightArray) -> None: ...
    @overload
    def SetLightSolo(self, light: Geometry.Light, bSolo: bool) -> bool: ...
    @overload
    def UnGroup(self, lights: LightArray) -> None: ...

class LightArray(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pLightArray: System.IntPtr): ...
    @overload
    def Append(self, light: Geometry.Light) -> None: ...
    @overload
    def Count() -> int: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def ElementAt(self, index: int) -> Geometry.Light: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...

class LightMangerSupportCustomEvent(enum.Enum):
    light_added = 0
    light_deleted = 1
    light_undeleted = 2
    light_modified = 3
    light_sorted = 4

class LightManagerSupport(object):
    """Base class for implementing custom light managers in .NET

    """
    @overload
    def DeleteLight(self, doc: Rhino.RhinoDoc, light: Geometry.Light, bUndelete: bool) -> bool: ...
    @overload
    def GetLights(self, doc: Rhino.RhinoDoc) -> (LightArray): ...
    @overload
    def GetLightSolo(self, doc: Rhino.RhinoDoc, uuid_light: System.Guid) -> bool: ...
    @overload
    def GroupLights(self, doc: Rhino.RhinoDoc) -> (LightArray): ...
    @overload
    def LightDescription(self, doc: Rhino.RhinoDoc) -> (str, Geometry.Light): ...
    @overload
    def LightFromId(self, doc: Rhino.RhinoDoc, uuid: System.Guid) -> (bool, Geometry.Light): ...
    @overload
    def LightsInSoloStorage(self, doc: Rhino.RhinoDoc) -> int: ...
    @overload
    def ModifyLight(self, doc: Rhino.RhinoDoc, light: Geometry.Light) -> None: ...
    @overload
    def ObjectSerialNumberFromLight(self, doc: Rhino.RhinoDoc) -> (int, Geometry.Light): ...
    @overload
    def OnCustomLightEvent(self, doc: Rhino.RhinoDoc, le: LightMangerSupportCustomEvent) -> (Geometry.Light): ...
    @overload
    def OnEditLight(self, doc: Rhino.RhinoDoc) -> (bool, LightArray): ...
    @overload
    def PluginId() -> System.Guid: ...
    @overload
    @staticmethod
    def RegisterLightManager(plugin: PlugIns.PlugIn) -> None: ...
    @overload
    @staticmethod
    def RegisterProviders(assembly: Reflection.Assembly, pluginId: System.Guid) -> None: ...
    @overload
    def RenderEngineId() -> System.Guid: ...
    @overload
    def SetLightSolo(self, doc: Rhino.RhinoDoc, uuid_light: System.Guid, bSolo: bool) -> bool: ...
    @overload
    def UnGroup(self, doc: Rhino.RhinoDoc) -> (LightArray): ...

class LinearWorkflow(DocumentOrFreeFloatingBase):
    """This is the interface to linear workflow settings.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, src: LinearWorkflow): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Hash(self) -> System.UInt32: ...
    @property
    def PostProcessFrameBuffer(self) -> bool: ...
    @property
    def PostProcessGamma(self) -> System.Single: ...
    @property
    def PostProcessGammaOn(self) -> bool: ...
    @property
    def PostProcessGammaReciprocal(self) -> System.Single: ...
    @property
    def PreProcessColors(self) -> bool: ...
    @property
    def PreProcessGamma(self) -> System.Single: ...
    @property
    def PreProcessTextures(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @PostProcessFrameBuffer.setter
    def PostProcessFrameBuffer(self, value: System.Void): ...
    @PostProcessGamma.setter
    def PostProcessGamma(self, value: System.Void): ...
    @PostProcessGammaOn.setter
    def PostProcessGammaOn(self, value: System.Void): ...
    @PreProcessColors.setter
    def PreProcessColors(self, value: System.Void): ...
    @PreProcessGamma.setter
    def PreProcessGamma(self, value: System.Void): ...
    @PreProcessTextures.setter
    def PreProcessTextures(self, value: System.Void): ...

class TexturedValue(object):
    """Generic class to help holding on to related values. This can be used to get data from textured content fields with the
HandleTexturedValue
function.

    TexturedValue[T]
    """
    def __init__(self, name: str, value: T, on: bool, amount: System.Single): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> T: ...
    @property
    def On(self) -> bool: ...
    @property
    def Amount(self) -> System.Single: ...
    @property
    def Texture(self) -> RenderTexture: ...

class TexturedColor(TexturedValue):
    """Color4f specialization of TexturedValue.

    """
    def __init__(self, name: str, value: Display.Color4f, on: bool, amount: System.Single): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Display.Color4f: ...
    @property
    def On(self) -> bool: ...
    @property
    def Amount(self) -> System.Single: ...
    @property
    def Texture(self) -> RenderTexture: ...

class TexturedFloat(TexturedValue):
    """float specialization of TexturedValue.

    """
    def __init__(self, name: str, value: System.Single, on: bool, amount: System.Single): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> System.Single: ...
    @property
    def On(self) -> bool: ...
    @property
    def Amount(self) -> System.Single: ...
    @property
    def Texture(self) -> RenderTexture: ...

class RenderMaterial(RenderContent):
    """    """
    @overload
    def AssignTo(self, or_: DocObjects.ObjRef) -> bool: ...
    @overload
    def AssignTo(self, objrefs: Generic.IEnumerable, sfc: AssignToSubFaceChoices, bc: AssignToBlockChoices, bInteractive: bool) -> bool: ...
    @overload
    def ConvertToPhysicallyBased(self, tg: TextureGeneration) -> DocObjects.PhysicallyBasedMaterial: ...
    @overload
    @staticmethod
    def CreateBasicMaterial(material: DocObjects.Material, doc: Rhino.RhinoDoc) -> RenderMaterial: ...
    @overload
    @staticmethod
    def CreateImportedMaterial(material: DocObjects.Material, doc: Rhino.RhinoDoc, reference: bool) -> RenderMaterial: ...
    @overload
    @staticmethod
    def FromMaterial(material: DocObjects.Material, doc: Rhino.RhinoDoc) -> RenderMaterial: ...
    @property
    def DefaultPreviewBackgroundType(self) -> PreviewBackgroundType: ...
    @property
    def DefaultPreviewGeometryType(self) -> PreviewGeometryType: ...
    @property
    def DefaultPreviewSize(self) -> float: ...
    @property
    def GemMaterialGuid(self) -> System.Guid: ...
    @property
    def GlassMaterialGuid(self) -> System.Guid: ...
    @property
    def MetalMaterialGuid(self) -> System.Guid: ...
    @property
    def PaintMaterialGuid(self) -> System.Guid: ...
    @property
    def PictureMaterialGuid(self) -> System.Guid: ...
    @property
    def PlasterMaterialGuid(self) -> System.Guid: ...
    @property
    def PlasticMaterialGuid(self) -> System.Guid: ...
    @property
    def SmellsLikeGem(self) -> bool: ...
    @property
    def SmellsLikeGlass(self) -> bool: ...
    @property
    def SmellsLikeMetal(self) -> bool: ...
    @property
    def SmellsLikePaint(self) -> bool: ...
    @property
    def SmellsLikePlaster(self) -> bool: ...
    @property
    def SmellsLikePlastic(self) -> bool: ...
    @property
    def SmellsLikeTexturedGem(self) -> bool: ...
    @property
    def SmellsLikeTexturedGlass(self) -> bool: ...
    @property
    def SmellsLikeTexturedMetal(self) -> bool: ...
    @property
    def SmellsLikeTexturedPaint(self) -> bool: ...
    @property
    def SmellsLikeTexturedPlaster(self) -> bool: ...
    @property
    def SmellsLikeTexturedPlastic(self) -> bool: ...
    @overload
    def GetTextureAmountFromUsage(self, slot: StandardChildSlots) -> float: ...
    @overload
    def GetTextureFromUsage(self, slot: StandardChildSlots) -> RenderTexture: ...
    @overload
    def GetTextureOnFromUsage(self, slot: StandardChildSlots) -> bool: ...
    @overload
    def HandleTexturedValue(self, slotname: str, tc: TexturedValue) -> bool: ...
    @overload
    @staticmethod
    def ImportMaterialAndAssignToLayers(doc: Rhino.RhinoDoc, file: str, layer_indices: Generic.IEnumerable) -> bool: ...
    @DefaultPreviewBackgroundType.setter
    def DefaultPreviewBackgroundType(self, value: System.Void): ...
    @DefaultPreviewGeometryType.setter
    def DefaultPreviewGeometryType(self, value: System.Void): ...
    @DefaultPreviewSize.setter
    def DefaultPreviewSize(self, value: System.Void): ...
    @overload
    def SimulateMaterial(self, tg: TextureGeneration) -> (DocObjects.Material): ...
    @overload
    @staticmethod
    def SlotFromTextureType(tt: DocObjects.TextureType) -> StandardChildSlots: ...
    @overload
    def TextureChildSlotName(self, slot: StandardChildSlots) -> str: ...
    @overload
    @staticmethod
    def TextureTypeFromSlot(slot: StandardChildSlots) -> DocObjects.TextureType: ...
    @overload
    def ToMaterial(self, tg: TextureGeneration) -> DocObjects.Material: ...

class ComponentOrders(enum.Enum):
    Irrelevant = 0
    RGBA = 1
    ARGB = 2
    RGB = 3
    XYZ = 3
    BGR = 4
    ZYX = 4
    ABGR = 5
    BGRA = 6

class PreviewJobSignature(object):
    """Preview Job Signature is a specific identifier for a specific rendered preview

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, intPtr: System.IntPtr): ...
    @overload
    def __init__(self, width: int, height: int, sig: System.UInt32): ...
    @overload
    def Compare(self, pjs: PreviewJobSignature) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def ImageHeight() -> int: ...
    @overload
    def ImageWidth() -> int: ...

class IRhRdkPreviewSceneServer_eRotationType(enum.Enum):
    Camera = 0
    Object = 1

class PreviewAppearance(object):
    """PreviewAppearance class

    """
    def __init__(self, pRenderContent: System.IntPtr): ...
    @overload
    def Background() -> PreviewBackground: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def FromMetaData(self, md: DataSources.MetaData) -> None: ...
    @overload
    def Geometry() -> PreviewGeometry: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @property
    def MetaData(self) -> DataSources.MetaData: ...
    @property
    def Scale(self) -> float: ...
    @property
    def SceneScale(self) -> float: ...
    @overload
    def Lighting() -> PreviewLighting: ...
    @overload
    def RotationType() -> IRhRdkPreviewSceneServer_eRotationType: ...
    @overload
    def RotationX() -> float: ...
    @overload
    def RotationY() -> float: ...
    @Scale.setter
    def Scale(self, value: System.Void): ...
    @overload
    def SetRotationType(self, type_: IRhRdkPreviewSceneServer_eRotationType) -> None: ...
    @overload
    def SetRotationX(self, d: float) -> None: ...
    @overload
    def SetRotationY(self, d: float) -> None: ...
    @overload
    def ToMetaData() -> None: ...
    @overload
    def ToMetaData(self, mdp: MetaDataProxy) -> None: ...

class MetaDataProxy(object):
    """ProxyClass for MetaData

    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetContentInstanceId(self, uuid: System.Guid) -> None: ...

class PreviewBackground(object):
    """PreviewBackGround takes care of construction and destruction of PreviewLight

    """
    def __init__(self, pPreviewBackground: System.IntPtr): ...
    @overload
    def ElementKind() -> str: ...
    @overload
    def EnvironmentInstanceId() -> System.Guid: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetEnvironmentInstanceId(self, guid: System.Guid) -> None: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: System.IntPtr, guid: System.Guid) -> None: ...

class PreviewGeometry(object):
    """PreviewAppearance takes care of construction and destruction of PreviewGeometry

    """
    def __init__(self, pPreviewGeometry: System.IntPtr): ...
    @overload
    def ElementKind() -> str: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: System.IntPtr, pRenderContent: System.IntPtr, bCopy: bool) -> None: ...

class PreviewLighting(object):
    """PreviewAppearance takes care of construction and destruction of PreviewLight

    """
    def __init__(self, pPreviewLighting: System.IntPtr): ...
    @overload
    def ElementKind() -> str: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: System.IntPtr) -> None: ...

class PreviewSceneQuality(enum.Enum):
    None_ = 0
    RealtimeQuick = 1
    Low = 1
    RefineFirstPass = 1
    RefineSecondPass = 2
    Medium = 2
    IntermediateProgressive = 3
    RefineThirdPass = 4
    Full = 4

class CreatePreviewReason(enum.Enum):
    ContentChanged = 0
    ViewChanged = 1
    RefreshDisplay = 2
    UpdateBitmap = 3
    Other = 99

class CreatePreviewEventArgs(System.EventArgs):
    """Used in RenderPlugIn virtual CreatePreview function

    """
    @property
    def Cancel(self) -> bool: ...
    @property
    def ContentKind(self) -> RenderContentKind: ...
    @property
    def ContentTypeId(self) -> System.Guid: ...
    @property
    def Environment(self) -> RenderEnvironment: ...
    @property
    def Id(self) -> int: ...
    @property
    def Lights(self) -> Generic.List: ...
    @property
    def Objects(self) -> Generic.List: ...
    @property
    def PreviewContent(self) -> RenderContent: ...
    @property
    def PreviewImage(self) -> Drawing.Bitmap: ...
    @property
    def PreviewImageSize(self) -> Drawing.Size: ...
    @property
    def PreviewNotifier(self) -> PlugIns.PreviewNotification: ...
    @property
    def Quality(self) -> PreviewSceneQuality: ...
    @property
    def Reason(self) -> CreatePreviewReason: ...
    @property
    def Viewport(self) -> DocObjects.ViewportInfo: ...
    @PreviewImage.setter
    def PreviewImage(self, value: System.Void): ...
    @overload
    def SkipInitialisation() -> None: ...

class CreateTexture2dPreviewEventArgs(System.EventArgs):
    """    """
    @property
    def PreviewImage(self) -> Drawing.Bitmap: ...
    @property
    def PreviewImageSize(self) -> Drawing.Size: ...
    @PreviewImage.setter
    def PreviewImage(self, value: System.Void): ...

class SceneServerDataUsage(enum.Enum):
    Synchronous = 0
    Asynchronous = 1

class SceneServerData(object):
    """The Scene Server Data used by the PreviewSceneServer

    """
    @overload
    def __init__(self, appearance: PreviewAppearance, usage: SceneServerDataUsage): ...
    @overload
    def __init__(self, geo: PreviewGeometry, back: PreviewBackground, light: PreviewLighting, usage: SceneServerDataUsage): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...

class PreviewSceneServer(object):
    """PreviewSceneServer

    """
    def __init__(self, pPreviewSceneServer: System.IntPtr): ...
    @overload
    def ApplyRotation(self, X: float, Y: float, type_: IRhRdkPreviewSceneServer_eRotationType) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetSceneScale(self, scale: float) -> None: ...

class RenderPrimitive(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def BoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def InstanceTransform(self) -> Geometry.Transform: ...
    @property
    def PrimitiveType(self) -> RenderPrimitiveType: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RhinoObject(self) -> DocObjects.RhinoObject: ...
    @overload
    def Mesh() -> Geometry.Mesh: ...
    @overload
    def TryGetBox() -> (bool, Geometry.Box): ...
    @overload
    def TryGetCone() -> (bool, Geometry.Cone, Geometry.Plane): ...
    @overload
    def TryGetPlane() -> (bool, Geometry.PlaneSurface): ...
    @overload
    def TryGetSphere() -> (bool, Geometry.Sphere): ...

class SupportOptions(object):
    """    """
    @overload
    @staticmethod
    def AlwaysShowSunPreview() -> bool: ...
    @overload
    @staticmethod
    def AutoSaveKeepAmount() -> int: ...
    @overload
    @staticmethod
    def AutoSaveRenderings() -> bool: ...
    @overload
    @staticmethod
    def CheckSupportFilesBeforeRendering() -> bool: ...
    @overload
    @staticmethod
    def CombineEditors() -> bool: ...
    @overload
    @staticmethod
    def DarkPreviewCheckerColor() -> int: ...
    @overload
    @staticmethod
    def EnablePreviewJobLog() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_CustomPath() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_CustomPathList() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_InitialLocation() -> RdkInitialLocation: ...
    @overload
    @staticmethod
    def FileExplorer_InitialLocationCustomFolder() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_LastNavigatedLocation() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_SetCustomPath(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetCustomPathList(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetInitialLocation(l: RdkInitialLocation) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetInitialLocationCustomFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetLastNavigatedLocation(folder: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowCustom(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowDocuments(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowRenderContent(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetUseDefaultLocation(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_ShowCustom() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_ShowDocuments() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_ShowRenderContent() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_UseDefaultLocation() -> bool: ...
    @overload
    @staticmethod
    def HarvestContentParameters() -> bool: ...
    @overload
    @staticmethod
    def LabelFormatLoc() -> int: ...
    @overload
    @staticmethod
    def LabelFormatUtc() -> int: ...
    @overload
    @staticmethod
    def Libraries_CustomPath() -> str: ...
    @overload
    @staticmethod
    def Libraries_CustomPathList() -> str: ...
    @overload
    @staticmethod
    def Libraries_InitialLocation() -> RdkInitialLocation: ...
    @overload
    @staticmethod
    def Libraries_InitialLocationCustomFolder() -> str: ...
    @overload
    @staticmethod
    def Libraries_LastNavigatedLocation() -> str: ...
    @overload
    @staticmethod
    def Libraries_SetCustomPath(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetCustomPathList(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetInitialLocation(l: RdkInitialLocation) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetInitialLocationCustomFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetLastNavigatedLocation(folder: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowCustom(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowDocuments(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowRenderContent(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetUseDefaultLocation(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_ShowCustom() -> bool: ...
    @overload
    @staticmethod
    def Libraries_ShowDocuments() -> bool: ...
    @overload
    @staticmethod
    def Libraries_ShowRenderContent() -> bool: ...
    @overload
    @staticmethod
    def Libraries_UseDefaultLocation() -> bool: ...
    @overload
    @staticmethod
    def LightPreviewCheckerColor() -> int: ...
    @overload
    @staticmethod
    def MaxPreviewCacheMB() -> int: ...
    @overload
    @staticmethod
    def MaxPreviewSeconds() -> int: ...
    @overload
    @staticmethod
    def MultithreadedTextureEvaluation() -> bool: ...
    @overload
    @staticmethod
    def PreferNativeRenderer() -> bool: ...
    @overload
    @staticmethod
    def PreferredUnpackFolder() -> str: ...
    @overload
    @staticmethod
    def PreviewCustomRenderMeshes() -> bool: ...
    @overload
    @staticmethod
    def SetAlwaysShowSunPreview(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetAutoSaveKeepAmount(value: int) -> None: ...
    @overload
    @staticmethod
    def SetAutoSaveRenderings(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetCheckSupportFilesBeforeRendering(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetCombineEditors(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetHarvestContentParameters(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetLabelFormatLoc(value: int) -> None: ...
    @overload
    @staticmethod
    def SetLabelFormatUtc(value: int) -> None: ...
    @overload
    @staticmethod
    def SetMultithreadedTextureEvaluation(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetPreferNativeRenderer(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetPreferredUnpackFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def SetPreviewCustomRenderMeshes(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetShowDetailsPanel(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetSupportSharedUIs(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetUsePreviewCache(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetUseQuickInitialPreview(b: bool) -> None: ...
    @overload
    @staticmethod
    def ShowDetailsPanel() -> bool: ...
    @overload
    @staticmethod
    def SupportSharedUIs() -> bool: ...
    @overload
    @staticmethod
    def SupportSharedUIsNoCache() -> bool: ...
    @overload
    @staticmethod
    def TextureSize() -> int: ...
    @overload
    @staticmethod
    def UsePreview() -> bool: ...
    @overload
    @staticmethod
    def UsePreviewCache() -> bool: ...
    @overload
    @staticmethod
    def UseQuickInitialPreview() -> bool: ...
    @overload
    @staticmethod
    def UseRenderedPreview() -> bool: ...

class RenderPlugInList(Generic.List):
    """    """
    def __init__(self): ...

class RenderPlugInInfo(object):
    """    """
    @property
    def Name(self) -> str: ...
    @property
    def PlugInId(self) -> System.Guid: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PlugInId.setter
    def PlugInId(self, value: System.Void): ...

class RealtimeDisplayModeClassInfo(object):
    """Class information obligatory for registering RealtimeDisplayMode implementations.

    """
    @property
    def DontRegisterAttributesOnStart(self) -> bool: ...
    @property
    def DrawOpenGl(self) -> bool: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def RealtimeDisplayModeType(self) -> System.Type: ...

class RealtimeDisplayMode(object):
    """Base class for implementing real-time display modes in .NET. Pay special attention that in StartRenderer the RenderWindow.SetSize() function is called if the implementation relies on the RenderWindow to do the drawing to the viewport. If i.e. OpenGL is used to draw render results to the viewport then SetSize() doesn't have to be called, nor should the implementation then access channels on the RenderWindow, as those then don't exist. For OpenGL-based drawing the RenderWindow is used as a container for ViewInfo management, nothing else.

    """
    @overload
    def CaptureProgress() -> float: ...
    @overload
    def ComputeViewportCrc(self, view: DocObjects.ViewInfo) -> System.UInt32: ...
    @overload
    def CreateWorld(self, doc: Rhino.RhinoDoc, viewInfo: DocObjects.ViewInfo, displayPipelineAttributes: Display.DisplayPipelineAttributes) -> None: ...
    @overload
    def DrawOpenGl() -> bool: ...
    @property
    def LinearWorkflow(self) -> LinearWorkflow: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MaxPasses(self) -> int: ...
    @property
    def Paused(self) -> bool: ...
    @property
    def PostEffectsOn(self) -> bool: ...
    @overload
    @staticmethod
    def GetRealtimeViewport(realtimeViewport: System.IntPtr) -> RealtimeDisplayMode: ...
    @overload
    @staticmethod
    def GetRealtimeViewport(realtimeViewport: System.IntPtr, create: bool) -> RealtimeDisplayMode: ...
    @overload
    def GetRenderSize() -> (int, int): ...
    @overload
    def GetView() -> DocObjects.ViewInfo: ...
    @overload
    def HudAllowEditMaxPasses() -> bool: ...
    @overload
    def HudCustomStatusText() -> str: ...
    @overload
    def HudLastRenderedPass() -> int: ...
    @overload
    def HudMaximumPasses() -> int: ...
    @overload
    def HudProductName() -> str: ...
    @overload
    def HudRendererLocked() -> bool: ...
    @overload
    def HudRendererPaused() -> bool: ...
    @overload
    def HudShow() -> bool: ...
    @overload
    def HudShowControls() -> bool: ...
    @overload
    def HudShowCustomStatusText() -> bool: ...
    @overload
    def HudShowMaxPasses() -> bool: ...
    @overload
    def HudShowPasses() -> bool: ...
    @overload
    def HudStartTime() -> System.DateTime: ...
    @overload
    def IsCompleted() -> bool: ...
    @overload
    def IsFrameBufferAvailable(self, view: DocObjects.ViewInfo) -> bool: ...
    @overload
    def IsRendererStarted() -> bool: ...
    @overload
    def LastRenderedPass() -> int: ...
    @overload
    def OnRenderSizeChanged(self, width: int, height: int) -> bool: ...
    @overload
    def OpenGlVersion() -> int: ...
    @overload
    def PostConstruct() -> None: ...
    @overload
    @staticmethod
    def RegisterDisplayModes(plugin: PlugIns.PlugIn) -> System.Array[RealtimeDisplayModeClassInfo]: ...
    @overload
    @staticmethod
    def RegisterDisplayModes(assembly: Reflection.Assembly, pluginId: System.Guid) -> System.Array[RealtimeDisplayModeClassInfo]: ...
    @overload
    @staticmethod
    def RemoveRealtimeViewport(realtimeViewport: System.IntPtr) -> None: ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @MaxPasses.setter
    def MaxPasses(self, value: System.Void): ...
    @Paused.setter
    def Paused(self, value: System.Void): ...
    @PostEffectsOn.setter
    def PostEffectsOn(self, value: System.Void): ...
    @overload
    def SetUseDrawOpenGl(self, use: bool) -> None: ...
    @overload
    def SetView(self, view: DocObjects.ViewInfo) -> None: ...
    @overload
    def ShowCaptureProgress() -> bool: ...
    @overload
    def ShutdownRenderer() -> None: ...
    @overload
    def SignalRedraw() -> None: ...
    @overload
    def StartRenderer(self, w: int, h: int, doc: Rhino.RhinoDoc, view: DocObjects.ViewInfo, viewportInfo: DocObjects.ViewportInfo, forCapture: bool, renderWindow: RenderWindow) -> bool: ...
    @overload
    @staticmethod
    def UnregisterDisplayModes(plugin: PlugIns.PlugIn) -> None: ...
    @overload
    @staticmethod
    def UnregisterDisplayModes(assembly: Reflection.Assembly, pluginId: System.Guid) -> None: ...
    @overload
    def UseFastDraw() -> bool: ...
    @property
    def OnDisplayPipelineSettingsChanged(self): ...
    @property
    def OnInitFramebuffer(self): ...
    @property
    def OnDrawMiddleground(self): ...
    @property
    def HudPlayButtonPressed(self): ...
    @property
    def HudPlayButtonLeftClicked(self): ...
    @property
    def HudPlayButtonRightClicked(self): ...
    @property
    def HudPlayButtonDoubleClicked(self): ...
    @property
    def HudPauseButtonPressed(self): ...
    @property
    def HudPauseButtonLeftClicked(self): ...
    @property
    def HudPauseButtonRightClicked(self): ...
    @property
    def HudPauseButtonDoubleClicked(self): ...
    @property
    def HudLockButtonPressed(self): ...
    @property
    def HudLockButtonLeftClicked(self): ...
    @property
    def HudLockButtonRightClicked(self): ...
    @property
    def HudLockButtonDoubleClicked(self): ...
    @property
    def HudUnlockButtonPressed(self): ...
    @property
    def HudUnlockButtonLeftClicked(self): ...
    @property
    def HudUnlockButtonRightClicked(self): ...
    @property
    def HudUnlockButtonDoubleClicked(self): ...
    @property
    def HudProductNamePressed(self): ...
    @property
    def HudProductNameLeftClicked(self): ...
    @property
    def HudProductNameRightClicked(self): ...
    @property
    def HudProductNameDoubleClicked(self): ...
    @property
    def HudStatusTextPressed(self): ...
    @property
    def HudStatusTextLeftClicked(self): ...
    @property
    def HudStatusTextRightClicked(self): ...
    @property
    def HudStatusTextDoubleClicked(self): ...
    @property
    def HudTimePressed(self): ...
    @property
    def HudTimeLeftClicked(self): ...
    @property
    def HudTimeRightClicked(self): ...
    @property
    def HudTimeDoubleClicked(self): ...
    @property
    def HudPostEffectsOnButtonLeftClicked(self): ...
    @property
    def HudPostEffectsOnButtonRightClicked(self): ...
    @property
    def HudPostEffectsOnButtonDoubleClicked(self): ...
    @property
    def HudPostEffectsOffButtonLeftClicked(self): ...
    @property
    def HudPostEffectsOffButtonRightClicked(self): ...
    @property
    def HudPostEffectsOffButtonDoubleClicked(self): ...
    @property
    def MaxPassesChanged(self): ...

class PixelBuffer(object):
    """    """
    def __init__(self, bufferPointer: System.IntPtr): ...
    @property
    def Buffer(self) -> System.IntPtr: ...

class RenderWindowClonedEventArgs(System.EventArgs):
    """    """
    @property
    def NewRenderWindow(self) -> RenderWindow: ...
    @property
    def NewSessionId(self) -> System.Guid: ...
    @property
    def OldRenderWindow(self) -> RenderWindow: ...
    @property
    def OldSessionId(self) -> System.Guid: ...

class RenderWindow(object):
    """    """
    @overload
    def AddChannel(self, channel: StandardChannels) -> bool: ...
    @overload
    def AddWireframeChannel(self, doc: Rhino.RhinoDoc, viewport: DocObjects.ViewportInfo, size: Drawing.Size, region: Drawing.Rectangle) -> bool: ...
    @overload
    @staticmethod
    def ChannelId(ch: StandardChannels) -> System.Guid: ...
    @overload
    @staticmethod
    def Create(szSize: Drawing.Size) -> RenderWindow: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EndAsyncRender(self, successCode: RenderSuccessCode) -> None: ...
    @overload
    @staticmethod
    def FromSessionId(sessionId: System.Guid) -> RenderWindow: ...
    @property
    def SessionId(self) -> System.Guid: ...
    @overload
    def GetBitmap() -> Drawing.Bitmap: ...
    @overload
    def GetRequestedRenderChannels() -> System.System.Array[System.Guid]: ...
    @overload
    def GetRequestedRenderChannelsAsStandardChannels() -> System.Array[StandardChannels]: ...
    @overload
    def Invalidate() -> None: ...
    @overload
    def InvalidateArea(self, rect: Drawing.Rectangle) -> None: ...
    @overload
    def IsChannelAvailable(self, id_: System.Guid) -> bool: ...
    @overload
    def IsChannelShown(self, id_: System.Guid) -> bool: ...
    @overload
    def OpenChannel(self, id_: StandardChannels) -> Channel: ...
    @overload
    def RegisterPostEffectExecutionControl(self, ec: PostEffects.PostEffectExecutionControl) -> None: ...
    @overload
    def SaveDibAsBitmap(self, filename: str) -> None: ...
    @overload
    def SaveRenderImageAs(self, filename: str, saveAlpha: bool) -> None: ...
    @overload
    def SaveRenderImageAs(self, filename: str, renderEngineGuid: System.Guid, saveAlpha: bool) -> None: ...
    @overload
    def SetIsRendering(self, is_rendering: bool) -> None: ...
    @overload
    def SetProgress(self, text: str, progress: System.Single) -> None: ...
    @overload
    def SetRenderOutputRect(self, rect: Drawing.Rectangle) -> None: ...
    @overload
    def SetRGBAChannelColors(self, rectangle: Drawing.Rectangle, colors: Display.System.Array[Display.Color4f]) -> None: ...
    @overload
    def SetRGBAChannelColors(self, size: Drawing.Size, colors: Display.System.Array[Display.Color4f]) -> None: ...
    @overload
    def SetSize(self, size: Drawing.Size) -> None: ...
    @overload
    def SetView(self, view: DocObjects.ViewInfo) -> None: ...
    @overload
    def Size() -> Drawing.Size: ...
    @overload
    @staticmethod
    def StandardChannelForGuid(id_: System.Guid) -> StandardChannels: ...
    @property
    def Cloned(self): ...

class RenderPanelType(enum.Enum):
    RenderWindow = 0

class RenderTabs(object):
    """    """
    @overload
    @staticmethod
    def FromRenderSessionId(plugIn: PlugIns.PlugIn, tabType: System.Type, renderSessionId: System.Guid) -> object: ...
    @overload
    def RegisterTab(self, plugin: PlugIns.PlugIn, tabType: System.Type, renderEngineId: System.Guid, caption: str, icon: Drawing.Icon) -> None: ...
    @overload
    @staticmethod
    def SessionIdFromTab(tab: object) -> System.Guid: ...
    @overload
    @staticmethod
    def SidePaneUiIdFromTab(tab: object) -> System.Guid: ...

class RenderPanels(object):
    """This class is used to extend the standard Render user interface

    """
    @overload
    @staticmethod
    def FromRenderSessionId(plugIn: PlugIns.PlugIn, panelType: System.Type, renderSessionId: System.Guid) -> object: ...
    @overload
    def RegisterPanel(self, plugin: PlugIns.PlugIn, renderPanelType: RenderPanelType, panelType: System.Type, renderEngineId: System.Guid, caption: str, alwaysShow: bool, initialShow: bool) -> None: ...
    @overload
    def RegisterPanel(self, plugin: PlugIns.PlugIn, renderPanelType: RenderPanelType, panelType: System.Type, renderEngineId: System.Guid, caption: str, alwaysShow: bool, initialShow: bool, pos: ExtraSidePanePosition) -> None: ...

class RenderPipeline(object):
    """Provides facilities to a render plug-in for integrating with the standard Rhino render window. Also adds helper functions for processing a render scene. This is the suggested class to use when integrating a renderer with Rhino and maintaining a "standard" user interface that users will expect.

    """
    @overload
    def CloseWindow() -> bool: ...
    @overload
    def CommandResult() -> Commands.Result: ...
    @overload
    def Dispose() -> None: ...
    @property
    def PlugIn(self) -> PlugIns.PlugIn: ...
    @property
    def RenderSessionId(self) -> System.Guid: ...
    @overload
    def GetRenderWindow() -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, withWireframeChannel: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, withWireframeChannel: bool, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, viewportInfo: DocObjects.ViewportInfo, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, viewportInfo: DocObjects.ViewportInfo, fromRenderViewSource: bool, region: Drawing.Rectangle) -> RenderWindow: ...
    @overload
    def GetRenderWindowFromRenderViewSource(self, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    @staticmethod
    def LocalizeRenderReturnCode(rc: RenderReturnCode) -> str: ...
    @overload
    def PauseRendering() -> None: ...
    @overload
    def Render() -> RenderReturnCode: ...
    @overload
    @staticmethod
    def RenderSize(doc: Rhino.RhinoDoc) -> Drawing.Size: ...
    @overload
    @staticmethod
    def RenderSize(doc: Rhino.RhinoDoc, fromRenderSources: bool) -> Drawing.Size: ...
    @overload
    def RenderWindow(self, view: Display.RhinoView, rect: Drawing.Rectangle, inWindow: bool) -> RenderReturnCode: ...
    @overload
    def ResumeRendering() -> None: ...
    @overload
    def SaveImage(self, fileName: str, saveAlpha: bool) -> bool: ...
    @ConfirmationSeconds.setter
    def ConfirmationSeconds(self, value: System.Void): ...
    @overload
    def SetAsyncRenderContext() -> (AsyncRenderContext): ...
    @overload
    def SupportsPause() -> bool: ...

class RenderSourceView(object):
    """Helper class to get the correct view from the Render View Source settings. An instance of this class is supposed to be used with the using() {} construct.

    """
    def __init__(self, doc: Rhino.RhinoDoc): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GetViewInfo() -> DocObjects.ViewInfo: ...

class AsyncRenderContext(object):
    """\ingroup rhino_render Inherit from AsyncRenderContext to be able to create asynchronous render engine implementations through RhinoCommon.

    """
    @overload
    def Dispose() -> None: ...
    @property
    def RenderThread(self) -> Threading.Thread: ...
    @property
    def RenderWindow(self) -> RenderWindow: ...
    @overload
    def JoinRenderThread() -> None: ...
    @RenderWindow.setter
    def RenderWindow(self, value: System.Void): ...
    @overload
    def StartRenderThread(self, threadStart: Threading.ThreadStart, threadName: str) -> bool: ...
    @overload
    def StopRendering() -> None: ...

class RenderEndEventArgs(System.EventArgs):
    """Contains information about why OnRenderEnd was called

    """
    def __init__(self): ...

class SimulatedEnvironment(object):
    """    """
    def __init__(self): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> SimulatedTexture: ...
    @property
    def BackgroundProjection(self) -> BackgroundProjections: ...
    @overload
    @staticmethod
    def ProjectionFromString(projection: str) -> BackgroundProjections: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundProjection.setter
    def BackgroundProjection(self, value: System.Void): ...
    @overload
    @staticmethod
    def StringFromProjection(projection: BackgroundProjections) -> str: ...

class SafeFrame(DocumentOrFreeFloatingBase):
    """Safe frame

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc): ...
    @overload
    def __init__(self, sf: SafeFrame): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ActionFrameLinked(self) -> bool: ...
    @property
    def ActionFrameOn(self) -> bool: ...
    @property
    def ActionFrameXScale(self) -> float: ...
    @property
    def ActionFrameYScale(self) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FieldsOn(self) -> bool: ...
    @property
    def LiveFrameOn(self) -> bool: ...
    @property
    def PerspectiveOnly(self) -> bool: ...
    @property
    def TitleFrameLinked(self) -> bool: ...
    @property
    def TitleFrameOn(self) -> bool: ...
    @property
    def TitleFrameXScale(self) -> float: ...
    @property
    def TitleFrameYScale(self) -> float: ...
    @ActionFrameLinked.setter
    def ActionFrameLinked(self, value: System.Void): ...
    @ActionFrameOn.setter
    def ActionFrameOn(self, value: System.Void): ...
    @ActionFrameXScale.setter
    def ActionFrameXScale(self, value: System.Void): ...
    @ActionFrameYScale.setter
    def ActionFrameYScale(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @FieldsOn.setter
    def FieldsOn(self, value: System.Void): ...
    @LiveFrameOn.setter
    def LiveFrameOn(self, value: System.Void): ...
    @PerspectiveOnly.setter
    def PerspectiveOnly(self, value: System.Void): ...
    @TitleFrameLinked.setter
    def TitleFrameLinked(self, value: System.Void): ...
    @TitleFrameOn.setter
    def TitleFrameOn(self, value: System.Void): ...
    @TitleFrameXScale.setter
    def TitleFrameXScale(self, value: System.Void): ...
    @TitleFrameYScale.setter
    def TitleFrameYScale(self, value: System.Void): ...
    @property
    def Changed(self): ...

class TextureProjectionMode(enum.Enum):
    MappingChannel = 0
    View = 1
    Wcs = 2
    EnvironmentMap = 3
    WcsBox = 4
    Screen = 5

class ExtensionMethods(object):
    """    """
    @overload
    @staticmethod
    def ToEnvironmentMappingMode(e: EnvironmentMappingModes) -> TextureEnvironmentMappingMode: ...
    @overload
    @staticmethod
    def ToSimulatedEnvironmentMappingMode(e: TextureEnvironmentMappingMode) -> EnvironmentMappingModes: ...
    @overload
    @staticmethod
    def ToSimulatedTextureProjectionMode(e: TextureProjectionMode) -> ProjectionModes: ...
    @overload
    @staticmethod
    def ToTextureProjectionMode(e: ProjectionModes) -> TextureProjectionMode: ...

class TextureMode(enum.Enum):
    PROJECTION_MODE = 0
    MAPPING_CHANNEL_MODE = 1
    WRAP_TYPE_MODE = 2
    REPEAT_LOCKED_MODE = 3
    OFFSET_LOCKED_MODE = 4
    PREVIEW_IN_3D_MODE = 5
    REPEAT_MODE = 6
    OFFSET_MODE = 7
    ROTATION_MODE = 8
    ENVIRONMENT_MAPPING_MODE = 9
    INTERNAL_ENVIRONMENT_MAPPING_MODE = 10
    PREVIEW_LOCAL_MAPPING_MODE = 11
    DISPLAY_IN_VIEWPORT_MODE = 12
    IS_HDR_CAPABLE_MODE = 13
    IS_LINEAR_MODE = 14
    IS_IMAGE_BASED = 15
    IS_NORMALMAP = 16
    PIXELSIZE_AS_3DVECTOR = 17

class TextureWrapType(enum.Enum):
    Clamped = 0
    Repeating = 1

class TextureEnvironmentMappingMode(enum.Enum):
    Automatic = 0
    Spherical = 1
    EnvironmentMap = 2
    Box = 3
    LightProbe = 5
    Cube = 6
    VerticalCrossCube = 7
    HorizontalCrossCube = 8
    Hemispherical = 9

class TextureGeneration(enum.Enum):
    Allow = 1
    Disallow = 2

class TextureRenderHashFlags(enum.Enum):
    ExcludeLocalMapping = 1

class RenderTexture(RenderContent):
    """    """
    @overload
    def CreateEvaluator(self, evaluatorFlags: TextureEvaluatorFlags) -> TextureEvaluator: ...
    @overload
    def GenerateTextureSimulation(self, ef: TextureEvaluatorFlags) -> (bool, Drawing.Bitmap): ...
    @property
    def LocalMappingTransform(self) -> Geometry.Transform: ...
    @property
    def PixelSize2(self) -> System.Nullable: ...
    @property
    def RenderHashWithoutLocalMapping(self) -> System.UInt32: ...
    @property
    def RenderHashWithoutLocalMappingOrLinearWorkflow(self) -> System.UInt32: ...
    @overload
    def GetDisplayInViewport() -> bool: ...
    @overload
    def GetEnvironmentMappingMode() -> TextureEnvironmentMappingMode: ...
    @overload
    @staticmethod
    def GetEnvironmentMappingProjection(mode: TextureEnvironmentMappingMode, reflectionVector: Geometry.Vector3d) -> (bool, System.Single, System.Single): ...
    @overload
    def GetInternalEnvironmentMappingMode() -> TextureEnvironmentMappingMode: ...
    @overload
    def GetLocalMappingType() -> eLocalMappingType: ...
    @overload
    def GetMappingChannel() -> int: ...
    @overload
    def GetOffset() -> Geometry.Vector3d: ...
    @overload
    def GetOffsetLocked() -> bool: ...
    @overload
    def GetPreviewIn3D() -> bool: ...
    @overload
    def GetPreviewLocalMapping() -> bool: ...
    @overload
    @staticmethod
    def GetProceduralAaltonenNoiseArrayPointer() -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralAaltonenNoiseArraySize() -> System.UInt32: ...
    @overload
    @staticmethod
    def GetProceduralImpulseNoiseArrayPointer() -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralImpulseNoiseArraySize() -> System.UInt32: ...
    @overload
    @staticmethod
    def GetProceduralPerlinNoiseArrayPointer() -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralPerlinNoiseArraySize() -> System.UInt32: ...
    @overload
    @staticmethod
    def GetProceduralVcNoiseArrayPointer() -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralVcNoiseArraySize() -> System.UInt32: ...
    @overload
    def GetProjectionMode() -> TextureProjectionMode: ...
    @overload
    def GetRepeat() -> Geometry.Vector3d: ...
    @overload
    def GetRepeatLocked() -> bool: ...
    @overload
    def GetRotation() -> Geometry.Vector3d: ...
    @overload
    @staticmethod
    def GetWcsBoxMapping(worldXyz: Geometry.Point3d, normal: Geometry.Vector3d) -> Geometry.Point3d: ...
    @overload
    def GetWrapType() -> TextureWrapType: ...
    @overload
    def GraphInfo() -> (TextureGraphInfo): ...
    @overload
    def IsHdrCapable() -> bool: ...
    @overload
    def IsImageBased() -> bool: ...
    @overload
    def IsLinear() -> bool: ...
    @overload
    def IsNormalMap() -> bool: ...
    @overload
    @staticmethod
    def NewBitmapTexture(texture: SimulatedTexture, doc: Rhino.RhinoDoc) -> RenderTexture: ...
    @overload
    @staticmethod
    def NewBitmapTexture(bitmap: Drawing.Bitmap, doc: Rhino.RhinoDoc) -> RenderTexture: ...
    @overload
    def PixelSize() -> (int, int, int): ...
    @overload
    def SaveAsImage(self, FullPath: str, width: int, height: int, depth: int) -> bool: ...
    @overload
    def SetDisplayInViewport(self, value: bool) -> None: ...
    @overload
    def SetDisplayInViewport(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetGraphInfo(self, tgi: TextureGraphInfo) -> None: ...
    @overload
    def SetMappingChannel(self, value: int, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetOffset(self, value: Geometry.Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetOffsetLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetPreviewIn3D(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetProjectionMode(self, value: TextureProjectionMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeat(self, value: Geometry.Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeatLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRotation(self, value: Geometry.Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetWrapType(self, value: TextureWrapType, changeContext: ChangeContexts) -> None: ...
    @overload
    def SimulatedTexture(self, tg: TextureGeneration, size: int, obj: DocObjects.RhinoObject) -> SimulatedTexture: ...
    @overload
    def SimulateTexture(self, tg: TextureGeneration, size: int, obj: DocObjects.RhinoObject) -> (SimulatedTexture): ...

class TextureGraphInfo(object):
    """    """
    def __init__(self): ...
    @overload
    def ActiveAxis() -> Axis: ...
    @overload
    def ActiveChannel() -> Channel: ...
    @overload
    def AmountU() -> float: ...
    @overload
    def AmountV() -> float: ...
    @overload
    def AmountW() -> float: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CppPointer(self) -> System.IntPtr: ...
    @overload
    def SetActiveAxis(self, axis: Axis) -> None: ...
    @overload
    def SetActiveChannel(self, channel: Channel) -> None: ...
    @overload
    def SetAmountU(self, d: float) -> None: ...
    @overload
    def SetAmountV(self, d: float) -> None: ...
    @overload
    def SetAmountW(self, d: float) -> None: ...

class TwoColorRenderTexture(RenderTexture):
    """    """
    @property
    def Color1(self) -> Display.Color4f: ...
    @property
    def Color2(self) -> Display.Color4f: ...
    @property
    def SuperSample(self) -> bool: ...
    @property
    def SwapColors(self) -> bool: ...
    @property
    def Texture1Amount(self) -> float: ...
    @property
    def Texture1On(self) -> bool: ...
    @property
    def Texture2Amount(self) -> float: ...
    @property
    def Texture2On(self) -> bool: ...
    @Color1.setter
    def Color1(self, value: System.Void): ...
    @Color2.setter
    def Color2(self, value: System.Void): ...
    @SuperSample.setter
    def SuperSample(self, value: System.Void): ...
    @SwapColors.setter
    def SwapColors(self, value: System.Void): ...
    @Texture1Amount.setter
    def Texture1Amount(self, value: System.Void): ...
    @Texture1On.setter
    def Texture1On(self, value: System.Void): ...
    @Texture2Amount.setter
    def Texture2Amount(self, value: System.Void): ...
    @Texture2On.setter
    def Texture2On(self, value: System.Void): ...

class TextureEvaluator(object):
    """This is the interface to a lightweight object capable of evaluating texture color throughout uvw space. Derive from this class to create your own texture evaluator to return from a custom RenderTexture.

    """
    @overload
    def Dispose() -> None: ...
    @overload
    def GetColor(self, uvw: Geometry.Point3d, duvwdx: Geometry.Vector3d, duvwdy: Geometry.Vector3d) -> Display.Color4f: ...
    @overload
    def GetColor(self, uvw: Geometry.Point3d, duvwdx: Geometry.Vector3d, duvwdy: Geometry.Vector3d) -> (bool, Display.Color4f): ...
    @overload
    def Initialize() -> bool: ...
    @overload
    def WriteToByteArray2(self, width: int, height: int) -> InteropWrappers.StdVectorByte: ...
    @overload
    def WriteToFloatArray2(self, width: int, height: int) -> InteropWrappers.StdVectorFloat: ...

class TimeZone(object):
    """TimeZone

    """
    @property
    def Hours(self) -> float: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @overload
    @staticmethod
    def TimeZoneAt(index: int) -> TimeZone: ...
    @overload
    @staticmethod
    def TimeZones() -> int: ...

class ContentUndoHelper(object):
    """Content undo helper to be used with "using {}" to enclose a block of changes.

    """
    @overload
    def __init__(self, doc: Rhino.RhinoDoc): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, description: str): ...
    @overload
    def AddContent(self, content: RenderContent, parent: RenderContent) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def ModifyContent(self, content: RenderContent) -> bool: ...
    @overload
    def TweakContent(self, content: RenderContent, parameterName: str) -> bool: ...

class ContentUndoBlocker(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...

class RdkUndoRecord(object):
    """RdkUndoRecord class

    """
    def __init__(self, pUndoRecord: System.IntPtr): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def SetDescription(self, description: str) -> None: ...

class RdkUndo(object):
    """RdkUndo class, which is used to get the RdkUndoRecord

    """
    def __init__(self, pUndoRecord: System.IntPtr): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def NewUndoRecord() -> RdkUndoRecord: ...

class NamedValue(object):
    """    """
    def __init__(self, name: str, value: object): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> object: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ConvertibleExtensions(object):
    """Extension methods for IConvertible that work when an object is a Variant.

    """
    @overload
    @staticmethod
    def ToColor4f(variant: System.IConvertible) -> Display.Color4f: ...
    @overload
    @staticmethod
    def ToVector2d(variant: System.IConvertible) -> Geometry.Vector2d: ...
    @overload
    @staticmethod
    def ToVector3d(variant: System.IConvertible) -> Geometry.Vector3d: ...

class SimulatedTexture(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc): ...
    @overload
    def __init__(self, texture: DocObjects.Texture): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, texture: DocObjects.Texture): ...
    @overload
    def ConstPointer() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @property
    def BitmapSize(self) -> int: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Filtered(self) -> bool: ...
    @property
    def HasTransparentColor(self) -> bool: ...
    @property
    def LocalMappingTransform(self) -> Geometry.Transform: ...
    @property
    def MappingChannel(self) -> int: ...
    @property
    def Offset(self) -> Geometry.Vector2d: ...
    @property
    def OriginalFilename(self) -> str: ...
    @property
    def ProjectionMode(self) -> ProjectionModes: ...
    @property
    def Repeat(self) -> Geometry.Vector2d: ...
    @property
    def Repeating(self) -> bool: ...
    @property
    def Rotation(self) -> float: ...
    @property
    def TransparentColor(self) -> Display.Color4f: ...
    @property
    def TransparentColorSensitivity(self) -> float: ...
    @overload
    def MetersToUnits(self, doc: Rhino.RhinoDoc, units: float) -> float: ...
    @BitmapSize.setter
    def BitmapSize(self, value: System.Void): ...
    @Filename.setter
    def Filename(self, value: System.Void): ...
    @Filtered.setter
    def Filtered(self, value: System.Void): ...
    @HasTransparentColor.setter
    def HasTransparentColor(self, value: System.Void): ...
    @MappingChannel.setter
    def MappingChannel(self, value: System.Void): ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @ProjectionMode.setter
    def ProjectionMode(self, value: System.Void): ...
    @Repeat.setter
    def Repeat(self, value: System.Void): ...
    @Repeating.setter
    def Repeating(self, value: System.Void): ...
    @Rotation.setter
    def Rotation(self, value: System.Void): ...
    @TransparentColor.setter
    def TransparentColor(self, value: System.Void): ...
    @TransparentColorSensitivity.setter
    def TransparentColorSensitivity(self, value: System.Void): ...
    @overload
    def SetMappingChannelAndProjectionMode(self, pm: ProjectionModes, mappingChannel: int, emm: EnvironmentMappingModes) -> None: ...
    @overload
    def Texture() -> DocObjects.Texture: ...
    @overload
    def UnitsToMeters(self, doc: Rhino.RhinoDoc, units: float) -> float: ...

class AddCustomUISections(object):
    """This class contains the event to add custom ui sections when the content ui is created.

    """
    @property
    def OnAddCustomUISections(self): ...

class AddCustomUISectionsEventArgs(System.EventArgs):
    """Used as Rhino.Render Custom Events args.

    """
    @property
    def EventType(self) -> System.Guid: ...
    @property
    def ExpandableContentUI(self) -> Controls.ExpandableContentUI: ...

class UndoRedo(object):
    """This class contains the event for UndoRedoChanged that is fired from RDK .

    """
    @property
    def UndoRedoChanged(self): ...
    @property
    def UndoRedoEndedChanged(self): ...

class Sun(DocumentOrFreeFloatingBase):
    """Represents the Sun on a little portion of Earth.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AltitudeFromValues(latitude: float, longitude: float, timezoneHours: float, daylightMinutes: int, when: System.DateTime, hours: float, fast: bool) -> float: ...
    @overload
    @staticmethod
    def ColorFromAltitude(altitudeDegrees: float) -> Drawing.Color: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Accuracy(self) -> Accuracies: ...
    @property
    def Altitude(self) -> float: ...
    @property
    def Azimuth(self) -> float: ...
    @property
    def DaylightSaving(self) -> bool: ...
    @property
    def DaylightSavingMinutes(self) -> int: ...
    @property
    def DaylightSavingOn(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Hash(self) -> System.UInt32: ...
    @property
    def Intensity(self) -> float: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Light(self) -> Geometry.Light: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def ManualControl(self) -> bool: ...
    @property
    def ManualControlOn(self) -> bool: ...
    @property
    def North(self) -> float: ...
    @property
    def SkylightOn(self) -> bool: ...
    @property
    def TimeZone(self) -> float: ...
    @property
    def Vector(self) -> Geometry.Vector3d: ...
    @overload
    def GetDateTime(self, kind: System.DateTimeKind) -> System.DateTime: ...
    @overload
    @staticmethod
    def Here() -> (bool, float, float): ...
    @overload
    @staticmethod
    def JulianDay(timezoneHours: float, daylightMinutes: int, when: System.DateTime, hours: float) -> float: ...
    @Accuracy.setter
    def Accuracy(self, value: System.Void): ...
    @Altitude.setter
    def Altitude(self, value: System.Void): ...
    @Azimuth.setter
    def Azimuth(self, value: System.Void): ...
    @DaylightSaving.setter
    def DaylightSaving(self, value: System.Void): ...
    @DaylightSavingMinutes.setter
    def DaylightSavingMinutes(self, value: System.Void): ...
    @DaylightSavingOn.setter
    def DaylightSavingOn(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Intensity.setter
    def Intensity(self, value: System.Void): ...
    @Latitude.setter
    def Latitude(self, value: System.Void): ...
    @Longitude.setter
    def Longitude(self, value: System.Void): ...
    @ManualControl.setter
    def ManualControl(self, value: System.Void): ...
    @ManualControlOn.setter
    def ManualControlOn(self, value: System.Void): ...
    @North.setter
    def North(self, value: System.Void): ...
    @SkylightOn.setter
    def SkylightOn(self, value: System.Void): ...
    @TimeZone.setter
    def TimeZone(self, value: System.Void): ...
    @Vector.setter
    def Vector(self, value: System.Void): ...
    @overload
    def SetDateTime(self, time: System.DateTime, kind: System.DateTimeKind) -> None: ...
    @overload
    @staticmethod
    def SunDirection(latitude: float, longitude: float, when: System.DateTime) -> Geometry.Vector3d: ...
    @overload
    @staticmethod
    def TwilightZone() -> float: ...
    @property
    def Changed(self): ...

class Skylight(DocumentOrFreeFloatingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, src: Skylight): ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CustomEnvironment(self) -> System.Guid: ...
    @property
    def CustomEnvironmentOn(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ShadowIntensity(self) -> float: ...
    @CustomEnvironment.setter
    def CustomEnvironment(self, value: System.Void): ...
    @CustomEnvironmentOn.setter
    def CustomEnvironmentOn(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ShadowIntensity.setter
    def ShadowIntensity(self, value: System.Void): ...
    @property
    def Changed(self): ...

class ImageFileEventArgs(System.EventArgs):
    """    """
    @property
    def EllapsedTime(self) -> int: ...
    @property
    def Event(self) -> ImageFileEvent: ...
    @property
    def FileName(self) -> str: ...
    @property
    def RenderEngine(self) -> str: ...
    @property
    def RenderEngineId(self) -> System.Guid: ...
    @property
    def SessionId(self) -> System.Guid: ...

class ImageFileEvent(enum.Enum):
    Saved = 0
    Loaded = 1
    Deleted = 2

class ImageFile(object):
    """Controls interaction with RDK render image files

    """
    @property
    def Saved(self): ...
    @property
    def Loaded(self): ...
    @property
    def Deleted(self): ...

class RenderContentManager(object):
    """RenderContentManager's RestoreRenderContents method unpacks the default render contents from the from the application and places them in the User's folder. Only available on Mac at the moment.

    """
    @property
    def UserRenderContentPath(self) -> str: ...
    @overload
    @staticmethod
    def RestoreRenderContent() -> bool: ...

class Methods(enum.Enum):
    None_ = 0
    FloydSteinberg = 1
    SimpleNoise = 2

class Modes(enum.Enum):
    Automatic = 0
    Custom = 1

class RenderingSources(enum.Enum):
    ActiveViewport = 0
    SpecificViewport = 1
    NamedView = 2
    SnapShot = 3

class EnvironmentUsage(enum.Enum):
    Background = 0
    Reflection = 1
    Skylighting = 2

class EnvironmentPurpose(enum.Enum):
    Standard = 0
    ForRendering = 1

class LoadMultipleFlags(enum.Enum):
    Normal = 0
    Preload = 1

class ShowContentChooserFlags(enum.Enum):
    None_ = 0
    HideNewTab = 1
    HideExistingTab = 2
    MultipleSelection = 4

class EmbedFilesChoice(enum.Enum):
    NeverEmbed = 0
    AlwaysEmbed = 1
    AskUser = 2

class ContentInstanceBrowserButtons(enum.Enum):
    None_ = 0
    NewButton = 1
    EditButton = 2

class MatchDataResult(enum.Enum):
    None_ = 0
    Some = 1
    All = 2

class ExtraRequirementsSetContexts(enum.Enum):
    UI = 0
    Drop = 1
    Program = 2

class ChangeContexts(enum.Enum):
    UI = 0
    Drop = 1
    Program = 2
    Ignore = 3
    Tree = 4
    Undo = 5
    FieldInit = 6
    Serialize = 7
    RealTimeUI = 8
    Script = 9

class PreviewRenderResult(enum.Enum):
    Rendering = 0
    CacheOK = 1
    CacheFail = 2
    Nothing = 3

class PreviewQuality(enum.Enum):
    None_ = 0
    Low = 1
    Medium = 2
    IntermediateProgressive = 3
    Full = 4

class ContentChooserFlags(enum.Enum):
    None_ = 0
    HideNewTab = 1
    HideExistingTab = 2
    MultipleSelection = 4
    DisableImportButton = 16

class ShowContentChooserResults(enum.Enum):
    None_ = 0
    New = 1
    Copy = 2
    Instance = 3

class AssignToSubFaceChoices(enum.Enum):
    Keep = 0
    Remove = 1
    Ask = 2

class AssignToBlockChoices(enum.Enum):
    Always = 0
    Never = 1
    Ask = 2

class StandardChildSlots(enum.Enum):
    None_ = 0
    Diffuse = 100
    PbrBaseColor = 100
    Transparency = 101
    PbrOpacity = 101
    Bump = 102
    Environment = 103
    PbrSubsurface = 104
    PbrSubSurfaceScattering = 105
    PbrSubsurfaceScatteringRadius = 106
    PbrMetallic = 107
    PbrSpecular = 108
    PbrSpecularTint = 109
    PbrRoughness = 110
    PbrAnisotropic = 111
    PbrAnisotropicRotation = 112
    PbrSheen = 113
    PbrSheenTint = 114
    PbrClearcoat = 115
    PbrClearcoatRoughness = 116
    PbrOpacityIor = 117
    PbrOpacityRoughness = 118
    PbrEmission = 119
    PbrAmbientOcclusion = 120
    PbrDisplacement = 121
    PbrClearcoatBump = 122
    PbrAlpha = 123

class BasicMaterialParameterNames(object):
    """Parameter names for use in GetNamedParameter and SetNamedParameter with basic materials.

    """
    def __init__(self): ...
    @property
    def Ambient(self) -> str: ...
    @property
    def Emission(self) -> str: ...
    @property
    def FlamingoLibrary(self) -> str: ...
    @property
    def DisableLighting(self) -> str: ...
    @property
    def Diffuse(self) -> str: ...
    @property
    def Specular(self) -> str: ...
    @property
    def TransparencyColor(self) -> str: ...
    @property
    def ReflectivityColor(self) -> str: ...
    @property
    def Shine(self) -> str: ...
    @property
    def Transparency(self) -> str: ...
    @property
    def Reflectivity(self) -> str: ...
    @property
    def Ior(self) -> str: ...

class PreviewGeometryType(enum.Enum):
    Sphere = 0
    Cube = 1
    Cone = 2
    Pyramid = 3
    Torus = 4
    Plane = 5
    Scene = 7

class PreviewBackgroundType(enum.Enum):
    None_ = 1
    Checkered = 2
    Scene = 4

class SceneObject(object):
    """    """
    @property
    def Material(self) -> RenderMaterial: ...
    @property
    def Mesh(self) -> Geometry.Mesh: ...

class RdkInitialLocation(enum.Enum):
    RenderContent = 0
    LastOpenedFolder = 1
    CustomFolder = 2

class RdkTextureSize(enum.Enum):
    Size1 = 128
    Size2 = 256
    Size3 = 512
    Size4 = 1024
    Size5 = 2048

class DisplayPipelineSettingsChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, dpa: Display.DisplayPipelineAttributes): ...
    @property
    def Attributes(self) -> Display.DisplayPipelineAttributes: ...

class InitFramebufferEventArgs(System.EventArgs):
    """    """
    def __init__(self, dp: Display.DisplayPipeline): ...
    @property
    def Pipeline(self) -> Display.DisplayPipeline: ...

class DrawMiddlegroundEventArgs(System.EventArgs):
    """    """
    def __init__(self, dp: Display.DisplayPipeline): ...
    @property
    def Pipeline(self) -> Display.DisplayPipeline: ...

class HudMaxPassesChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, mp: int): ...
    @property
    def MaxPasses(self) -> int: ...

class RenderSuccessCode(enum.Enum):
    Completed = 0
    Failed = 1

class StandardChannels(enum.Enum):
    None_ = 0
    Red = 1
    Green = 2
    Blue = 4
    Alpha = 8
    RGBA = 14
    RGB = 15
    DistanceFromCamera = 16
    NormalX = 32
    NormalY = 64
    NormalZ = 128
    NormalXYZ = 240
    LuminanceRed = 256
    LuminanceGreen = 512
    LuminanceBlue = 1024
    BackgroundLuminanceRed = 4096
    BackgroundLuminanceGreen = 8192
    BackgroundLuminanceBlue = 16384
    MaterialIds = 65536
    ObjectIds = 131072
    Wireframe = 262144
    AlbedoRed = 1048576
    AlbedoGreen = 2097152
    AlbedoBlue = 4194304
    AlbedoRGB = 7340032
    WireframePointsRGBA = 8388608
    WireframeIsocurvesRGBA = 16777216
    WireframeCurvesRGBA = 33554432
    WireframeAnnotationsRGBA = 67108864

class Channel(object):
    """    """
    @overload
    def AddValue(self, x: int, y: int, value: Display.Color4f) -> None: ...
    @overload
    def Clone() -> Channel: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Height(self) -> int: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetMinMaxValues() -> (System.Single, System.Single): ...
    @overload
    def GetValue(self, x: int, y: int, componentOrder: ComponentOrders) -> (System.System.Array[System.Single]): ...
    @overload
    def GetValues(self, rectangle: Drawing.Rectangle, stride: int, componentOrder: ComponentOrders) -> (System.System.Array[System.Single]): ...
    @overload
    def PixelSize() -> int: ...
    @overload
    def SetValue(self, x: int, y: int, value: System.Single) -> None: ...
    @overload
    def SetValue(self, x: int, y: int, value: Display.Color4f) -> None: ...
    @overload
    def SetValues(self, rectangle: Drawing.Rectangle, bufferResolution: Drawing.Size, colorBuffer: PixelBuffer) -> None: ...
    @overload
    def SetValuesFlipped(self, rectangle: Drawing.Rectangle, bufferResolution: Drawing.Size, colorBuffer: PixelBuffer) -> None: ...

class ChannelGPU(object):
    """    """
    @overload
    def Clone() -> ChannelGPU: ...
    @overload
    def Close() -> None: ...
    @overload
    def CopyTo(self, channel: Channel) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def DisplayTechnology(self) -> Display.DisplayTechnology: ...
    @overload
    def Height() -> int: ...
    @overload
    def Id() -> System.Guid: ...
    @overload
    def PixelSize() -> System.UInt32: ...
    @overload
    def TextureHandleMetal() -> System.IntPtr: ...
    @overload
    def TextureHandleOpenGL() -> System.UInt32: ...
    @overload
    def Width() -> int: ...

class ImageAdjust(object):
    """Class to set image adjusting settings to a RenderWindow. This can't be directly created. Instead, one should use RenderWindow.GetAdjust() to get an ImageAdjust instance that can be modified, then passed into RenderWindow.SetAdjust() to update image adjusting settings.1

    """
    @property
    def Dither(self) -> Methods: ...
    @property
    def Gamma(self) -> System.Single: ...
    @Dither.setter
    def Dither(self, value: System.Void): ...
    @Gamma.setter
    def Gamma(self, value: System.Void): ...

class ExtraSidePanePosition(enum.Enum):
    Left = 0
    Top = 1
    Right = 2
    Bottom = 3

class RenderReturnCode(enum.Enum):
    Ok = 0
    EmptyScene = 1
    Cancel = 2
    NoActiveView = 3
    OnPreCreateWindow = 4
    NoFrameWndPointer = 5
    ErrorCreatingWindow = 6
    ErrorStartingRender = 7
    EnterModalLoop = 8
    ExitModalLoop = 9
    ExitRhino = 10
    InternalError = 11

class BackgroundProjections(enum.Enum):
    Planar = 0
    Spherical = 1
    Emap = 2
    Box = 3
    Automatic = 4
    Lightprobe = 5
    Cubemap = 6
    VerticalCrossCubemap = 7
    HorizontalCrossCubemap = 8

class TextureEvaluatorFlags(enum.Enum):
    Normal = 0
    DisableFiltering = 1
    DisableLocalMapping = 2
    DisableAdjustment = 4
    DisableProjectionChange = 8

class eLocalMappingType(enum.Enum):
    lmt_none = 0
    lmt_2D = 1
    lmt_3D = 2
    lmt_force32bit = 4294967295

class TextureGeneration(enum.Enum):
    Allow = 1
    Disallow = 2
    Skip = 3

class Axis(enum.Enum):
    kU = 0
    kV = 1
    kW = 2

class Channel(enum.Enum):
    kRed = 0
    kGrn = 1
    kBlu = 2
    kAlp = 3
    kLum = 4

class ProjectionModes(enum.Enum):
    MappingChannel = 0
    View = 1
    Wcs = 2
    Emap = 3
    WcsBox = 4
    Screen = 5

class EnvironmentMappingModes(enum.Enum):
    Automatic = 0
    Spherical = 1
    Emap = 2
    Box = 3
    Lightprobe = 5
    Cubemap = 6
    VerticalCrossCubemap = 7
    HorizontalCrossCubemap = 8
    Hemispherical = 9

class Accuracies(enum.Enum):
    Minimum = 0
    Maximum = 1

# endregion
