"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["FieldDictionary", "Field", "StringField", "NullField", "BoolField", "IntField", "FloatField", "DoubleField", "Color4fField", "Vector2dField", "Vector3dField", "Point2dField", "Point3dField", "Point4dField", "GuidField", "TransformField", "DateTimeField", "ByteArrayField"]
# endregion

# region: Imports
from Rhino import Display
from Rhino import Geometry
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class FieldDictionary(object):
    """Dictionary containing RenderContent data fields. Add fields to this dictionary in your derived RenderContent classes constructor. Get field values using the TryGet[data type]() methods and set them using the Set() method.

    """
    @overload
    def Add(self, key: str, value: Drawing.Color) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: float) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point2d) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: System.Single) -> FloatField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point3d) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point4d) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: int) -> IntField: ...
    @overload
    def Add(self, key: str, value: Display.Color4f) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: System.Guid) -> GuidField: ...
    @overload
    def Add(self, key: str, value: bool) -> BoolField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector3d) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: System.System.Array[System.Byte]) -> ByteArrayField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector2d) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: System.DateTime) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Geometry.Transform) -> TransformField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def Add(self, key: str, prompt: str, sectionId: int) -> NullField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point2d, prompt: str) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: System.Single, prompt: str) -> FloatField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Drawing.Color, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: System.DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: Display.Color4f, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Geometry.Transform, prompt: str) -> TransformField: ...
    @overload
    def Add(self, key: str, value: System.Guid, prompt: str) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point3d, prompt: str) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point4d, prompt: str) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point3d, prompt: str, sectionId: int) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point2d, prompt: str, sectionId: int) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Point4d, prompt: str, sectionId: int) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Geometry.Transform, prompt: str, sectionId: int) -> TransformField: ...
    @overload
    def Add(self, key: str, value: System.DateTime, prompt: str, sectionId: int) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector3d, prompt: str, sectionId: int) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: System.Guid, prompt: str, sectionId: int) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Geometry.Vector2d, prompt: str, sectionId: int) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: Display.Color4f, prompt: str, sectionId: int) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: System.Single, prompt: str, sectionId: int) -> FloatField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str, sectionId: int) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str, sectionId: int) -> BoolField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str, sectionId: int) -> IntField: ...
    @overload
    def AddFilename(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, prompt: str) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point2d, prompt: str) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: System.Guid, prompt: str) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: System.Single, prompt: str) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Transform, prompt: str) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Drawing.Color, prompt: str) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point3d, prompt: str) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: System.DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point4d, prompt: str) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point4d, prompt: str, treatAsLinear: bool) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Transform, prompt: str, treatAsLinear: bool) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: System.DateTime, prompt: str, treatAsLinear: bool) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: System.Guid, prompt: str, treatAsLinear: bool) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Display.Color4f, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point3d, prompt: str, treatAsLinear: bool) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool, sectionId: int) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: Drawing.Color, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point2d, prompt: str, treatAsLinear: bool) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector2d, prompt: str, treatAsLinear: bool) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: System.Single, prompt: str, treatAsLinear: bool) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector3d, prompt: str, treatAsLinear: bool) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: Display.Color4f, prompt: str, treatAsLinear: bool, sectionId: int) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: System.DateTime, prompt: str, treatAsLinear: bool, sectionId: int) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Transform, prompt: str, treatAsLinear: bool, sectionId: int) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: System.Single, prompt: str, treatAsLinear: bool, sectionId: int) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: System.Guid, prompt: str, treatAsLinear: bool, sectionId: int) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool, sectionId: int) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool, sectionId: int) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Vector3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: Geometry.Point4d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point4dField: ...
    @overload
    def ContainsField(self, fieldName: str) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetField(self, fieldName: str) -> Field: ...
    @overload
    def RemoveField(self, fieldName: str) -> None: ...
    @overload
    def Set(self, key: str, value: int) -> None: ...
    @overload
    def Set(self, key: str, value: str) -> None: ...
    @overload
    def Set(self, key: str, value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Set(self, key: str, value: System.DateTime) -> None: ...
    @overload
    def Set(self, key: str, value: bool) -> None: ...
    @overload
    def Set(self, key: str, value: System.Guid) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Point4d) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Point3d) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Point2d) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Vector3d) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Transform) -> None: ...
    @overload
    def Set(self, key: str, value: Drawing.Color) -> None: ...
    @overload
    def Set(self, key: str, value: Geometry.Vector2d) -> None: ...
    @overload
    def Set(self, key: str, value: System.Single) -> None: ...
    @overload
    def Set(self, key: str, value: Display.Color4f) -> None: ...
    @overload
    def Set(self, key: str, value: float) -> None: ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Point4d): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, System.System.Array[System.Byte]): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, System.DateTime): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Transform): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, System.Guid): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Point3d): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Drawing.Color): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Vector3d): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Vector2d): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Display.Color4f): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, System.Single): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, float): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, int): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, bool): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, T): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Geometry.Point2d): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, str): ...

class Field(object):
    """Generic data fields used to add publicly accessible properties to RenderContent.FieldDictionary. These should be created by calling a FieldDictaionary.Add() method on a Render content object. These are allocated after the RenderContent object's C++ object is created and added to the underlying C++ objects content dictionary, who ever allocates a field is responsible for deleting it so these objects clean up the C++ pointers when they are disposed of.

    """
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @overload
    def GetValue() -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: System.Void): ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: System.Void): ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: System.Void): ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: System.Void): ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class StringField(Field):
    """String field value class

    """
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class NullField(Field):
    """Null field value class

    """
    @property
    def Value(self) -> bool: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class BoolField(Field):
    """bool field value class

    """
    @property
    def Value(self) -> bool: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class IntField(Field):
    """Integer field value class

    """
    @property
    def Value(self) -> int: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class FloatField(Field):
    """float field value class

    """
    @property
    def Value(self) -> System.Single: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class DoubleField(Field):
    """double field value class

    """
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Color4fField(Field):
    """Color4f field value class

    """
    @property
    def SystemColorValue(self) -> Drawing.Color: ...
    @property
    def Value(self) -> Display.Color4f: ...
    @SystemColorValue.setter
    def SystemColorValue(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Vector2dField(Field):
    """Vector2d field value class

    """
    @property
    def Value(self) -> Geometry.Vector2d: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Vector3dField(Field):
    """Vector3d field value class

    """
    @property
    def Value(self) -> Geometry.Vector3d: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Point2dField(Field):
    """Point2d field value class

    """
    @property
    def Value(self) -> Geometry.Point2d: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Point3dField(Field):
    """Point3d field value class

    """
    @property
    def Value(self) -> Geometry.Point3d: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class Point4dField(Field):
    """Point4d field value class

    """
    @property
    def Value(self) -> Geometry.Point4d: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class GuidField(Field):
    """Guid field value class

    """
    @property
    def Value(self) -> System.Guid: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class TransformField(Field):
    """Transform field value class

    """
    @property
    def Value(self) -> Geometry.Transform: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class DateTimeField(Field):
    """DateTime field value class

    """
    @property
    def Value(self) -> System.DateTime: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

class ByteArrayField(Field):
    """ByteArray field value class

    """
    @property
    def Value(self) -> System.System.Array[System.Byte]: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ValueAsObject() -> object: ...

# endregion
