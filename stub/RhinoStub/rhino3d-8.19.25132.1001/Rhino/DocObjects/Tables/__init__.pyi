"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BitmapTable", "DimStyleTableEventType", "DimStyleTableEventArgs", "DimStyleTable", "ModifyType", "RhinoDocCommonTable", "RuntimeDocumentDataTable", "ViewTable", "ObjectTable", "StringTable", "NamedConstructionPlaneTable", "NamedViewTable", "NamedPositionTable", "SnapshotTable", "RestoreLayerProperties", "NamedLayerStateTable", "FontTable", "GroupTableEventType", "GroupTableEventArgs", "GroupTable", "HatchPatternTableEventType", "HatchPatternTableEventArgs", "HatchPatternTable", "InstanceDefinitionTableEventType", "InstanceDefinitionTableEventArgs", "InstanceDefinitionTable", "LayerTableEventType", "LayerTableEventArgs", "LayerTable", "LightTableEventType", "LightTableEventArgs", "LightTable", "LinetypeTableEventType", "LinetypeTableEventArgs", "LinetypeTable", "MaterialTableEventType", "MaterialTableEventArgs", "MaterialTable", "LayerType"]
# endregion

# region: Imports
from Rhino import Collections
from Rhino import Display
from Rhino import DocObjects
from Rhino import FileIO
from Rhino import Geometry
from Rhino import Render
from Rhino.DocObjects import Custom
from Rhino.Input import Custom
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Rhino
import System
# endregion

# region: RhinoCommon, Version=8.19.25132.1001

class BitmapTable(RhinoDocCommonTable):
    """Stores the list of bitmaps in a Rhino document.

    """
    @overload
    def AddBitmap(self, bitmapFilename: str, replaceExisting: bool) -> int: ...
    @overload
    def Delete(self, item: DocObjects.BitmapEntry) -> bool: ...
    @overload
    def DeleteBitmap(self, bitmapFilename: str) -> bool: ...
    @overload
    def ExportToFile(self, index: int, path: str) -> bool: ...
    @overload
    def ExportToFiles(self, directoryPath: str, overwrite: int) -> int: ...
    @overload
    def Find(self, name: str, createFile: bool) -> (DocObjects.BitmapEntry, str): ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.BitmapEntry: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Item(self) -> DocObjects.BitmapEntry: ...

class DimStyleTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5

class DimStyleTableEventArgs(System.EventArgs):
    """    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> DimStyleTableEventType: ...
    @property
    def Index(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.DimensionStyle: ...
    @property
    def OldState(self) -> DocObjects.DimensionStyle: ...

class DimStyleTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add(self, name: str) -> int: ...
    @overload
    def Add(self, dimstyle: DocObjects.DimensionStyle, reference: bool) -> int: ...
    @overload
    def Add(self, name: str, reference: bool) -> int: ...
    @overload
    def Delete(self, item: DocObjects.DimensionStyle) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Find(self, styleId: System.Guid, ignoreDeleted: bool) -> DocObjects.DimensionStyle: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.DimensionStyle: ...
    @overload
    def FindName(self, name: str) -> DocObjects.DimensionStyle: ...
    @overload
    def FindRoot(self, styleId: System.Guid, ignoreDeleted: bool) -> DocObjects.DimensionStyle: ...
    @property
    def BuiltInStyles(self) -> DocObjects.System.Array[DocObjects.DimensionStyle]: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Current(self) -> DocObjects.DimensionStyle: ...
    @property
    def CurrentDimensionStyle(self) -> DocObjects.DimensionStyle: ...
    @property
    def CurrentId(self) -> System.Guid: ...
    @property
    def CurrentIndex(self) -> int: ...
    @property
    def Item(self) -> DocObjects.DimensionStyle: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetUnusedStyleName() -> str: ...
    @overload
    def GetUnusedStyleName(self, rootName: str) -> str: ...
    @overload
    def Modify(self, dimstyle: DocObjects.DimensionStyle, annotation: Geometry.AnnotationBase) -> ModifyType: ...
    @overload
    def Modify(self, newSettings: DocObjects.DimensionStyle, dimstyleId: System.Guid, quiet: bool) -> bool: ...
    @overload
    def Modify(self, newSettings: DocObjects.DimensionStyle, dimstyleIndex: int, quiet: bool) -> bool: ...
    @overload
    def SetCurrent(self, index: int, quiet: bool) -> bool: ...

class ModifyType(enum.Enum):
    Modify = 0
    Override = 1
    NotSaved = 2

class RhinoDocCommonTable(FileIO.CommonComponentTable):
    """    RhinoDocCommonTable[T]
    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...

class RuntimeDocumentDataTable(Generic.Dictionary):
    """Collection of document runtime data. This is a good place to put non-serialized, per document data.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @overload
    def GetValue(self, key: object, newT: System.Func) -> T: ...
    @overload
    def TryGetValue(self, key: object) -> T: ...

class ViewTable(object):
    """    """
    @overload
    def Add(self, title: str, projection: Display.DefinedViewportProjection, position: Drawing.Rectangle, floating: bool) -> Display.RhinoView: ...
    @overload
    def AddPageView(self, title: str) -> Display.RhinoPageView: ...
    @overload
    def AddPageView(self, title: str, pageWidth: float, pageHeight: float) -> Display.RhinoPageView: ...
    @overload
    def DefaultViewLayout() -> None: ...
    @overload
    def EnableCameraIcon(self, view: Display.RhinoView) -> None: ...
    @overload
    def EnableRedraw(self, enable: bool, redrawDocument: bool, redrawLayers: bool) -> None: ...
    @overload
    def Find(self, mainViewportId: System.Guid) -> Display.RhinoView: ...
    @overload
    def Find(self, mainViewportName: str, compareCase: bool) -> Display.RhinoView: ...
    @overload
    def FlashObjects(self, list_: Generic.IEnumerable, useSelectionColor: bool) -> None: ...
    @overload
    def FourViewLayout(self, useMatchingViews: bool) -> None: ...
    @property
    def ActiveView(self) -> Display.RhinoView: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def ModelSpaceIsActive(self) -> bool: ...
    @property
    def RedrawEnabled(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetPageViews() -> Display.System.Array[Display.RhinoPageView]: ...
    @overload
    def GetStandardRhinoViews() -> Display.System.Array[Display.RhinoView]: ...
    @overload
    def GetViewList(self, filter_: Display.ViewTypeFilter) -> Display.System.Array[Display.RhinoView]: ...
    @overload
    def IsCameraIconVisible(self, view: Display.RhinoView) -> bool: ...
    @overload
    def Redraw() -> None: ...
    @ActiveView.setter
    def ActiveView(self, value: System.Void): ...
    @RedrawEnabled.setter
    def RedrawEnabled(self, value: System.Void): ...
    @overload
    def ThreeViewLayout(self, useMatchingViews: bool) -> None: ...

class ObjectTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add(self, geometry: Geometry.GeometryBase) -> System.Guid: ...
    @overload
    def Add(self, geometry: Geometry.GeometryBase, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def Add(self, geometry: Geometry.GeometryBase, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddAngularDimension(self, dimension: Geometry.AngularDimension) -> System.Guid: ...
    @overload
    def AddAngularDimension(self, dimension: Geometry.AngularDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddAngularDimension(self, dimension: Geometry.AngularDimension, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddArc(self, arc: Geometry.Arc) -> System.Guid: ...
    @overload
    def AddArc(self, arc: Geometry.Arc, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddArc(self, arc: Geometry.Arc, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddBox(self, box: Geometry.Box) -> System.Guid: ...
    @overload
    def AddBox(self, box: Geometry.Box, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddBox(self, box: Geometry.Box, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool, splitKinkySurfaces: bool) -> System.Guid: ...
    @overload
    def AddCentermark(self, centermark: Geometry.Centermark, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle) -> System.Guid: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddCircle(self, circle: Geometry.Circle, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddClippingPlane(self, plane: Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddClippingPlaneSurface(self, clippingPlane: Geometry.ClippingPlaneSurface, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve) -> System.Guid: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddEllipse(self, ellipse: Geometry.Ellipse) -> System.Guid: ...
    @overload
    def AddEllipse(self, ellipse: Geometry.Ellipse, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddEllipse(self, ellipse: Geometry.Ellipse, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddExplodedInstancePieces(self, instance: DocObjects.InstanceObject, explodeNestedInstances: bool, deleteInstance: bool) -> System.System.Array[System.Guid]: ...
    @overload
    def AddExtrusion(self, extrusion: Geometry.Extrusion) -> System.Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Geometry.Extrusion, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Geometry.Extrusion, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddHatch(self, hatch: Geometry.Hatch) -> System.Guid: ...
    @overload
    def AddHatch(self, hatch: Geometry.Hatch, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddHatch(self, hatch: Geometry.Hatch, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Geometry.Transform) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Geometry.Transform, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Geometry.Transform, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddLeader(self, leader: Geometry.Leader) -> System.Guid: ...
    @overload
    def AddLeader(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, plane: Geometry.Plane, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, leader: Geometry.Leader, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLeader(self, plane: Geometry.Plane, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Geometry.Plane, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddLeader(self, leader: Geometry.Leader, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Geometry.Plane, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Geometry.Plane, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddLine(self, line: Geometry.Line) -> System.Guid: ...
    @overload
    def AddLine(self, line: Geometry.Line, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLine(self, from_: Geometry.Point3d, to: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLine(self, from_: Geometry.Point3d, to: Geometry.Point3d, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddLinearDimension(self, dimension: Geometry.LinearDimension) -> System.Guid: ...
    @overload
    def AddLinearDimension(self, dimension: Geometry.LinearDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddLinearDimension(self, dimension: Geometry.LinearDimension, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool, requireValidMesh: bool) -> System.Guid: ...
    @overload
    def AddMorphControl(self, morphControl: Geometry.MorphControl) -> System.Guid: ...
    @overload
    def AddMorphControl(self, morphControl: Geometry.MorphControl, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddMorphControl(self, morphControl: Geometry.MorphControl, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddOrderedPointCloud(self, xCt: int, yCt: int, zCt: int, min_: Geometry.Point3d, max_: Geometry.Point3d, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddOrdinateDimension(self, dimordinate: Geometry.OrdinateDimension, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddPictureFrame(self, plane: Geometry.Plane, texturePath: str, asMesh: bool, width: float, height: float, selfIllumination: bool, embedBitmap: bool) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3f) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3f, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPoint(self, x: float, y: float, z: float) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddPointCloud(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddPointCloud(self, cloud: Geometry.PointCloud) -> System.Guid: ...
    @overload
    def AddPointCloud(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPointCloud(self, cloud: Geometry.PointCloud, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPointCloud(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddPointCloud(self, cloud: Geometry.PointCloud, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable) -> Collections.RhinoList: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable) -> Collections.RhinoList: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> Collections.RhinoList: ...
    @overload
    def AddPoints(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> Collections.RhinoList: ...
    @overload
    def AddPolyline(self, points: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def AddPolyline(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddPolyline(self, points: Generic.IEnumerable, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddRadialDimension(self, dimension: Geometry.RadialDimension) -> System.Guid: ...
    @overload
    def AddRadialDimension(self, dimension: Geometry.RadialDimension, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddRadialDimension(self, dimension: Geometry.RadialDimension, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddRectangle(self, rectangle: Geometry.Rectangle3d) -> System.Guid: ...
    @overload
    def AddRectangle(self, rectangle: Geometry.Rectangle3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddRectangle(self, rectangle: Geometry.Rectangle3d, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddRhinoObject(self, meshObject: Custom.CustomMeshObject) -> None: ...
    @overload
    def AddRhinoObject(self, pointObject: Custom.CustomPointObject) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: Custom.CustomBrepObject) -> None: ...
    @overload
    def AddRhinoObject(self, pointObject: DocObjects.PointObject, point: Geometry.Point) -> None: ...
    @overload
    def AddRhinoObject(self, curveObject: DocObjects.CurveObject, curve: Geometry.Curve) -> None: ...
    @overload
    def AddRhinoObject(self, pointObject: Custom.CustomPointObject, history: DocObjects.HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: DocObjects.BrepObject, brep: Geometry.Brep) -> None: ...
    @overload
    def AddRhinoObject(self, curveObject: Custom.CustomCurveObject, history: DocObjects.HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: Custom.CustomBrepObject, history: DocObjects.HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, meshObject: DocObjects.MeshObject, mesh: Geometry.Mesh) -> None: ...
    @overload
    def AddRhinoObject(self, meshObject: Custom.CustomMeshObject, history: DocObjects.HistoryRecord) -> None: ...
    @overload
    def AddSphere(self, sphere: Geometry.Sphere) -> System.Guid: ...
    @overload
    def AddSphere(self, sphere: Geometry.Sphere, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSphere(self, sphere: Geometry.Sphere, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddSubD(self, subD: Geometry.SubD) -> System.Guid: ...
    @overload
    def AddSubD(self, subD: Geometry.SubD, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSubD(self, subD: Geometry.SubD, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddSurface(self, surface: Geometry.Surface) -> System.Guid: ...
    @overload
    def AddSurface(self, surface: Geometry.Surface, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddSurface(self, surface: Geometry.Surface, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddText(self, text: Geometry.TextEntity) -> System.Guid: ...
    @overload
    def AddText(self, text3d: Display.Text3d) -> System.Guid: ...
    @overload
    def AddText(self, text3d: Display.Text3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: Geometry.TextEntity, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: Geometry.TextEntity, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Geometry.TextJustification) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Geometry.TextJustification, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddText(self, text: str, plane: Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Geometry.TextJustification, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AddTextDot(self, dot: Geometry.TextDot) -> System.Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Geometry.Point3d) -> System.Guid: ...
    @overload
    def AddTextDot(self, dot: Geometry.TextDot, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Geometry.Point3d, attributes: DocObjects.ObjectAttributes) -> System.Guid: ...
    @overload
    def AddTextDot(self, dot: Geometry.TextDot, attributes: DocObjects.ObjectAttributes, history: DocObjects.HistoryRecord, reference: bool) -> System.Guid: ...
    @overload
    def AllObjectsSince(self, runtimeSerialNumber: System.UInt32) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def Delete(self, item: DocObjects.RhinoObject) -> bool: ...
    @overload
    def Delete(self, objref: DocObjects.ObjRef, quiet: bool) -> bool: ...
    @overload
    def Delete(self, objectId: System.Guid, quiet: bool) -> bool: ...
    @overload
    def Delete(self, objectIds: Generic.IEnumerable, quiet: bool) -> int: ...
    @overload
    def Delete(self, obj: DocObjects.RhinoObject, quiet: bool) -> bool: ...
    @overload
    def Delete(self, obj: DocObjects.RhinoObject, quiet: bool, ignoreModes: bool) -> bool: ...
    @overload
    def Delete(self, objref: DocObjects.ObjRef, quiet: bool, ignoreModes: bool) -> bool: ...
    @overload
    def DeleteGrip(self, gripRef: DocObjects.ObjRef) -> bool: ...
    @overload
    def DeleteGrip(self, gripId: System.Guid) -> bool: ...
    @overload
    def DeleteGrip(self, grip: DocObjects.GripObject) -> bool: ...
    @overload
    def DeleteGrips(self, gripRefs: Generic.IEnumerable) -> int: ...
    @overload
    def DeleteGrips(self, grips: Generic.IEnumerable) -> int: ...
    @overload
    def DeleteGrips(self, gripIds: Generic.IEnumerable) -> int: ...
    @overload
    def DeleteGrips(self, owner: DocObjects.RhinoObject, gripIndices: Generic.IEnumerable) -> int: ...
    @overload
    def Duplicate(self, objectId: System.Guid) -> System.Guid: ...
    @overload
    def Duplicate(self, obj: DocObjects.RhinoObject) -> System.Guid: ...
    @overload
    def Duplicate(self, objref: DocObjects.ObjRef) -> System.Guid: ...
    @overload
    def Find(self, objectId: System.Guid) -> DocObjects.RhinoObject: ...
    @overload
    def Find(self, runtimeSerialNumber: System.UInt32) -> DocObjects.RhinoObject: ...
    @overload
    def FindByCrossingWindowRegion(self, viewport: Display.RhinoViewport, region: Generic.IEnumerable, inside: bool, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByCrossingWindowRegion(self, viewport: Display.RhinoViewport, screen1: Geometry.Point2d, screen2: Geometry.Point2d, inside: bool, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByDrawColor(self, drawColor: Drawing.Color, includeLights: bool) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByFilter(self, filter_: DocObjects.ObjectEnumeratorSettings) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByGroup(self, groupIndex: int) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByLayer(self, layerName: str) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByLayer(self, layer: DocObjects.Layer) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByObjectType(self, typeFilter: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter_: DocObjects.ObjectEnumeratorSettings) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByWindowRegion(self, viewport: Display.RhinoViewport, region: Generic.IEnumerable, inside: bool, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindByWindowRegion(self, viewport: Display.RhinoViewport, screen1: Geometry.Point2d, screen2: Geometry.Point2d, inside: bool, filter_: DocObjects.ObjectType) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def FindClippingPlanesForViewport(self, viewport: Display.RhinoViewport) -> DocObjects.System.Array[DocObjects.ClippingPlaneObject]: ...
    @overload
    def FindGeometry(self, id_: System.Guid) -> Geometry.GeometryBase: ...
    @overload
    def FindId(self, id_: System.Guid) -> DocObjects.RhinoObject: ...
    @property
    def BoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def BoundingBoxVisible(self) -> Geometry.BoundingBox: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def HistoryRecordCount(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetObjectList(self, settings: DocObjects.ObjectEnumeratorSettings) -> Generic.IEnumerable: ...
    @overload
    def GetObjectList(self, typeFilter: DocObjects.ObjectType) -> Generic.IEnumerable: ...
    @overload
    def GetObjectList(self, typeFilter: System.Type) -> Generic.IEnumerable: ...
    @overload
    def GetObjectsByType() -> Generic.IEnumerable: ...
    @overload
    def GetObjectsByType(self, settings: DocObjects.ObjectEnumeratorSettings) -> Generic.IEnumerable: ...
    @overload
    def GetSelectedObjectCount(self, checkSubObjects: bool) -> System.UInt32: ...
    @overload
    def GetSelectedObjects(self, includeLights: bool, includeGrips: bool) -> Generic.IEnumerable: ...
    @overload
    def GetSelectedObjectTypes() -> DocObjects.ObjectType: ...
    @overload
    def GripUpdate(self, obj: DocObjects.RhinoObject, deleteOriginal: bool) -> DocObjects.RhinoObject: ...
    @overload
    def Hide(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Hide(self, obj: DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Hide(self, objref: DocObjects.ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def InvalidateBoundingBox() -> None: ...
    @overload
    def Lock(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Lock(self, objref: DocObjects.ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Lock(self, obj: DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, objectId: System.Guid, newAttributes: DocObjects.ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, obj: DocObjects.RhinoObject, newAttributes: DocObjects.ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, objref: DocObjects.ObjRef, newAttributes: DocObjects.ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, objectId: System.Guid, material: Render.RenderMaterial) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, objRef: DocObjects.ObjRef, material: Render.RenderMaterial) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, obj: DocObjects.RhinoObject, material: Render.RenderMaterial) -> bool: ...
    @overload
    def ModifyTextureMapping(self, obj: DocObjects.RhinoObject, channel: int, mapping: Render.TextureMapping) -> bool: ...
    @overload
    def ModifyTextureMapping(self, objRef: DocObjects.ObjRef, channel: int, mapping: Render.TextureMapping) -> bool: ...
    @overload
    def ModifyTextureMapping(self, objId: System.Guid, channel: int, mapping: Render.TextureMapping) -> bool: ...
    @overload
    def MostRecentObject() -> DocObjects.RhinoObject: ...
    @overload
    def ObjectCount(self, filter_: DocObjects.ObjectEnumeratorSettings) -> int: ...
    @overload
    def PickObjects(self, pickContext: Custom.PickContext) -> DocObjects.System.Array[DocObjects.ObjRef]: ...
    @overload
    def Purge(self, runtimeSerialNumber: System.UInt32) -> bool: ...
    @overload
    def Purge(self, rhinoObject: DocObjects.RhinoObject) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, surface: Geometry.Surface) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, pointcloud: Geometry.PointCloud) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, pointcloud: Geometry.PointCloud) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, subD: Geometry.SubD) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, mesh: Geometry.Mesh) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, subD: Geometry.SubD) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, extrusion: Geometry.Extrusion) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, extrusion: Geometry.Extrusion) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, brep: Geometry.Brep) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, brep: Geometry.Brep) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, surface: Geometry.Surface) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, mesh: Geometry.Mesh) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, curve: Geometry.Curve) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, point: Geometry.Point) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, point: Geometry.Point3d) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, point: Geometry.Point3d) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, text: Geometry.TextEntity) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, text: Geometry.TextEntity) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, leader: Geometry.Leader) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, newObject: DocObjects.RhinoObject) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, leader: Geometry.Leader) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, dot: Geometry.TextDot) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, dot: Geometry.TextDot) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, curve: Geometry.Curve) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, hatch: Geometry.Hatch) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, point: Geometry.Point) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, polyline: Geometry.Polyline) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, line: Geometry.Line) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, line: Geometry.Line) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, circle: Geometry.Circle) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, circle: Geometry.Circle) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, polyline: Geometry.Polyline) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, hatch: Geometry.Hatch) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, arc: Geometry.Arc) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, arc: Geometry.Arc) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, brep: Geometry.Brep, splitKinkySurfaces: bool) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, brep: Geometry.Brep, splitKinkySurfaces: bool) -> bool: ...
    @overload
    def Replace(self, objref: DocObjects.ObjRef, geometry: Geometry.GeometryBase, ignoreModes: bool) -> bool: ...
    @overload
    def Replace(self, objectId: System.Guid, geometry: Geometry.GeometryBase, ignoreModes: bool) -> bool: ...
    @overload
    def ReplaceInstanceObject(self, objref: DocObjects.ObjRef, instanceDefinitionIndex: int) -> bool: ...
    @overload
    def ReplaceInstanceObject(self, objectId: System.Guid, instanceDefinitionIndex: int) -> bool: ...
    @overload
    def Select(self, objectId: System.Guid) -> bool: ...
    @overload
    def Select(self, objectIds: Generic.IEnumerable) -> int: ...
    @overload
    def Select(self, objref: DocObjects.ObjRef) -> bool: ...
    @overload
    def Select(self, objRefs: Generic.IEnumerable) -> int: ...
    @overload
    def Select(self, objref: DocObjects.ObjRef, select: bool) -> bool: ...
    @overload
    def Select(self, objRefs: Generic.IEnumerable, select: bool) -> int: ...
    @overload
    def Select(self, objectId: System.Guid, select: bool) -> bool: ...
    @overload
    def Select(self, objectIds: Generic.IEnumerable, select: bool) -> int: ...
    @overload
    def Select(self, objectId: System.Guid, select: bool, syncHighlight: bool) -> bool: ...
    @overload
    def Select(self, objref: DocObjects.ObjRef, select: bool, syncHighlight: bool) -> bool: ...
    @overload
    def Select(self, objectId: System.Guid, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool: ...
    @overload
    def Select(self, objref: DocObjects.ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool: ...
    @overload
    def Select(self, objref: DocObjects.ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def Select(self, objectId: System.Guid, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def SelectedObjectsExist(self, objectType: DocObjects.ObjectType, checkSubObjects: bool) -> bool: ...
    @overload
    def Show(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Show(self, obj: DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Show(self, objref: DocObjects.ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Transform(self, objref: DocObjects.ObjRef, xform: Geometry.Transform, deleteOriginal: bool) -> System.Guid: ...
    @overload
    def Transform(self, objectId: System.Guid, xform: Geometry.Transform, deleteOriginal: bool) -> System.Guid: ...
    @overload
    def Transform(self, obj: DocObjects.RhinoObject, xform: Geometry.Transform, deleteOriginal: bool) -> System.Guid: ...
    @overload
    def TransformWithHistory(self, objectId: System.Guid, xform: Geometry.Transform) -> System.Guid: ...
    @overload
    def TransformWithHistory(self, obj: DocObjects.RhinoObject, xform: Geometry.Transform) -> System.Guid: ...
    @overload
    def TransformWithHistory(self, objref: DocObjects.ObjRef, xform: Geometry.Transform) -> System.Guid: ...
    @overload
    def TryFindPoint(self, id_: System.Guid) -> (bool, Geometry.Point3d): ...
    @overload
    def Undelete(self, runtimeSerialNumber: System.UInt32) -> bool: ...
    @overload
    def Undelete(self, rhinoObject: DocObjects.RhinoObject) -> bool: ...
    @overload
    def Unlock(self, objref: DocObjects.ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Unlock(self, obj: DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Unlock(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def UnselectAll() -> int: ...
    @overload
    def UnselectAll(self, ignorePersistentSelections: bool) -> int: ...

class StringTable(object):
    """Collection of document user data strings

    """
    @overload
    def Delete(self, key: str) -> None: ...
    @overload
    def Delete(self, section: str, entry: str) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def DocumentDataCount(self) -> int: ...
    @property
    def DocumentUserTextCount(self) -> int: ...
    @overload
    def GetEntryNames(self, section: str) -> System.System.Array[str]: ...
    @overload
    def GetKey(self, i: int) -> str: ...
    @overload
    def GetSectionNames() -> System.System.Array[str]: ...
    @overload
    def GetValue(self, key: str) -> str: ...
    @overload
    def GetValue(self, i: int) -> str: ...
    @overload
    def GetValue(self, section: str, entry: str) -> str: ...
    @overload
    def SetString(self, key: str, value: str) -> str: ...
    @overload
    def SetString(self, section: str, entry: str, value: str) -> str: ...

class NamedConstructionPlaneTable(object):
    """Contains all named construction planes in a rhino document.
This class cannot be inherited.

    """
    @overload
    def Add(self, constructionPlane: DocObjects.ConstructionPlane) -> int: ...
    @overload
    def Add(self, name: str, plane: Geometry.Plane) -> int: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Find(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.ConstructionPlane: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class NamedViewTable(object):
    """All named views in a rhino document.

    """
    @overload
    def Add(self, view: DocObjects.ViewInfo) -> int: ...
    @overload
    def Add(self, name: str, viewportId: System.Guid) -> int: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def FindByName(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.ViewInfo: ...
    @property
    def Selection(self) -> System.System.Array[str]: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Rename(self, oldName: str, newName: str) -> bool: ...
    @overload
    def Rename(self, index: int, newName: str) -> bool: ...
    @overload
    def Restore(self, index: int, viewport: Display.RhinoViewport) -> bool: ...
    @overload
    def RestoreAnimatedConstantSpeed(self, index: int, viewport: Display.RhinoViewport, units_per_frame: float, ms_delay: int) -> bool: ...
    @overload
    def RestoreAnimatedConstantTime(self, index: int, viewport: Display.RhinoViewport, frames: int, ms_delay: int) -> bool: ...
    @overload
    def RestoreWithAspectRatio(self, index: int, viewport: Display.RhinoViewport) -> bool: ...

class NamedPositionTable(object):
    """All named positions in a rhino document.

    """
    @overload
    def Append(self, name: str, objectIds: Generic.IEnumerable) -> bool: ...
    @overload
    def Append(self, name: str, objects: Generic.IEnumerable) -> bool: ...
    @overload
    def Append(self, id_: System.Guid, objectIds: Generic.IEnumerable) -> bool: ...
    @overload
    def Append(self, id_: System.Guid, objects: Generic.IEnumerable) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Delete(self, id_: System.Guid) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Ids(self) -> System.System.Array[System.Guid]: ...
    @property
    def Names(self) -> System.System.Array[str]: ...
    @overload
    def Id(self, name: str) -> System.Guid: ...
    @overload
    def Name(self, id_: System.Guid) -> str: ...
    @overload
    def ObjectIds(self, id_: System.Guid) -> System.System.Array[System.Guid]: ...
    @overload
    def ObjectIds(self, name: str) -> System.System.Array[System.Guid]: ...
    @overload
    def Objects(self, id_: System.Guid) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def Objects(self, name: str) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def ObjectXform(self, id_: System.Guid, objId: System.Guid) -> (bool, Geometry.Transform): ...
    @overload
    def ObjectXform(self, id_: System.Guid, obj: DocObjects.RhinoObject) -> (bool, Geometry.Transform): ...
    @overload
    def Rename(self, id_: System.Guid, name: str) -> bool: ...
    @overload
    def Rename(self, oldName: str, name: str) -> bool: ...
    @overload
    def Restore(self, id_: System.Guid) -> bool: ...
    @overload
    def Restore(self, name: str) -> bool: ...
    @overload
    def Save(self, name: str, objectIds: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def Save(self, name: str, objects: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def Update(self, id_: System.Guid) -> bool: ...
    @overload
    def Update(self, name: str) -> bool: ...

class SnapshotTable(object):
    """All snapshots in a rhino document.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Names(self) -> System.System.Array[str]: ...

class RestoreLayerProperties(enum.Enum):
    None_ = 0
    Current = 1
    Visible = 2
    Locked = 4
    Color = 8
    Linetype = 16
    PrintColor = 32
    PrintWidth = 64
    ViewportVisible = 128
    ViewportColor = 256
    ViewportPrintColor = 512
    ViewportPrintWidth = 1024
    RenderMaterial = 2048
    SectionStyle = 4096
    NewDetailOn = 8192
    Expanded = 16384
    All = 4294967295

class NamedLayerStateTable(object):
    """All named layer states in a Rhino document.

    """
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def FindName(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Names(self) -> System.System.Array[str]: ...
    @overload
    def Import(self, filename: str) -> int: ...
    @overload
    def Rename(self, oldName: str, newName: str) -> bool: ...
    @overload
    def Restore(self, name: str, properties: RestoreLayerProperties) -> bool: ...
    @overload
    def Restore(self, name: str, properties: RestoreLayerProperties, viewportId: System.Guid) -> bool: ...
    @overload
    def Save(self, name: str) -> int: ...
    @overload
    def Save(self, name: str, viewportId: System.Guid) -> int: ...

class FontTable(object):
    """Font tables store the list of fonts in a Rhino document.
The FontTable is now just a wrapper around the DimStyles table.

    """
    @overload
    def FindOrCreate(self, face: str, bold: bool, italic: bool) -> int: ...
    @overload
    def FindOrCreate(self, face: str, bold: bool, italic: bool, template_style: DocObjects.DimensionStyle) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentIndex(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.Font: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class GroupTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4

class GroupTableEventArgs(System.EventArgs):
    """Contains group table event data.

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> GroupTableEventType: ...
    @property
    def GroupIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.Group: ...
    @property
    def OldState(self) -> DocObjects.Group: ...

class GroupTable(RhinoDocCommonTable):
    """Group tables store the list of groups in a Rhino document.

    """
    @overload
    def Add() -> int: ...
    @overload
    def Add(self, objectIds: Generic.IEnumerable) -> int: ...
    @overload
    def Add(self, groupName: str) -> int: ...
    @overload
    def Add(self, groupName: str, objectIds: Generic.IEnumerable) -> int: ...
    @overload
    def AddToGroup(self, groupIndex: int, objectIds: Generic.IEnumerable) -> bool: ...
    @overload
    def AddToGroup(self, groupIndex: int, objectId: System.Guid) -> bool: ...
    @overload
    def ChangeGroupName(self, groupIndex: int, newName: str) -> bool: ...
    @overload
    def Delete(self, groupIndex: int) -> bool: ...
    @overload
    def Delete(self, item: DocObjects.Group) -> bool: ...
    @overload
    def Find(self, groupName: str) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Group: ...
    @overload
    def FindName(self, name: str) -> DocObjects.Group: ...
    @overload
    def FindNameHash(self, nameHash: FileIO.NameHash) -> DocObjects.Group: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Item(self) -> DocObjects.Group: ...
    @overload
    def GroupMembers(self, groupIndex: int) -> DocObjects.System.Array[DocObjects.RhinoObject]: ...
    @overload
    def GroupName(self, groupIndex: int) -> str: ...
    @overload
    def GroupNames(self, ignoreDeletedGroups: bool) -> System.System.Array[str]: ...
    @overload
    def GroupObjectCount(self, groupIndex: int) -> int: ...
    @overload
    def Hide(self, groupIndex: int) -> int: ...
    @overload
    def IsDeleted(self, groupIndex: int) -> bool: ...
    @overload
    def Lock(self, groupIndex: int) -> int: ...
    @overload
    def RemapObjects(self, rhinoObjects: Generic.IEnumerable) -> int: ...
    @overload
    def RemapObjects(self, rhinoObjects: Generic.IEnumerable) -> (int, Generic.Dictionary): ...
    @overload
    def Show(self, groupIndex: int) -> int: ...
    @overload
    def Undelete(self, groupIndex: int) -> bool: ...
    @overload
    def Unlock(self, groupIndex: int) -> int: ...

class HatchPatternTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5

class HatchPatternTableEventArgs(System.EventArgs):
    """LinetypeTable event arguments
8.15

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> HatchPatternTableEventType: ...
    @property
    def HatchPatternIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.HatchPattern: ...
    @property
    def OldState(self) -> DocObjects.HatchPattern: ...

class HatchPatternTable(RhinoDocCommonTable):
    """All of the hatch pattern definitions contained in a rhino document.

    """
    @overload
    def Add(self, pattern: DocObjects.HatchPattern) -> int: ...
    @overload
    def Delete(self, hatchPatternIndex: int) -> bool: ...
    @overload
    def Delete(self, item: DocObjects.HatchPattern) -> bool: ...
    @overload
    def Delete(self, item: DocObjects.HatchPattern, quiet: bool) -> bool: ...
    @overload
    def Delete(self, hatchPatternIndex: int, quiet: bool) -> bool: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.HatchPattern: ...
    @overload
    def FindName(self, name: str) -> DocObjects.HatchPattern: ...
    @overload
    def FindNameHash(self, nameHash: FileIO.NameHash) -> DocObjects.HatchPattern: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def CurrentHatchPatternIndex(self) -> int: ...
    @property
    def Item(self) -> DocObjects.HatchPattern: ...
    @overload
    def Modify(self, hatchPattern: DocObjects.HatchPattern, hatchPatternIndex: int, quiet: bool) -> bool: ...
    @overload
    def Rename(self, item: DocObjects.HatchPattern, hatchPatternName: str) -> bool: ...
    @overload
    def Rename(self, hatchPatternIndex: int, hatchPatternName: str) -> bool: ...
    @CurrentHatchPatternIndex.setter
    def CurrentHatchPatternIndex(self, value: System.Void): ...

class InstanceDefinitionTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4

class InstanceDefinitionTableEventArgs(System.EventArgs):
    """    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> InstanceDefinitionTableEventType: ...
    @property
    def InstanceDefinitionIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.InstanceDefinition: ...
    @property
    def OldState(self) -> Geometry.InstanceDefinitionGeometry: ...

class InstanceDefinitionTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Geometry.GeometryBase, attributes: DocObjects.ObjectAttributes) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable, attributes: Generic.IEnumerable) -> int: ...
    @overload
    def Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Geometry.Point3d, geometry: Generic.IEnumerable, attributes: Generic.IEnumerable) -> int: ...
    @overload
    def Compact(self, ignoreUndoReferences: bool) -> None: ...
    @overload
    def Delete(self, item: DocObjects.InstanceDefinition) -> bool: ...
    @overload
    def Delete(self, idefIndex: int, deleteReferences: bool, quiet: bool) -> bool: ...
    @overload
    def DestroySourceArchive(self, definition: DocObjects.InstanceDefinition, quiet: bool) -> bool: ...
    @overload
    def Find(self, instanceDefinitionName: str) -> DocObjects.InstanceDefinition: ...
    @overload
    def Find(self, instanceId: System.Guid, ignoreDeletedInstanceDefinitions: bool) -> DocObjects.InstanceDefinition: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.InstanceDefinition: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetList(self, ignoreDeleted: bool) -> DocObjects.System.Array[DocObjects.InstanceDefinition]: ...
    @overload
    def GetUnusedInstanceDefinitionName() -> str: ...
    @overload
    def GetUnusedInstanceDefinitionName(self, root: str) -> str: ...
    @overload
    def InstanceDefinitionIndex(self, instanceId: System.Guid, ignoreDeletedInstanceDefinitions: bool) -> int: ...
    @overload
    def Modify(self, idefIndex: int, userData: Custom.UserData, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idef: DocObjects.InstanceDefinition, newName: str, newDescription: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idefIndex: int, newName: str, newDescription: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idefIndex: int, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idef: DocObjects.InstanceDefinition, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: Generic.IEnumerable) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: Generic.IEnumerable, newAttributes: Generic.IEnumerable) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: Geometry.GeometryBase, newAttributes: DocObjects.ObjectAttributes) -> bool: ...
    @overload
    def ModifySourceArchive(self, idefIndex: int, sourceArchive: FileIO.FileReference, updateType: DocObjects.InstanceDefinitionUpdateType, quiet: bool) -> bool: ...
    @overload
    def Purge(self, idefIndex: int) -> bool: ...
    @overload
    def RefreshLinkedBlock(self, definition: DocObjects.InstanceDefinition) -> bool: ...
    @overload
    def Undelete(self, idefIndex: int) -> bool: ...
    @overload
    def UndoModify(self, idefIndex: int) -> bool: ...
    @overload
    def UpdateLinkedInstanceDefinition(self, idefIndex: int, filename: str, updateNestedLinks: bool, quiet: bool) -> bool: ...

class LayerTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5

class LayerTableEventArgs(System.EventArgs):
    """    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> LayerTableEventType: ...
    @property
    def LayerIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.Layer: ...
    @property
    def OldState(self) -> DocObjects.Layer: ...

class LayerTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add() -> int: ...
    @overload
    def Add(self, layer: DocObjects.Layer) -> int: ...
    @overload
    def Add(self, layerName: str, layerColor: Drawing.Color) -> int: ...
    @overload
    def AddPath(self, layerPath: str) -> int: ...
    @overload
    def AddPath(self, layerPath: str, layerColor: Drawing.Color) -> int: ...
    @overload
    def AddReferenceLayer() -> int: ...
    @overload
    def AddReferenceLayer(self, layer: DocObjects.Layer) -> int: ...
    @overload
    def CreateLayer(self, newLayer: DocObjects.Layer, layerType: LayerType, worksessionReferenceModelSerialNumber: System.UInt32, linkedInstanceDefinitionSerialNumber: System.UInt32) -> int: ...
    @overload
    def Delete(self, layer: DocObjects.Layer) -> bool: ...
    @overload
    def Delete(self, layerId: System.Guid, quiet: bool) -> bool: ...
    @overload
    def Delete(self, layer: DocObjects.Layer, quiet: bool) -> bool: ...
    @overload
    def Delete(self, layerIndices: Generic.IEnumerable, quiet: bool) -> int: ...
    @overload
    def Delete(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Duplicate(self, layerIndex: int, duplicateObjects: bool, duplicateSublayers: bool) -> System.System.Array[int]: ...
    @overload
    def Duplicate(self, layerIndices: Generic.IEnumerable, duplicateObjects: bool, duplicateSublayers: bool) -> System.System.Array[int]: ...
    @overload
    def Find(self, parentId: System.Guid, layerName: str, notFoundReturnValue: int) -> int: ...
    @overload
    def Find(self, layerId: System.Guid, ignoreDeletedLayers: bool, notFoundReturnValue: int) -> int: ...
    @overload
    def FindByFullPath(self, layerPath: str, notFoundReturnValue: int) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Layer: ...
    @overload
    def FindName(self, layerName: str) -> DocObjects.Layer: ...
    @overload
    def FindName(self, layerName: str, startIndex: int) -> DocObjects.Layer: ...
    @overload
    def FindNameHash(self, nameHash: FileIO.NameHash) -> DocObjects.Layer: ...
    @overload
    def FindNext(self, index: int, layerName: str) -> DocObjects.Layer: ...
    @overload
    def ForceLayerVisible(self, layerId: System.Guid) -> bool: ...
    @overload
    def ForceLayerVisible(self, layerIndex: int) -> bool: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentLayer(self) -> DocObjects.Layer: ...
    @property
    def CurrentLayerIndex(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.Layer: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetSelected() -> (bool, Generic.List): ...
    @overload
    def GetSorted() -> System.System.Array[int]: ...
    @overload
    def GetUnusedLayerName() -> str: ...
    @overload
    def Modify(self, newSettings: DocObjects.Layer, layerId: System.Guid, quiet: bool) -> bool: ...
    @overload
    def Modify(self, newSettings: DocObjects.Layer, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Purge(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Purge(self, layerId: System.Guid, quiet: bool) -> bool: ...
    @overload
    def Select(self, layerIndices: Generic.IEnumerable, bDeselect: bool) -> bool: ...
    @overload
    def SetCurrentLayerIndex(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Sort(self, layerIndices: Generic.IEnumerable) -> None: ...
    @overload
    def SortByLayerName(self, bAscending: bool) -> None: ...
    @overload
    def Undelete(self, layerIndex: int) -> bool: ...
    @overload
    def UndoModify(self, layerId: System.Guid) -> bool: ...
    @overload
    def UndoModify(self, layerIndex: int) -> bool: ...
    @overload
    def UndoModify(self, layerIndex: int, undoRecordSerialNumber: System.UInt32) -> bool: ...
    @overload
    def UndoModify(self, layerId: System.Guid, undoRecordSerialNumber: System.UInt32) -> bool: ...

class LightTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4

class LightTableEventArgs(System.EventArgs):
    """    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> LightTableEventType: ...
    @property
    def LightIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.LightObject: ...
    @property
    def OldState(self) -> Geometry.Light: ...

class LightTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add(self, light: Geometry.Light) -> int: ...
    @overload
    def Add(self, light: Geometry.Light, attributes: DocObjects.ObjectAttributes) -> int: ...
    @overload
    def Delete(self, item: DocObjects.LightObject) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Find(self, id_: System.Guid, ignoreDeleted: bool) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.LightObject: ...
    @overload
    def FindName(self, name: str) -> DocObjects.LightObject: ...
    @overload
    def FindNameHash(self, nameHash: FileIO.NameHash) -> DocObjects.LightObject: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.LightObject: ...
    @property
    def Skylight(self) -> Render.Skylight: ...
    @property
    def Sun(self) -> Render.Sun: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Modify(self, id_: System.Guid, light: Geometry.Light) -> bool: ...
    @overload
    def Modify(self, index: int, light: Geometry.Light) -> bool: ...
    @overload
    def Undelete(self, index: int) -> bool: ...

class LinetypeTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5

class LinetypeTableEventArgs(System.EventArgs):
    """LinetypeTable event arguments
8.0

    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> LinetypeTableEventType: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @property
    def NewState(self) -> DocObjects.Linetype: ...
    @property
    def OldState(self) -> DocObjects.Linetype: ...

class LinetypeTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add(self, linetype: DocObjects.Linetype) -> int: ...
    @overload
    def Add(self, name: str, segmentLengths: Generic.IEnumerable) -> int: ...
    @overload
    def AddReferenceLinetype(self, linetype: DocObjects.Linetype) -> int: ...
    @overload
    def Delete(self, item: DocObjects.Linetype) -> bool: ...
    @overload
    def Delete(self, indices: Generic.IEnumerable, quiet: bool) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Find(self, name: str) -> int: ...
    @overload
    def Find(self, id_: System.Guid, ignoreDeletedLinetypes: bool) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Linetype: ...
    @overload
    def FindName(self, name: str) -> DocObjects.Linetype: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ByLayerLinetypeName(self) -> str: ...
    @property
    def ByParentLinetypeName(self) -> str: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def ContinuousLinetypeName(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentLinetype(self) -> DocObjects.Linetype: ...
    @property
    def CurrentLinetypeIndex(self) -> int: ...
    @property
    def CurrentLinetypeSource(self) -> DocObjects.ObjectLinetypeSource: ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Item(self) -> DocObjects.Linetype: ...
    @property
    def LinetypeScale(self) -> float: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetUnusedLinetypeName() -> str: ...
    @overload
    def LinetypeIndexForObject(self, rhinoObject: DocObjects.RhinoObject) -> int: ...
    @overload
    def LoadDefaultLinetypes() -> int: ...
    @overload
    def LoadDefaultLinetypes(self, ignoreDeleted: bool) -> int: ...
    @overload
    def Modify(self, linetype: DocObjects.Linetype, index: int, quiet: bool) -> bool: ...
    @CurrentLinetypeSource.setter
    def CurrentLinetypeSource(self, value: System.Void): ...
    @LinetypeScale.setter
    def LinetypeScale(self, value: System.Void): ...
    @overload
    def SetCurrentLinetypeIndex(self, linetypeIndex: int, quiet: bool) -> bool: ...
    @overload
    def Undelete(self, index: int) -> bool: ...
    @overload
    def UndoModify(self, index: int) -> bool: ...

class MaterialTableEventType(enum.Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5

class MaterialTableEventArgs(System.EventArgs):
    """    """
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def EventType(self) -> MaterialTableEventType: ...
    @property
    def Index(self) -> int: ...
    @property
    def OldSettings(self) -> DocObjects.Material: ...

class MaterialTable(RhinoDocCommonTable):
    """    """
    @overload
    def Add() -> int: ...
    @overload
    def Add(self, material: DocObjects.Material) -> int: ...
    @overload
    def Add(self, material: DocObjects.Material, reference: bool) -> int: ...
    @overload
    def Delete(self, item: DocObjects.Material) -> bool: ...
    @overload
    def DeleteAt(self, materialIndex: int) -> bool: ...
    @overload
    def Find(self, material: DocObjects.Material, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def Find(self, materialName: str, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def Find(self, materialId: System.Guid, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def FindIndex(self, index: int) -> DocObjects.Material: ...
    @property
    def ComponentType(self) -> DocObjects.ModelComponentType: ...
    @property
    def CurrentMaterialIndex(self) -> int: ...
    @property
    def CurrentMaterialSource(self) -> DocObjects.ObjectMaterialSource: ...
    @property
    def Item(self) -> DocObjects.Material: ...
    @overload
    def Modify(self, newSettings: DocObjects.Material, materialIndex: int, quiet: bool) -> bool: ...
    @overload
    def ResetMaterial(self, materialIndex: int) -> bool: ...
    @CurrentMaterialIndex.setter
    def CurrentMaterialIndex(self, value: System.Void): ...
    @CurrentMaterialSource.setter
    def CurrentMaterialSource(self, value: System.Void): ...

class LayerType(enum.Enum):
    NormalLayer = 0
    LinkedInstanceDefinitionParentLayer = 2
    WorkSessionParentLayer = 4

# endregion
