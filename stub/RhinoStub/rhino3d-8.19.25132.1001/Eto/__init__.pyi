"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Threading", "IO", "Forms", "Drawing", "AutoInitializeAttribute", "CollectionChangedHandler", "EnumerableChangedHandler", "DataStoreChangedHandler", "ContentPropertyAttribute", "DefaultStyleProvider", "EtoSpecialFolder", "EtoEnvironment", "EtoMemberIdentifier", "AttachableMemberIdentifier", "ExportHandlerAttribute", "ExtendedObservableCollection", "FileAction", "HandlerAttribute", "NamespaceInfo", "OperatingSystemPlatform", "WidgetCreatedEventArgs", "HandlerCreatedEventArgs", "PlatformFeatures", "Platform", "ExportInitializerAttribute", "IPlatformInitializer", "PlatformExtensionAttribute", "Platforms", "PropertyStore", "RuntimeNamePropertyAttribute", "IStyleProvider", "StyleWidgetHandler", "StyleHandler", "Style", "UnhandledExceptionEventArgs", "IControlObjectSource", "IHandlerSource", "ICallbackSource", "Widget", "WidgetHandler", "IHandler", "ICallback"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Windows import Input
from typing import overload
import enum
import System
# endregion

# region: Eto, Version=2.9.0.0

class AutoInitializeAttribute(System.Attribute):
    """Attribute to specify whether the handler interface should be initialized automatically

    """
    def __init__(self, initialize: bool): ...
    @property
    def Initialize(self) -> bool: ...

class CollectionChangedHandler(object):
    """Class to help implement collection changed events on a data store

    CollectionChangedHandler[TItem, TCollection]
    """
    @overload
    def AddItem(self, item: TItem) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def ElementAt(self, index: int) -> TItem: ...
    @property
    def Collection(self) -> TCollection: ...
    @property
    def Count(self) -> int: ...
    @overload
    def IndexOf(self, item: TItem) -> int: ...
    @overload
    def InsertItem(self, index: int, item: TItem) -> None: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> None: ...
    @overload
    def Register(self, collection: TCollection) -> bool: ...
    @overload
    def RemoveAllItems() -> None: ...
    @overload
    def RemoveItem(self, index: int) -> None: ...
    @overload
    def RemoveItem(self, item: TItem) -> None: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def ReplaceItem(self, index: int, newItem: TItem) -> None: ...
    @overload
    def ReplaceRange(self, index: int, newItems: Generic.IEnumerable) -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Unregister() -> None: ...

class EnumerableChangedHandler(EnumerableChangedHandler):
    """Helper class to handle collection change events of an

    EnumerableChangedHandler[TItem]
    """

class EnumerableChangedHandler(CollectionChangedHandler):
    """Helper class to handle collection change events of an

    EnumerableChangedHandler[TItem, TCollection]
    """
    @property
    def Count(self) -> int: ...

class DataStoreChangedHandler(CollectionChangedHandler):
    """Class to help implement change handling for a

    DataStoreChangedHandler[TItem, TCollection]
    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class ContentPropertyAttribute(System.Attribute):
    """Attribute to indicate which property of a type is the content property

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class DefaultStyleProvider(object):
    """The default style provider which supports setting styles from delegates.

    """
    def __init__(self): ...
    @overload
    def Add(self, style: str, handler: System.Action) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Inherit(self) -> bool: ...
    @Inherit.setter
    def Inherit(self, value: System.Void): ...
    @property
    def StyleWidget(self): ...

class EtoSpecialFolder(enum.Enum):
    ApplicationSettings = 0
    ApplicationResources = 1
    Documents = 2
    EntryExecutable = 3
    Downloads = 4

class EtoEnvironment(object):
    """Environment methods

    """
    @property
    def Is64BitProcess(self) -> bool: ...
    @property
    def Platform(self) -> OperatingSystemPlatform: ...
    @overload
    @staticmethod
    def GetFolderPath(folder: EtoSpecialFolder) -> str: ...

class EtoMemberIdentifier(AttachableMemberIdentifier):
    """Member identifier for attached properties

    """
    def __init__(self, declaringType: System.Type, memberName: str): ...

class AttachableMemberIdentifier(object):
    """Attachable member identifier for properties, when xaml is not present/available

    """
    def __init__(self, declaringType: System.Type, memberName: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def MemberName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ExportHandlerAttribute(PlatformExtensionAttribute):
    """Exports a handler from a 3rd party assembly.

    """
    def __init__(self, widgetType: System.Type, handlerType: System.Type): ...
    @property
    def HandlerType(self) -> System.Type: ...
    @property
    def WidgetType(self) -> System.Type: ...
    @overload
    def Register(self, platform: Platform) -> None: ...

class ExtendedObservableCollection(ObjectModel.ObservableCollection):
    """Observable collection with extended functionality such as sorting and adding a range of items

    ExtendedObservableCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> None: ...
    @overload
    def Sort(self, comparer: Generic.IComparer) -> None: ...
    @property
    def CollectionChanged(self): ...

class FileAction(enum.Enum):
    OpenFile = 0
    SaveFile = 1
    SelectFolder = 2

class HandlerAttribute(System.Attribute):
    """Attribute to specify the interface type to use for the handler of a

    """
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> System.Type: ...

class NamespaceInfo(object):
    """Helper class to get information about a namespace and assembly

    """
    @overload
    def __init__(self, ns: str): ...
    @overload
    def __init__(self, ns: str, assembly: Reflection.Assembly): ...
    @overload
    def FindResource() -> IO.Stream: ...
    @overload
    def FindResource(self, resourceName: str) -> IO.Stream: ...
    @overload
    def FindType(self, typeName: str) -> System.Type: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def Namespace(self) -> str: ...
    @Assembly.setter
    def Assembly(self, value: System.Void): ...

class OperatingSystemPlatform(object):
    """Operating system platform information

    """
    def __init__(self): ...
    @property
    def IsLinux(self) -> bool: ...
    @property
    def IsMac(self) -> bool: ...
    @property
    def IsMono(self) -> bool: ...
    @property
    def IsNetCore(self) -> bool: ...
    @property
    def IsNetFramework(self) -> bool: ...
    @property
    def IsUnix(self) -> bool: ...
    @property
    def IsWindows(self) -> bool: ...
    @property
    def IsWinRT(self) -> bool: ...

class WidgetCreatedEventArgs(System.EventArgs):
    """Arguments for when a widget is created

    """
    def __init__(self, instance: Widget): ...
    @property
    def Instance(self) -> Widget: ...

class HandlerCreatedEventArgs(System.EventArgs):
    """Arguments for when a widget is created

    """
    def __init__(self, instance: object): ...
    @property
    def Instance(self) -> object: ...

class PlatformFeatures(enum.Enum):
    None_ = 0
    CustomCellSupportsControlView = 1
    DrawableWithTransparentContent = 2
    TabIndexWithCustomContainers = 4

class Platform(object):
    """Base platform class

    """
    @overload
    def Add(self, instantiator: System.Func) -> None: ...
    @overload
    def Add(self, type_: System.Type, instantiator: System.Func) -> None: ...
    @overload
    def Cache(self, cacheKey: object) -> Generic.Dictionary: ...
    @overload
    def Create() -> T: ...
    @overload
    def Create(self, type_: System.Type) -> object: ...
    @overload
    def CreateShared() -> T: ...
    @overload
    def CreateShared(self, type_: System.Type) -> object: ...
    @overload
    def Find() -> System.Func: ...
    @overload
    def Find(self, type_: System.Type) -> System.Func: ...
    @property
    def AllowReinitialize(self) -> bool: ...
    @property
    def Context(self) -> System.IDisposable: ...
    @property
    def Detect(self) -> Platform: ...
    @property
    def ID(self) -> str: ...
    @property
    def Instance(self) -> Platform: ...
    @property
    def IsAndroid(self) -> bool: ...
    @property
    def IsDesktop(self) -> bool: ...
    @property
    def IsGtk(self) -> bool: ...
    @property
    def IsIos(self) -> bool: ...
    @property
    def IsMac(self) -> bool: ...
    @property
    def IsMobile(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsWinForms(self) -> bool: ...
    @property
    def IsWpf(self) -> bool: ...
    @overload
    @staticmethod
    def Get(generatorType: str) -> Platform: ...
    @property
    def SupportedFeatures(self) -> PlatformFeatures: ...
    @overload
    @staticmethod
    def Initialize(platform: Platform) -> None: ...
    @overload
    @staticmethod
    def Initialize(platformType: str) -> None: ...
    @overload
    def Invoke(self, action: System.Action) -> None: ...
    @overload
    def Invoke(self, action: System.Func) -> T: ...
    @overload
    def LoadAssembly(self, assembly: Reflection.Assembly) -> None: ...
    @overload
    def LoadAssembly(self, assemblyName: str) -> None: ...
    @AllowReinitialize.setter
    def AllowReinitialize(self, value: System.Void): ...
    @overload
    def Supports() -> bool: ...
    @overload
    def Supports(self, type_: System.Type) -> bool: ...
    @overload
    def ThreadStart() -> System.IDisposable: ...
    @property
    def HandlerCreated(self): ...
    @property
    def WidgetCreated(self): ...

class ExportInitializerAttribute(PlatformExtensionAttribute):
    """Attribute to apply to 3rd party assemblies to load additional controls or functionality.

    """
    def __init__(self, initializerType: System.Type): ...
    @property
    def InitializerType(self) -> System.Type: ...
    @overload
    def Register(self, platform: Platform) -> None: ...

class IPlatformInitializer:
    """Platform extension for 3rd party libraries to provide additional controls or functionality

    """
    @overload
    def Initialize(self, platform: Platform) -> None: ...

class PlatformExtensionAttribute(System.Attribute):
    """Base extension attribute to wire up 3rd party controls and native handler implementations.

    """
    @property
    def PlatformID(self) -> str: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @PlatformID.setter
    def PlatformID(self, value: System.Void): ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...

class Platforms(object):
    """Constants for the standard Generator generators

    """
    @property
    def Direct2D(self) -> str: ...
    @property
    def Ios(self) -> str: ...
    @property
    def Gtk(self) -> str: ...
    @property
    def Mac64(self) -> str: ...
    @property
    def macOS(self) -> str: ...
    @property
    def WinForms(self) -> str: ...
    @property
    def Wpf(self) -> str: ...
    @property
    def Android(self) -> str: ...

class PropertyStore(Generic.Dictionary):
    """A storage for properties and events of a class

    """
    def __init__(self, parent: object): ...
    @overload
    def AddEvent(self, key: object, value: System.Delegate) -> None: ...
    @overload
    def AddHandlerEvent(self, key: str, value: System.Delegate) -> None: ...
    @overload
    def Create(self, key: object) -> T: ...
    @overload
    def Create(self, key: object, create: System.Func) -> T: ...
    @property
    def Parent(self) -> object: ...
    @overload
    def Get(self, key: object, defaultValue: System.Func) -> T: ...
    @overload
    def Get(self, key: object, defaultValue: T) -> T: ...
    @overload
    def GetCommand(self, key: object) -> Input.ICommand: ...
    @overload
    def RemoveEvent(self, key: object, value: System.Delegate) -> None: ...
    @overload
    def Set(self, key: object, value: T, defaultValue: T) -> None: ...
    @overload
    def Set(self, key: object, value: T, propertyChanged: System.Action, defaultValue: T) -> bool: ...
    @overload
    def Set(self, key: object, value: T, propertyChanged: ComponentModel.PropertyChangedEventHandler, defaultValue: T, propertyName: str) -> bool: ...
    @overload
    def SetCommand(self, key: object, value: Input.ICommand, setEnabled: System.Action, addExecute: System.Action, removeExecute: System.Action, getParameter: System.Func) -> None: ...
    @overload
    def TriggerEvent(self, key: object, sender: object, args: T) -> None: ...
    @overload
    def TrySet(self, key: object, value: T, defaultValue: T) -> bool: ...
    @overload
    def UpdateCommandCanExecute(self, key: object) -> None: ...

class RuntimeNamePropertyAttribute(System.Attribute):
    """Attribute to specify the name property of a control for serialization

    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class IStyleProvider:
    """Interface for a style provider

    """
    @overload
    def ApplyCascadingStyle(self, container: object, widget: object, style: str) -> None: ...
    @overload
    def ApplyDefault(self, widget: object) -> None: ...
    @overload
    def ApplyStyle(self, widget: object, style: str) -> None: ...
    @property
    def Inherit(self) -> bool: ...

class StyleWidgetHandler(System.MulticastDelegate):
    """Delegate to handle styling a widget

    StyleWidgetHandler[TWidget]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, widget: TWidget, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, widget: TWidget) -> None: ...

class StyleHandler(System.MulticastDelegate):
    """Delegate to handle styling a widget handler

    StyleHandler[THandler]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, handler: THandler, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, handler: THandler) -> None: ...

class Style(object):
    """Style manager for widgets

    """
    @overload
    @staticmethod
    def Add(style: str, handler: StyleWidgetHandler) -> None: ...
    @overload
    @staticmethod
    def Add(style: str, styleHandler: StyleHandler) -> None: ...
    @property
    def Provider(self) -> IStyleProvider: ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @property
    def StyleWidget(self): ...

class UnhandledExceptionEventArgs(System.EventArgs):
    """Provides data for the event that is raised when there is an exception that is not handled otherwise

    """
    def __init__(self, exception: object, isTerminating: bool): ...
    @property
    def ExceptionObject(self) -> object: ...
    @property
    def IsTerminating(self) -> bool: ...

class IControlObjectSource:
    """Interface for widgets that have a control object

    """
    @property
    def ControlObject(self) -> object: ...

class IHandlerSource:
    """Interface for widgets that have a handler

    """
    @property
    def Handler(self) -> object: ...

class ICallbackSource:
    """Interface to get the callback object for a widget

    """
    @property
    def Callback(self) -> object: ...

class Widget(object):
    """Base widget class for all objects requiring a platform-specific implementation

    """
    @overload
    def Dispose() -> None: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> System.IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @ID.setter
    def ID(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def StyleChanged(self): ...

class WidgetHandler(object):
    """Base platform handler for widgets

    WidgetHandler[TWidget]
    """
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ID(self) -> str: ...
    @property
    def NativeHandle(self) -> System.IntPtr: ...
    @property
    def Widget(self) -> TWidget: ...
    @overload
    def HandleEvent(self, id_: str, defaultEvent: bool) -> None: ...
    @overload
    def IsEventHandled(self, id_: str) -> bool: ...
    @ID.setter
    def ID(self, value: System.Void): ...

class WidgetHandler(WidgetHandler):
    """Base platform handler for
objects that have a backing platform object

    WidgetHandler[TControl, TWidget]
    """
    @property
    def Control(self) -> TControl: ...
    @property
    def HasControl(self) -> bool: ...
    @overload
    @staticmethod
    def GetControl(widget: TWidget) -> TControl: ...
    @Control.setter
    def Control(self, value: System.Void): ...

class WidgetHandler(WidgetHandler):
    """Widget handler with type-specific callback

    WidgetHandler[TControl, TWidget, TCallback]
    """
    @property
    def Callback(self) -> TCallback: ...

class IHandler:
    """Handler interface for the
class

    """
    @overload
    def GetFolderPath(self, folder: EtoSpecialFolder) -> str: ...

class ICallback:
    """> Base callback interface for all widgets

    """

class IHandler:
    """Handler interface for the
class

    """
    @property
    def ID(self) -> str: ...
    @property
    def NativeHandle(self) -> System.IntPtr: ...
    @property
    def Widget(self) -> Widget: ...
    @overload
    def HandleEvent(self, id_: str, defaultEvent: bool) -> None: ...
    @overload
    def Initialize() -> None: ...
    @ID.setter
    def ID(self, value: System.Void): ...
    @Widget.setter
    def Widget(self, value: System.Void): ...

# endregion
