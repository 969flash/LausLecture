"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ThemedAboutDialogHandler", "ThemedCollectionEditorHandler", "ThemedCollectionEditor", "ThemedColorPickerHandler", "ThemedDocumentControlHandler", "ThemedDocumentPageHandler", "ThemedExpanderHandler", "ThemedFilePickerHandler", "ThemedFontPickerHandler", "ThemedMessageBoxHandler", "ThemedMessageBox", "ThemedPropertyGridHandler", "ThemedPropertyGrid", "ThemedMenuSegmentedItemHandler", "ThemedButtonSegmentedItemHandler", "ThemedSegmentedItemHandler", "ThemedSegmentedButtonHandler", "ThemedSpinnerMode", "ThemedSpinnerDirection", "ThemedSpinnerHandler", "ThemedSplitterHandler", "ThemedStepperHandler", "ThemedTextStepperHandler"]
# endregion

# region: Imports
from Eto import Drawing
from Eto import Forms
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Eto
import System
# endregion

# region: Eto, Version=2.9.0.0

class ThemedAboutDialogHandler(Eto.WidgetHandler):
    """A themed handler for the
dialog.

    """
    def __init__(self): ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> System.System.Array[str]: ...
    @property
    def Developers(self) -> System.System.Array[str]: ...
    @property
    def Documenters(self) -> System.System.Array[str]: ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Drawing.Image: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> System.Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: System.Void): ...
    @Designers.setter
    def Designers(self, value: System.Void): ...
    @Developers.setter
    def Developers(self, value: System.Void): ...
    @Documenters.setter
    def Documenters(self, value: System.Void): ...
    @License.setter
    def License(self, value: System.Void): ...
    @Logo.setter
    def Logo(self, value: System.Void): ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: System.Void): ...
    @ProgramName.setter
    def ProgramName(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @Website.setter
    def Website(self, value: System.Void): ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: System.Void): ...
    @overload
    def ShowDialog(self, parent: Forms.Window) -> Forms.DialogResult: ...

class ThemedCollectionEditorHandler(Forms.ThemedControlHandler):
    """Handler for the
control.

    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ElementType(self) -> System.Type: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ElementType.setter
    def ElementType(self, value: System.Void): ...

class ThemedCollectionEditor(Forms.Panel):
    """Implementation of the CollectionEditor using a GridView and PropertyGrid.

    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ElementType(self) -> System.Type: ...
    @property
    def ExtraContent(self) -> Forms.Control: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ElementType.setter
    def ElementType(self, value: System.Void): ...
    @ExtraContent.setter
    def ExtraContent(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ThemedColorPickerHandler(Forms.ThemedControlHandler):
    """Themed handler for the
using a Drawable and the ColorDialog.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...

class ThemedDocumentControlHandler(Forms.ThemedContainerHandler):
    """A themed handler for the
control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def AllowNavigationButtons(self) -> bool: ...
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def CloseBackgroundColor(self) -> Drawing.Color: ...
    @property
    def CloseCornerRadius(self) -> int: ...
    @property
    def CloseForegroundColor(self) -> Drawing.Color: ...
    @property
    def CloseHighlightBackgroundColor(self) -> Drawing.Color: ...
    @property
    def CloseHighlightForegroundColor(self) -> Drawing.Color: ...
    @property
    def DisabledForegroundColor(self) -> Drawing.Color: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def TabBackgroundColor(self) -> Drawing.Color: ...
    @property
    def TabForegroundColor(self) -> Drawing.Color: ...
    @property
    def TabHighlightBackgroundColor(self) -> Drawing.Color: ...
    @property
    def TabHighlightForegroundColor(self) -> Drawing.Color: ...
    @property
    def TabHoverBackgroundColor(self) -> Drawing.Color: ...
    @property
    def TabHoverForegroundColor(self) -> Drawing.Color: ...
    @property
    def TabPadding(self) -> Drawing.Padding: ...
    @property
    def UnsavedBackgroundColor(self) -> Drawing.Color: ...
    @property
    def UseFixedTabHeight(self) -> bool: ...
    @overload
    def GetPage(self, index: int) -> Forms.DocumentPage: ...
    @overload
    def GetPageCount() -> int: ...
    @overload
    def InsertPage(self, index: int, page: Forms.DocumentPage) -> None: ...
    @overload
    def OnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def RemovePage(self, index: int) -> None: ...
    @AllowNavigationButtons.setter
    def AllowNavigationButtons(self, value: System.Void): ...
    @AllowReordering.setter
    def AllowReordering(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @CloseBackgroundColor.setter
    def CloseBackgroundColor(self, value: System.Void): ...
    @CloseCornerRadius.setter
    def CloseCornerRadius(self, value: System.Void): ...
    @CloseForegroundColor.setter
    def CloseForegroundColor(self, value: System.Void): ...
    @CloseHighlightBackgroundColor.setter
    def CloseHighlightBackgroundColor(self, value: System.Void): ...
    @CloseHighlightForegroundColor.setter
    def CloseHighlightForegroundColor(self, value: System.Void): ...
    @DisabledForegroundColor.setter
    def DisabledForegroundColor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @TabBackgroundColor.setter
    def TabBackgroundColor(self, value: System.Void): ...
    @TabForegroundColor.setter
    def TabForegroundColor(self, value: System.Void): ...
    @TabHighlightBackgroundColor.setter
    def TabHighlightBackgroundColor(self, value: System.Void): ...
    @TabHighlightForegroundColor.setter
    def TabHighlightForegroundColor(self, value: System.Void): ...
    @TabHoverBackgroundColor.setter
    def TabHoverBackgroundColor(self, value: System.Void): ...
    @TabHoverForegroundColor.setter
    def TabHoverForegroundColor(self, value: System.Void): ...
    @TabPadding.setter
    def TabPadding(self, value: System.Void): ...
    @UnsavedBackgroundColor.setter
    def UnsavedBackgroundColor(self, value: System.Void): ...
    @UseFixedTabHeight.setter
    def UseFixedTabHeight(self, value: System.Void): ...

class ThemedDocumentPageHandler(Forms.ThemedContainerHandler):
    """A themed handler for the
control.

    """
    def __init__(self): ...
    @property
    def Closable(self) -> bool: ...
    @property
    def Content(self) -> Forms.Control: ...
    @property
    def ContextMenu(self) -> Forms.ContextMenu: ...
    @property
    def HasUnsavedChanges(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Closable.setter
    def Closable(self, value: System.Void): ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @HasUnsavedChanges.setter
    def HasUnsavedChanges(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ThemedExpanderHandler(Forms.ThemedContainerHandler):
    """A themed handler for the
control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def CollapsedButtonText(self) -> str: ...
    @property
    def Content(self) -> Forms.Control: ...
    @property
    def ContextMenu(self) -> Forms.ContextMenu: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def ExpandedButtonText(self) -> str: ...
    @property
    def Header(self) -> Forms.Control: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @CollapsedButtonText.setter
    def CollapsedButtonText(self, value: System.Void): ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @ExpandedButtonText.setter
    def ExpandedButtonText(self, value: System.Void): ...
    @Header.setter
    def Header(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...

class ThemedFilePickerHandler(Forms.ThemedControlHandler):
    """A themed handler for the
control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @overload
    def ClearFilters() -> None: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def FileAction(self) -> Eto.FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @overload
    def InsertFilter(self, index: int, filter_: Forms.FileFilter) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: System.Void): ...
    @FileAction.setter
    def FileAction(self, value: System.Void): ...
    @FilePath.setter
    def FilePath(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...

class ThemedFontPickerHandler(Forms.ThemedControlHandler):
    """A themed handler for the
control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def Value(self) -> Drawing.Font: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ThemedMessageBoxHandler(Eto.WidgetHandler):
    """A themed message box handler to allow more customization and theming

    """
    def __init__(self): ...
    @property
    def Buttons(self) -> Forms.MessageBoxButtons: ...
    @property
    def Caption(self) -> str: ...
    @property
    def DefaultButton(self) -> Forms.MessageBoxDefaultButton: ...
    @property
    def Text(self) -> str: ...
    @property
    def Type(self) -> Forms.MessageBoxType: ...
    @Buttons.setter
    def Buttons(self, value: System.Void): ...
    @Caption.setter
    def Caption(self, value: System.Void): ...
    @DefaultButton.setter
    def DefaultButton(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def ShowDialog(self, parent: Forms.Control) -> Forms.DialogResult: ...

class ThemedMessageBox(Forms.Dialog):
    """Message box implementation

    """
    def __init__(self): ...
    @overload
    def AddButton(self, text: str, result: object, isDefault: bool, isAbort: bool) -> None: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Result(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> Forms.TextAlignment: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Result.setter
    def Result(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ThemedPropertyGridHandler(Forms.ThemedControlHandler):
    """Themed handler for the
control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Generic.IEnumerable: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @overload
    def Refresh() -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: System.Void): ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: System.Void): ...
    @ShowCategories.setter
    def ShowCategories(self, value: System.Void): ...
    @ShowDescription.setter
    def ShowDescription(self, value: System.Void): ...

class ThemedPropertyGrid(Forms.Panel):
    """Implementation of the PropertyGrid using the TreeGridView and PropertyCell

    """
    def __init__(self): ...
    @overload
    def CreateCellValueBinding() -> Forms.IndirectBinding: ...
    @property
    def PropertyCellTypes(self) -> Generic.IList: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Generic.IEnumerable: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @property
    def UseValueTypeDefaults(self) -> bool: ...
    @overload
    def Refresh() -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: System.Void): ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: System.Void): ...
    @ShowCategories.setter
    def ShowCategories(self, value: System.Void): ...
    @ShowDescription.setter
    def ShowDescription(self, value: System.Void): ...
    @UseValueTypeDefaults.setter
    def UseValueTypeDefaults(self, value: System.Void): ...
    @property
    def PropertyValueChanged(self): ...
    @property
    def ShowCategoriesChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ThemedMenuSegmentedItemHandler(ThemedSegmentedItemHandler):
    """Themed
handler

    """
    def __init__(self): ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Menu(self) -> Forms.ContextMenu: ...
    @property
    def MenuDelay(self) -> System.TimeSpan: ...
    @property
    def MenuIndicator(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @CanSelect.setter
    def CanSelect(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @MenuDelay.setter
    def MenuDelay(self, value: System.Void): ...
    @MenuIndicator.setter
    def MenuIndicator(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ThemedButtonSegmentedItemHandler(ThemedSegmentedItemHandler):
    """Themed
handler.

    """
    def __init__(self): ...

class ThemedSegmentedItemHandler(Eto.WidgetHandler):
    """Themed
handler which uses a
for its display.

    ThemedSegmentedItemHandler[TWidget, TCallback]
    """
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...

class ThemedSegmentedButtonHandler(Forms.ThemedControlHandler):
    """Themed
handler which uses a series of
controls in a table.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @overload
    def ClearItems() -> None: ...
    @overload
    def ClearSelection() -> None: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Generic.IEnumerable: ...
    @property
    def SelectionMode(self) -> Forms.SegmentedSelectionMode: ...
    @property
    def Spacing(self) -> int: ...
    @overload
    def GetPreferredSize(self, availableSize: Drawing.SizeF) -> Drawing.SizeF: ...
    @overload
    def InsertItem(self, index: int, item: Forms.SegmentedItem) -> None: ...
    @overload
    def OnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def RemoveItem(self, index: int, item: Forms.SegmentedItem) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @overload
    def SetItem(self, index: int, item: Forms.SegmentedItem) -> None: ...

class ThemedSpinnerMode(enum.Enum):
    Line = 0
    Circle = 1

class ThemedSpinnerDirection(enum.Enum):
    Clockwise = 1
    CounterClockwise = -1

class ThemedSpinnerHandler(Forms.ThemedControlHandler):
    """Themed spinner handler for the
control

    """
    def __init__(self): ...
    @property
    def Direction(self) -> ThemedSpinnerDirection: ...
    @property
    def DisabledAlpha(self) -> System.Single: ...
    @property
    def ElementColor(self) -> Drawing.Color: ...
    @property
    def ElementSize(self) -> System.Single: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Increment(self) -> System.Single: ...
    @property
    def LineCap(self) -> Drawing.PenLineCap: ...
    @property
    def LineThickness(self) -> System.Single: ...
    @property
    def Mode(self) -> ThemedSpinnerMode: ...
    @property
    def NumberOfElements(self) -> int: ...
    @property
    def NumberOfVisibleElements(self) -> int: ...
    @property
    def Speed(self) -> float: ...
    @overload
    def OnLoadComplete(self, e: System.EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: System.EventArgs) -> None: ...
    @Direction.setter
    def Direction(self, value: System.Void): ...
    @DisabledAlpha.setter
    def DisabledAlpha(self, value: System.Void): ...
    @ElementColor.setter
    def ElementColor(self, value: System.Void): ...
    @ElementSize.setter
    def ElementSize(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Increment.setter
    def Increment(self, value: System.Void): ...
    @LineCap.setter
    def LineCap(self, value: System.Void): ...
    @LineThickness.setter
    def LineThickness(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @NumberOfElements.setter
    def NumberOfElements(self, value: System.Void): ...
    @NumberOfVisibleElements.setter
    def NumberOfVisibleElements(self, value: System.Void): ...
    @Speed.setter
    def Speed(self, value: System.Void): ...

class ThemedSplitterHandler(Forms.ThemedContainerHandler):
    """! UNDER CONSTRUCTION ! Themed splitter handler for the
control

    """
    def __init__(self): ...
    @property
    def FixedPanel(self) -> Forms.SplitterFixedPanel: ...
    @property
    def Orientation(self) -> Forms.Orientation: ...
    @property
    def Panel1(self) -> Forms.Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Forms.Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def Splitter(self) -> Forms.Panel: ...
    @property
    def SplitterWidth(self) -> int: ...
    @FixedPanel.setter
    def FixedPanel(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Panel1.setter
    def Panel1(self, value: System.Void): ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: System.Void): ...
    @Panel2.setter
    def Panel2(self, value: System.Void): ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @RelativePosition.setter
    def RelativePosition(self, value: System.Void): ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: System.Void): ...

class ThemedStepperHandler(Forms.ThemedControlHandler):
    """Themed version of the
control for platforms that have no support for such a control.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @property
    def DownText(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Orientation(self) -> Forms.Orientation: ...
    @property
    def UpText(self) -> str: ...
    @property
    def ValidDirection(self) -> Forms.StepperValidDirections: ...
    @DownText.setter
    def DownText(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @UpText.setter
    def UpText(self, value: System.Void): ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...

class ThemedTextStepperHandler(Forms.ThemedControlHandler):
    """Themed implementation of the
control composed of a
and
.

    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @overload
    def Focus() -> None: ...
    @property
    def AutoSelectMode(self) -> Forms.AutoSelectMode: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Selection(self) -> Forms.Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def Stepper(self) -> Forms.Stepper: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> Forms.TextAlignment: ...
    @property
    def TextBox(self) -> Forms.TextBox: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def ValidDirection(self) -> Forms.StepperValidDirections: ...
    @overload
    def SelectAll() -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @CaretIndex.setter
    def CaretIndex(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Selection.setter
    def Selection(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @ShowStepper.setter
    def ShowStepper(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...

# endregion
