"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ThemedControls", "AboutDialog", "UIThreadCheckMode", "UIThreadAccessException", "Application", "BindingExtensions", "BindableBinding", "BindableExtensions", "IBindableWidgetContainer", "BindableWidget", "BindingUpdateMode", "IBinding", "Binding", "BindingChangedEventArgs", "BindingChangingEventArgs", "BindingCollection", "IColumnItem", "ColumnBinding", "DelegateBinding", "DirectBinding", "DualBindingMode", "DualBinding", "IBindable", "IIndirectBinding", "IndirectBinding", "IValueConverter", "ObjectBinding", "PropertyBinding", "PropertyBindingException", "Cell", "CheckBoxCell", "ComboBoxCell", "CellStates", "CellEventArgs", "CustomCell", "CellPaintEventArgs", "DrawableCell", "ImageTextCell", "ImageViewCell", "ProgressCell", "PropertyCellType", "PropertyCellTypeBoolean", "PropertyCellTypeString", "PropertyCellTypeNumber", "PropertyCellTypeColor", "PropertyCellTypeDateTime", "PropertyCellTypeEnum", "PropertyCellTypeDropDown", "PropertyCell", "SingleValueCell", "TextBoxCell", "Clipboard", "ColorDialog", "CheckCommand", "RadioCommand", "Command", "DialogResult", "CommonDialog", "Container", "ButtonImagePosition", "Button", "CalendarMode", "Calendar", "CheckBox", "CheckBoxList", "CollectionEditor", "ColorPicker", "ComboBox", "CommonControl", "Control", "DataStoreExtensions", "DateTimePickerMode", "DateTimePicker", "DocumentPageEventArgs", "DocumentPageClosingEventArgs", "DocumentPageReorderEventArgs", "DocumentControl", "DocumentPage", "DragEffects", "DragEventArgs", "PaintEventArgs", "Drawable", "DropDownFormatEventArgs", "DropDown", "EnumCheckBoxList", "AddValueEventArgs", "EnumDropDown", "EnumRadioButtonList", "Expander", "FilePicker", "FontPicker", "GridColumnEventArgs", "GridCellMouseEventArgs", "GridLines", "GridCellFormatEventArgs", "GridRowFormatEventArgs", "Grid", "GridColumnCollection", "GridColumn", "GridItem", "GridViewCellEventArgs", "GridCell", "GridViewDragInfo", "GridView", "GroupBox", "ImageView", "KeyEventType", "KeyEventArgs", "TextAlignment", "WrapMode", "Label", "LinkButton", "IImageListItem", "ListBox", "ListItemCollection", "ListControl", "InsertKeyMode", "ShowPromptMode", "NumericMaskedTextBox", "MaskedTextBox", "NumericMaskedTextStepper", "MaskedTextStepper", "MouseButtons", "MouseEventArgs", "CreateNativeControlArgs", "NativeControlHost", "NavigationItemEventArgs", "Navigation", "INavigationItem", "NavigationItem", "NumericStepper", "Panel", "PasswordBox", "ProgressBar", "PropertyValueChangedEventArgs", "PropertyGridTypeEditor", "PropertyGrid", "RadioButton", "RadioButtonList", "RichTextAreaFormat", "TextBufferExtensions", "ITextBuffer", "RichTextArea", "ScrollEventArgs", "BorderType", "Scrollable", "SearchBox", "Slider", "Spinner", "SplitterFixedPanel", "SplitterPositionChangingEventArgs", "Splitter", "StepperDirection", "StepperValidDirections", "StepperEventArgs", "Stepper", "TabControl", "TabPage", "TextReplacements", "TextArea", "AutoSelectMode", "TextBox", "TextChangingEventArgs", "TextControl", "TextInputEventArgs", "TextStepper", "ThemedContainerHandler", "ThemedControlHandler", "ToggleButton", "ITreeItem", "ITreeGridItem", "TreeGridItemCollection", "TreeGridItem", "ITreeGridStore", "TreeGridViewItemEventArgs", "TreeGridViewItemCancelEventArgs", "GridCellType", "TreeGridCell", "GridDragPosition", "TreeGridViewDragInfo", "TreeGridView", "TreeItemCollection", "TreeItem", "ITreeStore", "TreeViewItemEventArgs", "TreeViewItemCancelEventArgs", "TreeViewItemEditEventArgs", "WebViewLoadedEventArgs", "WebViewLoadingEventArgs", "WebViewTitleEventArgs", "WebViewNewWindowEventArgs", "WebViewMessageEventArgs", "WebView", "CursorType", "Cursor", "Cursors", "DataFormats", "IDataObject", "DataObject", "DataStoreVirtualCollection", "DialogDisplayMode", "Dialog", "DockPosition", "FileDialog", "FileFilter", "ISelectionPreserver", "ISelectable", "ISelectableControl", "SelectableFilterCollection", "FilterCollection", "FloatingForm", "FontDialog", "Form", "IDataStore", "DataStoreCollection", "IKeyboardInputSource", "IMouseInputSource", "Keys", "KeysExtensions", "Keyboard", "DynamicControl", "DynamicItem", "DynamicLayout", "DynamicRow", "DynamicTable", "DynamicGroup", "DynamicScrollable", "Layout", "PixelLayout", "HorizontalAlignment", "VerticalAlignment", "StackLayoutItem", "StackLayout", "TableCell", "TableLayout", "TableRow", "IListItem", "ListItem", "ImageListItem", "LocalizeEventArgs", "FixedMaskedTextProvider", "IMaskedTextProvider", "NumericMaskedTextProvider", "VariableMaskedTextProvider", "ButtonMenuItem", "CheckMenuItem", "IContextMenuHost", "ContextMenu", "Menu", "MenuBarSystemItems", "MenuBar", "ICommandItem", "MenuItem", "MenuItemCollection", "RadioMenuItem", "SeparatorMenuItem", "ISubmenu", "SubmenuExtensions", "SubMenuItem", "MessageBoxButtons", "MessageBoxType", "MessageBoxDefaultButton", "MessageBox", "Mouse", "Notification", "NotificationEventArgs", "OpenFileDialog", "OpenWithDialog", "Orientation", "PageSettings", "PrintDialog", "PrintDocument", "PrintPageEventArgs", "PrintPreviewDialog", "PageOrientation", "PrintSelection", "PrintSettings", "Range", "RangeExtensions", "RelayCommand", "RelayValueCommand", "SaveFileDialog", "Screen", "ButtonSegmentedItem", "MenuSegmentedItem", "SegmentedSelectionMode", "SegmentedButton", "SegmentedItem", "SegmentedItemClickEventArgs", "SegmentedItemCollection", "SelectFolderDialog", "Taskbar", "TaskbarProgressState", "ButtonToolItem", "CheckToolItem", "DropDownToolItem", "RadioToolItem", "SeparatorToolItemType", "SeparatorToolItem", "Tool", "ToolBarTextAlign", "ToolBarDock", "ToolBar", "ToolItem", "ToolItemCollection", "TrayIndicator", "UITimer", "IValueCommand", "ValueCommand", "WidgetExtensions", "WindowState", "WindowStyle", "Window", "IHandler", "ICallback", "IPositionalLayoutHandler", "ISubmenuHandler", "IScreensHandler", "IWindowHandler"]
# endregion

# region: Imports
from Eto import Drawing
from System import ComponentModel
from System import Globalization
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Linq import Expressions
from System.Runtime import CompilerServices
from System.Threading import Tasks
from System.Windows import Input
from typing import overload
import enum
import Eto
import System
# endregion

# region: Eto, Version=2.9.0.0

class AboutDialog(CommonDialog):
    """Dialog for displaying information about the application.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly): ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> System.System.Array[str]: ...
    @property
    def Developers(self) -> System.System.Array[str]: ...
    @property
    def Documenters(self) -> System.System.Array[str]: ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Drawing.Image: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> System.Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: System.Void): ...
    @Designers.setter
    def Designers(self, value: System.Void): ...
    @Developers.setter
    def Developers(self, value: System.Void): ...
    @Documenters.setter
    def Documenters(self, value: System.Void): ...
    @License.setter
    def License(self, value: System.Void): ...
    @Logo.setter
    def Logo(self, value: System.Void): ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: System.Void): ...
    @ProgramName.setter
    def ProgramName(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @Website.setter
    def Website(self, value: System.Void): ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class UIThreadCheckMode(enum.Enum):
    None_ = 0
    Warning = 1
    Error = 2

class UIThreadAccessException(System.Exception):
    """Exception thrown when a control method is accessed in a non-UI thread using
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class Application(Eto.Widget):
    """Starting point for any UI application

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, platformType: str): ...
    @overload
    def __init__(self, platform: Eto.Platform): ...
    @property
    def TerminatingEvent(self) -> str: ...
    @property
    def UnhandledExceptionEvent(self) -> str: ...
    @property
    def NotificationActivatedEvent(self) -> str: ...
    @property
    def IsActiveChangedEvent(self) -> str: ...
    @overload
    def AsyncInvoke(self, action: System.Action) -> None: ...
    @overload
    def Attach(self, context: object) -> Application: ...
    @overload
    def EnsureUIThread() -> None: ...
    @property
    def AlternateModifier(self) -> Keys: ...
    @property
    def BadgeLabel(self) -> str: ...
    @property
    def CommonModifier(self) -> Keys: ...
    @property
    def Instance(self) -> Application: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def MainForm(self) -> Form: ...
    @property
    def Name(self) -> str: ...
    @property
    def QuitIsSupported(self) -> bool: ...
    @property
    def UIThreadCheckMode(self) -> UIThreadCheckMode: ...
    @property
    def Windows(self) -> Generic.IEnumerable: ...
    @overload
    def Invoke(self, func: System.Func) -> T: ...
    @overload
    def Invoke(self, action: System.Action) -> None: ...
    @overload
    def InvokeAsync(self, action: System.Action) -> Tasks.Task: ...
    @overload
    def InvokeAsync(self, func: System.Func) -> Tasks.Task: ...
    @overload
    def Localize(self, source: object, text: str) -> str: ...
    @overload
    def Open(self, url: str) -> None: ...
    @overload
    def Quit() -> None: ...
    @overload
    def Restart() -> None: ...
    @overload
    def Run() -> None: ...
    @overload
    def Run(self, mainForm: Form) -> None: ...
    @overload
    def Run(self, dialog: Dialog) -> None: ...
    @overload
    def RunIteration() -> None: ...
    @BadgeLabel.setter
    def BadgeLabel(self, value: System.Void): ...
    @MainForm.setter
    def MainForm(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @UIThreadCheckMode.setter
    def UIThreadCheckMode(self, value: System.Void): ...
    @property
    def LocalizeString(self): ...
    @property
    def Initialized(self): ...
    @property
    def Terminating(self): ...
    @property
    def UnhandledException(self): ...
    @property
    def NotificationActivated(self): ...
    @property
    def IsActiveChanged(self): ...
    @property
    def StyleChanged(self): ...

class BindingExtensions(object):
    """Extensions for bindings

    """
    @overload
    @staticmethod
    def WhenLostFocus(binding: BindableBinding) -> BindableBinding: ...

class BindableBinding(ObjectBinding):
    """Binding object to easily bind a property of a
object, such as a
.

    BindableBinding[T, TValue]
    """
    @overload
    def __init__(self, dataItem: T, innerBinding: IndirectBinding): ...
    @overload
    def __init__(self, dataItem: T, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action): ...
    @overload
    def Bind(self, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def BindDataContext(self, propertyExpression: Expressions.Expression, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def BindDataContext(self, propertyName: str, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def BindDataContext(self, dataContextBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    def BindDataContext(self, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action, mode: DualBindingMode, defaultGetValue: TValue, defaultSetValue: TValue) -> DualBinding: ...
    @overload
    def Cast() -> BindableBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> BindableBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> BindableBinding: ...
    @overload
    def Child(self, binding: IndirectBinding) -> BindableBinding: ...
    @overload
    def Child(self, property_: Expressions.Expression) -> BindableBinding: ...
    @overload
    def Convert(self, toValue: System.Func, fromValue: System.Func) -> BindableBinding: ...
    @property
    def DataValueChanged(self): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class BindableExtensions(object):
    """Helper extensions for
objects to set up object bindings.

    """
    @overload
    @staticmethod
    def Bind(bindable: IBindable, widgetPropertyName: str, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, valueBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expressions.Expression, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, propertyName: str, source: object, sourcePropertyName: str, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expressions.Expression, source: TSource, sourceProperty: Expressions.Expression, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expressions.Expression, source: TSource, sourceBinding: IndirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, objectValue: object, objectBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(control: TWidget, controlProperty: Expressions.Expression, sourceProperty: Expressions.Expression, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(control: TWidget, controlProperty: Expressions.Expression, sourceBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(bindable: IBindable, controlPropertyName: str, dataContextPropertyName: str, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(bindable: IBindable, controlBinding: IndirectBinding, dataContextBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def DefaultIfNull(binding: BindableBinding, defaultValue: System.Nullable) -> BindableBinding: ...
    @overload
    @staticmethod
    def DefaultIfNull(binding: BindableBinding, defaultValue: TValue) -> BindableBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: DirectBinding) -> DirectBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: DirectBinding) -> DirectBinding: ...

class IBindableWidgetContainer:
    """Interface to specify that the
contains child bindable widgets that should participate in binding events.

    """
    @property
    def Children(self) -> Generic.IEnumerable: ...

class BindableWidget(Eto.Widget):
    """Base widget to support binding with the
interface.

    """
    @overload
    def FindParent(self, id_: str) -> T: ...
    @overload
    def FindParent(self, id_: str) -> Eto.Widget: ...
    @overload
    def FindParent(self, type_: System.Type, id_: str) -> Eto.Widget: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @property
    def Parent(self) -> Eto.Widget: ...
    @property
    def Parents(self) -> Generic.IEnumerable: ...
    @DataContext.setter
    def DataContext(self, value: System.Void): ...
    @IsDataContextChanging.setter
    def IsDataContextChanging(self, value: System.Void): ...
    @overload
    def Unbind() -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class BindingUpdateMode(enum.Enum):
    Source = 0
    Destination = 1

class IBinding:
    """Base binding interface

    """
    @overload
    def Unbind() -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...

class Binding(object):
    """Base class for binding between a value and another

    """
    @overload
    @staticmethod
    def AddPropertyEvent(obj: T, propertyExpression: Expressions.Expression, eh: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def AddPropertyEvent(obj: object, propertyName: str, eh: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def Delegate(getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action) -> DirectBinding: ...
    @overload
    @staticmethod
    def Delegate(getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action, defaultGetValue: TValue, defaultSetValue: TValue) -> IndirectBinding: ...
    @overload
    @staticmethod
    def ExecuteCommand(dataContext: object, commandExpression: Expressions.Expression, parameter: object) -> None: ...
    @overload
    @staticmethod
    def ExecuteCommand(dataContext: object, commandBinding: IndirectBinding, parameter: object) -> None: ...
    @overload
    @staticmethod
    def Property(propertyName: str) -> IndirectBinding: ...
    @overload
    @staticmethod
    def Property(propertyExpression: Expressions.Expression) -> IndirectBinding: ...
    @overload
    @staticmethod
    def Property(model: T, propertyExpression: Expressions.Expression) -> DirectBinding: ...
    @overload
    @staticmethod
    def Property(propertyName: str, ignoreCase: bool) -> IndirectBinding: ...
    @overload
    @staticmethod
    def RemovePropertyEvent(obj: object, eh: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def RemovePropertyEvent(obj: T, propertyExpression: Expressions.Expression, eh: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def RemovePropertyEvent(obj: object, propertyName: str, eh: System.EventHandler) -> None: ...
    @overload
    def Unbind() -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class BindingChangedEventArgs(System.EventArgs):
    """Arguments to handle when a binding value has changed

    """
    def __init__(self, value: object): ...
    @property
    def Value(self) -> object: ...

class BindingChangingEventArgs(ComponentModel.CancelEventArgs):
    """Arguments for when a binding's value is changing

    """
    def __init__(self, value: object): ...
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class BindingCollection(ObjectModel.Collection):
    """Collection of bindings

    """
    def __init__(self): ...
    @overload
    def Unbind() -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...

class IColumnItem:
    """Interface to provide a source for the

    """
    @overload
    def GetValue(self, column: int) -> object: ...
    @overload
    def SetValue(self, column: int, value: object) -> None: ...

class ColumnBinding(IndirectBinding):
    """Column/Index binding for objects implementing
or

    ColumnBinding[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def Column(self) -> int: ...
    @Column.setter
    def Column(self, value: System.Void): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class DelegateBinding(DirectBinding):
    """Direct delegate binding.

    DelegateBinding[TValue]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action): ...
    @property
    def AddChangeEvent(self) -> System.Action: ...
    @property
    def DataValue(self) -> TValue: ...
    @property
    def GetValue(self) -> System.Func: ...
    @property
    def RemoveChangeEvent(self) -> System.Action: ...
    @property
    def SetValue(self) -> System.Action: ...
    @AddChangeEvent.setter
    def AddChangeEvent(self, value: System.Void): ...
    @DataValue.setter
    def DataValue(self, value: System.Void): ...
    @GetValue.setter
    def GetValue(self, value: System.Void): ...
    @RemoveChangeEvent.setter
    def RemoveChangeEvent(self, value: System.Void): ...
    @SetValue.setter
    def SetValue(self, value: System.Void): ...
    @property
    def DataValueChanged(self): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class DelegateBinding(IndirectBinding):
    """Indirect binding using delegate methods

    DelegateBinding[T, TValue]
    """
    @overload
    def __init__(self, getValue: System.Func, setValue: System.Action, notifyProperty: str, defaultGetValue: TValue, defaultSetValue: TValue): ...
    @overload
    def __init__(self, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Func, removeChangeEvent: System.Action, defaultGetValue: TValue, defaultSetValue: TValue): ...
    @overload
    def __init__(self, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action, defaultGetValue: TValue, defaultSetValue: TValue): ...
    @overload
    def AddValueChangedHandler(self, dataItem: object, handler: System.EventHandler) -> object: ...
    @property
    def AddChangeEvent(self) -> System.Func: ...
    @property
    def DefaultGetValue(self) -> TValue: ...
    @property
    def DefaultSetValue(self) -> TValue: ...
    @property
    def GetValue(self) -> System.Func: ...
    @property
    def RemoveChangeEvent(self) -> System.Action: ...
    @property
    def SetValue(self) -> System.Action: ...
    @overload
    def RemoveValueChangedHandler(self, bindingReference: object, handler: System.EventHandler) -> None: ...
    @AddChangeEvent.setter
    def AddChangeEvent(self, value: System.Void): ...
    @DefaultGetValue.setter
    def DefaultGetValue(self, value: System.Void): ...
    @DefaultSetValue.setter
    def DefaultSetValue(self, value: System.Void): ...
    @GetValue.setter
    def GetValue(self, value: System.Void): ...
    @RemoveChangeEvent.setter
    def RemoveChangeEvent(self, value: System.Void): ...
    @SetValue.setter
    def SetValue(self, value: System.Void): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class DirectBinding(Binding):
    """Abstraction to get/set values from a provided object

    DirectBinding[T]
    """
    @property
    def DataValueChangedEvent(self) -> str: ...
    @overload
    def Cast() -> DirectBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> DirectBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> DirectBinding: ...
    @overload
    def Child(self, property_: Expressions.Expression) -> DirectBinding: ...
    @overload
    def Child(self, binding: IndirectBinding) -> DirectBinding: ...
    @overload
    def Convert(self, toValue: System.Func, fromValue: System.Func) -> DirectBinding: ...
    @property
    def DataValue(self) -> T: ...
    @DataValue.setter
    def DataValue(self, value: System.Void): ...
    @overload
    def ToBool(self, trueValue: T) -> DirectBinding: ...
    @overload
    def ToBool(self, trueValue: T, falseValue: T) -> DirectBinding: ...
    @overload
    def ToBool(self, trueValue: T, falseValue: T, nullValue: T) -> DirectBinding: ...
    @overload
    def ToType(self, invalidGetValue: System.Func, invalidSetValue: System.Func) -> DirectBinding: ...
    @property
    def DataValueChanged(self): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class DualBindingMode(enum.Enum):
    OneWay = 0
    TwoWay = 1
    OneWayToSource = 2
    OneTime = 3
    Manual = 4

class DualBinding(Binding):
    """Binding for joining two object bindings together

    DualBinding[T]
    """
    @overload
    def __init__(self, source: DirectBinding, destination: DirectBinding, mode: DualBindingMode): ...
    @overload
    def __init__(self, source: object, sourceProperty: str, destination: object, destinationProperty: str, mode: DualBindingMode): ...
    @property
    def Destination(self) -> DirectBinding: ...
    @property
    def Mode(self) -> DualBindingMode: ...
    @property
    def Source(self) -> DirectBinding: ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @overload
    def SetDestination() -> None: ...
    @overload
    def SetSource() -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Unbind() -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class IBindable:
    """Interface for objects that support binding

    """
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @DataContext.setter
    def DataContext(self, value: System.Void): ...
    @property
    def DataContextChanged(self): ...

class IIndirectBinding:
    """Base interface for an indirect binding.

    IIndirectBinding[T]
    """
    @overload
    def GetValue(self, dataItem: object) -> T: ...
    @overload
    def SetValue(self, dataItem: object, value: T) -> None: ...

class IndirectBinding(Binding):
    """Provides an indirect binding to an indeterminate source/destination

    IndirectBinding[T]
    """
    @overload
    def AddValueChangedHandler(self, dataItem: object, handler: System.EventHandler) -> object: ...
    @overload
    def AfterDelay(self, delay: float, reset: bool) -> IndirectBinding: ...
    @overload
    def AfterDelay(self, delay: System.TimeSpan, reset: bool) -> IndirectBinding: ...
    @overload
    def Cast() -> IndirectBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> IndirectBinding: ...
    @overload
    def CatchException(self, exceptionHandler: System.Func) -> IndirectBinding: ...
    @overload
    def Child(self, property_: Expressions.Expression) -> IndirectBinding: ...
    @overload
    def Child(self, binding: IndirectBinding) -> IndirectBinding: ...
    @overload
    def Convert(self, toValue: System.Func, fromValue: System.Func) -> IndirectBinding: ...
    @overload
    def Convert(self, converter: IValueConverter, conveterParameter: object, culture: Globalization.CultureInfo) -> IndirectBinding: ...
    @overload
    def Convert(self, converter: IValueConverter, propertyType: System.Type, conveterParameter: object, culture: Globalization.CultureInfo) -> IndirectBinding: ...
    @overload
    def EnumToString(self, defaultValue: T) -> IndirectBinding: ...
    @overload
    def GetValue(self, dataItem: object) -> T: ...
    @overload
    def OfType(self, defaultConvertedValue: TValue, defaultValue: T) -> IndirectBinding: ...
    @overload
    def RemoveValueChangedHandler(self, bindingReference: object, handler: System.EventHandler) -> None: ...
    @overload
    def SetValue(self, dataItem: object, value: T) -> None: ...
    @overload
    def ToBool(self, trueValue: T) -> IndirectBinding: ...
    @overload
    def ToBool(self, trueValue: T, falseValue: T) -> IndirectBinding: ...
    @overload
    def ToBool(self, trueValue: T, falseValue: T, nullValue: T) -> IndirectBinding: ...
    @overload
    def ToType(self, invalidGetValue: System.Func, invalidSetValue: System.Func) -> IndirectBinding: ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class IValueConverter:
    """Interface for providing a reusable converter for binding values

    """
    @overload
    def Convert(self, value: object, targetType: System.Type, parameter: object, culture: Globalization.CultureInfo) -> object: ...
    @overload
    def ConvertBack(self, value: object, targetType: System.Type, parameter: object, culture: Globalization.CultureInfo) -> object: ...

class ObjectBinding(ObjectBinding):
    """Binding for a particular object to get/set values from/to

    ObjectBinding[TValue]
    """
    @overload
    def __init__(self, dataItem: object, innerBinding: IndirectBinding): ...
    @overload
    def __init__(self, dataItem: object, property_: str): ...
    @property
    def DataValueChanged(self): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class ObjectBinding(DirectBinding):
    """Binding for a particular object to get/set values from/to

    ObjectBinding[T, TValue]
    """
    @overload
    def __init__(self, dataItem: T, property_: str): ...
    @overload
    def __init__(self, dataItem: T, innerBinding: IndirectBinding): ...
    @overload
    def __init__(self, dataItem: T, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action): ...
    @overload
    def Bind(self, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(self, objectValue: object, propertyName: str, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(self, objectValue: TObject, objectBinding: IndirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(self, objectValue: TObject, propertyExpression: Expressions.Expression, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(self, getValue: System.Func, setValue: System.Action, addChangeEvent: System.Action, removeChangeEvent: System.Action, mode: DualBindingMode) -> DualBinding: ...
    @property
    def DataItem(self) -> T: ...
    @property
    def DataValue(self) -> TValue: ...
    @property
    def GetDataItem(self) -> System.Func: ...
    @property
    def GettingNullValue(self) -> TValue: ...
    @property
    def InnerBinding(self) -> IndirectBinding: ...
    @property
    def SettingNullValue(self) -> TValue: ...
    @DataItem.setter
    def DataItem(self, value: System.Void): ...
    @DataValue.setter
    def DataValue(self, value: System.Void): ...
    @GetDataItem.setter
    def GetDataItem(self, value: System.Void): ...
    @GettingNullValue.setter
    def GettingNullValue(self, value: System.Void): ...
    @SettingNullValue.setter
    def SettingNullValue(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def TriggerDataValueChanged() -> None: ...
    @overload
    def Unbind() -> None: ...
    @property
    def DataValueChanged(self): ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class PropertyBinding(IndirectBinding):
    """Indirect binding to get/set values using a property of a specified object

    PropertyBinding[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property_: str, ignoreCase: bool): ...
    @overload
    def AddValueChangedHandler(self, dataItem: object, handler: System.EventHandler) -> object: ...
    @property
    def IgnoreCase(self) -> bool: ...
    @property
    def Property(self) -> str: ...
    @overload
    def RemoveValueChangedHandler(self, bindingReference: object, handler: System.EventHandler) -> None: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: System.Void): ...
    @Property.setter
    def Property(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Changing(self): ...
    @property
    def Changed(self): ...

class PropertyBindingException(System.Exception):
    """Exception when getting/setting values in a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class Cell(Eto.Widget):
    """Base class for cells in a
.

    """
    @property
    def StyleChanged(self): ...

class CheckBoxCell(SingleValueCell):
    """Cell for
controls to show and bind a boolean value to a check box.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property_: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def StyleChanged(self): ...

class ComboBoxCell(SingleValueCell):
    """Cell to present a combo box in a
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property_: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def ComboKeyBinding(self) -> IIndirectBinding: ...
    @property
    def ComboTextBinding(self) -> IIndirectBinding: ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @ComboKeyBinding.setter
    def ComboKeyBinding(self, value: System.Void): ...
    @ComboTextBinding.setter
    def ComboTextBinding(self, value: System.Void): ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class CellStates(enum.Enum):
    None_ = 0
    Selected = 1
    Editing = 2

class CellEventArgs(System.EventArgs):
    """Event arguments for events that refer to a
.

    """
    @overload
    def __init__(self, row: int, item: object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, item: object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, column: int, item: object, cellState: CellStates, control: Control): ...
    @property
    def Cell(self) -> Cell: ...
    @property
    def CellState(self) -> CellStates: ...
    @property
    def CellTextColor(self) -> Drawing.Color: ...
    @property
    def Column(self) -> int: ...
    @property
    def Control(self) -> Control: ...
    @property
    def Grid(self) -> Grid: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...
    @property
    def PropertyChanged(self): ...

class CustomCell(Cell):
    """Cell for
controls to create custom content for the cell.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def Create() -> CustomCell: ...
    @property
    def ConfigureCell(self) -> System.Action: ...
    @property
    def CreateCell(self) -> System.Func: ...
    @property
    def GetIdentifier(self) -> System.Func: ...
    @property
    def GetPreferredWidth(self) -> System.Func: ...
    @property
    def SupportsControlView(self) -> bool: ...
    @ConfigureCell.setter
    def ConfigureCell(self, value: System.Void): ...
    @CreateCell.setter
    def CreateCell(self, value: System.Void): ...
    @GetIdentifier.setter
    def GetIdentifier(self, value: System.Void): ...
    @GetPreferredWidth.setter
    def GetPreferredWidth(self, value: System.Void): ...
    @property
    def BeginEdit(self): ...
    @property
    def CancelEdit(self): ...
    @property
    def CommitEdit(self): ...
    @property
    def Paint(self): ...
    @property
    def StyleChanged(self): ...

class CellPaintEventArgs(PaintEventArgs):
    """Event arguments for a
or
event.

    """
    def __init__(self, graphics: Drawing.Graphics, clipRectangle: Drawing.RectangleF, cellState: CellStates, item: object): ...
    @property
    def CellState(self) -> CellStates: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> object: ...

class DrawableCell(Cell):
    """A cell that is rendered by custom code.

    """
    def __init__(self): ...
    @property
    def Paint(self): ...
    @property
    def StyleChanged(self): ...

class ImageTextCell(Cell):
    """Cell for
controls to show image and text in one cell.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, imageProperty: str, textProperty: str): ...
    @overload
    def __init__(self, imageColumn: int, textColumn: int): ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @property
    def ImageInterpolation(self) -> Drawing.ImageInterpolation: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @ImageBinding.setter
    def ImageBinding(self, value: System.Void): ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @TextBinding.setter
    def TextBinding(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class ImageViewCell(SingleValueCell):
    """Cell for
controls to show a single
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property_: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def ImageInterpolation(self) -> Drawing.ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class ProgressCell(SingleValueCell):
    """Cell for
controls to show and bind a int value to a progress bar.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def __init__(self, property_: str, ignoreCase: bool): ...
    @property
    def StyleChanged(self): ...

class PropertyCellType(object):
    """Base type for a
to display cell contents for a particular type.

    """
    @overload
    def CanDisplay(self, itemType: object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...

class PropertyCellType(PropertyCellType):
    """Base property cell type for a given type

    PropertyCellType[T]
    """
    @overload
    def CanDisplay(self, itemType: object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @ItemBinding.setter
    def ItemBinding(self, value: System.Void): ...

class PropertyCellTypeBoolean(PropertyCellType):
    """Property cell type to edit boolean values using a check box and a True/False label.

    """
    def __init__(self): ...
    @property
    def ItemThreeStateBinding(self) -> IndirectBinding: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemThreeStateBinding.setter
    def ItemThreeStateBinding(self, value: System.Void): ...

class PropertyCellTypeString(PropertyCellType):
    """Property cell type to edit string values.

    """
    def __init__(self): ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...

class PropertyCellTypeNumber(PropertyCellType):
    """Property cell type to edit int values.

    PropertyCellTypeNumber[T]
    """
    def __init__(self): ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...

class PropertyCellTypeColor(PropertyCellType):
    """Property cell type to edit a color value with a color picker and optional hex masked value.

    """
    def __init__(self): ...
    @property
    def HexEditable(self) -> bool: ...
    @property
    def ShowAlpha(self) -> bool: ...
    @property
    def ShowHex(self) -> bool: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @HexEditable.setter
    def HexEditable(self, value: System.Void): ...
    @ShowAlpha.setter
    def ShowAlpha(self, value: System.Void): ...
    @ShowHex.setter
    def ShowHex(self, value: System.Void): ...

class PropertyCellTypeDateTime(PropertyCellType):
    """Property cell type to edit a cell value using a date/time picker.

    """
    def __init__(self): ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @Mode.setter
    def Mode(self, value: System.Void): ...

class PropertyCellTypeEnum(PropertyCellType):
    """Property cell type to edit an enum value using an
.

    PropertyCellTypeEnum[T]
    """
    def __init__(self): ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...

class PropertyCellTypeNumber(PropertyCellType):
    """Property cell type to edit any type of number

    """
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemTypeBinding.setter
    def ItemTypeBinding(self, value: System.Void): ...

class PropertyCellTypeEnum(PropertyCellType):
    """Property cell type to display any type of enumeration

    """
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemTypeBinding.setter
    def ItemTypeBinding(self, value: System.Void): ...

class PropertyCellTypeDropDown(PropertyCellType):
    """Property cell type drop down.

    """
    def __init__(self): ...
    @property
    def ItemKeyBinding(self) -> IndirectBinding: ...
    @property
    def ItemsBinding(self) -> IndirectBinding: ...
    @property
    def ItemTextBinding(self) -> IndirectBinding: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: System.Void): ...
    @ItemsBinding.setter
    def ItemsBinding(self, value: System.Void): ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: System.Void): ...

class PropertyCell(CustomCell):
    """A custom cell implementation that implements a generic method of showing different types of controls on a per row basis.

    """
    def __init__(self): ...
    @property
    def TypeBinding(self) -> IIndirectBinding: ...
    @property
    def Types(self) -> Generic.IList: ...
    @TypeBinding.setter
    def TypeBinding(self, value: System.Void): ...
    @property
    def BeginEdit(self): ...
    @property
    def CancelEdit(self): ...
    @property
    def CommitEdit(self): ...
    @property
    def Paint(self): ...
    @property
    def StyleChanged(self): ...

class SingleValueCell(Cell):
    """Base class for cells that bind to a single value.

    SingleValueCell[T]
    """
    @property
    def Binding(self) -> IIndirectBinding: ...
    @Binding.setter
    def Binding(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class TextBoxCell(SingleValueCell):
    """Cell for a text box in a
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property_: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class Clipboard(Eto.Widget):
    """Object to handle the system clipboard. Use
to avoid creating multiple copies of this object.

    """
    def __init__(self): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, type_: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Instance(self) -> Clipboard: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> System.System.Array[str]: ...
    @property
    def Uris(self) -> System.System.Array[System.Uri]: ...
    @overload
    def GetData(self, type_: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetDataStream(self, type_: str) -> IO.Stream: ...
    @overload
    def GetObject(self, type_: str) -> T: ...
    @overload
    def GetObject(self, type_: str) -> object: ...
    @overload
    def GetObject(self, type_: str, objectType: System.Type) -> object: ...
    @overload
    def GetString(self, type_: str) -> str: ...
    @Html.setter
    def Html(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Uris.setter
    def Uris(self, value: System.Void): ...
    @overload
    def SetData(self, value: System.System.Array[System.Byte], type_: str) -> None: ...
    @overload
    def SetDataStream(self, stream: IO.Stream, type_: str) -> None: ...
    @overload
    def SetObject(self, value: object, type_: str) -> None: ...
    @overload
    def SetString(self, value: str, type_: str) -> None: ...
    @property
    def StyleChanged(self): ...

class ColorDialog(CommonDialog):
    """Dialog for choosing a color

    """
    def __init__(self): ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @property
    def ColorChanged(self): ...
    @property
    def StyleChanged(self): ...

class CheckCommand(Command):
    """Command for a menu/tool item that can be checked on or off.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: System.EventHandler): ...
    @overload
    def CreateMenuItem() -> MenuItem: ...
    @overload
    def CreateToolItem() -> ToolItem: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def Executed(self): ...
    @property
    def DataContextChanged(self): ...

class RadioCommand(CheckCommand):
    """Command for a radio button for a tool or menu item.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: System.EventHandler): ...
    @overload
    def CreateMenuItem() -> MenuItem: ...
    @overload
    def CreateToolItem() -> ToolItem: ...
    @property
    def Controller(self) -> RadioCommand: ...
    @Controller.setter
    def Controller(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def Executed(self): ...
    @property
    def DataContextChanged(self): ...

class Command(object):
    """Base command for use on either
or

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: System.EventHandler): ...
    @overload
    def CreateMenuItem() -> MenuItem: ...
    @overload
    def CreateToolItem() -> ToolItem: ...
    @overload
    def Execute() -> None: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def DelegatedCommand(self) -> Input.ICommand: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @property
    def MenuText(self) -> str: ...
    @property
    def Parent(self) -> IBindable: ...
    @property
    def Properties(self) -> Eto.PropertyStore: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolBarText(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @DataContext.setter
    def DataContext(self, value: System.Void): ...
    @DelegatedCommand.setter
    def DelegatedCommand(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ID.setter
    def ID(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @IsDataContextChanging.setter
    def IsDataContextChanging(self, value: System.Void): ...
    @MenuText.setter
    def MenuText(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Shortcut.setter
    def Shortcut(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @ToolBarText.setter
    def ToolBarText(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @property
    def EnabledChanged(self): ...
    @property
    def Executed(self): ...
    @property
    def DataContextChanged(self): ...

class DialogResult(enum.Enum):
    None_ = 0
    Ok = 1
    Cancel = 2
    Yes = 3
    No = 4
    Abort = 5
    Ignore = 6
    Retry = 7

class CommonDialog(Eto.Widget):
    """Base class for common dialogs

    """
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @property
    def StyleChanged(self): ...

class Container(Control):
    """Base class for controls that contain children controls

    """
    @overload
    def FindChild(self, id_: str) -> Control: ...
    @overload
    def FindChild(self, id_: str) -> T: ...
    @overload
    def FindChild(self, type_: System.Type, id_: str) -> Control: ...
    @property
    def Children(self) -> Generic.IEnumerable: ...
    @property
    def ClientSize(self) -> Drawing.Size: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def StyleProvider(self) -> Eto.IStyleProvider: ...
    @property
    def Styles(self) -> Eto.DefaultStyleProvider: ...
    @property
    def VisualChildren(self) -> Generic.IEnumerable: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Generic.IEnumerable) -> None: ...
    @overload
    def RemoveAll() -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: System.Void): ...
    @StyleProvider.setter
    def StyleProvider(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ButtonImagePosition(enum.Enum):
    Left = 0
    Right = 1
    Above = 2
    Below = 3
    Overlay = 4

class Button(TextControl):
    """A standard button control.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: System.EventHandler): ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def Height(self) -> int: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Width(self) -> int: ...
    @overload
    def PerformClick() -> None: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImagePosition.setter
    def ImagePosition(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CalendarMode(enum.Enum):
    Single = 0
    Range = 1

class Calendar(Control):
    """Control to show a Calendar, where the user can select either a single date or a range of dates.

    """
    def __init__(self): ...
    @property
    def SelectedDateChangedEvent(self) -> str: ...
    @property
    def SelectedRangeChangedEvent(self) -> str: ...
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def Mode(self) -> CalendarMode: ...
    @property
    def SelectedDate(self) -> System.DateTime: ...
    @property
    def SelectedRange(self) -> Range: ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @SelectedDate.setter
    def SelectedDate(self, value: System.Void): ...
    @SelectedRange.setter
    def SelectedRange(self, value: System.Void): ...
    @property
    def SelectedDateChanged(self): ...
    @property
    def SelectedRangeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CheckBox(TextControl):
    """A control that shows a two or three state check box.

    """
    def __init__(self): ...
    @property
    def Checked(self) -> System.Nullable: ...
    @property
    def CheckedBinding(self) -> BindableBinding: ...
    @property
    def ThreeState(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @ThreeState.setter
    def ThreeState(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CheckBoxList(Panel):
    """A control that shows a list of check boxes.

    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SelectedKeys(self) -> Generic.IEnumerable: ...
    @property
    def SelectedKeysBinding(self) -> BindableBinding: ...
    @property
    def SelectedValues(self) -> Generic.IEnumerable: ...
    @property
    def SelectedValuesBinding(self) -> BindableBinding: ...
    @property
    def Spacing(self) -> Drawing.Size: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: System.Void): ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: System.Void): ...
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @SelectedKeys.setter
    def SelectedKeys(self, value: System.Void): ...
    @SelectedValues.setter
    def SelectedValues(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @property
    def SelectedValuesChanged(self): ...
    @property
    def SelectedKeysChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CollectionEditor(Control):
    """Control to edit a collection of objects

    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ElementType(self) -> System.Type: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ElementType.setter
    def ElementType(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ColorPicker(Control):
    """A control to show and pick a color.

    """
    def __init__(self): ...
    @property
    def ColorChangedEvent(self) -> str: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @property
    def Value(self) -> Drawing.Color: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ComboBox(DropDown):
    """Presents a combination of an editable text box and drop down to select from a list of items and enter text.

    """
    def __init__(self): ...
    @property
    def TextChangedEvent(self) -> str: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @AutoComplete.setter
    def AutoComplete(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def TextChanged(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def FormatItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CommonControl(Control):
    """Base class for controls with common functionality

    """
    @property
    def Font(self) -> Drawing.Font: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Control(BindableWidget):
    """Base for all visual UI elements

    """
    def __init__(self, handler: IHandler): ...
    @property
    def SizeChangedEvent(self) -> str: ...
    @property
    def KeyDownEvent(self) -> str: ...
    @property
    def KeyUpEvent(self) -> str: ...
    @property
    def TextInputEvent(self) -> str: ...
    @property
    def MouseDownEvent(self) -> str: ...
    @property
    def MouseUpEvent(self) -> str: ...
    @property
    def MouseMoveEvent(self) -> str: ...
    @property
    def MouseLeaveEvent(self) -> str: ...
    @property
    def MouseEnterEvent(self) -> str: ...
    @property
    def MouseDoubleClickEvent(self) -> str: ...
    @property
    def MouseWheelEvent(self) -> str: ...
    @property
    def GotFocusEvent(self) -> str: ...
    @property
    def LostFocusEvent(self) -> str: ...
    @property
    def ShownEvent(self) -> str: ...
    @property
    def DragDropEvent(self) -> str: ...
    @property
    def DragOverEvent(self) -> str: ...
    @property
    def DragEnterEvent(self) -> str: ...
    @property
    def DragLeaveEvent(self) -> str: ...
    @property
    def DragEndEvent(self) -> str: ...
    @property
    def EnabledChangedEvent(self) -> str: ...
    @overload
    def AttachNative() -> None: ...
    @overload
    def CaptureMouse() -> bool: ...
    @overload
    def Detach() -> None: ...
    @overload
    def DetachNative() -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Drawing.Image, cursorOffset: Drawing.PointF) -> None: ...
    @overload
    def FindParent(self, id_: str) -> Container: ...
    @overload
    def FindParent(self, type_: System.Type, id_: str) -> Container: ...
    @overload
    def Focus() -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def SupportedPlatformCommands(self) -> Generic.IEnumerable: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Generic.IEnumerable: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetPreferredSize() -> Drawing.SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: Drawing.SizeF) -> Drawing.SizeF: ...
    @overload
    def Invalidate() -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Drawing.Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Drawing.Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def PointToScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def Print() -> None: ...
    @overload
    def RectangleFromScreen(self, rect: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def ReleaseMouseCapture() -> None: ...
    @overload
    def ResumeLayout() -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def SuspendLayout() -> None: ...
    @overload
    def TriggerStyleChanged() -> None: ...
    @overload
    def UpdateLayout() -> None: ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DataStoreExtensions(object):
    """Extension methods for the

    """
    @overload
    @staticmethod
    def GetExpandedRowCount(store: IDataStore, index: int) -> int: ...
    @overload
    @staticmethod
    def GetRowOfIndexPath(store: IDataStore, indexPath: System.System.Array[int]) -> int: ...

class DateTimePickerMode(enum.Enum):
    Date = 1
    Time = 2
    DateTime = 3

class DateTimePicker(CommonControl):
    """A control that allows the user to select a date and/or a time.

    """
    def __init__(self): ...
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def Value(self) -> System.Nullable: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DocumentPageEventArgs(System.EventArgs):
    """Arguments for the
to get the current page.

    """
    def __init__(self, page: DocumentPage): ...
    @property
    def Page(self) -> DocumentPage: ...

class DocumentPageClosingEventArgs(ComponentModel.CancelEventArgs):
    """Arguments for the
to get the current page.

    """
    def __init__(self, page: DocumentPage): ...
    @property
    def Page(self) -> DocumentPage: ...

class DocumentPageReorderEventArgs(DocumentPageEventArgs):
    """Arguments for the
when reordering pages.

    """
    def __init__(self, page: DocumentPage, oldIndex: int, newIndex: int): ...
    @property
    def NewIndex(self) -> int: ...
    @property
    def OldIndex(self) -> int: ...

class DocumentControl(Container):
    """Control to present multiple pages with tab selection and optional reordering and tab closing.

    """
    def __init__(self): ...
    @property
    def PageReorderedEvent(self) -> str: ...
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def Pages(self) -> Generic.IList: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedPage(self) -> DocumentPage: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedPage.setter
    def SelectedPage(self, value: System.Void): ...
    @property
    def PageClosed(self): ...
    @property
    def PageClosing(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def PageReordered(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DocumentPage(Panel):
    """Control for a page in a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: System.Nullable): ...
    @property
    def Closable(self) -> bool: ...
    @property
    def HasUnsavedChanges(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @Closable.setter
    def Closable(self, value: System.Void): ...
    @HasUnsavedChanges.setter
    def HasUnsavedChanges(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def Closed(self): ...
    @property
    def Click(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DragEffects(enum.Enum):
    None_ = 0
    Copy = 1
    Move = 2
    Link = 4
    All = 7

class DragEventArgs(System.EventArgs):
    """Drag/Drop event arguments.

    """
    def __init__(self, source: Control, data: DataObject, allowedEffects: DragEffects, location: Drawing.PointF, modifiers: Keys, buttons: MouseButtons, controlObject: object): ...
    @property
    def AllowedEffects(self) -> DragEffects: ...
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Data(self) -> DataObject: ...
    @property
    def Effects(self) -> DragEffects: ...
    @property
    def Location(self) -> Drawing.PointF: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Source(self) -> Control: ...
    @property
    def SupportsDropDescription(self) -> bool: ...
    @Effects.setter
    def Effects(self, value: System.Void): ...
    @overload
    def SetDropDescription(self, format_: str, inner: str) -> None: ...

class PaintEventArgs(System.EventArgs):
    """Event arguments when painting using the
event

    """
    def __init__(self, graphics: Drawing.Graphics, clipRectangle: Drawing.RectangleF): ...
    @property
    def ClipRectangle(self) -> Drawing.RectangleF: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...

class Drawable(Panel):
    """Control with a paintable user interface

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, largeCanvas: bool): ...
    @overload
    def CreateGraphics() -> Drawing.Graphics: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: System.Void): ...
    @overload
    def Update(self, region: Drawing.Rectangle) -> None: ...
    @property
    def Paint(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DropDownFormatEventArgs(System.EventArgs):
    """Arguments for formatting items in a drop down using the
event.

    """
    def __init__(self, item: object, row: int, font: Drawing.Font): ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def IsFontSet(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...
    @Font.setter
    def Font(self, value: System.Void): ...

class DropDown(ListControl):
    """Presents a drop down to select from a list of items.

    """
    def __init__(self): ...
    @property
    def DropDownOpeningEvent(self) -> str: ...
    @property
    def DropDownClosedEvent(self) -> str: ...
    @property
    def FormatItemEvent(self) -> str: ...
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @property
    def ShowBorder(self) -> bool: ...
    @ItemImageBinding.setter
    def ItemImageBinding(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def FormatItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class EnumCheckBoxList(CheckBoxList):
    """Check box list based on an enumeration

    EnumCheckBoxList[T]
    """
    def __init__(self): ...
    @property
    def GetText(self) -> System.Func: ...
    @property
    def IncludeNoneFlag(self) -> bool: ...
    @property
    def SelectedValues(self) -> Generic.IEnumerable: ...
    @property
    def SelectedValuesBinding(self) -> BindableBinding: ...
    @property
    def SortAlphabetically(self) -> bool: ...
    @GetText.setter
    def GetText(self, value: System.Void): ...
    @IncludeNoneFlag.setter
    def IncludeNoneFlag(self, value: System.Void): ...
    @SelectedValues.setter
    def SelectedValues(self, value: System.Void): ...
    @SortAlphabetically.setter
    def SortAlphabetically(self, value: System.Void): ...
    @property
    def AddValue(self): ...
    @property
    def SelectedValuesChanged(self): ...
    @property
    def SelectedKeysChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class AddValueEventArgs(System.EventArgs):
    """Arguments for controlling whether values should be added to a list or control

    AddValueEventArgs[T]
    """
    def __init__(self, value: T, shouldAdd: bool): ...
    @property
    def ShouldAdd(self) -> bool: ...
    @property
    def Value(self) -> T: ...
    @ShouldAdd.setter
    def ShouldAdd(self, value: System.Void): ...

class EnumDropDown(DropDown):
    """Combo box for an enumeration

    EnumDropDown[T]
    """
    def __init__(self): ...
    @property
    def GetText(self) -> System.Func: ...
    @property
    def SelectedValue(self) -> T: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def SortAlphabetically(self) -> bool: ...
    @GetText.setter
    def GetText(self, value: System.Void): ...
    @SelectedValue.setter
    def SelectedValue(self, value: System.Void): ...
    @SortAlphabetically.setter
    def SortAlphabetically(self, value: System.Void): ...
    @property
    def AddValue(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def FormatItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class EnumRadioButtonList(RadioButtonList):
    """Radio button list based on an enumeration

    EnumRadioButtonList[T]
    """
    def __init__(self): ...
    @property
    def GetText(self) -> System.Func: ...
    @property
    def SelectedValue(self) -> T: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def SortAlphabetically(self) -> bool: ...
    @GetText.setter
    def GetText(self, value: System.Void): ...
    @SelectedValue.setter
    def SelectedValue(self, value: System.Void): ...
    @SortAlphabetically.setter
    def SortAlphabetically(self, value: System.Void): ...
    @property
    def AddValue(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Expander(Panel):
    """A control that provides a way to expand or collapse a panel. It includes a header and button.

    """
    def __init__(self): ...
    @property
    def ExpandedChangedEvent(self) -> str: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Header.setter
    def Header(self, value: System.Void): ...
    @property
    def ExpandedChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class FilePicker(Control):
    """A control that allows the user to interact with files and folders. It can be used to save files, select files or select directories.

    """
    def __init__(self): ...
    @property
    def FilePathChangedEvent(self) -> str: ...
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def FileAction(self) -> Eto.FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Filters(self) -> ObjectModel.Collection: ...
    @property
    def Title(self) -> str: ...
    @CurrentFilter.setter
    def CurrentFilter(self, value: System.Void): ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: System.Void): ...
    @FileAction.setter
    def FileAction(self, value: System.Void): ...
    @FilePath.setter
    def FilePath(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @property
    def FilePathChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class FontPicker(Control):
    """Control to show and pick a font.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, font: Drawing.Font): ...
    @property
    def ValueChangedEvent(self) -> str: ...
    @property
    def Value(self) -> Drawing.Font: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class GridColumnEventArgs(System.EventArgs):
    """Event arguments for
events relating to a specific column

    """
    def __init__(self, column: GridColumn): ...
    @property
    def Column(self) -> GridColumn: ...

class GridCellMouseEventArgs(MouseEventArgs):
    """Event arguments for cell-based events of a
triggered by the mouse.

    """
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: object, buttons: MouseButtons, modifiers: Keys, location: Drawing.PointF, delta: System.Nullable, pressure: System.Single): ...
    @property
    def Column(self) -> int: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...

class GridLines(enum.Enum):
    None_ = 0
    Horizontal = 1
    Vertical = 2
    Both = 3

class GridCellFormatEventArgs(System.EventArgs):
    """Event arguments to format a cell in a

    """
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def Column(self) -> GridColumn: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForegroundColor(self) -> Drawing.Color: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: System.Void): ...

class GridRowFormatEventArgs(System.EventArgs):
    """Event arguments for formatting a row in a
using the
event.

    """
    def __init__(self, item: object, row: int): ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...

class Grid(Control):
    """Base grid control to display items in columns and rows

    """
    @property
    def CellEditingEvent(self) -> str: ...
    @property
    def CellEditedEvent(self) -> str: ...
    @property
    def CellClickEvent(self) -> str: ...
    @property
    def CellDoubleClickEvent(self) -> str: ...
    @property
    def SelectionChangedEvent(self) -> str: ...
    @property
    def ColumnHeaderClickEvent(self) -> str: ...
    @property
    def CellFormattingEvent(self) -> str: ...
    @property
    def RowFormattingEvent(self) -> str: ...
    @property
    def ColumnOrderChangedEvent(self) -> str: ...
    @property
    def ColumnWidthChangedEvent(self) -> str: ...
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit() -> bool: ...
    @overload
    def CommitEdit() -> bool: ...
    @property
    def AllowColumnReordering(self) -> bool: ...
    @property
    def AllowEmptySelection(self) -> bool: ...
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def Columns(self) -> GridColumnCollection: ...
    @property
    def GridLines(self) -> GridLines: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def RowHeight(self) -> int: ...
    @property
    def SelectedItem(self) -> object: ...
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @property
    def SelectedRow(self) -> int: ...
    @property
    def SelectedRows(self) -> Generic.IEnumerable: ...
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @AllowColumnReordering.setter
    def AllowColumnReordering(self, value: System.Void): ...
    @AllowEmptySelection.setter
    def AllowEmptySelection(self, value: System.Void): ...
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self, value: System.Void): ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @GridLines.setter
    def GridLines(self, value: System.Void): ...
    @RowHeight.setter
    def RowHeight(self, value: System.Void): ...
    @SelectedRow.setter
    def SelectedRow(self, value: System.Void): ...
    @SelectedRows.setter
    def SelectedRows(self, value: System.Void): ...
    @ShowHeader.setter
    def ShowHeader(self, value: System.Void): ...
    @overload
    def UnselectAll() -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...
    @property
    def CellEditing(self): ...
    @property
    def CellEdited(self): ...
    @property
    def CellClick(self): ...
    @property
    def CellDoubleClick(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def ColumnHeaderClick(self): ...
    @property
    def CellFormatting(self): ...
    @property
    def RowFormatting(self): ...
    @property
    def SelectedItemsChanged(self): ...
    @property
    def SelectedRowsChanged(self): ...
    @property
    def ColumnOrderChanged(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class GridColumnCollection(ObjectModel.ObservableCollection):
    """Column collection for the

    """
    def __init__(self): ...
    @property
    def CollectionChanged(self): ...

class GridColumn(Eto.Widget):
    """Grid column definition for a

    """
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def CellToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def DataCell(self) -> Cell: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def Editable(self) -> bool: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @property
    def HeaderToolTip(self) -> str: ...
    @property
    def MaxWidth(self) -> int: ...
    @property
    def MinWidth(self) -> int: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Sortable(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @CellToolTipBinding.setter
    def CellToolTipBinding(self, value: System.Void): ...
    @DataCell.setter
    def DataCell(self, value: System.Void): ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: System.Void): ...
    @Editable.setter
    def Editable(self, value: System.Void): ...
    @Expand.setter
    def Expand(self, value: System.Void): ...
    @HeaderText.setter
    def HeaderText(self, value: System.Void): ...
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self, value: System.Void): ...
    @HeaderToolTip.setter
    def HeaderToolTip(self, value: System.Void): ...
    @MaxWidth.setter
    def MaxWidth(self, value: System.Void): ...
    @MinWidth.setter
    def MinWidth(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @Sortable.setter
    def Sortable(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class GridItem(object):
    """Helper for an item in a
to store values in an array.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: System.System.Array[object]): ...
    @property
    def Tag(self) -> object: ...
    @property
    def Values(self) -> System.System.Array[object]: ...
    @overload
    def GetValue(self, column: int) -> object: ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Values.setter
    def Values(self, value: System.Void): ...
    @overload
    def SetValue(self, column: int, value: object) -> None: ...

class GridViewCellEventArgs(System.EventArgs):
    """Event arguments for cell-based events of a

    """
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: object): ...
    @property
    def Column(self) -> int: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> int: ...

class GridCell(object):
    """Information of a cell in the

    """
    def __init__(self, column: GridColumn, columnIndex: int, rowIndex: int, type_: GridCellType, item: object): ...
    @property
    def Column(self) -> GridColumn: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Type(self) -> GridCellType: ...

class GridViewDragInfo(object):
    """Extra drag information when dragging to a
.

    """
    def __init__(self, control: GridView, item: object, index: int, position: GridDragPosition): ...
    @property
    def Control(self) -> GridView: ...
    @property
    def Index(self) -> int: ...
    @property
    def InsertIndex(self) -> int: ...
    @property
    def IsChanged(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Position(self) -> GridDragPosition: ...
    @overload
    def RestrictToInsert() -> None: ...
    @overload
    def RestrictToOver() -> None: ...
    @Index.setter
    def Index(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...

class GridView(GridView):
    """Grid view with a data store of a specific type

    GridView[T]
    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def SelectedItem(self) -> T: ...
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @property
    def CellEditing(self): ...
    @property
    def CellEdited(self): ...
    @property
    def CellClick(self): ...
    @property
    def CellDoubleClick(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def ColumnHeaderClick(self): ...
    @property
    def CellFormatting(self): ...
    @property
    def RowFormatting(self): ...
    @property
    def SelectedItemsChanged(self): ...
    @property
    def SelectedRowsChanged(self): ...
    @property
    def ColumnOrderChanged(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class GridView(Grid):
    """Control to present data in a grid in columns and rows.

    """
    def __init__(self): ...
    @property
    def CanDeleteItem(self) -> System.Func: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def DeleteConfirmationTitle(self) -> System.Func: ...
    @property
    def DeleteItemHandler(self) -> System.Func: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @property
    def SelectionPreserver(self) -> ISelectionPreserver: ...
    @property
    def ShowCellBorders(self) -> bool: ...
    @overload
    def GetCellAt(self, location: Drawing.PointF) -> GridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    @overload
    def ReloadData(self, rows: Generic.IEnumerable) -> None: ...
    @overload
    def ReloadData(self, range_: Range) -> None: ...
    @overload
    def ReloadData(self, row: int) -> None: ...
    @CanDeleteItem.setter
    def CanDeleteItem(self, value: System.Void): ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @DeleteConfirmationTitle.setter
    def DeleteConfirmationTitle(self, value: System.Void): ...
    @DeleteItemHandler.setter
    def DeleteItemHandler(self, value: System.Void): ...
    @ShowCellBorders.setter
    def ShowCellBorders(self, value: System.Void): ...
    @property
    def CellEditing(self): ...
    @property
    def CellEdited(self): ...
    @property
    def CellClick(self): ...
    @property
    def CellDoubleClick(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def ColumnHeaderClick(self): ...
    @property
    def CellFormatting(self): ...
    @property
    def RowFormatting(self): ...
    @property
    def SelectedItemsChanged(self): ...
    @property
    def SelectedRowsChanged(self): ...
    @property
    def ColumnOrderChanged(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class GroupBox(Panel):
    """Interface elment to group controls inside a box with an optional title

    """
    def __init__(self): ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ImageView(Control):
    """Control to display an image

    """
    def __init__(self): ...
    @property
    def Image(self) -> Drawing.Image: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class KeyEventType(enum.Enum):
    KeyDown = 0
    KeyUp = 1

class KeyEventArgs(System.EventArgs):
    """Arguments for key press events

    """
    def __init__(self, keyData: Keys, keyEventType: KeyEventType, keyChar: System.Nullable): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Application(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def IsChar(self) -> bool: ...
    @property
    def Key(self) -> Keys: ...
    @property
    def KeyChar(self) -> System.Char: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyEventType(self) -> KeyEventType: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    @overload
    def IsKeyDown(self, key: Keys, modifier: System.Nullable) -> bool: ...
    @overload
    def IsKeyUp(self, key: Keys, modifier: System.Nullable) -> bool: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class TextAlignment(enum.Enum):
    Left = 0
    Center = 1
    Right = 2

class WrapMode(enum.Enum):
    None_ = 0
    Word = 1
    Character = 2

class Label(TextControl):
    """Displays a string of text on the form

    """
    def __init__(self): ...
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlign(self) -> VerticalAlign: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @property
    def Wrap(self) -> WrapMode: ...
    @HorizontalAlign.setter
    def HorizontalAlign(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @VerticalAlign.setter
    def VerticalAlign(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class LinkButton(TextControl):
    """Button that is visually represented like a hyperlink on a web page.

    """
    def __init__(self): ...
    @property
    def ClickEvent(self) -> str: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def DisabledTextColor(self) -> Drawing.Color: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @DisabledTextColor.setter
    def DisabledTextColor(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class IImageListItem:
    """Represents a list item that can have an image associated with each item.

    """
    @property
    def Image(self) -> Drawing.Image: ...

class ListBox(ListControl):
    """Control to show a list of items that the user can select

    """
    def __init__(self): ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @ImageBinding.setter
    def ImageBinding(self, value: System.Void): ...
    @ItemImageBinding.setter
    def ItemImageBinding(self, value: System.Void): ...
    @property
    def Activated(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ListItemCollection(Eto.ExtendedObservableCollection):
    """A collection of
objects for use with
objects

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: Generic.IEnumerable): ...
    @overload
    def Add(self, text: str) -> None: ...
    @overload
    def Add(self, text: str, key: str) -> None: ...
    @property
    def CollectionChanged(self): ...

class ListControl(CommonControl):
    """Base control binding to a list of items

    """
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedKey(self) -> str: ...
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @property
    def SelectedValue(self) -> object: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: System.Void): ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: System.Void): ...
    @KeyBinding.setter
    def KeyBinding(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedKey.setter
    def SelectedKey(self, value: System.Void): ...
    @SelectedValue.setter
    def SelectedValue(self, value: System.Void): ...
    @TextBinding.setter
    def TextBinding(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class InsertKeyMode(enum.Enum):
    Insert = 0
    Overwrite = 1
    Toggle = 2

class ShowPromptMode(enum.Enum):
    Always = 0
    OnFocus = 1
    Never = 2

class NumericMaskedTextBox(MaskedTextBox):
    """Masked text box with a variable length numeric mask.

    NumericMaskedTextBox[T]
    """
    def __init__(self): ...
    @property
    def AllowDecimal(self) -> bool: ...
    @property
    def AllowSign(self) -> bool: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def Provider(self) -> NumericMaskedTextProvider: ...
    @AllowDecimal.setter
    def AllowDecimal(self, value: System.Void): ...
    @AllowSign.setter
    def AllowSign(self, value: System.Void): ...
    @Culture.setter
    def Culture(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MaskedTextBox(MaskedTextBox):
    """Masked text box that provides a value converted to/from text

    MaskedTextBox[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def Value(self) -> T: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MaskedTextBox(TextBox):
    """Text box with masking capabilities.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwrite(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @InsertMode.setter
    def InsertMode(self, value: System.Void): ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self, value: System.Void): ...
    @ShowPromptMode.setter
    def ShowPromptMode(self, value: System.Void): ...
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class NumericMaskedTextStepper(MaskedTextStepper):
    """Masked text box with a variable length numeric mask.

    NumericMaskedTextStepper[T]
    """
    def __init__(self): ...
    @property
    def AllowDecimal(self) -> bool: ...
    @property
    def AllowSign(self) -> bool: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def Provider(self) -> NumericMaskedTextProvider: ...
    @AllowDecimal.setter
    def AllowDecimal(self, value: System.Void): ...
    @AllowSign.setter
    def AllowSign(self, value: System.Void): ...
    @Culture.setter
    def Culture(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def Step(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MaskedTextStepper(MaskedTextStepper):
    """Masked text box that provides a value converted to/from text

    MaskedTextStepper[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def Value(self) -> T: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def Step(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MaskedTextStepper(TextStepper):
    """Text box with masking capabilities.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwrite(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @InsertMode.setter
    def InsertMode(self, value: System.Void): ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self, value: System.Void): ...
    @ShowPromptMode.setter
    def ShowPromptMode(self, value: System.Void): ...
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def Step(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MouseButtons(enum.Enum):
    None_ = 0
    Primary = 1
    Alternate = 2
    Middle = 4

class MouseEventArgs(System.EventArgs):
    """Mouse event arguments.

    """
    def __init__(self, buttons: MouseButtons, modifiers: Keys, location: Drawing.PointF, delta: System.Nullable, pressure: System.Single): ...
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def Delta(self) -> Drawing.SizeF: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Location(self) -> Drawing.PointF: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Pressure(self) -> System.Single: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class CreateNativeControlArgs(System.EventArgs):
    """Arguments when creating a native control for the

    """
    def __init__(self): ...
    @property
    def NativeControl(self) -> object: ...
    @NativeControl.setter
    def NativeControl(self, value: System.Void): ...

class NativeControlHost(Control):
    """Control to host a native control within Eto

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nativeControl: object): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class NavigationItemEventArgs(System.EventArgs):
    """Event arguments with a
reference

    """
    def __init__(self, item: INavigationItem): ...
    @property
    def Item(self) -> INavigationItem: ...

class Navigation(Container):
    """Control to show child panels in a hirarchical stack using a navigation button to go back to a previous panel.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item: INavigationItem): ...
    @overload
    def __init__(self, content: Control, title: str): ...
    @property
    def ItemShownEvent(self) -> str: ...
    @property
    def ItemRemovedEvent(self) -> str: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    def Pop() -> None: ...
    @overload
    def Push(self, item: INavigationItem) -> None: ...
    @overload
    def Push(self, content: Control, title: str) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @property
    def ItemShown(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class INavigationItem:
    """Item for panes on a
control.

    """
    @property
    def Content(self) -> Control: ...

class NavigationItem(ListItem):
    """Item for a pane on a
control.

    """
    def __init__(self): ...
    @property
    def Content(self) -> Control: ...
    @Content.setter
    def Content(self, value: System.Void): ...

class NumericStepper(CommonControl):
    """Control for the user to enter a numeric value

    """
    def __init__(self): ...
    @property
    def CultureInfo(self) -> Globalization.CultureInfo: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def Increment(self) -> float: ...
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def MinValue(self) -> float: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def Value(self) -> float: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @property
    def Wrap(self) -> bool: ...
    @CultureInfo.setter
    def CultureInfo(self, value: System.Void): ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: System.Void): ...
    @FormatString.setter
    def FormatString(self, value: System.Void): ...
    @Increment.setter
    def Increment(self, value: System.Void): ...
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Panel(Container):
    """Control to display a panel containing a single
control

    """
    def __init__(self): ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class PasswordBox(TextControl):
    """An entry box for the user to enter a password without displaying the contents of the password while typed.

    """
    def __init__(self): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ProgressBar(Control):
    """Control to show progress of a long running task

    """
    def __init__(self): ...
    @property
    def Indeterminate(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @Indeterminate.setter
    def Indeterminate(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class PropertyValueChangedEventArgs(System.EventArgs):
    """Event arguments for the
when a value changes.

    """
    def __init__(self, propertyName: str, oldValue: object, item: object): ...
    @property
    def Item(self) -> object: ...
    @property
    def OldValue(self) -> object: ...
    @property
    def PropertyName(self) -> str: ...

class PropertyGridTypeEditor(object):
    """Interface for custom type editors of the

    """
    @overload
    def CreateControl(self, args: CellEventArgs) -> Control: ...
    @overload
    def PaintCell(self, args: CellPaintEventArgs) -> None: ...

class PropertyGrid(Control):
    """Control to edit the properties of one or more objects.

    """
    def __init__(self): ...
    @property
    def PropertyValueChangedEvent(self) -> str: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Generic.IEnumerable: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @overload
    def Refresh() -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: System.Void): ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: System.Void): ...
    @ShowCategories.setter
    def ShowCategories(self, value: System.Void): ...
    @ShowDescription.setter
    def ShowDescription(self, value: System.Void): ...
    @property
    def PropertyValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class RadioButton(TextControl):
    """Control to present a button to choose from a set of options

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioButton): ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class RadioButtonList(Panel):
    """Shows a list of radio buttons.

    """
    def __init__(self): ...
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedKey(self) -> str: ...
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @property
    def SelectedValue(self) -> object: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def Spacing(self) -> Drawing.Size: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: System.Void): ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: System.Void): ...
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self, value: System.Void): ...
    @KeyBinding.setter
    def KeyBinding(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedKey.setter
    def SelectedKey(self, value: System.Void): ...
    @SelectedValue.setter
    def SelectedValue(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @TextBinding.setter
    def TextBinding(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def SelectedKeyChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class RichTextAreaFormat(enum.Enum):
    Rtf = 0
    PlainText = 1

class TextBufferExtensions(object):
    """Extensions for

    """
    @overload
    @staticmethod
    def GetRtf(buffer: ITextBuffer) -> str: ...
    @overload
    @staticmethod
    def SetRtf(buffer: ITextBuffer, rtf: str) -> None: ...

class ITextBuffer:
    """Interface for a formatted text buffer

    """
    @overload
    def Clear() -> None: ...
    @overload
    def Delete(self, range_: Range) -> None: ...
    @property
    def SupportedFormats(self) -> Generic.IEnumerable: ...
    @overload
    def Insert(self, position: int, text: str) -> None: ...
    @overload
    def Load(self, stream: IO.Stream, format_: RichTextAreaFormat) -> None: ...
    @overload
    def Save(self, stream: IO.Stream, format_: RichTextAreaFormat) -> None: ...
    @overload
    def SetBackground(self, range_: Range, color: Drawing.Color) -> None: ...
    @overload
    def SetBold(self, range_: Range, bold: bool) -> None: ...
    @overload
    def SetFamily(self, range_: Range, family: Drawing.FontFamily) -> None: ...
    @overload
    def SetFont(self, range_: Range, font: Drawing.Font) -> None: ...
    @overload
    def SetForeground(self, range_: Range, color: Drawing.Color) -> None: ...
    @overload
    def SetItalic(self, range_: Range, italic: bool) -> None: ...
    @overload
    def SetStrikethrough(self, range_: Range, strikethrough: bool) -> None: ...
    @overload
    def SetUnderline(self, range_: Range, underline: bool) -> None: ...

class RichTextArea(TextArea):
    """Text area with ability to specify rich text formatting such as font attributes and colors.

    """
    def __init__(self): ...
    @property
    def Buffer(self) -> ITextBuffer: ...
    @property
    def Rtf(self) -> str: ...
    @property
    def SelectionBackground(self) -> Drawing.Color: ...
    @property
    def SelectionBold(self) -> bool: ...
    @property
    def SelectionFamily(self) -> Drawing.FontFamily: ...
    @property
    def SelectionFont(self) -> Drawing.Font: ...
    @property
    def SelectionForeground(self) -> Drawing.Color: ...
    @property
    def SelectionItalic(self) -> bool: ...
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @property
    def SelectionTypeface(self) -> Drawing.FontTypeface: ...
    @property
    def SelectionUnderline(self) -> bool: ...
    @Rtf.setter
    def Rtf(self, value: System.Void): ...
    @SelectionBackground.setter
    def SelectionBackground(self, value: System.Void): ...
    @SelectionBold.setter
    def SelectionBold(self, value: System.Void): ...
    @SelectionFamily.setter
    def SelectionFamily(self, value: System.Void): ...
    @SelectionFont.setter
    def SelectionFont(self, value: System.Void): ...
    @SelectionForeground.setter
    def SelectionForeground(self, value: System.Void): ...
    @SelectionItalic.setter
    def SelectionItalic(self, value: System.Void): ...
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self, value: System.Void): ...
    @SelectionTypeface.setter
    def SelectionTypeface(self, value: System.Void): ...
    @SelectionUnderline.setter
    def SelectionUnderline(self, value: System.Void): ...
    @property
    def SelectionChanged(self): ...
    @property
    def CaretIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ScrollEventArgs(System.EventArgs):
    """Event arguments for
events

    """
    def __init__(self, scrollPosition: Drawing.Point): ...
    @property
    def ScrollPosition(self) -> Drawing.Point: ...

class BorderType(enum.Enum):
    Bezel = 0
    Line = 1
    None_ = 2

class Scrollable(Panel):
    """Control to show content in a scrollable container

    """
    def __init__(self): ...
    @property
    def ScrollEvent(self) -> str: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def ExpandContentHeight(self) -> bool: ...
    @property
    def ExpandContentWidth(self) -> bool: ...
    @property
    def MaximumZoom(self) -> System.Single: ...
    @property
    def MinimumZoom(self) -> System.Single: ...
    @property
    def ScrollPosition(self) -> Drawing.Point: ...
    @property
    def ScrollSize(self) -> Drawing.Size: ...
    @property
    def VisibleRect(self) -> Drawing.Rectangle: ...
    @property
    def Zoom(self) -> System.Single: ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @ExpandContentHeight.setter
    def ExpandContentHeight(self, value: System.Void): ...
    @ExpandContentWidth.setter
    def ExpandContentWidth(self, value: System.Void): ...
    @MaximumZoom.setter
    def MaximumZoom(self, value: System.Void): ...
    @MinimumZoom.setter
    def MinimumZoom(self, value: System.Void): ...
    @ScrollPosition.setter
    def ScrollPosition(self, value: System.Void): ...
    @ScrollSize.setter
    def ScrollSize(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @overload
    def UpdateScrollSizes() -> None: ...
    @property
    def Scroll(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SearchBox(TextBox):
    """Search box control

    """
    def __init__(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Slider(Control):
    """Control with a knob the user can slide up/down or left/right to select a numeric range.

    """
    def __init__(self): ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SnapToTick(self) -> bool: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @SnapToTick.setter
    def SnapToTick(self, value: System.Void): ...
    @TickFrequency.setter
    def TickFrequency(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Spinner(Control):
    """Presents a spinning indeterminate progress spinner wheel

    """
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SplitterFixedPanel(enum.Enum):
    Panel1 = 0
    Panel2 = 1
    None_ = 2

class SplitterPositionChangingEventArgs(ComponentModel.CancelEventArgs):
    """Event arguments for the
event.

    """
    def __init__(self, newPosition: int): ...
    @property
    def NewPosition(self) -> int: ...

class Splitter(Container):
    """Control to show two panels separated by a splitter

    """
    def __init__(self): ...
    @property
    def PositionChangedEvent(self) -> str: ...
    @property
    def PositionChangingEvent(self) -> str: ...
    @property
    def PositionChangeStartedEvent(self) -> str: ...
    @property
    def PositionChangeCompletedEvent(self) -> str: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def SplitterWidth(self) -> int: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @FixedPanel.setter
    def FixedPanel(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Panel1.setter
    def Panel1(self, value: System.Void): ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: System.Void): ...
    @Panel2.setter
    def Panel2(self, value: System.Void): ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @RelativePosition.setter
    def RelativePosition(self, value: System.Void): ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: System.Void): ...
    @property
    def PositionChanged(self): ...
    @property
    def PositionChanging(self): ...
    @property
    def PositionChangeStarted(self): ...
    @property
    def PositionChangeCompleted(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class StepperDirection(enum.Enum):
    Up = 0
    Down = 1

class StepperValidDirections(enum.Enum):
    None_ = 0
    Up = 1
    Down = 2
    Both = 3

class StepperEventArgs(System.EventArgs):
    """Arguments for the
and
to give you the direction of the step.

    """
    def __init__(self, direction: StepperDirection): ...
    @property
    def Direction(self) -> StepperDirection: ...

class Stepper(Control):
    """Control that allows you to "step" through values, usually presented by two buttons arranged vertically with up and down arrows.

    """
    def __init__(self): ...
    @property
    def StepEvent(self) -> str: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...
    @property
    def Step(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TabControl(Container):
    """Control to present multiple pages with a tab selection

    """
    def __init__(self): ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def Pages(self) -> ObjectModel.Collection: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedPage(self) -> TabPage: ...
    @property
    def TabPosition(self) -> DockPosition: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedPage.setter
    def SelectedPage(self, value: System.Void): ...
    @TabPosition.setter
    def TabPosition(self, value: System.Void): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TabPage(Panel):
    """Control for a page in a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: System.Nullable): ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TextReplacements(enum.Enum):
    None_ = 0
    Text = 1
    Quote = 2
    Dash = 4
    Spelling = 8
    All = 15

class TextArea(TextControl):
    """Control for multi-line text

    """
    def __init__(self): ...
    @property
    def SelectionChangedEvent(self) -> str: ...
    @property
    def CaretIndexChangedEvent(self) -> str: ...
    @overload
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def SpellCheck(self) -> bool: ...
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @property
    def Wrap(self) -> bool: ...
    @overload
    def ScrollTo(self, range_: Range) -> None: ...
    @overload
    def ScrollToEnd() -> None: ...
    @overload
    def ScrollToStart() -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: System.Void): ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: System.Void): ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @CaretIndex.setter
    def CaretIndex(self, value: System.Void): ...
    @HorizontalAlign.setter
    def HorizontalAlign(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @Selection.setter
    def Selection(self, value: System.Void): ...
    @SpellCheck.setter
    def SpellCheck(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @TextReplacements.setter
    def TextReplacements(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...
    @property
    def SelectionChanged(self): ...
    @property
    def CaretIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class AutoSelectMode(enum.Enum):
    OnFocus = 0
    Never = 1
    Always = 2

class TextBox(TextControl):
    """Single line text box control

    """
    def __init__(self): ...
    @property
    def TextChangingEvent(self) -> str: ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    def SelectAll() -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @CaretIndex.setter
    def CaretIndex(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @Selection.setter
    def Selection(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TextChangingEventArgs(ComponentModel.CancelEventArgs):
    """Arguments for events that handle when text is about to change, such as the
event.

    """
    @overload
    def __init__(self, text: str, range_: Range, fromUser: bool): ...
    @overload
    def __init__(self, oldText: str, newText: str, fromUser: bool): ...
    @overload
    def __init__(self, text: str, range_: Range, oldText: str, fromUser: bool): ...
    @property
    def FromUser(self) -> bool: ...
    @property
    def NewText(self) -> str: ...
    @property
    def OldText(self) -> str: ...
    @property
    def Range(self) -> Range: ...
    @property
    def Text(self) -> str: ...

class TextControl(CommonControl):
    """Base class for controls implementing text and text changing events, when it has a singular text property.

    """
    @property
    def TextChangedEvent(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextBinding(self) -> BindableBinding: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TextInputEventArgs(ComponentModel.CancelEventArgs):
    """Event arguments when handling text input events

    """
    def __init__(self, text: str): ...
    @property
    def Text(self) -> str: ...

class TextStepper(TextBox):
    """Stepper with custom text entry field

    """
    def __init__(self): ...
    @property
    def StepEvent(self) -> str: ...
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ShowStepper.setter
    def ShowStepper(self, value: System.Void): ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...
    @property
    def Step(self): ...
    @property
    def TextChanging(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ThemedContainerHandler(ThemedControlHandler):
    """Base class for implementing Eto Container control handlers using Eto controls.

    ThemedContainerHandler[TControl, TWidget, TCallback]
    """
    @property
    def ClientSize(self) -> Drawing.Size: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @ClientSize.setter
    def ClientSize(self, value: System.Void): ...

class ThemedControlHandler(Eto.WidgetHandler):
    """Base class for implementing Eto control handlers using other Eto controls.

    ThemedControlHandler[TControl, TWidget, TCallback]
    """
    def __init__(self): ...
    @overload
    def AttachEvent(self, id_: str) -> None: ...
    @overload
    def CaptureMouse() -> bool: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Drawing.Image, cursorOffset: Drawing.PointF) -> None: ...
    @overload
    def Focus() -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def SupportedPlatformCommands(self) -> Generic.IEnumerable: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Generic.IEnumerable: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetNativeParentWindow() -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: Drawing.SizeF) -> Drawing.SizeF: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Drawing.Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: System.EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def PointToScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def Print() -> None: ...
    @overload
    def ReleaseMouseCapture() -> None: ...
    @overload
    def ResumeLayout() -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout() -> None: ...
    @overload
    def UpdateLayout() -> None: ...

class ToggleButton(Button):
    """Specialized Button that can be toggled on or off.

    """
    def __init__(self): ...
    @property
    def CheckedChangedEvent(self) -> str: ...
    @property
    def Checked(self) -> bool: ...
    @overload
    def PerformClick() -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def TextChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ITreeItem:
    """Base tree item interface

    ITreeItem[T]
    """
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Parent(self) -> T: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...

class ITreeGridItem:
    """Interface for an item in a
.

    """

class ITreeGridItem:
    """Interface for an item in a
that implements children

    ITreeGridItem[T]
    """

class TreeGridItemCollection(DataStoreCollection):
    """Collection of
objects for child nodes of a tree.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @property
    def CollectionChanged(self): ...

class TreeGridItem(GridItem):
    """Item for a
for each node of the tree.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: System.System.Array[object]): ...
    @overload
    def __init__(self, children: Generic.IEnumerable, values: System.System.Array[object]): ...
    @property
    def Children(self) -> TreeGridItemCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Item(self) -> ITreeGridItem: ...
    @property
    def Parent(self) -> ITreeGridItem: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...

class ITreeGridStore:
    """Item store for the

    ITreeGridStore[T]
    """

class TreeGridViewItemEventArgs(System.EventArgs):
    """Event arguments for
events

    """
    def __init__(self, item: ITreeGridItem): ...
    @property
    def Item(self) -> ITreeGridItem: ...

class TreeGridViewItemCancelEventArgs(ComponentModel.CancelEventArgs):
    """Event arguments for
events that can be cancelled

    """
    def __init__(self, item: ITreeGridItem): ...
    @property
    def Item(self) -> ITreeGridItem: ...

class GridCellType(enum.Enum):
    None_ = 0
    Data = 1
    ColumnHeader = 2

class TreeGridCell(object):
    """Information of a cell in the

    """
    def __init__(self, column: GridColumn, columnIndex: int, type_: GridCellType, item: object): ...
    @property
    def Column(self) -> GridColumn: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def Type(self) -> GridCellType: ...

class GridDragPosition(enum.Enum):
    Over = 0
    Before = 1
    After = 2

class TreeGridViewDragInfo(object):
    """Extra drag information when dragging to a
.

    """
    def __init__(self, control: TreeGridView, parent: object, item: object, childIndex: System.Nullable, position: GridDragPosition): ...
    @property
    def ChildIndex(self) -> int: ...
    @property
    def Control(self) -> TreeGridView: ...
    @property
    def InsertIndex(self) -> int: ...
    @property
    def IsChanged(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Parent(self) -> object: ...
    @property
    def Position(self) -> GridDragPosition: ...
    @overload
    def RestrictToInsert() -> None: ...
    @overload
    def RestrictToNode(self, item: object, childLevels: int) -> bool: ...
    @overload
    def RestrictToOver() -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...

class TreeGridView(Grid):
    """Presents a tree with multiple columns

    """
    def __init__(self): ...
    @property
    def ActivatedEvent(self) -> str: ...
    @property
    def ExpandingEvent(self) -> str: ...
    @property
    def ExpandedEvent(self) -> str: ...
    @property
    def CollapsingEvent(self) -> str: ...
    @property
    def CollapsedEvent(self) -> str: ...
    @property
    def SelectedItemChangedEvent(self) -> str: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @overload
    def GetCellAt(self, location: Drawing.PointF) -> TreeGridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    @overload
    def ReloadData() -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @property
    def Activated(self): ...
    @property
    def Expanding(self): ...
    @property
    def Expanded(self): ...
    @property
    def Collapsing(self): ...
    @property
    def Collapsed(self): ...
    @property
    def SelectedItemChanged(self): ...
    @property
    def CellEditing(self): ...
    @property
    def CellEdited(self): ...
    @property
    def CellClick(self): ...
    @property
    def CellDoubleClick(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def ColumnHeaderClick(self): ...
    @property
    def CellFormatting(self): ...
    @property
    def RowFormatting(self): ...
    @property
    def SelectedItemsChanged(self): ...
    @property
    def SelectedRowsChanged(self): ...
    @property
    def ColumnOrderChanged(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ITreeItem:
    """Interface for an item in a

    """

class TreeItemCollection(DataStoreCollection):
    """Tree item collection.

    """
    def __init__(self): ...
    @property
    def CollectionChanged(self): ...

class TreeItem(ImageListItem):
    """Item for a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, children: Generic.IEnumerable): ...
    @overload
    def __init__(self, children: System.Array[ITreeItem]): ...
    @property
    def Children(self) -> TreeItemCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Item(self) -> ITreeItem: ...
    @property
    def Parent(self) -> ITreeItem: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @property
    def CollectionChanged(self): ...

class ITreeStore:
    """Base data store for the

    """

class TreeViewItemEventArgs(System.EventArgs):
    """Event arguments for
events relating to an item

    """
    def __init__(self, item: ITreeItem): ...
    @property
    def Item(self) -> ITreeItem: ...

class TreeViewItemCancelEventArgs(ComponentModel.CancelEventArgs):
    """Event arguments for
events that can be cancelled

    """
    def __init__(self, item: ITreeItem): ...
    @property
    def Item(self) -> ITreeItem: ...

class TreeViewItemEditEventArgs(TreeViewItemCancelEventArgs):
    """Event arguments for
events that can modify the label of the text

    """
    def __init__(self, item: ITreeItem, label: str): ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: System.Void): ...

class WebViewLoadedEventArgs(System.EventArgs):
    """Event arguments when the
has finished loaded a uri

    """
    def __init__(self, uri: System.Uri): ...
    @property
    def Uri(self) -> System.Uri: ...

class WebViewLoadingEventArgs(WebViewLoadedEventArgs):
    """Event arguments when the
is loading a new uri.

    """
    def __init__(self, uri: System.Uri, isMainFrame: bool): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def IsMainFrame(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...
    @IsMainFrame.setter
    def IsMainFrame(self, value: System.Void): ...

class WebViewTitleEventArgs(System.EventArgs):
    """Event arguments for when the
changes its title

    """
    def __init__(self, title: str): ...
    @property
    def Title(self) -> str: ...

class WebViewNewWindowEventArgs(WebViewLoadingEventArgs):
    """Event arguments for when the
prompts to open a new window.

    """
    def __init__(self, uri: System.Uri, newWindowName: str): ...
    @property
    def NewWindowName(self) -> str: ...

class WebViewMessageEventArgs(System.EventArgs):
    """Event arguments for when a message is sent via javascript in the

    """
    def __init__(self, message: str): ...
    @property
    def Message(self) -> str: ...

class WebView(Control):
    """Control to show a browser control that can display html and execute javascript.

    """
    def __init__(self): ...
    @property
    def NavigatedEvent(self) -> str: ...
    @property
    def DocumentLoadedEvent(self) -> str: ...
    @property
    def DocumentLoadingEvent(self) -> str: ...
    @property
    def OpenNewWindowEvent(self) -> str: ...
    @property
    def DocumentTitleChangedEvent(self) -> str: ...
    @property
    def MessageReceivedEvent(self) -> str: ...
    @overload
    def ExecuteScript(self, script: str) -> str: ...
    @overload
    def ExecuteScriptAsync(self, script: str) -> Tasks.Task: ...
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...
    @overload
    def GoBack() -> None: ...
    @overload
    def GoForward() -> None: ...
    @overload
    def LoadHtml(self, html: str, baseUri: System.Uri) -> None: ...
    @overload
    def LoadHtml(self, stream: IO.Stream, baseUri: System.Uri) -> None: ...
    @overload
    def Reload() -> None: ...
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self, value: System.Void): ...
    @Url.setter
    def Url(self, value: System.Void): ...
    @overload
    def ShowPrintDialog() -> None: ...
    @overload
    def Stop() -> None: ...
    @property
    def Navigated(self): ...
    @property
    def DocumentLoaded(self): ...
    @property
    def DocumentLoading(self): ...
    @property
    def OpenNewWindow(self): ...
    @property
    def DocumentTitleChanged(self): ...
    @property
    def MessageReceived(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CursorType(enum.Enum):
    Default = 0
    Arrow = 1
    Crosshair = 2
    Pointer = 3
    Move = 4
    IBeam = 5
    VerticalSplit = 6
    HorizontalSplit = 7
    SizeAll = 8
    SizeLeft = 9
    SizeTop = 10
    SizeRight = 11
    SizeBottom = 12
    SizeTopLeft = 13
    SizeTopRight = 14
    SizeBottomLeft = 15
    SizeBottomRight = 16

class Cursor(Eto.Widget):
    """Class for a particular Mouse cursor type

    """
    @overload
    def __init__(self, type_: CursorType): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Drawing.Bitmap, hotspot: Drawing.PointF): ...
    @overload
    def __init__(self, image: Drawing.Icon, hotspot: Drawing.PointF): ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Reflection.Assembly) -> Cursor: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type_: System.Type) -> Cursor: ...
    @property
    def StyleChanged(self): ...

class Cursors(object):
    """Provides direct access to a cached set of cursors for use within your application

    """
    @overload
    @staticmethod
    def Cached(type_: CursorType) -> Cursor: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @property
    def Arrow(self) -> Cursor: ...
    @property
    def Crosshair(self) -> Cursor: ...
    @property
    def Default(self) -> Cursor: ...
    @property
    def HorizontalSplit(self) -> Cursor: ...
    @property
    def IBeam(self) -> Cursor: ...
    @property
    def Move(self) -> Cursor: ...
    @property
    def Pointer(self) -> Cursor: ...
    @property
    def SizeAll(self) -> Cursor: ...
    @property
    def SizeBottom(self) -> Cursor: ...
    @property
    def SizeBottomLeft(self) -> Cursor: ...
    @property
    def SizeBottomRight(self) -> Cursor: ...
    @property
    def SizeLeft(self) -> Cursor: ...
    @property
    def SizeRight(self) -> Cursor: ...
    @property
    def SizeTop(self) -> Cursor: ...
    @property
    def SizeTopLeft(self) -> Cursor: ...
    @property
    def SizeTopRight(self) -> Cursor: ...
    @property
    def VerticalSplit(self) -> Cursor: ...

class DataFormats(object):
    """Provides access to common data formats in a
.

    """
    @property
    def Color(self) -> str: ...
    @property
    def Html(self) -> str: ...
    @property
    def Text(self) -> str: ...

class IDataObject:
    """Interface to allow you to share common code with
and
.

    """
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, type_: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> System.System.Array[str]: ...
    @property
    def Uris(self) -> System.System.Array[System.Uri]: ...
    @overload
    def GetData(self, type_: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetObject(self, type_: str) -> T: ...
    @overload
    def GetObject(self, type_: str) -> object: ...
    @overload
    def GetObject(self, type_: str, objectType: System.Type) -> object: ...
    @overload
    def GetString(self, type_: str) -> str: ...
    @Html.setter
    def Html(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Uris.setter
    def Uris(self, value: System.Void): ...
    @overload
    def SetData(self, value: System.System.Array[System.Byte], type_: str) -> None: ...
    @overload
    def SetObject(self, value: object, type_: str) -> None: ...
    @overload
    def SetString(self, value: str, type_: str) -> None: ...

class DataObject(Eto.Widget):
    """Drag/Drop action data.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, type_: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> System.System.Array[str]: ...
    @property
    def Uris(self) -> System.System.Array[System.Uri]: ...
    @overload
    def GetData(self, type_: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetDataStream(self, type_: str) -> IO.Stream: ...
    @overload
    def GetObject(self, type_: str) -> T: ...
    @overload
    def GetObject(self, type_: str) -> object: ...
    @overload
    def GetObject(self, type_: str, objectType: System.Type) -> object: ...
    @overload
    def GetString(self, type_: str) -> str: ...
    @Html.setter
    def Html(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Uris.setter
    def Uris(self, value: System.Void): ...
    @overload
    def SetData(self, value: System.System.Array[System.Byte], type_: str) -> None: ...
    @overload
    def SetDataStream(self, stream: IO.Stream, type_: str) -> None: ...
    @overload
    def SetObject(self, value: object, type_: str) -> None: ...
    @overload
    def SetString(self, value: str, type_: str) -> None: ...
    @property
    def StyleChanged(self): ...

class DataStoreVirtualCollection(object):
    """Translates an
to a read-only

    DataStoreVirtualCollection[T]
    """
    def __init__(self, store: IDataStore): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Add(self, value: object) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, value: object) -> None: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DialogDisplayMode(enum.Enum):
    Default = 0
    Attached = 1
    Separate = 2
    Navigation = 4

class Dialog(Dialog):
    """Custom modal dialog with a specified result type

    Dialog[T]
    """
    def __init__(self): ...
    @overload
    def Close(self, result: T) -> None: ...
    @property
    def Result(self) -> T: ...
    @Result.setter
    def Result(self, value: System.Void): ...
    @overload
    def ShowModal() -> T: ...
    @overload
    def ShowModal(self, owner: Control) -> T: ...
    @overload
    def ShowModalAsync() -> Tasks.Task: ...
    @overload
    def ShowModalAsync(self, owner: Control) -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Dialog(Window):
    """Custom modal dialog

    """
    def __init__(self): ...
    @property
    def AbortButton(self) -> Button: ...
    @property
    def DefaultButton(self) -> Button: ...
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @property
    def NegativeButtons(self) -> ObjectModel.Collection: ...
    @property
    def PositiveButtons(self) -> ObjectModel.Collection: ...
    @AbortButton.setter
    def AbortButton(self, value: System.Void): ...
    @DefaultButton.setter
    def DefaultButton(self, value: System.Void): ...
    @DisplayMode.setter
    def DisplayMode(self, value: System.Void): ...
    @overload
    def ShowModal() -> None: ...
    @overload
    def ShowModal(self, owner: Control) -> None: ...
    @overload
    def ShowModalAsync() -> Tasks.Task: ...
    @overload
    def ShowModalAsync(self, owner: Control) -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DockPosition(enum.Enum):
    Top = 0
    Left = 1
    Right = 2
    Bottom = 3

class FileDialog(CommonDialog):
    """Base file dialog class

    """
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Directory(self) -> System.Uri: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Filters(self) -> ObjectModel.Collection: ...
    @property
    def Title(self) -> str: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: System.Void): ...
    @CurrentFilter.setter
    def CurrentFilter(self, value: System.Void): ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: System.Void): ...
    @Directory.setter
    def Directory(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class FileFilter(object):
    """Filter definition for
and

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, extensions: System.System.Array[str]): ...
    @property
    def Extensions(self) -> System.System.Array[str]: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @Extensions.setter
    def Extensions(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ISelectionPreserver:
    """Interface for a control that can preserve selected items

    """
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @SelectedItems.setter
    def SelectedItems(self, value: System.Void): ...

class ISelectable:
    """Interface for an object that can select multiple items and rows.

    ISelectable[T]
    """
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @property
    def SelectedRows(self) -> Generic.IEnumerable: ...
    @overload
    def SelectAll() -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @SelectedRows.setter
    def SelectedRows(self, value: System.Void): ...
    @overload
    def UnselectAll() -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...

class ISelectableControl:
    """Interface for a control that can preserve its selection.

    ISelectableControl[T]
    """
    @property
    def SelectionPreserver(self) -> ISelectionPreserver: ...
    @property
    def SelectedItemsChanged(self): ...

class SelectableFilterCollection(FilterCollection):
    """Collection that can filter/sort the items, and keep a selection of items in the original list.

    SelectableFilterCollection[T]
    """
    @overload
    def __init__(self, parent: ISelectableControl): ...
    @overload
    def __init__(self, parent: ISelectableControl, collection: Generic.IEnumerable): ...
    @overload
    def __init__(self, parent: ISelectableControl, collection: Generic.IList): ...
    @overload
    def Clear() -> None: ...
    @property
    def Parent(self) -> ISelectableControl: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @property
    def SelectedRows(self) -> Generic.IEnumerable: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @SelectedRows.setter
    def SelectedRows(self, value: System.Void): ...
    @overload
    def UnselectAll() -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...
    @property
    def SelectionChanged(self): ...
    @property
    def CollectionChanged(self): ...

class FilterCollection(object):
    """Collection that supports filtering and sorting

    FilterCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, list_: Generic.IList): ...
    @overload
    def __init__(self, collection: Generic.IEnumerable): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @property
    def Change(self) -> System.Func: ...
    @property
    def Count(self) -> int: ...
    @property
    def Filter(self) -> System.Func: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def Sort(self) -> System.Comparison: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> None: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Change.setter
    def Change(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Sort.setter
    def Sort(self, value: System.Void): ...
    @property
    def CollectionChanged(self): ...

class FloatingForm(Form):
    """A specialized modeless Form for floating windows.

    """
    def __init__(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class FontDialog(CommonDialog):
    """Dialog for a user to pick a font and style

    """
    def __init__(self): ...
    @property
    def FontChangedEvent(self) -> str: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @property
    def FontChanged(self): ...
    @property
    def StyleChanged(self): ...

class Form(Window):
    """Non-modal form window

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def ShowActivated(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: System.Void): ...
    @ShowActivated.setter
    def ShowActivated(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def Show() -> None: ...
    @overload
    def ShowAsync() -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class IDataStore:
    """Base data store interface to bind to a collection of objects of a particular type.

    IDataStore[T]
    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...

class DataStoreCollection(Eto.ExtendedObservableCollection):
    """Collection of items that implements the
interface

    DataStoreCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @property
    def CollectionChanged(self): ...

class IKeyboardInputSource:
    """Defines an interface for controls or classes that implement keyboard events.

    """
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def TextInput(self): ...

class IMouseInputSource:
    """Defines an interface for controls or classes that implement mouse events.

    """
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...

class Keys(enum.Enum):
    None_ = 0
    A = 1
    B = 2
    C = 3
    D = 4
    E = 5
    F = 6
    G = 7
    H = 8
    I = 9
    J = 10
    K = 11
    L = 12
    M = 13
    N = 14
    O = 15
    P = 16
    Q = 17
    R = 18
    S = 19
    T = 20
    U = 21
    V = 22
    W = 23
    X = 24
    Y = 25
    Z = 26
    F1 = 27
    F2 = 28
    F3 = 29
    F4 = 30
    F5 = 31
    F6 = 32
    F7 = 33
    F8 = 34
    F9 = 35
    F10 = 36
    F11 = 37
    F12 = 38
    D0 = 39
    D1 = 40
    D2 = 41
    D3 = 42
    D4 = 43
    D5 = 44
    D6 = 45
    D7 = 46
    D8 = 47
    D9 = 48
    Minus = 49
    Grave = 51
    Insert = 52
    Home = 53
    PageUp = 54
    PageDown = 55
    Delete = 56
    End = 57
    Divide = 58
    Decimal = 59
    Backspace = 60
    Up = 61
    Down = 62
    Left = 63
    Right = 64
    Tab = 65
    Space = 66
    CapsLock = 67
    ScrollLock = 68
    PrintScreen = 69
    NumberLock = 70
    Enter = 71
    Escape = 72
    Multiply = 73
    Add = 74
    Subtract = 75
    Help = 76
    Pause = 77
    Clear = 78
    KeypadEqual = 79
    Menu = 80
    Backslash = 81
    Plus = 85
    Equal = 85
    Semicolon = 86
    Quote = 87
    Comma = 88
    Period = 89
    Slash = 96
    ForwardSlash = 96
    RightBracket = 97
    LeftBracket = 98
    ContextMenu = 99
    Keypad0 = 112
    Keypad1 = 113
    Keypad2 = 114
    Keypad3 = 115
    Keypad4 = 116
    Keypad5 = 117
    Keypad6 = 118
    Keypad7 = 119
    Keypad8 = 120
    Keypad9 = 121
    LeftShift = 122
    RightShift = 123
    LeftControl = 124
    RightControl = 125
    LeftAlt = 126
    RightAlt = 127
    LeftApplication = 128
    RightApplication = 129
    F13 = 130
    F14 = 131
    F15 = 132
    F16 = 133
    F17 = 134
    F18 = 135
    F19 = 136
    F20 = 137
    F21 = 138
    F22 = 139
    F23 = 140
    F24 = 141
    KeyMask = 4095
    Shift = 4096
    Alt = 8192
    Control = 16384
    Application = 32768
    ModifierMask = 61440

class KeysExtensions(object):
    """Extensions for the
enumeration

    """
    @overload
    @staticmethod
    def ToShortcutString(key: Keys, separator: str) -> str: ...

class Keyboard(object):
    """General keyboard methods

    """
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def SupportedLockKeys(self) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IsKeyLocked(key: Keys) -> bool: ...
    @property
    def ModifiersChanged(self): ...

class DynamicControl(DynamicItem):
    """Control item for the

    """
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Control(self) -> Control: ...
    @Control.setter
    def Control(self, value: System.Void): ...

class DynamicItem(object):
    """Base item for the

    """
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @property
    def XScale(self) -> System.Nullable: ...
    @property
    def YScale(self) -> System.Nullable: ...
    @XScale.setter
    def XScale(self, value: System.Void): ...
    @YScale.setter
    def YScale(self, value: System.Void): ...

class DynamicLayout(Panel):
    """Dynamic and extensible layout

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: System.Array[DynamicRow]): ...
    @overload
    def __init__(self, rows: Generic.IEnumerable): ...
    @overload
    def Add(self, control: Control, xscale: System.Nullable, yscale: System.Nullable) -> DynamicControl: ...
    @overload
    def AddAutoSized(self, control: Control, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable, centered: bool) -> None: ...
    @overload
    def AddCentered(self, control: Control, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable, horizontalCenter: bool, verticalCenter: bool) -> None: ...
    @overload
    def AddColumn(self, controls: System.Array[Control]) -> None: ...
    @overload
    def AddRange(self, controls: Generic.IEnumerable) -> None: ...
    @overload
    def AddRange(self, controls: System.Array[Control]) -> None: ...
    @overload
    def AddRow(self, controls: System.Array[Control]) -> DynamicRow: ...
    @overload
    def AddSeparateColumn(self, controls: System.Array[Control]) -> DynamicTable: ...
    @overload
    def AddSeparateColumn(self, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable, controls: Generic.IEnumerable) -> DynamicTable: ...
    @overload
    def AddSeparateRow(self, controls: System.Array[Control]) -> DynamicRow: ...
    @overload
    def AddSeparateRow(self, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable, controls: Generic.IEnumerable) -> DynamicRow: ...
    @overload
    def AddSpace(self, xscale: System.Nullable, yscale: System.Nullable) -> DynamicControl: ...
    @overload
    def BeginCentered(self, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable) -> None: ...
    @overload
    def BeginGroup(self, title: str, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable) -> DynamicGroup: ...
    @overload
    def BeginHorizontal(self, yscale: System.Nullable) -> DynamicRow: ...
    @overload
    def BeginScrollable(self, border: BorderType, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable) -> DynamicScrollable: ...
    @overload
    def BeginVertical(self, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable) -> DynamicTable: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Create() -> None: ...
    @overload
    def EndBeginHorizontal(self, yscale: System.Nullable) -> DynamicRow: ...
    @overload
    def EndBeginVertical(self, padding: System.Nullable, spacing: System.Nullable, xscale: System.Nullable, yscale: System.Nullable) -> DynamicTable: ...
    @overload
    def EndCentered() -> None: ...
    @overload
    def EndGroup() -> None: ...
    @overload
    def EndHorizontal() -> None: ...
    @overload
    def EndScrollable() -> None: ...
    @overload
    def EndVertical() -> None: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def DefaultPadding(self) -> System.Nullable: ...
    @property
    def DefaultSpacing(self) -> System.Nullable: ...
    @property
    def IsCreated(self) -> bool: ...
    @property
    def Padding(self) -> System.Nullable: ...
    @property
    def Rows(self) -> ObjectModel.Collection: ...
    @property
    def Spacing(self) -> System.Nullable: ...
    @property
    def VisualControls(self) -> Generic.IEnumerable: ...
    @DefaultPadding.setter
    def DefaultPadding(self, value: System.Void): ...
    @DefaultSpacing.setter
    def DefaultSpacing(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DynamicRow(ObjectModel.Collection):
    """Represents a row for a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: System.Array[DynamicItem]): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @overload
    def __init__(self, controls: Generic.IEnumerable, xscale: System.Nullable, yscale: System.Nullable): ...
    @overload
    def Add(self, controls: System.Array[Control]) -> None: ...
    @overload
    def Add(self, items: System.Array[DynamicItem]) -> None: ...
    @overload
    def Add(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def Add(self, controls: Generic.IEnumerable, xscale: System.Nullable, yscale: System.Nullable) -> None: ...
    @property
    def Items(self) -> ObjectModel.Collection: ...
    @property
    def Table(self) -> DynamicTable: ...

class DynamicTable(DynamicItem):
    """Table item for the

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: System.Array[DynamicRow]): ...
    @overload
    def __init__(self, rows: Generic.IEnumerable): ...
    @overload
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, row: DynamicRow) -> None: ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Padding(self) -> System.Nullable: ...
    @property
    def Parent(self) -> DynamicTable: ...
    @property
    def Rows(self) -> ObjectModel.Collection: ...
    @property
    def Spacing(self) -> System.Nullable: ...
    @property
    def Table(self) -> TableLayout: ...
    @property
    def Visible(self) -> bool: ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class DynamicGroup(DynamicTable):
    """Used to easily insert a
into a dynamic layout

    """
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def GroupBox(self) -> GroupBox: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: System.Void): ...

class DynamicScrollable(DynamicTable):
    """Used to easily insert a
into a dynamic layout

    """
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def Scrollable(self) -> Scrollable: ...
    @Border.setter
    def Border(self, value: System.Void): ...

class Layout(Container):
    """Base class for all layout-based containers

    """
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @overload
    def Update() -> None: ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class PixelLayout(Layout):
    """Layout to position controls by pixel coordinates

    """
    def __init__(self): ...
    @overload
    def Add(self, control: Control, location: Drawing.Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def Contents(self) -> Generic.List: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetLocation(control: Control) -> Drawing.Point: ...
    @overload
    def Move(self, control: Control, location: Drawing.Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    @staticmethod
    def SetLocation(control: Control, value: Drawing.Point) -> None: ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class HorizontalAlignment(enum.Enum):
    Left = 0
    Center = 1
    Right = 2
    Stretch = 3

class VerticalAlignment(enum.Enum):
    Top = 0
    Center = 1
    Bottom = 2
    Stretch = 3

class StackLayoutItem(object):
    """Item for a single control in a
.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: System.Nullable, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: System.Nullable, expand: bool): ...
    @property
    def Control(self) -> Control: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HorizontalAlignment(self) -> System.Nullable: ...
    @property
    def VerticalAlignment(self) -> System.Nullable: ...
    @Control.setter
    def Control(self, value: System.Void): ...
    @Expand.setter
    def Expand(self, value: System.Void): ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...

class StackLayout(Panel):
    """Layout to stack controls horizontally or vertically, with the ability for each child to be aligned to a side of the layout.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: System.Array[StackLayoutItem]): ...
    @property
    def AlignLabels(self) -> bool: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def HorizontalContentAlignment(self) -> HorizontalAlignment: ...
    @property
    def Items(self) -> ObjectModel.Collection: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Spacing(self) -> int: ...
    @property
    def VerticalContentAlignment(self) -> VerticalAlignment: ...
    @property
    def VisualControls(self) -> Generic.IEnumerable: ...
    @overload
    def ResumeLayout() -> None: ...
    @AlignLabels.setter
    def AlignLabels(self, value: System.Void): ...
    @HorizontalContentAlignment.setter
    def HorizontalContentAlignment(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @VerticalContentAlignment.setter
    def VerticalContentAlignment(self, value: System.Void): ...
    @overload
    def SuspendLayout() -> None: ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TableCell(object):
    """Represents a cell in a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, scaleWidth: bool): ...
    @property
    def Control(self) -> Control: ...
    @property
    def ScaleWidth(self) -> bool: ...
    @Control.setter
    def Control(self, value: System.Void): ...
    @ScaleWidth.setter
    def ScaleWidth(self, value: System.Void): ...

class TableLayout(Layout):
    """Layout for controls in a table

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dimensions: Drawing.Size): ...
    @overload
    def __init__(self, rows: System.Array[TableRow]): ...
    @overload
    def __init__(self, rows: Generic.IEnumerable): ...
    @overload
    def __init__(self, columns: int, rows: int): ...
    @overload
    def __init__(self, yscale: bool, rows: System.Array[TableRow]): ...
    @overload
    def Add(self, control: Control, location: Drawing.Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int, xscale: bool, yscale: bool) -> None: ...
    @overload
    @staticmethod
    def AutoSized(control: Control, padding: System.Nullable, centered: bool) -> TableLayout: ...
    @overload
    def EndInit() -> None: ...
    @property
    def Controls(self) -> Generic.IEnumerable: ...
    @property
    def Dimensions(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @property
    def Rows(self) -> ObjectModel.Collection: ...
    @property
    def Spacing(self) -> Drawing.Size: ...
    @overload
    def GetColumnScale(self, column: int) -> bool: ...
    @overload
    def GetRowScale(self, row: int) -> bool: ...
    @overload
    @staticmethod
    def Horizontal(cells: System.Array[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def Horizontal(spacing: int, cells: System.Array[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def HorizontalScaled(cells: System.Array[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def HorizontalScaled(spacing: int, cells: System.Array[TableCell]) -> TableLayout: ...
    @overload
    def Move(self, control: Control, location: Drawing.Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @overload
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    @overload
    def SetRowScale(self, row: int, scale: bool) -> None: ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class TableRow(object):
    """Represents the contents of a row in a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cells: System.Array[TableCell]): ...
    @overload
    def __init__(self, cells: Generic.IEnumerable): ...
    @property
    def Cells(self) -> ObjectModel.Collection: ...
    @property
    def ScaleHeight(self) -> bool: ...
    @overload
    @staticmethod
    def Scaled(cells: System.Array[TableCell]) -> TableRow: ...
    @overload
    @staticmethod
    def Scaled(cells: Generic.IEnumerable) -> TableRow: ...
    @Cells.setter
    def Cells(self, value: System.Void): ...
    @ScaleHeight.setter
    def ScaleHeight(self, value: System.Void): ...

class IListItem:
    """Interface for an item in a list control.

    """
    @property
    def Key(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ListItem(object):
    """Represents an item for list controls.

    """
    def __init__(self): ...
    @property
    def Key(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ImageListItem(ListItem):
    """List item for list controls that accept an image (e.g.
)

    """
    def __init__(self): ...
    @property
    def Image(self) -> Drawing.Image: ...
    @Image.setter
    def Image(self, value: System.Void): ...

class LocalizeEventArgs(System.EventArgs):
    """Event arguments for localization

    """
    def __init__(self): ...
    @property
    def LocalizedText(self) -> str: ...
    @property
    def Source(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @LocalizedText.setter
    def LocalizedText(self, value: System.Void): ...

class FixedMaskedTextProvider(FixedMaskedTextProvider):
    """Implements a fixed masked text provider that converts to the specified type of
, using the standard System.ComponentModel.MaskedTextProvider.

    FixedMaskedTextProvider[T]
    """
    def __init__(self, mask: str, culture: Globalization.CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool): ...
    @property
    def ConvertToText(self) -> System.Func: ...
    @property
    def ConvertToValue(self) -> System.Func: ...
    @property
    def Value(self) -> T: ...
    @ConvertToText.setter
    def ConvertToText(self, value: System.Void): ...
    @ConvertToValue.setter
    def ConvertToValue(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class FixedMaskedTextProvider(object):
    """Implements a fixed masked text provider, using the standard System.ComponentModel.MaskedTextProvider.

    """
    def __init__(self, mask: str, culture: Globalization.CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool): ...
    @overload
    def Clear(self, length: int, forward: bool) -> (bool, int): ...
    @overload
    def Delete(self, length: int, forward: bool) -> (bool, int): ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AutoAdvance(self) -> bool: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Generic.IEnumerable: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def PromptChar(self) -> System.Char: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Insert(self, character: System.Char) -> (bool, int): ...
    @overload
    def Replace(self, character: System.Char) -> (bool, int): ...
    @AutoAdvance.setter
    def AutoAdvance(self, value: System.Void): ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: System.Void): ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: System.Void): ...
    @IsPassword.setter
    def IsPassword(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @PromptChar.setter
    def PromptChar(self, value: System.Void): ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class IMaskedTextProvider:
    """Interface for a masked text provider that can be used with
.

    """
    @overload
    def Clear(self, length: int, forward: bool) -> (bool, int): ...
    @overload
    def Delete(self, length: int, forward: bool) -> (bool, int): ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Generic.IEnumerable: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Insert(self, character: System.Char) -> (bool, int): ...
    @overload
    def Replace(self, character: System.Char) -> (bool, int): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class IMaskedTextProvider:
    """Interface for a masked text provider that can be translated to a specific value.

    IMaskedTextProvider[T]
    """
    @property
    def Value(self) -> T: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class NumericMaskedTextProvider(NumericMaskedTextProvider):
    """Masked text provider for numeric input of the specified type.

    NumericMaskedTextProvider[T]
    """
    def __init__(self): ...
    @property
    def Value(self) -> T: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class NumericMaskedTextProvider(VariableMaskedTextProvider):
    """Masked text provider for numeric input.

    """
    def __init__(self): ...
    @property
    def AllowDecimal(self) -> bool: ...
    @property
    def AllowSign(self) -> bool: ...
    @property
    def AltDecimalCharacters(self) -> System.System.Array[System.Char]: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def DecimalCharacter(self) -> System.Char: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def SignCharacters(self) -> System.System.Array[System.Char]: ...
    @property
    def Validate(self) -> System.Func: ...
    @overload
    def Insert(self, character: System.Char) -> (bool, int): ...
    @overload
    def Replace(self, character: System.Char) -> (bool, int): ...
    @AllowDecimal.setter
    def AllowDecimal(self, value: System.Void): ...
    @AllowSign.setter
    def AllowSign(self, value: System.Void): ...
    @AltDecimalCharacters.setter
    def AltDecimalCharacters(self, value: System.Void): ...
    @Culture.setter
    def Culture(self, value: System.Void): ...
    @DecimalCharacter.setter
    def DecimalCharacter(self, value: System.Void): ...
    @SignCharacters.setter
    def SignCharacters(self, value: System.Void): ...
    @Validate.setter
    def Validate(self, value: System.Void): ...

class VariableMaskedTextProvider(object):
    """Base masked text provider that can be used for variable length masks.

    """
    @overload
    def Clear(self, length: int, forward: bool) -> (bool, int): ...
    @overload
    def Delete(self, length: int, forward: bool) -> (bool, int): ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Generic.IEnumerable: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Insert(self, character: System.Char) -> (bool, int): ...
    @overload
    def Replace(self, character: System.Char) -> (bool, int): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ButtonMenuItem(MenuItem):
    """Menu item for a button / submenu

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: System.EventHandler): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Trim.setter
    def Trim(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CheckMenuItem(MenuItem):
    """Menu item that can be toggled on and off

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, checkedChanged: System.EventHandler): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @property
    def CheckedChangedEvent(self) -> str: ...
    @property
    def Checked(self) -> bool: ...
    @overload
    def PerformClick() -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class IContextMenuHost:
    """Interface for widgets/handlers that implement a context menu

    """
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @ContextMenu.setter
    def ContextMenu(self, value: System.Void): ...

class ContextMenu(Menu):
    """Represents a context menu that can be shown typically when users right click or press the menu key on a control

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @overload
    def __init__(self, items: System.Array[MenuItem]): ...
    @property
    def OpeningEvent(self) -> str: ...
    @property
    def ClosedEvent(self) -> str: ...
    @property
    def ClosingEvent(self) -> str: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...
    @Trim.setter
    def Trim(self, value: System.Void): ...
    @overload
    def Show() -> None: ...
    @overload
    def Show(self, relativeTo: Control) -> None: ...
    @overload
    def Show(self, location: Drawing.PointF) -> None: ...
    @overload
    def Show(self, relativeTo: Control, location: System.Nullable) -> None: ...
    @property
    def Opening(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Menu(BindableWidget):
    """Base class for menu items

    """
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MenuBarSystemItems(enum.Enum):
    None_ = 0
    Common = 1
    Quit = 4
    All = 5

class MenuBar(Menu):
    """Menu bar for a form

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Generic.IEnumerable): ...
    @overload
    def __init__(self, items: System.Array[MenuItem]): ...
    @property
    def AboutItem(self) -> MenuItem: ...
    @property
    def ApplicationItems(self) -> MenuItemCollection: ...
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @property
    def HelpItems(self) -> MenuItemCollection: ...
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    @property
    def IncludeSystemItems(self) -> MenuBarSystemItems: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def QuitItem(self) -> MenuItem: ...
    @property
    def SystemCommands(self) -> ObjectModel.Collection: ...
    @property
    def Trim(self) -> bool: ...
    @AboutItem.setter
    def AboutItem(self, value: System.Void): ...
    @IncludeSystemItems.setter
    def IncludeSystemItems(self, value: System.Void): ...
    @QuitItem.setter
    def QuitItem(self, value: System.Void): ...
    @Trim.setter
    def Trim(self, value: System.Void): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ICommandItem:
    """Interface to access common properties of both
and
.

    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @property
    def Click(self): ...

class MenuItem(Menu):
    """Base class for items in a menu

    """
    @property
    def ValidateEvent(self) -> str: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def PerformClick() -> None: ...
    @overload
    def PerformValidate() -> None: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...
    @Shortcut.setter
    def Shortcut(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MenuItemCollection(ObjectModel.Collection):
    """Collection for menu items.

    """
    @overload
    def Add(self, item: MenuItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> MenuItem: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def AddRange(self, commands: Generic.IEnumerable, order: int) -> None: ...
    @overload
    def AddSeparator(self, order: int) -> None: ...
    @overload
    def GetSubmenu(self, submenuText: str, order: int, plaintextMatch: bool, create: bool) -> ButtonMenuItem: ...
    @overload
    def Trim() -> None: ...

class RadioMenuItem(MenuItem):
    """Menu item to choose from a set of options

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioMenuItem): ...
    @overload
    def __init__(self, command: RadioCommand, controller: RadioMenuItem): ...
    @property
    def CheckedChangedEvent(self) -> str: ...
    @property
    def Checked(self) -> bool: ...
    @overload
    def PerformClick() -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SeparatorMenuItem(MenuItem):
    """Menu item to separate menu items

    """
    def __init__(self): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ISubmenu:
    """Interface for submenus to access common Items properties

    """
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...

class SubmenuExtensions(object):
    """Extensions for the
interface.

    """
    @overload
    @staticmethod
    def GetChildren(submenu: ISubmenu) -> Generic.IEnumerable: ...

class SubMenuItem(ButtonMenuItem):
    """Menu item for a submenu

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: System.Array[MenuItem]): ...
    @property
    def OpeningEvent(self) -> str: ...
    @property
    def ClosedEvent(self) -> str: ...
    @property
    def ClosingEvent(self) -> str: ...
    @property
    def Opening(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Click(self): ...
    @property
    def Validate(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MessageBoxButtons(enum.Enum):
    OK = 0
    OKCancel = 1
    YesNo = 2
    YesNoCancel = 3

class MessageBoxType(enum.Enum):
    Information = 0
    Warning = 1
    Error = 2
    Question = 3

class MessageBoxDefaultButton(enum.Enum):
    Default = 0
    OK = 1
    Yes = 1
    No = 2
    Cancel = 3

class MessageBox(object):
    """Methods to show a standard message box with display text, buttons, and typically an icon indicating the type

    """
    @overload
    @staticmethod
    def Show(text: str, type_: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, type_: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, type_: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, caption: str, type_: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, buttons: MessageBoxButtons, type_: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, type_: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, buttons: MessageBoxButtons, type_: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, caption: str, buttons: MessageBoxButtons, type_: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...

class Mouse(object):
    """Static methods to get the current mouse state

    """
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Position(self) -> Drawing.PointF: ...
    @overload
    @staticmethod
    def IsAnyButtonPressed(buttons: MouseButtons) -> bool: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetCursor(cursor: Cursor) -> None: ...

class Notification(Eto.Widget):
    """System toast notification.

    """
    def __init__(self): ...
    @property
    def ActivatedEvent(self) -> str: ...
    @property
    def ContentImage(self) -> Drawing.Image: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Message(self) -> str: ...
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def UserData(self) -> str: ...
    @ContentImage.setter
    def ContentImage(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @UserData.setter
    def UserData(self, value: System.Void): ...
    @overload
    def Show(self, indicator: TrayIndicator) -> None: ...
    @property
    def Activated(self): ...
    @property
    def StyleChanged(self): ...

class NotificationEventArgs(System.EventArgs):
    """Event arguments when handling a notification event

    """
    def __init__(self, id_: str, userData: str): ...
    @property
    def ID(self) -> str: ...
    @property
    def UserData(self) -> str: ...

class OpenFileDialog(FileDialog):
    """Dialog to select a file (or files) from the file system to open in the application

    """
    def __init__(self): ...
    @property
    def Filenames(self) -> Generic.IEnumerable: ...
    @property
    def MultiSelect(self) -> bool: ...
    @MultiSelect.setter
    def MultiSelect(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class OpenWithDialog(CommonDialog):
    """Dialog for a user to pick the default application for the given file.

    """
    def __init__(self, filepath: str): ...
    @property
    def StyleChanged(self): ...

class Orientation(enum.Enum):
    Horizontal = 0
    Vertical = 1

class PageSettings(Eto.Widget):
    """Settings for a single printed page. Not currently mapped to any platform.

    """
    def __init__(self): ...
    @property
    def PrintableArea(self) -> Drawing.RectangleF: ...
    @property
    def StyleChanged(self): ...

class PrintDialog(CommonDialog):
    """Dialog to show when printing a document or adjusting print settings

    """
    def __init__(self): ...
    @property
    def AllowPageRange(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @AllowPageRange.setter
    def AllowPageRange(self, value: System.Void): ...
    @AllowSelection.setter
    def AllowSelection(self, value: System.Void): ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...
    @overload
    def ShowDialog(self, parent: Control, document: PrintDocument) -> DialogResult: ...
    @property
    def StyleChanged(self): ...

class PrintDocument(Eto.Widget):
    """Represents a document that can be printed

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control): ...
    @property
    def PrintingEvent(self) -> str: ...
    @property
    def PrintedEvent(self) -> str: ...
    @property
    def PrintPageEvent(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PageCount(self) -> int: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    def Print() -> None: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PageCount.setter
    def PageCount(self, value: System.Void): ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...
    @property
    def Printing(self): ...
    @property
    def Printed(self): ...
    @property
    def PrintPage(self): ...
    @property
    def StyleChanged(self): ...

class PrintPageEventArgs(System.EventArgs):
    """Event arguments when printing a page.

    """
    def __init__(self, graphics: Drawing.Graphics, pageSize: Drawing.SizeF, currentPage: int): ...
    @property
    def CurrentPage(self) -> int: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def PageSize(self) -> Drawing.SizeF: ...

class PrintPreviewDialog(CommonDialog):
    """Dialog to show a print preview dialog which the user can print from

    """
    def __init__(self, document: PrintDocument): ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @property
    def StyleChanged(self): ...

class PageOrientation(enum.Enum):
    Portrait = 0
    Landscape = 1

class PrintSelection(enum.Enum):
    AllPages = 0
    Selection = 1
    SelectedPages = 2

class PrintSettings(Eto.Widget):
    """Settings for printing a

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @property
    def Collate(self) -> bool: ...
    @property
    def Copies(self) -> int: ...
    @property
    def MaximumPageRange(self) -> Range: ...
    @property
    def Orientation(self) -> PageOrientation: ...
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def SelectedPageRange(self) -> Range: ...
    @Collate.setter
    def Collate(self, value: System.Void): ...
    @Copies.setter
    def Copies(self, value: System.Void): ...
    @MaximumPageRange.setter
    def MaximumPageRange(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @PrintSelection.setter
    def PrintSelection(self, value: System.Void): ...
    @Reverse.setter
    def Reverse(self, value: System.Void): ...
    @SelectedPageRange.setter
    def SelectedPageRange(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class Range(System.ValueType):
    """Represents an immutable, inclusive start/end range of
values

    Range[T]
    """
    @overload
    def __init__(self, value: T): ...
    @overload
    def __init__(self, start: T, end: T): ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Range) -> bool: ...
    @property
    def End(self) -> T: ...
    @property
    def Start(self) -> T: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Intersect(self, range_: Range) -> System.Nullable: ...
    @overload
    def Intersects(self, range_: Range) -> bool: ...
    @overload
    def Iterate(self, increment: System.Func) -> Generic.IEnumerable: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Touches(self, range_: Range, increment: System.Func) -> bool: ...
    @overload
    def Union(self, range_: Range) -> System.Nullable: ...
    @overload
    def Union(self, range_: Range, increment: System.Func) -> System.Nullable: ...
    @overload
    def WithEnd(self, end: T) -> Range: ...
    @overload
    def WithStart(self, start: T) -> Range: ...

class RangeExtensions(object):
    """Extensions for the
structure

    """
    @overload
    @staticmethod
    def Interval(range_: Range) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def Length(range_: Range) -> int: ...
    @overload
    @staticmethod
    def WithLength(range_: Range, length: int) -> Range: ...

class Range(object):
    """Helpers for the
structure.

    """
    @overload
    @staticmethod
    def FromLength(start: int, length: int) -> Range: ...
    @overload
    @staticmethod
    def FromLength(start: System.Int64, length: System.Int64) -> Range: ...

class RelayCommand(RelayCommand):
    """Command to relay execution and execute state to delegates

    """
    @overload
    def __init__(self, execute: System.Action): ...
    @overload
    def __init__(self, execute: System.Action, canExecute: System.Func): ...
    @property
    def CanExecuteChanged(self): ...

class RelayCommand(object):
    """Command to relay execution and execute state to delegates

    RelayCommand[T]
    """
    @overload
    def __init__(self, execute: System.Action): ...
    @overload
    def __init__(self, execute: System.Action, canExecute: System.Predicate): ...
    @overload
    def CanExecute(self, parameter: object) -> bool: ...
    @overload
    def Execute(self, parameter: object) -> None: ...
    @overload
    def UpdateCanExecute() -> None: ...
    @property
    def CanExecuteChanged(self): ...

class RelayValueCommand(RelayValueCommand):
    """A
class that uses delegates for getting and setting the value of the command

    RelayValueCommand[TValue]
    """
    def __init__(self, getValue: System.Func, setValue: System.Action, execute: System.Action, canExecute: System.Func): ...
    @property
    def ValueChanged(self): ...
    @property
    def CanExecuteChanged(self): ...

class RelayValueCommand(RelayCommand):
    """A
class that uses delegates for getting and setting the value of the command with the command parameter.

    RelayValueCommand[TParameter, TValue]
    """
    def __init__(self, getValue: System.Func, setValue: System.Action, execute: System.Action, canExecute: System.Predicate): ...
    @overload
    def GetValue(self, parameter: object) -> TValue: ...
    @overload
    def SetValue(self, parameter: object, value: TValue) -> None: ...
    @overload
    def UpdateValue() -> None: ...
    @property
    def ValueChanged(self): ...
    @property
    def CanExecuteChanged(self): ...

class SaveFileDialog(FileDialog):
    """Dialog for the user to select a file to save

    """
    def __init__(self): ...
    @property
    def StyleChanged(self): ...

class Screen(Eto.Widget):
    """Represents a display on the system.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    @staticmethod
    def FromPoint(point: Drawing.PointF) -> Screen: ...
    @overload
    @staticmethod
    def FromRectangle(rectangle: Drawing.RectangleF) -> Screen: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def DisplayBounds(self) -> Drawing.RectangleF: ...
    @property
    def DPI(self) -> System.Single: ...
    @property
    def IsPrimary(self) -> bool: ...
    @property
    def LogicalPixelSize(self) -> System.Single: ...
    @property
    def PrimaryScreen(self) -> Screen: ...
    @property
    def RealDPI(self) -> System.Single: ...
    @property
    def RealScale(self) -> System.Single: ...
    @property
    def Scale(self) -> System.Single: ...
    @property
    def Screens(self) -> Generic.IEnumerable: ...
    @property
    def WorkingArea(self) -> Drawing.RectangleF: ...
    @overload
    def GetImage(self, rect: Drawing.RectangleF) -> Drawing.Image: ...
    @property
    def StyleChanged(self): ...

class ButtonSegmentedItem(SegmentedItem):
    """Segmented item that can be clicked.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def Click(self): ...
    @property
    def SelectedChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class MenuSegmentedItem(SegmentedItem):
    """Segmented item that can have a drop down menu, and optionally be selected.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @CanSelect.setter
    def CanSelect(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def SelectedChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SegmentedSelectionMode(enum.Enum):
    None_ = 0
    Single = 1
    Multiple = 2

class SegmentedButton(Control):
    """Button with multiple segments that can be clicked.

    """
    def __init__(self): ...
    @property
    def SelectedIndexesChangedEvent(self) -> str: ...
    @property
    def ItemClickEvent(self) -> str: ...
    @overload
    def ClearSelection() -> None: ...
    @property
    def Items(self) -> SegmentedItemCollection: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Generic.IEnumerable: ...
    @property
    def SelectedItem(self) -> SegmentedItem: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @overload
    def SelectAll() -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @SelectedItems.setter
    def SelectedItems(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @property
    def SelectedItemsChanged(self): ...
    @property
    def SelectedIndexesChanged(self): ...
    @property
    def ItemClick(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectedItemChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SegmentedItem(BindableWidget):
    """Base class for items of the
control.

    """
    @property
    def ClickEvent(self) -> str: ...
    @property
    def SelectedChangedEvent(self) -> str: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Parent(self) -> SegmentedButton: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def SelectedChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SegmentedItemClickEventArgs(System.EventArgs):
    """Event arguments when clicking a segment in the
.

    """
    def __init__(self, item: SegmentedItem, index: int): ...
    @property
    def Index(self) -> int: ...
    @property
    def Item(self) -> SegmentedItem: ...

class SegmentedItemCollection(ObjectModel.ObservableCollection):
    """Collection of
objects for the
.

    """
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @property
    def CollectionChanged(self): ...

class SelectFolderDialog(CommonDialog):
    """Dialog for the user to select a folder in the filesystem

    """
    def __init__(self): ...
    @property
    def Directory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Directory.setter
    def Directory(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @property
    def StyleChanged(self): ...

class Taskbar(object):
    """Methods to interact with application taskbar button.

    """
    @overload
    @staticmethod
    def SetProgress(state: TaskbarProgressState, progress: System.Single) -> None: ...

class TaskbarProgressState(enum.Enum):
    None_ = 0
    Progress = 1
    Indeterminate = 2
    Error = 3
    Paused = 4

class ButtonToolItem(ToolItem):
    """Tool item to execute an action

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: System.EventHandler): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class CheckToolItem(ToolItem):
    """Tool item that can be toggled on or off.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @property
    def Checked(self) -> bool: ...
    @overload
    def OnCheckedChanged(self, e: System.EventArgs) -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class DropDownToolItem(ToolItem):
    """Tool item to display a drop-down menu

    """
    def __init__(self): ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def ShowDropArrow(self) -> bool: ...
    @ShowDropArrow.setter
    def ShowDropArrow(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class RadioToolItem(ToolItem):
    """Tool item that can be toggled on or off.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @property
    def Checked(self) -> bool: ...
    @overload
    def OnCheckedChanged(self, e: System.EventArgs) -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class SeparatorToolItemType(enum.Enum):
    Divider = 0
    Space = 1
    FlexibleSpace = 2

class SeparatorToolItem(ToolItem):
    """Tool item to separate groups of items using a divider, space, etc.

    """
    def __init__(self): ...
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class Tool(BindableWidget):
    """Base class for tool items on a

    """
    def __init__(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ToolBarTextAlign(enum.Enum):
    Right = 0
    Underneath = 1

class ToolBarDock(enum.Enum):
    Top = 0
    Bottom = 1

class ToolBar(Tool):
    """Toolbar widget for use on a
.

    """
    def __init__(self): ...
    @property
    def Dock(self) -> ToolBarDock: ...
    @property
    def Items(self) -> ToolItemCollection: ...
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ToolItem(Tool):
    """Base tool item class for a
.

    """
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Order(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def OnClick(self, e: System.EventArgs) -> None: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class ToolItemCollection(ObjectModel.Collection):
    """ToolBar item collection.

    """
    @overload
    def Add(self, item: ToolItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def AddRange(self, commands: Generic.IEnumerable, order: int) -> None: ...
    @overload
    def AddSeparator(self, order: int, type_: SeparatorToolItemType) -> None: ...

class TrayIndicator(Eto.Widget):
    """A system tray indicator.

    """
    def __init__(self): ...
    @property
    def ActivatedEvent(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def Title(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def Hide() -> None: ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def Show() -> None: ...
    @property
    def Activated(self): ...
    @property
    def StyleChanged(self): ...

class UITimer(Eto.Widget):
    """Provides a timer that executes code at a specified interval on the UI thread

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elapsedHandler: System.EventHandler): ...
    @property
    def Interval(self) -> float: ...
    @property
    def Started(self) -> bool: ...
    @Interval.setter
    def Interval(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Stop() -> None: ...
    @property
    def Elapsed(self): ...
    @property
    def StyleChanged(self): ...

class IValueCommand:
    """Interface for a command that can provide a value

    IValueCommand[T]
    """
    @overload
    def GetValue(self, parameter: object) -> T: ...
    @overload
    def SetValue(self, parameter: object, value: T) -> None: ...
    @property
    def ValueChanged(self): ...

class ValueCommand(Command):
    """Command that provides a specific value.

    ValueCommand[T]
    """
    def __init__(self): ...
    @property
    def Value(self) -> T: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def ValueChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def Executed(self): ...
    @property
    def DataContextChanged(self): ...

class WidgetExtensions(object):
    """Extensions for widget objects

    """
    @overload
    @staticmethod
    def With(widget: T, action: System.Action) -> T: ...

class WindowState(enum.Enum):
    Normal = 0
    Maximized = 1
    Minimized = 2

class WindowStyle(enum.Enum):
    Default = 0
    None_ = 1
    Utility = 2

class Window(Panel):
    """Base window

    """
    @property
    def ClosedEvent(self) -> str: ...
    @property
    def ClosingEvent(self) -> str: ...
    @property
    def LocationChangedEvent(self) -> str: ...
    @property
    def WindowStateChangedEvent(self) -> str: ...
    @property
    def LogicalPixelSizeChangedEvent(self) -> str: ...
    @overload
    def BringToFront() -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def FromPoint(point: Drawing.PointF) -> Window: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Closeable(self) -> bool: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def LogicalPixelSize(self) -> System.Single: ...
    @property
    def Maximizable(self) -> bool: ...
    @property
    def Menu(self) -> MenuBar: ...
    @property
    def Minimizable(self) -> bool: ...
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Owner(self) -> Window: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RestoreBounds(self) -> Drawing.Rectangle: ...
    @property
    def Screen(self) -> Screen: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolBar(self) -> ToolBar: ...
    @property
    def Topmost(self) -> bool: ...
    @property
    def WindowState(self) -> WindowState: ...
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def Maximize() -> None: ...
    @overload
    def Minimize() -> None: ...
    @overload
    def SendToBack() -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @Closeable.setter
    def Closeable(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Maximizable.setter
    def Maximizable(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @Minimizable.setter
    def Minimizable(self, value: System.Void): ...
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self, value: System.Void): ...
    @Opacity.setter
    def Opacity(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @ToolBar.setter
    def ToolBar(self, value: System.Void): ...
    @Topmost.setter
    def Topmost(self, value: System.Void): ...
    @WindowState.setter
    def WindowState(self, value: System.Void): ...
    @WindowStyle.setter
    def WindowStyle(self, value: System.Void): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def WindowStateChanged(self): ...
    @property
    def LogicalPixelSizeChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyUp(self): ...
    @property
    def TextInput(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Shown(self): ...
    @property
    def PreLoad(self): ...
    @property
    def Load(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def UnLoad(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragEnd(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def StyleChanged(self): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> System.System.Array[str]: ...
    @property
    def Developers(self) -> System.System.Array[str]: ...
    @property
    def Documenters(self) -> System.System.Array[str]: ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Drawing.Image: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> System.Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: System.Void): ...
    @Designers.setter
    def Designers(self, value: System.Void): ...
    @Developers.setter
    def Developers(self, value: System.Void): ...
    @Documenters.setter
    def Documenters(self, value: System.Void): ...
    @License.setter
    def License(self, value: System.Void): ...
    @Logo.setter
    def Logo(self, value: System.Void): ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: System.Void): ...
    @ProgramName.setter
    def ProgramName(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @Website.setter
    def Website(self, value: System.Void): ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: System.Void): ...

class ICallback:
    """Interface for callbacks to the
class

    """
    @overload
    def OnInitialized(self, widget: Application, e: System.EventArgs) -> None: ...
    @overload
    def OnIsActiveChanged(self, wiget: Application, e: System.EventArgs) -> None: ...
    @overload
    def OnNotificationActivated(self, wiget: Application, e: NotificationEventArgs) -> None: ...
    @overload
    def OnTerminating(self, widget: Application, e: ComponentModel.CancelEventArgs) -> None: ...
    @overload
    def OnUnhandledException(self, widget: Application, e: Eto.UnhandledExceptionEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
class

    """
    @overload
    def AsyncInvoke(self, action: System.Action) -> None: ...
    @overload
    def Attach(self, context: object) -> None: ...
    @property
    def AlternateModifier(self) -> Keys: ...
    @property
    def BadgeLabel(self) -> str: ...
    @property
    def CommonModifier(self) -> Keys: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def QuitIsSupported(self) -> bool: ...
    @overload
    def Invoke(self, action: System.Action) -> None: ...
    @overload
    def OnMainFormChanged() -> None: ...
    @overload
    def Open(self, url: str) -> None: ...
    @overload
    def Quit() -> None: ...
    @overload
    def Restart() -> None: ...
    @overload
    def Run() -> None: ...
    @overload
    def RunIteration() -> None: ...
    @BadgeLabel.setter
    def BadgeLabel(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """

class IHandler:
    """Handler interface for the
.

    """
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnBeginEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnCancelEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnCommitEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnConfigureCell(self, widget: CustomCell, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreateCell(self, widget: CustomCell, args: CellEventArgs) -> Control: ...
    @overload
    def OnGetIdentifier(self, widget: CustomCell, args: CellEventArgs) -> str: ...
    @overload
    def OnGetPreferredWidth(self, widget: CustomCell, args: CellEventArgs) -> System.Single: ...
    @overload
    def OnPaint(self, widget: CustomCell, args: CellPaintEventArgs) -> None: ...

class ICallback:
    """Callback interface for handlers of the
cell.

    """
    @overload
    def OnPaint(self, widget: DrawableCell, e: DrawableCellPaintEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """

class IHandler:
    """Handler interface for the
.

    """
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def ImageInterpolation(self) -> Drawing.ImageInterpolation: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def ImageInterpolation(self) -> Drawing.ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """

class IHandler:
    """Handler interface for the
.

    """
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def TryGetObject(self, type_: str, objectType: System.Type) -> (bool, object): ...
    @overload
    def TrySetObject(self, value: object, type_: str) -> bool: ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnColorChanged(self, widget: ColorDialog, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def ClientSize(self) -> Drawing.Size: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @ClientSize.setter
    def ClientSize(self, value: System.Void): ...

class ICallback:
    """Callback interface for
.

    """
    @overload
    def OnClick(self, widget: Button, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImagePosition.setter
    def ImagePosition(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...

class ICallback:
    """Callback interface for handlers of the
.

    """
    @overload
    def OnSelectedDateChanged(self, widget: Calendar, e: System.EventArgs) -> None: ...
    @overload
    def OnSelectedRangeChanged(self, widget: Calendar, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def Mode(self) -> CalendarMode: ...
    @property
    def SelectedDate(self) -> System.DateTime: ...
    @property
    def SelectedRange(self) -> Range: ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @SelectedDate.setter
    def SelectedDate(self, value: System.Void): ...
    @SelectedRange.setter
    def SelectedRange(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnCheckedChanged(self, widget: CheckBox, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @property
    def Checked(self) -> System.Nullable: ...
    @property
    def ThreeState(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @ThreeState.setter
    def ThreeState(self, value: System.Void): ...

class IHandler:
    """Handler for the
.

    """
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ElementType(self) -> System.Type: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ElementType.setter
    def ElementType(self, value: System.Void): ...

class ICallback:
    """A callback interface for
.

    """
    @overload
    def OnColorChanged(self, widget: ColorPicker, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnTextChanged(self, widget: ComboBox, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @AutoComplete.setter
    def AutoComplete(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Font(self) -> Drawing.Font: ...
    @Font.setter
    def Font(self, value: System.Void): ...

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnDragDrop(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragEnd(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragEnter(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragLeave(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragOver(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnEnabledChanged(self, widget: Control, e: System.EventArgs) -> None: ...
    @overload
    def OnGotFocus(self, widget: Control, e: System.EventArgs) -> None: ...
    @overload
    def OnKeyDown(self, widget: Control, e: KeyEventArgs) -> None: ...
    @overload
    def OnKeyUp(self, widget: Control, e: KeyEventArgs) -> None: ...
    @overload
    def OnLostFocus(self, widget: Control, e: System.EventArgs) -> None: ...
    @overload
    def OnMouseDoubleClick(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseDown(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseEnter(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseLeave(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseMove(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseUp(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseWheel(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnShown(self, widget: Control, e: System.EventArgs) -> None: ...
    @overload
    def OnSizeChanged(self, widget: Control, e: System.EventArgs) -> None: ...
    @overload
    def OnTextInput(self, widget: Control, e: TextInputEventArgs) -> None: ...

class IHandler:
    """Handler interface for

    """
    @overload
    def CaptureMouse() -> bool: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Drawing.Image, cursorOffset: Drawing.PointF) -> None: ...
    @overload
    def Focus() -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def SupportedPlatformCommands(self) -> Generic.IEnumerable: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Generic.IEnumerable: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetNativeParentWindow() -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: Drawing.SizeF) -> Drawing.SizeF: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Drawing.Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def OnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: System.EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def PointToScreen(self, point: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def ReleaseMouseCapture() -> None: ...
    @overload
    def ResumeLayout() -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout() -> None: ...
    @overload
    def UpdateLayout() -> None: ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnValueChanged(self, widget: DateTimePicker, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def Value(self) -> System.Nullable: ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnPageClosed(self, widget: DocumentControl, e: DocumentPageEventArgs) -> None: ...
    @overload
    def OnPageClosing(self, widget: DocumentControl, e: DocumentPageClosingEventArgs) -> None: ...
    @overload
    def OnPageReordered(self, widget: DocumentControl, e: DocumentPageReorderEventArgs) -> None: ...
    @overload
    def OnSelectedIndexChanged(self, widget: DocumentControl, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    def GetPage(self, index: int) -> DocumentPage: ...
    @overload
    def GetPageCount() -> int: ...
    @overload
    def InsertPage(self, index: int, page: DocumentPage) -> None: ...
    @overload
    def RemovePage(self, index: int) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Closable(self) -> bool: ...
    @property
    def HasUnsavedChanges(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @Closable.setter
    def Closable(self, value: System.Void): ...
    @HasUnsavedChanges.setter
    def HasUnsavedChanges(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ICallback:
    """Callback interface for

    """
    @overload
    def OnPaint(self, widget: Drawable, e: PaintEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @overload
    def Create() -> None: ...
    @overload
    def Create(self, largeCanvas: bool) -> None: ...
    @overload
    def CreateGraphics() -> Drawing.Graphics: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: System.Void): ...
    @overload
    def Update(self, region: Drawing.Rectangle) -> None: ...

class ICallback:
    """Callback interface for the
control.

    """
    @overload
    def OnDropDownClosed(self, widget: DropDown, e: System.EventArgs) -> None: ...
    @overload
    def OnDropDownOpening(self, widget: DropDown, e: System.EventArgs) -> None: ...
    @overload
    def OnFormatItem(self, widget: DropDown, e: DropDownFormatEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @property
    def ShowBorder(self) -> bool: ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...

class ICallback:
    """Callback interface for
.

    """
    @overload
    def OnExpandedChanged(self, widget: Expander, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for platform implementations of
.

    """
    @property
    def Expanded(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Header.setter
    def Header(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control.

    """
    @overload
    def ClearFilters() -> None: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def FileAction(self) -> Eto.FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @overload
    def InsertFilter(self, index: int, filter_: FileFilter) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: System.Void): ...
    @FileAction.setter
    def FileAction(self, value: System.Void): ...
    @FilePath.setter
    def FilePath(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...

class ICallback:
    """Callback interface for
.

    """
    @overload
    def OnFilePathChanged(self, widget: FilePicker, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Value(self) -> Drawing.Font: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ICallback:
    """Callback interface for handlers of the
.

    """
    @overload
    def OnValueChanged(self, widget: FontPicker, e: System.EventArgs) -> None: ...

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnCellClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    @overload
    def OnCellDoubleClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    @overload
    def OnCellEdited(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    @overload
    def OnCellEditing(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    @overload
    def OnCellFormatting(self, widget: Grid, e: GridCellFormatEventArgs) -> None: ...
    @overload
    def OnColumnHeaderClick(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnColumnOrderChanged(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnColumnWidthChanged(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnRowFormatting(self, widget: Grid, e: GridRowFormatEventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: Grid, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit() -> bool: ...
    @overload
    def CommitEdit() -> bool: ...
    @property
    def AllowColumnReordering(self) -> bool: ...
    @property
    def AllowEmptySelection(self) -> bool: ...
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def GridLines(self) -> GridLines: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def RowHeight(self) -> int: ...
    @property
    def SelectedRows(self) -> Generic.IEnumerable: ...
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @AllowColumnReordering.setter
    def AllowColumnReordering(self, value: System.Void): ...
    @AllowEmptySelection.setter
    def AllowEmptySelection(self, value: System.Void): ...
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self, value: System.Void): ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @GridLines.setter
    def GridLines(self, value: System.Void): ...
    @RowHeight.setter
    def RowHeight(self, value: System.Void): ...
    @SelectedRows.setter
    def SelectedRows(self, value: System.Void): ...
    @ShowHeader.setter
    def ShowHeader(self, value: System.Void): ...
    @overload
    def UnselectAll() -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def AutoSize(self) -> bool: ...
    @property
    def CellToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def DataCell(self) -> Cell: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def Editable(self) -> bool: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @property
    def HeaderToolTip(self) -> str: ...
    @property
    def MaxWidth(self) -> int: ...
    @property
    def MinWidth(self) -> int: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Sortable(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @CellToolTipBinding.setter
    def CellToolTipBinding(self, value: System.Void): ...
    @DataCell.setter
    def DataCell(self, value: System.Void): ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: System.Void): ...
    @Editable.setter
    def Editable(self, value: System.Void): ...
    @Expand.setter
    def Expand(self, value: System.Void): ...
    @HeaderText.setter
    def HeaderText(self, value: System.Void): ...
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self, value: System.Void): ...
    @HeaderToolTip.setter
    def HeaderToolTip(self, value: System.Void): ...
    @MaxWidth.setter
    def MaxWidth(self, value: System.Void): ...
    @MinWidth.setter
    def MinWidth(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @Sortable.setter
    def Sortable(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @overload
    def GetCellAt(self, location: Drawing.PointF) -> GridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    @overload
    def ReloadData(self, rows: Generic.IEnumerable) -> None: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Image(self) -> Drawing.Image: ...
    @Image.setter
    def Image(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @property
    def Wrap(self) -> WrapMode: ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...

class ICallback:
    """Callback interface for

    """
    @overload
    def OnClick(self, widget: LinkButton, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def DisabledTextColor(self) -> Drawing.Color: ...
    @DisabledTextColor.setter
    def DisabledTextColor(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnActivated(self, widget: ListBox, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnSelectedIndexChanged(self, widget: ListControl, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def DataStore(self) -> Generic.IEnumerable: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: System.Void): ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnCreateNativeControl(self, widget: NativeControlHost, e: CreateNativeControlArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def Create(self, nativeControl: object) -> None: ...

class ICallback:
    """Callback interface for the
control.

    """
    @overload
    def OnItemRemoved(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...
    @overload
    def OnItemShown(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @overload
    def Pop() -> None: ...
    @overload
    def Push(self, item: INavigationItem) -> None: ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnValueChanged(self, widget: NumericStepper, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control.

    """
    @property
    def CultureInfo(self) -> Globalization.CultureInfo: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def Increment(self) -> float: ...
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def MinValue(self) -> float: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def Value(self) -> float: ...
    @property
    def Wrap(self) -> bool: ...
    @CultureInfo.setter
    def CultureInfo(self, value: System.Void): ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: System.Void): ...
    @FormatString.setter
    def FormatString(self, value: System.Void): ...
    @Increment.setter
    def Increment(self, value: System.Void): ...
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...

class IHandler:
    """Handler interface fot the

    """
    @property
    def Content(self) -> Control: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def MaxLength(self) -> int: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def Indeterminate(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @Indeterminate.setter
    def Indeterminate(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnPropertyValueChanged(self, widget: PropertyGrid, e: PropertyValueChangedEventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Generic.IEnumerable: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @overload
    def Refresh() -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: System.Void): ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: System.Void): ...
    @ShowCategories.setter
    def ShowCategories(self, value: System.Void): ...
    @ShowDescription.setter
    def ShowDescription(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnCheckedChanged(self, widget: RadioButton, e: System.EventArgs) -> None: ...
    @overload
    def OnClick(self, widget: RadioButton, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def Create(self, controller: RadioButton) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Buffer(self) -> ITextBuffer: ...
    @property
    def SelectionBackground(self) -> Drawing.Color: ...
    @property
    def SelectionBold(self) -> bool: ...
    @property
    def SelectionFamily(self) -> Drawing.FontFamily: ...
    @property
    def SelectionFont(self) -> Drawing.Font: ...
    @property
    def SelectionForeground(self) -> Drawing.Color: ...
    @property
    def SelectionItalic(self) -> bool: ...
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @property
    def SelectionTypeface(self) -> Drawing.FontTypeface: ...
    @property
    def SelectionUnderline(self) -> bool: ...
    @SelectionBackground.setter
    def SelectionBackground(self, value: System.Void): ...
    @SelectionBold.setter
    def SelectionBold(self, value: System.Void): ...
    @SelectionFamily.setter
    def SelectionFamily(self, value: System.Void): ...
    @SelectionFont.setter
    def SelectionFont(self, value: System.Void): ...
    @SelectionForeground.setter
    def SelectionForeground(self, value: System.Void): ...
    @SelectionItalic.setter
    def SelectionItalic(self, value: System.Void): ...
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self, value: System.Void): ...
    @SelectionTypeface.setter
    def SelectionTypeface(self, value: System.Void): ...
    @SelectionUnderline.setter
    def SelectionUnderline(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnScroll(self, widget: Scrollable, e: ScrollEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def Border(self) -> BorderType: ...
    @property
    def ExpandContentHeight(self) -> bool: ...
    @property
    def ExpandContentWidth(self) -> bool: ...
    @property
    def MaximumZoom(self) -> System.Single: ...
    @property
    def MinimumZoom(self) -> System.Single: ...
    @property
    def ScrollPosition(self) -> Drawing.Point: ...
    @property
    def ScrollSize(self) -> Drawing.Size: ...
    @property
    def VisibleRect(self) -> Drawing.Rectangle: ...
    @property
    def Zoom(self) -> System.Single: ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @ExpandContentHeight.setter
    def ExpandContentHeight(self, value: System.Void): ...
    @ExpandContentWidth.setter
    def ExpandContentWidth(self, value: System.Void): ...
    @MaximumZoom.setter
    def MaximumZoom(self, value: System.Void): ...
    @MinimumZoom.setter
    def MinimumZoom(self, value: System.Void): ...
    @ScrollPosition.setter
    def ScrollPosition(self, value: System.Void): ...
    @ScrollSize.setter
    def ScrollSize(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @overload
    def UpdateScrollSizes() -> None: ...

class IHandler:
    """Handler interface for the
control

    """

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnValueChanged(self, widget: Slider, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SnapToTick(self) -> bool: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @SnapToTick.setter
    def SnapToTick(self, value: System.Void): ...
    @TickFrequency.setter
    def TickFrequency(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control

    """

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnPositionChangeCompleted(self, widget: Splitter, e: System.EventArgs) -> None: ...
    @overload
    def OnPositionChanged(self, widget: Splitter, e: System.EventArgs) -> None: ...
    @overload
    def OnPositionChangeStarted(self, widget: Splitter, e: System.EventArgs) -> None: ...
    @overload
    def OnPositionChanging(self, widget: Splitter, e: SplitterPositionChangingEventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def SplitterWidth(self) -> int: ...
    @FixedPanel.setter
    def FixedPanel(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Panel1.setter
    def Panel1(self, value: System.Void): ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: System.Void): ...
    @Panel2.setter
    def Panel2(self, value: System.Void): ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @RelativePosition.setter
    def RelativePosition(self, value: System.Void): ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: System.Void): ...

class ICallback:
    """Callback interface for the Stepper

    """
    @overload
    def OnStep(self, widget: Stepper, e: StepperEventArgs) -> None: ...

class IHandler:
    """Handler interface for the Stepper

    """
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnSelectedIndexChanged(self, widget: TabControl, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def ClearTabs() -> None: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def TabPosition(self) -> DockPosition: ...
    @overload
    def InsertTab(self, index: int, page: TabPage) -> None: ...
    @overload
    def RemoveTab(self, index: int, page: TabPage) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @TabPosition.setter
    def TabPosition(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnCaretIndexChanged(self, widget: TextArea, e: System.EventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: TextArea, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def SpellCheck(self) -> bool: ...
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @property
    def Wrap(self) -> bool: ...
    @overload
    def ScrollTo(self, range_: Range) -> None: ...
    @overload
    def ScrollToEnd() -> None: ...
    @overload
    def ScrollToStart() -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: System.Void): ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: System.Void): ...
    @Border.setter
    def Border(self, value: System.Void): ...
    @CaretIndex.setter
    def CaretIndex(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @Selection.setter
    def Selection(self, value: System.Void): ...
    @SpellCheck.setter
    def SpellCheck(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...
    @TextReplacements.setter
    def TextReplacements(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    def SelectAll() -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: System.Void): ...
    @CaretIndex.setter
    def CaretIndex(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Selection.setter
    def Selection(self, value: System.Void): ...
    @ShowBorder.setter
    def ShowBorder(self, value: System.Void): ...
    @TextAlignment.setter
    def TextAlignment(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
based controls

    """
    @overload
    def OnTextChanging(self, widget: TextBox, e: TextChangingEventArgs) -> None: ...

class ICallback:
    """Callback interface for the
based controls

    """
    @overload
    def OnTextChanged(self, widget: TextControl, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
based controls

    """
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...

class ICallback:
    """Callback interface for the TextStepper

    """
    @overload
    def OnStep(self, widget: TextStepper, e: StepperEventArgs) -> None: ...

class IHandler:
    """Handler interface for platform implementations of the TextStepper

    """
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ShowStepper.setter
    def ShowStepper(self, value: System.Void): ...
    @ValidDirection.setter
    def ValidDirection(self, value: System.Void): ...

class ICallback:
    """Callback interface for handlers of the
.

    """
    @overload
    def OnCheckedChanged(self, widget: ToggleButton, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnActivated(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsed(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsing(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    @overload
    def OnExpanded(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnExpanding(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    @overload
    def OnSelectedItemChanged(self, widget: TreeGridView, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @property
    def SelectedItems(self) -> Generic.IEnumerable: ...
    @overload
    def GetCellAt(self, location: Drawing.PointF) -> TreeGridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    @overload
    def ReloadData() -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnActivated(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsed(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnExpanded(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnExpanding(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnLabelEdited(self, widget: TreeView, e: TreeViewItemEditEventArgs) -> None: ...
    @overload
    def OnLabelEditing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnNodeMouseClick(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: TreeView, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for

    """
    @property
    def DataStore(self) -> ITreeStore: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def SelectedItem(self) -> ITreeItem: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @overload
    def GetNodeAt(self, point: Drawing.PointF) -> ITreeItem: ...
    @overload
    def RefreshData() -> None: ...
    @overload
    def RefreshItem(self, item: ITreeItem) -> None: ...
    @DataStore.setter
    def DataStore(self, value: System.Void): ...
    @LabelEdit.setter
    def LabelEdit(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnDocumentLoaded(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    @overload
    def OnDocumentLoading(self, widget: WebView, e: WebViewLoadingEventArgs) -> None: ...
    @overload
    def OnDocumentTitleChanged(self, widget: WebView, e: WebViewTitleEventArgs) -> None: ...
    @overload
    def OnMessageReceived(self, widget: WebView, e: WebViewMessageEventArgs) -> None: ...
    @overload
    def OnNavigated(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    @overload
    def OnOpenNewWindow(self, widget: WebView, e: WebViewNewWindowEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def ExecuteScript(self, script: str) -> str: ...
    @overload
    def ExecuteScriptAsync(self, script: str) -> Tasks.Task: ...
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...
    @overload
    def GoBack() -> None: ...
    @overload
    def GoForward() -> None: ...
    @overload
    def LoadHtml(self, html: str, baseUri: System.Uri) -> None: ...
    @overload
    def Reload() -> None: ...
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self, value: System.Void): ...
    @Url.setter
    def Url(self, value: System.Void): ...
    @overload
    def ShowPrintDialog() -> None: ...
    @overload
    def Stop() -> None: ...

class IHandler:
    """Platform interface for the
class

    """
    @overload
    def Create(self, type_: CursorType) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: IO.Stream) -> None: ...
    @overload
    def Create(self, image: Drawing.Image, hotspot: Drawing.PointF) -> None: ...

class IHandler:
    """Handler interface for implementations of the DataFormats object.

    """
    @property
    def Color(self) -> str: ...
    @property
    def Html(self) -> str: ...
    @property
    def Text(self) -> str: ...

class IHandler:
    """Handler interface for platform implementations of

    """
    @overload
    def TryGetObject(self, type_: str, objectType: System.Type) -> (bool, object): ...
    @overload
    def TrySetObject(self, value: object, type_: str) -> bool: ...

class IHandler:
    """Handler interface for the
class

    """
    @property
    def AbortButton(self) -> Button: ...
    @property
    def DefaultButton(self) -> Button: ...
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @overload
    def InsertDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    @overload
    def RemoveDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    @AbortButton.setter
    def AbortButton(self, value: System.Void): ...
    @DefaultButton.setter
    def DefaultButton(self, value: System.Void): ...
    @DisplayMode.setter
    def DisplayMode(self, value: System.Void): ...
    @overload
    def ShowModal() -> None: ...
    @overload
    def ShowModalAsync() -> Tasks.Task: ...

class IHandler:
    """Handler interface for the
based widgets

    """
    @overload
    def ClearFilters() -> None: ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Directory(self) -> System.Uri: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @overload
    def InsertFilter(self, index: int, filter_: FileFilter) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: System.Void): ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: System.Void): ...
    @Directory.setter
    def Directory(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...

class IHandler:
    """Interface handler for the
control

    """

class ICallback:
    """Callback interface for handlers of the
.

    """
    @overload
    def OnFontChanged(self, widget: FontDialog, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Font(self) -> Drawing.Font: ...
    @Font.setter
    def Font(self, value: System.Void): ...

class IHandler:
    """Interface handler for the
control

    """
    @property
    def CanFocus(self) -> bool: ...
    @property
    def ShowActivated(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: System.Void): ...
    @ShowActivated.setter
    def ShowActivated(self, value: System.Void): ...
    @overload
    def Show() -> None: ...

class IHandler:
    """Handler for platforms to implement the
functionality.

    """
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def SupportedLockKeys(self) -> Generic.IEnumerable: ...
    @overload
    def IsKeyLocked(self, key: Keys) -> bool: ...
    @property
    def ModifiersChanged(self): ...

class IHandler:
    """Platform handler interface for the the
class

    """
    @overload
    def Update() -> None: ...

class IPositionalLayoutHandler:
    """Platform handler interface for positional layouts where controls are placed in an x, y grid

    """
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Remove(self, control: Control) -> None: ...

class IHandler:
    """Handler interface for the
control

    """

class IHandler:
    """Handler interface for

    """
    @overload
    def CreateControl(self, columns: int, rows: int) -> None: ...
    @property
    def Padding(self) -> Drawing.Padding: ...
    @property
    def Spacing(self) -> Drawing.Size: ...
    @overload
    def GetColumnScale(self, column: int) -> bool: ...
    @overload
    def GetRowScale(self, row: int) -> bool: ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Spacing.setter
    def Spacing(self, value: System.Void): ...
    @overload
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    @overload
    def SetRowScale(self, row: int, scale: bool) -> None: ...

class IHandler:
    """Handler interface for implementations of the
.

    """
    @overload
    def Create(self, mask: str, culture: Globalization.CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool) -> None: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AutoAdvance(self) -> bool: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def PromptChar(self) -> System.Char: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @AutoAdvance.setter
    def AutoAdvance(self, value: System.Void): ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: System.Void): ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: System.Void): ...
    @IsPassword.setter
    def IsPassword(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @PromptChar.setter
    def PromptChar(self, value: System.Void): ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Image(self) -> Drawing.Image: ...
    @Image.setter
    def Image(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
class.

    """
    @overload
    def OnCheckedChanged(self, widget: CheckMenuItem, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnClosed(self, widget: ContextMenu, e: System.EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: ContextMenu, e: System.EventArgs) -> None: ...
    @overload
    def OnOpening(self, widget: ContextMenu, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def Show(self, relativeTo: Control, location: System.Nullable) -> None: ...

class ISubmenuHandler:
    """Handler interface for menus that implement a submenu

    """
    @overload
    def AddMenu(self, index: int, item: MenuItem) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def RemoveMenu(self, item: MenuItem) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def CreateLegacySystemMenu() -> None: ...
    @overload
    def CreateSystemMenu() -> None: ...
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    @overload
    def GetSystemCommands() -> Generic.IEnumerable: ...
    @overload
    def SetAboutItem(self, item: MenuItem) -> None: ...
    @overload
    def SetQuitItem(self, item: MenuItem) -> None: ...

class ICallback:
    """Callback interface for the

    """
    @overload
    def OnClick(self, widget: MenuItem, e: System.EventArgs) -> None: ...
    @overload
    def OnValidate(self, widget: MenuItem, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def CreateFromCommand(self, command: Command) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Shortcut.setter
    def Shortcut(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class ICallback:
    """Callback interface for the
.

    """
    @overload
    def OnCheckedChanged(self, widget: RadioMenuItem, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def Create(self, controller: RadioMenuItem) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnClosed(self, widget: SubMenuItem, e: System.EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: SubMenuItem, e: System.EventArgs) -> None: ...
    @overload
    def OnOpening(self, widget: SubMenuItem, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """

class IHandler:
    """Handler interface for the

    """
    @property
    def Buttons(self) -> MessageBoxButtons: ...
    @property
    def Caption(self) -> str: ...
    @property
    def DefaultButton(self) -> MessageBoxDefaultButton: ...
    @property
    def Text(self) -> str: ...
    @property
    def Type(self) -> MessageBoxType: ...
    @Buttons.setter
    def Buttons(self, value: System.Void): ...
    @Caption.setter
    def Caption(self, value: System.Void): ...
    @DefaultButton.setter
    def DefaultButton(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...

class IHandler:
    """Handler interface for the
class

    """
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def Position(self) -> Drawing.PointF: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetCursor(self, cursor: Cursor) -> None: ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def ContentImage(self) -> Drawing.Image: ...
    @property
    def Message(self) -> str: ...
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def UserData(self) -> str: ...
    @ContentImage.setter
    def ContentImage(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @UserData.setter
    def UserData(self, value: System.Void): ...
    @overload
    def Show(self, indicator: TrayIndicator) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Filenames(self) -> Generic.IEnumerable: ...
    @property
    def MultiSelect(self) -> bool: ...
    @MultiSelect.setter
    def MultiSelect(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def PrintableArea(self) -> Drawing.RectangleF: ...

class IHandler:
    """Handler for the
.

    """
    @property
    def AllowPageRange(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @AllowPageRange.setter
    def AllowPageRange(self, value: System.Void): ...
    @AllowSelection.setter
    def AllowSelection(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...

class ICallback:
    """Interface for handlers to trigger events

    """
    @overload
    def OnPrinted(self, widget: PrintDocument, e: System.EventArgs) -> None: ...
    @overload
    def OnPrinting(self, widget: PrintDocument, e: System.EventArgs) -> None: ...
    @overload
    def OnPrintPage(self, widget: PrintDocument, e: PrintPageEventArgs) -> None: ...

class IHandler:
    """Handler interface for the
widget

    """
    @overload
    def Create() -> None: ...
    @overload
    def Create(self, control: Control) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def PageCount(self) -> int: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    def Print() -> None: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PageCount.setter
    def PageCount(self, value: System.Void): ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...

class IHandler:
    """Handler for the
.

    """
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @PrintSettings.setter
    def PrintSettings(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
class.

    """
    @property
    def Collate(self) -> bool: ...
    @property
    def Copies(self) -> int: ...
    @property
    def MaximumPageRange(self) -> Range: ...
    @property
    def Orientation(self) -> PageOrientation: ...
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def SelectedPageRange(self) -> Range: ...
    @Collate.setter
    def Collate(self, value: System.Void): ...
    @Copies.setter
    def Copies(self, value: System.Void): ...
    @MaximumPageRange.setter
    def MaximumPageRange(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @PrintSelection.setter
    def PrintSelection(self, value: System.Void): ...
    @Reverse.setter
    def Reverse(self, value: System.Void): ...
    @SelectedPageRange.setter
    def SelectedPageRange(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """

class IHandler:
    """Handler interface for the
.

    """
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def IsPrimary(self) -> bool: ...
    @property
    def RealScale(self) -> System.Single: ...
    @property
    def Scale(self) -> System.Single: ...
    @property
    def WorkingArea(self) -> Drawing.RectangleF: ...
    @overload
    def GetImage(self, rect: Drawing.RectangleF) -> Drawing.Image: ...

class IScreensHandler:
    """Handler interface for static methods of the
.

    """
    @property
    def PrimaryScreen(self) -> Screen: ...
    @property
    def Screens(self) -> Generic.IEnumerable: ...

class IHandler:
    """Handler interface for the
.

    """

class IHandler:
    """Handler interface for the
.

    """
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @CanSelect.setter
    def CanSelect(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...

class ICallback:
    """Callback interface for handlers of

    """
    @overload
    def OnItemClicked(self, widget: SegmentedButton, e: SegmentedItemClickEventArgs) -> None: ...
    @overload
    def OnSelectedIndexesChanged(self, widget: SegmentedButton, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for
.

    """
    @overload
    def ClearItems() -> None: ...
    @overload
    def ClearSelection() -> None: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Generic.IEnumerable: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @overload
    def InsertItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def RemoveItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @overload
    def SetItem(self, index: int, item: SegmentedItem) -> None: ...

class ICallback:
    """Callback interface for handlers of the
.

    """
    @overload
    def OnClick(self, widget: SegmentedItem, e: System.EventArgs) -> None: ...
    @overload
    def OnSelectedChanged(self, widget: SegmentedItem, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...

class IHandler:
    """Handler interface for the

    """
    @property
    def Directory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Directory.setter
    def Directory(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def SetProgress(self, state: TaskbarProgressState, progress: System.Single) -> None: ...

class IHandler:
    """Handler for the
.

    """

class IHandler:
    """Handler for the
.

    """
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class IHandler:
    """Handler for the
.

    """
    @property
    def ShowDropArrow(self) -> bool: ...
    @ShowDropArrow.setter
    def ShowDropArrow(self, value: System.Void): ...

class IHandler:
    """Handler for the
.

    """
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class IHandler:
    """Interface for platform implementations of the
class.

    """
    @overload
    def OnLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: System.EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def AddButton(self, button: ToolItem, index: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Dock(self) -> ToolBarDock: ...
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    @overload
    def RemoveButton(self, button: ToolItem, index: int) -> None: ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
.

    """
    @overload
    def CreateFromCommand(self, command: Command) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTip.setter
    def ToolTip(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class IHandler:
    """Handler interface for the
control

    """
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def Title(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class ICallback:
    """Callback interface for

    """
    @overload
    def OnActivated(self, widget: TrayIndicator, e: System.EventArgs) -> None: ...

class ICallback:
    """Callback interface for

    """
    @overload
    def OnElapsed(self, widget: UITimer, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for

    """
    @property
    def Interval(self) -> float: ...
    @Interval.setter
    def Interval(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Stop() -> None: ...

class ICallback:
    """Callback interface for instances of

    """
    @overload
    def OnClosed(self, widget: Window, e: System.EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: Window, e: ComponentModel.CancelEventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, widget: Window, e: System.EventArgs) -> None: ...
    @overload
    def OnLocationChanged(self, widget: Window, e: System.EventArgs) -> None: ...
    @overload
    def OnLogicalPixelSizeChanged(self, widget: Window, e: System.EventArgs) -> None: ...
    @overload
    def OnWindowStateChanged(self, widget: Window, e: System.EventArgs) -> None: ...

class IHandler:
    """Handler interface for the

    """
    @overload
    def BringToFront() -> None: ...
    @overload
    def Close() -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Closeable(self) -> bool: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def LogicalPixelSize(self) -> System.Single: ...
    @property
    def Maximizable(self) -> bool: ...
    @property
    def Menu(self) -> MenuBar: ...
    @property
    def Minimizable(self) -> bool: ...
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RestoreBounds(self) -> Drawing.Rectangle: ...
    @property
    def Screen(self) -> Screen: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolBar(self) -> ToolBar: ...
    @property
    def Topmost(self) -> bool: ...
    @property
    def WindowState(self) -> WindowState: ...
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def SendToBack() -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @Closeable.setter
    def Closeable(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Maximizable.setter
    def Maximizable(self, value: System.Void): ...
    @Menu.setter
    def Menu(self, value: System.Void): ...
    @Minimizable.setter
    def Minimizable(self, value: System.Void): ...
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self, value: System.Void): ...
    @Opacity.setter
    def Opacity(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @ToolBar.setter
    def ToolBar(self, value: System.Void): ...
    @Topmost.setter
    def Topmost(self, value: System.Void): ...
    @WindowState.setter
    def WindowState(self, value: System.Void): ...
    @WindowStyle.setter
    def WindowStyle(self, value: System.Void): ...
    @overload
    def SetOwner(self, owner: Window) -> None: ...

class IWindowHandler:
    """Handler interface for static methods of

    """
    @overload
    def FromPoint(self, point: Drawing.PointF) -> Window: ...

# endregion
