"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Syntax", "Conversion", "CSharpCommandLineArguments", "CSharpCommandLineParser", "AwaitExpressionInfo", "CSharpCompilation", "CSharpScriptCompilationInfo", "DeconstructionInfo", "ForEachStatementInfo", "QueryClauseInfo", "CSharpCompilationOptions", "CSharpExtensions", "CSharpFileSystemExtensions", "CSharpParseOptions", "CSharpDiagnosticFormatter", "LanguageVersion", "LanguageVersionFacts", "SyntaxFacts", "CSharpGeneratorDriver", "SymbolDisplay", "TypedConstantExtensions", "SyntaxFactory", "CSharpSyntaxNode", "CSharpSyntaxRewriter", "CSharpSyntaxTree", "CSharpSyntaxVisitor", "CSharpSyntaxWalker", "SyntaxExtensions", "SyntaxKind"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import Diagnostics
from Microsoft.CodeAnalysis import Emit
from Microsoft.CodeAnalysis import Operations
from Microsoft.CodeAnalysis import Text
from Microsoft.CodeAnalysis.CSharp import Syntax
from System import IO
from System import Text
from System import Threading
from System.Collections import Generic
from System.Collections import Immutable
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis.CSharp, Version=4.6.0.0

class Conversion(System.ValueType):
    """    """
    @overload
    def Equals(self, other: Conversion) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsAnonymousFunction(self) -> bool: ...
    @property
    def IsBoxing(self) -> bool: ...
    @property
    def IsConditionalExpression(self) -> bool: ...
    @property
    def IsConstantExpression(self) -> bool: ...
    @property
    def IsDefaultLiteral(self) -> bool: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def IsEnumeration(self) -> bool: ...
    @property
    def IsExplicit(self) -> bool: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsImplicit(self) -> bool: ...
    @property
    def IsInterpolatedString(self) -> bool: ...
    @property
    def IsInterpolatedStringHandler(self) -> bool: ...
    @property
    def IsIntPtr(self) -> bool: ...
    @property
    def IsMethodGroup(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def IsNullLiteral(self) -> bool: ...
    @property
    def IsNumeric(self) -> bool: ...
    @property
    def IsObjectCreation(self) -> bool: ...
    @property
    def IsPointer(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsStackAlloc(self) -> bool: ...
    @property
    def IsSwitchExpression(self) -> bool: ...
    @property
    def IsThrow(self) -> bool: ...
    @property
    def IsTupleConversion(self) -> bool: ...
    @property
    def IsTupleLiteralConversion(self) -> bool: ...
    @property
    def IsUnboxing(self) -> bool: ...
    @property
    def IsUserDefined(self) -> bool: ...
    @property
    def MethodSymbol(self) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToCommonConversion() -> Operations.CommonConversion: ...
    @overload
    def ToString() -> str: ...

class CSharpCommandLineArguments(CodeAnalysis.CommandLineArguments):
    """    """
    @property
    def CompilationOptions(self) -> CSharpCompilationOptions: ...
    @property
    def ParseOptions(self) -> CSharpParseOptions: ...

class CSharpCommandLineParser(CodeAnalysis.CommandLineParser):
    """    """
    @property
    def Default(self) -> CSharpCommandLineParser: ...
    @property
    def Script(self) -> CSharpCommandLineParser: ...
    @overload
    def Parse(self, args: Generic.IEnumerable, baseDirectory: str, sdkDirectory: str, additionalReferenceDirectories: str) -> CSharpCommandLineArguments: ...
    @overload
    @staticmethod
    def ParseConditionalCompilationSymbols(value: str) -> (Generic.IEnumerable, Generic.IEnumerable): ...

class AwaitExpressionInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AwaitExpressionInfo) -> bool: ...
    @property
    def GetAwaiterMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def GetResultMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def IsCompletedProperty(self) -> CodeAnalysis.IPropertySymbol: ...
    @property
    def IsDynamic(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class CSharpCompilation(CodeAnalysis.Compilation):
    """    """
    @overload
    def AddReferences(self, references: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> CSharpCompilation: ...
    @overload
    def AddReferences(self, references: Generic.IEnumerable) -> CSharpCompilation: ...
    @overload
    def AddSyntaxTrees(self, trees: Generic.IEnumerable) -> CSharpCompilation: ...
    @overload
    def AddSyntaxTrees(self, trees: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTree]) -> CSharpCompilation: ...
    @overload
    def ClassifyCommonConversion(self, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Operations.CommonConversion: ...
    @overload
    def ClassifyConversion(self, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    def Clone() -> CSharpCompilation: ...
    @overload
    def ContainsSymbolsWithName(self, predicate: System.Func, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSymbolsWithName(self, name: str, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSyntaxTree(self, syntaxTree: CodeAnalysis.SyntaxTree) -> bool: ...
    @overload
    @staticmethod
    def Create(assemblyName: str, syntaxTrees: Generic.IEnumerable, references: Generic.IEnumerable, options: CSharpCompilationOptions) -> CSharpCompilation: ...
    @overload
    @staticmethod
    def CreateScriptCompilation(assemblyName: str, syntaxTree: CodeAnalysis.SyntaxTree, references: Generic.IEnumerable, options: CSharpCompilationOptions, previousScriptCompilation: CSharpCompilation, returnType: System.Type, globalsType: System.Type) -> CSharpCompilation: ...
    @property
    def DirectiveReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def IsCaseSensitive(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def LanguageVersion(self) -> LanguageVersion: ...
    @property
    def Options(self) -> CSharpCompilationOptions: ...
    @property
    def ReferencedAssemblyNames(self) -> Generic.IEnumerable: ...
    @property
    def ScriptCompilationInfo(self) -> CSharpScriptCompilationInfo: ...
    @property
    def SyntaxTrees(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetDeclarationDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetDirectiveReference(self, directive: Syntax.ReferenceDirectiveTriviaSyntax) -> CodeAnalysis.MetadataReference: ...
    @overload
    def GetMetadataReference(self, assemblySymbol: CodeAnalysis.IAssemblySymbol) -> CodeAnalysis.MetadataReference: ...
    @overload
    def GetMethodBodyDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetParseDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetSemanticModel(self, syntaxTree: CodeAnalysis.SyntaxTree, ignoreAccessibility: bool) -> CodeAnalysis.SemanticModel: ...
    @overload
    def GetSymbolsWithName(self, predicate: System.Func, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetSymbolsWithName(self, name: str, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetUsedAssemblyReferences(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def RemoveAllReferences() -> CSharpCompilation: ...
    @overload
    def RemoveAllSyntaxTrees() -> CSharpCompilation: ...
    @overload
    def RemoveReferences(self, references: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> CSharpCompilation: ...
    @overload
    def RemoveReferences(self, references: Generic.IEnumerable) -> CSharpCompilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: Generic.IEnumerable) -> CSharpCompilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTree]) -> CSharpCompilation: ...
    @overload
    def ReplaceReference(self, oldReference: CodeAnalysis.MetadataReference, newReference: CodeAnalysis.MetadataReference) -> CSharpCompilation: ...
    @overload
    def ReplaceSyntaxTree(self, oldTree: CodeAnalysis.SyntaxTree, newTree: CodeAnalysis.SyntaxTree) -> CSharpCompilation: ...
    @overload
    def ToMetadataReference(self, aliases: Immutable.ImmutableArray, embedInteropTypes: bool) -> CodeAnalysis.CompilationReference: ...
    @overload
    def WithAssemblyName(self, assemblyName: str) -> CSharpCompilation: ...
    @overload
    def WithOptions(self, options: CSharpCompilationOptions) -> CSharpCompilation: ...
    @overload
    def WithReferences(self, references: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> CSharpCompilation: ...
    @overload
    def WithReferences(self, references: Generic.IEnumerable) -> CSharpCompilation: ...
    @overload
    def WithScriptCompilationInfo(self, info: CSharpScriptCompilationInfo) -> CSharpCompilation: ...

class CSharpScriptCompilationInfo(CodeAnalysis.ScriptCompilationInfo):
    """    """
    @property
    def PreviousScriptCompilation(self) -> CSharpCompilation: ...
    @overload
    def WithPreviousScriptCompilation(self, compilation: CSharpCompilation) -> CSharpScriptCompilationInfo: ...

class DeconstructionInfo(System.ValueType):
    """    """
    @property
    def Conversion(self) -> System.Nullable: ...
    @property
    def Method(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def Nested(self) -> Immutable.ImmutableArray: ...

class ForEachStatementInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ForEachStatementInfo) -> bool: ...
    @property
    def CurrentConversion(self) -> Conversion: ...
    @property
    def CurrentProperty(self) -> CodeAnalysis.IPropertySymbol: ...
    @property
    def DisposeMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def ElementConversion(self) -> Conversion: ...
    @property
    def ElementType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def GetEnumeratorMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def IsAsynchronous(self) -> bool: ...
    @property
    def MoveNextMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    def GetHashCode() -> int: ...

class QueryClauseInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: QueryClauseInfo) -> bool: ...
    @property
    def CastInfo(self) -> CodeAnalysis.SymbolInfo: ...
    @property
    def OperationInfo(self) -> CodeAnalysis.SymbolInfo: ...
    @overload
    def GetHashCode() -> int: ...

class CSharpCompilationOptions(CodeAnalysis.CompilationOptions):
    """    """
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, reportSuppressedDiagnostics: bool, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, reportSuppressedDiagnostics: bool, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider, publicSign: bool): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, reportSuppressedDiagnostics: bool, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider, publicSign: bool, metadataImportOptions: CodeAnalysis.MetadataImportOptions): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, reportSuppressedDiagnostics: bool, moduleName: str, mainTypeName: str, scriptClassName: str, usings: Generic.IEnumerable, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, allowUnsafe: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, warningLevel: int, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider, publicSign: bool, metadataImportOptions: CodeAnalysis.MetadataImportOptions, nullableContextOptions: CodeAnalysis.NullableContextOptions): ...
    @overload
    def Equals(self, other: CSharpCompilationOptions) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllowUnsafe(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def NullableContextOptions(self) -> CodeAnalysis.NullableContextOptions: ...
    @property
    def Usings(self) -> Immutable.ImmutableArray: ...
    @overload
    def WithAllowUnsafe(self, enabled: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithAssemblyIdentityComparer(self, comparer: CodeAnalysis.AssemblyIdentityComparer) -> CSharpCompilationOptions: ...
    @overload
    def WithConcurrentBuild(self, concurrentBuild: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithCryptoKeyContainer(self, name: str) -> CSharpCompilationOptions: ...
    @overload
    def WithCryptoKeyFile(self, path: str) -> CSharpCompilationOptions: ...
    @overload
    def WithCryptoPublicKey(self, value: Immutable.ImmutableArray) -> CSharpCompilationOptions: ...
    @overload
    def WithDelaySign(self, value: System.Nullable) -> CSharpCompilationOptions: ...
    @overload
    def WithDeterministic(self, deterministic: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithGeneralDiagnosticOption(self, value: CodeAnalysis.ReportDiagnostic) -> CSharpCompilationOptions: ...
    @overload
    def WithMainTypeName(self, name: str) -> CSharpCompilationOptions: ...
    @overload
    def WithMetadataImportOptions(self, value: CodeAnalysis.MetadataImportOptions) -> CSharpCompilationOptions: ...
    @overload
    def WithMetadataReferenceResolver(self, resolver: CodeAnalysis.MetadataReferenceResolver) -> CSharpCompilationOptions: ...
    @overload
    def WithModuleName(self, moduleName: str) -> CSharpCompilationOptions: ...
    @overload
    def WithNullableContextOptions(self, options: CodeAnalysis.NullableContextOptions) -> CSharpCompilationOptions: ...
    @overload
    def WithOptimizationLevel(self, value: CodeAnalysis.OptimizationLevel) -> CSharpCompilationOptions: ...
    @overload
    def WithOutputKind(self, kind: CodeAnalysis.OutputKind) -> CSharpCompilationOptions: ...
    @overload
    def WithOverflowChecks(self, enabled: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithPlatform(self, platform: CodeAnalysis.Platform) -> CSharpCompilationOptions: ...
    @overload
    def WithPublicSign(self, publicSign: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithReportSuppressedDiagnostics(self, reportSuppressedDiagnostics: bool) -> CSharpCompilationOptions: ...
    @overload
    def WithScriptClassName(self, name: str) -> CSharpCompilationOptions: ...
    @overload
    def WithSourceReferenceResolver(self, resolver: CodeAnalysis.SourceReferenceResolver) -> CSharpCompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, values: Generic.IEnumerable) -> CSharpCompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, values: Immutable.ImmutableDictionary) -> CSharpCompilationOptions: ...
    @overload
    def WithStrongNameProvider(self, provider: CodeAnalysis.StrongNameProvider) -> CSharpCompilationOptions: ...
    @overload
    def WithSyntaxTreeOptionsProvider(self, provider: CodeAnalysis.SyntaxTreeOptionsProvider) -> CSharpCompilationOptions: ...
    @overload
    def WithUsings(self, usings: System.System.Array[str]) -> CSharpCompilationOptions: ...
    @overload
    def WithUsings(self, usings: Generic.IEnumerable) -> CSharpCompilationOptions: ...
    @overload
    def WithUsings(self, usings: Immutable.ImmutableArray) -> CSharpCompilationOptions: ...
    @overload
    def WithWarningLevel(self, warningLevel: int) -> CSharpCompilationOptions: ...
    @overload
    def WithXmlReferenceResolver(self, resolver: CodeAnalysis.XmlReferenceResolver) -> CSharpCompilationOptions: ...

class CSharpExtensions(object):
    """    """
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: CodeAnalysis.SemanticModel, statement: Syntax.StatementSyntax) -> CodeAnalysis.ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: CodeAnalysis.SemanticModel, firstStatement: Syntax.StatementSyntax, lastStatement: Syntax.StatementSyntax) -> CodeAnalysis.ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, constructorInitializer: Syntax.ConstructorInitializerSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, primaryConstructorBaseType: Syntax.PrimaryConstructorBaseTypeSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, statement: Syntax.StatementSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, firstStatement: Syntax.StatementSyntax, lastStatement: Syntax.StatementSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def ClassifyConversion(compilation: CodeAnalysis.Compilation, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    @staticmethod
    def ClassifyConversion(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, destination: CodeAnalysis.ITypeSymbol, isExplicitInSource: bool) -> Conversion: ...
    @overload
    @staticmethod
    def ClassifyConversion(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, destination: CodeAnalysis.ITypeSymbol, isExplicitInSource: bool) -> Conversion: ...
    @overload
    @staticmethod
    def GetAliasInfo(semanticModel: CodeAnalysis.SemanticModel, nameSyntax: Syntax.IdentifierNameSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetAwaitExpressionInfo(semanticModel: CodeAnalysis.SemanticModel, awaitExpression: Syntax.AwaitExpressionSyntax) -> AwaitExpressionInfo: ...
    @overload
    @staticmethod
    def GetCollectionInitializerSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetCompilationUnitRoot(tree: CodeAnalysis.SyntaxTree, cancellationToken: Threading.CancellationToken) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def GetConstantValue(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.Optional: ...
    @overload
    @staticmethod
    def GetConversion(conversionExpression: Operations.IConversionOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetConversion(semanticModel: CodeAnalysis.SemanticModel, expression: CodeAnalysis.SyntaxNode, cancellationToken: Threading.CancellationToken) -> Conversion: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.NamespaceDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamespaceSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.CompilationUnitSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.MemberDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.ParameterSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IParameterSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.LabeledStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILabelSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.SwitchLabelSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILabelSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, forEachStatement: Syntax.ForEachStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILocalSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, catchDeclaration: Syntax.CatchDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILocalSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, queryClause: Syntax.QueryClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.JoinIntoClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.QueryContinuationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, typeParameter: Syntax.TypeParameterSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ITypeParameterSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.BaseTypeDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.FileScopedNamespaceDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamespaceSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EnumMemberDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IFieldSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.TupleElementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.VariableDeclaratorSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.UsingDirectiveSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, designationSyntax: Syntax.SingleVariableDesignationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.AccessorDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declaratorSyntax: Syntax.ArgumentSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declaratorSyntax: Syntax.TupleExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.DelegateDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.PropertyDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declaratorSyntax: Syntax.AnonymousObjectCreationExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declaratorSyntax: Syntax.AnonymousObjectMemberDeclaratorSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EventDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IEventSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.IndexerDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.ExternAliasDirectiveSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.BasePropertyDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.BaseMethodDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeconstructionInfo(semanticModel: CodeAnalysis.SemanticModel, foreach: Syntax.ForEachVariableStatementSyntax) -> DeconstructionInfo: ...
    @overload
    @staticmethod
    def GetDeconstructionInfo(semanticModel: CodeAnalysis.SemanticModel, assignment: Syntax.AssignmentExpressionSyntax) -> DeconstructionInfo: ...
    @overload
    @staticmethod
    def GetFirstDirective(node: CodeAnalysis.SyntaxNode, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def GetForEachStatementInfo(semanticModel: CodeAnalysis.SemanticModel, forEachStatement: Syntax.ForEachStatementSyntax) -> ForEachStatementInfo: ...
    @overload
    @staticmethod
    def GetForEachStatementInfo(semanticModel: CodeAnalysis.SemanticModel, forEachStatement: Syntax.CommonForEachStatementSyntax) -> ForEachStatementInfo: ...
    @overload
    @staticmethod
    def GetInConversion(compoundAssignment: Operations.ICompoundAssignmentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetIndexerGroup(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetLastDirective(node: CodeAnalysis.SyntaxNode, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: CodeAnalysis.SemanticModel, initializer: Syntax.ConstructorInitializerSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: CodeAnalysis.SemanticModel, attribute: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetOutConversion(compoundAssignment: Operations.ICompoundAssignmentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetQueryClauseInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.QueryClauseSyntax, cancellationToken: Threading.CancellationToken) -> QueryClauseInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeAliasInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, nameSyntax: Syntax.IdentifierNameSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetSpeculativeConversion(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> Conversion: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, constructorInitializer: Syntax.ConstructorInitializerSyntax) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, constructorInitializer: Syntax.PrimaryConstructorBaseTypeSyntax) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, attribute: Syntax.AttributeSyntax) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.CrefSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeTypeInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.OrderingSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.SelectOrGroupClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, constructorInitializer: Syntax.ConstructorInitializerSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, constructorInitializer: Syntax.PrimaryConstructorBaseTypeSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, attributeSyntax: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, crefSyntax: Syntax.CrefSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, attributeSyntax: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.SelectOrGroupClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, constructorInitializer: Syntax.ConstructorInitializerSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def Insert(list_: CodeAnalysis.SyntaxTokenList, index: int, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def IsContextualKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsReservedKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsVerbatimIdentifier(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsVerbatimStringLiteral(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def Kind(nodeOrToken: CodeAnalysis.SyntaxNodeOrToken) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(node: CodeAnalysis.SyntaxNode) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(trivia: CodeAnalysis.SyntaxTrivia) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(token: CodeAnalysis.SyntaxToken) -> SyntaxKind: ...
    @overload
    @staticmethod
    def ReplaceTrivia(token: CodeAnalysis.SyntaxToken, oldTrivia: CodeAnalysis.SyntaxTrivia, newTrivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ReplaceTrivia(token: CodeAnalysis.SyntaxToken, trivia: Generic.IEnumerable, computeReplacementTrivia: System.Func) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, constructorInitializer: Syntax.ConstructorInitializerSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, crefSyntax: Syntax.CrefSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, statement: Syntax.StatementSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, initializer: Syntax.EqualsValueClauseSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, attribute: Syntax.AttributeSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, constructorInitializer: Syntax.PrimaryConstructorBaseTypeSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, type_: Syntax.TypeSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModelForMethodBody(semanticModel: CodeAnalysis.SemanticModel, position: int, method: Syntax.BaseMethodDeclarationSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModelForMethodBody(semanticModel: CodeAnalysis.SemanticModel, position: int, accessor: Syntax.AccessorDeclarationSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def VarianceKindFromToken(node: CodeAnalysis.SyntaxToken) -> CodeAnalysis.VarianceKind: ...

class CSharpFileSystemExtensions(object):
    """    """
    @overload
    @staticmethod
    def Emit(compilation: CSharpCompilation, outputPath: str, pdbPath: str, xmlDocumentationPath: str, win32ResourcesPath: str, manifestResources: Generic.IEnumerable, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...

class CSharpParseOptions(CodeAnalysis.ParseOptions):
    """    """
    def __init__(self, languageVersion: LanguageVersion, documentationMode: CodeAnalysis.DocumentationMode, kind: CodeAnalysis.SourceCodeKind, preprocessorSymbols: Generic.IEnumerable): ...
    @overload
    def CommonWithKind(self, kind: CodeAnalysis.SourceCodeKind) -> CodeAnalysis.ParseOptions: ...
    @overload
    def Equals(self, other: CSharpParseOptions) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Default(self) -> CSharpParseOptions: ...
    @property
    def Features(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def Language(self) -> str: ...
    @property
    def LanguageVersion(self) -> LanguageVersion: ...
    @property
    def PreprocessorSymbolNames(self) -> Generic.IEnumerable: ...
    @property
    def SpecifiedLanguageVersion(self) -> LanguageVersion: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithDocumentationMode(self, documentationMode: CodeAnalysis.DocumentationMode) -> CSharpParseOptions: ...
    @overload
    def WithFeatures(self, features: Generic.IEnumerable) -> CSharpParseOptions: ...
    @overload
    def WithKind(self, kind: CodeAnalysis.SourceCodeKind) -> CSharpParseOptions: ...
    @overload
    def WithLanguageVersion(self, version: LanguageVersion) -> CSharpParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, symbols: Immutable.ImmutableArray) -> CSharpParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, preprocessorSymbols: System.System.Array[str]) -> CSharpParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, preprocessorSymbols: Generic.IEnumerable) -> CSharpParseOptions: ...

class CSharpDiagnosticFormatter(CodeAnalysis.DiagnosticFormatter):
    """    """
    @property
    def Instance(self) -> CSharpDiagnosticFormatter: ...

class LanguageVersion(enum.Enum):
    Default = 0
    CSharp1 = 1
    CSharp2 = 2
    CSharp3 = 3
    CSharp4 = 4
    CSharp5 = 5
    CSharp6 = 6
    CSharp7 = 7
    CSharp7_1 = 701
    CSharp7_2 = 702
    CSharp7_3 = 703
    CSharp8 = 800
    CSharp9 = 900
    CSharp10 = 1000
    CSharp11 = 1100
    LatestMajor = 2147483645
    Preview = 2147483646
    Latest = 2147483647

class LanguageVersionFacts(object):
    """    """
    @overload
    @staticmethod
    def MapSpecifiedToEffectiveVersion(version: LanguageVersion) -> LanguageVersion: ...
    @overload
    @staticmethod
    def ToDisplayString(version: LanguageVersion) -> str: ...
    @overload
    @staticmethod
    def TryParse(version: str) -> (bool, LanguageVersion): ...

class SyntaxFacts(object):
    """    """
    @property
    def EqualityComparer(self) -> Generic.IEqualityComparer: ...
    @overload
    @staticmethod
    def GetAccessorDeclarationKind(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetAssignmentExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetBaseTypeDeclarationKind(kind: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetBinaryExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetCheckStatement(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetContextualKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetContextualKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInstanceExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetLiteralExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetOperatorKind(operatorMetadataName: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPostfixUnaryExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPrefixUnaryExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPreprocessorKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPreprocessorKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetPrimaryFunction(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPunctuationKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetReservedKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetSwitchLabelKind(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetText(accessibility: CodeAnalysis.Accessibility) -> str: ...
    @overload
    @staticmethod
    def GetText(kind: SyntaxKind) -> str: ...
    @overload
    @staticmethod
    def GetTypeDeclarationKind(kind: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def IsAccessibilityModifier(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAccessorDeclaration(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAccessorDeclarationKeyword(keyword: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAliasQualifier(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsAnyOverloadableOperator(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAnyToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAnyUnaryExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAssignmentExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAssignmentExpressionOperatorToken(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAttributeName(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsAttributeTargetSpecifier(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsBinaryExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsBinaryExpressionOperatorToken(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsCheckedOperator(operatorMetadataName: str) -> bool: ...
    @overload
    @staticmethod
    def IsContextualKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDocumentationCommentTrivia(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsFixedStatementExpression(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsGlobalMemberDeclaration(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsIdentifierPartCharacter(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsIdentifierStartCharacter(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsIndexed(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsInNamespaceOrTypeContext(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsInstanceExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsInTypeOnlyContext(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsInvoked(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsKeywordKind(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLanguagePunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLiteralExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsName(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsNamedArgumentName(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsNamespaceAliasQualifier(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsNamespaceMemberDeclaration(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsNewLine(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsOverloadableBinaryOperator(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOverloadableUnaryOperator(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPostfixUnaryExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPostfixUnaryExpressionToken(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPredefinedType(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPrefixUnaryExpression(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPrefixUnaryExpressionOperatorToken(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorDirective(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorPunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPrimaryFunction(keyword: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuationOrKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsQueryContextualKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsReservedKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsReservedTupleElementName(elementName: str) -> bool: ...
    @overload
    @staticmethod
    def IsTrivia(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeDeclaration(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeParameterVarianceKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeSyntax(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsUnaryOperatorDeclarationToken(token: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsValidIdentifier(name: str) -> bool: ...
    @overload
    @staticmethod
    def IsWhitespace(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def TryGetInferredMemberName(syntax: CodeAnalysis.SyntaxNode) -> str: ...

class CSharpGeneratorDriver(CodeAnalysis.GeneratorDriver):
    """    """
    @overload
    @staticmethod
    def Create(generators: CodeAnalysis.System.Array[CodeAnalysis.ISourceGenerator]) -> CSharpGeneratorDriver: ...
    @overload
    @staticmethod
    def Create(incrementalGenerators: CodeAnalysis.System.Array[CodeAnalysis.IIncrementalGenerator]) -> CSharpGeneratorDriver: ...
    @overload
    @staticmethod
    def Create(generators: Generic.IEnumerable, additionalTexts: Generic.IEnumerable, parseOptions: CSharpParseOptions, optionsProvider: Diagnostics.AnalyzerConfigOptionsProvider) -> CSharpGeneratorDriver: ...
    @overload
    @staticmethod
    def Create(generators: Generic.IEnumerable, additionalTexts: Generic.IEnumerable, parseOptions: CSharpParseOptions, optionsProvider: Diagnostics.AnalyzerConfigOptionsProvider, driverOptions: CodeAnalysis.GeneratorDriverOptions) -> CSharpGeneratorDriver: ...

class SymbolDisplay(object):
    """    """
    @overload
    @staticmethod
    def FormatLiteral(c: System.Char, quote: bool) -> str: ...
    @overload
    @staticmethod
    def FormatLiteral(value: str, quote: bool) -> str: ...
    @overload
    @staticmethod
    def FormatPrimitive(obj: object, quoteStrings: bool, useHexadecimalNumbers: bool) -> str: ...
    @overload
    @staticmethod
    def ToDisplayParts(symbol: CodeAnalysis.ISymbol, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToDisplayParts(symbol: CodeAnalysis.ITypeSymbol, nullableFlowState: CodeAnalysis.NullableFlowState, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToDisplayParts(symbol: CodeAnalysis.ITypeSymbol, nullableAnnotation: CodeAnalysis.NullableAnnotation, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToDisplayString(symbol: CodeAnalysis.ISymbol, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToDisplayString(symbol: CodeAnalysis.ITypeSymbol, nullableAnnotation: CodeAnalysis.NullableAnnotation, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToDisplayString(symbol: CodeAnalysis.ITypeSymbol, nullableFlowState: CodeAnalysis.NullableFlowState, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToMinimalDisplayParts(symbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToMinimalDisplayParts(symbol: CodeAnalysis.ITypeSymbol, nullableFlowState: CodeAnalysis.NullableFlowState, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToMinimalDisplayParts(symbol: CodeAnalysis.ITypeSymbol, nullableAnnotation: CodeAnalysis.NullableAnnotation, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToMinimalDisplayString(symbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToMinimalDisplayString(symbol: CodeAnalysis.ITypeSymbol, nullableFlowState: CodeAnalysis.NullableFlowState, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToMinimalDisplayString(symbol: CodeAnalysis.ITypeSymbol, nullableAnnotation: CodeAnalysis.NullableAnnotation, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...

class TypedConstantExtensions(object):
    """    """
    @overload
    @staticmethod
    def ToCSharpString(constant: CodeAnalysis.TypedConstant) -> str: ...

class SyntaxFactory(object):
    """    """
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, body: Syntax.BlockSyntax) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, body: Syntax.BlockSyntax) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.AccessorDeclarationSyntax: ...
    @overload
    @staticmethod
    def AccessorList(accessors: CodeAnalysis.SyntaxList) -> Syntax.AccessorListSyntax: ...
    @overload
    @staticmethod
    def AccessorList(openBraceToken: CodeAnalysis.SyntaxToken, accessors: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.AccessorListSyntax: ...
    @overload
    @staticmethod
    def AliasQualifiedName(alias: Syntax.IdentifierNameSyntax, name: Syntax.SimpleNameSyntax) -> Syntax.AliasQualifiedNameSyntax: ...
    @overload
    @staticmethod
    def AliasQualifiedName(alias: str, name: Syntax.SimpleNameSyntax) -> Syntax.AliasQualifiedNameSyntax: ...
    @overload
    @staticmethod
    def AliasQualifiedName(alias: Syntax.IdentifierNameSyntax, colonColonToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.AliasQualifiedNameSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression() -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression(body: CSharpSyntaxNode) -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression(parameterList: Syntax.ParameterListSyntax, body: CSharpSyntaxNode) -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression(asyncKeyword: CodeAnalysis.SyntaxToken, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: CSharpSyntaxNode) -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression(asyncKeyword: CodeAnalysis.SyntaxToken, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousMethodExpression(modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.AnonymousMethodExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectCreationExpression(initializers: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AnonymousObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.AnonymousObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectMemberDeclarator(expression: Syntax.ExpressionSyntax) -> Syntax.AnonymousObjectMemberDeclaratorSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectMemberDeclarator(nameEquals: Syntax.NameEqualsSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.AnonymousObjectMemberDeclaratorSyntax: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SyntaxTokenList, newList: CodeAnalysis.SyntaxTokenList) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldToken: CodeAnalysis.SyntaxToken, newToken: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SyntaxList, newList: CodeAnalysis.SyntaxList, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SeparatedSyntaxList, newList: CodeAnalysis.SeparatedSyntaxList, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldNode: CodeAnalysis.SyntaxNode, newNode: CodeAnalysis.SyntaxNode, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldNode: CodeAnalysis.SyntaxNode, newNode: CodeAnalysis.SyntaxNode, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SyntaxList, newList: CodeAnalysis.SyntaxList, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SeparatedSyntaxList, newList: CodeAnalysis.SeparatedSyntaxList, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldTree: CodeAnalysis.SyntaxTree, newTree: CodeAnalysis.SyntaxTree, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def Argument(expression: Syntax.ExpressionSyntax) -> Syntax.ArgumentSyntax: ...
    @overload
    @staticmethod
    def Argument(nameColon: Syntax.NameColonSyntax, refKindKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ArgumentSyntax: ...
    @overload
    @staticmethod
    def ArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ArgumentList(openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(type_: Syntax.ArrayTypeSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(type_: Syntax.ArrayTypeSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.ArrayTypeSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayRankSpecifier(sizes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ArrayRankSpecifierSyntax: ...
    @overload
    @staticmethod
    def ArrayRankSpecifier(openBracketToken: CodeAnalysis.SyntaxToken, sizes: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.ArrayRankSpecifierSyntax: ...
    @overload
    @staticmethod
    def ArrayType(elementType: Syntax.TypeSyntax) -> Syntax.ArrayTypeSyntax: ...
    @overload
    @staticmethod
    def ArrayType(elementType: Syntax.TypeSyntax, rankSpecifiers: CodeAnalysis.SyntaxList) -> Syntax.ArrayTypeSyntax: ...
    @overload
    @staticmethod
    def ArrowExpressionClause(expression: Syntax.ExpressionSyntax) -> Syntax.ArrowExpressionClauseSyntax: ...
    @overload
    @staticmethod
    def ArrowExpressionClause(arrowToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ArrowExpressionClauseSyntax: ...
    @overload
    @staticmethod
    def AssignmentExpression(kind: SyntaxKind, left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentExpressionSyntax: ...
    @overload
    @staticmethod
    def AssignmentExpression(kind: SyntaxKind, left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentExpressionSyntax: ...
    @overload
    @staticmethod
    def Attribute(name: Syntax.NameSyntax) -> Syntax.AttributeSyntax: ...
    @overload
    @staticmethod
    def Attribute(name: Syntax.NameSyntax, argumentList: Syntax.AttributeArgumentListSyntax) -> Syntax.AttributeSyntax: ...
    @overload
    @staticmethod
    def AttributeArgument(expression: Syntax.ExpressionSyntax) -> Syntax.AttributeArgumentSyntax: ...
    @overload
    @staticmethod
    def AttributeArgument(nameEquals: Syntax.NameEqualsSyntax, nameColon: Syntax.NameColonSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.AttributeArgumentSyntax: ...
    @overload
    @staticmethod
    def AttributeArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AttributeArgumentListSyntax: ...
    @overload
    @staticmethod
    def AttributeArgumentList(openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.AttributeArgumentListSyntax: ...
    @overload
    @staticmethod
    def AttributeList(attributes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributeList(target: Syntax.AttributeTargetSpecifierSyntax, attributes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributeList(openBracketToken: CodeAnalysis.SyntaxToken, target: Syntax.AttributeTargetSpecifierSyntax, attributes: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributeTargetSpecifier(identifier: CodeAnalysis.SyntaxToken) -> Syntax.AttributeTargetSpecifierSyntax: ...
    @overload
    @staticmethod
    def AttributeTargetSpecifier(identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.AttributeTargetSpecifierSyntax: ...
    @overload
    @staticmethod
    def AwaitExpression(expression: Syntax.ExpressionSyntax) -> Syntax.AwaitExpressionSyntax: ...
    @overload
    @staticmethod
    def AwaitExpression(awaitKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.AwaitExpressionSyntax: ...
    @overload
    @staticmethod
    def BadDirectiveTrivia(identifier: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.BadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def BadDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.BadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def BadToken(leading: CodeAnalysis.SyntaxTriviaList, text: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def BaseExpression() -> Syntax.BaseExpressionSyntax: ...
    @overload
    @staticmethod
    def BaseExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.BaseExpressionSyntax: ...
    @overload
    @staticmethod
    def BaseList(types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.BaseListSyntax: ...
    @overload
    @staticmethod
    def BaseList(colonToken: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.BaseListSyntax: ...
    @overload
    @staticmethod
    def BinaryExpression(kind: SyntaxKind, left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def BinaryExpression(kind: SyntaxKind, left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def BinaryPattern(kind: SyntaxKind, left: Syntax.PatternSyntax, right: Syntax.PatternSyntax) -> Syntax.BinaryPatternSyntax: ...
    @overload
    @staticmethod
    def BinaryPattern(kind: SyntaxKind, left: Syntax.PatternSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.PatternSyntax) -> Syntax.BinaryPatternSyntax: ...
    @overload
    @staticmethod
    def Block(statements: CodeAnalysis.SyntaxList) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def Block(statements: Syntax.System.Array[Syntax.StatementSyntax]) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def Block(statements: Generic.IEnumerable) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def Block(attributeLists: CodeAnalysis.SyntaxList, statements: CodeAnalysis.SyntaxList) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def Block(openBraceToken: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def Block(attributeLists: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.BlockSyntax: ...
    @overload
    @staticmethod
    def BracketedArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.BracketedArgumentListSyntax: ...
    @overload
    @staticmethod
    def BracketedArgumentList(openBracketToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.BracketedArgumentListSyntax: ...
    @overload
    @staticmethod
    def BracketedParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.BracketedParameterListSyntax: ...
    @overload
    @staticmethod
    def BracketedParameterList(openBracketToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.BracketedParameterListSyntax: ...
    @overload
    @staticmethod
    def BreakStatement() -> Syntax.BreakStatementSyntax: ...
    @overload
    @staticmethod
    def BreakStatement(attributeLists: CodeAnalysis.SyntaxList) -> Syntax.BreakStatementSyntax: ...
    @overload
    @staticmethod
    def BreakStatement(breakKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.BreakStatementSyntax: ...
    @overload
    @staticmethod
    def BreakStatement(attributeLists: CodeAnalysis.SyntaxList, breakKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.BreakStatementSyntax: ...
    @overload
    @staticmethod
    def CasePatternSwitchLabel(pattern: Syntax.PatternSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.CasePatternSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CasePatternSwitchLabel(pattern: Syntax.PatternSyntax, whenClause: Syntax.WhenClauseSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.CasePatternSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CasePatternSwitchLabel(keyword: CodeAnalysis.SyntaxToken, pattern: Syntax.PatternSyntax, whenClause: Syntax.WhenClauseSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.CasePatternSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CaseSwitchLabel(value: Syntax.ExpressionSyntax) -> Syntax.CaseSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CaseSwitchLabel(value: Syntax.ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.CaseSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CaseSwitchLabel(keyword: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.CaseSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def CastExpression(type_: Syntax.TypeSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.CastExpressionSyntax: ...
    @overload
    @staticmethod
    def CastExpression(openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.CastExpressionSyntax: ...
    @overload
    @staticmethod
    def CatchClause() -> Syntax.CatchClauseSyntax: ...
    @overload
    @staticmethod
    def CatchClause(declaration: Syntax.CatchDeclarationSyntax, filter_: Syntax.CatchFilterClauseSyntax, block: Syntax.BlockSyntax) -> Syntax.CatchClauseSyntax: ...
    @overload
    @staticmethod
    def CatchClause(catchKeyword: CodeAnalysis.SyntaxToken, declaration: Syntax.CatchDeclarationSyntax, filter_: Syntax.CatchFilterClauseSyntax, block: Syntax.BlockSyntax) -> Syntax.CatchClauseSyntax: ...
    @overload
    @staticmethod
    def CatchDeclaration(type_: Syntax.TypeSyntax) -> Syntax.CatchDeclarationSyntax: ...
    @overload
    @staticmethod
    def CatchDeclaration(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.CatchDeclarationSyntax: ...
    @overload
    @staticmethod
    def CatchDeclaration(openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CatchDeclarationSyntax: ...
    @overload
    @staticmethod
    def CatchFilterClause(filterExpression: Syntax.ExpressionSyntax) -> Syntax.CatchFilterClauseSyntax: ...
    @overload
    @staticmethod
    def CatchFilterClause(whenKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, filterExpression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CatchFilterClauseSyntax: ...
    @overload
    @staticmethod
    def CheckedExpression(kind: SyntaxKind, expression: Syntax.ExpressionSyntax) -> Syntax.CheckedExpressionSyntax: ...
    @overload
    @staticmethod
    def CheckedExpression(kind: SyntaxKind, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CheckedExpressionSyntax: ...
    @overload
    @staticmethod
    def CheckedStatement(kind: SyntaxKind, block: Syntax.BlockSyntax) -> Syntax.CheckedStatementSyntax: ...
    @overload
    @staticmethod
    def CheckedStatement(kind: SyntaxKind, keyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax) -> Syntax.CheckedStatementSyntax: ...
    @overload
    @staticmethod
    def CheckedStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, block: Syntax.BlockSyntax) -> Syntax.CheckedStatementSyntax: ...
    @overload
    @staticmethod
    def CheckedStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, keyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax) -> Syntax.CheckedStatementSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(identifier: str) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ClassDeclarationSyntax: ...
    @overload
    @staticmethod
    def ClassOrStructConstraint(kind: SyntaxKind) -> Syntax.ClassOrStructConstraintSyntax: ...
    @overload
    @staticmethod
    def ClassOrStructConstraint(kind: SyntaxKind, classOrStructKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ClassOrStructConstraintSyntax: ...
    @overload
    @staticmethod
    def ClassOrStructConstraint(kind: SyntaxKind, classOrStructKeyword: CodeAnalysis.SyntaxToken, questionToken: CodeAnalysis.SyntaxToken) -> Syntax.ClassOrStructConstraintSyntax: ...
    @overload
    @staticmethod
    def Comment(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def CompilationUnit() -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def CompilationUnit(externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, attributeLists: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def CompilationUnit(externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, attributeLists: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endOfFileToken: CodeAnalysis.SyntaxToken) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def ConditionalAccessExpression(expression: Syntax.ExpressionSyntax, whenNotNull: Syntax.ExpressionSyntax) -> Syntax.ConditionalAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalAccessExpression(expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, whenNotNull: Syntax.ExpressionSyntax) -> Syntax.ConditionalAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalExpression(condition: Syntax.ExpressionSyntax, whenTrue: Syntax.ExpressionSyntax, whenFalse: Syntax.ExpressionSyntax) -> Syntax.ConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalExpression(condition: Syntax.ExpressionSyntax, questionToken: CodeAnalysis.SyntaxToken, whenTrue: Syntax.ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken, whenFalse: Syntax.ExpressionSyntax) -> Syntax.ConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def ConstantPattern(expression: Syntax.ExpressionSyntax) -> Syntax.ConstantPatternSyntax: ...
    @overload
    @staticmethod
    def ConstructorConstraint() -> Syntax.ConstructorConstraintSyntax: ...
    @overload
    @staticmethod
    def ConstructorConstraint(newKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ConstructorConstraintSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(identifier: str) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, body: Syntax.BlockSyntax) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, initializer: Syntax.ConstructorInitializerSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConstructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConstructorInitializer(kind: SyntaxKind, argumentList: Syntax.ArgumentListSyntax) -> Syntax.ConstructorInitializerSyntax: ...
    @overload
    @staticmethod
    def ConstructorInitializer(kind: SyntaxKind, colonToken: CodeAnalysis.SyntaxToken, thisOrBaseKeyword: CodeAnalysis.SyntaxToken, argumentList: Syntax.ArgumentListSyntax) -> Syntax.ConstructorInitializerSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement() -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement(attributeLists: CodeAnalysis.SyntaxList) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement(continueKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement(attributeLists: CodeAnalysis.SyntaxList, continueKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ConversionOperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorMemberCref(implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.ConversionOperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorMemberCref(implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameters: Syntax.CrefParameterListSyntax) -> Syntax.ConversionOperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorMemberCref(implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameters: Syntax.CrefParameterListSyntax) -> Syntax.ConversionOperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def ConversionOperatorMemberCref(implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, parameters: Syntax.CrefParameterListSyntax) -> Syntax.ConversionOperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def CrefBracketedParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CrefBracketedParameterListSyntax: ...
    @overload
    @staticmethod
    def CrefBracketedParameterList(openBracketToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.CrefBracketedParameterListSyntax: ...
    @overload
    @staticmethod
    def CrefParameter(type_: Syntax.TypeSyntax) -> Syntax.CrefParameterSyntax: ...
    @overload
    @staticmethod
    def CrefParameter(refKindKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.CrefParameterSyntax: ...
    @overload
    @staticmethod
    def CrefParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CrefParameterListSyntax: ...
    @overload
    @staticmethod
    def CrefParameterList(openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CrefParameterListSyntax: ...
    @overload
    @staticmethod
    def DeclarationExpression(type_: Syntax.TypeSyntax, designation: Syntax.VariableDesignationSyntax) -> Syntax.DeclarationExpressionSyntax: ...
    @overload
    @staticmethod
    def DeclarationPattern(type_: Syntax.TypeSyntax, designation: Syntax.VariableDesignationSyntax) -> Syntax.DeclarationPatternSyntax: ...
    @overload
    @staticmethod
    def DefaultConstraint() -> Syntax.DefaultConstraintSyntax: ...
    @overload
    @staticmethod
    def DefaultConstraint(defaultKeyword: CodeAnalysis.SyntaxToken) -> Syntax.DefaultConstraintSyntax: ...
    @overload
    @staticmethod
    def DefaultExpression(type_: Syntax.TypeSyntax) -> Syntax.DefaultExpressionSyntax: ...
    @overload
    @staticmethod
    def DefaultExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.DefaultExpressionSyntax: ...
    @overload
    @staticmethod
    def DefaultSwitchLabel() -> Syntax.DefaultSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def DefaultSwitchLabel(colonToken: CodeAnalysis.SyntaxToken) -> Syntax.DefaultSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def DefaultSwitchLabel(keyword: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.DefaultSwitchLabelSyntax: ...
    @overload
    @staticmethod
    def DefineDirectiveTrivia(name: str, isActive: bool) -> Syntax.DefineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DefineDirectiveTrivia(name: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.DefineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DefineDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, defineKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.DefineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DelegateDeclaration(returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.DelegateDeclarationSyntax: ...
    @overload
    @staticmethod
    def DelegateDeclaration(returnType: Syntax.TypeSyntax, identifier: str) -> Syntax.DelegateDeclarationSyntax: ...
    @overload
    @staticmethod
    def DelegateDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList) -> Syntax.DelegateDeclarationSyntax: ...
    @overload
    @staticmethod
    def DelegateDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DelegateDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(identifier: str) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, tildeToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, tildeToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DestructorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, tildeToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DestructorDeclarationSyntax: ...
    @overload
    @staticmethod
    def DisabledText(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def DiscardDesignation() -> Syntax.DiscardDesignationSyntax: ...
    @overload
    @staticmethod
    def DiscardDesignation(underscoreToken: CodeAnalysis.SyntaxToken) -> Syntax.DiscardDesignationSyntax: ...
    @overload
    @staticmethod
    def DiscardPattern() -> Syntax.DiscardPatternSyntax: ...
    @overload
    @staticmethod
    def DiscardPattern(underscoreToken: CodeAnalysis.SyntaxToken) -> Syntax.DiscardPatternSyntax: ...
    @overload
    @staticmethod
    def DocumentationComment(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DocumentationCommentExterior(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def DocumentationCommentTrivia(kind: SyntaxKind, content: CodeAnalysis.SyntaxList) -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DocumentationCommentTrivia(kind: SyntaxKind, content: CodeAnalysis.SyntaxList, endOfComment: CodeAnalysis.SyntaxToken) -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DoStatement(statement: Syntax.StatementSyntax, condition: Syntax.ExpressionSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoStatement(attributeLists: CodeAnalysis.SyntaxList, statement: Syntax.StatementSyntax, condition: Syntax.ExpressionSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoStatement(doKeyword: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoStatement(attributeLists: CodeAnalysis.SyntaxList, doKeyword: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def ElasticEndOfLine(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ElasticWhitespace(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ElementAccessExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ElementAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ElementAccessExpression(expression: Syntax.ExpressionSyntax, argumentList: Syntax.BracketedArgumentListSyntax) -> Syntax.ElementAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ElementBindingExpression() -> Syntax.ElementBindingExpressionSyntax: ...
    @overload
    @staticmethod
    def ElementBindingExpression(argumentList: Syntax.BracketedArgumentListSyntax) -> Syntax.ElementBindingExpressionSyntax: ...
    @overload
    @staticmethod
    def ElifDirectiveTrivia(condition: Syntax.ExpressionSyntax, isActive: bool, branchTaken: bool, conditionValue: bool) -> Syntax.ElifDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElifDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, elifKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool, conditionValue: bool) -> Syntax.ElifDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseClause(statement: Syntax.StatementSyntax) -> Syntax.ElseClauseSyntax: ...
    @overload
    @staticmethod
    def ElseClause(elseKeyword: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ElseClauseSyntax: ...
    @overload
    @staticmethod
    def ElseDirectiveTrivia(isActive: bool, branchTaken: bool) -> Syntax.ElseDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool) -> Syntax.ElseDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement() -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement(semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement(attributeLists: CodeAnalysis.SyntaxList) -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement(attributeLists: CodeAnalysis.SyntaxList, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EndIfDirectiveTrivia(isActive: bool) -> Syntax.EndIfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndIfDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, endIfKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.EndIfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndOfLine(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def EndRegionDirectiveTrivia(isActive: bool) -> Syntax.EndRegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndRegionDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, endRegionKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.EndRegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EnumDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.EnumDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumDeclaration(identifier: str) -> Syntax.EnumDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, baseList: Syntax.BaseListSyntax, members: CodeAnalysis.SeparatedSyntaxList) -> Syntax.EnumDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, enumKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, baseList: Syntax.BaseListSyntax, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EnumDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(identifier: str) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, equalsValue: Syntax.EqualsValueClauseSyntax) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, equalsValue: Syntax.EqualsValueClauseSyntax) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EqualsValueClause(value: Syntax.ExpressionSyntax) -> Syntax.EqualsValueClauseSyntax: ...
    @overload
    @staticmethod
    def EqualsValueClause(equalsToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.EqualsValueClauseSyntax: ...
    @overload
    @staticmethod
    def ErrorDirectiveTrivia(isActive: bool) -> Syntax.ErrorDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ErrorDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.ErrorDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(type_: Syntax.TypeSyntax, identifier: str) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EventDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventFieldDeclaration(declaration: Syntax.VariableDeclarationSyntax) -> Syntax.EventFieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventFieldDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax) -> Syntax.EventFieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def EventFieldDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.EventFieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def ExplicitInterfaceSpecifier(name: Syntax.NameSyntax) -> Syntax.ExplicitInterfaceSpecifierSyntax: ...
    @overload
    @staticmethod
    def ExplicitInterfaceSpecifier(name: Syntax.NameSyntax, dotToken: CodeAnalysis.SyntaxToken) -> Syntax.ExplicitInterfaceSpecifierSyntax: ...
    @overload
    @staticmethod
    def ExpressionColon(expression: Syntax.ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.ExpressionColonSyntax: ...
    @overload
    @staticmethod
    def ExpressionStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionStatementSyntax: ...
    @overload
    @staticmethod
    def ExpressionStatement(expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ExpressionStatementSyntax: ...
    @overload
    @staticmethod
    def ExpressionStatement(attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionStatementSyntax: ...
    @overload
    @staticmethod
    def ExpressionStatement(attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ExpressionStatementSyntax: ...
    @overload
    @staticmethod
    def ExternAliasDirective(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ExternAliasDirectiveSyntax: ...
    @overload
    @staticmethod
    def ExternAliasDirective(identifier: str) -> Syntax.ExternAliasDirectiveSyntax: ...
    @overload
    @staticmethod
    def ExternAliasDirective(externKeyword: CodeAnalysis.SyntaxToken, aliasKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ExternAliasDirectiveSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(declaration: Syntax.VariableDeclarationSyntax) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FileScopedNamespaceDeclaration(name: Syntax.NameSyntax) -> Syntax.FileScopedNamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def FileScopedNamespaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, name: Syntax.NameSyntax, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.FileScopedNamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def FileScopedNamespaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, namespaceKeyword: CodeAnalysis.SyntaxToken, name: Syntax.NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.FileScopedNamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def FinallyClause(block: Syntax.BlockSyntax) -> Syntax.FinallyClauseSyntax: ...
    @overload
    @staticmethod
    def FinallyClause(finallyKeyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax) -> Syntax.FinallyClauseSyntax: ...
    @overload
    @staticmethod
    def FixedStatement(declaration: Syntax.VariableDeclarationSyntax, statement: Syntax.StatementSyntax) -> Syntax.FixedStatementSyntax: ...
    @overload
    @staticmethod
    def FixedStatement(attributeLists: CodeAnalysis.SyntaxList, declaration: Syntax.VariableDeclarationSyntax, statement: Syntax.StatementSyntax) -> Syntax.FixedStatementSyntax: ...
    @overload
    @staticmethod
    def FixedStatement(fixedKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.FixedStatementSyntax: ...
    @overload
    @staticmethod
    def FixedStatement(attributeLists: CodeAnalysis.SyntaxList, fixedKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.FixedStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(type_: Syntax.TypeSyntax, identifier: str, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachVariableStatement(variable: Syntax.ExpressionSyntax, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.ForEachVariableStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachVariableStatement(attributeLists: CodeAnalysis.SyntaxList, variable: Syntax.ExpressionSyntax, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.ForEachVariableStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachVariableStatement(forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: Syntax.ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachVariableStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachVariableStatement(awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: Syntax.ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachVariableStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachVariableStatement(attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: Syntax.ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForEachVariableStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(statement: Syntax.StatementSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(declaration: Syntax.VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, condition: Syntax.ExpressionSyntax, incrementors: CodeAnalysis.SeparatedSyntaxList, statement: Syntax.StatementSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(attributeLists: CodeAnalysis.SyntaxList, declaration: Syntax.VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, condition: Syntax.ExpressionSyntax, incrementors: CodeAnalysis.SeparatedSyntaxList, statement: Syntax.StatementSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(forKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, firstSemicolonToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, secondSemicolonToken: CodeAnalysis.SyntaxToken, incrementors: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(attributeLists: CodeAnalysis.SyntaxList, forKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, firstSemicolonToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, secondSemicolonToken: CodeAnalysis.SyntaxToken, incrementors: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def FromClause(identifier: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(identifier: str, expression: Syntax.ExpressionSyntax) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(fromKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerCallingConvention(managedOrUnmanagedKeyword: CodeAnalysis.SyntaxToken) -> Syntax.FunctionPointerCallingConventionSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerCallingConvention(managedOrUnmanagedKeyword: CodeAnalysis.SyntaxToken, unmanagedCallingConventionList: Syntax.FunctionPointerUnmanagedCallingConventionListSyntax) -> Syntax.FunctionPointerCallingConventionSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerParameter(type_: Syntax.TypeSyntax) -> Syntax.FunctionPointerParameterSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerParameter(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax) -> Syntax.FunctionPointerParameterSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FunctionPointerParameterListSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerParameterList(lessThanToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.FunctionPointerParameterListSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerType() -> Syntax.FunctionPointerTypeSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerType(callingConvention: Syntax.FunctionPointerCallingConventionSyntax, parameterList: Syntax.FunctionPointerParameterListSyntax) -> Syntax.FunctionPointerTypeSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerType(delegateKeyword: CodeAnalysis.SyntaxToken, asteriskToken: CodeAnalysis.SyntaxToken, callingConvention: Syntax.FunctionPointerCallingConventionSyntax, parameterList: Syntax.FunctionPointerParameterListSyntax) -> Syntax.FunctionPointerTypeSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerUnmanagedCallingConvention(name: CodeAnalysis.SyntaxToken) -> Syntax.FunctionPointerUnmanagedCallingConventionSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerUnmanagedCallingConventionList(callingConventions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    @staticmethod
    def FunctionPointerUnmanagedCallingConventionList(openBracketToken: CodeAnalysis.SyntaxToken, callingConventions: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> Syntax.FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    @staticmethod
    def GenericName(identifier: CodeAnalysis.SyntaxToken) -> Syntax.GenericNameSyntax: ...
    @overload
    @staticmethod
    def GenericName(identifier: str) -> Syntax.GenericNameSyntax: ...
    @overload
    @staticmethod
    def GenericName(identifier: CodeAnalysis.SyntaxToken, typeArgumentList: Syntax.TypeArgumentListSyntax) -> Syntax.GenericNameSyntax: ...
    @property
    def CarriageReturn(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def CarriageReturnLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticCarriageReturn(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticCarriageReturnLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticMarker(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticSpace(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticTab(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def LineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def Space(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def Tab(self) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def GetNonGenericExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionSyntax: ...
    @overload
    @staticmethod
    def GetStandaloneExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionSyntax: ...
    @overload
    @staticmethod
    def GlobalStatement(statement: Syntax.StatementSyntax) -> Syntax.GlobalStatementSyntax: ...
    @overload
    @staticmethod
    def GlobalStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, statement: Syntax.StatementSyntax) -> Syntax.GlobalStatementSyntax: ...
    @overload
    @staticmethod
    def GotoStatement(kind: SyntaxKind, expression: Syntax.ExpressionSyntax) -> Syntax.GotoStatementSyntax: ...
    @overload
    @staticmethod
    def GotoStatement(kind: SyntaxKind, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.GotoStatementSyntax: ...
    @overload
    @staticmethod
    def GotoStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.GotoStatementSyntax: ...
    @overload
    @staticmethod
    def GotoStatement(kind: SyntaxKind, gotoKeyword: CodeAnalysis.SyntaxToken, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.GotoStatementSyntax: ...
    @overload
    @staticmethod
    def GotoStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, gotoKeyword: CodeAnalysis.SyntaxToken, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.GotoStatementSyntax: ...
    @overload
    @staticmethod
    def GroupClause(groupExpression: Syntax.ExpressionSyntax, byExpression: Syntax.ExpressionSyntax) -> Syntax.GroupClauseSyntax: ...
    @overload
    @staticmethod
    def GroupClause(groupKeyword: CodeAnalysis.SyntaxToken, groupExpression: Syntax.ExpressionSyntax, byKeyword: CodeAnalysis.SyntaxToken, byExpression: Syntax.ExpressionSyntax) -> Syntax.GroupClauseSyntax: ...
    @overload
    @staticmethod
    def Identifier(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Identifier(leading: CodeAnalysis.SyntaxTriviaList, text: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Identifier(leading: CodeAnalysis.SyntaxTriviaList, contextualKind: SyntaxKind, text: str, valueText: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def IdentifierName(identifier: CodeAnalysis.SyntaxToken) -> Syntax.IdentifierNameSyntax: ...
    @overload
    @staticmethod
    def IdentifierName(name: str) -> Syntax.IdentifierNameSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(condition: Syntax.ExpressionSyntax, isActive: bool, branchTaken: bool, conditionValue: bool) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, ifKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool, conditionValue: bool) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfStatement(condition: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def IfStatement(condition: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax, else_: Syntax.ElseClauseSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def IfStatement(attributeLists: CodeAnalysis.SyntaxList, condition: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax, else_: Syntax.ElseClauseSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def IfStatement(ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax, else_: Syntax.ElseClauseSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def IfStatement(attributeLists: CodeAnalysis.SyntaxList, ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax, else_: Syntax.ElseClauseSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def ImplicitArrayCreationExpression(initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitArrayCreationExpression(commas: CodeAnalysis.SyntaxTokenList, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitArrayCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, openBracketToken: CodeAnalysis.SyntaxToken, commas: CodeAnalysis.SyntaxTokenList, closeBracketToken: CodeAnalysis.SyntaxToken, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitElementAccess() -> Syntax.ImplicitElementAccessSyntax: ...
    @overload
    @staticmethod
    def ImplicitElementAccess(argumentList: Syntax.BracketedArgumentListSyntax) -> Syntax.ImplicitElementAccessSyntax: ...
    @overload
    @staticmethod
    def ImplicitObjectCreationExpression() -> Syntax.ImplicitObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitObjectCreationExpression(argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitObjectCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitStackAllocArrayCreationExpression(initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ImplicitStackAllocArrayCreationExpression(stackAllocKeyword: CodeAnalysis.SyntaxToken, openBracketToken: CodeAnalysis.SyntaxToken, closeBracketToken: CodeAnalysis.SyntaxToken, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def IncompleteMember(type_: Syntax.TypeSyntax) -> Syntax.IncompleteMemberSyntax: ...
    @overload
    @staticmethod
    def IncompleteMember(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax) -> Syntax.IncompleteMemberSyntax: ...
    @overload
    @staticmethod
    def IndexerDeclaration(type_: Syntax.TypeSyntax) -> Syntax.IndexerDeclarationSyntax: ...
    @overload
    @staticmethod
    def IndexerDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, parameterList: Syntax.BracketedParameterListSyntax, accessorList: Syntax.AccessorListSyntax) -> Syntax.IndexerDeclarationSyntax: ...
    @overload
    @staticmethod
    def IndexerDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, parameterList: Syntax.BracketedParameterListSyntax, accessorList: Syntax.AccessorListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.IndexerDeclarationSyntax: ...
    @overload
    @staticmethod
    def IndexerDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, thisKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.BracketedParameterListSyntax, accessorList: Syntax.AccessorListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.IndexerDeclarationSyntax: ...
    @overload
    @staticmethod
    def IndexerMemberCref(parameters: Syntax.CrefBracketedParameterListSyntax) -> Syntax.IndexerMemberCrefSyntax: ...
    @overload
    @staticmethod
    def IndexerMemberCref(thisKeyword: CodeAnalysis.SyntaxToken, parameters: Syntax.CrefBracketedParameterListSyntax) -> Syntax.IndexerMemberCrefSyntax: ...
    @overload
    @staticmethod
    def InitializerExpression(kind: SyntaxKind, expressions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.InitializerExpressionSyntax: ...
    @overload
    @staticmethod
    def InitializerExpression(kind: SyntaxKind, openBraceToken: CodeAnalysis.SyntaxToken, expressions: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.InitializerExpressionSyntax: ...
    @overload
    @staticmethod
    def InterfaceDeclaration(identifier: str) -> Syntax.InterfaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def InterfaceDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.InterfaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def InterfaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.InterfaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def InterfaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.InterfaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def InterfaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.InterfaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(stringStartToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(stringStartToken: CodeAnalysis.SyntaxToken, contents: CodeAnalysis.SyntaxList) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(stringStartToken: CodeAnalysis.SyntaxToken, stringEndToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(stringStartToken: CodeAnalysis.SyntaxToken, contents: CodeAnalysis.SyntaxList, stringEndToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringText() -> Syntax.InterpolatedStringTextSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringText(textToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringTextSyntax: ...
    @overload
    @staticmethod
    def Interpolation(expression: Syntax.ExpressionSyntax) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def Interpolation(expression: Syntax.ExpressionSyntax, alignmentClause: Syntax.InterpolationAlignmentClauseSyntax, formatClause: Syntax.InterpolationFormatClauseSyntax) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def Interpolation(openBraceToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, alignmentClause: Syntax.InterpolationAlignmentClauseSyntax, formatClause: Syntax.InterpolationFormatClauseSyntax, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def InterpolationAlignmentClause(commaToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.InterpolationAlignmentClauseSyntax: ...
    @overload
    @staticmethod
    def InterpolationFormatClause(colonToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolationFormatClauseSyntax: ...
    @overload
    @staticmethod
    def InterpolationFormatClause(colonToken: CodeAnalysis.SyntaxToken, formatStringToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolationFormatClauseSyntax: ...
    @overload
    @staticmethod
    def InvocationExpression(expression: Syntax.ExpressionSyntax) -> Syntax.InvocationExpressionSyntax: ...
    @overload
    @staticmethod
    def InvocationExpression(expression: Syntax.ExpressionSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.InvocationExpressionSyntax: ...
    @overload
    @staticmethod
    def IsCompleteSubmission(tree: CodeAnalysis.SyntaxTree) -> bool: ...
    @overload
    @staticmethod
    def IsPatternExpression(expression: Syntax.ExpressionSyntax, pattern: Syntax.PatternSyntax) -> Syntax.IsPatternExpressionSyntax: ...
    @overload
    @staticmethod
    def IsPatternExpression(expression: Syntax.ExpressionSyntax, isKeyword: CodeAnalysis.SyntaxToken, pattern: Syntax.PatternSyntax) -> Syntax.IsPatternExpressionSyntax: ...
    @overload
    @staticmethod
    def JoinClause(identifier: CodeAnalysis.SyntaxToken, inExpression: Syntax.ExpressionSyntax, leftExpression: Syntax.ExpressionSyntax, rightExpression: Syntax.ExpressionSyntax) -> Syntax.JoinClauseSyntax: ...
    @overload
    @staticmethod
    def JoinClause(identifier: str, inExpression: Syntax.ExpressionSyntax, leftExpression: Syntax.ExpressionSyntax, rightExpression: Syntax.ExpressionSyntax) -> Syntax.JoinClauseSyntax: ...
    @overload
    @staticmethod
    def JoinClause(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inExpression: Syntax.ExpressionSyntax, leftExpression: Syntax.ExpressionSyntax, rightExpression: Syntax.ExpressionSyntax, into: Syntax.JoinIntoClauseSyntax) -> Syntax.JoinClauseSyntax: ...
    @overload
    @staticmethod
    def JoinClause(joinKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, inExpression: Syntax.ExpressionSyntax, onKeyword: CodeAnalysis.SyntaxToken, leftExpression: Syntax.ExpressionSyntax, equalsKeyword: CodeAnalysis.SyntaxToken, rightExpression: Syntax.ExpressionSyntax, into: Syntax.JoinIntoClauseSyntax) -> Syntax.JoinClauseSyntax: ...
    @overload
    @staticmethod
    def JoinIntoClause(identifier: str) -> Syntax.JoinIntoClauseSyntax: ...
    @overload
    @staticmethod
    def JoinIntoClause(identifier: CodeAnalysis.SyntaxToken) -> Syntax.JoinIntoClauseSyntax: ...
    @overload
    @staticmethod
    def JoinIntoClause(intoKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.JoinIntoClauseSyntax: ...
    @overload
    @staticmethod
    def LabeledStatement(identifier: str, statement: Syntax.StatementSyntax) -> Syntax.LabeledStatementSyntax: ...
    @overload
    @staticmethod
    def LabeledStatement(identifier: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LabeledStatementSyntax: ...
    @overload
    @staticmethod
    def LabeledStatement(attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LabeledStatementSyntax: ...
    @overload
    @staticmethod
    def LabeledStatement(identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LabeledStatementSyntax: ...
    @overload
    @staticmethod
    def LabeledStatement(attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LabeledStatementSyntax: ...
    @overload
    @staticmethod
    def LetClause(identifier: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LetClause(identifier: str, expression: Syntax.ExpressionSyntax) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LetClause(letKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LineDirectivePosition(line: CodeAnalysis.SyntaxToken, character: CodeAnalysis.SyntaxToken) -> Syntax.LineDirectivePositionSyntax: ...
    @overload
    @staticmethod
    def LineDirectivePosition(openParenToken: CodeAnalysis.SyntaxToken, line: CodeAnalysis.SyntaxToken, commaToken: CodeAnalysis.SyntaxToken, character: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.LineDirectivePositionSyntax: ...
    @overload
    @staticmethod
    def LineDirectiveTrivia(line: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LineDirectiveTrivia(line: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LineDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, lineKeyword: CodeAnalysis.SyntaxToken, line: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LineSpanDirectiveTrivia(start: Syntax.LineDirectivePositionSyntax, end: Syntax.LineDirectivePositionSyntax, file: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineSpanDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LineSpanDirectiveTrivia(start: Syntax.LineDirectivePositionSyntax, end: Syntax.LineDirectivePositionSyntax, characterOffset: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineSpanDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LineSpanDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, lineKeyword: CodeAnalysis.SyntaxToken, start: Syntax.LineDirectivePositionSyntax, minusToken: CodeAnalysis.SyntaxToken, end: Syntax.LineDirectivePositionSyntax, characterOffset: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LineSpanDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def List() -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def List(nodes: Generic.IEnumerable) -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def ListPattern(patterns: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ListPatternSyntax: ...
    @overload
    @staticmethod
    def ListPattern(patterns: CodeAnalysis.SeparatedSyntaxList, designation: Syntax.VariableDesignationSyntax) -> Syntax.ListPatternSyntax: ...
    @overload
    @staticmethod
    def ListPattern(openBracketToken: CodeAnalysis.SyntaxToken, patterns: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken, designation: Syntax.VariableDesignationSyntax) -> Syntax.ListPatternSyntax: ...
    @overload
    @staticmethod
    def Literal(value: int) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.UInt32) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: float) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Int64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.UInt64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Single) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Char) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Decimal) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.UInt32) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Int64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.UInt64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Single) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: int) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: float) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Decimal) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Char) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: int, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Int64, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Single, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.UInt32, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Char, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: float, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Decimal, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.UInt64, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def LiteralExpression(kind: SyntaxKind) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def LiteralExpression(kind: SyntaxKind, token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def LoadDirectiveTrivia(file: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LoadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LoadDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, loadKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.LoadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(declaration: Syntax.VariableDeclarationSyntax) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, modifiers: CodeAnalysis.SyntaxTokenList, declaration: Syntax.VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(returnType: Syntax.TypeSyntax, identifier: str) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LocalFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.LocalFunctionStatementSyntax: ...
    @overload
    @staticmethod
    def LockStatement(expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.LockStatementSyntax: ...
    @overload
    @staticmethod
    def LockStatement(attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.LockStatementSyntax: ...
    @overload
    @staticmethod
    def LockStatement(lockKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LockStatementSyntax: ...
    @overload
    @staticmethod
    def LockStatement(attributeLists: CodeAnalysis.SyntaxList, lockKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.LockStatementSyntax: ...
    @overload
    @staticmethod
    def MakeRefExpression(expression: Syntax.ExpressionSyntax) -> Syntax.MakeRefExpressionSyntax: ...
    @overload
    @staticmethod
    def MakeRefExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.MakeRefExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberAccessExpression(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberAccessExpression(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberBindingExpression(name: Syntax.SimpleNameSyntax) -> Syntax.MemberBindingExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberBindingExpression(operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberBindingExpressionSyntax: ...
    @overload
    @staticmethod
    def MethodDeclaration(returnType: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def MethodDeclaration(returnType: Syntax.TypeSyntax, identifier: str) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def MethodDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def MethodDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def MethodDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def MissingToken(kind: SyntaxKind) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def MissingToken(leading: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def NameColon(name: str) -> Syntax.NameColonSyntax: ...
    @overload
    @staticmethod
    def NameColon(name: Syntax.IdentifierNameSyntax) -> Syntax.NameColonSyntax: ...
    @overload
    @staticmethod
    def NameColon(name: Syntax.IdentifierNameSyntax, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.NameColonSyntax: ...
    @overload
    @staticmethod
    def NameEquals(name: Syntax.IdentifierNameSyntax) -> Syntax.NameEqualsSyntax: ...
    @overload
    @staticmethod
    def NameEquals(name: str) -> Syntax.NameEqualsSyntax: ...
    @overload
    @staticmethod
    def NameEquals(name: Syntax.IdentifierNameSyntax, equalsToken: CodeAnalysis.SyntaxToken) -> Syntax.NameEqualsSyntax: ...
    @overload
    @staticmethod
    def NameMemberCref(name: Syntax.TypeSyntax) -> Syntax.NameMemberCrefSyntax: ...
    @overload
    @staticmethod
    def NameMemberCref(name: Syntax.TypeSyntax, parameters: Syntax.CrefParameterListSyntax) -> Syntax.NameMemberCrefSyntax: ...
    @overload
    @staticmethod
    def NamespaceDeclaration(name: Syntax.NameSyntax) -> Syntax.NamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def NamespaceDeclaration(name: Syntax.NameSyntax, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.NamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def NamespaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, name: Syntax.NameSyntax, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.NamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def NamespaceDeclaration(namespaceKeyword: CodeAnalysis.SyntaxToken, name: Syntax.NameSyntax, openBraceToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.NamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def NamespaceDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, namespaceKeyword: CodeAnalysis.SyntaxToken, name: Syntax.NameSyntax, openBraceToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.NamespaceDeclarationSyntax: ...
    @overload
    @staticmethod
    def NodeOrTokenList() -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NodeOrTokenList(nodesAndTokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxNodeOrToken]) -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NodeOrTokenList(nodesAndTokens: Generic.IEnumerable) -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NullableDirectiveTrivia(settingToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.NullableDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def NullableDirectiveTrivia(settingToken: CodeAnalysis.SyntaxToken, targetToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.NullableDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def NullableDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, nullableKeyword: CodeAnalysis.SyntaxToken, settingToken: CodeAnalysis.SyntaxToken, targetToken: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.NullableDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def NullableType(elementType: Syntax.TypeSyntax) -> Syntax.NullableTypeSyntax: ...
    @overload
    @staticmethod
    def NullableType(elementType: Syntax.TypeSyntax, questionToken: CodeAnalysis.SyntaxToken) -> Syntax.NullableTypeSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(type_: Syntax.TypeSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(type_: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def OmittedArraySizeExpression() -> Syntax.OmittedArraySizeExpressionSyntax: ...
    @overload
    @staticmethod
    def OmittedArraySizeExpression(omittedArraySizeExpressionToken: CodeAnalysis.SyntaxToken) -> Syntax.OmittedArraySizeExpressionSyntax: ...
    @overload
    @staticmethod
    def OmittedTypeArgument() -> Syntax.OmittedTypeArgumentSyntax: ...
    @overload
    @staticmethod
    def OmittedTypeArgument(omittedTypeArgumentToken: CodeAnalysis.SyntaxToken) -> Syntax.OmittedTypeArgumentSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(returnType: Syntax.TypeSyntax, operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, body: Syntax.BlockSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def OperatorMemberCref(operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def OperatorMemberCref(operatorToken: CodeAnalysis.SyntaxToken, parameters: Syntax.CrefParameterListSyntax) -> Syntax.OperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def OperatorMemberCref(operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameters: Syntax.CrefParameterListSyntax) -> Syntax.OperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def OperatorMemberCref(operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameters: Syntax.CrefParameterListSyntax) -> Syntax.OperatorMemberCrefSyntax: ...
    @overload
    @staticmethod
    def OrderByClause(orderings: CodeAnalysis.SeparatedSyntaxList) -> Syntax.OrderByClauseSyntax: ...
    @overload
    @staticmethod
    def OrderByClause(orderByKeyword: CodeAnalysis.SyntaxToken, orderings: CodeAnalysis.SeparatedSyntaxList) -> Syntax.OrderByClauseSyntax: ...
    @overload
    @staticmethod
    def Ordering(kind: SyntaxKind, expression: Syntax.ExpressionSyntax) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def Ordering(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def Parameter(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ParameterSyntax: ...
    @overload
    @staticmethod
    def Parameter(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken, default: Syntax.EqualsValueClauseSyntax) -> Syntax.ParameterSyntax: ...
    @overload
    @staticmethod
    def ParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParameterList(openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedExpression(openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParenthesizedExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression() -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(body: CSharpSyntaxNode) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(parameterList: Syntax.ParameterListSyntax, body: CSharpSyntaxNode) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(asyncKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, body: CSharpSyntaxNode) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(asyncKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedLambdaExpression(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, parameterList: Syntax.ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedPattern(pattern: Syntax.PatternSyntax) -> Syntax.ParenthesizedPatternSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedPattern(openParenToken: CodeAnalysis.SyntaxToken, pattern: Syntax.PatternSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParenthesizedPatternSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedVariableDesignation(variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ParenthesizedVariableDesignationSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedVariableDesignation(openParenToken: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParenthesizedVariableDesignationSyntax: ...
    @overload
    @staticmethod
    def ParseArgumentList(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ParseAttributeArgumentList(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.AttributeArgumentListSyntax: ...
    @overload
    @staticmethod
    def ParseBracketedArgumentList(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.BracketedArgumentListSyntax: ...
    @overload
    @staticmethod
    def ParseBracketedParameterList(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.BracketedParameterListSyntax: ...
    @overload
    @staticmethod
    def ParseCompilationUnit(text: str, offset: int, options: CSharpParseOptions) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def ParseExpression(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.ExpressionSyntax: ...
    @overload
    @staticmethod
    def ParseLeadingTrivia(text: str, offset: int) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ParseMemberDeclaration(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.MemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def ParseName(text: str, offset: int, consumeFullText: bool) -> Syntax.NameSyntax: ...
    @overload
    @staticmethod
    def ParseParameterList(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParseStatement(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.StatementSyntax: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: Text.SourceText, options: CodeAnalysis.ParseOptions, path: str, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: str, options: CodeAnalysis.ParseOptions, path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseToken(text: str, offset: int) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ParseTokens(text: str, offset: int, initialTokenPosition: int, options: CSharpParseOptions) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ParseTrailingTrivia(text: str, offset: int) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ParseTypeName(text: str, offset: int, consumeFullText: bool) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def ParseTypeName(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def PointerType(elementType: Syntax.TypeSyntax) -> Syntax.PointerTypeSyntax: ...
    @overload
    @staticmethod
    def PointerType(elementType: Syntax.TypeSyntax, asteriskToken: CodeAnalysis.SyntaxToken) -> Syntax.PointerTypeSyntax: ...
    @overload
    @staticmethod
    def PositionalPatternClause(subpatterns: CodeAnalysis.SeparatedSyntaxList) -> Syntax.PositionalPatternClauseSyntax: ...
    @overload
    @staticmethod
    def PositionalPatternClause(openParenToken: CodeAnalysis.SyntaxToken, subpatterns: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.PositionalPatternClauseSyntax: ...
    @overload
    @staticmethod
    def PostfixUnaryExpression(kind: SyntaxKind, operand: Syntax.ExpressionSyntax) -> Syntax.PostfixUnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def PostfixUnaryExpression(kind: SyntaxKind, operand: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.PostfixUnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def PragmaChecksumDirectiveTrivia(file: CodeAnalysis.SyntaxToken, guid: CodeAnalysis.SyntaxToken, bytes_: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def PragmaChecksumDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, pragmaKeyword: CodeAnalysis.SyntaxToken, checksumKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, guid: CodeAnalysis.SyntaxToken, bytes_: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def PragmaWarningDirectiveTrivia(disableOrRestoreKeyword: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def PragmaWarningDirectiveTrivia(disableOrRestoreKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList, isActive: bool) -> Syntax.PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def PragmaWarningDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, pragmaKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, disableOrRestoreKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def PredefinedType(keyword: CodeAnalysis.SyntaxToken) -> Syntax.PredefinedTypeSyntax: ...
    @overload
    @staticmethod
    def PrefixUnaryExpression(kind: SyntaxKind, operand: Syntax.ExpressionSyntax) -> Syntax.PrefixUnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def PrefixUnaryExpression(kind: SyntaxKind, operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.PrefixUnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def PreprocessingMessage(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def PrimaryConstructorBaseType(type_: Syntax.TypeSyntax) -> Syntax.PrimaryConstructorBaseTypeSyntax: ...
    @overload
    @staticmethod
    def PrimaryConstructorBaseType(type_: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.PrimaryConstructorBaseTypeSyntax: ...
    @overload
    @staticmethod
    def PropertyDeclaration(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.PropertyDeclarationSyntax: ...
    @overload
    @staticmethod
    def PropertyDeclaration(type_: Syntax.TypeSyntax, identifier: str) -> Syntax.PropertyDeclarationSyntax: ...
    @overload
    @staticmethod
    def PropertyDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax) -> Syntax.PropertyDeclarationSyntax: ...
    @overload
    @staticmethod
    def PropertyDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, initializer: Syntax.EqualsValueClauseSyntax) -> Syntax.PropertyDeclarationSyntax: ...
    @overload
    @staticmethod
    def PropertyDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: Syntax.AccessorListSyntax, expressionBody: Syntax.ArrowExpressionClauseSyntax, initializer: Syntax.EqualsValueClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.PropertyDeclarationSyntax: ...
    @overload
    @staticmethod
    def PropertyPatternClause(subpatterns: CodeAnalysis.SeparatedSyntaxList) -> Syntax.PropertyPatternClauseSyntax: ...
    @overload
    @staticmethod
    def PropertyPatternClause(openBraceToken: CodeAnalysis.SyntaxToken, subpatterns: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.PropertyPatternClauseSyntax: ...
    @overload
    @staticmethod
    def QualifiedCref(container: Syntax.TypeSyntax, member: Syntax.MemberCrefSyntax) -> Syntax.QualifiedCrefSyntax: ...
    @overload
    @staticmethod
    def QualifiedCref(container: Syntax.TypeSyntax, dotToken: CodeAnalysis.SyntaxToken, member: Syntax.MemberCrefSyntax) -> Syntax.QualifiedCrefSyntax: ...
    @overload
    @staticmethod
    def QualifiedName(left: Syntax.NameSyntax, right: Syntax.SimpleNameSyntax) -> Syntax.QualifiedNameSyntax: ...
    @overload
    @staticmethod
    def QualifiedName(left: Syntax.NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: Syntax.SimpleNameSyntax) -> Syntax.QualifiedNameSyntax: ...
    @overload
    @staticmethod
    def QueryBody(selectOrGroup: Syntax.SelectOrGroupClauseSyntax) -> Syntax.QueryBodySyntax: ...
    @overload
    @staticmethod
    def QueryBody(clauses: CodeAnalysis.SyntaxList, selectOrGroup: Syntax.SelectOrGroupClauseSyntax, continuation: Syntax.QueryContinuationSyntax) -> Syntax.QueryBodySyntax: ...
    @overload
    @staticmethod
    def QueryContinuation(identifier: str, body: Syntax.QueryBodySyntax) -> Syntax.QueryContinuationSyntax: ...
    @overload
    @staticmethod
    def QueryContinuation(identifier: CodeAnalysis.SyntaxToken, body: Syntax.QueryBodySyntax) -> Syntax.QueryContinuationSyntax: ...
    @overload
    @staticmethod
    def QueryContinuation(intoKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, body: Syntax.QueryBodySyntax) -> Syntax.QueryContinuationSyntax: ...
    @overload
    @staticmethod
    def QueryExpression(fromClause: Syntax.FromClauseSyntax, body: Syntax.QueryBodySyntax) -> Syntax.QueryExpressionSyntax: ...
    @overload
    @staticmethod
    def RangeExpression() -> Syntax.RangeExpressionSyntax: ...
    @overload
    @staticmethod
    def RangeExpression(leftOperand: Syntax.ExpressionSyntax, rightOperand: Syntax.ExpressionSyntax) -> Syntax.RangeExpressionSyntax: ...
    @overload
    @staticmethod
    def RangeExpression(leftOperand: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, rightOperand: Syntax.ExpressionSyntax) -> Syntax.RangeExpressionSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(keyword: CodeAnalysis.SyntaxToken, identifier: str) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(kind: SyntaxKind, keyword: CodeAnalysis.SyntaxToken, identifier: str) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(kind: SyntaxKind, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecordDeclaration(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, classOrStructKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.RecordDeclarationSyntax: ...
    @overload
    @staticmethod
    def RecursivePattern() -> Syntax.RecursivePatternSyntax: ...
    @overload
    @staticmethod
    def RecursivePattern(type_: Syntax.TypeSyntax, positionalPatternClause: Syntax.PositionalPatternClauseSyntax, propertyPatternClause: Syntax.PropertyPatternClauseSyntax, designation: Syntax.VariableDesignationSyntax) -> Syntax.RecursivePatternSyntax: ...
    @overload
    @staticmethod
    def ReferenceDirectiveTrivia(file: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.ReferenceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ReferenceDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, referenceKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.ReferenceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RefExpression(expression: Syntax.ExpressionSyntax) -> Syntax.RefExpressionSyntax: ...
    @overload
    @staticmethod
    def RefExpression(refKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.RefExpressionSyntax: ...
    @overload
    @staticmethod
    def RefType(type_: Syntax.TypeSyntax) -> Syntax.RefTypeSyntax: ...
    @overload
    @staticmethod
    def RefType(refKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.RefTypeSyntax: ...
    @overload
    @staticmethod
    def RefType(refKeyword: CodeAnalysis.SyntaxToken, readOnlyKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.RefTypeSyntax: ...
    @overload
    @staticmethod
    def RefTypeExpression(expression: Syntax.ExpressionSyntax) -> Syntax.RefTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def RefTypeExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.RefTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def RefValueExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.RefValueExpressionSyntax: ...
    @overload
    @staticmethod
    def RefValueExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, comma: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.RefValueExpressionSyntax: ...
    @overload
    @staticmethod
    def RegionDirectiveTrivia(isActive: bool) -> Syntax.RegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RegionDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.RegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RelationalPattern(operatorToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.RelationalPatternSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(returnKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(attributeLists: CodeAnalysis.SyntaxList, returnKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ScopedType(type_: Syntax.TypeSyntax) -> Syntax.ScopedTypeSyntax: ...
    @overload
    @staticmethod
    def ScopedType(scopedKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.ScopedTypeSyntax: ...
    @overload
    @staticmethod
    def SelectClause(expression: Syntax.ExpressionSyntax) -> Syntax.SelectClauseSyntax: ...
    @overload
    @staticmethod
    def SelectClause(selectKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.SelectClauseSyntax: ...
    @overload
    @staticmethod
    def SeparatedList() -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodes: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodesAndTokens: CodeAnalysis.SyntaxNodeOrTokenList) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodesAndTokens: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodes: Generic.IEnumerable, separators: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def ShebangDirectiveTrivia(isActive: bool) -> Syntax.ShebangDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ShebangDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, exclamationToken: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.ShebangDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def SimpleBaseType(type_: Syntax.TypeSyntax) -> Syntax.SimpleBaseTypeSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(parameter: Syntax.ParameterSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(parameter: Syntax.ParameterSyntax, body: CSharpSyntaxNode) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(parameter: Syntax.ParameterSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(asyncKeyword: CodeAnalysis.SyntaxToken, parameter: Syntax.ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, body: CSharpSyntaxNode) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(modifiers: CodeAnalysis.SyntaxTokenList, parameter: Syntax.ParameterSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(modifiers: CodeAnalysis.SyntaxTokenList, parameter: Syntax.ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameter: Syntax.ParameterSyntax, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(asyncKeyword: CodeAnalysis.SyntaxToken, parameter: Syntax.ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleLambdaExpression(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameter: Syntax.ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, expressionBody: Syntax.ExpressionSyntax) -> Syntax.SimpleLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SingletonList(node: TNode) -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def SingletonSeparatedList(node: TNode) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SingleVariableDesignation(identifier: CodeAnalysis.SyntaxToken) -> Syntax.SingleVariableDesignationSyntax: ...
    @overload
    @staticmethod
    def SizeOfExpression(type_: Syntax.TypeSyntax) -> Syntax.SizeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def SizeOfExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.SizeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def SkippedTokensTrivia() -> Syntax.SkippedTokensTriviaSyntax: ...
    @overload
    @staticmethod
    def SkippedTokensTrivia(tokens: CodeAnalysis.SyntaxTokenList) -> Syntax.SkippedTokensTriviaSyntax: ...
    @overload
    @staticmethod
    def SlicePattern(pattern: Syntax.PatternSyntax) -> Syntax.SlicePatternSyntax: ...
    @overload
    @staticmethod
    def SlicePattern(dotDotToken: CodeAnalysis.SyntaxToken, pattern: Syntax.PatternSyntax) -> Syntax.SlicePatternSyntax: ...
    @overload
    @staticmethod
    def StackAllocArrayCreationExpression(type_: Syntax.TypeSyntax) -> Syntax.StackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def StackAllocArrayCreationExpression(type_: Syntax.TypeSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.StackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def StackAllocArrayCreationExpression(stackAllocKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.StackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def StackAllocArrayCreationExpression(stackAllocKeyword: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.StackAllocArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(identifier: str) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def StructDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.StructDeclarationSyntax: ...
    @overload
    @staticmethod
    def Subpattern(pattern: Syntax.PatternSyntax) -> Syntax.SubpatternSyntax: ...
    @overload
    @staticmethod
    def Subpattern(expressionColon: Syntax.BaseExpressionColonSyntax, pattern: Syntax.PatternSyntax) -> Syntax.SubpatternSyntax: ...
    @overload
    @staticmethod
    def Subpattern(nameColon: Syntax.NameColonSyntax, pattern: Syntax.PatternSyntax) -> Syntax.SubpatternSyntax: ...
    @overload
    @staticmethod
    def SwitchExpression(governingExpression: Syntax.ExpressionSyntax) -> Syntax.SwitchExpressionSyntax: ...
    @overload
    @staticmethod
    def SwitchExpression(governingExpression: Syntax.ExpressionSyntax, arms: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SwitchExpressionSyntax: ...
    @overload
    @staticmethod
    def SwitchExpression(governingExpression: Syntax.ExpressionSyntax, switchKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, arms: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.SwitchExpressionSyntax: ...
    @overload
    @staticmethod
    def SwitchExpressionArm(pattern: Syntax.PatternSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.SwitchExpressionArmSyntax: ...
    @overload
    @staticmethod
    def SwitchExpressionArm(pattern: Syntax.PatternSyntax, whenClause: Syntax.WhenClauseSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.SwitchExpressionArmSyntax: ...
    @overload
    @staticmethod
    def SwitchExpressionArm(pattern: Syntax.PatternSyntax, whenClause: Syntax.WhenClauseSyntax, equalsGreaterThanToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.SwitchExpressionArmSyntax: ...
    @overload
    @staticmethod
    def SwitchSection() -> Syntax.SwitchSectionSyntax: ...
    @overload
    @staticmethod
    def SwitchSection(labels: CodeAnalysis.SyntaxList, statements: CodeAnalysis.SyntaxList) -> Syntax.SwitchSectionSyntax: ...
    @overload
    @staticmethod
    def SwitchStatement(expression: Syntax.ExpressionSyntax) -> Syntax.SwitchStatementSyntax: ...
    @overload
    @staticmethod
    def SwitchStatement(expression: Syntax.ExpressionSyntax, sections: CodeAnalysis.SyntaxList) -> Syntax.SwitchStatementSyntax: ...
    @overload
    @staticmethod
    def SwitchStatement(switchKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, sections: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.SwitchStatementSyntax: ...
    @overload
    @staticmethod
    def SwitchStatement(attributeLists: CodeAnalysis.SyntaxList, switchKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, sections: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.SwitchStatementSyntax: ...
    @overload
    @staticmethod
    def SyntaxTree(root: CodeAnalysis.SyntaxNode, options: CodeAnalysis.ParseOptions, path: str, encoding: Text.Encoding) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def SyntaxTrivia(kind: SyntaxKind, text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ThisExpression() -> Syntax.ThisExpressionSyntax: ...
    @overload
    @staticmethod
    def ThisExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.ThisExpressionSyntax: ...
    @overload
    @staticmethod
    def ThrowExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ThrowExpressionSyntax: ...
    @overload
    @staticmethod
    def ThrowExpression(throwKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ThrowExpressionSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(throwKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(attributeLists: CodeAnalysis.SyntaxList, throwKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def Token(kind: SyntaxKind) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Token(leading: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Token(leading: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, text: str, valueText: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def TokenList() -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(tokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(tokens: Generic.IEnumerable) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def Trivia(node: Syntax.StructuredTriviaSyntax) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def TriviaList() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivias: Generic.IEnumerable) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivias: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTrivia]) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TryStatement(catches: CodeAnalysis.SyntaxList) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TryStatement(block: Syntax.BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: Syntax.FinallyClauseSyntax) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TryStatement(attributeLists: CodeAnalysis.SyntaxList, block: Syntax.BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: Syntax.FinallyClauseSyntax) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TryStatement(tryKeyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: Syntax.FinallyClauseSyntax) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TryStatement(attributeLists: CodeAnalysis.SyntaxList, tryKeyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: Syntax.FinallyClauseSyntax) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TupleElement(type_: Syntax.TypeSyntax) -> Syntax.TupleElementSyntax: ...
    @overload
    @staticmethod
    def TupleElement(type_: Syntax.TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.TupleElementSyntax: ...
    @overload
    @staticmethod
    def TupleExpression(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TupleExpressionSyntax: ...
    @overload
    @staticmethod
    def TupleExpression(openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TupleExpressionSyntax: ...
    @overload
    @staticmethod
    def TupleType(elements: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TupleTypeSyntax: ...
    @overload
    @staticmethod
    def TupleType(openParenToken: CodeAnalysis.SyntaxToken, elements: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TupleTypeSyntax: ...
    @overload
    @staticmethod
    def TypeArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeArgumentListSyntax: ...
    @overload
    @staticmethod
    def TypeArgumentList(lessThanToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeArgumentListSyntax: ...
    @overload
    @staticmethod
    def TypeConstraint(type_: Syntax.TypeSyntax) -> Syntax.TypeConstraintSyntax: ...
    @overload
    @staticmethod
    def TypeCref(type_: Syntax.TypeSyntax) -> Syntax.TypeCrefSyntax: ...
    @overload
    @staticmethod
    def TypeDeclaration(kind: SyntaxKind, identifier: CodeAnalysis.SyntaxToken) -> Syntax.TypeDeclarationSyntax: ...
    @overload
    @staticmethod
    def TypeDeclaration(kind: SyntaxKind, identifier: str) -> Syntax.TypeDeclarationSyntax: ...
    @overload
    @staticmethod
    def TypeDeclaration(kind: SyntaxKind, attributes: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, baseList: Syntax.BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeDeclarationSyntax: ...
    @overload
    @staticmethod
    def TypeOfExpression(type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(identifier: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(identifier: str) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(attributeLists: CodeAnalysis.SyntaxList, varianceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameterConstraintClause(name: str) -> Syntax.TypeParameterConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterConstraintClause(name: Syntax.IdentifierNameSyntax) -> Syntax.TypeParameterConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterConstraintClause(name: Syntax.IdentifierNameSyntax, constraints: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeParameterConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterConstraintClause(whereKeyword: CodeAnalysis.SyntaxToken, name: Syntax.IdentifierNameSyntax, colonToken: CodeAnalysis.SyntaxToken, constraints: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeParameterConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeParameterListSyntax: ...
    @overload
    @staticmethod
    def TypeParameterList(lessThanToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterListSyntax: ...
    @overload
    @staticmethod
    def TypePattern(type_: Syntax.TypeSyntax) -> Syntax.TypePatternSyntax: ...
    @overload
    @staticmethod
    def UnaryPattern(pattern: Syntax.PatternSyntax) -> Syntax.UnaryPatternSyntax: ...
    @overload
    @staticmethod
    def UnaryPattern(operatorToken: CodeAnalysis.SyntaxToken, pattern: Syntax.PatternSyntax) -> Syntax.UnaryPatternSyntax: ...
    @overload
    @staticmethod
    def UndefDirectiveTrivia(name: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.UndefDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def UndefDirectiveTrivia(name: str, isActive: bool) -> Syntax.UndefDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def UndefDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, undefKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.UndefDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def UnsafeStatement(block: Syntax.BlockSyntax) -> Syntax.UnsafeStatementSyntax: ...
    @overload
    @staticmethod
    def UnsafeStatement(attributeLists: CodeAnalysis.SyntaxList, block: Syntax.BlockSyntax) -> Syntax.UnsafeStatementSyntax: ...
    @overload
    @staticmethod
    def UnsafeStatement(unsafeKeyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax) -> Syntax.UnsafeStatementSyntax: ...
    @overload
    @staticmethod
    def UnsafeStatement(attributeLists: CodeAnalysis.SyntaxList, unsafeKeyword: CodeAnalysis.SyntaxToken, block: Syntax.BlockSyntax) -> Syntax.UnsafeStatementSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(name: Syntax.NameSyntax) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(namespaceOrType: Syntax.TypeSyntax) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(alias: Syntax.NameEqualsSyntax, name: Syntax.NameSyntax) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(alias: Syntax.NameEqualsSyntax, namespaceOrType: Syntax.TypeSyntax) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(staticKeyword: CodeAnalysis.SyntaxToken, alias: Syntax.NameEqualsSyntax, name: Syntax.NameSyntax) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, alias: Syntax.NameEqualsSyntax, name: Syntax.NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(globalKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, alias: Syntax.NameEqualsSyntax, name: Syntax.NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingDirective(globalKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, unsafeKeyword: CodeAnalysis.SyntaxToken, alias: Syntax.NameEqualsSyntax, namespaceOrType: Syntax.TypeSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.UsingDirectiveSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(declaration: Syntax.VariableDeclarationSyntax, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(attributeLists: CodeAnalysis.SyntaxList, declaration: Syntax.VariableDeclarationSyntax, expression: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: Syntax.VariableDeclarationSyntax, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def VariableDeclaration(type_: Syntax.TypeSyntax) -> Syntax.VariableDeclarationSyntax: ...
    @overload
    @staticmethod
    def VariableDeclaration(type_: Syntax.TypeSyntax, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.VariableDeclarationSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(identifier: CodeAnalysis.SyntaxToken) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(identifier: str) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(identifier: CodeAnalysis.SyntaxToken, argumentList: Syntax.BracketedArgumentListSyntax, initializer: Syntax.EqualsValueClauseSyntax) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VarPattern(designation: Syntax.VariableDesignationSyntax) -> Syntax.VarPatternSyntax: ...
    @overload
    @staticmethod
    def VarPattern(varKeyword: CodeAnalysis.SyntaxToken, designation: Syntax.VariableDesignationSyntax) -> Syntax.VarPatternSyntax: ...
    @overload
    @staticmethod
    def VerbatimIdentifier(leading: CodeAnalysis.SyntaxTriviaList, text: str, valueText: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def WarningDirectiveTrivia(isActive: bool) -> Syntax.WarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def WarningDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> Syntax.WarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def WhenClause(condition: Syntax.ExpressionSyntax) -> Syntax.WhenClauseSyntax: ...
    @overload
    @staticmethod
    def WhenClause(whenKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhenClauseSyntax: ...
    @overload
    @staticmethod
    def WhereClause(condition: Syntax.ExpressionSyntax) -> Syntax.WhereClauseSyntax: ...
    @overload
    @staticmethod
    def WhereClause(whereKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhereClauseSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(condition: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(attributeLists: CodeAnalysis.SyntaxList, condition: Syntax.ExpressionSyntax, statement: Syntax.StatementSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(attributeLists: CodeAnalysis.SyntaxList, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: Syntax.StatementSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def Whitespace(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def WithExpression(expression: Syntax.ExpressionSyntax, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.WithExpressionSyntax: ...
    @overload
    @staticmethod
    def WithExpression(expression: Syntax.ExpressionSyntax, withKeyword: CodeAnalysis.SyntaxToken, initializer: Syntax.InitializerExpressionSyntax) -> Syntax.WithExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlCDataSection(textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlCDataSectionSyntax: ...
    @overload
    @staticmethod
    def XmlCDataSection(startCDataToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endCDataToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCDataSectionSyntax: ...
    @overload
    @staticmethod
    def XmlComment(textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlCommentSyntax: ...
    @overload
    @staticmethod
    def XmlComment(lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCommentSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(cref: Syntax.CrefSyntax) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(cref: Syntax.CrefSyntax, quoteKind: SyntaxKind) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, cref: Syntax.CrefSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(name: Syntax.XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, cref: Syntax.CrefSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlElement(startTag: Syntax.XmlElementStartTagSyntax, endTag: Syntax.XmlElementEndTagSyntax) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(name: Syntax.XmlNameSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(localName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(startTag: Syntax.XmlElementStartTagSyntax, content: CodeAnalysis.SyntaxList, endTag: Syntax.XmlElementEndTagSyntax) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElementEndTag(name: Syntax.XmlNameSyntax) -> Syntax.XmlElementEndTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementEndTag(lessThanSlashToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlElementEndTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(name: Syntax.XmlNameSyntax) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(name: Syntax.XmlNameSyntax, attributes: CodeAnalysis.SyntaxList) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(lessThanToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, attributes: CodeAnalysis.SyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(name: Syntax.XmlNameSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(localName: str) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(name: Syntax.XmlNameSyntax, attributes: CodeAnalysis.SyntaxList) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(lessThanToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, attributes: CodeAnalysis.SyntaxList, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEntity(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlExampleElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExampleElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExceptionElement(cref: Syntax.CrefSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExceptionElement(cref: Syntax.CrefSyntax, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlMultiLineElement(localName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlMultiLineElement(name: Syntax.XmlNameSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlName(localName: str) -> Syntax.XmlNameSyntax: ...
    @overload
    @staticmethod
    def XmlName(localName: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameSyntax: ...
    @overload
    @staticmethod
    def XmlName(prefix: Syntax.XmlPrefixSyntax, localName: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(parameterName: str) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, identifier: Syntax.IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, identifier: str, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(name: Syntax.XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, identifier: Syntax.IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNewLine(text: str) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlNullKeywordElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlParaElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParaElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamElement(parameterName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamElement(parameterName: str, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamRefElement(parameterName: str) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlPermissionElement(cref: Syntax.CrefSyntax, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPermissionElement(cref: Syntax.CrefSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPlaceholderElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPlaceholderElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPrefix(prefix: CodeAnalysis.SyntaxToken) -> Syntax.XmlPrefixSyntax: ...
    @overload
    @staticmethod
    def XmlPrefix(prefix: str) -> Syntax.XmlPrefixSyntax: ...
    @overload
    @staticmethod
    def XmlPrefix(prefix: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlPrefixSyntax: ...
    @overload
    @staticmethod
    def XmlPreliminaryElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlProcessingInstruction(name: Syntax.XmlNameSyntax) -> Syntax.XmlProcessingInstructionSyntax: ...
    @overload
    @staticmethod
    def XmlProcessingInstruction(name: Syntax.XmlNameSyntax, textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlProcessingInstructionSyntax: ...
    @overload
    @staticmethod
    def XmlProcessingInstruction(startProcessingInstructionToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, textTokens: CodeAnalysis.SyntaxTokenList, endProcessingInstructionToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlProcessingInstructionSyntax: ...
    @overload
    @staticmethod
    def XmlRemarksElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlRemarksElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlReturnsElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlReturnsElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeAlsoElement(cref: Syntax.CrefSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeAlsoElement(linkAddress: System.Uri, linkText: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeElement(cref: Syntax.CrefSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlSummaryElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSummaryElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlText() -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(textTokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(value: str) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: str, textTokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: str, value: str) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: Syntax.XmlNameSyntax, quoteKind: SyntaxKind, textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: str, quoteKind: SyntaxKind, textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextAttribute(name: Syntax.XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlTextAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlTextLiteral(value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextLiteral(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextLiteral(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(text: str, continueXmlDocumentationComment: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlThreadSafetyElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlThreadSafetyElement(isStatic: bool, isInstance: bool) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlValueElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlValueElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(kind: SyntaxKind, expression: Syntax.ExpressionSyntax) -> Syntax.YieldStatementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, expression: Syntax.ExpressionSyntax) -> Syntax.YieldStatementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(kind: SyntaxKind, yieldKeyword: CodeAnalysis.SyntaxToken, returnOrBreakKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.YieldStatementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, yieldKeyword: CodeAnalysis.SyntaxToken, returnOrBreakKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.YieldStatementSyntax: ...

class CSharpSyntaxNode(CodeAnalysis.SyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharpSyntaxVisitor) -> None: ...
    @overload
    @staticmethod
    def DeserializeFrom(stream: IO.Stream, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def FindToken(self, position: int, findInsideTrivia: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def FindTrivia(self, position: int, stepInto: System.Func) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    def FindTrivia(self, position: int, findInsideTrivia: bool) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def Language(self) -> str: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    def GetFirstDirective(self, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    def GetFirstToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def GetLastDirective(self, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    def GetLastToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def GetLeadingTrivia() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def GetLocation() -> CodeAnalysis.Location: ...
    @overload
    def GetTrailingTrivia() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def Kind() -> SyntaxKind: ...

class CSharpSyntaxRewriter(CSharpSyntaxVisitor):
    """    """
    def __init__(self, visitIntoStructuredTrivia: bool): ...
    @property
    def VisitIntoStructuredTrivia(self) -> bool: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAccessorDeclaration(self, node: Syntax.AccessorDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAccessorList(self, node: Syntax.AccessorListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAliasQualifiedName(self, node: Syntax.AliasQualifiedNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAnonymousMethodExpression(self, node: Syntax.AnonymousMethodExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAnonymousObjectMemberDeclarator(self, node: Syntax.AnonymousObjectMemberDeclaratorSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArgument(self, node: Syntax.ArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrowExpressionClause(self, node: Syntax.ArrowExpressionClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAssignmentExpression(self, node: Syntax.AssignmentExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeArgument(self, node: Syntax.AttributeArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeArgumentList(self, node: Syntax.AttributeArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeTargetSpecifier(self, node: Syntax.AttributeTargetSpecifierSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBaseExpression(self, node: Syntax.BaseExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBaseList(self, node: Syntax.BaseListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBinaryPattern(self, node: Syntax.BinaryPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBlock(self, node: Syntax.BlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBracketedArgumentList(self, node: Syntax.BracketedArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBracketedParameterList(self, node: Syntax.BracketedParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBreakStatement(self, node: Syntax.BreakStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCasePatternSwitchLabel(self, node: Syntax.CasePatternSwitchLabelSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCaseSwitchLabel(self, node: Syntax.CaseSwitchLabelSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCastExpression(self, node: Syntax.CastExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchClause(self, node: Syntax.CatchClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchDeclaration(self, node: Syntax.CatchDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCheckedExpression(self, node: Syntax.CheckedExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCheckedStatement(self, node: Syntax.CheckedStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitClassDeclaration(self, node: Syntax.ClassDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitClassOrStructConstraint(self, node: Syntax.ClassOrStructConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConditionalExpression(self, node: Syntax.ConditionalExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstantPattern(self, node: Syntax.ConstantPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstructorConstraint(self, node: Syntax.ConstructorConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstructorDeclaration(self, node: Syntax.ConstructorDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstructorInitializer(self, node: Syntax.ConstructorInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConversionOperatorDeclaration(self, node: Syntax.ConversionOperatorDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConversionOperatorMemberCref(self, node: Syntax.ConversionOperatorMemberCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefBracketedParameterList(self, node: Syntax.CrefBracketedParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefParameter(self, node: Syntax.CrefParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefParameterList(self, node: Syntax.CrefParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDeclarationExpression(self, node: Syntax.DeclarationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDeclarationPattern(self, node: Syntax.DeclarationPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDefaultConstraint(self, node: Syntax.DefaultConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDefaultExpression(self, node: Syntax.DefaultExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDefaultSwitchLabel(self, node: Syntax.DefaultSwitchLabelSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDefineDirectiveTrivia(self, node: Syntax.DefineDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDelegateDeclaration(self, node: Syntax.DelegateDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDestructorDeclaration(self, node: Syntax.DestructorDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDiscardDesignation(self, node: Syntax.DiscardDesignationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDiscardPattern(self, node: Syntax.DiscardPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElementAccessExpression(self, node: Syntax.ElementAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElementBindingExpression(self, node: Syntax.ElementBindingExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElifDirectiveTrivia(self, node: Syntax.ElifDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseClause(self, node: Syntax.ElseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnumDeclaration(self, node: Syntax.EnumDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEqualsValueClause(self, node: Syntax.EqualsValueClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitErrorDirectiveTrivia(self, node: Syntax.ErrorDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEventDeclaration(self, node: Syntax.EventDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEventFieldDeclaration(self, node: Syntax.EventFieldDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExplicitInterfaceSpecifier(self, node: Syntax.ExplicitInterfaceSpecifierSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExpressionColon(self, node: Syntax.ExpressionColonSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExternAliasDirective(self, node: Syntax.ExternAliasDirectiveSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFileScopedNamespaceDeclaration(self, node: Syntax.FileScopedNamespaceDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFinallyClause(self, node: Syntax.FinallyClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFixedStatement(self, node: Syntax.FixedStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForEachVariableStatement(self, node: Syntax.ForEachVariableStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerCallingConvention(self, node: Syntax.FunctionPointerCallingConventionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerParameter(self, node: Syntax.FunctionPointerParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerParameterList(self, node: Syntax.FunctionPointerParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerType(self, node: Syntax.FunctionPointerTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConvention(self, node: Syntax.FunctionPointerUnmanagedCallingConventionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConventionList(self, node: Syntax.FunctionPointerUnmanagedCallingConventionListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGlobalStatement(self, node: Syntax.GlobalStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGotoStatement(self, node: Syntax.GotoStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGroupClause(self, node: Syntax.GroupClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplicitArrayCreationExpression(self, node: Syntax.ImplicitArrayCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplicitElementAccess(self, node: Syntax.ImplicitElementAccessSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplicitObjectCreationExpression(self, node: Syntax.ImplicitObjectCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplicitStackAllocArrayCreationExpression(self, node: Syntax.ImplicitStackAllocArrayCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIndexerDeclaration(self, node: Syntax.IndexerDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIndexerMemberCref(self, node: Syntax.IndexerMemberCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInitializerExpression(self, node: Syntax.InitializerExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterfaceDeclaration(self, node: Syntax.InterfaceDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIsPatternExpression(self, node: Syntax.IsPatternExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitJoinClause(self, node: Syntax.JoinClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitJoinIntoClause(self, node: Syntax.JoinIntoClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLabeledStatement(self, node: Syntax.LabeledStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLineDirectivePosition(self, node: Syntax.LineDirectivePositionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLineDirectiveTrivia(self, node: Syntax.LineDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLineSpanDirectiveTrivia(self, node: Syntax.LineSpanDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxList) -> CodeAnalysis.SyntaxList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxTokenList) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SeparatedSyntaxList) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def VisitListElement(self, element: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    def VisitListElement(self, node: TNode) -> TNode: ...
    @overload
    def VisitListPattern(self, node: Syntax.ListPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitListSeparator(self, separator: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLoadDirectiveTrivia(self, node: Syntax.LoadDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLocalFunctionStatement(self, node: Syntax.LocalFunctionStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLockStatement(self, node: Syntax.LockStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMakeRefExpression(self, node: Syntax.MakeRefExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMemberBindingExpression(self, node: Syntax.MemberBindingExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMethodDeclaration(self, node: Syntax.MethodDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNameColon(self, node: Syntax.NameColonSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNameEquals(self, node: Syntax.NameEqualsSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNameMemberCref(self, node: Syntax.NameMemberCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNamespaceDeclaration(self, node: Syntax.NamespaceDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNullableDirectiveTrivia(self, node: Syntax.NullableDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOmittedArraySizeExpression(self, node: Syntax.OmittedArraySizeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOmittedTypeArgument(self, node: Syntax.OmittedTypeArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOperatorDeclaration(self, node: Syntax.OperatorDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOperatorMemberCref(self, node: Syntax.OperatorMemberCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParenthesizedLambdaExpression(self, node: Syntax.ParenthesizedLambdaExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParenthesizedPattern(self, node: Syntax.ParenthesizedPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParenthesizedVariableDesignation(self, node: Syntax.ParenthesizedVariableDesignationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPointerType(self, node: Syntax.PointerTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPositionalPatternClause(self, node: Syntax.PositionalPatternClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPostfixUnaryExpression(self, node: Syntax.PostfixUnaryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPragmaChecksumDirectiveTrivia(self, node: Syntax.PragmaChecksumDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPragmaWarningDirectiveTrivia(self, node: Syntax.PragmaWarningDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPrefixUnaryExpression(self, node: Syntax.PrefixUnaryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPrimaryConstructorBaseType(self, node: Syntax.PrimaryConstructorBaseTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPropertyDeclaration(self, node: Syntax.PropertyDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPropertyPatternClause(self, node: Syntax.PropertyPatternClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQualifiedCref(self, node: Syntax.QualifiedCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQueryBody(self, node: Syntax.QueryBodySyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQueryContinuation(self, node: Syntax.QueryContinuationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRangeExpression(self, node: Syntax.RangeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRecordDeclaration(self, node: Syntax.RecordDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRecursivePattern(self, node: Syntax.RecursivePatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRefExpression(self, node: Syntax.RefExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRefType(self, node: Syntax.RefTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRefTypeExpression(self, node: Syntax.RefTypeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRefValueExpression(self, node: Syntax.RefValueExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRelationalPattern(self, node: Syntax.RelationalPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitScopedType(self, node: Syntax.ScopedTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitShebangDirectiveTrivia(self, node: Syntax.ShebangDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleBaseType(self, node: Syntax.SimpleBaseTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleLambdaExpression(self, node: Syntax.SimpleLambdaExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSingleVariableDesignation(self, node: Syntax.SingleVariableDesignationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSizeOfExpression(self, node: Syntax.SizeOfExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSlicePattern(self, node: Syntax.SlicePatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitStackAllocArrayCreationExpression(self, node: Syntax.StackAllocArrayCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitStructDeclaration(self, node: Syntax.StructDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSubpattern(self, node: Syntax.SubpatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSwitchExpression(self, node: Syntax.SwitchExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSwitchExpressionArm(self, node: Syntax.SwitchExpressionArmSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSwitchSection(self, node: Syntax.SwitchSectionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSwitchStatement(self, node: Syntax.SwitchStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitThisExpression(self, node: Syntax.ThisExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitThrowExpression(self, node: Syntax.ThrowExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitToken(self, token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def VisitTrivia(self, trivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTupleElement(self, node: Syntax.TupleElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeCref(self, node: Syntax.TypeCrefSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameterConstraintClause(self, node: Syntax.TypeParameterConstraintClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypePattern(self, node: Syntax.TypePatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUnaryPattern(self, node: Syntax.UnaryPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUndefDirectiveTrivia(self, node: Syntax.UndefDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUnsafeStatement(self, node: Syntax.UnsafeStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUsingDirective(self, node: Syntax.UsingDirectiveSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitVariableDeclaration(self, node: Syntax.VariableDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitVarPattern(self, node: Syntax.VarPatternSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWarningDirectiveTrivia(self, node: Syntax.WarningDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhenClause(self, node: Syntax.WhenClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWithExpression(self, node: Syntax.WithExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlTextAttribute(self, node: Syntax.XmlTextAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> CodeAnalysis.SyntaxNode: ...

class CSharpSyntaxTree(CodeAnalysis.SyntaxTree):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def Create(root: CSharpSyntaxNode, options: CSharpParseOptions, path: str, encoding: Text.Encoding) -> CodeAnalysis.SyntaxTree: ...
    @property
    def Options(self) -> CSharpParseOptions: ...
    @overload
    def GetChangedSpans(self, oldTree: CodeAnalysis.SyntaxTree) -> Generic.IList: ...
    @overload
    def GetChanges(self, oldTree: CodeAnalysis.SyntaxTree) -> Generic.IList: ...
    @overload
    def GetCompilationUnitRoot(self, cancellationToken: Threading.CancellationToken) -> Syntax.CompilationUnitSyntax: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, trivia: CodeAnalysis.SyntaxTrivia) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, token: CodeAnalysis.SyntaxToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, node: CodeAnalysis.SyntaxNode) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, nodeOrToken: CodeAnalysis.SyntaxNodeOrToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineMappings(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.FileLinePositionSpan: ...
    @overload
    def GetLineVisibility(self, position: int, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.LineVisibility: ...
    @overload
    def GetLocation(self, span: Text.TextSpan) -> CodeAnalysis.Location: ...
    @overload
    def GetMappedLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.FileLinePositionSpan: ...
    @overload
    def GetRoot(self, cancellationToken: Threading.CancellationToken) -> CSharpSyntaxNode: ...
    @overload
    def GetRootAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def HasHiddenRegions() -> bool: ...
    @overload
    def IsEquivalentTo(self, tree: CodeAnalysis.SyntaxTree, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def ParseText(text: Text.SourceText, options: CSharpParseOptions, path: str, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseText(text: str, options: CSharpParseOptions, path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    def TryGetRoot() -> (bool, CSharpSyntaxNode): ...
    @overload
    def WithChangedText(self, newText: Text.SourceText) -> CodeAnalysis.SyntaxTree: ...

class CSharpSyntaxVisitor(object):
    """    CSharpSyntaxVisitor[TResult]
    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> TResult: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> TResult: ...
    @overload
    def VisitAccessorDeclaration(self, node: Syntax.AccessorDeclarationSyntax) -> TResult: ...
    @overload
    def VisitAccessorList(self, node: Syntax.AccessorListSyntax) -> TResult: ...
    @overload
    def VisitAliasQualifiedName(self, node: Syntax.AliasQualifiedNameSyntax) -> TResult: ...
    @overload
    def VisitAnonymousMethodExpression(self, node: Syntax.AnonymousMethodExpressionSyntax) -> TResult: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitAnonymousObjectMemberDeclarator(self, node: Syntax.AnonymousObjectMemberDeclaratorSyntax) -> TResult: ...
    @overload
    def VisitArgument(self, node: Syntax.ArgumentSyntax) -> TResult: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> TResult: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> TResult: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> TResult: ...
    @overload
    def VisitArrowExpressionClause(self, node: Syntax.ArrowExpressionClauseSyntax) -> TResult: ...
    @overload
    def VisitAssignmentExpression(self, node: Syntax.AssignmentExpressionSyntax) -> TResult: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> TResult: ...
    @overload
    def VisitAttributeArgument(self, node: Syntax.AttributeArgumentSyntax) -> TResult: ...
    @overload
    def VisitAttributeArgumentList(self, node: Syntax.AttributeArgumentListSyntax) -> TResult: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> TResult: ...
    @overload
    def VisitAttributeTargetSpecifier(self, node: Syntax.AttributeTargetSpecifierSyntax) -> TResult: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> TResult: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitBaseExpression(self, node: Syntax.BaseExpressionSyntax) -> TResult: ...
    @overload
    def VisitBaseList(self, node: Syntax.BaseListSyntax) -> TResult: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> TResult: ...
    @overload
    def VisitBinaryPattern(self, node: Syntax.BinaryPatternSyntax) -> TResult: ...
    @overload
    def VisitBlock(self, node: Syntax.BlockSyntax) -> TResult: ...
    @overload
    def VisitBracketedArgumentList(self, node: Syntax.BracketedArgumentListSyntax) -> TResult: ...
    @overload
    def VisitBracketedParameterList(self, node: Syntax.BracketedParameterListSyntax) -> TResult: ...
    @overload
    def VisitBreakStatement(self, node: Syntax.BreakStatementSyntax) -> TResult: ...
    @overload
    def VisitCasePatternSwitchLabel(self, node: Syntax.CasePatternSwitchLabelSyntax) -> TResult: ...
    @overload
    def VisitCaseSwitchLabel(self, node: Syntax.CaseSwitchLabelSyntax) -> TResult: ...
    @overload
    def VisitCastExpression(self, node: Syntax.CastExpressionSyntax) -> TResult: ...
    @overload
    def VisitCatchClause(self, node: Syntax.CatchClauseSyntax) -> TResult: ...
    @overload
    def VisitCatchDeclaration(self, node: Syntax.CatchDeclarationSyntax) -> TResult: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> TResult: ...
    @overload
    def VisitCheckedExpression(self, node: Syntax.CheckedExpressionSyntax) -> TResult: ...
    @overload
    def VisitCheckedStatement(self, node: Syntax.CheckedStatementSyntax) -> TResult: ...
    @overload
    def VisitClassDeclaration(self, node: Syntax.ClassDeclarationSyntax) -> TResult: ...
    @overload
    def VisitClassOrStructConstraint(self, node: Syntax.ClassOrStructConstraintSyntax) -> TResult: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> TResult: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitConditionalExpression(self, node: Syntax.ConditionalExpressionSyntax) -> TResult: ...
    @overload
    def VisitConstantPattern(self, node: Syntax.ConstantPatternSyntax) -> TResult: ...
    @overload
    def VisitConstructorConstraint(self, node: Syntax.ConstructorConstraintSyntax) -> TResult: ...
    @overload
    def VisitConstructorDeclaration(self, node: Syntax.ConstructorDeclarationSyntax) -> TResult: ...
    @overload
    def VisitConstructorInitializer(self, node: Syntax.ConstructorInitializerSyntax) -> TResult: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> TResult: ...
    @overload
    def VisitConversionOperatorDeclaration(self, node: Syntax.ConversionOperatorDeclarationSyntax) -> TResult: ...
    @overload
    def VisitConversionOperatorMemberCref(self, node: Syntax.ConversionOperatorMemberCrefSyntax) -> TResult: ...
    @overload
    def VisitCrefBracketedParameterList(self, node: Syntax.CrefBracketedParameterListSyntax) -> TResult: ...
    @overload
    def VisitCrefParameter(self, node: Syntax.CrefParameterSyntax) -> TResult: ...
    @overload
    def VisitCrefParameterList(self, node: Syntax.CrefParameterListSyntax) -> TResult: ...
    @overload
    def VisitDeclarationExpression(self, node: Syntax.DeclarationExpressionSyntax) -> TResult: ...
    @overload
    def VisitDeclarationPattern(self, node: Syntax.DeclarationPatternSyntax) -> TResult: ...
    @overload
    def VisitDefaultConstraint(self, node: Syntax.DefaultConstraintSyntax) -> TResult: ...
    @overload
    def VisitDefaultExpression(self, node: Syntax.DefaultExpressionSyntax) -> TResult: ...
    @overload
    def VisitDefaultSwitchLabel(self, node: Syntax.DefaultSwitchLabelSyntax) -> TResult: ...
    @overload
    def VisitDefineDirectiveTrivia(self, node: Syntax.DefineDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitDelegateDeclaration(self, node: Syntax.DelegateDeclarationSyntax) -> TResult: ...
    @overload
    def VisitDestructorDeclaration(self, node: Syntax.DestructorDeclarationSyntax) -> TResult: ...
    @overload
    def VisitDiscardDesignation(self, node: Syntax.DiscardDesignationSyntax) -> TResult: ...
    @overload
    def VisitDiscardPattern(self, node: Syntax.DiscardPatternSyntax) -> TResult: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> TResult: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> TResult: ...
    @overload
    def VisitElementAccessExpression(self, node: Syntax.ElementAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitElementBindingExpression(self, node: Syntax.ElementBindingExpressionSyntax) -> TResult: ...
    @overload
    def VisitElifDirectiveTrivia(self, node: Syntax.ElifDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitElseClause(self, node: Syntax.ElseClauseSyntax) -> TResult: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> TResult: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEnumDeclaration(self, node: Syntax.EnumDeclarationSyntax) -> TResult: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> TResult: ...
    @overload
    def VisitEqualsValueClause(self, node: Syntax.EqualsValueClauseSyntax) -> TResult: ...
    @overload
    def VisitErrorDirectiveTrivia(self, node: Syntax.ErrorDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEventDeclaration(self, node: Syntax.EventDeclarationSyntax) -> TResult: ...
    @overload
    def VisitEventFieldDeclaration(self, node: Syntax.EventFieldDeclarationSyntax) -> TResult: ...
    @overload
    def VisitExplicitInterfaceSpecifier(self, node: Syntax.ExplicitInterfaceSpecifierSyntax) -> TResult: ...
    @overload
    def VisitExpressionColon(self, node: Syntax.ExpressionColonSyntax) -> TResult: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> TResult: ...
    @overload
    def VisitExternAliasDirective(self, node: Syntax.ExternAliasDirectiveSyntax) -> TResult: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> TResult: ...
    @overload
    def VisitFileScopedNamespaceDeclaration(self, node: Syntax.FileScopedNamespaceDeclarationSyntax) -> TResult: ...
    @overload
    def VisitFinallyClause(self, node: Syntax.FinallyClauseSyntax) -> TResult: ...
    @overload
    def VisitFixedStatement(self, node: Syntax.FixedStatementSyntax) -> TResult: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> TResult: ...
    @overload
    def VisitForEachVariableStatement(self, node: Syntax.ForEachVariableStatementSyntax) -> TResult: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> TResult: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerCallingConvention(self, node: Syntax.FunctionPointerCallingConventionSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerParameter(self, node: Syntax.FunctionPointerParameterSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerParameterList(self, node: Syntax.FunctionPointerParameterListSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerType(self, node: Syntax.FunctionPointerTypeSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConvention(self, node: Syntax.FunctionPointerUnmanagedCallingConventionSyntax) -> TResult: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConventionList(self, node: Syntax.FunctionPointerUnmanagedCallingConventionListSyntax) -> TResult: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> TResult: ...
    @overload
    def VisitGlobalStatement(self, node: Syntax.GlobalStatementSyntax) -> TResult: ...
    @overload
    def VisitGotoStatement(self, node: Syntax.GotoStatementSyntax) -> TResult: ...
    @overload
    def VisitGroupClause(self, node: Syntax.GroupClauseSyntax) -> TResult: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> TResult: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> TResult: ...
    @overload
    def VisitImplicitArrayCreationExpression(self, node: Syntax.ImplicitArrayCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitImplicitElementAccess(self, node: Syntax.ImplicitElementAccessSyntax) -> TResult: ...
    @overload
    def VisitImplicitObjectCreationExpression(self, node: Syntax.ImplicitObjectCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitImplicitStackAllocArrayCreationExpression(self, node: Syntax.ImplicitStackAllocArrayCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> TResult: ...
    @overload
    def VisitIndexerDeclaration(self, node: Syntax.IndexerDeclarationSyntax) -> TResult: ...
    @overload
    def VisitIndexerMemberCref(self, node: Syntax.IndexerMemberCrefSyntax) -> TResult: ...
    @overload
    def VisitInitializerExpression(self, node: Syntax.InitializerExpressionSyntax) -> TResult: ...
    @overload
    def VisitInterfaceDeclaration(self, node: Syntax.InterfaceDeclarationSyntax) -> TResult: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> TResult: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> TResult: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> TResult: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> TResult: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> TResult: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> TResult: ...
    @overload
    def VisitIsPatternExpression(self, node: Syntax.IsPatternExpressionSyntax) -> TResult: ...
    @overload
    def VisitJoinClause(self, node: Syntax.JoinClauseSyntax) -> TResult: ...
    @overload
    def VisitJoinIntoClause(self, node: Syntax.JoinIntoClauseSyntax) -> TResult: ...
    @overload
    def VisitLabeledStatement(self, node: Syntax.LabeledStatementSyntax) -> TResult: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> TResult: ...
    @overload
    def VisitLineDirectivePosition(self, node: Syntax.LineDirectivePositionSyntax) -> TResult: ...
    @overload
    def VisitLineDirectiveTrivia(self, node: Syntax.LineDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitLineSpanDirectiveTrivia(self, node: Syntax.LineSpanDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitListPattern(self, node: Syntax.ListPatternSyntax) -> TResult: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> TResult: ...
    @overload
    def VisitLoadDirectiveTrivia(self, node: Syntax.LoadDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> TResult: ...
    @overload
    def VisitLocalFunctionStatement(self, node: Syntax.LocalFunctionStatementSyntax) -> TResult: ...
    @overload
    def VisitLockStatement(self, node: Syntax.LockStatementSyntax) -> TResult: ...
    @overload
    def VisitMakeRefExpression(self, node: Syntax.MakeRefExpressionSyntax) -> TResult: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitMemberBindingExpression(self, node: Syntax.MemberBindingExpressionSyntax) -> TResult: ...
    @overload
    def VisitMethodDeclaration(self, node: Syntax.MethodDeclarationSyntax) -> TResult: ...
    @overload
    def VisitNameColon(self, node: Syntax.NameColonSyntax) -> TResult: ...
    @overload
    def VisitNameEquals(self, node: Syntax.NameEqualsSyntax) -> TResult: ...
    @overload
    def VisitNameMemberCref(self, node: Syntax.NameMemberCrefSyntax) -> TResult: ...
    @overload
    def VisitNamespaceDeclaration(self, node: Syntax.NamespaceDeclarationSyntax) -> TResult: ...
    @overload
    def VisitNullableDirectiveTrivia(self, node: Syntax.NullableDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> TResult: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitOmittedArraySizeExpression(self, node: Syntax.OmittedArraySizeExpressionSyntax) -> TResult: ...
    @overload
    def VisitOmittedTypeArgument(self, node: Syntax.OmittedTypeArgumentSyntax) -> TResult: ...
    @overload
    def VisitOperatorDeclaration(self, node: Syntax.OperatorDeclarationSyntax) -> TResult: ...
    @overload
    def VisitOperatorMemberCref(self, node: Syntax.OperatorMemberCrefSyntax) -> TResult: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> TResult: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> TResult: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> TResult: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> TResult: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> TResult: ...
    @overload
    def VisitParenthesizedLambdaExpression(self, node: Syntax.ParenthesizedLambdaExpressionSyntax) -> TResult: ...
    @overload
    def VisitParenthesizedPattern(self, node: Syntax.ParenthesizedPatternSyntax) -> TResult: ...
    @overload
    def VisitParenthesizedVariableDesignation(self, node: Syntax.ParenthesizedVariableDesignationSyntax) -> TResult: ...
    @overload
    def VisitPointerType(self, node: Syntax.PointerTypeSyntax) -> TResult: ...
    @overload
    def VisitPositionalPatternClause(self, node: Syntax.PositionalPatternClauseSyntax) -> TResult: ...
    @overload
    def VisitPostfixUnaryExpression(self, node: Syntax.PostfixUnaryExpressionSyntax) -> TResult: ...
    @overload
    def VisitPragmaChecksumDirectiveTrivia(self, node: Syntax.PragmaChecksumDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitPragmaWarningDirectiveTrivia(self, node: Syntax.PragmaWarningDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> TResult: ...
    @overload
    def VisitPrefixUnaryExpression(self, node: Syntax.PrefixUnaryExpressionSyntax) -> TResult: ...
    @overload
    def VisitPrimaryConstructorBaseType(self, node: Syntax.PrimaryConstructorBaseTypeSyntax) -> TResult: ...
    @overload
    def VisitPropertyDeclaration(self, node: Syntax.PropertyDeclarationSyntax) -> TResult: ...
    @overload
    def VisitPropertyPatternClause(self, node: Syntax.PropertyPatternClauseSyntax) -> TResult: ...
    @overload
    def VisitQualifiedCref(self, node: Syntax.QualifiedCrefSyntax) -> TResult: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> TResult: ...
    @overload
    def VisitQueryBody(self, node: Syntax.QueryBodySyntax) -> TResult: ...
    @overload
    def VisitQueryContinuation(self, node: Syntax.QueryContinuationSyntax) -> TResult: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> TResult: ...
    @overload
    def VisitRangeExpression(self, node: Syntax.RangeExpressionSyntax) -> TResult: ...
    @overload
    def VisitRecordDeclaration(self, node: Syntax.RecordDeclarationSyntax) -> TResult: ...
    @overload
    def VisitRecursivePattern(self, node: Syntax.RecursivePatternSyntax) -> TResult: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitRefExpression(self, node: Syntax.RefExpressionSyntax) -> TResult: ...
    @overload
    def VisitRefType(self, node: Syntax.RefTypeSyntax) -> TResult: ...
    @overload
    def VisitRefTypeExpression(self, node: Syntax.RefTypeExpressionSyntax) -> TResult: ...
    @overload
    def VisitRefValueExpression(self, node: Syntax.RefValueExpressionSyntax) -> TResult: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitRelationalPattern(self, node: Syntax.RelationalPatternSyntax) -> TResult: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> TResult: ...
    @overload
    def VisitScopedType(self, node: Syntax.ScopedTypeSyntax) -> TResult: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> TResult: ...
    @overload
    def VisitShebangDirectiveTrivia(self, node: Syntax.ShebangDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitSimpleBaseType(self, node: Syntax.SimpleBaseTypeSyntax) -> TResult: ...
    @overload
    def VisitSimpleLambdaExpression(self, node: Syntax.SimpleLambdaExpressionSyntax) -> TResult: ...
    @overload
    def VisitSingleVariableDesignation(self, node: Syntax.SingleVariableDesignationSyntax) -> TResult: ...
    @overload
    def VisitSizeOfExpression(self, node: Syntax.SizeOfExpressionSyntax) -> TResult: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> TResult: ...
    @overload
    def VisitSlicePattern(self, node: Syntax.SlicePatternSyntax) -> TResult: ...
    @overload
    def VisitStackAllocArrayCreationExpression(self, node: Syntax.StackAllocArrayCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitStructDeclaration(self, node: Syntax.StructDeclarationSyntax) -> TResult: ...
    @overload
    def VisitSubpattern(self, node: Syntax.SubpatternSyntax) -> TResult: ...
    @overload
    def VisitSwitchExpression(self, node: Syntax.SwitchExpressionSyntax) -> TResult: ...
    @overload
    def VisitSwitchExpressionArm(self, node: Syntax.SwitchExpressionArmSyntax) -> TResult: ...
    @overload
    def VisitSwitchSection(self, node: Syntax.SwitchSectionSyntax) -> TResult: ...
    @overload
    def VisitSwitchStatement(self, node: Syntax.SwitchStatementSyntax) -> TResult: ...
    @overload
    def VisitThisExpression(self, node: Syntax.ThisExpressionSyntax) -> TResult: ...
    @overload
    def VisitThrowExpression(self, node: Syntax.ThrowExpressionSyntax) -> TResult: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> TResult: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> TResult: ...
    @overload
    def VisitTupleElement(self, node: Syntax.TupleElementSyntax) -> TResult: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> TResult: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> TResult: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> TResult: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> TResult: ...
    @overload
    def VisitTypeCref(self, node: Syntax.TypeCrefSyntax) -> TResult: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> TResult: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> TResult: ...
    @overload
    def VisitTypeParameterConstraintClause(self, node: Syntax.TypeParameterConstraintClauseSyntax) -> TResult: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> TResult: ...
    @overload
    def VisitTypePattern(self, node: Syntax.TypePatternSyntax) -> TResult: ...
    @overload
    def VisitUnaryPattern(self, node: Syntax.UnaryPatternSyntax) -> TResult: ...
    @overload
    def VisitUndefDirectiveTrivia(self, node: Syntax.UndefDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitUnsafeStatement(self, node: Syntax.UnsafeStatementSyntax) -> TResult: ...
    @overload
    def VisitUsingDirective(self, node: Syntax.UsingDirectiveSyntax) -> TResult: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> TResult: ...
    @overload
    def VisitVariableDeclaration(self, node: Syntax.VariableDeclarationSyntax) -> TResult: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> TResult: ...
    @overload
    def VisitVarPattern(self, node: Syntax.VarPatternSyntax) -> TResult: ...
    @overload
    def VisitWarningDirectiveTrivia(self, node: Syntax.WarningDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitWhenClause(self, node: Syntax.WhenClauseSyntax) -> TResult: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> TResult: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> TResult: ...
    @overload
    def VisitWithExpression(self, node: Syntax.WithExpressionSyntax) -> TResult: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> TResult: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> TResult: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> TResult: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> TResult: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> TResult: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> TResult: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> TResult: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> TResult: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> TResult: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> TResult: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> TResult: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> TResult: ...
    @overload
    def VisitXmlTextAttribute(self, node: Syntax.XmlTextAttributeSyntax) -> TResult: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> TResult: ...

class CSharpSyntaxVisitor(object):
    """    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def VisitAccessorDeclaration(self, node: Syntax.AccessorDeclarationSyntax) -> None: ...
    @overload
    def VisitAccessorList(self, node: Syntax.AccessorListSyntax) -> None: ...
    @overload
    def VisitAliasQualifiedName(self, node: Syntax.AliasQualifiedNameSyntax) -> None: ...
    @overload
    def VisitAnonymousMethodExpression(self, node: Syntax.AnonymousMethodExpressionSyntax) -> None: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> None: ...
    @overload
    def VisitAnonymousObjectMemberDeclarator(self, node: Syntax.AnonymousObjectMemberDeclaratorSyntax) -> None: ...
    @overload
    def VisitArgument(self, node: Syntax.ArgumentSyntax) -> None: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> None: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> None: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> None: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> None: ...
    @overload
    def VisitArrowExpressionClause(self, node: Syntax.ArrowExpressionClauseSyntax) -> None: ...
    @overload
    def VisitAssignmentExpression(self, node: Syntax.AssignmentExpressionSyntax) -> None: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> None: ...
    @overload
    def VisitAttributeArgument(self, node: Syntax.AttributeArgumentSyntax) -> None: ...
    @overload
    def VisitAttributeArgumentList(self, node: Syntax.AttributeArgumentListSyntax) -> None: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> None: ...
    @overload
    def VisitAttributeTargetSpecifier(self, node: Syntax.AttributeTargetSpecifierSyntax) -> None: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> None: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitBaseExpression(self, node: Syntax.BaseExpressionSyntax) -> None: ...
    @overload
    def VisitBaseList(self, node: Syntax.BaseListSyntax) -> None: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> None: ...
    @overload
    def VisitBinaryPattern(self, node: Syntax.BinaryPatternSyntax) -> None: ...
    @overload
    def VisitBlock(self, node: Syntax.BlockSyntax) -> None: ...
    @overload
    def VisitBracketedArgumentList(self, node: Syntax.BracketedArgumentListSyntax) -> None: ...
    @overload
    def VisitBracketedParameterList(self, node: Syntax.BracketedParameterListSyntax) -> None: ...
    @overload
    def VisitBreakStatement(self, node: Syntax.BreakStatementSyntax) -> None: ...
    @overload
    def VisitCasePatternSwitchLabel(self, node: Syntax.CasePatternSwitchLabelSyntax) -> None: ...
    @overload
    def VisitCaseSwitchLabel(self, node: Syntax.CaseSwitchLabelSyntax) -> None: ...
    @overload
    def VisitCastExpression(self, node: Syntax.CastExpressionSyntax) -> None: ...
    @overload
    def VisitCatchClause(self, node: Syntax.CatchClauseSyntax) -> None: ...
    @overload
    def VisitCatchDeclaration(self, node: Syntax.CatchDeclarationSyntax) -> None: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> None: ...
    @overload
    def VisitCheckedExpression(self, node: Syntax.CheckedExpressionSyntax) -> None: ...
    @overload
    def VisitCheckedStatement(self, node: Syntax.CheckedStatementSyntax) -> None: ...
    @overload
    def VisitClassDeclaration(self, node: Syntax.ClassDeclarationSyntax) -> None: ...
    @overload
    def VisitClassOrStructConstraint(self, node: Syntax.ClassOrStructConstraintSyntax) -> None: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> None: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> None: ...
    @overload
    def VisitConditionalExpression(self, node: Syntax.ConditionalExpressionSyntax) -> None: ...
    @overload
    def VisitConstantPattern(self, node: Syntax.ConstantPatternSyntax) -> None: ...
    @overload
    def VisitConstructorConstraint(self, node: Syntax.ConstructorConstraintSyntax) -> None: ...
    @overload
    def VisitConstructorDeclaration(self, node: Syntax.ConstructorDeclarationSyntax) -> None: ...
    @overload
    def VisitConstructorInitializer(self, node: Syntax.ConstructorInitializerSyntax) -> None: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> None: ...
    @overload
    def VisitConversionOperatorDeclaration(self, node: Syntax.ConversionOperatorDeclarationSyntax) -> None: ...
    @overload
    def VisitConversionOperatorMemberCref(self, node: Syntax.ConversionOperatorMemberCrefSyntax) -> None: ...
    @overload
    def VisitCrefBracketedParameterList(self, node: Syntax.CrefBracketedParameterListSyntax) -> None: ...
    @overload
    def VisitCrefParameter(self, node: Syntax.CrefParameterSyntax) -> None: ...
    @overload
    def VisitCrefParameterList(self, node: Syntax.CrefParameterListSyntax) -> None: ...
    @overload
    def VisitDeclarationExpression(self, node: Syntax.DeclarationExpressionSyntax) -> None: ...
    @overload
    def VisitDeclarationPattern(self, node: Syntax.DeclarationPatternSyntax) -> None: ...
    @overload
    def VisitDefaultConstraint(self, node: Syntax.DefaultConstraintSyntax) -> None: ...
    @overload
    def VisitDefaultExpression(self, node: Syntax.DefaultExpressionSyntax) -> None: ...
    @overload
    def VisitDefaultSwitchLabel(self, node: Syntax.DefaultSwitchLabelSyntax) -> None: ...
    @overload
    def VisitDefineDirectiveTrivia(self, node: Syntax.DefineDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitDelegateDeclaration(self, node: Syntax.DelegateDeclarationSyntax) -> None: ...
    @overload
    def VisitDestructorDeclaration(self, node: Syntax.DestructorDeclarationSyntax) -> None: ...
    @overload
    def VisitDiscardDesignation(self, node: Syntax.DiscardDesignationSyntax) -> None: ...
    @overload
    def VisitDiscardPattern(self, node: Syntax.DiscardPatternSyntax) -> None: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> None: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> None: ...
    @overload
    def VisitElementAccessExpression(self, node: Syntax.ElementAccessExpressionSyntax) -> None: ...
    @overload
    def VisitElementBindingExpression(self, node: Syntax.ElementBindingExpressionSyntax) -> None: ...
    @overload
    def VisitElifDirectiveTrivia(self, node: Syntax.ElifDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitElseClause(self, node: Syntax.ElseClauseSyntax) -> None: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> None: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEnumDeclaration(self, node: Syntax.EnumDeclarationSyntax) -> None: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> None: ...
    @overload
    def VisitEqualsValueClause(self, node: Syntax.EqualsValueClauseSyntax) -> None: ...
    @overload
    def VisitErrorDirectiveTrivia(self, node: Syntax.ErrorDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEventDeclaration(self, node: Syntax.EventDeclarationSyntax) -> None: ...
    @overload
    def VisitEventFieldDeclaration(self, node: Syntax.EventFieldDeclarationSyntax) -> None: ...
    @overload
    def VisitExplicitInterfaceSpecifier(self, node: Syntax.ExplicitInterfaceSpecifierSyntax) -> None: ...
    @overload
    def VisitExpressionColon(self, node: Syntax.ExpressionColonSyntax) -> None: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> None: ...
    @overload
    def VisitExternAliasDirective(self, node: Syntax.ExternAliasDirectiveSyntax) -> None: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> None: ...
    @overload
    def VisitFileScopedNamespaceDeclaration(self, node: Syntax.FileScopedNamespaceDeclarationSyntax) -> None: ...
    @overload
    def VisitFinallyClause(self, node: Syntax.FinallyClauseSyntax) -> None: ...
    @overload
    def VisitFixedStatement(self, node: Syntax.FixedStatementSyntax) -> None: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> None: ...
    @overload
    def VisitForEachVariableStatement(self, node: Syntax.ForEachVariableStatementSyntax) -> None: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> None: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> None: ...
    @overload
    def VisitFunctionPointerCallingConvention(self, node: Syntax.FunctionPointerCallingConventionSyntax) -> None: ...
    @overload
    def VisitFunctionPointerParameter(self, node: Syntax.FunctionPointerParameterSyntax) -> None: ...
    @overload
    def VisitFunctionPointerParameterList(self, node: Syntax.FunctionPointerParameterListSyntax) -> None: ...
    @overload
    def VisitFunctionPointerType(self, node: Syntax.FunctionPointerTypeSyntax) -> None: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConvention(self, node: Syntax.FunctionPointerUnmanagedCallingConventionSyntax) -> None: ...
    @overload
    def VisitFunctionPointerUnmanagedCallingConventionList(self, node: Syntax.FunctionPointerUnmanagedCallingConventionListSyntax) -> None: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> None: ...
    @overload
    def VisitGlobalStatement(self, node: Syntax.GlobalStatementSyntax) -> None: ...
    @overload
    def VisitGotoStatement(self, node: Syntax.GotoStatementSyntax) -> None: ...
    @overload
    def VisitGroupClause(self, node: Syntax.GroupClauseSyntax) -> None: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> None: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> None: ...
    @overload
    def VisitImplicitArrayCreationExpression(self, node: Syntax.ImplicitArrayCreationExpressionSyntax) -> None: ...
    @overload
    def VisitImplicitElementAccess(self, node: Syntax.ImplicitElementAccessSyntax) -> None: ...
    @overload
    def VisitImplicitObjectCreationExpression(self, node: Syntax.ImplicitObjectCreationExpressionSyntax) -> None: ...
    @overload
    def VisitImplicitStackAllocArrayCreationExpression(self, node: Syntax.ImplicitStackAllocArrayCreationExpressionSyntax) -> None: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> None: ...
    @overload
    def VisitIndexerDeclaration(self, node: Syntax.IndexerDeclarationSyntax) -> None: ...
    @overload
    def VisitIndexerMemberCref(self, node: Syntax.IndexerMemberCrefSyntax) -> None: ...
    @overload
    def VisitInitializerExpression(self, node: Syntax.InitializerExpressionSyntax) -> None: ...
    @overload
    def VisitInterfaceDeclaration(self, node: Syntax.InterfaceDeclarationSyntax) -> None: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> None: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> None: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> None: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> None: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> None: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> None: ...
    @overload
    def VisitIsPatternExpression(self, node: Syntax.IsPatternExpressionSyntax) -> None: ...
    @overload
    def VisitJoinClause(self, node: Syntax.JoinClauseSyntax) -> None: ...
    @overload
    def VisitJoinIntoClause(self, node: Syntax.JoinIntoClauseSyntax) -> None: ...
    @overload
    def VisitLabeledStatement(self, node: Syntax.LabeledStatementSyntax) -> None: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> None: ...
    @overload
    def VisitLineDirectivePosition(self, node: Syntax.LineDirectivePositionSyntax) -> None: ...
    @overload
    def VisitLineDirectiveTrivia(self, node: Syntax.LineDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitLineSpanDirectiveTrivia(self, node: Syntax.LineSpanDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitListPattern(self, node: Syntax.ListPatternSyntax) -> None: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> None: ...
    @overload
    def VisitLoadDirectiveTrivia(self, node: Syntax.LoadDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> None: ...
    @overload
    def VisitLocalFunctionStatement(self, node: Syntax.LocalFunctionStatementSyntax) -> None: ...
    @overload
    def VisitLockStatement(self, node: Syntax.LockStatementSyntax) -> None: ...
    @overload
    def VisitMakeRefExpression(self, node: Syntax.MakeRefExpressionSyntax) -> None: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> None: ...
    @overload
    def VisitMemberBindingExpression(self, node: Syntax.MemberBindingExpressionSyntax) -> None: ...
    @overload
    def VisitMethodDeclaration(self, node: Syntax.MethodDeclarationSyntax) -> None: ...
    @overload
    def VisitNameColon(self, node: Syntax.NameColonSyntax) -> None: ...
    @overload
    def VisitNameEquals(self, node: Syntax.NameEqualsSyntax) -> None: ...
    @overload
    def VisitNameMemberCref(self, node: Syntax.NameMemberCrefSyntax) -> None: ...
    @overload
    def VisitNamespaceDeclaration(self, node: Syntax.NamespaceDeclarationSyntax) -> None: ...
    @overload
    def VisitNullableDirectiveTrivia(self, node: Syntax.NullableDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> None: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> None: ...
    @overload
    def VisitOmittedArraySizeExpression(self, node: Syntax.OmittedArraySizeExpressionSyntax) -> None: ...
    @overload
    def VisitOmittedTypeArgument(self, node: Syntax.OmittedTypeArgumentSyntax) -> None: ...
    @overload
    def VisitOperatorDeclaration(self, node: Syntax.OperatorDeclarationSyntax) -> None: ...
    @overload
    def VisitOperatorMemberCref(self, node: Syntax.OperatorMemberCrefSyntax) -> None: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> None: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> None: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> None: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> None: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> None: ...
    @overload
    def VisitParenthesizedLambdaExpression(self, node: Syntax.ParenthesizedLambdaExpressionSyntax) -> None: ...
    @overload
    def VisitParenthesizedPattern(self, node: Syntax.ParenthesizedPatternSyntax) -> None: ...
    @overload
    def VisitParenthesizedVariableDesignation(self, node: Syntax.ParenthesizedVariableDesignationSyntax) -> None: ...
    @overload
    def VisitPointerType(self, node: Syntax.PointerTypeSyntax) -> None: ...
    @overload
    def VisitPositionalPatternClause(self, node: Syntax.PositionalPatternClauseSyntax) -> None: ...
    @overload
    def VisitPostfixUnaryExpression(self, node: Syntax.PostfixUnaryExpressionSyntax) -> None: ...
    @overload
    def VisitPragmaChecksumDirectiveTrivia(self, node: Syntax.PragmaChecksumDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitPragmaWarningDirectiveTrivia(self, node: Syntax.PragmaWarningDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> None: ...
    @overload
    def VisitPrefixUnaryExpression(self, node: Syntax.PrefixUnaryExpressionSyntax) -> None: ...
    @overload
    def VisitPrimaryConstructorBaseType(self, node: Syntax.PrimaryConstructorBaseTypeSyntax) -> None: ...
    @overload
    def VisitPropertyDeclaration(self, node: Syntax.PropertyDeclarationSyntax) -> None: ...
    @overload
    def VisitPropertyPatternClause(self, node: Syntax.PropertyPatternClauseSyntax) -> None: ...
    @overload
    def VisitQualifiedCref(self, node: Syntax.QualifiedCrefSyntax) -> None: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> None: ...
    @overload
    def VisitQueryBody(self, node: Syntax.QueryBodySyntax) -> None: ...
    @overload
    def VisitQueryContinuation(self, node: Syntax.QueryContinuationSyntax) -> None: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> None: ...
    @overload
    def VisitRangeExpression(self, node: Syntax.RangeExpressionSyntax) -> None: ...
    @overload
    def VisitRecordDeclaration(self, node: Syntax.RecordDeclarationSyntax) -> None: ...
    @overload
    def VisitRecursivePattern(self, node: Syntax.RecursivePatternSyntax) -> None: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitRefExpression(self, node: Syntax.RefExpressionSyntax) -> None: ...
    @overload
    def VisitRefType(self, node: Syntax.RefTypeSyntax) -> None: ...
    @overload
    def VisitRefTypeExpression(self, node: Syntax.RefTypeExpressionSyntax) -> None: ...
    @overload
    def VisitRefValueExpression(self, node: Syntax.RefValueExpressionSyntax) -> None: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitRelationalPattern(self, node: Syntax.RelationalPatternSyntax) -> None: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> None: ...
    @overload
    def VisitScopedType(self, node: Syntax.ScopedTypeSyntax) -> None: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> None: ...
    @overload
    def VisitShebangDirectiveTrivia(self, node: Syntax.ShebangDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitSimpleBaseType(self, node: Syntax.SimpleBaseTypeSyntax) -> None: ...
    @overload
    def VisitSimpleLambdaExpression(self, node: Syntax.SimpleLambdaExpressionSyntax) -> None: ...
    @overload
    def VisitSingleVariableDesignation(self, node: Syntax.SingleVariableDesignationSyntax) -> None: ...
    @overload
    def VisitSizeOfExpression(self, node: Syntax.SizeOfExpressionSyntax) -> None: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> None: ...
    @overload
    def VisitSlicePattern(self, node: Syntax.SlicePatternSyntax) -> None: ...
    @overload
    def VisitStackAllocArrayCreationExpression(self, node: Syntax.StackAllocArrayCreationExpressionSyntax) -> None: ...
    @overload
    def VisitStructDeclaration(self, node: Syntax.StructDeclarationSyntax) -> None: ...
    @overload
    def VisitSubpattern(self, node: Syntax.SubpatternSyntax) -> None: ...
    @overload
    def VisitSwitchExpression(self, node: Syntax.SwitchExpressionSyntax) -> None: ...
    @overload
    def VisitSwitchExpressionArm(self, node: Syntax.SwitchExpressionArmSyntax) -> None: ...
    @overload
    def VisitSwitchSection(self, node: Syntax.SwitchSectionSyntax) -> None: ...
    @overload
    def VisitSwitchStatement(self, node: Syntax.SwitchStatementSyntax) -> None: ...
    @overload
    def VisitThisExpression(self, node: Syntax.ThisExpressionSyntax) -> None: ...
    @overload
    def VisitThrowExpression(self, node: Syntax.ThrowExpressionSyntax) -> None: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> None: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> None: ...
    @overload
    def VisitTupleElement(self, node: Syntax.TupleElementSyntax) -> None: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> None: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> None: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> None: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> None: ...
    @overload
    def VisitTypeCref(self, node: Syntax.TypeCrefSyntax) -> None: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> None: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> None: ...
    @overload
    def VisitTypeParameterConstraintClause(self, node: Syntax.TypeParameterConstraintClauseSyntax) -> None: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> None: ...
    @overload
    def VisitTypePattern(self, node: Syntax.TypePatternSyntax) -> None: ...
    @overload
    def VisitUnaryPattern(self, node: Syntax.UnaryPatternSyntax) -> None: ...
    @overload
    def VisitUndefDirectiveTrivia(self, node: Syntax.UndefDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitUnsafeStatement(self, node: Syntax.UnsafeStatementSyntax) -> None: ...
    @overload
    def VisitUsingDirective(self, node: Syntax.UsingDirectiveSyntax) -> None: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> None: ...
    @overload
    def VisitVariableDeclaration(self, node: Syntax.VariableDeclarationSyntax) -> None: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> None: ...
    @overload
    def VisitVarPattern(self, node: Syntax.VarPatternSyntax) -> None: ...
    @overload
    def VisitWarningDirectiveTrivia(self, node: Syntax.WarningDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitWhenClause(self, node: Syntax.WhenClauseSyntax) -> None: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> None: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> None: ...
    @overload
    def VisitWithExpression(self, node: Syntax.WithExpressionSyntax) -> None: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> None: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> None: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> None: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> None: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> None: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> None: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> None: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> None: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> None: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> None: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> None: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> None: ...
    @overload
    def VisitXmlTextAttribute(self, node: Syntax.XmlTextAttributeSyntax) -> None: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> None: ...

class CSharpSyntaxWalker(CSharpSyntaxVisitor):
    """    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def VisitLeadingTrivia(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitToken(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitTrailingTrivia(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitTrivia(self, trivia: CodeAnalysis.SyntaxTrivia) -> None: ...

class SyntaxExtensions(object):
    """    """
    @overload
    @staticmethod
    def NormalizeWhitespace(token: CodeAnalysis.SyntaxToken, indentation: str, elasticTrivia: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(list_: CodeAnalysis.SyntaxTriviaList, indentation: str, elasticTrivia: bool) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(token: CodeAnalysis.SyntaxToken, indentation: str, eol: str, elasticTrivia: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(list_: CodeAnalysis.SyntaxTriviaList, indentation: str, eol: str, elasticTrivia: bool) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ToSyntaxTriviaList(sequence: Generic.IEnumerable) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def Update(syntax: Syntax.IndexerDeclarationSyntax, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, thisKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.BracketedParameterListSyntax, accessorList: Syntax.AccessorListSyntax) -> Syntax.IndexerDeclarationSyntax: ...
    @overload
    @staticmethod
    def Update(syntax: Syntax.OperatorDeclarationSyntax, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, block: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorDeclarationSyntax: ...
    @overload
    @staticmethod
    def Update(syntax: Syntax.MethodDeclarationSyntax, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: Syntax.TypeSyntax, explicitInterfaceSpecifier: Syntax.ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, block: Syntax.BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> Syntax.MethodDeclarationSyntax: ...
    @overload
    @staticmethod
    def WithIdentifier(simpleName: Syntax.SimpleNameSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.SimpleNameSyntax: ...

class SyntaxKind(enum.Enum):
    None_ = 0
    List = 1
    TildeToken = 8193
    ExclamationToken = 8194
    DollarToken = 8195
    PercentToken = 8196
    CaretToken = 8197
    AmpersandToken = 8198
    AsteriskToken = 8199
    OpenParenToken = 8200
    CloseParenToken = 8201
    MinusToken = 8202
    PlusToken = 8203
    EqualsToken = 8204
    OpenBraceToken = 8205
    CloseBraceToken = 8206
    OpenBracketToken = 8207
    CloseBracketToken = 8208
    BarToken = 8209
    BackslashToken = 8210
    ColonToken = 8211
    SemicolonToken = 8212
    DoubleQuoteToken = 8213
    SingleQuoteToken = 8214
    LessThanToken = 8215
    CommaToken = 8216
    GreaterThanToken = 8217
    DotToken = 8218
    QuestionToken = 8219
    HashToken = 8220
    SlashToken = 8221
    DotDotToken = 8222
    SlashGreaterThanToken = 8232
    LessThanSlashToken = 8233
    XmlCommentStartToken = 8234
    XmlCommentEndToken = 8235
    XmlCDataStartToken = 8236
    XmlCDataEndToken = 8237
    XmlProcessingInstructionStartToken = 8238
    XmlProcessingInstructionEndToken = 8239
    BarBarToken = 8260
    AmpersandAmpersandToken = 8261
    MinusMinusToken = 8262
    PlusPlusToken = 8263
    ColonColonToken = 8264
    QuestionQuestionToken = 8265
    MinusGreaterThanToken = 8266
    ExclamationEqualsToken = 8267
    EqualsEqualsToken = 8268
    EqualsGreaterThanToken = 8269
    LessThanEqualsToken = 8270
    LessThanLessThanToken = 8271
    LessThanLessThanEqualsToken = 8272
    GreaterThanEqualsToken = 8273
    GreaterThanGreaterThanToken = 8274
    GreaterThanGreaterThanEqualsToken = 8275
    SlashEqualsToken = 8276
    AsteriskEqualsToken = 8277
    BarEqualsToken = 8278
    AmpersandEqualsToken = 8279
    PlusEqualsToken = 8280
    MinusEqualsToken = 8281
    CaretEqualsToken = 8282
    PercentEqualsToken = 8283
    QuestionQuestionEqualsToken = 8284
    GreaterThanGreaterThanGreaterThanToken = 8286
    GreaterThanGreaterThanGreaterThanEqualsToken = 8287
    BoolKeyword = 8304
    ByteKeyword = 8305
    SByteKeyword = 8306
    ShortKeyword = 8307
    UShortKeyword = 8308
    IntKeyword = 8309
    UIntKeyword = 8310
    LongKeyword = 8311
    ULongKeyword = 8312
    DoubleKeyword = 8313
    FloatKeyword = 8314
    DecimalKeyword = 8315
    StringKeyword = 8316
    CharKeyword = 8317
    VoidKeyword = 8318
    ObjectKeyword = 8319
    TypeOfKeyword = 8320
    SizeOfKeyword = 8321
    NullKeyword = 8322
    TrueKeyword = 8323
    FalseKeyword = 8324
    IfKeyword = 8325
    ElseKeyword = 8326
    WhileKeyword = 8327
    ForKeyword = 8328
    ForEachKeyword = 8329
    DoKeyword = 8330
    SwitchKeyword = 8331
    CaseKeyword = 8332
    DefaultKeyword = 8333
    TryKeyword = 8334
    CatchKeyword = 8335
    FinallyKeyword = 8336
    LockKeyword = 8337
    GotoKeyword = 8338
    BreakKeyword = 8339
    ContinueKeyword = 8340
    ReturnKeyword = 8341
    ThrowKeyword = 8342
    PublicKeyword = 8343
    PrivateKeyword = 8344
    InternalKeyword = 8345
    ProtectedKeyword = 8346
    StaticKeyword = 8347
    ReadOnlyKeyword = 8348
    SealedKeyword = 8349
    ConstKeyword = 8350
    FixedKeyword = 8351
    StackAllocKeyword = 8352
    VolatileKeyword = 8353
    NewKeyword = 8354
    OverrideKeyword = 8355
    AbstractKeyword = 8356
    VirtualKeyword = 8357
    EventKeyword = 8358
    ExternKeyword = 8359
    RefKeyword = 8360
    OutKeyword = 8361
    InKeyword = 8362
    IsKeyword = 8363
    AsKeyword = 8364
    ParamsKeyword = 8365
    ArgListKeyword = 8366
    MakeRefKeyword = 8367
    RefTypeKeyword = 8368
    RefValueKeyword = 8369
    ThisKeyword = 8370
    BaseKeyword = 8371
    NamespaceKeyword = 8372
    UsingKeyword = 8373
    ClassKeyword = 8374
    StructKeyword = 8375
    InterfaceKeyword = 8376
    EnumKeyword = 8377
    DelegateKeyword = 8378
    CheckedKeyword = 8379
    UncheckedKeyword = 8380
    UnsafeKeyword = 8381
    OperatorKeyword = 8382
    ExplicitKeyword = 8383
    ImplicitKeyword = 8384
    YieldKeyword = 8405
    PartialKeyword = 8406
    AliasKeyword = 8407
    GlobalKeyword = 8408
    AssemblyKeyword = 8409
    ModuleKeyword = 8410
    TypeKeyword = 8411
    FieldKeyword = 8412
    MethodKeyword = 8413
    ParamKeyword = 8414
    PropertyKeyword = 8415
    TypeVarKeyword = 8416
    GetKeyword = 8417
    SetKeyword = 8418
    AddKeyword = 8419
    RemoveKeyword = 8420
    WhereKeyword = 8421
    FromKeyword = 8422
    GroupKeyword = 8423
    JoinKeyword = 8424
    IntoKeyword = 8425
    LetKeyword = 8426
    ByKeyword = 8427
    SelectKeyword = 8428
    OrderByKeyword = 8429
    OnKeyword = 8430
    EqualsKeyword = 8431
    AscendingKeyword = 8432
    DescendingKeyword = 8433
    NameOfKeyword = 8434
    AsyncKeyword = 8435
    AwaitKeyword = 8436
    WhenKeyword = 8437
    OrKeyword = 8438
    AndKeyword = 8439
    NotKeyword = 8440
    WithKeyword = 8442
    InitKeyword = 8443
    RecordKeyword = 8444
    ManagedKeyword = 8445
    UnmanagedKeyword = 8446
    RequiredKeyword = 8447
    ScopedKeyword = 8448
    FileKeyword = 8449
    ElifKeyword = 8467
    EndIfKeyword = 8468
    RegionKeyword = 8469
    EndRegionKeyword = 8470
    DefineKeyword = 8471
    UndefKeyword = 8472
    WarningKeyword = 8473
    ErrorKeyword = 8474
    LineKeyword = 8475
    PragmaKeyword = 8476
    HiddenKeyword = 8477
    ChecksumKeyword = 8478
    DisableKeyword = 8479
    RestoreKeyword = 8480
    ReferenceKeyword = 8481
    InterpolatedStringStartToken = 8482
    InterpolatedStringEndToken = 8483
    InterpolatedVerbatimStringStartToken = 8484
    LoadKeyword = 8485
    NullableKeyword = 8486
    EnableKeyword = 8487
    WarningsKeyword = 8488
    AnnotationsKeyword = 8489
    VarKeyword = 8490
    UnderscoreToken = 8491
    OmittedTypeArgumentToken = 8492
    OmittedArraySizeExpressionToken = 8493
    EndOfDirectiveToken = 8494
    EndOfDocumentationCommentToken = 8495
    EndOfFileToken = 8496
    BadToken = 8507
    IdentifierToken = 8508
    NumericLiteralToken = 8509
    CharacterLiteralToken = 8510
    StringLiteralToken = 8511
    XmlEntityLiteralToken = 8512
    XmlTextLiteralToken = 8513
    XmlTextLiteralNewLineToken = 8514
    InterpolatedStringToken = 8515
    InterpolatedStringTextToken = 8517
    SingleLineRawStringLiteralToken = 8518
    MultiLineRawStringLiteralToken = 8519
    Utf8StringLiteralToken = 8520
    Utf8SingleLineRawStringLiteralToken = 8521
    Utf8MultiLineRawStringLiteralToken = 8522
    EndOfLineTrivia = 8539
    WhitespaceTrivia = 8540
    SingleLineCommentTrivia = 8541
    MultiLineCommentTrivia = 8542
    DocumentationCommentExteriorTrivia = 8543
    SingleLineDocumentationCommentTrivia = 8544
    MultiLineDocumentationCommentTrivia = 8545
    DisabledTextTrivia = 8546
    PreprocessingMessageTrivia = 8547
    IfDirectiveTrivia = 8548
    ElifDirectiveTrivia = 8549
    ElseDirectiveTrivia = 8550
    EndIfDirectiveTrivia = 8551
    RegionDirectiveTrivia = 8552
    EndRegionDirectiveTrivia = 8553
    DefineDirectiveTrivia = 8554
    UndefDirectiveTrivia = 8555
    ErrorDirectiveTrivia = 8556
    WarningDirectiveTrivia = 8557
    LineDirectiveTrivia = 8558
    PragmaWarningDirectiveTrivia = 8559
    PragmaChecksumDirectiveTrivia = 8560
    ReferenceDirectiveTrivia = 8561
    BadDirectiveTrivia = 8562
    SkippedTokensTrivia = 8563
    ConflictMarkerTrivia = 8564
    XmlElement = 8574
    XmlElementStartTag = 8575
    XmlElementEndTag = 8576
    XmlEmptyElement = 8577
    XmlTextAttribute = 8578
    XmlCrefAttribute = 8579
    XmlNameAttribute = 8580
    XmlName = 8581
    XmlPrefix = 8582
    XmlText = 8583
    XmlCDataSection = 8584
    XmlComment = 8585
    XmlProcessingInstruction = 8586
    TypeCref = 8597
    QualifiedCref = 8598
    NameMemberCref = 8599
    IndexerMemberCref = 8600
    OperatorMemberCref = 8601
    ConversionOperatorMemberCref = 8602
    CrefParameterList = 8603
    CrefBracketedParameterList = 8604
    CrefParameter = 8605
    IdentifierName = 8616
    QualifiedName = 8617
    GenericName = 8618
    TypeArgumentList = 8619
    AliasQualifiedName = 8620
    PredefinedType = 8621
    ArrayType = 8622
    ArrayRankSpecifier = 8623
    PointerType = 8624
    NullableType = 8625
    OmittedTypeArgument = 8626
    ParenthesizedExpression = 8632
    ConditionalExpression = 8633
    InvocationExpression = 8634
    ElementAccessExpression = 8635
    ArgumentList = 8636
    BracketedArgumentList = 8637
    Argument = 8638
    NameColon = 8639
    CastExpression = 8640
    AnonymousMethodExpression = 8641
    SimpleLambdaExpression = 8642
    ParenthesizedLambdaExpression = 8643
    ObjectInitializerExpression = 8644
    CollectionInitializerExpression = 8645
    ArrayInitializerExpression = 8646
    AnonymousObjectMemberDeclarator = 8647
    ComplexElementInitializerExpression = 8648
    ObjectCreationExpression = 8649
    AnonymousObjectCreationExpression = 8650
    ArrayCreationExpression = 8651
    ImplicitArrayCreationExpression = 8652
    StackAllocArrayCreationExpression = 8653
    OmittedArraySizeExpression = 8654
    InterpolatedStringExpression = 8655
    ImplicitElementAccess = 8656
    IsPatternExpression = 8657
    RangeExpression = 8658
    ImplicitObjectCreationExpression = 8659
    AddExpression = 8668
    SubtractExpression = 8669
    MultiplyExpression = 8670
    DivideExpression = 8671
    ModuloExpression = 8672
    LeftShiftExpression = 8673
    RightShiftExpression = 8674
    LogicalOrExpression = 8675
    LogicalAndExpression = 8676
    BitwiseOrExpression = 8677
    BitwiseAndExpression = 8678
    ExclusiveOrExpression = 8679
    EqualsExpression = 8680
    NotEqualsExpression = 8681
    LessThanExpression = 8682
    LessThanOrEqualExpression = 8683
    GreaterThanExpression = 8684
    GreaterThanOrEqualExpression = 8685
    IsExpression = 8686
    AsExpression = 8687
    CoalesceExpression = 8688
    SimpleMemberAccessExpression = 8689
    PointerMemberAccessExpression = 8690
    ConditionalAccessExpression = 8691
    UnsignedRightShiftExpression = 8692
    MemberBindingExpression = 8707
    ElementBindingExpression = 8708
    SimpleAssignmentExpression = 8714
    AddAssignmentExpression = 8715
    SubtractAssignmentExpression = 8716
    MultiplyAssignmentExpression = 8717
    DivideAssignmentExpression = 8718
    ModuloAssignmentExpression = 8719
    AndAssignmentExpression = 8720
    ExclusiveOrAssignmentExpression = 8721
    OrAssignmentExpression = 8722
    LeftShiftAssignmentExpression = 8723
    RightShiftAssignmentExpression = 8724
    CoalesceAssignmentExpression = 8725
    UnsignedRightShiftAssignmentExpression = 8726
    UnaryPlusExpression = 8730
    UnaryMinusExpression = 8731
    BitwiseNotExpression = 8732
    LogicalNotExpression = 8733
    PreIncrementExpression = 8734
    PreDecrementExpression = 8735
    PointerIndirectionExpression = 8736
    AddressOfExpression = 8737
    PostIncrementExpression = 8738
    PostDecrementExpression = 8739
    AwaitExpression = 8740
    IndexExpression = 8741
    ThisExpression = 8746
    BaseExpression = 8747
    ArgListExpression = 8748
    NumericLiteralExpression = 8749
    StringLiteralExpression = 8750
    CharacterLiteralExpression = 8751
    TrueLiteralExpression = 8752
    FalseLiteralExpression = 8753
    NullLiteralExpression = 8754
    DefaultLiteralExpression = 8755
    Utf8StringLiteralExpression = 8756
    TypeOfExpression = 8760
    SizeOfExpression = 8761
    CheckedExpression = 8762
    UncheckedExpression = 8763
    DefaultExpression = 8764
    MakeRefExpression = 8765
    RefValueExpression = 8766
    RefTypeExpression = 8767
    QueryExpression = 8774
    QueryBody = 8775
    FromClause = 8776
    LetClause = 8777
    JoinClause = 8778
    JoinIntoClause = 8779
    WhereClause = 8780
    OrderByClause = 8781
    AscendingOrdering = 8782
    DescendingOrdering = 8783
    SelectClause = 8784
    GroupClause = 8785
    QueryContinuation = 8786
    Block = 8792
    LocalDeclarationStatement = 8793
    VariableDeclaration = 8794
    VariableDeclarator = 8795
    EqualsValueClause = 8796
    ExpressionStatement = 8797
    EmptyStatement = 8798
    LabeledStatement = 8799
    GotoStatement = 8800
    GotoCaseStatement = 8801
    GotoDefaultStatement = 8802
    BreakStatement = 8803
    ContinueStatement = 8804
    ReturnStatement = 8805
    YieldReturnStatement = 8806
    YieldBreakStatement = 8807
    ThrowStatement = 8808
    WhileStatement = 8809
    DoStatement = 8810
    ForStatement = 8811
    ForEachStatement = 8812
    UsingStatement = 8813
    FixedStatement = 8814
    CheckedStatement = 8815
    UncheckedStatement = 8816
    UnsafeStatement = 8817
    LockStatement = 8818
    IfStatement = 8819
    ElseClause = 8820
    SwitchStatement = 8821
    SwitchSection = 8822
    CaseSwitchLabel = 8823
    DefaultSwitchLabel = 8824
    TryStatement = 8825
    CatchClause = 8826
    CatchDeclaration = 8827
    CatchFilterClause = 8828
    FinallyClause = 8829
    LocalFunctionStatement = 8830
    CompilationUnit = 8840
    GlobalStatement = 8841
    NamespaceDeclaration = 8842
    UsingDirective = 8843
    ExternAliasDirective = 8844
    FileScopedNamespaceDeclaration = 8845
    AttributeList = 8847
    AttributeTargetSpecifier = 8848
    Attribute = 8849
    AttributeArgumentList = 8850
    AttributeArgument = 8851
    NameEquals = 8852
    ClassDeclaration = 8855
    StructDeclaration = 8856
    InterfaceDeclaration = 8857
    EnumDeclaration = 8858
    DelegateDeclaration = 8859
    BaseList = 8864
    SimpleBaseType = 8865
    TypeParameterConstraintClause = 8866
    ConstructorConstraint = 8867
    ClassConstraint = 8868
    StructConstraint = 8869
    TypeConstraint = 8870
    ExplicitInterfaceSpecifier = 8871
    EnumMemberDeclaration = 8872
    FieldDeclaration = 8873
    EventFieldDeclaration = 8874
    MethodDeclaration = 8875
    OperatorDeclaration = 8876
    ConversionOperatorDeclaration = 8877
    ConstructorDeclaration = 8878
    BaseConstructorInitializer = 8889
    ThisConstructorInitializer = 8890
    DestructorDeclaration = 8891
    PropertyDeclaration = 8892
    EventDeclaration = 8893
    IndexerDeclaration = 8894
    AccessorList = 8895
    GetAccessorDeclaration = 8896
    SetAccessorDeclaration = 8897
    AddAccessorDeclaration = 8898
    RemoveAccessorDeclaration = 8899
    UnknownAccessorDeclaration = 8900
    ParameterList = 8906
    BracketedParameterList = 8907
    Parameter = 8908
    TypeParameterList = 8909
    TypeParameter = 8910
    IncompleteMember = 8916
    ArrowExpressionClause = 8917
    Interpolation = 8918
    InterpolatedStringText = 8919
    InterpolationAlignmentClause = 8920
    InterpolationFormatClause = 8921
    ShebangDirectiveTrivia = 8922
    LoadDirectiveTrivia = 8923
    TupleType = 8924
    TupleElement = 8925
    TupleExpression = 8926
    SingleVariableDesignation = 8927
    ParenthesizedVariableDesignation = 8928
    ForEachVariableStatement = 8929
    DeclarationPattern = 9000
    ConstantPattern = 9002
    CasePatternSwitchLabel = 9009
    WhenClause = 9013
    DiscardDesignation = 9014
    RecursivePattern = 9020
    PropertyPatternClause = 9021
    Subpattern = 9022
    PositionalPatternClause = 9023
    DiscardPattern = 9024
    SwitchExpression = 9025
    SwitchExpressionArm = 9026
    VarPattern = 9027
    ParenthesizedPattern = 9028
    RelationalPattern = 9029
    TypePattern = 9030
    OrPattern = 9031
    AndPattern = 9032
    NotPattern = 9033
    SlicePattern = 9034
    ListPattern = 9035
    DeclarationExpression = 9040
    RefExpression = 9050
    RefType = 9051
    ThrowExpression = 9052
    ImplicitStackAllocArrayCreationExpression = 9053
    SuppressNullableWarningExpression = 9054
    NullableDirectiveTrivia = 9055
    FunctionPointerType = 9056
    FunctionPointerParameter = 9057
    FunctionPointerParameterList = 9058
    FunctionPointerCallingConvention = 9059
    InitAccessorDeclaration = 9060
    WithExpression = 9061
    WithInitializerExpression = 9062
    RecordDeclaration = 9063
    DefaultConstraint = 9064
    PrimaryConstructorBaseType = 9065
    FunctionPointerUnmanagedCallingConventionList = 9066
    FunctionPointerUnmanagedCallingConvention = 9067
    RecordStructDeclaration = 9068
    ExpressionColon = 9069
    LineDirectivePosition = 9070
    LineSpanDirectiveTrivia = 9071
    InterpolatedSingleLineRawStringStartToken = 9072
    InterpolatedMultiLineRawStringStartToken = 9073
    InterpolatedRawStringEndToken = 9074
    ScopedType = 9075

# endregion
