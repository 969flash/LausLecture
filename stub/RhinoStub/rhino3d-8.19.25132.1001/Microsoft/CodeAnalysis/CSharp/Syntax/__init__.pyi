"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AliasQualifiedNameSyntax", "AnonymousFunctionExpressionSyntax", "AnonymousMethodExpressionSyntax", "ArgumentSyntax", "ArrayRankSpecifierSyntax", "AttributeSyntax", "AttributeTargetSpecifierSyntax", "BaseFieldDeclarationSyntax", "BaseMethodDeclarationSyntax", "BasePropertyDeclarationSyntax", "BlockSyntax", "BreakStatementSyntax", "CheckedStatementSyntax", "ClassDeclarationSyntax", "ClassOrStructConstraintSyntax", "CompilationUnitSyntax", "ConstructorDeclarationSyntax", "ContinueStatementSyntax", "ConversionOperatorDeclarationSyntax", "ConversionOperatorMemberCrefSyntax", "CrefParameterSyntax", "LocalDeclarationStatementSyntax", "DelegateDeclarationSyntax", "DestructorDeclarationSyntax", "DirectiveTriviaSyntax", "DoStatementSyntax", "EmptyStatementSyntax", "EnumMemberDeclarationSyntax", "EventDeclarationSyntax", "ExpressionStatementSyntax", "FixedStatementSyntax", "ForEachStatementSyntax", "ForEachVariableStatementSyntax", "ForStatementSyntax", "GenericNameSyntax", "GlobalStatementSyntax", "GotoStatementSyntax", "IdentifierNameSyntax", "IfStatementSyntax", "IndexerDeclarationSyntax", "InterfaceDeclarationSyntax", "LabeledStatementSyntax", "LambdaExpressionSyntax", "LocalFunctionStatementSyntax", "LockStatementSyntax", "MethodDeclarationSyntax", "NameColonSyntax", "NamespaceDeclarationSyntax", "NameSyntax", "OperatorDeclarationSyntax", "OperatorMemberCrefSyntax", "ParameterListSyntax", "ParameterSyntax", "ParenthesizedLambdaExpressionSyntax", "PropertyDeclarationSyntax", "AccessorDeclarationSyntax", "QualifiedNameSyntax", "RecordDeclarationSyntax", "RefTypeSyntax", "ReturnStatementSyntax", "SimpleLambdaExpressionSyntax", "SimpleNameSyntax", "SkippedTokensTriviaSyntax", "StackAllocArrayCreationExpressionSyntax", "StructDeclarationSyntax", "StructuredTriviaSyntax", "SubpatternSyntax", "SwitchStatementSyntax", "ThrowStatementSyntax", "TryStatementSyntax", "TypeDeclarationSyntax", "TypeSyntax", "UnsafeStatementSyntax", "UsingDirectiveSyntax", "UsingStatementSyntax", "WhileStatementSyntax", "XmlNameAttributeElementKind", "YieldStatementSyntax", "TypeArgumentListSyntax", "PredefinedTypeSyntax", "ArrayTypeSyntax", "PointerTypeSyntax", "FunctionPointerTypeSyntax", "FunctionPointerParameterListSyntax", "FunctionPointerCallingConventionSyntax", "FunctionPointerUnmanagedCallingConventionListSyntax", "FunctionPointerUnmanagedCallingConventionSyntax", "NullableTypeSyntax", "TupleTypeSyntax", "TupleElementSyntax", "OmittedTypeArgumentSyntax", "ScopedTypeSyntax", "ExpressionOrPatternSyntax", "ExpressionSyntax", "ParenthesizedExpressionSyntax", "TupleExpressionSyntax", "PrefixUnaryExpressionSyntax", "AwaitExpressionSyntax", "PostfixUnaryExpressionSyntax", "MemberAccessExpressionSyntax", "ConditionalAccessExpressionSyntax", "MemberBindingExpressionSyntax", "ElementBindingExpressionSyntax", "RangeExpressionSyntax", "ImplicitElementAccessSyntax", "BinaryExpressionSyntax", "AssignmentExpressionSyntax", "ConditionalExpressionSyntax", "InstanceExpressionSyntax", "ThisExpressionSyntax", "BaseExpressionSyntax", "LiteralExpressionSyntax", "MakeRefExpressionSyntax", "RefTypeExpressionSyntax", "RefValueExpressionSyntax", "CheckedExpressionSyntax", "DefaultExpressionSyntax", "TypeOfExpressionSyntax", "SizeOfExpressionSyntax", "InvocationExpressionSyntax", "ElementAccessExpressionSyntax", "BaseArgumentListSyntax", "ArgumentListSyntax", "BracketedArgumentListSyntax", "BaseExpressionColonSyntax", "ExpressionColonSyntax", "DeclarationExpressionSyntax", "CastExpressionSyntax", "RefExpressionSyntax", "InitializerExpressionSyntax", "BaseObjectCreationExpressionSyntax", "ImplicitObjectCreationExpressionSyntax", "ObjectCreationExpressionSyntax", "WithExpressionSyntax", "AnonymousObjectMemberDeclaratorSyntax", "AnonymousObjectCreationExpressionSyntax", "ArrayCreationExpressionSyntax", "ImplicitArrayCreationExpressionSyntax", "ImplicitStackAllocArrayCreationExpressionSyntax", "QueryClauseSyntax", "SelectOrGroupClauseSyntax", "QueryExpressionSyntax", "QueryBodySyntax", "FromClauseSyntax", "LetClauseSyntax", "JoinClauseSyntax", "JoinIntoClauseSyntax", "WhereClauseSyntax", "OrderByClauseSyntax", "OrderingSyntax", "SelectClauseSyntax", "GroupClauseSyntax", "QueryContinuationSyntax", "OmittedArraySizeExpressionSyntax", "InterpolatedStringExpressionSyntax", "IsPatternExpressionSyntax", "ThrowExpressionSyntax", "WhenClauseSyntax", "PatternSyntax", "DiscardPatternSyntax", "DeclarationPatternSyntax", "VarPatternSyntax", "RecursivePatternSyntax", "PositionalPatternClauseSyntax", "PropertyPatternClauseSyntax", "ConstantPatternSyntax", "ParenthesizedPatternSyntax", "RelationalPatternSyntax", "TypePatternSyntax", "BinaryPatternSyntax", "UnaryPatternSyntax", "ListPatternSyntax", "SlicePatternSyntax", "InterpolatedStringContentSyntax", "InterpolatedStringTextSyntax", "InterpolationSyntax", "InterpolationAlignmentClauseSyntax", "InterpolationFormatClauseSyntax", "StatementSyntax", "VariableDeclarationSyntax", "VariableDeclaratorSyntax", "EqualsValueClauseSyntax", "VariableDesignationSyntax", "SingleVariableDesignationSyntax", "DiscardDesignationSyntax", "ParenthesizedVariableDesignationSyntax", "CommonForEachStatementSyntax", "ElseClauseSyntax", "SwitchSectionSyntax", "SwitchLabelSyntax", "CasePatternSwitchLabelSyntax", "CaseSwitchLabelSyntax", "DefaultSwitchLabelSyntax", "SwitchExpressionSyntax", "SwitchExpressionArmSyntax", "CatchClauseSyntax", "CatchDeclarationSyntax", "CatchFilterClauseSyntax", "FinallyClauseSyntax", "ExternAliasDirectiveSyntax", "MemberDeclarationSyntax", "BaseNamespaceDeclarationSyntax", "FileScopedNamespaceDeclarationSyntax", "AttributeListSyntax", "AttributeArgumentListSyntax", "AttributeArgumentSyntax", "NameEqualsSyntax", "TypeParameterListSyntax", "TypeParameterSyntax", "BaseTypeDeclarationSyntax", "EnumDeclarationSyntax", "BaseListSyntax", "BaseTypeSyntax", "SimpleBaseTypeSyntax", "PrimaryConstructorBaseTypeSyntax", "TypeParameterConstraintClauseSyntax", "TypeParameterConstraintSyntax", "ConstructorConstraintSyntax", "TypeConstraintSyntax", "DefaultConstraintSyntax", "FieldDeclarationSyntax", "EventFieldDeclarationSyntax", "ExplicitInterfaceSpecifierSyntax", "ConstructorInitializerSyntax", "ArrowExpressionClauseSyntax", "AccessorListSyntax", "BaseParameterListSyntax", "BracketedParameterListSyntax", "BaseParameterSyntax", "FunctionPointerParameterSyntax", "IncompleteMemberSyntax", "DocumentationCommentTriviaSyntax", "CrefSyntax", "TypeCrefSyntax", "QualifiedCrefSyntax", "MemberCrefSyntax", "NameMemberCrefSyntax", "IndexerMemberCrefSyntax", "BaseCrefParameterListSyntax", "CrefParameterListSyntax", "CrefBracketedParameterListSyntax", "XmlNodeSyntax", "XmlElementSyntax", "XmlElementStartTagSyntax", "XmlElementEndTagSyntax", "XmlEmptyElementSyntax", "XmlNameSyntax", "XmlPrefixSyntax", "XmlAttributeSyntax", "XmlTextAttributeSyntax", "XmlCrefAttributeSyntax", "XmlNameAttributeSyntax", "XmlTextSyntax", "XmlCDataSectionSyntax", "XmlProcessingInstructionSyntax", "XmlCommentSyntax", "BranchingDirectiveTriviaSyntax", "ConditionalDirectiveTriviaSyntax", "IfDirectiveTriviaSyntax", "ElifDirectiveTriviaSyntax", "ElseDirectiveTriviaSyntax", "EndIfDirectiveTriviaSyntax", "RegionDirectiveTriviaSyntax", "EndRegionDirectiveTriviaSyntax", "ErrorDirectiveTriviaSyntax", "WarningDirectiveTriviaSyntax", "BadDirectiveTriviaSyntax", "DefineDirectiveTriviaSyntax", "UndefDirectiveTriviaSyntax", "LineOrSpanDirectiveTriviaSyntax", "LineDirectiveTriviaSyntax", "LineDirectivePositionSyntax", "LineSpanDirectiveTriviaSyntax", "PragmaWarningDirectiveTriviaSyntax", "PragmaChecksumDirectiveTriviaSyntax", "ReferenceDirectiveTriviaSyntax", "LoadDirectiveTriviaSyntax", "ShebangDirectiveTriviaSyntax", "NullableDirectiveTriviaSyntax"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import CSharp
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis.CSharp, Version=4.6.0.0

class AliasQualifiedNameSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Alias(self) -> IdentifierNameSyntax: ...
    @property
    def ColonColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> SimpleNameSyntax: ...
    @overload
    def Update(self, alias: IdentifierNameSyntax, colonColonToken: CodeAnalysis.SyntaxToken, name: SimpleNameSyntax) -> AliasQualifiedNameSyntax: ...
    @overload
    def WithAlias(self, alias: IdentifierNameSyntax) -> AliasQualifiedNameSyntax: ...
    @overload
    def WithColonColonToken(self, colonColonToken: CodeAnalysis.SyntaxToken) -> AliasQualifiedNameSyntax: ...
    @overload
    def WithName(self, name: SimpleNameSyntax) -> AliasQualifiedNameSyntax: ...

class AnonymousFunctionExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> AnonymousFunctionExpressionSyntax: ...
    @property
    def AsyncKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def Body(self) -> CSharp.CSharpSyntaxNode: ...
    @property
    def ExpressionBody(self) -> ExpressionSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def WithAsyncKeyword(self, asyncKeyword: CodeAnalysis.SyntaxToken) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def WithBody(self, body: CSharp.CSharpSyntaxNode) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ExpressionSyntax) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> AnonymousFunctionExpressionSyntax: ...

class AnonymousMethodExpressionSyntax(AnonymousFunctionExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> AnonymousMethodExpressionSyntax: ...
    @property
    def AsyncKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def DelegateKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExpressionBody(self) -> ExpressionSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: CSharp.CSharpSyntaxNode) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, expressionBody: ExpressionSyntax) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, expressionBody: ExpressionSyntax) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithAsyncKeyword(self, asyncKeyword: CodeAnalysis.SyntaxToken) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithBody(self, body: CSharp.CSharpSyntaxNode) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithDelegateKeyword(self, delegateKeyword: CodeAnalysis.SyntaxToken) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ExpressionSyntax) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> AnonymousMethodExpressionSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> AnonymousMethodExpressionSyntax: ...

class ArgumentSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def NameColon(self) -> NameColonSyntax: ...
    @property
    def RefKindKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RefOrOutKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, nameColon: NameColonSyntax, refKindKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ArgumentSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ArgumentSyntax: ...
    @overload
    def WithNameColon(self, nameColon: NameColonSyntax) -> ArgumentSyntax: ...
    @overload
    def WithRefKindKeyword(self, refKindKeyword: CodeAnalysis.SyntaxToken) -> ArgumentSyntax: ...
    @overload
    def WithRefOrOutKeyword(self, refOrOutKeyword: CodeAnalysis.SyntaxToken) -> ArgumentSyntax: ...

class ArrayRankSpecifierSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddSizes(self, items: System.Array[ExpressionSyntax]) -> ArrayRankSpecifierSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Rank(self) -> int: ...
    @property
    def Sizes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, sizes: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithSizes(self, sizes: CodeAnalysis.SeparatedSyntaxList) -> ArrayRankSpecifierSyntax: ...

class AttributeSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[AttributeArgumentSyntax]) -> AttributeSyntax: ...
    @property
    def ArgumentList(self) -> AttributeArgumentListSyntax: ...
    @property
    def Name(self) -> NameSyntax: ...
    @overload
    def Update(self, name: NameSyntax, argumentList: AttributeArgumentListSyntax) -> AttributeSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: AttributeArgumentListSyntax) -> AttributeSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> AttributeSyntax: ...

class AttributeTargetSpecifierSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> AttributeTargetSpecifierSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> AttributeTargetSpecifierSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> AttributeTargetSpecifierSyntax: ...

class BaseFieldDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseFieldDeclarationSyntax: ...
    @overload
    def AddDeclarationVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> BaseFieldDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BaseFieldDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BaseFieldDeclarationSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> BaseFieldDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BaseFieldDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> BaseFieldDeclarationSyntax: ...

class BaseMethodDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseMethodDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseMethodDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> BaseMethodDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BaseMethodDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> BaseMethodDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BaseMethodDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> BaseMethodDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> BaseMethodDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BaseMethodDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> BaseMethodDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> BaseMethodDeclarationSyntax: ...

class BasePropertyDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def AddAccessorListAccessors(self, items: System.Array[AccessorDeclarationSyntax]) -> BasePropertyDeclarationSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BasePropertyDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BasePropertyDeclarationSyntax: ...
    @property
    def AccessorList(self) -> AccessorListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def WithAccessorList(self, accessorList: AccessorListSyntax) -> BasePropertyDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BasePropertyDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> BasePropertyDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BasePropertyDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> BasePropertyDeclarationSyntax: ...

class BlockSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> BlockSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> BlockSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> BlockSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BlockSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> BlockSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> BlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> BlockSyntax: ...

class BreakStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BreakStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BreakKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, breakKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> BreakStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, breakKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> BreakStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BreakStatementSyntax: ...
    @overload
    def WithBreakKeyword(self, breakKeyword: CodeAnalysis.SyntaxToken) -> BreakStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> BreakStatementSyntax: ...

class CheckedStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> CheckedStatementSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> CheckedStatementSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> CheckedStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, block: BlockSyntax) -> CheckedStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, keyword: CodeAnalysis.SyntaxToken, block: BlockSyntax) -> CheckedStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> CheckedStatementSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> CheckedStatementSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CheckedStatementSyntax: ...

class ClassDeclarationSyntax(TypeDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ClassDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> ClassDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> ClassDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> ClassDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ClassDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> ClassDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> ClassDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ClassDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> ClassDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> ClassDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> ClassDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ClassDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> ClassDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ClassDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> ClassDeclarationSyntax: ...

class ClassOrStructConstraintSyntax(TypeParameterConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ClassOrStructKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def QuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, classOrStructKeyword: CodeAnalysis.SyntaxToken) -> ClassOrStructConstraintSyntax: ...
    @overload
    def Update(self, classOrStructKeyword: CodeAnalysis.SyntaxToken, questionToken: CodeAnalysis.SyntaxToken) -> ClassOrStructConstraintSyntax: ...
    @overload
    def WithClassOrStructKeyword(self, classOrStructKeyword: CodeAnalysis.SyntaxToken) -> ClassOrStructConstraintSyntax: ...
    @overload
    def WithQuestionToken(self, questionToken: CodeAnalysis.SyntaxToken) -> ClassOrStructConstraintSyntax: ...

class CompilationUnitSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddExterns(self, items: System.Array[ExternAliasDirectiveSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddUsings(self, items: System.Array[UsingDirectiveSyntax]) -> CompilationUnitSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndOfFileToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Externs(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Usings(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def GetLoadDirectives() -> Generic.IList: ...
    @overload
    def GetReferenceDirectives() -> Generic.IList: ...
    @overload
    def Update(self, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, attributeLists: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endOfFileToken: CodeAnalysis.SyntaxToken) -> CompilationUnitSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithEndOfFileToken(self, endOfFileToken: CodeAnalysis.SyntaxToken) -> CompilationUnitSyntax: ...
    @overload
    def WithExterns(self, externs: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithUsings(self, usings: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...

class ConstructorDeclarationSyntax(BaseMethodDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ConstructorDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ConstructorDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> ConstructorDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ConstructorDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> ConstructorDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> ConstructorInitializerSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, initializer: ConstructorInitializerSyntax, body: BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ConstructorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, initializer: ConstructorInitializerSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithInitializer(self, initializer: ConstructorInitializerSyntax) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> ConstructorDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ConstructorDeclarationSyntax: ...

class ContinueStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ContinueStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ContinueKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, continueKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, continueKeyword: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ContinueStatementSyntax: ...
    @overload
    def WithContinueKeyword(self, continueKeyword: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...

class ConversionOperatorDeclarationSyntax(BaseMethodDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> ConversionOperatorDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def CheckedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def ImplicitOrExplicitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithCheckedKeyword(self, checkedKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithImplicitOrExplicitKeyword(self, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ConversionOperatorDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ConversionOperatorDeclarationSyntax: ...

class ConversionOperatorMemberCrefSyntax(MemberCrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddParametersParameters(self, items: System.Array[CrefParameterSyntax]) -> ConversionOperatorMemberCrefSyntax: ...
    @property
    def CheckedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ImplicitOrExplicitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CrefParameterListSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, parameters: CrefParameterListSyntax) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def Update(self, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, parameters: CrefParameterListSyntax) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def WithCheckedKeyword(self, checkedKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def WithImplicitOrExplicitKeyword(self, implicitOrExplicitKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def WithParameters(self, parameters: CrefParameterListSyntax) -> ConversionOperatorMemberCrefSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ConversionOperatorMemberCrefSyntax: ...

class CrefParameterSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def RefKindKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RefOrOutKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, refKindKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> CrefParameterSyntax: ...
    @overload
    def WithRefKindKeyword(self, refKindKeyword: CodeAnalysis.SyntaxToken) -> CrefParameterSyntax: ...
    @overload
    def WithRefOrOutKeyword(self, refOrOutKeyword: CodeAnalysis.SyntaxToken) -> CrefParameterSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CrefParameterSyntax: ...

class LocalDeclarationStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LocalDeclarationStatementSyntax: ...
    @overload
    def AddDeclarationVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> LocalDeclarationStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> LocalDeclarationStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def IsConst(self) -> bool: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UsingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, declaration: VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, modifiers: CodeAnalysis.SyntaxTokenList, declaration: VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, modifiers: CodeAnalysis.SyntaxTokenList, declaration: VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithUsingKeyword(self, usingKeyword: CodeAnalysis.SyntaxToken) -> LocalDeclarationStatementSyntax: ...

class DelegateDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DelegateDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> DelegateDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> DelegateDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> DelegateDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> DelegateDeclarationSyntax: ...
    @property
    def Arity(self) -> int: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DelegateKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def ReturnType(self) -> TypeSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, returnType: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, semicolonToken: CodeAnalysis.SyntaxToken) -> DelegateDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> DelegateDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> DelegateDeclarationSyntax: ...
    @overload
    def WithDelegateKeyword(self, delegateKeyword: CodeAnalysis.SyntaxToken) -> DelegateDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> DelegateDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> DelegateDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> DelegateDeclarationSyntax: ...
    @overload
    def WithReturnType(self, returnType: TypeSyntax) -> DelegateDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> DelegateDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> DelegateDeclarationSyntax: ...

class DestructorDeclarationSyntax(BaseMethodDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DestructorDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DestructorDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> DestructorDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> DestructorDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> DestructorDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TildeToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, tildeToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> DestructorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, tildeToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> DestructorDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> DestructorDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> DestructorDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> DestructorDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> DestructorDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> DestructorDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> DestructorDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> DestructorDeclarationSyntax: ...
    @overload
    def WithTildeToken(self, tildeToken: CodeAnalysis.SyntaxToken) -> DestructorDeclarationSyntax: ...

class DirectiveTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @property
    def DirectiveNameToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def GetNextDirective(self, predicate: System.Func) -> DirectiveTriviaSyntax: ...
    @overload
    def GetPreviousDirective(self, predicate: System.Func) -> DirectiveTriviaSyntax: ...
    @overload
    def GetRelatedDirectives() -> Generic.List: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> DirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> DirectiveTriviaSyntax: ...

class DoStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DoStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def DoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @property
    def WhileKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, doKeyword: CodeAnalysis.SyntaxToken, statement: StatementSyntax, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, doKeyword: CodeAnalysis.SyntaxToken, statement: StatementSyntax, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> DoStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> DoStatementSyntax: ...
    @overload
    def WithDoKeyword(self, doKeyword: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> DoStatementSyntax: ...
    @overload
    def WithWhileKeyword(self, whileKeyword: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...

class EmptyStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EmptyStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, semicolonToken: CodeAnalysis.SyntaxToken) -> EmptyStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, semicolonToken: CodeAnalysis.SyntaxToken) -> EmptyStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EmptyStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> EmptyStatementSyntax: ...

class EnumMemberDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EnumMemberDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EnumMemberDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EqualsValue(self) -> EqualsValueClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, equalsValue: EqualsValueClauseSyntax) -> EnumMemberDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, equalsValue: EqualsValueClauseSyntax) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithEqualsValue(self, equalsValue: EqualsValueClauseSyntax) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EnumMemberDeclarationSyntax: ...

class EventDeclarationSyntax(BasePropertyDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAccessorListAccessors(self, items: System.Array[AccessorDeclarationSyntax]) -> EventDeclarationSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EventDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EventDeclarationSyntax: ...
    @property
    def AccessorList(self) -> AccessorListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EventKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> EventDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: AccessorListSyntax) -> EventDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: AccessorListSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> EventDeclarationSyntax: ...
    @overload
    def WithAccessorList(self, accessorList: AccessorListSyntax) -> EventDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EventDeclarationSyntax: ...
    @overload
    def WithEventKeyword(self, eventKeyword: CodeAnalysis.SyntaxToken) -> EventDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> EventDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EventDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EventDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> EventDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> EventDeclarationSyntax: ...

class ExpressionStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ExpressionStatementSyntax: ...
    @property
    def AllowsAnyExpression(self) -> bool: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ExpressionStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ExpressionStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ExpressionStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ExpressionStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ExpressionStatementSyntax: ...

class FixedStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FixedStatementSyntax: ...
    @overload
    def AddDeclarationVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> FixedStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def FixedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, fixedKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> FixedStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, fixedKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> FixedStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> FixedStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> FixedStatementSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> FixedStatementSyntax: ...
    @overload
    def WithFixedKeyword(self, fixedKeyword: CodeAnalysis.SyntaxToken) -> FixedStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> FixedStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> FixedStatementSyntax: ...

class ForEachStatementSyntax(CommonForEachStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ForEachStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ForEachKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachStatementSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ForEachStatementSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ForEachStatementSyntax: ...
    @overload
    def WithForEachKeyword(self, forEachKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> ForEachStatementSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ForEachStatementSyntax: ...

class ForEachVariableStatementSyntax(CommonForEachStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ForEachVariableStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ForEachKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @property
    def Variable(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachVariableStatementSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachVariableStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, forEachKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, variable: ExpressionSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithForEachKeyword(self, forEachKeyword: CodeAnalysis.SyntaxToken) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> ForEachVariableStatementSyntax: ...
    @overload
    def WithVariable(self, variable: ExpressionSyntax) -> ForEachVariableStatementSyntax: ...

class ForStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ForStatementSyntax: ...
    @overload
    def AddIncrementors(self, items: System.Array[ExpressionSyntax]) -> ForStatementSyntax: ...
    @overload
    def AddInitializers(self, items: System.Array[ExpressionSyntax]) -> ForStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def FirstSemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ForKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Incrementors(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Initializers(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SecondSemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, forKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, firstSemicolonToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, secondSemicolonToken: CodeAnalysis.SyntaxToken, incrementors: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, forKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, initializers: CodeAnalysis.SeparatedSyntaxList, firstSemicolonToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, secondSemicolonToken: CodeAnalysis.SyntaxToken, incrementors: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ForStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ForStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> ForStatementSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> ForStatementSyntax: ...
    @overload
    def WithFirstSemicolonToken(self, firstSemicolonToken: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithForKeyword(self, forKeyword: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithIncrementors(self, incrementors: CodeAnalysis.SeparatedSyntaxList) -> ForStatementSyntax: ...
    @overload
    def WithInitializers(self, initializers: CodeAnalysis.SeparatedSyntaxList) -> ForStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithSecondSemicolonToken(self, secondSemicolonToken: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> ForStatementSyntax: ...

class GenericNameSyntax(SimpleNameSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTypeArgumentListArguments(self, items: System.Array[TypeSyntax]) -> GenericNameSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsUnboundGenericName(self) -> bool: ...
    @property
    def TypeArgumentList(self) -> TypeArgumentListSyntax: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, typeArgumentList: TypeArgumentListSyntax) -> GenericNameSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> GenericNameSyntax: ...
    @overload
    def WithTypeArgumentList(self, typeArgumentList: TypeArgumentListSyntax) -> GenericNameSyntax: ...

class GlobalStatementSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> GlobalStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> GlobalStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, statement: StatementSyntax) -> GlobalStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, statement: StatementSyntax) -> GlobalStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> GlobalStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> GlobalStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> GlobalStatementSyntax: ...

class GotoStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> GotoStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CaseOrDefaultKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def GotoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, gotoKeyword: CodeAnalysis.SyntaxToken, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> GotoStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, gotoKeyword: CodeAnalysis.SyntaxToken, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> GotoStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> GotoStatementSyntax: ...
    @overload
    def WithCaseOrDefaultKeyword(self, caseOrDefaultKeyword: CodeAnalysis.SyntaxToken) -> GotoStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> GotoStatementSyntax: ...
    @overload
    def WithGotoKeyword(self, gotoKeyword: CodeAnalysis.SyntaxToken) -> GotoStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> GotoStatementSyntax: ...

class IdentifierNameSyntax(SimpleNameSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken) -> IdentifierNameSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> IdentifierNameSyntax: ...

class IfStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> IfStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def Else(self) -> ElseClauseSyntax: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax, else_: ElseClauseSyntax) -> IfStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax, else_: ElseClauseSyntax) -> IfStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> IfStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> IfStatementSyntax: ...
    @overload
    def WithElse(self, else_: ElseClauseSyntax) -> IfStatementSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> IfStatementSyntax: ...

class IndexerDeclarationSyntax(BasePropertyDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAccessorListAccessors(self, items: System.Array[AccessorDeclarationSyntax]) -> IndexerDeclarationSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> IndexerDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> IndexerDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> IndexerDeclarationSyntax: ...
    @property
    def AccessorList(self) -> AccessorListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> BracketedParameterListSyntax: ...
    @property
    def Semicolon(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThisKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, thisKeyword: CodeAnalysis.SyntaxToken, parameterList: BracketedParameterListSyntax, accessorList: AccessorListSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> IndexerDeclarationSyntax: ...
    @overload
    def WithAccessorList(self, accessorList: AccessorListSyntax) -> IndexerDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> IndexerDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> IndexerDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> IndexerDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> IndexerDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: BracketedParameterListSyntax) -> IndexerDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> IndexerDeclarationSyntax: ...
    @overload
    def WithThisKeyword(self, thisKeyword: CodeAnalysis.SyntaxToken) -> IndexerDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> IndexerDeclarationSyntax: ...

class InterfaceDeclarationSyntax(TypeDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> InterfaceDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> InterfaceDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> InterfaceDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> InterfaceDeclarationSyntax: ...

class LabeledStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LabeledStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> LabeledStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> LabeledStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LabeledStatementSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> LabeledStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> LabeledStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> LabeledStatementSyntax: ...

class LambdaExpressionSyntax(AnonymousFunctionExpressionSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LambdaExpressionSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> AnonymousFunctionExpressionSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> LambdaExpressionSyntax: ...
    @property
    def ArrowToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithArrowToken(self, arrowToken: CodeAnalysis.SyntaxToken) -> LambdaExpressionSyntax: ...
    @overload
    def WithAsyncKeyword(self, asyncKeyword: CodeAnalysis.SyntaxToken) -> LambdaExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LambdaExpressionSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> LambdaExpressionSyntax: ...
    @overload
    def WithBody(self, body: CSharp.CSharpSyntaxNode) -> LambdaExpressionSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ExpressionSyntax) -> LambdaExpressionSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> LambdaExpressionSyntax: ...

class LocalFunctionStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> LocalFunctionStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> LocalFunctionStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def ReturnType(self) -> TypeSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalFunctionStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithReturnType(self, returnType: TypeSyntax) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> LocalFunctionStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> LocalFunctionStatementSyntax: ...

class LockStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LockStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def LockKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, lockKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> LockStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, lockKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> LockStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LockStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> LockStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> LockStatementSyntax: ...
    @overload
    def WithLockKeyword(self, lockKeyword: CodeAnalysis.SyntaxToken) -> LockStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> LockStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> LockStatementSyntax: ...

class MethodDeclarationSyntax(BaseMethodDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> MethodDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> MethodDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> MethodDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> MethodDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> MethodDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> MethodDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> MethodDeclarationSyntax: ...
    @property
    def Arity(self) -> int: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def ReturnType(self) -> TypeSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, constraintClauses: CodeAnalysis.SyntaxList, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> MethodDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> MethodDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> MethodDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> MethodDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> MethodDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> MethodDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> MethodDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> MethodDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> MethodDeclarationSyntax: ...
    @overload
    def WithReturnType(self, returnType: TypeSyntax) -> MethodDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> MethodDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> MethodDeclarationSyntax: ...

class NameColonSyntax(BaseExpressionColonSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @overload
    def Update(self, name: IdentifierNameSyntax, colonToken: CodeAnalysis.SyntaxToken) -> NameColonSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> NameColonSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> NameColonSyntax: ...

class NamespaceDeclarationSyntax(BaseNamespaceDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> NamespaceDeclarationSyntax: ...
    @overload
    def AddExterns(self, items: System.Array[ExternAliasDirectiveSyntax]) -> NamespaceDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> NamespaceDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> NamespaceDeclarationSyntax: ...
    @overload
    def AddUsings(self, items: System.Array[UsingDirectiveSyntax]) -> NamespaceDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Externs(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Name(self) -> NameSyntax: ...
    @property
    def NamespaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Usings(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, namespaceKeyword: CodeAnalysis.SyntaxToken, name: NameSyntax, openBraceToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, namespaceKeyword: CodeAnalysis.SyntaxToken, name: NameSyntax, openBraceToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithExterns(self, externs: CodeAnalysis.SyntaxList) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithNamespaceKeyword(self, namespaceKeyword: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> NamespaceDeclarationSyntax: ...
    @overload
    def WithUsings(self, usings: CodeAnalysis.SyntaxList) -> NamespaceDeclarationSyntax: ...

class NameSyntax(TypeSyntax):
    """    """
    @property
    def Arity(self) -> int: ...

class OperatorDeclarationSyntax(BaseMethodDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> OperatorDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> OperatorDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> OperatorDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> OperatorDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> OperatorDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def CheckedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def ReturnType(self) -> TypeSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> OperatorDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> OperatorDeclarationSyntax: ...
    @overload
    def WithCheckedKeyword(self, checkedKeyword: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> OperatorDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> OperatorDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> OperatorDeclarationSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> OperatorDeclarationSyntax: ...
    @overload
    def WithReturnType(self, returnType: TypeSyntax) -> OperatorDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> OperatorDeclarationSyntax: ...

class OperatorMemberCrefSyntax(MemberCrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParametersParameters(self, items: System.Array[CrefParameterSyntax]) -> OperatorMemberCrefSyntax: ...
    @property
    def CheckedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CrefParameterListSyntax: ...
    @overload
    def Update(self, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameters: CrefParameterListSyntax) -> OperatorMemberCrefSyntax: ...
    @overload
    def Update(self, operatorKeyword: CodeAnalysis.SyntaxToken, checkedKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameters: CrefParameterListSyntax) -> OperatorMemberCrefSyntax: ...
    @overload
    def WithCheckedKeyword(self, checkedKeyword: CodeAnalysis.SyntaxToken) -> OperatorMemberCrefSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> OperatorMemberCrefSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> OperatorMemberCrefSyntax: ...
    @overload
    def WithParameters(self, parameters: CrefParameterListSyntax) -> OperatorMemberCrefSyntax: ...

class ParameterListSyntax(BaseParameterListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[ParameterSyntax]) -> ParameterListSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> ParameterListSyntax: ...

class ParameterSyntax(BaseParameterSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ParameterSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ParameterSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Default(self) -> EqualsValueClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, default: EqualsValueClauseSyntax) -> ParameterSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ParameterSyntax: ...
    @overload
    def WithDefault(self, default: EqualsValueClauseSyntax) -> ParameterSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ParameterSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ParameterSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ParameterSyntax: ...

class ParenthesizedLambdaExpressionSyntax(LambdaExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> ParenthesizedLambdaExpressionSyntax: ...
    @property
    def ArrowToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AsyncKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ExpressionSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def ReturnType(self) -> TypeSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, body: CSharp.CSharpSyntaxNode) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, returnType: TypeSyntax, parameterList: ParameterListSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithArrowToken(self, arrowToken: CodeAnalysis.SyntaxToken) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithAsyncKeyword(self, asyncKeyword: CodeAnalysis.SyntaxToken) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithBody(self, body: CSharp.CSharpSyntaxNode) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ExpressionSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> ParenthesizedLambdaExpressionSyntax: ...
    @overload
    def WithReturnType(self, returnType: TypeSyntax) -> ParenthesizedLambdaExpressionSyntax: ...

class PropertyDeclarationSyntax(BasePropertyDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAccessorListAccessors(self, items: System.Array[AccessorDeclarationSyntax]) -> PropertyDeclarationSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> PropertyDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> PropertyDeclarationSyntax: ...
    @property
    def AccessorList(self) -> AccessorListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ExplicitInterfaceSpecifier(self) -> ExplicitInterfaceSpecifierSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> EqualsValueClauseSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Semicolon(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: TypeSyntax, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax, identifier: CodeAnalysis.SyntaxToken, accessorList: AccessorListSyntax, expressionBody: ArrowExpressionClauseSyntax, initializer: EqualsValueClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> PropertyDeclarationSyntax: ...
    @overload
    def WithAccessorList(self, accessorList: AccessorListSyntax) -> PropertyDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> PropertyDeclarationSyntax: ...
    @overload
    def WithExplicitInterfaceSpecifier(self, explicitInterfaceSpecifier: ExplicitInterfaceSpecifierSyntax) -> PropertyDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> PropertyDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> PropertyDeclarationSyntax: ...
    @overload
    def WithInitializer(self, initializer: EqualsValueClauseSyntax) -> PropertyDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> PropertyDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> PropertyDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> PropertyDeclarationSyntax: ...

class AccessorDeclarationSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AccessorDeclarationSyntax: ...
    @overload
    def AddBodyAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AccessorDeclarationSyntax: ...
    @overload
    def AddBodyStatements(self, items: System.Array[StatementSyntax]) -> AccessorDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> AccessorDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Body(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ArrowExpressionClauseSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, body: BlockSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> AccessorDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, body: BlockSyntax, expressionBody: ArrowExpressionClauseSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> AccessorDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> AccessorDeclarationSyntax: ...
    @overload
    def WithBody(self, body: BlockSyntax) -> AccessorDeclarationSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ArrowExpressionClauseSyntax) -> AccessorDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> AccessorDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> AccessorDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> AccessorDeclarationSyntax: ...

class QualifiedNameSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Left(self) -> NameSyntax: ...
    @property
    def Right(self) -> SimpleNameSyntax: ...
    @overload
    def Update(self, left: NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: SimpleNameSyntax) -> QualifiedNameSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> QualifiedNameSyntax: ...
    @overload
    def WithLeft(self, left: NameSyntax) -> QualifiedNameSyntax: ...
    @overload
    def WithRight(self, right: SimpleNameSyntax) -> QualifiedNameSyntax: ...

class RecordDeclarationSyntax(TypeDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> RecordDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> RecordDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> RecordDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> RecordDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> RecordDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> RecordDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> RecordDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def ClassOrStructKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, classOrStructKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> RecordDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> RecordDeclarationSyntax: ...
    @overload
    def WithClassOrStructKeyword(self, classOrStructKeyword: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> RecordDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> RecordDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> RecordDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> RecordDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> RecordDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> RecordDeclarationSyntax: ...

class RefTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ReadOnlyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RefKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, refKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> RefTypeSyntax: ...
    @overload
    def Update(self, refKeyword: CodeAnalysis.SyntaxToken, readOnlyKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> RefTypeSyntax: ...
    @overload
    def WithReadOnlyKeyword(self, readOnlyKeyword: CodeAnalysis.SyntaxToken) -> RefTypeSyntax: ...
    @overload
    def WithRefKeyword(self, refKeyword: CodeAnalysis.SyntaxToken) -> RefTypeSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> RefTypeSyntax: ...

class ReturnStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ReturnStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ReturnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, returnKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ReturnStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, returnKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ReturnStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ReturnStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ReturnStatementSyntax: ...
    @overload
    def WithReturnKeyword(self, returnKeyword: CodeAnalysis.SyntaxToken) -> ReturnStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ReturnStatementSyntax: ...

class SimpleLambdaExpressionSyntax(LambdaExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def AddParameterAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def AddParameterModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> SimpleLambdaExpressionSyntax: ...
    @property
    def ArrowToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AsyncKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def ExpressionBody(self) -> ExpressionSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Parameter(self) -> ParameterSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, parameter: ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, body: CSharp.CSharpSyntaxNode) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def Update(self, asyncKeyword: CodeAnalysis.SyntaxToken, parameter: ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, parameter: ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameter: ParameterSyntax, arrowToken: CodeAnalysis.SyntaxToken, block: BlockSyntax, expressionBody: ExpressionSyntax) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithArrowToken(self, arrowToken: CodeAnalysis.SyntaxToken) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithAsyncKeyword(self, asyncKeyword: CodeAnalysis.SyntaxToken) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithBody(self, body: CSharp.CSharpSyntaxNode) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithExpressionBody(self, expressionBody: ExpressionSyntax) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> SimpleLambdaExpressionSyntax: ...
    @overload
    def WithParameter(self, parameter: ParameterSyntax) -> SimpleLambdaExpressionSyntax: ...

class SimpleNameSyntax(NameSyntax):
    """    """
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> SimpleNameSyntax: ...

class SkippedTokensTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> SkippedTokensTriviaSyntax: ...
    @property
    def Tokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, tokens: CodeAnalysis.SyntaxTokenList) -> SkippedTokensTriviaSyntax: ...
    @overload
    def WithTokens(self, tokens: CodeAnalysis.SyntaxTokenList) -> SkippedTokensTriviaSyntax: ...

class StackAllocArrayCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def StackAllocKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, stackAllocKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> StackAllocArrayCreationExpressionSyntax: ...
    @overload
    def Update(self, stackAllocKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, initializer: InitializerExpressionSyntax) -> StackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> StackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithStackAllocKeyword(self, stackAllocKeyword: CodeAnalysis.SyntaxToken) -> StackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> StackAllocArrayCreationExpressionSyntax: ...

class StructDeclarationSyntax(TypeDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> StructDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> StructDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> StructDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> StructDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> StructDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> StructDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> StructDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, baseList: BaseListSyntax, constraintClauses: CodeAnalysis.SyntaxList, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> StructDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> StructDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> StructDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> StructDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> StructDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> StructDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> StructDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> StructDeclarationSyntax: ...

class StructuredTriviaSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @property
    def ParentTrivia(self) -> CodeAnalysis.SyntaxTrivia: ...

class SubpatternSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ExpressionColon(self) -> BaseExpressionColonSyntax: ...
    @property
    def NameColon(self) -> NameColonSyntax: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @overload
    def Update(self, expressionColon: BaseExpressionColonSyntax, pattern: PatternSyntax) -> SubpatternSyntax: ...
    @overload
    def Update(self, nameColon: NameColonSyntax, pattern: PatternSyntax) -> SubpatternSyntax: ...
    @overload
    def WithExpressionColon(self, expressionColon: BaseExpressionColonSyntax) -> SubpatternSyntax: ...
    @overload
    def WithNameColon(self, nameColon: NameColonSyntax) -> SubpatternSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> SubpatternSyntax: ...

class SwitchStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SwitchStatementSyntax: ...
    @overload
    def AddSections(self, items: System.Array[SwitchSectionSyntax]) -> SwitchStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Sections(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SwitchKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, switchKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, sections: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, switchKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, sections: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> SwitchStatementSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SwitchStatementSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...
    @overload
    def WithSections(self, sections: CodeAnalysis.SyntaxList) -> SwitchStatementSyntax: ...
    @overload
    def WithSwitchKeyword(self, switchKeyword: CodeAnalysis.SyntaxToken) -> SwitchStatementSyntax: ...

class ThrowStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ThrowStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThrowKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, throwKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ThrowStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, throwKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> ThrowStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ThrowStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ThrowStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ThrowStatementSyntax: ...
    @overload
    def WithThrowKeyword(self, throwKeyword: CodeAnalysis.SyntaxToken) -> ThrowStatementSyntax: ...

class TryStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> TryStatementSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> TryStatementSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> TryStatementSyntax: ...
    @overload
    def AddCatches(self, items: System.Array[CatchClauseSyntax]) -> TryStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def Catches(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Finally(self) -> FinallyClauseSyntax: ...
    @property
    def TryKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, tryKeyword: CodeAnalysis.SyntaxToken, block: BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: FinallyClauseSyntax) -> TryStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, tryKeyword: CodeAnalysis.SyntaxToken, block: BlockSyntax, catches: CodeAnalysis.SyntaxList, finally_: FinallyClauseSyntax) -> TryStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> TryStatementSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> TryStatementSyntax: ...
    @overload
    def WithCatches(self, catches: CodeAnalysis.SyntaxList) -> TryStatementSyntax: ...
    @overload
    def WithFinally(self, finally_: FinallyClauseSyntax) -> TryStatementSyntax: ...
    @overload
    def WithTryKeyword(self, tryKeyword: CodeAnalysis.SyntaxToken) -> TryStatementSyntax: ...

class TypeDeclarationSyntax(BaseTypeDeclarationSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> TypeDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> BaseTypeDeclarationSyntax: ...
    @overload
    def AddConstraintClauses(self, items: System.Array[TypeParameterConstraintClauseSyntax]) -> TypeDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> TypeDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> TypeDeclarationSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> TypeDeclarationSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> TypeDeclarationSyntax: ...
    @property
    def Arity(self) -> int: ...
    @property
    def ConstraintClauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> TypeDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> TypeDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> TypeDeclarationSyntax: ...
    @overload
    def WithConstraintClauses(self, constraintClauses: CodeAnalysis.SyntaxList) -> TypeDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> TypeDeclarationSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> TypeDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> TypeDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> TypeDeclarationSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> TypeDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> TypeDeclarationSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> TypeDeclarationSyntax: ...

class TypeSyntax(ExpressionSyntax):
    """    """
    @property
    def IsNint(self) -> bool: ...
    @property
    def IsNotNull(self) -> bool: ...
    @property
    def IsNuint(self) -> bool: ...
    @property
    def IsUnmanaged(self) -> bool: ...
    @property
    def IsVar(self) -> bool: ...

class UnsafeStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> UnsafeStatementSyntax: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> UnsafeStatementSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> UnsafeStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def UnsafeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, unsafeKeyword: CodeAnalysis.SyntaxToken, block: BlockSyntax) -> UnsafeStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, unsafeKeyword: CodeAnalysis.SyntaxToken, block: BlockSyntax) -> UnsafeStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> UnsafeStatementSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> UnsafeStatementSyntax: ...
    @overload
    def WithUnsafeKeyword(self, unsafeKeyword: CodeAnalysis.SyntaxToken) -> UnsafeStatementSyntax: ...

class UsingDirectiveSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Alias(self) -> NameEqualsSyntax: ...
    @property
    def GlobalKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> NameSyntax: ...
    @property
    def NamespaceOrType(self) -> TypeSyntax: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StaticKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UnsafeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UsingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, alias: NameEqualsSyntax, name: NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def Update(self, globalKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, alias: NameEqualsSyntax, name: NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def Update(self, globalKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, staticKeyword: CodeAnalysis.SyntaxToken, unsafeKeyword: CodeAnalysis.SyntaxToken, alias: NameEqualsSyntax, namespaceOrType: TypeSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def WithAlias(self, alias: NameEqualsSyntax) -> UsingDirectiveSyntax: ...
    @overload
    def WithGlobalKeyword(self, globalKeyword: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> UsingDirectiveSyntax: ...
    @overload
    def WithNamespaceOrType(self, namespaceOrType: TypeSyntax) -> UsingDirectiveSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def WithStaticKeyword(self, staticKeyword: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def WithUnsafeKeyword(self, unsafeKeyword: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...
    @overload
    def WithUsingKeyword(self, usingKeyword: CodeAnalysis.SyntaxToken) -> UsingDirectiveSyntax: ...

class UsingStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> UsingStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @property
    def UsingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> UsingStatementSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> UsingStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, awaitKeyword: CodeAnalysis.SyntaxToken, usingKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> UsingStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> UsingStatementSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> UsingStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> UsingStatementSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> UsingStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> UsingStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> UsingStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> UsingStatementSyntax: ...
    @overload
    def WithUsingKeyword(self, usingKeyword: CodeAnalysis.SyntaxToken) -> UsingStatementSyntax: ...

class WhileStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> WhileStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @property
    def WhileKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> WhileStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, whileKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> WhileStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> WhileStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> WhileStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhileStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> WhileStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> WhileStatementSyntax: ...
    @overload
    def WithWhileKeyword(self, whileKeyword: CodeAnalysis.SyntaxToken) -> WhileStatementSyntax: ...

class XmlNameAttributeElementKind(enum.Enum):
    Parameter = 0
    ParameterReference = 1
    TypeParameter = 2
    TypeParameterReference = 3

class YieldStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> YieldStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ReturnOrBreakKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def YieldKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, yieldKeyword: CodeAnalysis.SyntaxToken, returnOrBreakKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, yieldKeyword: CodeAnalysis.SyntaxToken, returnOrBreakKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> YieldStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> YieldStatementSyntax: ...
    @overload
    def WithReturnOrBreakKeyword(self, returnOrBreakKeyword: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...
    @overload
    def WithYieldKeyword(self, yieldKeyword: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...

class TypeArgumentListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[TypeSyntax]) -> TypeArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> TypeArgumentListSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...

class PredefinedTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> PredefinedTypeSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> PredefinedTypeSyntax: ...

class ArrayTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddRankSpecifiers(self, items: System.Array[ArrayRankSpecifierSyntax]) -> ArrayTypeSyntax: ...
    @property
    def ElementType(self) -> TypeSyntax: ...
    @property
    def RankSpecifiers(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, elementType: TypeSyntax, rankSpecifiers: CodeAnalysis.SyntaxList) -> ArrayTypeSyntax: ...
    @overload
    def WithElementType(self, elementType: TypeSyntax) -> ArrayTypeSyntax: ...
    @overload
    def WithRankSpecifiers(self, rankSpecifiers: CodeAnalysis.SyntaxList) -> ArrayTypeSyntax: ...

class PointerTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def AsteriskToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ElementType(self) -> TypeSyntax: ...
    @overload
    def Update(self, elementType: TypeSyntax, asteriskToken: CodeAnalysis.SyntaxToken) -> PointerTypeSyntax: ...
    @overload
    def WithAsteriskToken(self, asteriskToken: CodeAnalysis.SyntaxToken) -> PointerTypeSyntax: ...
    @overload
    def WithElementType(self, elementType: TypeSyntax) -> PointerTypeSyntax: ...

class FunctionPointerTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[FunctionPointerParameterSyntax]) -> FunctionPointerTypeSyntax: ...
    @property
    def AsteriskToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CallingConvention(self) -> FunctionPointerCallingConventionSyntax: ...
    @property
    def DelegateKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> FunctionPointerParameterListSyntax: ...
    @overload
    def Update(self, delegateKeyword: CodeAnalysis.SyntaxToken, asteriskToken: CodeAnalysis.SyntaxToken, callingConvention: FunctionPointerCallingConventionSyntax, parameterList: FunctionPointerParameterListSyntax) -> FunctionPointerTypeSyntax: ...
    @overload
    def WithAsteriskToken(self, asteriskToken: CodeAnalysis.SyntaxToken) -> FunctionPointerTypeSyntax: ...
    @overload
    def WithCallingConvention(self, callingConvention: FunctionPointerCallingConventionSyntax) -> FunctionPointerTypeSyntax: ...
    @overload
    def WithDelegateKeyword(self, delegateKeyword: CodeAnalysis.SyntaxToken) -> FunctionPointerTypeSyntax: ...
    @overload
    def WithParameterList(self, parameterList: FunctionPointerParameterListSyntax) -> FunctionPointerTypeSyntax: ...

class FunctionPointerParameterListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[FunctionPointerParameterSyntax]) -> FunctionPointerParameterListSyntax: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> FunctionPointerParameterListSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> FunctionPointerParameterListSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> FunctionPointerParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> FunctionPointerParameterListSyntax: ...

class FunctionPointerCallingConventionSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddUnmanagedCallingConventionListCallingConventions(self, items: System.Array[FunctionPointerUnmanagedCallingConventionSyntax]) -> FunctionPointerCallingConventionSyntax: ...
    @property
    def ManagedOrUnmanagedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UnmanagedCallingConventionList(self) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    def Update(self, managedOrUnmanagedKeyword: CodeAnalysis.SyntaxToken, unmanagedCallingConventionList: FunctionPointerUnmanagedCallingConventionListSyntax) -> FunctionPointerCallingConventionSyntax: ...
    @overload
    def WithManagedOrUnmanagedKeyword(self, managedOrUnmanagedKeyword: CodeAnalysis.SyntaxToken) -> FunctionPointerCallingConventionSyntax: ...
    @overload
    def WithUnmanagedCallingConventionList(self, unmanagedCallingConventionList: FunctionPointerUnmanagedCallingConventionListSyntax) -> FunctionPointerCallingConventionSyntax: ...

class FunctionPointerUnmanagedCallingConventionListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddCallingConventions(self, items: System.Array[FunctionPointerUnmanagedCallingConventionSyntax]) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @property
    def CallingConventions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, callingConventions: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    def WithCallingConventions(self, callingConventions: CodeAnalysis.SeparatedSyntaxList) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> FunctionPointerUnmanagedCallingConventionListSyntax: ...

class FunctionPointerUnmanagedCallingConventionSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: CodeAnalysis.SyntaxToken) -> FunctionPointerUnmanagedCallingConventionSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> FunctionPointerUnmanagedCallingConventionSyntax: ...

class NullableTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ElementType(self) -> TypeSyntax: ...
    @property
    def QuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, elementType: TypeSyntax, questionToken: CodeAnalysis.SyntaxToken) -> NullableTypeSyntax: ...
    @overload
    def WithElementType(self, elementType: TypeSyntax) -> NullableTypeSyntax: ...
    @overload
    def WithQuestionToken(self, questionToken: CodeAnalysis.SyntaxToken) -> NullableTypeSyntax: ...

class TupleTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddElements(self, items: System.Array[TupleElementSyntax]) -> TupleTypeSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Elements(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, elements: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...
    @overload
    def WithElements(self, elements: CodeAnalysis.SeparatedSyntaxList) -> TupleTypeSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...

class TupleElementSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken) -> TupleElementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> TupleElementSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TupleElementSyntax: ...

class OmittedTypeArgumentSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def OmittedTypeArgumentToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, omittedTypeArgumentToken: CodeAnalysis.SyntaxToken) -> OmittedTypeArgumentSyntax: ...
    @overload
    def WithOmittedTypeArgumentToken(self, omittedTypeArgumentToken: CodeAnalysis.SyntaxToken) -> OmittedTypeArgumentSyntax: ...

class ScopedTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ScopedKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, scopedKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> ScopedTypeSyntax: ...
    @overload
    def WithScopedKeyword(self, scopedKeyword: CodeAnalysis.SyntaxToken) -> ScopedTypeSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ScopedTypeSyntax: ...

class ExpressionOrPatternSyntax(CSharp.CSharpSyntaxNode):
    """    """

class ExpressionSyntax(ExpressionOrPatternSyntax):
    """    """

class ParenthesizedExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...

class TupleExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[ArgumentSyntax]) -> TupleExpressionSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> TupleExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...

class PrefixUnaryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Operand(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, operatorToken: CodeAnalysis.SyntaxToken, operand: ExpressionSyntax) -> PrefixUnaryExpressionSyntax: ...
    @overload
    def WithOperand(self, operand: ExpressionSyntax) -> PrefixUnaryExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> PrefixUnaryExpressionSyntax: ...

class AwaitExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> AwaitExpressionSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> AwaitExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> AwaitExpressionSyntax: ...

class PostfixUnaryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Operand(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, operand: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken) -> PostfixUnaryExpressionSyntax: ...
    @overload
    def WithOperand(self, operand: ExpressionSyntax) -> PostfixUnaryExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> PostfixUnaryExpressionSyntax: ...

class MemberAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Name(self) -> SimpleNameSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, expression: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: SimpleNameSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithName(self, name: SimpleNameSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> MemberAccessExpressionSyntax: ...

class ConditionalAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhenNotNull(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, whenNotNull: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithWhenNotNull(self, whenNotNull: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...

class MemberBindingExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Name(self) -> SimpleNameSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, operatorToken: CodeAnalysis.SyntaxToken, name: SimpleNameSyntax) -> MemberBindingExpressionSyntax: ...
    @overload
    def WithName(self, name: SimpleNameSyntax) -> MemberBindingExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> MemberBindingExpressionSyntax: ...

class ElementBindingExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ElementBindingExpressionSyntax: ...
    @property
    def ArgumentList(self) -> BracketedArgumentListSyntax: ...
    @overload
    def Update(self, argumentList: BracketedArgumentListSyntax) -> ElementBindingExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: BracketedArgumentListSyntax) -> ElementBindingExpressionSyntax: ...

class RangeExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def LeftOperand(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RightOperand(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, leftOperand: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, rightOperand: ExpressionSyntax) -> RangeExpressionSyntax: ...
    @overload
    def WithLeftOperand(self, leftOperand: ExpressionSyntax) -> RangeExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> RangeExpressionSyntax: ...
    @overload
    def WithRightOperand(self, rightOperand: ExpressionSyntax) -> RangeExpressionSyntax: ...

class ImplicitElementAccessSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ImplicitElementAccessSyntax: ...
    @property
    def ArgumentList(self) -> BracketedArgumentListSyntax: ...
    @overload
    def Update(self, argumentList: BracketedArgumentListSyntax) -> ImplicitElementAccessSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: BracketedArgumentListSyntax) -> ImplicitElementAccessSyntax: ...

class BinaryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Left(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Right(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, left: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: ExpressionSyntax) -> BinaryExpressionSyntax: ...
    @overload
    def WithLeft(self, left: ExpressionSyntax) -> BinaryExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> BinaryExpressionSyntax: ...
    @overload
    def WithRight(self, right: ExpressionSyntax) -> BinaryExpressionSyntax: ...

class AssignmentExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Left(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Right(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, left: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: ExpressionSyntax) -> AssignmentExpressionSyntax: ...
    @overload
    def WithLeft(self, left: ExpressionSyntax) -> AssignmentExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> AssignmentExpressionSyntax: ...
    @overload
    def WithRight(self, right: ExpressionSyntax) -> AssignmentExpressionSyntax: ...

class ConditionalExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def QuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhenFalse(self) -> ExpressionSyntax: ...
    @property
    def WhenTrue(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, condition: ExpressionSyntax, questionToken: CodeAnalysis.SyntaxToken, whenTrue: ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken, whenFalse: ExpressionSyntax) -> ConditionalExpressionSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> ConditionalExpressionSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> ConditionalExpressionSyntax: ...
    @overload
    def WithQuestionToken(self, questionToken: CodeAnalysis.SyntaxToken) -> ConditionalExpressionSyntax: ...
    @overload
    def WithWhenFalse(self, whenFalse: ExpressionSyntax) -> ConditionalExpressionSyntax: ...
    @overload
    def WithWhenTrue(self, whenTrue: ExpressionSyntax) -> ConditionalExpressionSyntax: ...

class InstanceExpressionSyntax(ExpressionSyntax):
    """    """

class ThisExpressionSyntax(InstanceExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Token(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, token: CodeAnalysis.SyntaxToken) -> ThisExpressionSyntax: ...
    @overload
    def WithToken(self, token: CodeAnalysis.SyntaxToken) -> ThisExpressionSyntax: ...

class BaseExpressionSyntax(InstanceExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Token(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, token: CodeAnalysis.SyntaxToken) -> BaseExpressionSyntax: ...
    @overload
    def WithToken(self, token: CodeAnalysis.SyntaxToken) -> BaseExpressionSyntax: ...

class LiteralExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Token(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, token: CodeAnalysis.SyntaxToken) -> LiteralExpressionSyntax: ...
    @overload
    def WithToken(self, token: CodeAnalysis.SyntaxToken) -> LiteralExpressionSyntax: ...

class MakeRefExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> MakeRefExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> MakeRefExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> MakeRefExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MakeRefExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> MakeRefExpressionSyntax: ...

class RefTypeExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> RefTypeExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> RefTypeExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> RefTypeExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> RefTypeExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> RefTypeExpressionSyntax: ...

class RefValueExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Comma(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, comma: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> RefValueExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> RefValueExpressionSyntax: ...
    @overload
    def WithComma(self, comma: CodeAnalysis.SyntaxToken) -> RefValueExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> RefValueExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> RefValueExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> RefValueExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> RefValueExpressionSyntax: ...

class CheckedExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> CheckedExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CheckedExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CheckedExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CheckedExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CheckedExpressionSyntax: ...

class DefaultExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> DefaultExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> DefaultExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> DefaultExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> DefaultExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> DefaultExpressionSyntax: ...

class TypeOfExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypeOfExpressionSyntax: ...

class SizeOfExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> SizeOfExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> SizeOfExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> SizeOfExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> SizeOfExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> SizeOfExpressionSyntax: ...

class InvocationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> InvocationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, argumentList: ArgumentListSyntax) -> InvocationExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> InvocationExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> InvocationExpressionSyntax: ...

class ElementAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ElementAccessExpressionSyntax: ...
    @property
    def ArgumentList(self) -> BracketedArgumentListSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, argumentList: BracketedArgumentListSyntax) -> ElementAccessExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: BracketedArgumentListSyntax) -> ElementAccessExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ElementAccessExpressionSyntax: ...

class BaseArgumentListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddArguments(self, items: System.Array[ArgumentSyntax]) -> BaseArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> BaseArgumentListSyntax: ...

class ArgumentListSyntax(BaseArgumentListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[ArgumentSyntax]) -> ArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> ArgumentListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...

class BracketedArgumentListSyntax(BaseArgumentListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[ArgumentSyntax]) -> BracketedArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> BracketedArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> BracketedArgumentListSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> BracketedArgumentListSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> BracketedArgumentListSyntax: ...

class BaseExpressionColonSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> BaseExpressionColonSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> BaseExpressionColonSyntax: ...

class ExpressionColonSyntax(BaseExpressionColonSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken) -> ExpressionColonSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> ExpressionColonSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ExpressionColonSyntax: ...

class DeclarationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Designation(self) -> VariableDesignationSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax, designation: VariableDesignationSyntax) -> DeclarationExpressionSyntax: ...
    @overload
    def WithDesignation(self, designation: VariableDesignationSyntax) -> DeclarationExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> DeclarationExpressionSyntax: ...

class CastExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> CastExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CastExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CastExpressionSyntax: ...

class RefExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def RefKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, refKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> RefExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> RefExpressionSyntax: ...
    @overload
    def WithRefKeyword(self, refKeyword: CodeAnalysis.SyntaxToken) -> RefExpressionSyntax: ...

class InitializerExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddExpressions(self, items: System.Array[ExpressionSyntax]) -> InitializerExpressionSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expressions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, expressions: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> InitializerExpressionSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> InitializerExpressionSyntax: ...
    @overload
    def WithExpressions(self, expressions: CodeAnalysis.SeparatedSyntaxList) -> InitializerExpressionSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> InitializerExpressionSyntax: ...

class BaseObjectCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> BaseObjectCreationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> BaseObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> BaseObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> BaseObjectCreationExpressionSyntax: ...

class ImplicitObjectCreationExpressionSyntax(BaseObjectCreationExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ImplicitObjectCreationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, argumentList: ArgumentListSyntax, initializer: InitializerExpressionSyntax) -> ImplicitObjectCreationExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> ImplicitObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> ImplicitObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ImplicitObjectCreationExpressionSyntax: ...

class ObjectCreationExpressionSyntax(BaseObjectCreationExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ObjectCreationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, argumentList: ArgumentListSyntax, initializer: InitializerExpressionSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ObjectCreationExpressionSyntax: ...

class WithExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddInitializerExpressions(self, items: System.Array[ExpressionSyntax]) -> WithExpressionSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def WithKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, expression: ExpressionSyntax, withKeyword: CodeAnalysis.SyntaxToken, initializer: InitializerExpressionSyntax) -> WithExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> WithExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> WithExpressionSyntax: ...
    @overload
    def WithWithKeyword(self, withKeyword: CodeAnalysis.SyntaxToken) -> WithExpressionSyntax: ...

class AnonymousObjectMemberDeclaratorSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def NameEquals(self) -> NameEqualsSyntax: ...
    @overload
    def Update(self, nameEquals: NameEqualsSyntax, expression: ExpressionSyntax) -> AnonymousObjectMemberDeclaratorSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> AnonymousObjectMemberDeclaratorSyntax: ...
    @overload
    def WithNameEquals(self, nameEquals: NameEqualsSyntax) -> AnonymousObjectMemberDeclaratorSyntax: ...

class AnonymousObjectCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddInitializers(self, items: System.Array[AnonymousObjectMemberDeclaratorSyntax]) -> AnonymousObjectCreationExpressionSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializers(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializers(self, initializers: CodeAnalysis.SeparatedSyntaxList) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> AnonymousObjectCreationExpressionSyntax: ...

class ArrayCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTypeRankSpecifiers(self, items: System.Array[ArrayRankSpecifierSyntax]) -> ArrayCreationExpressionSyntax: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> ArrayTypeSyntax: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, type_: ArrayTypeSyntax, initializer: InitializerExpressionSyntax) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithType(self, type_: ArrayTypeSyntax) -> ArrayCreationExpressionSyntax: ...

class ImplicitArrayCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddCommas(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def AddInitializerExpressions(self, items: System.Array[ExpressionSyntax]) -> ImplicitArrayCreationExpressionSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Commas(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, openBracketToken: CodeAnalysis.SyntaxToken, commas: CodeAnalysis.SyntaxTokenList, closeBracketToken: CodeAnalysis.SyntaxToken, initializer: InitializerExpressionSyntax) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def WithCommas(self, commas: CodeAnalysis.SyntaxTokenList) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ImplicitArrayCreationExpressionSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> ImplicitArrayCreationExpressionSyntax: ...

class ImplicitStackAllocArrayCreationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddInitializerExpressions(self, items: System.Array[ExpressionSyntax]) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> InitializerExpressionSyntax: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StackAllocKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, stackAllocKeyword: CodeAnalysis.SyntaxToken, openBracketToken: CodeAnalysis.SyntaxToken, closeBracketToken: CodeAnalysis.SyntaxToken, initializer: InitializerExpressionSyntax) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: InitializerExpressionSyntax) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...
    @overload
    def WithStackAllocKeyword(self, stackAllocKeyword: CodeAnalysis.SyntaxToken) -> ImplicitStackAllocArrayCreationExpressionSyntax: ...

class QueryClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """

class SelectOrGroupClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """

class QueryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddBodyClauses(self, items: System.Array[QueryClauseSyntax]) -> QueryExpressionSyntax: ...
    @property
    def Body(self) -> QueryBodySyntax: ...
    @property
    def FromClause(self) -> FromClauseSyntax: ...
    @overload
    def Update(self, fromClause: FromClauseSyntax, body: QueryBodySyntax) -> QueryExpressionSyntax: ...
    @overload
    def WithBody(self, body: QueryBodySyntax) -> QueryExpressionSyntax: ...
    @overload
    def WithFromClause(self, fromClause: FromClauseSyntax) -> QueryExpressionSyntax: ...

class QueryBodySyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddClauses(self, items: System.Array[QueryClauseSyntax]) -> QueryBodySyntax: ...
    @property
    def Clauses(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Continuation(self) -> QueryContinuationSyntax: ...
    @property
    def SelectOrGroup(self) -> SelectOrGroupClauseSyntax: ...
    @overload
    def Update(self, clauses: CodeAnalysis.SyntaxList, selectOrGroup: SelectOrGroupClauseSyntax, continuation: QueryContinuationSyntax) -> QueryBodySyntax: ...
    @overload
    def WithClauses(self, clauses: CodeAnalysis.SyntaxList) -> QueryBodySyntax: ...
    @overload
    def WithContinuation(self, continuation: QueryContinuationSyntax) -> QueryBodySyntax: ...
    @overload
    def WithSelectOrGroup(self, selectOrGroup: SelectOrGroupClauseSyntax) -> QueryBodySyntax: ...

class FromClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def FromKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, fromKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> FromClauseSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> FromClauseSyntax: ...
    @overload
    def WithFromKeyword(self, fromKeyword: CodeAnalysis.SyntaxToken) -> FromClauseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> FromClauseSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> FromClauseSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> FromClauseSyntax: ...

class LetClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LetKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, letKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> LetClauseSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> LetClauseSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> LetClauseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> LetClauseSyntax: ...
    @overload
    def WithLetKeyword(self, letKeyword: CodeAnalysis.SyntaxToken) -> LetClauseSyntax: ...

class JoinClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EqualsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InExpression(self) -> ExpressionSyntax: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Into(self) -> JoinIntoClauseSyntax: ...
    @property
    def JoinKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LeftExpression(self) -> ExpressionSyntax: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RightExpression(self) -> ExpressionSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, joinKeyword: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, inKeyword: CodeAnalysis.SyntaxToken, inExpression: ExpressionSyntax, onKeyword: CodeAnalysis.SyntaxToken, leftExpression: ExpressionSyntax, equalsKeyword: CodeAnalysis.SyntaxToken, rightExpression: ExpressionSyntax, into: JoinIntoClauseSyntax) -> JoinClauseSyntax: ...
    @overload
    def WithEqualsKeyword(self, equalsKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithInExpression(self, inExpression: ExpressionSyntax) -> JoinClauseSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithInto(self, into: JoinIntoClauseSyntax) -> JoinClauseSyntax: ...
    @overload
    def WithJoinKeyword(self, joinKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithLeftExpression(self, leftExpression: ExpressionSyntax) -> JoinClauseSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithRightExpression(self, rightExpression: ExpressionSyntax) -> JoinClauseSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> JoinClauseSyntax: ...

class JoinIntoClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IntoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, intoKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> JoinIntoClauseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> JoinIntoClauseSyntax: ...
    @overload
    def WithIntoKeyword(self, intoKeyword: CodeAnalysis.SyntaxToken) -> JoinIntoClauseSyntax: ...

class WhereClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def WhereKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whereKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> WhereClauseSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhereClauseSyntax: ...
    @overload
    def WithWhereKeyword(self, whereKeyword: CodeAnalysis.SyntaxToken) -> WhereClauseSyntax: ...

class OrderByClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddOrderings(self, items: System.Array[OrderingSyntax]) -> OrderByClauseSyntax: ...
    @property
    def OrderByKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Orderings(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, orderByKeyword: CodeAnalysis.SyntaxToken, orderings: CodeAnalysis.SeparatedSyntaxList) -> OrderByClauseSyntax: ...
    @overload
    def WithOrderByKeyword(self, orderByKeyword: CodeAnalysis.SyntaxToken) -> OrderByClauseSyntax: ...
    @overload
    def WithOrderings(self, orderings: CodeAnalysis.SeparatedSyntaxList) -> OrderByClauseSyntax: ...

class OrderingSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def AscendingOrDescendingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> OrderingSyntax: ...
    @overload
    def WithAscendingOrDescendingKeyword(self, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> OrderingSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> OrderingSyntax: ...

class SelectClauseSyntax(SelectOrGroupClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def SelectKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, selectKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> SelectClauseSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SelectClauseSyntax: ...
    @overload
    def WithSelectKeyword(self, selectKeyword: CodeAnalysis.SyntaxToken) -> SelectClauseSyntax: ...

class GroupClauseSyntax(SelectOrGroupClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ByExpression(self) -> ExpressionSyntax: ...
    @property
    def ByKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GroupExpression(self) -> ExpressionSyntax: ...
    @property
    def GroupKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, groupKeyword: CodeAnalysis.SyntaxToken, groupExpression: ExpressionSyntax, byKeyword: CodeAnalysis.SyntaxToken, byExpression: ExpressionSyntax) -> GroupClauseSyntax: ...
    @overload
    def WithByExpression(self, byExpression: ExpressionSyntax) -> GroupClauseSyntax: ...
    @overload
    def WithByKeyword(self, byKeyword: CodeAnalysis.SyntaxToken) -> GroupClauseSyntax: ...
    @overload
    def WithGroupExpression(self, groupExpression: ExpressionSyntax) -> GroupClauseSyntax: ...
    @overload
    def WithGroupKeyword(self, groupKeyword: CodeAnalysis.SyntaxToken) -> GroupClauseSyntax: ...

class QueryContinuationSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddBodyClauses(self, items: System.Array[QueryClauseSyntax]) -> QueryContinuationSyntax: ...
    @property
    def Body(self) -> QueryBodySyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IntoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, intoKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, body: QueryBodySyntax) -> QueryContinuationSyntax: ...
    @overload
    def WithBody(self, body: QueryBodySyntax) -> QueryContinuationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> QueryContinuationSyntax: ...
    @overload
    def WithIntoKeyword(self, intoKeyword: CodeAnalysis.SyntaxToken) -> QueryContinuationSyntax: ...

class OmittedArraySizeExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def OmittedArraySizeExpressionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, omittedArraySizeExpressionToken: CodeAnalysis.SyntaxToken) -> OmittedArraySizeExpressionSyntax: ...
    @overload
    def WithOmittedArraySizeExpressionToken(self, omittedArraySizeExpressionToken: CodeAnalysis.SyntaxToken) -> OmittedArraySizeExpressionSyntax: ...

class InterpolatedStringExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddContents(self, items: System.Array[InterpolatedStringContentSyntax]) -> InterpolatedStringExpressionSyntax: ...
    @property
    def Contents(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def StringEndToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StringStartToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, stringStartToken: CodeAnalysis.SyntaxToken, contents: CodeAnalysis.SyntaxList, stringEndToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithContents(self, contents: CodeAnalysis.SyntaxList) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithStringEndToken(self, stringEndToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithStringStartToken(self, stringStartToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...

class IsPatternExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def IsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, isKeyword: CodeAnalysis.SyntaxToken, pattern: PatternSyntax) -> IsPatternExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> IsPatternExpressionSyntax: ...
    @overload
    def WithIsKeyword(self, isKeyword: CodeAnalysis.SyntaxToken) -> IsPatternExpressionSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> IsPatternExpressionSyntax: ...

class ThrowExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ThrowKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, throwKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ThrowExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ThrowExpressionSyntax: ...
    @overload
    def WithThrowKeyword(self, throwKeyword: CodeAnalysis.SyntaxToken) -> ThrowExpressionSyntax: ...

class WhenClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def WhenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whenKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> WhenClauseSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhenClauseSyntax: ...
    @overload
    def WithWhenKeyword(self, whenKeyword: CodeAnalysis.SyntaxToken) -> WhenClauseSyntax: ...

class PatternSyntax(ExpressionOrPatternSyntax):
    """    """

class DiscardPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def UnderscoreToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, underscoreToken: CodeAnalysis.SyntaxToken) -> DiscardPatternSyntax: ...
    @overload
    def WithUnderscoreToken(self, underscoreToken: CodeAnalysis.SyntaxToken) -> DiscardPatternSyntax: ...

class DeclarationPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Designation(self) -> VariableDesignationSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax, designation: VariableDesignationSyntax) -> DeclarationPatternSyntax: ...
    @overload
    def WithDesignation(self, designation: VariableDesignationSyntax) -> DeclarationPatternSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> DeclarationPatternSyntax: ...

class VarPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Designation(self) -> VariableDesignationSyntax: ...
    @property
    def VarKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, varKeyword: CodeAnalysis.SyntaxToken, designation: VariableDesignationSyntax) -> VarPatternSyntax: ...
    @overload
    def WithDesignation(self, designation: VariableDesignationSyntax) -> VarPatternSyntax: ...
    @overload
    def WithVarKeyword(self, varKeyword: CodeAnalysis.SyntaxToken) -> VarPatternSyntax: ...

class RecursivePatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddPositionalPatternClauseSubpatterns(self, items: System.Array[SubpatternSyntax]) -> RecursivePatternSyntax: ...
    @overload
    def AddPropertyPatternClauseSubpatterns(self, items: System.Array[SubpatternSyntax]) -> RecursivePatternSyntax: ...
    @property
    def Designation(self) -> VariableDesignationSyntax: ...
    @property
    def PositionalPatternClause(self) -> PositionalPatternClauseSyntax: ...
    @property
    def PropertyPatternClause(self) -> PropertyPatternClauseSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax, positionalPatternClause: PositionalPatternClauseSyntax, propertyPatternClause: PropertyPatternClauseSyntax, designation: VariableDesignationSyntax) -> RecursivePatternSyntax: ...
    @overload
    def WithDesignation(self, designation: VariableDesignationSyntax) -> RecursivePatternSyntax: ...
    @overload
    def WithPositionalPatternClause(self, positionalPatternClause: PositionalPatternClauseSyntax) -> RecursivePatternSyntax: ...
    @overload
    def WithPropertyPatternClause(self, propertyPatternClause: PropertyPatternClauseSyntax) -> RecursivePatternSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> RecursivePatternSyntax: ...

class PositionalPatternClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddSubpatterns(self, items: System.Array[SubpatternSyntax]) -> PositionalPatternClauseSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Subpatterns(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, subpatterns: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> PositionalPatternClauseSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> PositionalPatternClauseSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> PositionalPatternClauseSyntax: ...
    @overload
    def WithSubpatterns(self, subpatterns: CodeAnalysis.SeparatedSyntaxList) -> PositionalPatternClauseSyntax: ...

class PropertyPatternClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddSubpatterns(self, items: System.Array[SubpatternSyntax]) -> PropertyPatternClauseSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Subpatterns(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, subpatterns: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> PropertyPatternClauseSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> PropertyPatternClauseSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> PropertyPatternClauseSyntax: ...
    @overload
    def WithSubpatterns(self, subpatterns: CodeAnalysis.SeparatedSyntaxList) -> PropertyPatternClauseSyntax: ...

class ConstantPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax) -> ConstantPatternSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ConstantPatternSyntax: ...

class ParenthesizedPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, pattern: PatternSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedPatternSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedPatternSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedPatternSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> ParenthesizedPatternSyntax: ...

class RelationalPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, operatorToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> RelationalPatternSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> RelationalPatternSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> RelationalPatternSyntax: ...

class TypePatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> TypePatternSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypePatternSyntax: ...

class BinaryPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Left(self) -> PatternSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Right(self) -> PatternSyntax: ...
    @overload
    def Update(self, left: PatternSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: PatternSyntax) -> BinaryPatternSyntax: ...
    @overload
    def WithLeft(self, left: PatternSyntax) -> BinaryPatternSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> BinaryPatternSyntax: ...
    @overload
    def WithRight(self, right: PatternSyntax) -> BinaryPatternSyntax: ...

class UnaryPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @overload
    def Update(self, operatorToken: CodeAnalysis.SyntaxToken, pattern: PatternSyntax) -> UnaryPatternSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> UnaryPatternSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> UnaryPatternSyntax: ...

class ListPatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddPatterns(self, items: System.Array[PatternSyntax]) -> ListPatternSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Designation(self) -> VariableDesignationSyntax: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Patterns(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, patterns: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken, designation: VariableDesignationSyntax) -> ListPatternSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> ListPatternSyntax: ...
    @overload
    def WithDesignation(self, designation: VariableDesignationSyntax) -> ListPatternSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> ListPatternSyntax: ...
    @overload
    def WithPatterns(self, patterns: CodeAnalysis.SeparatedSyntaxList) -> ListPatternSyntax: ...

class SlicePatternSyntax(PatternSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def DotDotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @overload
    def Update(self, dotDotToken: CodeAnalysis.SyntaxToken, pattern: PatternSyntax) -> SlicePatternSyntax: ...
    @overload
    def WithDotDotToken(self, dotDotToken: CodeAnalysis.SyntaxToken) -> SlicePatternSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> SlicePatternSyntax: ...

class InterpolatedStringContentSyntax(CSharp.CSharpSyntaxNode):
    """    """

class InterpolatedStringTextSyntax(InterpolatedStringContentSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def TextToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, textToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringTextSyntax: ...
    @overload
    def WithTextToken(self, textToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringTextSyntax: ...

class InterpolationSyntax(InterpolatedStringContentSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def AlignmentClause(self) -> InterpolationAlignmentClauseSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def FormatClause(self) -> InterpolationFormatClauseSyntax: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, alignmentClause: InterpolationAlignmentClauseSyntax, formatClause: InterpolationFormatClauseSyntax, closeBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...
    @overload
    def WithAlignmentClause(self, alignmentClause: InterpolationAlignmentClauseSyntax) -> InterpolationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> InterpolationSyntax: ...
    @overload
    def WithFormatClause(self, formatClause: InterpolationFormatClauseSyntax) -> InterpolationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...

class InterpolationAlignmentClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, commaToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> InterpolationAlignmentClauseSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> InterpolationAlignmentClauseSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> InterpolationAlignmentClauseSyntax: ...

class InterpolationFormatClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FormatStringToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, colonToken: CodeAnalysis.SyntaxToken, formatStringToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...
    @overload
    def WithFormatStringToken(self, formatStringToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...

class StatementSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> StatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> StatementSyntax: ...

class VariableDeclarationSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> VariableDeclarationSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, type_: TypeSyntax, variables: CodeAnalysis.SeparatedSyntaxList) -> VariableDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> VariableDeclarationSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> VariableDeclarationSyntax: ...

class VariableDeclaratorSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> VariableDeclaratorSyntax: ...
    @property
    def ArgumentList(self) -> BracketedArgumentListSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> EqualsValueClauseSyntax: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, argumentList: BracketedArgumentListSyntax, initializer: EqualsValueClauseSyntax) -> VariableDeclaratorSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: BracketedArgumentListSyntax) -> VariableDeclaratorSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> VariableDeclaratorSyntax: ...
    @overload
    def WithInitializer(self, initializer: EqualsValueClauseSyntax) -> VariableDeclaratorSyntax: ...

class EqualsValueClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, equalsToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> EqualsValueClauseSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> EqualsValueClauseSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> EqualsValueClauseSyntax: ...

class VariableDesignationSyntax(CSharp.CSharpSyntaxNode):
    """    """

class SingleVariableDesignationSyntax(VariableDesignationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken) -> SingleVariableDesignationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> SingleVariableDesignationSyntax: ...

class DiscardDesignationSyntax(VariableDesignationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def UnderscoreToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, underscoreToken: CodeAnalysis.SyntaxToken) -> DiscardDesignationSyntax: ...
    @overload
    def WithUnderscoreToken(self, underscoreToken: CodeAnalysis.SyntaxToken) -> DiscardDesignationSyntax: ...

class ParenthesizedVariableDesignationSyntax(VariableDesignationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddVariables(self, items: System.Array[VariableDesignationSyntax]) -> ParenthesizedVariableDesignationSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedVariableDesignationSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedVariableDesignationSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedVariableDesignationSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> ParenthesizedVariableDesignationSyntax: ...

class CommonForEachStatementSyntax(StatementSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> CommonForEachStatementSyntax: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ForEachKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> CommonForEachStatementSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> CommonForEachStatementSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CommonForEachStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CommonForEachStatementSyntax: ...
    @overload
    def WithForEachKeyword(self, forEachKeyword: CodeAnalysis.SyntaxToken) -> CommonForEachStatementSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> CommonForEachStatementSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CommonForEachStatementSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> CommonForEachStatementSyntax: ...

class ElseClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statement(self) -> StatementSyntax: ...
    @overload
    def Update(self, elseKeyword: CodeAnalysis.SyntaxToken, statement: StatementSyntax) -> ElseClauseSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseClauseSyntax: ...
    @overload
    def WithStatement(self, statement: StatementSyntax) -> ElseClauseSyntax: ...

class SwitchSectionSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddLabels(self, items: System.Array[SwitchLabelSyntax]) -> SwitchSectionSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> SwitchSectionSyntax: ...
    @property
    def Labels(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, labels: CodeAnalysis.SyntaxList, statements: CodeAnalysis.SyntaxList) -> SwitchSectionSyntax: ...
    @overload
    def WithLabels(self, labels: CodeAnalysis.SyntaxList) -> SwitchSectionSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> SwitchSectionSyntax: ...

class SwitchLabelSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> SwitchLabelSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> SwitchLabelSyntax: ...

class CasePatternSwitchLabelSyntax(SwitchLabelSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @property
    def WhenClause(self) -> WhenClauseSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, pattern: PatternSyntax, whenClause: WhenClauseSyntax, colonToken: CodeAnalysis.SyntaxToken) -> CasePatternSwitchLabelSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> CasePatternSwitchLabelSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CasePatternSwitchLabelSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> CasePatternSwitchLabelSyntax: ...
    @overload
    def WithWhenClause(self, whenClause: WhenClauseSyntax) -> CasePatternSwitchLabelSyntax: ...

class CaseSwitchLabelSyntax(SwitchLabelSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, value: ExpressionSyntax, colonToken: CodeAnalysis.SyntaxToken) -> CaseSwitchLabelSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> CaseSwitchLabelSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CaseSwitchLabelSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> CaseSwitchLabelSyntax: ...

class DefaultSwitchLabelSyntax(SwitchLabelSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> DefaultSwitchLabelSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> DefaultSwitchLabelSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> DefaultSwitchLabelSyntax: ...

class SwitchExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArms(self, items: System.Array[SwitchExpressionArmSyntax]) -> SwitchExpressionSyntax: ...
    @property
    def Arms(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GoverningExpression(self) -> ExpressionSyntax: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SwitchKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, governingExpression: ExpressionSyntax, switchKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, arms: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> SwitchExpressionSyntax: ...
    @overload
    def WithArms(self, arms: CodeAnalysis.SeparatedSyntaxList) -> SwitchExpressionSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> SwitchExpressionSyntax: ...
    @overload
    def WithGoverningExpression(self, governingExpression: ExpressionSyntax) -> SwitchExpressionSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> SwitchExpressionSyntax: ...
    @overload
    def WithSwitchKeyword(self, switchKeyword: CodeAnalysis.SyntaxToken) -> SwitchExpressionSyntax: ...

class SwitchExpressionArmSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EqualsGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Pattern(self) -> PatternSyntax: ...
    @property
    def WhenClause(self) -> WhenClauseSyntax: ...
    @overload
    def Update(self, pattern: PatternSyntax, whenClause: WhenClauseSyntax, equalsGreaterThanToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> SwitchExpressionArmSyntax: ...
    @overload
    def WithEqualsGreaterThanToken(self, equalsGreaterThanToken: CodeAnalysis.SyntaxToken) -> SwitchExpressionArmSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SwitchExpressionArmSyntax: ...
    @overload
    def WithPattern(self, pattern: PatternSyntax) -> SwitchExpressionArmSyntax: ...
    @overload
    def WithWhenClause(self, whenClause: WhenClauseSyntax) -> SwitchExpressionArmSyntax: ...

class CatchClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> CatchClauseSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> CatchClauseSyntax: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def CatchKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Declaration(self) -> CatchDeclarationSyntax: ...
    @property
    def Filter(self) -> CatchFilterClauseSyntax: ...
    @overload
    def Update(self, catchKeyword: CodeAnalysis.SyntaxToken, declaration: CatchDeclarationSyntax, filter_: CatchFilterClauseSyntax, block: BlockSyntax) -> CatchClauseSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> CatchClauseSyntax: ...
    @overload
    def WithCatchKeyword(self, catchKeyword: CodeAnalysis.SyntaxToken) -> CatchClauseSyntax: ...
    @overload
    def WithDeclaration(self, declaration: CatchDeclarationSyntax) -> CatchClauseSyntax: ...
    @overload
    def WithFilter(self, filter_: CatchFilterClauseSyntax) -> CatchClauseSyntax: ...

class CatchDeclarationSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, identifier: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> CatchDeclarationSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CatchDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> CatchDeclarationSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CatchDeclarationSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CatchDeclarationSyntax: ...

class CatchFilterClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FilterExpression(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whenKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, filterExpression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> CatchFilterClauseSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CatchFilterClauseSyntax: ...
    @overload
    def WithFilterExpression(self, filterExpression: ExpressionSyntax) -> CatchFilterClauseSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CatchFilterClauseSyntax: ...
    @overload
    def WithWhenKeyword(self, whenKeyword: CodeAnalysis.SyntaxToken) -> CatchFilterClauseSyntax: ...

class FinallyClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddBlockAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FinallyClauseSyntax: ...
    @overload
    def AddBlockStatements(self, items: System.Array[StatementSyntax]) -> FinallyClauseSyntax: ...
    @property
    def Block(self) -> BlockSyntax: ...
    @property
    def FinallyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, finallyKeyword: CodeAnalysis.SyntaxToken, block: BlockSyntax) -> FinallyClauseSyntax: ...
    @overload
    def WithBlock(self, block: BlockSyntax) -> FinallyClauseSyntax: ...
    @overload
    def WithFinallyKeyword(self, finallyKeyword: CodeAnalysis.SyntaxToken) -> FinallyClauseSyntax: ...

class ExternAliasDirectiveSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def AliasKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, externKeyword: CodeAnalysis.SyntaxToken, aliasKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> ExternAliasDirectiveSyntax: ...
    @overload
    def WithAliasKeyword(self, aliasKeyword: CodeAnalysis.SyntaxToken) -> ExternAliasDirectiveSyntax: ...
    @overload
    def WithExternKeyword(self, externKeyword: CodeAnalysis.SyntaxToken) -> ExternAliasDirectiveSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ExternAliasDirectiveSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> ExternAliasDirectiveSyntax: ...

class MemberDeclarationSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> MemberDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> MemberDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> MemberDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> MemberDeclarationSyntax: ...

class BaseNamespaceDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def AddExterns(self, items: System.Array[ExternAliasDirectiveSyntax]) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def AddUsings(self, items: System.Array[UsingDirectiveSyntax]) -> BaseNamespaceDeclarationSyntax: ...
    @property
    def Externs(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Name(self) -> NameSyntax: ...
    @property
    def NamespaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Usings(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithExterns(self, externs: CodeAnalysis.SyntaxList) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithNamespaceKeyword(self, namespaceKeyword: CodeAnalysis.SyntaxToken) -> BaseNamespaceDeclarationSyntax: ...
    @overload
    def WithUsings(self, usings: CodeAnalysis.SyntaxList) -> BaseNamespaceDeclarationSyntax: ...

class FileScopedNamespaceDeclarationSyntax(BaseNamespaceDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def AddExterns(self, items: System.Array[ExternAliasDirectiveSyntax]) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[MemberDeclarationSyntax]) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def AddUsings(self, items: System.Array[UsingDirectiveSyntax]) -> FileScopedNamespaceDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Externs(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Name(self) -> NameSyntax: ...
    @property
    def NamespaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Usings(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, namespaceKeyword: CodeAnalysis.SyntaxToken, name: NameSyntax, semicolonToken: CodeAnalysis.SyntaxToken, externs: CodeAnalysis.SyntaxList, usings: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithExterns(self, externs: CodeAnalysis.SyntaxList) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithNamespaceKeyword(self, namespaceKeyword: CodeAnalysis.SyntaxToken) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> FileScopedNamespaceDeclarationSyntax: ...
    @overload
    def WithUsings(self, usings: CodeAnalysis.SyntaxList) -> FileScopedNamespaceDeclarationSyntax: ...

class AttributeListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[AttributeSyntax]) -> AttributeListSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Target(self) -> AttributeTargetSpecifierSyntax: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, target: AttributeTargetSpecifierSyntax, attributes: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SeparatedSyntaxList) -> AttributeListSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...
    @overload
    def WithTarget(self, target: AttributeTargetSpecifierSyntax) -> AttributeListSyntax: ...

class AttributeArgumentListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[AttributeArgumentSyntax]) -> AttributeArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> AttributeArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> AttributeArgumentListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> AttributeArgumentListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> AttributeArgumentListSyntax: ...

class AttributeArgumentSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def NameColon(self) -> NameColonSyntax: ...
    @property
    def NameEquals(self) -> NameEqualsSyntax: ...
    @overload
    def Update(self, nameEquals: NameEqualsSyntax, nameColon: NameColonSyntax, expression: ExpressionSyntax) -> AttributeArgumentSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> AttributeArgumentSyntax: ...
    @overload
    def WithNameColon(self, nameColon: NameColonSyntax) -> AttributeArgumentSyntax: ...
    @overload
    def WithNameEquals(self, nameEquals: NameEqualsSyntax) -> AttributeArgumentSyntax: ...

class NameEqualsSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @overload
    def Update(self, name: IdentifierNameSyntax, equalsToken: CodeAnalysis.SyntaxToken) -> NameEqualsSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> NameEqualsSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> NameEqualsSyntax: ...

class TypeParameterListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[TypeParameterSyntax]) -> TypeParameterListSyntax: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> TypeParameterListSyntax: ...

class TypeParameterSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> TypeParameterSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def VarianceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, varianceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> TypeParameterSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> TypeParameterSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> TypeParameterSyntax: ...
    @overload
    def WithVarianceKeyword(self, varianceKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterSyntax: ...

class BaseTypeDeclarationSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseTypeDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> BaseTypeDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BaseTypeDeclarationSyntax: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> BaseTypeDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> BaseTypeDeclarationSyntax: ...

class EnumDeclarationSyntax(BaseTypeDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EnumDeclarationSyntax: ...
    @overload
    def AddBaseListTypes(self, items: System.Array[BaseTypeSyntax]) -> EnumDeclarationSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[EnumMemberDeclarationSyntax]) -> EnumDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EnumDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def BaseList(self) -> BaseListSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EnumKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Members(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, enumKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, baseList: BaseListSyntax, openBraceToken: CodeAnalysis.SyntaxToken, members: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken, semicolonToken: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EnumDeclarationSyntax: ...
    @overload
    def WithBaseList(self, baseList: BaseListSyntax) -> EnumDeclarationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...
    @overload
    def WithEnumKeyword(self, enumKeyword: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SeparatedSyntaxList) -> EnumDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EnumDeclarationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> EnumDeclarationSyntax: ...

class BaseListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTypes(self, items: System.Array[BaseTypeSyntax]) -> BaseListSyntax: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Types(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, colonToken: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> BaseListSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> BaseListSyntax: ...
    @overload
    def WithTypes(self, types: CodeAnalysis.SeparatedSyntaxList) -> BaseListSyntax: ...

class BaseTypeSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> BaseTypeSyntax: ...

class SimpleBaseTypeSyntax(BaseTypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> SimpleBaseTypeSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> SimpleBaseTypeSyntax: ...

class PrimaryConstructorBaseTypeSyntax(BaseTypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> PrimaryConstructorBaseTypeSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax, argumentList: ArgumentListSyntax) -> PrimaryConstructorBaseTypeSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> PrimaryConstructorBaseTypeSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> PrimaryConstructorBaseTypeSyntax: ...

class TypeParameterConstraintClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddConstraints(self, items: System.Array[TypeParameterConstraintSyntax]) -> TypeParameterConstraintClauseSyntax: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Constraints(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @property
    def WhereKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whereKeyword: CodeAnalysis.SyntaxToken, name: IdentifierNameSyntax, colonToken: CodeAnalysis.SyntaxToken, constraints: CodeAnalysis.SeparatedSyntaxList) -> TypeParameterConstraintClauseSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> TypeParameterConstraintClauseSyntax: ...
    @overload
    def WithConstraints(self, constraints: CodeAnalysis.SeparatedSyntaxList) -> TypeParameterConstraintClauseSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> TypeParameterConstraintClauseSyntax: ...
    @overload
    def WithWhereKeyword(self, whereKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterConstraintClauseSyntax: ...

class TypeParameterConstraintSyntax(CSharp.CSharpSyntaxNode):
    """    """

class ConstructorConstraintSyntax(TypeParameterConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> ConstructorConstraintSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ConstructorConstraintSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ConstructorConstraintSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ConstructorConstraintSyntax: ...

class TypeConstraintSyntax(TypeParameterConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> TypeConstraintSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypeConstraintSyntax: ...

class DefaultConstraintSyntax(TypeParameterConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def DefaultKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, defaultKeyword: CodeAnalysis.SyntaxToken) -> DefaultConstraintSyntax: ...
    @overload
    def WithDefaultKeyword(self, defaultKeyword: CodeAnalysis.SyntaxToken) -> DefaultConstraintSyntax: ...

class FieldDeclarationSyntax(BaseFieldDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FieldDeclarationSyntax: ...
    @overload
    def AddDeclarationVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> FieldDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> FieldDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declaration: VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> FieldDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> FieldDeclarationSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> FieldDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> FieldDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> FieldDeclarationSyntax: ...

class EventFieldDeclarationSyntax(BaseFieldDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EventFieldDeclarationSyntax: ...
    @overload
    def AddDeclarationVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> EventFieldDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EventFieldDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Declaration(self) -> VariableDeclarationSyntax: ...
    @property
    def EventKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def SemicolonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, eventKeyword: CodeAnalysis.SyntaxToken, declaration: VariableDeclarationSyntax, semicolonToken: CodeAnalysis.SyntaxToken) -> EventFieldDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EventFieldDeclarationSyntax: ...
    @overload
    def WithDeclaration(self, declaration: VariableDeclarationSyntax) -> EventFieldDeclarationSyntax: ...
    @overload
    def WithEventKeyword(self, eventKeyword: CodeAnalysis.SyntaxToken) -> EventFieldDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EventFieldDeclarationSyntax: ...
    @overload
    def WithSemicolonToken(self, semicolonToken: CodeAnalysis.SyntaxToken) -> EventFieldDeclarationSyntax: ...

class ExplicitInterfaceSpecifierSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> NameSyntax: ...
    @overload
    def Update(self, name: NameSyntax, dotToken: CodeAnalysis.SyntaxToken) -> ExplicitInterfaceSpecifierSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> ExplicitInterfaceSpecifierSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> ExplicitInterfaceSpecifierSyntax: ...

class ConstructorInitializerSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ConstructorInitializerSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThisOrBaseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, colonToken: CodeAnalysis.SyntaxToken, thisOrBaseKeyword: CodeAnalysis.SyntaxToken, argumentList: ArgumentListSyntax) -> ConstructorInitializerSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> ConstructorInitializerSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> ConstructorInitializerSyntax: ...
    @overload
    def WithThisOrBaseKeyword(self, thisOrBaseKeyword: CodeAnalysis.SyntaxToken) -> ConstructorInitializerSyntax: ...

class ArrowExpressionClauseSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ArrowToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, arrowToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ArrowExpressionClauseSyntax: ...
    @overload
    def WithArrowToken(self, arrowToken: CodeAnalysis.SyntaxToken) -> ArrowExpressionClauseSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ArrowExpressionClauseSyntax: ...

class AccessorListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAccessors(self, items: System.Array[AccessorDeclarationSyntax]) -> AccessorListSyntax: ...
    @property
    def Accessors(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, accessors: CodeAnalysis.SyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> AccessorListSyntax: ...
    @overload
    def WithAccessors(self, accessors: CodeAnalysis.SyntaxList) -> AccessorListSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> AccessorListSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> AccessorListSyntax: ...

class BaseParameterListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddParameters(self, items: System.Array[ParameterSyntax]) -> BaseParameterListSyntax: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> BaseParameterListSyntax: ...

class BracketedParameterListSyntax(BaseParameterListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[ParameterSyntax]) -> BracketedParameterListSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> BracketedParameterListSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> BracketedParameterListSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> BracketedParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> BracketedParameterListSyntax: ...

class BaseParameterSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> BaseParameterSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> BaseParameterSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> BaseParameterSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> BaseParameterSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> BaseParameterSyntax: ...

class FunctionPointerParameterSyntax(BaseParameterSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FunctionPointerParameterSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> FunctionPointerParameterSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: TypeSyntax) -> FunctionPointerParameterSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> FunctionPointerParameterSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> FunctionPointerParameterSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> FunctionPointerParameterSyntax: ...

class IncompleteMemberSyntax(MemberDeclarationSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> IncompleteMemberSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> IncompleteMemberSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, type_: TypeSyntax) -> IncompleteMemberSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> IncompleteMemberSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> IncompleteMemberSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> IncompleteMemberSyntax: ...

class DocumentationCommentTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddContent(self, items: System.Array[XmlNodeSyntax]) -> DocumentationCommentTriviaSyntax: ...
    @property
    def Content(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndOfComment(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, content: CodeAnalysis.SyntaxList, endOfComment: CodeAnalysis.SyntaxToken) -> DocumentationCommentTriviaSyntax: ...
    @overload
    def WithContent(self, content: CodeAnalysis.SyntaxList) -> DocumentationCommentTriviaSyntax: ...
    @overload
    def WithEndOfComment(self, endOfComment: CodeAnalysis.SyntaxToken) -> DocumentationCommentTriviaSyntax: ...

class CrefSyntax(CSharp.CSharpSyntaxNode):
    """    """

class TypeCrefSyntax(CrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> TypeCrefSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypeCrefSyntax: ...

class QualifiedCrefSyntax(CrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Container(self) -> TypeSyntax: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Member(self) -> MemberCrefSyntax: ...
    @overload
    def Update(self, container: TypeSyntax, dotToken: CodeAnalysis.SyntaxToken, member: MemberCrefSyntax) -> QualifiedCrefSyntax: ...
    @overload
    def WithContainer(self, container: TypeSyntax) -> QualifiedCrefSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> QualifiedCrefSyntax: ...
    @overload
    def WithMember(self, member: MemberCrefSyntax) -> QualifiedCrefSyntax: ...

class MemberCrefSyntax(CrefSyntax):
    """    """

class NameMemberCrefSyntax(MemberCrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParametersParameters(self, items: System.Array[CrefParameterSyntax]) -> NameMemberCrefSyntax: ...
    @property
    def Name(self) -> TypeSyntax: ...
    @property
    def Parameters(self) -> CrefParameterListSyntax: ...
    @overload
    def Update(self, name: TypeSyntax, parameters: CrefParameterListSyntax) -> NameMemberCrefSyntax: ...
    @overload
    def WithName(self, name: TypeSyntax) -> NameMemberCrefSyntax: ...
    @overload
    def WithParameters(self, parameters: CrefParameterListSyntax) -> NameMemberCrefSyntax: ...

class IndexerMemberCrefSyntax(MemberCrefSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParametersParameters(self, items: System.Array[CrefParameterSyntax]) -> IndexerMemberCrefSyntax: ...
    @property
    def Parameters(self) -> CrefBracketedParameterListSyntax: ...
    @property
    def ThisKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, thisKeyword: CodeAnalysis.SyntaxToken, parameters: CrefBracketedParameterListSyntax) -> IndexerMemberCrefSyntax: ...
    @overload
    def WithParameters(self, parameters: CrefBracketedParameterListSyntax) -> IndexerMemberCrefSyntax: ...
    @overload
    def WithThisKeyword(self, thisKeyword: CodeAnalysis.SyntaxToken) -> IndexerMemberCrefSyntax: ...

class BaseCrefParameterListSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def AddParameters(self, items: System.Array[CrefParameterSyntax]) -> BaseCrefParameterListSyntax: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> BaseCrefParameterListSyntax: ...

class CrefParameterListSyntax(BaseCrefParameterListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[CrefParameterSyntax]) -> CrefParameterListSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> CrefParameterListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CrefParameterListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CrefParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> CrefParameterListSyntax: ...

class CrefBracketedParameterListSyntax(BaseCrefParameterListSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[CrefParameterSyntax]) -> CrefBracketedParameterListSyntax: ...
    @property
    def CloseBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenBracketToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openBracketToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeBracketToken: CodeAnalysis.SyntaxToken) -> CrefBracketedParameterListSyntax: ...
    @overload
    def WithCloseBracketToken(self, closeBracketToken: CodeAnalysis.SyntaxToken) -> CrefBracketedParameterListSyntax: ...
    @overload
    def WithOpenBracketToken(self, openBracketToken: CodeAnalysis.SyntaxToken) -> CrefBracketedParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> CrefBracketedParameterListSyntax: ...

class XmlNodeSyntax(CSharp.CSharpSyntaxNode):
    """    """

class XmlElementSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddContent(self, items: System.Array[XmlNodeSyntax]) -> XmlElementSyntax: ...
    @overload
    def AddStartTagAttributes(self, items: System.Array[XmlAttributeSyntax]) -> XmlElementSyntax: ...
    @property
    def Content(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndTag(self) -> XmlElementEndTagSyntax: ...
    @property
    def StartTag(self) -> XmlElementStartTagSyntax: ...
    @overload
    def Update(self, startTag: XmlElementStartTagSyntax, content: CodeAnalysis.SyntaxList, endTag: XmlElementEndTagSyntax) -> XmlElementSyntax: ...
    @overload
    def WithContent(self, content: CodeAnalysis.SyntaxList) -> XmlElementSyntax: ...
    @overload
    def WithEndTag(self, endTag: XmlElementEndTagSyntax) -> XmlElementSyntax: ...
    @overload
    def WithStartTag(self, startTag: XmlElementStartTagSyntax) -> XmlElementSyntax: ...

class XmlElementStartTagSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[XmlAttributeSyntax]) -> XmlElementStartTagSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, attributes: CodeAnalysis.SyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SyntaxList) -> XmlElementStartTagSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlElementStartTagSyntax: ...

class XmlElementEndTagSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanSlashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @overload
    def Update(self, lessThanSlashToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithLessThanSlashToken(self, lessThanSlashToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlElementEndTagSyntax: ...

class XmlEmptyElementSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[XmlAttributeSyntax]) -> XmlEmptyElementSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def SlashGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, attributes: CodeAnalysis.SyntaxList, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SyntaxList) -> XmlEmptyElementSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlEmptyElementSyntax: ...
    @overload
    def WithSlashGreaterThanToken(self, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...

class XmlNameSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def LocalName(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Prefix(self) -> XmlPrefixSyntax: ...
    @overload
    def Update(self, prefix: XmlPrefixSyntax, localName: CodeAnalysis.SyntaxToken) -> XmlNameSyntax: ...
    @overload
    def WithLocalName(self, localName: CodeAnalysis.SyntaxToken) -> XmlNameSyntax: ...
    @overload
    def WithPrefix(self, prefix: XmlPrefixSyntax) -> XmlNameSyntax: ...

class XmlPrefixSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Prefix(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, prefix: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...
    @overload
    def WithPrefix(self, prefix: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...

class XmlAttributeSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlAttributeSyntax: ...

class XmlTextAttributeSyntax(XmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlTextAttributeSyntax: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, name: XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlTextAttributeSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlTextAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlTextAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlTextAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlTextAttributeSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlTextAttributeSyntax: ...

class XmlCrefAttributeSyntax(XmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Cref(self) -> CrefSyntax: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, cref: CrefSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithCref(self, cref: CrefSyntax) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...

class XmlNameAttributeSyntax(XmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> IdentifierNameSyntax: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, identifier: IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithIdentifier(self, identifier: IdentifierNameSyntax) -> XmlNameAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlNameAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...

class XmlTextSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlTextSyntax: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlTextSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlTextSyntax: ...

class XmlCDataSectionSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlCDataSectionSyntax: ...
    @property
    def EndCDataToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StartCDataToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, startCDataToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithEndCDataToken(self, endCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithStartCDataToken(self, startCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlCDataSectionSyntax: ...

class XmlProcessingInstructionSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlProcessingInstructionSyntax: ...
    @property
    def EndProcessingInstructionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def StartProcessingInstructionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, startProcessingInstructionToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, textTokens: CodeAnalysis.SyntaxTokenList, endProcessingInstructionToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithEndProcessingInstructionToken(self, endProcessingInstructionToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithStartProcessingInstructionToken(self, startProcessingInstructionToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlProcessingInstructionSyntax: ...

class XmlCommentSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlCommentSyntax: ...
    @property
    def LessThanExclamationMinusMinusToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def MinusMinusGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithLessThanExclamationMinusMinusToken(self, lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithMinusMinusGreaterThanToken(self, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlCommentSyntax: ...

class BranchingDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @property
    def BranchTaken(self) -> bool: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> BranchingDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> BranchingDirectiveTriviaSyntax: ...

class ConditionalDirectiveTriviaSyntax(BranchingDirectiveTriviaSyntax):
    """    """
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ConditionValue(self) -> bool: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> ConditionalDirectiveTriviaSyntax: ...

class IfDirectiveTriviaSyntax(ConditionalDirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @property
    def BranchTaken(self) -> bool: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ConditionValue(self) -> bool: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, ifKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool, conditionValue: bool) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithBranchTaken(self, branchTaken: bool) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithConditionValue(self, conditionValue: bool) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> IfDirectiveTriviaSyntax: ...

class ElifDirectiveTriviaSyntax(ConditionalDirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @property
    def BranchTaken(self) -> bool: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ConditionValue(self) -> bool: ...
    @property
    def ElifKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, elifKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool, conditionValue: bool) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithBranchTaken(self, branchTaken: bool) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithConditionValue(self, conditionValue: bool) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithElifKeyword(self, elifKeyword: CodeAnalysis.SyntaxToken) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ElifDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> ElifDirectiveTriviaSyntax: ...

class ElseDirectiveTriviaSyntax(BranchingDirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @property
    def BranchTaken(self) -> bool: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool, branchTaken: bool) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithBranchTaken(self, branchTaken: bool) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> ElseDirectiveTriviaSyntax: ...

class EndIfDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndIfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, endIfKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithEndIfKeyword(self, endIfKeyword: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> EndIfDirectiveTriviaSyntax: ...

class RegionDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def RegionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithRegionKeyword(self, regionKeyword: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...

class EndRegionDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndRegionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, endRegionKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithEndRegionKeyword(self, endRegionKeyword: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> EndRegionDirectiveTriviaSyntax: ...

class ErrorDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ErrorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> ErrorDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> ErrorDirectiveTriviaSyntax: ...
    @overload
    def WithErrorKeyword(self, errorKeyword: CodeAnalysis.SyntaxToken) -> ErrorDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ErrorDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> ErrorDirectiveTriviaSyntax: ...

class WarningDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def WarningKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> WarningDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> WarningDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> WarningDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> WarningDirectiveTriviaSyntax: ...
    @overload
    def WithWarningKeyword(self, warningKeyword: CodeAnalysis.SyntaxToken) -> WarningDirectiveTriviaSyntax: ...

class BadDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> BadDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> BadDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> BadDirectiveTriviaSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> BadDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> BadDirectiveTriviaSyntax: ...

class DefineDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def DefineKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, defineKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> DefineDirectiveTriviaSyntax: ...
    @overload
    def WithDefineKeyword(self, defineKeyword: CodeAnalysis.SyntaxToken) -> DefineDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> DefineDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> DefineDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> DefineDirectiveTriviaSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> DefineDirectiveTriviaSyntax: ...

class UndefDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UndefKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, undefKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> UndefDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> UndefDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> UndefDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> UndefDirectiveTriviaSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> UndefDirectiveTriviaSyntax: ...
    @overload
    def WithUndefKeyword(self, undefKeyword: CodeAnalysis.SyntaxToken) -> UndefDirectiveTriviaSyntax: ...

class LineOrSpanDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LineKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> LineOrSpanDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> LineOrSpanDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> LineOrSpanDirectiveTriviaSyntax: ...
    @overload
    def WithLineKeyword(self, lineKeyword: CodeAnalysis.SyntaxToken) -> LineOrSpanDirectiveTriviaSyntax: ...

class LineDirectiveTriviaSyntax(LineOrSpanDirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def Line(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LineKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, lineKeyword: CodeAnalysis.SyntaxToken, line: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithLine(self, line: CodeAnalysis.SyntaxToken) -> LineDirectiveTriviaSyntax: ...
    @overload
    def WithLineKeyword(self, lineKeyword: CodeAnalysis.SyntaxToken) -> LineDirectiveTriviaSyntax: ...

class LineDirectivePositionSyntax(CSharp.CSharpSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Character(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Line(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, line: CodeAnalysis.SyntaxToken, commaToken: CodeAnalysis.SyntaxToken, character: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...
    @overload
    def WithCharacter(self, character: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...
    @overload
    def WithLine(self, line: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> LineDirectivePositionSyntax: ...

class LineSpanDirectiveTriviaSyntax(LineOrSpanDirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def CharacterOffset(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def End(self) -> LineDirectivePositionSyntax: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def LineKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def MinusToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Start(self) -> LineDirectivePositionSyntax: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, lineKeyword: CodeAnalysis.SyntaxToken, start: LineDirectivePositionSyntax, minusToken: CodeAnalysis.SyntaxToken, end: LineDirectivePositionSyntax, characterOffset: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithCharacterOffset(self, characterOffset: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithEnd(self, end: LineDirectivePositionSyntax) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithLineKeyword(self, lineKeyword: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithMinusToken(self, minusToken: CodeAnalysis.SyntaxToken) -> LineSpanDirectiveTriviaSyntax: ...
    @overload
    def WithStart(self, start: LineDirectivePositionSyntax) -> LineSpanDirectiveTriviaSyntax: ...

class PragmaWarningDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def AddErrorCodes(self, items: System.Array[ExpressionSyntax]) -> PragmaWarningDirectiveTriviaSyntax: ...
    @property
    def DisableOrRestoreKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ErrorCodes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def PragmaKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WarningKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, pragmaKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, disableOrRestoreKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithDisableOrRestoreKeyword(self, disableOrRestoreKeyword: CodeAnalysis.SyntaxToken) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithErrorCodes(self, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithPragmaKeyword(self, pragmaKeyword: CodeAnalysis.SyntaxToken) -> PragmaWarningDirectiveTriviaSyntax: ...
    @overload
    def WithWarningKeyword(self, warningKeyword: CodeAnalysis.SyntaxToken) -> PragmaWarningDirectiveTriviaSyntax: ...

class PragmaChecksumDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def Bytes(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ChecksumKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Guid(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def PragmaKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, pragmaKeyword: CodeAnalysis.SyntaxToken, checksumKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, guid: CodeAnalysis.SyntaxToken, bytes_: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithBytes(self, bytes_: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithChecksumKeyword(self, checksumKeyword: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithGuid(self, guid: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> PragmaChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithPragmaKeyword(self, pragmaKeyword: CodeAnalysis.SyntaxToken) -> PragmaChecksumDirectiveTriviaSyntax: ...

class ReferenceDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def ReferenceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, referenceKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithReferenceKeyword(self, referenceKeyword: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...

class LoadDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def LoadKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, loadKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> LoadDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> LoadDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> LoadDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> LoadDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> LoadDirectiveTriviaSyntax: ...
    @overload
    def WithLoadKeyword(self, loadKeyword: CodeAnalysis.SyntaxToken) -> LoadDirectiveTriviaSyntax: ...

class ShebangDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExclamationToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, exclamationToken: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> ShebangDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> ShebangDirectiveTriviaSyntax: ...
    @overload
    def WithExclamationToken(self, exclamationToken: CodeAnalysis.SyntaxToken) -> ShebangDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ShebangDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> ShebangDirectiveTriviaSyntax: ...

class NullableDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: CSharp.CSharpSyntaxVisitor) -> TResult: ...
    @property
    def EndOfDirectiveToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def NullableKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SettingToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TargetToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, nullableKeyword: CodeAnalysis.SyntaxToken, settingToken: CodeAnalysis.SyntaxToken, targetToken: CodeAnalysis.SyntaxToken, endOfDirectiveToken: CodeAnalysis.SyntaxToken, isActive: bool) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithEndOfDirectiveToken(self, endOfDirectiveToken: CodeAnalysis.SyntaxToken) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithIsActive(self, isActive: bool) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithNullableKeyword(self, nullableKeyword: CodeAnalysis.SyntaxToken) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithSettingToken(self, settingToken: CodeAnalysis.SyntaxToken) -> NullableDirectiveTriviaSyntax: ...
    @overload
    def WithTargetToken(self, targetToken: CodeAnalysis.SyntaxToken) -> NullableDirectiveTriviaSyntax: ...

# endregion
