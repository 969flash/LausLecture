"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["EmitResult", "DebugInformationFormat", "EditAndContinueMethodDebugInformation", "EmitBaseline", "EmitDifferenceResult", "EmitOptions", "InstrumentationKind", "MethodInstrumentation", "SemanticEdit", "SemanticEditKind"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from System import Text
from System.Collections import Immutable
from System.Runtime import CompilerServices
from System.Security import Cryptography
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis, Version=4.6.0.0

class EmitResult(object):
    """    """
    @property
    def Diagnostics(self) -> Immutable.ImmutableArray: ...
    @property
    def Success(self) -> bool: ...

class DebugInformationFormat(enum.Enum):
    Pdb = 1
    PortablePdb = 2
    Embedded = 3

class EditAndContinueMethodDebugInformation(System.ValueType):
    """    """
    @overload
    @staticmethod
    def Create(compressedSlotMap: Immutable.ImmutableArray, compressedLambdaMap: Immutable.ImmutableArray) -> EditAndContinueMethodDebugInformation: ...
    @overload
    @staticmethod
    def Create(compressedSlotMap: Immutable.ImmutableArray, compressedLambdaMap: Immutable.ImmutableArray, compressedStateMachineStateMap: Immutable.ImmutableArray) -> EditAndContinueMethodDebugInformation: ...

class EmitBaseline(object):
    """    """
    @overload
    @staticmethod
    def CreateInitialBaseline(module: CodeAnalysis.ModuleMetadata, debugInformationProvider: System.Func) -> EmitBaseline: ...
    @overload
    @staticmethod
    def CreateInitialBaseline(module: CodeAnalysis.ModuleMetadata, debugInformationProvider: System.Func, localSignatureProvider: System.Func, hasPortableDebugInformation: bool) -> EmitBaseline: ...
    @property
    def OriginalMetadata(self) -> CodeAnalysis.ModuleMetadata: ...

class EmitDifferenceResult(EmitResult):
    """    """
    @property
    def Baseline(self) -> EmitBaseline: ...
    @property
    def ChangedTypes(self) -> Immutable.ImmutableArray: ...
    @property
    def UpdatedMethods(self) -> Immutable.ImmutableArray: ...

class EmitOptions(object):
    """    """
    @overload
    def __init__(self, metadataOnly: bool, debugInformationFormat: DebugInformationFormat, pdbFilePath: str, outputNameOverride: str, fileAlignment: int, baseAddress: System.UInt64, highEntropyVirtualAddressSpace: bool, subsystemVersion: CodeAnalysis.SubsystemVersion, runtimeMetadataVersion: str, tolerateErrors: bool, includePrivateMembers: bool): ...
    @overload
    def __init__(self, metadataOnly: bool, debugInformationFormat: DebugInformationFormat, pdbFilePath: str, outputNameOverride: str, fileAlignment: int, baseAddress: System.UInt64, highEntropyVirtualAddressSpace: bool, subsystemVersion: CodeAnalysis.SubsystemVersion, runtimeMetadataVersion: str, tolerateErrors: bool, includePrivateMembers: bool, instrumentationKinds: Immutable.ImmutableArray): ...
    @overload
    def __init__(self, metadataOnly: bool, debugInformationFormat: DebugInformationFormat, pdbFilePath: str, outputNameOverride: str, fileAlignment: int, baseAddress: System.UInt64, highEntropyVirtualAddressSpace: bool, subsystemVersion: CodeAnalysis.SubsystemVersion, runtimeMetadataVersion: str, tolerateErrors: bool, includePrivateMembers: bool, instrumentationKinds: Immutable.ImmutableArray, pdbChecksumAlgorithm: System.Nullable): ...
    @overload
    def __init__(self, metadataOnly: bool, debugInformationFormat: DebugInformationFormat, pdbFilePath: str, outputNameOverride: str, fileAlignment: int, baseAddress: System.UInt64, highEntropyVirtualAddressSpace: bool, subsystemVersion: CodeAnalysis.SubsystemVersion, runtimeMetadataVersion: str, tolerateErrors: bool, includePrivateMembers: bool, instrumentationKinds: Immutable.ImmutableArray, pdbChecksumAlgorithm: System.Nullable, defaultSourceFileEncoding: Text.Encoding, fallbackSourceFileEncoding: Text.Encoding): ...
    @overload
    def Equals(self, other: EmitOptions) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BaseAddress(self) -> System.UInt64: ...
    @property
    def DebugInformationFormat(self) -> DebugInformationFormat: ...
    @property
    def DefaultSourceFileEncoding(self) -> Text.Encoding: ...
    @property
    def EmitMetadataOnly(self) -> bool: ...
    @property
    def FallbackSourceFileEncoding(self) -> Text.Encoding: ...
    @property
    def FileAlignment(self) -> int: ...
    @property
    def HighEntropyVirtualAddressSpace(self) -> bool: ...
    @property
    def IncludePrivateMembers(self) -> bool: ...
    @property
    def InstrumentationKinds(self) -> Immutable.ImmutableArray: ...
    @property
    def OutputNameOverride(self) -> str: ...
    @property
    def PdbChecksumAlgorithm(self) -> Cryptography.HashAlgorithmName: ...
    @property
    def PdbFilePath(self) -> str: ...
    @property
    def RuntimeMetadataVersion(self) -> str: ...
    @property
    def SubsystemVersion(self) -> CodeAnalysis.SubsystemVersion: ...
    @property
    def TolerateErrors(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithBaseAddress(self, value: System.UInt64) -> EmitOptions: ...
    @overload
    def WithDebugInformationFormat(self, format_: DebugInformationFormat) -> EmitOptions: ...
    @overload
    def WithDefaultSourceFileEncoding(self, defaultSourceFileEncoding: Text.Encoding) -> EmitOptions: ...
    @overload
    def WithEmitMetadataOnly(self, value: bool) -> EmitOptions: ...
    @overload
    def WithFallbackSourceFileEncoding(self, fallbackSourceFileEncoding: Text.Encoding) -> EmitOptions: ...
    @overload
    def WithFileAlignment(self, value: int) -> EmitOptions: ...
    @overload
    def WithHighEntropyVirtualAddressSpace(self, value: bool) -> EmitOptions: ...
    @overload
    def WithIncludePrivateMembers(self, value: bool) -> EmitOptions: ...
    @overload
    def WithInstrumentationKinds(self, instrumentationKinds: Immutable.ImmutableArray) -> EmitOptions: ...
    @overload
    def WithOutputNameOverride(self, outputName: str) -> EmitOptions: ...
    @overload
    def WithPdbChecksumAlgorithm(self, name: Cryptography.HashAlgorithmName) -> EmitOptions: ...
    @overload
    def WithPdbFilePath(self, path: str) -> EmitOptions: ...
    @overload
    def WithRuntimeMetadataVersion(self, version: str) -> EmitOptions: ...
    @overload
    def WithSubsystemVersion(self, subsystemVersion: CodeAnalysis.SubsystemVersion) -> EmitOptions: ...
    @overload
    def WithTolerateErrors(self, value: bool) -> EmitOptions: ...

class InstrumentationKind(enum.Enum):
    None_ = 0
    TestCoverage = 1

class MethodInstrumentation(System.ValueType):
    """    """
    @property
    def Kinds(self) -> Immutable.ImmutableArray: ...
    @Kinds.setter
    def Kinds(self, value: System.Void): ...

class SemanticEdit(System.ValueType):
    """    """
    @overload
    def __init__(self, kind: SemanticEditKind, oldSymbol: CodeAnalysis.ISymbol, newSymbol: CodeAnalysis.ISymbol, syntaxMap: System.Func, preserveLocalVariables: bool): ...
    @overload
    def __init__(self, kind: SemanticEditKind, oldSymbol: CodeAnalysis.ISymbol, newSymbol: CodeAnalysis.ISymbol, syntaxMap: System.Func, preserveLocalVariables: bool, instrumentation: MethodInstrumentation): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SemanticEdit) -> bool: ...
    @property
    def Instrumentation(self) -> MethodInstrumentation: ...
    @property
    def Kind(self) -> SemanticEditKind: ...
    @property
    def NewSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def OldSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def PreserveLocalVariables(self) -> bool: ...
    @property
    def SyntaxMap(self) -> System.Func: ...
    @overload
    def GetHashCode() -> int: ...

class SemanticEditKind(enum.Enum):
    None_ = 0
    Update = 1
    Insert = 2
    Delete = 3
    Replace = 4

# endregion
