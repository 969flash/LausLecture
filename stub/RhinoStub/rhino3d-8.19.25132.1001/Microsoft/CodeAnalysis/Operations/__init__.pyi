"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IInvalidOperation", "IBlockOperation", "IVariableDeclarationGroupOperation", "ISwitchOperation", "ILoopOperation", "IForEachLoopOperation", "IForLoopOperation", "IForToLoopOperation", "IWhileLoopOperation", "ILabeledOperation", "IBranchOperation", "IEmptyOperation", "IReturnOperation", "ILockOperation", "ITryOperation", "IUsingOperation", "IExpressionStatementOperation", "ILocalFunctionOperation", "IStopOperation", "IEndOperation", "IRaiseEventOperation", "ILiteralOperation", "IConversionOperation", "IInvocationOperation", "IArrayElementReferenceOperation", "ILocalReferenceOperation", "IParameterReferenceOperation", "IMemberReferenceOperation", "IFieldReferenceOperation", "IMethodReferenceOperation", "IPropertyReferenceOperation", "IEventReferenceOperation", "IUnaryOperation", "IBinaryOperation", "IConditionalOperation", "ICoalesceOperation", "IAnonymousFunctionOperation", "IObjectCreationOperation", "ITypeParameterObjectCreationOperation", "IArrayCreationOperation", "IInstanceReferenceOperation", "IIsTypeOperation", "IAwaitOperation", "IAssignmentOperation", "ISimpleAssignmentOperation", "ICompoundAssignmentOperation", "IParenthesizedOperation", "IEventAssignmentOperation", "IConditionalAccessOperation", "IConditionalAccessInstanceOperation", "IInterpolatedStringOperation", "IAnonymousObjectCreationOperation", "IObjectOrCollectionInitializerOperation", "IMemberInitializerOperation", "INameOfOperation", "ITupleOperation", "IDynamicObjectCreationOperation", "IDynamicMemberReferenceOperation", "IDynamicInvocationOperation", "IDynamicIndexerAccessOperation", "ITranslatedQueryOperation", "IDelegateCreationOperation", "IDefaultValueOperation", "ITypeOfOperation", "ISizeOfOperation", "IAddressOfOperation", "IIsPatternOperation", "IIncrementOrDecrementOperation", "IThrowOperation", "IDeconstructionAssignmentOperation", "IDeclarationExpressionOperation", "IOmittedArgumentOperation", "ISymbolInitializerOperation", "IFieldInitializerOperation", "IVariableInitializerOperation", "IPropertyInitializerOperation", "IParameterInitializerOperation", "IArrayInitializerOperation", "IVariableDeclaratorOperation", "IVariableDeclarationOperation", "IArgumentOperation", "ICatchClauseOperation", "ISwitchCaseOperation", "ICaseClauseOperation", "IDefaultCaseClauseOperation", "IPatternCaseClauseOperation", "IRangeCaseClauseOperation", "IRelationalCaseClauseOperation", "ISingleValueCaseClauseOperation", "IInterpolatedStringContentOperation", "IInterpolatedStringTextOperation", "IInterpolationOperation", "IPatternOperation", "IConstantPatternOperation", "IDeclarationPatternOperation", "ITupleBinaryOperation", "IMethodBodyBaseOperation", "IMethodBodyOperation", "IConstructorBodyOperation", "IDiscardOperation", "ICoalesceAssignmentOperation", "IRangeOperation", "IReDimOperation", "IReDimClauseOperation", "IRecursivePatternOperation", "IDiscardPatternOperation", "ISwitchExpressionOperation", "ISwitchExpressionArmOperation", "IPropertySubpatternOperation", "IUsingDeclarationOperation", "INegatedPatternOperation", "IBinaryPatternOperation", "ITypePatternOperation", "IRelationalPatternOperation", "IWithOperation", "IInterpolatedStringHandlerCreationOperation", "IInterpolatedStringAdditionOperation", "IInterpolatedStringAppendOperation", "IInterpolatedStringHandlerArgumentPlaceholderOperation", "IFunctionPointerInvocationOperation", "IListPatternOperation", "ISlicePatternOperation", "IImplicitIndexerReferenceOperation", "IUtf8StringOperation", "IAttributeOperation", "OperationVisitor", "ArgumentKind", "BinaryOperatorKind", "BranchKind", "CaseKind", "CommonConversion", "InstanceReferenceKind", "InterpolatedStringArgumentPlaceholderKind", "LoopKind", "OperationExtensions", "OperationWalker", "UnaryOperatorKind"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import FlowAnalysis
from System.Collections import Generic
from System.Collections import Immutable
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis, Version=4.6.0.0

class IInvalidOperation:
    """    """

class IBlockOperation:
    """    """
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def Operations(self) -> Immutable.ImmutableArray: ...

class IVariableDeclarationGroupOperation:
    """    """
    @property
    def Declarations(self) -> Immutable.ImmutableArray: ...

class ISwitchOperation:
    """    """
    @property
    def Cases(self) -> Immutable.ImmutableArray: ...
    @property
    def ExitLabel(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class ILoopOperation:
    """    """
    @property
    def Body(self) -> CodeAnalysis.IOperation: ...
    @property
    def ContinueLabel(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def ExitLabel(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def LoopKind(self) -> LoopKind: ...

class IForEachLoopOperation:
    """    """
    @property
    def Collection(self) -> CodeAnalysis.IOperation: ...
    @property
    def IsAsynchronous(self) -> bool: ...
    @property
    def LoopControlVariable(self) -> CodeAnalysis.IOperation: ...
    @property
    def NextVariables(self) -> Immutable.ImmutableArray: ...

class IForLoopOperation:
    """    """
    @property
    def AtLoopBottom(self) -> Immutable.ImmutableArray: ...
    @property
    def Before(self) -> Immutable.ImmutableArray: ...
    @property
    def Condition(self) -> CodeAnalysis.IOperation: ...
    @property
    def ConditionLocals(self) -> Immutable.ImmutableArray: ...

class IForToLoopOperation:
    """    """
    @property
    def InitialValue(self) -> CodeAnalysis.IOperation: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def LimitValue(self) -> CodeAnalysis.IOperation: ...
    @property
    def LoopControlVariable(self) -> CodeAnalysis.IOperation: ...
    @property
    def NextVariables(self) -> Immutable.ImmutableArray: ...
    @property
    def StepValue(self) -> CodeAnalysis.IOperation: ...

class IWhileLoopOperation:
    """    """
    @property
    def Condition(self) -> CodeAnalysis.IOperation: ...
    @property
    def ConditionIsTop(self) -> bool: ...
    @property
    def ConditionIsUntil(self) -> bool: ...
    @property
    def IgnoredCondition(self) -> CodeAnalysis.IOperation: ...

class ILabeledOperation:
    """    """
    @property
    def Label(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class IBranchOperation:
    """    """
    @property
    def BranchKind(self) -> BranchKind: ...
    @property
    def Target(self) -> CodeAnalysis.ILabelSymbol: ...

class IEmptyOperation:
    """    """

class IReturnOperation:
    """    """
    @property
    def ReturnedValue(self) -> CodeAnalysis.IOperation: ...

class ILockOperation:
    """    """
    @property
    def Body(self) -> CodeAnalysis.IOperation: ...
    @property
    def LockedValue(self) -> CodeAnalysis.IOperation: ...

class ITryOperation:
    """    """
    @property
    def Body(self) -> IBlockOperation: ...
    @property
    def Catches(self) -> Immutable.ImmutableArray: ...
    @property
    def ExitLabel(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def Finally(self) -> IBlockOperation: ...

class IUsingOperation:
    """    """
    @property
    def Body(self) -> CodeAnalysis.IOperation: ...
    @property
    def IsAsynchronous(self) -> bool: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def Resources(self) -> CodeAnalysis.IOperation: ...

class IExpressionStatementOperation:
    """    """
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class ILocalFunctionOperation:
    """    """
    @property
    def Body(self) -> IBlockOperation: ...
    @property
    def IgnoredBody(self) -> IBlockOperation: ...
    @property
    def Symbol(self) -> CodeAnalysis.IMethodSymbol: ...

class IStopOperation:
    """    """

class IEndOperation:
    """    """

class IRaiseEventOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def EventReference(self) -> IEventReferenceOperation: ...

class ILiteralOperation:
    """    """

class IConversionOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Conversion(self) -> CommonConversion: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def IsTryCast(self) -> bool: ...
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...
    @property
    def OperatorMethod(self) -> CodeAnalysis.IMethodSymbol: ...

class IInvocationOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Instance(self) -> CodeAnalysis.IOperation: ...
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def TargetMethod(self) -> CodeAnalysis.IMethodSymbol: ...

class IArrayElementReferenceOperation:
    """    """
    @property
    def ArrayReference(self) -> CodeAnalysis.IOperation: ...
    @property
    def Indices(self) -> Immutable.ImmutableArray: ...

class ILocalReferenceOperation:
    """    """
    @property
    def IsDeclaration(self) -> bool: ...
    @property
    def Local(self) -> CodeAnalysis.ILocalSymbol: ...

class IParameterReferenceOperation:
    """    """
    @property
    def Parameter(self) -> CodeAnalysis.IParameterSymbol: ...

class IMemberReferenceOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Instance(self) -> CodeAnalysis.IOperation: ...
    @property
    def Member(self) -> CodeAnalysis.ISymbol: ...

class IFieldReferenceOperation:
    """    """
    @property
    def Field(self) -> CodeAnalysis.IFieldSymbol: ...
    @property
    def IsDeclaration(self) -> bool: ...

class IMethodReferenceOperation:
    """    """
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def Method(self) -> CodeAnalysis.IMethodSymbol: ...

class IPropertyReferenceOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Property(self) -> CodeAnalysis.IPropertySymbol: ...

class IEventReferenceOperation:
    """    """
    @property
    def Event(self) -> CodeAnalysis.IEventSymbol: ...

class IUnaryOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...
    @property
    def OperatorKind(self) -> UnaryOperatorKind: ...
    @property
    def OperatorMethod(self) -> CodeAnalysis.IMethodSymbol: ...

class IBinaryOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def IsCompareText(self) -> bool: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def LeftOperand(self) -> CodeAnalysis.IOperation: ...
    @property
    def OperatorKind(self) -> BinaryOperatorKind: ...
    @property
    def OperatorMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def RightOperand(self) -> CodeAnalysis.IOperation: ...

class IConditionalOperation:
    """    """
    @property
    def Condition(self) -> CodeAnalysis.IOperation: ...
    @property
    def IsRef(self) -> bool: ...
    @property
    def WhenFalse(self) -> CodeAnalysis.IOperation: ...
    @property
    def WhenTrue(self) -> CodeAnalysis.IOperation: ...

class ICoalesceOperation:
    """    """
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...
    @property
    def ValueConversion(self) -> CommonConversion: ...
    @property
    def WhenNull(self) -> CodeAnalysis.IOperation: ...

class IAnonymousFunctionOperation:
    """    """
    @property
    def Body(self) -> IBlockOperation: ...
    @property
    def Symbol(self) -> CodeAnalysis.IMethodSymbol: ...

class IObjectCreationOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Constructor(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def Initializer(self) -> IObjectOrCollectionInitializerOperation: ...

class ITypeParameterObjectCreationOperation:
    """    """
    @property
    def Initializer(self) -> IObjectOrCollectionInitializerOperation: ...

class IArrayCreationOperation:
    """    """
    @property
    def DimensionSizes(self) -> Immutable.ImmutableArray: ...
    @property
    def Initializer(self) -> IArrayInitializerOperation: ...

class IInstanceReferenceOperation:
    """    """
    @property
    def ReferenceKind(self) -> InstanceReferenceKind: ...

class IIsTypeOperation:
    """    """
    @property
    def IsNegated(self) -> bool: ...
    @property
    def TypeOperand(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def ValueOperand(self) -> CodeAnalysis.IOperation: ...

class IAwaitOperation:
    """    """
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class IAssignmentOperation:
    """    """
    @property
    def Target(self) -> CodeAnalysis.IOperation: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class ISimpleAssignmentOperation:
    """    """
    @property
    def IsRef(self) -> bool: ...

class ICompoundAssignmentOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def InConversion(self) -> CommonConversion: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def OperatorKind(self) -> BinaryOperatorKind: ...
    @property
    def OperatorMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def OutConversion(self) -> CommonConversion: ...

class IParenthesizedOperation:
    """    """
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...

class IEventAssignmentOperation:
    """    """
    @property
    def Adds(self) -> bool: ...
    @property
    def EventReference(self) -> CodeAnalysis.IOperation: ...
    @property
    def HandlerValue(self) -> CodeAnalysis.IOperation: ...

class IConditionalAccessOperation:
    """    """
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...
    @property
    def WhenNotNull(self) -> CodeAnalysis.IOperation: ...

class IConditionalAccessInstanceOperation:
    """    """

class IInterpolatedStringOperation:
    """    """
    @property
    def Parts(self) -> Immutable.ImmutableArray: ...

class IAnonymousObjectCreationOperation:
    """    """
    @property
    def Initializers(self) -> Immutable.ImmutableArray: ...

class IObjectOrCollectionInitializerOperation:
    """    """
    @property
    def Initializers(self) -> Immutable.ImmutableArray: ...

class IMemberInitializerOperation:
    """    """
    @property
    def InitializedMember(self) -> CodeAnalysis.IOperation: ...
    @property
    def Initializer(self) -> IObjectOrCollectionInitializerOperation: ...

class INameOfOperation:
    """    """
    @property
    def Argument(self) -> CodeAnalysis.IOperation: ...

class ITupleOperation:
    """    """
    @property
    def Elements(self) -> Immutable.ImmutableArray: ...
    @property
    def NaturalType(self) -> CodeAnalysis.ITypeSymbol: ...

class IDynamicObjectCreationOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Initializer(self) -> IObjectOrCollectionInitializerOperation: ...

class IDynamicMemberReferenceOperation:
    """    """
    @property
    def ContainingType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Instance(self) -> CodeAnalysis.IOperation: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def TypeArguments(self) -> Immutable.ImmutableArray: ...

class IDynamicInvocationOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class IDynamicIndexerAccessOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class ITranslatedQueryOperation:
    """    """
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class IDelegateCreationOperation:
    """    """
    @property
    def Target(self) -> CodeAnalysis.IOperation: ...

class IDefaultValueOperation:
    """    """

class ITypeOfOperation:
    """    """
    @property
    def TypeOperand(self) -> CodeAnalysis.ITypeSymbol: ...

class ISizeOfOperation:
    """    """
    @property
    def TypeOperand(self) -> CodeAnalysis.ITypeSymbol: ...

class IAddressOfOperation:
    """    """
    @property
    def Reference(self) -> CodeAnalysis.IOperation: ...

class IIsPatternOperation:
    """    """
    @property
    def Pattern(self) -> IPatternOperation: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IIncrementOrDecrementOperation:
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def IsChecked(self) -> bool: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def IsPostfix(self) -> bool: ...
    @property
    def OperatorMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def Target(self) -> CodeAnalysis.IOperation: ...

class IThrowOperation:
    """    """
    @property
    def Exception(self) -> CodeAnalysis.IOperation: ...

class IDeconstructionAssignmentOperation:
    """    """

class IDeclarationExpressionOperation:
    """    """
    @property
    def Expression(self) -> CodeAnalysis.IOperation: ...

class IOmittedArgumentOperation:
    """    """

class ISymbolInitializerOperation:
    """    """
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IFieldInitializerOperation:
    """    """
    @property
    def InitializedFields(self) -> Immutable.ImmutableArray: ...

class IVariableInitializerOperation:
    """    """

class IPropertyInitializerOperation:
    """    """
    @property
    def InitializedProperties(self) -> Immutable.ImmutableArray: ...

class IParameterInitializerOperation:
    """    """
    @property
    def Parameter(self) -> CodeAnalysis.IParameterSymbol: ...

class IArrayInitializerOperation:
    """    """
    @property
    def ElementValues(self) -> Immutable.ImmutableArray: ...

class IVariableDeclaratorOperation:
    """    """
    @property
    def IgnoredArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Initializer(self) -> IVariableInitializerOperation: ...
    @property
    def Symbol(self) -> CodeAnalysis.ILocalSymbol: ...

class IVariableDeclarationOperation:
    """    """
    @property
    def Declarators(self) -> Immutable.ImmutableArray: ...
    @property
    def IgnoredDimensions(self) -> Immutable.ImmutableArray: ...
    @property
    def Initializer(self) -> IVariableInitializerOperation: ...

class IArgumentOperation:
    """    """
    @property
    def ArgumentKind(self) -> ArgumentKind: ...
    @property
    def InConversion(self) -> CommonConversion: ...
    @property
    def OutConversion(self) -> CommonConversion: ...
    @property
    def Parameter(self) -> CodeAnalysis.IParameterSymbol: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class ICatchClauseOperation:
    """    """
    @property
    def ExceptionDeclarationOrExpression(self) -> CodeAnalysis.IOperation: ...
    @property
    def ExceptionType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Filter(self) -> CodeAnalysis.IOperation: ...
    @property
    def Handler(self) -> IBlockOperation: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...

class ISwitchCaseOperation:
    """    """
    @property
    def Body(self) -> Immutable.ImmutableArray: ...
    @property
    def Clauses(self) -> Immutable.ImmutableArray: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...

class ICaseClauseOperation:
    """    """
    @property
    def CaseKind(self) -> CaseKind: ...
    @property
    def Label(self) -> CodeAnalysis.ILabelSymbol: ...

class IDefaultCaseClauseOperation:
    """    """

class IPatternCaseClauseOperation:
    """    """
    @property
    def Guard(self) -> CodeAnalysis.IOperation: ...
    @property
    def Label(self) -> CodeAnalysis.ILabelSymbol: ...
    @property
    def Pattern(self) -> IPatternOperation: ...

class IRangeCaseClauseOperation:
    """    """
    @property
    def MaximumValue(self) -> CodeAnalysis.IOperation: ...
    @property
    def MinimumValue(self) -> CodeAnalysis.IOperation: ...

class IRelationalCaseClauseOperation:
    """    """
    @property
    def Relation(self) -> BinaryOperatorKind: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class ISingleValueCaseClauseOperation:
    """    """
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IInterpolatedStringContentOperation:
    """    """

class IInterpolatedStringTextOperation:
    """    """
    @property
    def Text(self) -> CodeAnalysis.IOperation: ...

class IInterpolationOperation:
    """    """
    @property
    def Alignment(self) -> CodeAnalysis.IOperation: ...
    @property
    def Expression(self) -> CodeAnalysis.IOperation: ...
    @property
    def FormatString(self) -> CodeAnalysis.IOperation: ...

class IPatternOperation:
    """    """
    @property
    def InputType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def NarrowedType(self) -> CodeAnalysis.ITypeSymbol: ...

class IConstantPatternOperation:
    """    """
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IDeclarationPatternOperation:
    """    """
    @property
    def DeclaredSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def MatchedType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def MatchesNull(self) -> bool: ...

class ITupleBinaryOperation:
    """    """
    @property
    def LeftOperand(self) -> CodeAnalysis.IOperation: ...
    @property
    def OperatorKind(self) -> BinaryOperatorKind: ...
    @property
    def RightOperand(self) -> CodeAnalysis.IOperation: ...

class IMethodBodyBaseOperation:
    """    """
    @property
    def BlockBody(self) -> IBlockOperation: ...
    @property
    def ExpressionBody(self) -> IBlockOperation: ...

class IMethodBodyOperation:
    """    """

class IConstructorBodyOperation:
    """    """
    @property
    def Initializer(self) -> CodeAnalysis.IOperation: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...

class IDiscardOperation:
    """    """
    @property
    def DiscardSymbol(self) -> CodeAnalysis.IDiscardSymbol: ...

class ICoalesceAssignmentOperation:
    """    """

class IRangeOperation:
    """    """
    @property
    def IsLifted(self) -> bool: ...
    @property
    def LeftOperand(self) -> CodeAnalysis.IOperation: ...
    @property
    def Method(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def RightOperand(self) -> CodeAnalysis.IOperation: ...

class IReDimOperation:
    """    """
    @property
    def Clauses(self) -> Immutable.ImmutableArray: ...
    @property
    def Preserve(self) -> bool: ...

class IReDimClauseOperation:
    """    """
    @property
    def DimensionSizes(self) -> Immutable.ImmutableArray: ...
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...

class IRecursivePatternOperation:
    """    """
    @property
    def DeclaredSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def DeconstructionSubpatterns(self) -> Immutable.ImmutableArray: ...
    @property
    def DeconstructSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def MatchedType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def PropertySubpatterns(self) -> Immutable.ImmutableArray: ...

class IDiscardPatternOperation:
    """    """

class ISwitchExpressionOperation:
    """    """
    @property
    def Arms(self) -> Immutable.ImmutableArray: ...
    @property
    def IsExhaustive(self) -> bool: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class ISwitchExpressionArmOperation:
    """    """
    @property
    def Guard(self) -> CodeAnalysis.IOperation: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def Pattern(self) -> IPatternOperation: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IPropertySubpatternOperation:
    """    """
    @property
    def Member(self) -> CodeAnalysis.IOperation: ...
    @property
    def Pattern(self) -> IPatternOperation: ...

class IUsingDeclarationOperation:
    """    """
    @property
    def DeclarationGroup(self) -> IVariableDeclarationGroupOperation: ...
    @property
    def IsAsynchronous(self) -> bool: ...

class INegatedPatternOperation:
    """    """
    @property
    def Pattern(self) -> IPatternOperation: ...

class IBinaryPatternOperation:
    """    """
    @property
    def LeftPattern(self) -> IPatternOperation: ...
    @property
    def OperatorKind(self) -> BinaryOperatorKind: ...
    @property
    def RightPattern(self) -> IPatternOperation: ...

class ITypePatternOperation:
    """    """
    @property
    def MatchedType(self) -> CodeAnalysis.ITypeSymbol: ...

class IRelationalPatternOperation:
    """    """
    @property
    def OperatorKind(self) -> BinaryOperatorKind: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IWithOperation:
    """    """
    @property
    def CloneMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def Initializer(self) -> IObjectOrCollectionInitializerOperation: ...
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...

class IInterpolatedStringHandlerCreationOperation:
    """    """
    @property
    def Content(self) -> CodeAnalysis.IOperation: ...
    @property
    def HandlerAppendCallsReturnBool(self) -> bool: ...
    @property
    def HandlerCreation(self) -> CodeAnalysis.IOperation: ...
    @property
    def HandlerCreationHasSuccessParameter(self) -> bool: ...

class IInterpolatedStringAdditionOperation:
    """    """
    @property
    def Left(self) -> CodeAnalysis.IOperation: ...
    @property
    def Right(self) -> CodeAnalysis.IOperation: ...

class IInterpolatedStringAppendOperation:
    """    """
    @property
    def AppendCall(self) -> CodeAnalysis.IOperation: ...

class IInterpolatedStringHandlerArgumentPlaceholderOperation:
    """    """
    @property
    def ArgumentIndex(self) -> int: ...
    @property
    def PlaceholderKind(self) -> InterpolatedStringArgumentPlaceholderKind: ...

class IFunctionPointerInvocationOperation:
    """    """
    @property
    def Arguments(self) -> Immutable.ImmutableArray: ...
    @property
    def Target(self) -> CodeAnalysis.IOperation: ...

class IListPatternOperation:
    """    """
    @property
    def DeclaredSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def IndexerSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def LengthSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def Patterns(self) -> Immutable.ImmutableArray: ...

class ISlicePatternOperation:
    """    """
    @property
    def Pattern(self) -> IPatternOperation: ...
    @property
    def SliceSymbol(self) -> CodeAnalysis.ISymbol: ...

class IImplicitIndexerReferenceOperation:
    """    """
    @property
    def Argument(self) -> CodeAnalysis.IOperation: ...
    @property
    def IndexerSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def Instance(self) -> CodeAnalysis.IOperation: ...
    @property
    def LengthSymbol(self) -> CodeAnalysis.ISymbol: ...

class IUtf8StringOperation:
    """    """
    @property
    def Value(self) -> str: ...

class IAttributeOperation:
    """    """
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...

class OperationVisitor(object):
    """    """
    @overload
    def DefaultVisit(self, operation: CodeAnalysis.IOperation) -> None: ...
    @overload
    def Visit(self, operation: CodeAnalysis.IOperation) -> None: ...
    @overload
    def VisitAddressOf(self, operation: IAddressOfOperation) -> None: ...
    @overload
    def VisitAnonymousFunction(self, operation: IAnonymousFunctionOperation) -> None: ...
    @overload
    def VisitAnonymousObjectCreation(self, operation: IAnonymousObjectCreationOperation) -> None: ...
    @overload
    def VisitArgument(self, operation: IArgumentOperation) -> None: ...
    @overload
    def VisitArrayCreation(self, operation: IArrayCreationOperation) -> None: ...
    @overload
    def VisitArrayElementReference(self, operation: IArrayElementReferenceOperation) -> None: ...
    @overload
    def VisitArrayInitializer(self, operation: IArrayInitializerOperation) -> None: ...
    @overload
    def VisitAttribute(self, operation: IAttributeOperation) -> None: ...
    @overload
    def VisitAwait(self, operation: IAwaitOperation) -> None: ...
    @overload
    def VisitBinaryOperator(self, operation: IBinaryOperation) -> None: ...
    @overload
    def VisitBinaryPattern(self, operation: IBinaryPatternOperation) -> None: ...
    @overload
    def VisitBlock(self, operation: IBlockOperation) -> None: ...
    @overload
    def VisitBranch(self, operation: IBranchOperation) -> None: ...
    @overload
    def VisitCatchClause(self, operation: ICatchClauseOperation) -> None: ...
    @overload
    def VisitCaughtException(self, operation: FlowAnalysis.ICaughtExceptionOperation) -> None: ...
    @overload
    def VisitCoalesce(self, operation: ICoalesceOperation) -> None: ...
    @overload
    def VisitCoalesceAssignment(self, operation: ICoalesceAssignmentOperation) -> None: ...
    @overload
    def VisitCompoundAssignment(self, operation: ICompoundAssignmentOperation) -> None: ...
    @overload
    def VisitConditional(self, operation: IConditionalOperation) -> None: ...
    @overload
    def VisitConditionalAccess(self, operation: IConditionalAccessOperation) -> None: ...
    @overload
    def VisitConditionalAccessInstance(self, operation: IConditionalAccessInstanceOperation) -> None: ...
    @overload
    def VisitConstantPattern(self, operation: IConstantPatternOperation) -> None: ...
    @overload
    def VisitConstructorBodyOperation(self, operation: IConstructorBodyOperation) -> None: ...
    @overload
    def VisitConversion(self, operation: IConversionOperation) -> None: ...
    @overload
    def VisitDeclarationExpression(self, operation: IDeclarationExpressionOperation) -> None: ...
    @overload
    def VisitDeclarationPattern(self, operation: IDeclarationPatternOperation) -> None: ...
    @overload
    def VisitDeconstructionAssignment(self, operation: IDeconstructionAssignmentOperation) -> None: ...
    @overload
    def VisitDefaultCaseClause(self, operation: IDefaultCaseClauseOperation) -> None: ...
    @overload
    def VisitDefaultValue(self, operation: IDefaultValueOperation) -> None: ...
    @overload
    def VisitDelegateCreation(self, operation: IDelegateCreationOperation) -> None: ...
    @overload
    def VisitDiscardOperation(self, operation: IDiscardOperation) -> None: ...
    @overload
    def VisitDiscardPattern(self, operation: IDiscardPatternOperation) -> None: ...
    @overload
    def VisitDynamicIndexerAccess(self, operation: IDynamicIndexerAccessOperation) -> None: ...
    @overload
    def VisitDynamicInvocation(self, operation: IDynamicInvocationOperation) -> None: ...
    @overload
    def VisitDynamicMemberReference(self, operation: IDynamicMemberReferenceOperation) -> None: ...
    @overload
    def VisitDynamicObjectCreation(self, operation: IDynamicObjectCreationOperation) -> None: ...
    @overload
    def VisitEmpty(self, operation: IEmptyOperation) -> None: ...
    @overload
    def VisitEnd(self, operation: IEndOperation) -> None: ...
    @overload
    def VisitEventAssignment(self, operation: IEventAssignmentOperation) -> None: ...
    @overload
    def VisitEventReference(self, operation: IEventReferenceOperation) -> None: ...
    @overload
    def VisitExpressionStatement(self, operation: IExpressionStatementOperation) -> None: ...
    @overload
    def VisitFieldInitializer(self, operation: IFieldInitializerOperation) -> None: ...
    @overload
    def VisitFieldReference(self, operation: IFieldReferenceOperation) -> None: ...
    @overload
    def VisitFlowAnonymousFunction(self, operation: FlowAnalysis.IFlowAnonymousFunctionOperation) -> None: ...
    @overload
    def VisitFlowCapture(self, operation: FlowAnalysis.IFlowCaptureOperation) -> None: ...
    @overload
    def VisitFlowCaptureReference(self, operation: FlowAnalysis.IFlowCaptureReferenceOperation) -> None: ...
    @overload
    def VisitForEachLoop(self, operation: IForEachLoopOperation) -> None: ...
    @overload
    def VisitForLoop(self, operation: IForLoopOperation) -> None: ...
    @overload
    def VisitForToLoop(self, operation: IForToLoopOperation) -> None: ...
    @overload
    def VisitFunctionPointerInvocation(self, operation: IFunctionPointerInvocationOperation) -> None: ...
    @overload
    def VisitImplicitIndexerReference(self, operation: IImplicitIndexerReferenceOperation) -> None: ...
    @overload
    def VisitIncrementOrDecrement(self, operation: IIncrementOrDecrementOperation) -> None: ...
    @overload
    def VisitInstanceReference(self, operation: IInstanceReferenceOperation) -> None: ...
    @overload
    def VisitInterpolatedString(self, operation: IInterpolatedStringOperation) -> None: ...
    @overload
    def VisitInterpolatedStringAddition(self, operation: IInterpolatedStringAdditionOperation) -> None: ...
    @overload
    def VisitInterpolatedStringAppend(self, operation: IInterpolatedStringAppendOperation) -> None: ...
    @overload
    def VisitInterpolatedStringHandlerArgumentPlaceholder(self, operation: IInterpolatedStringHandlerArgumentPlaceholderOperation) -> None: ...
    @overload
    def VisitInterpolatedStringHandlerCreation(self, operation: IInterpolatedStringHandlerCreationOperation) -> None: ...
    @overload
    def VisitInterpolatedStringText(self, operation: IInterpolatedStringTextOperation) -> None: ...
    @overload
    def VisitInterpolation(self, operation: IInterpolationOperation) -> None: ...
    @overload
    def VisitInvalid(self, operation: IInvalidOperation) -> None: ...
    @overload
    def VisitInvocation(self, operation: IInvocationOperation) -> None: ...
    @overload
    def VisitIsNull(self, operation: FlowAnalysis.IIsNullOperation) -> None: ...
    @overload
    def VisitIsPattern(self, operation: IIsPatternOperation) -> None: ...
    @overload
    def VisitIsType(self, operation: IIsTypeOperation) -> None: ...
    @overload
    def VisitLabeled(self, operation: ILabeledOperation) -> None: ...
    @overload
    def VisitListPattern(self, operation: IListPatternOperation) -> None: ...
    @overload
    def VisitLiteral(self, operation: ILiteralOperation) -> None: ...
    @overload
    def VisitLocalFunction(self, operation: ILocalFunctionOperation) -> None: ...
    @overload
    def VisitLocalReference(self, operation: ILocalReferenceOperation) -> None: ...
    @overload
    def VisitLock(self, operation: ILockOperation) -> None: ...
    @overload
    def VisitMemberInitializer(self, operation: IMemberInitializerOperation) -> None: ...
    @overload
    def VisitMethodBodyOperation(self, operation: IMethodBodyOperation) -> None: ...
    @overload
    def VisitMethodReference(self, operation: IMethodReferenceOperation) -> None: ...
    @overload
    def VisitNameOf(self, operation: INameOfOperation) -> None: ...
    @overload
    def VisitNegatedPattern(self, operation: INegatedPatternOperation) -> None: ...
    @overload
    def VisitObjectCreation(self, operation: IObjectCreationOperation) -> None: ...
    @overload
    def VisitObjectOrCollectionInitializer(self, operation: IObjectOrCollectionInitializerOperation) -> None: ...
    @overload
    def VisitOmittedArgument(self, operation: IOmittedArgumentOperation) -> None: ...
    @overload
    def VisitParameterInitializer(self, operation: IParameterInitializerOperation) -> None: ...
    @overload
    def VisitParameterReference(self, operation: IParameterReferenceOperation) -> None: ...
    @overload
    def VisitParenthesized(self, operation: IParenthesizedOperation) -> None: ...
    @overload
    def VisitPatternCaseClause(self, operation: IPatternCaseClauseOperation) -> None: ...
    @overload
    def VisitPropertyInitializer(self, operation: IPropertyInitializerOperation) -> None: ...
    @overload
    def VisitPropertyReference(self, operation: IPropertyReferenceOperation) -> None: ...
    @overload
    def VisitPropertySubpattern(self, operation: IPropertySubpatternOperation) -> None: ...
    @overload
    def VisitRaiseEvent(self, operation: IRaiseEventOperation) -> None: ...
    @overload
    def VisitRangeCaseClause(self, operation: IRangeCaseClauseOperation) -> None: ...
    @overload
    def VisitRangeOperation(self, operation: IRangeOperation) -> None: ...
    @overload
    def VisitRecursivePattern(self, operation: IRecursivePatternOperation) -> None: ...
    @overload
    def VisitReDim(self, operation: IReDimOperation) -> None: ...
    @overload
    def VisitReDimClause(self, operation: IReDimClauseOperation) -> None: ...
    @overload
    def VisitRelationalCaseClause(self, operation: IRelationalCaseClauseOperation) -> None: ...
    @overload
    def VisitRelationalPattern(self, operation: IRelationalPatternOperation) -> None: ...
    @overload
    def VisitReturn(self, operation: IReturnOperation) -> None: ...
    @overload
    def VisitSimpleAssignment(self, operation: ISimpleAssignmentOperation) -> None: ...
    @overload
    def VisitSingleValueCaseClause(self, operation: ISingleValueCaseClauseOperation) -> None: ...
    @overload
    def VisitSizeOf(self, operation: ISizeOfOperation) -> None: ...
    @overload
    def VisitSlicePattern(self, operation: ISlicePatternOperation) -> None: ...
    @overload
    def VisitStaticLocalInitializationSemaphore(self, operation: FlowAnalysis.IStaticLocalInitializationSemaphoreOperation) -> None: ...
    @overload
    def VisitStop(self, operation: IStopOperation) -> None: ...
    @overload
    def VisitSwitch(self, operation: ISwitchOperation) -> None: ...
    @overload
    def VisitSwitchCase(self, operation: ISwitchCaseOperation) -> None: ...
    @overload
    def VisitSwitchExpression(self, operation: ISwitchExpressionOperation) -> None: ...
    @overload
    def VisitSwitchExpressionArm(self, operation: ISwitchExpressionArmOperation) -> None: ...
    @overload
    def VisitThrow(self, operation: IThrowOperation) -> None: ...
    @overload
    def VisitTranslatedQuery(self, operation: ITranslatedQueryOperation) -> None: ...
    @overload
    def VisitTry(self, operation: ITryOperation) -> None: ...
    @overload
    def VisitTuple(self, operation: ITupleOperation) -> None: ...
    @overload
    def VisitTupleBinaryOperator(self, operation: ITupleBinaryOperation) -> None: ...
    @overload
    def VisitTypeOf(self, operation: ITypeOfOperation) -> None: ...
    @overload
    def VisitTypeParameterObjectCreation(self, operation: ITypeParameterObjectCreationOperation) -> None: ...
    @overload
    def VisitTypePattern(self, operation: ITypePatternOperation) -> None: ...
    @overload
    def VisitUnaryOperator(self, operation: IUnaryOperation) -> None: ...
    @overload
    def VisitUsing(self, operation: IUsingOperation) -> None: ...
    @overload
    def VisitUsingDeclaration(self, operation: IUsingDeclarationOperation) -> None: ...
    @overload
    def VisitUtf8String(self, operation: IUtf8StringOperation) -> None: ...
    @overload
    def VisitVariableDeclaration(self, operation: IVariableDeclarationOperation) -> None: ...
    @overload
    def VisitVariableDeclarationGroup(self, operation: IVariableDeclarationGroupOperation) -> None: ...
    @overload
    def VisitVariableDeclarator(self, operation: IVariableDeclaratorOperation) -> None: ...
    @overload
    def VisitVariableInitializer(self, operation: IVariableInitializerOperation) -> None: ...
    @overload
    def VisitWhileLoop(self, operation: IWhileLoopOperation) -> None: ...
    @overload
    def VisitWith(self, operation: IWithOperation) -> None: ...

class OperationVisitor(object):
    """    OperationVisitor[TArgument, TResult]
    """
    @overload
    def DefaultVisit(self, operation: CodeAnalysis.IOperation, argument: TArgument) -> TResult: ...
    @overload
    def Visit(self, operation: CodeAnalysis.IOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitAddressOf(self, operation: IAddressOfOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitAnonymousFunction(self, operation: IAnonymousFunctionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitAnonymousObjectCreation(self, operation: IAnonymousObjectCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitArgument(self, operation: IArgumentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitArrayCreation(self, operation: IArrayCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitArrayElementReference(self, operation: IArrayElementReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitArrayInitializer(self, operation: IArrayInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitAttribute(self, operation: IAttributeOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitAwait(self, operation: IAwaitOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitBinaryOperator(self, operation: IBinaryOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitBinaryPattern(self, operation: IBinaryPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitBlock(self, operation: IBlockOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitBranch(self, operation: IBranchOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitCatchClause(self, operation: ICatchClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitCaughtException(self, operation: FlowAnalysis.ICaughtExceptionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitCoalesce(self, operation: ICoalesceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitCoalesceAssignment(self, operation: ICoalesceAssignmentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitCompoundAssignment(self, operation: ICompoundAssignmentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConditional(self, operation: IConditionalOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConditionalAccess(self, operation: IConditionalAccessOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConditionalAccessInstance(self, operation: IConditionalAccessInstanceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConstantPattern(self, operation: IConstantPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConstructorBodyOperation(self, operation: IConstructorBodyOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitConversion(self, operation: IConversionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDeclarationExpression(self, operation: IDeclarationExpressionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDeclarationPattern(self, operation: IDeclarationPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDeconstructionAssignment(self, operation: IDeconstructionAssignmentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDefaultCaseClause(self, operation: IDefaultCaseClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDefaultValue(self, operation: IDefaultValueOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDelegateCreation(self, operation: IDelegateCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDiscardOperation(self, operation: IDiscardOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDiscardPattern(self, operation: IDiscardPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDynamicIndexerAccess(self, operation: IDynamicIndexerAccessOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDynamicInvocation(self, operation: IDynamicInvocationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDynamicMemberReference(self, operation: IDynamicMemberReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitDynamicObjectCreation(self, operation: IDynamicObjectCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitEmpty(self, operation: IEmptyOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitEnd(self, operation: IEndOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitEventAssignment(self, operation: IEventAssignmentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitEventReference(self, operation: IEventReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitExpressionStatement(self, operation: IExpressionStatementOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFieldInitializer(self, operation: IFieldInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFieldReference(self, operation: IFieldReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFlowAnonymousFunction(self, operation: FlowAnalysis.IFlowAnonymousFunctionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFlowCapture(self, operation: FlowAnalysis.IFlowCaptureOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFlowCaptureReference(self, operation: FlowAnalysis.IFlowCaptureReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitForEachLoop(self, operation: IForEachLoopOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitForLoop(self, operation: IForLoopOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitForToLoop(self, operation: IForToLoopOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitFunctionPointerInvocation(self, operation: IFunctionPointerInvocationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitImplicitIndexerReference(self, operation: IImplicitIndexerReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitIncrementOrDecrement(self, operation: IIncrementOrDecrementOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInstanceReference(self, operation: IInstanceReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedString(self, operation: IInterpolatedStringOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedStringAddition(self, operation: IInterpolatedStringAdditionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedStringAppend(self, operation: IInterpolatedStringAppendOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedStringHandlerArgumentPlaceholder(self, operation: IInterpolatedStringHandlerArgumentPlaceholderOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedStringHandlerCreation(self, operation: IInterpolatedStringHandlerCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolatedStringText(self, operation: IInterpolatedStringTextOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInterpolation(self, operation: IInterpolationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInvalid(self, operation: IInvalidOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitInvocation(self, operation: IInvocationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitIsNull(self, operation: FlowAnalysis.IIsNullOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitIsPattern(self, operation: IIsPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitIsType(self, operation: IIsTypeOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitLabeled(self, operation: ILabeledOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitListPattern(self, operation: IListPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitLiteral(self, operation: ILiteralOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitLocalFunction(self, operation: ILocalFunctionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitLocalReference(self, operation: ILocalReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitLock(self, operation: ILockOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitMemberInitializer(self, operation: IMemberInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitMethodBodyOperation(self, operation: IMethodBodyOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitMethodReference(self, operation: IMethodReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitNameOf(self, operation: INameOfOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitNegatedPattern(self, operation: INegatedPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitObjectCreation(self, operation: IObjectCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitObjectOrCollectionInitializer(self, operation: IObjectOrCollectionInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitOmittedArgument(self, operation: IOmittedArgumentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitParameterInitializer(self, operation: IParameterInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitParameterReference(self, operation: IParameterReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitParenthesized(self, operation: IParenthesizedOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitPatternCaseClause(self, operation: IPatternCaseClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitPropertyInitializer(self, operation: IPropertyInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitPropertyReference(self, operation: IPropertyReferenceOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitPropertySubpattern(self, operation: IPropertySubpatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRaiseEvent(self, operation: IRaiseEventOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRangeCaseClause(self, operation: IRangeCaseClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRangeOperation(self, operation: IRangeOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRecursivePattern(self, operation: IRecursivePatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitReDim(self, operation: IReDimOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitReDimClause(self, operation: IReDimClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRelationalCaseClause(self, operation: IRelationalCaseClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitRelationalPattern(self, operation: IRelationalPatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitReturn(self, operation: IReturnOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSimpleAssignment(self, operation: ISimpleAssignmentOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSingleValueCaseClause(self, operation: ISingleValueCaseClauseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSizeOf(self, operation: ISizeOfOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSlicePattern(self, operation: ISlicePatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitStaticLocalInitializationSemaphore(self, operation: FlowAnalysis.IStaticLocalInitializationSemaphoreOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitStop(self, operation: IStopOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSwitch(self, operation: ISwitchOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSwitchCase(self, operation: ISwitchCaseOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSwitchExpression(self, operation: ISwitchExpressionOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitSwitchExpressionArm(self, operation: ISwitchExpressionArmOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitThrow(self, operation: IThrowOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTranslatedQuery(self, operation: ITranslatedQueryOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTry(self, operation: ITryOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTuple(self, operation: ITupleOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTupleBinaryOperator(self, operation: ITupleBinaryOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTypeOf(self, operation: ITypeOfOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTypeParameterObjectCreation(self, operation: ITypeParameterObjectCreationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitTypePattern(self, operation: ITypePatternOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitUnaryOperator(self, operation: IUnaryOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitUsing(self, operation: IUsingOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitUsingDeclaration(self, operation: IUsingDeclarationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitUtf8String(self, operation: IUtf8StringOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitVariableDeclaration(self, operation: IVariableDeclarationOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitVariableDeclarationGroup(self, operation: IVariableDeclarationGroupOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitVariableDeclarator(self, operation: IVariableDeclaratorOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitVariableInitializer(self, operation: IVariableInitializerOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitWhileLoop(self, operation: IWhileLoopOperation, argument: TArgument) -> TResult: ...
    @overload
    def VisitWith(self, operation: IWithOperation, argument: TArgument) -> TResult: ...

class ArgumentKind(enum.Enum):
    None_ = 0
    Explicit = 1
    ParamArray = 2
    DefaultValue = 3

class BinaryOperatorKind(enum.Enum):
    None_ = 0
    Add = 1
    Subtract = 2
    Multiply = 3
    Divide = 4
    IntegerDivide = 5
    Remainder = 6
    Power = 7
    LeftShift = 8
    RightShift = 9
    And = 10
    Or = 11
    ExclusiveOr = 12
    ConditionalAnd = 13
    ConditionalOr = 14
    Concatenate = 15
    Equals = 16
    ObjectValueEquals = 17
    NotEquals = 18
    ObjectValueNotEquals = 19
    LessThan = 20
    LessThanOrEqual = 21
    GreaterThanOrEqual = 22
    GreaterThan = 23
    Like = 24
    UnsignedRightShift = 25

class BranchKind(enum.Enum):
    None_ = 0
    Continue = 1
    Break = 2
    GoTo = 3

class CaseKind(enum.Enum):
    None_ = 0
    SingleValue = 1
    Relational = 2
    Range = 3
    Default = 4
    Pattern = 5

class CommonConversion(System.ValueType):
    """    """
    @property
    def ConstrainedToType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsImplicit(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def IsNumeric(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsUserDefined(self) -> bool: ...
    @property
    def MethodSymbol(self) -> CodeAnalysis.IMethodSymbol: ...

class InstanceReferenceKind(enum.Enum):
    ContainingTypeInstance = 0
    ImplicitReceiver = 1
    PatternInput = 2
    InterpolatedStringHandler = 3

class InterpolatedStringArgumentPlaceholderKind(enum.Enum):
    CallsiteArgument = 0
    CallsiteReceiver = 1
    TrailingValidityArgument = 2

class LoopKind(enum.Enum):
    None_ = 0
    While = 1
    For = 2
    ForTo = 3
    ForEach = 4

class OperationExtensions(object):
    """    """
    @overload
    @staticmethod
    def Descendants(operation: CodeAnalysis.IOperation) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def DescendantsAndSelf(operation: CodeAnalysis.IOperation) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetArgumentName(dynamicOperation: IDynamicObjectCreationOperation, index: int) -> str: ...
    @overload
    @staticmethod
    def GetArgumentName(dynamicOperation: IDynamicInvocationOperation, index: int) -> str: ...
    @overload
    @staticmethod
    def GetArgumentName(dynamicOperation: IDynamicIndexerAccessOperation, index: int) -> str: ...
    @overload
    @staticmethod
    def GetArgumentRefKind(dynamicOperation: IDynamicInvocationOperation, index: int) -> System.Nullable: ...
    @overload
    @staticmethod
    def GetArgumentRefKind(dynamicOperation: IDynamicIndexerAccessOperation, index: int) -> System.Nullable: ...
    @overload
    @staticmethod
    def GetArgumentRefKind(dynamicOperation: IDynamicObjectCreationOperation, index: int) -> System.Nullable: ...
    @overload
    @staticmethod
    def GetCorrespondingOperation(operation: IBranchOperation) -> CodeAnalysis.IOperation: ...
    @overload
    @staticmethod
    def GetDeclaredVariables(declarationGroup: IVariableDeclarationGroupOperation) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetDeclaredVariables(declaration: IVariableDeclarationOperation) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetFunctionPointerSignature(functionPointer: IFunctionPointerInvocationOperation) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetVariableInitializer(declarationOperation: IVariableDeclaratorOperation) -> IVariableInitializerOperation: ...

class OperationWalker(OperationVisitor):
    """    """
    @overload
    def DefaultVisit(self, operation: CodeAnalysis.IOperation) -> None: ...
    @overload
    def Visit(self, operation: CodeAnalysis.IOperation) -> None: ...

class OperationWalker(OperationVisitor):
    """    OperationWalker[TArgument]
    """
    @overload
    def DefaultVisit(self, operation: CodeAnalysis.IOperation, argument: TArgument) -> object: ...
    @overload
    def Visit(self, operation: CodeAnalysis.IOperation, argument: TArgument) -> object: ...

class UnaryOperatorKind(enum.Enum):
    None_ = 0
    BitwiseNegation = 1
    Not = 2
    Plus = 3
    Minus = 4
    True_ = 5
    False_ = 6
    Hat = 7

# endregion
