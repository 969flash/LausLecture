"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CSharp", "CSharpExtensions"]
# endregion

# region: Imports
from Microsoft.CodeAnalysis import CSharp
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["VisualBasic", "VisualBasicExtensions"]
# endregion

# region: Imports
from Microsoft.CodeAnalysis import VisualBasic
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["FlowAnalysis", "Text", "Diagnostics", "Operations", "Emit", "CaseInsensitiveComparison", "AnalyzerConfig", "AnalyzerConfigOptionsResult", "AnalyzerConfigSet", "CommandLineAnalyzerReference", "CommandLineArguments", "CommandLineParser", "CommandLineReference", "CommandLineSourceFile", "ErrorLogOptions", "SarifVersion", "SarifVersionFacts", "Compilation", "CandidateReason", "CompilationOptions", "ControlFlowAnalysis", "DataFlowAnalysis", "ModelExtensions", "GeneratedKind", "IImportScope", "ImportedNamespaceOrType", "ImportedXmlNamespace", "NullableContext", "NullableContextExtensions", "NullableContextOptions", "NullableContextOptionsExtensions", "OptimizationLevel", "ParseOptions", "Platform", "PreprocessingSymbolInfo", "ScriptCompilationInfo", "SemanticModel", "SourceReferenceResolver", "SpeculativeBindingOption", "SubsystemVersion", "SymbolFilter", "SymbolInfo", "SyntaxTreeOptionsProvider", "TypeInfo", "XmlReferenceResolver", "DesktopAssemblyIdentityComparer", "AdditionalText", "IAnalyzerAssemblyLoader", "Diagnostic", "DiagnosticDescriptor", "DiagnosticFormatter", "DiagnosticSeverity", "FileLinePositionSpan", "LocalizableResourceString", "LocalizableString", "Location", "LocationKind", "ReportDiagnostic", "SuppressionDescriptor", "WellKnownDiagnosticTags", "DocumentationCommentId", "DocumentationProvider", "DocumentationMode", "EmbeddedText", "FileSystemExtensions", "OperationKind", "MetadataImportOptions", "AssemblyIdentity", "AssemblyIdentityComparer", "AssemblyIdentityParts", "AssemblyMetadata", "CompilationReference", "MetadataId", "Metadata", "MetadataImageKind", "MetadataReference", "MetadataReferenceProperties", "MetadataReferenceResolver", "ModuleMetadata", "PortableExecutableReference", "UnresolvedMetadataReference", "IOperation", "Optional", "OutputKind", "ResourceDescription", "RuleSet", "RuleSetInclude", "RuntimeCapability", "SourceCodeKind", "SourceFileResolver", "GeneratorAttribute", "GeneratorExecutionContext", "GeneratorInitializationContext", "GeneratorSyntaxContext", "GeneratorPostInitializationContext", "GeneratorDriver", "GeneratorDriverOptions", "GeneratorExtensions", "IIncrementalGenerator", "IncrementalGeneratorInitializationContext", "IncrementalGeneratorPostInitializationContext", "SourceProductionContext", "IncrementalGeneratorRunStep", "IncrementalStepRunReason", "IncrementalValueProvider", "IncrementalValuesProvider", "ISourceGenerator", "ISyntaxReceiver", "SyntaxReceiverCreator", "ISyntaxContextReceiver", "SyntaxContextReceiverCreator", "IncrementalGeneratorOutputKind", "SyntaxValueProvider", "GeneratorAttributeSyntaxContext", "IncrementalValueProviderExtensions", "GeneratorDriverRunResult", "GeneratorRunResult", "GeneratedSourceResult", "GeneratorDriverTimingInfo", "GeneratorTimingInfo", "WellKnownGeneratorInputs", "WellKnownGeneratorOutputs", "SpecialType", "DesktopStrongNameProvider", "StrongNameProvider", "SymbolDisplayDelegateStyle", "SymbolDisplayExtensionMethodStyle", "SymbolDisplayExtensions", "SymbolDisplayFormat", "SymbolDisplayGenericsOptions", "SymbolDisplayGlobalNamespaceStyle", "SymbolDisplayKindOptions", "SymbolDisplayLocalOptions", "SymbolDisplayMemberOptions", "SymbolDisplayMiscellaneousOptions", "SymbolDisplayParameterOptions", "SymbolDisplayPart", "SymbolDisplayPartKind", "SymbolDisplayPropertyStyle", "SymbolDisplayTypeQualificationStyle", "Accessibility", "AttributeData", "CustomModifier", "IAliasSymbol", "IArrayTypeSymbol", "IAssemblySymbol", "IDiscardSymbol", "IDynamicTypeSymbol", "IErrorTypeSymbol", "IEventSymbol", "IFieldSymbol", "IFunctionPointerTypeSymbol", "ILabelSymbol", "ILocalSymbol", "IMethodSymbol", "IModuleSymbol", "INamedTypeSymbol", "INamespaceOrTypeSymbol", "INamespaceSymbol", "IParameterSymbol", "IPointerTypeSymbol", "IPreprocessingSymbol", "IPropertySymbol", "IRangeVariableSymbol", "ISourceAssemblySymbol", "ISymbol", "ISymbolExtensions", "ITypeParameterSymbol", "ITypeSymbol", "LanguageNames", "MethodKind", "NamespaceKind", "NullabilityInfo", "NullableAnnotation", "NullableFlowState", "DllImportData", "RefKind", "ScopedKind", "SymbolEqualityComparer", "SymbolKind", "SymbolVisitor", "TypedConstant", "TypedConstantKind", "TypeKind", "TypeParameterKind", "VarianceKind", "WellKnownMemberNames", "AnnotationExtensions", "ChildSyntaxList", "ICompilationUnitSyntax", "ISkippedTokensTriviaSyntax", "IStructuredTriviaSyntax", "LineMapping", "LineVisibility", "SeparatedSyntaxList", "SyntaxAnnotation", "SyntaxList", "SyntaxNode", "SyntaxNodeExtensions", "SyntaxNodeOrToken", "SyntaxNodeOrTokenList", "SyntaxReference", "SyntaxRemoveOptions", "SyntaxToken", "SyntaxTokenList", "SyntaxTree", "SyntaxTrivia", "SyntaxTriviaList", "SyntaxWalker", "SyntaxWalkerDepth", "XmlFileResolver", "ComparisonResult", "OperationList", "Enumerator", "Reversed"]
# endregion

# region: Imports
from Microsoft.CodeAnalysis import Diagnostics
from Microsoft.CodeAnalysis import Emit
from Microsoft.CodeAnalysis import Operations
from Microsoft.CodeAnalysis import Text
from System import Globalization
from System import IO
from System import Reflection
from System import Resources
from System import Text
from System import Threading
from System.Collections import Generic
from System.Collections import Immutable
from System.Reflection import Metadata
from System.Reflection import PortableExecutable
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis, Version=4.6.0.0

class CaseInsensitiveComparison(object):
    """    """
    @overload
    @staticmethod
    def Compare(left: str, right: str) -> int: ...
    @overload
    @staticmethod
    def Compare(left: System.ReadOnlySpan, right: System.ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def EndsWith(value: str, possibleEnd: str) -> bool: ...
    @overload
    @staticmethod
    def Equals(left: str, right: str) -> bool: ...
    @overload
    @staticmethod
    def Equals(left: System.ReadOnlySpan, right: System.ReadOnlySpan) -> bool: ...
    @property
    def Comparer(self) -> System.StringComparer: ...
    @overload
    @staticmethod
    def GetHashCode(value: str) -> int: ...
    @overload
    @staticmethod
    def StartsWith(value: str, possibleStart: str) -> bool: ...
    @overload
    @staticmethod
    def ToLower(c: System.Char) -> System.Char: ...
    @overload
    @staticmethod
    def ToLower(value: str) -> str: ...
    @overload
    @staticmethod
    def ToLower(builder: Text.StringBuilder) -> None: ...

class AnalyzerConfig(object):
    """    """
    @overload
    @staticmethod
    def Parse(text: str, pathToFile: str) -> AnalyzerConfig: ...
    @overload
    @staticmethod
    def Parse(text: Text.SourceText, pathToFile: str) -> AnalyzerConfig: ...

class AnalyzerConfigOptionsResult(System.ValueType):
    """    """
    @property
    def AnalyzerOptions(self) -> Immutable.ImmutableDictionary: ...
    @property
    def Diagnostics(self) -> Immutable.ImmutableArray: ...
    @property
    def TreeOptions(self) -> Immutable.ImmutableDictionary: ...

class AnalyzerConfigSet(object):
    """    """
    @overload
    @staticmethod
    def Create(analyzerConfigs: TList) -> AnalyzerConfigSet: ...
    @overload
    @staticmethod
    def Create(analyzerConfigs: TList) -> (AnalyzerConfigSet, Immutable.ImmutableArray): ...
    @property
    def GlobalConfigOptions(self) -> AnalyzerConfigOptionsResult: ...
    @overload
    def GetOptionsForSourcePath(self, sourcePath: str) -> AnalyzerConfigOptionsResult: ...

class CommandLineAnalyzerReference(System.ValueType):
    """    """
    def __init__(self, path: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CommandLineAnalyzerReference) -> bool: ...
    @property
    def FilePath(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class CommandLineArguments(object):
    """    """
    @property
    def AdditionalFiles(self) -> Immutable.ImmutableArray: ...
    @property
    def AnalyzerConfigPaths(self) -> Immutable.ImmutableArray: ...
    @property
    def AnalyzerReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def AppConfigPath(self) -> str: ...
    @property
    def BaseDirectory(self) -> str: ...
    @property
    def ChecksumAlgorithm(self) -> Text.SourceHashAlgorithm: ...
    @property
    def CompilationName(self) -> str: ...
    @property
    def CompilationOptions(self) -> CompilationOptions: ...
    @property
    def DisplayHelp(self) -> bool: ...
    @property
    def DisplayLangVersions(self) -> bool: ...
    @property
    def DisplayLogo(self) -> bool: ...
    @property
    def DisplayVersion(self) -> bool: ...
    @property
    def DocumentationPath(self) -> str: ...
    @property
    def EmbeddedFiles(self) -> Immutable.ImmutableArray: ...
    @property
    def EmitOptions(self) -> Emit.EmitOptions: ...
    @property
    def EmitPdb(self) -> bool: ...
    @property
    def EmitPdbFile(self) -> bool: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def ErrorLogOptions(self) -> ErrorLogOptions: ...
    @property
    def ErrorLogPath(self) -> str: ...
    @property
    def Errors(self) -> Immutable.ImmutableArray: ...
    @property
    def GeneratedFilesOutputDirectory(self) -> str: ...
    @property
    def InteractiveMode(self) -> bool: ...
    @property
    def KeyFileSearchPaths(self) -> Immutable.ImmutableArray: ...
    @property
    def ManifestResources(self) -> Immutable.ImmutableArray: ...
    @property
    def MetadataReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def NoWin32Manifest(self) -> bool: ...
    @property
    def OutputDirectory(self) -> str: ...
    @property
    def OutputFileName(self) -> str: ...
    @property
    def OutputRefFilePath(self) -> str: ...
    @property
    def ParseOptions(self) -> ParseOptions: ...
    @property
    def PathMap(self) -> Immutable.ImmutableArray: ...
    @property
    def PdbPath(self) -> str: ...
    @property
    def PreferredUILang(self) -> Globalization.CultureInfo: ...
    @property
    def PrintFullPaths(self) -> bool: ...
    @property
    def ReferencePaths(self) -> Immutable.ImmutableArray: ...
    @property
    def ReportAnalyzer(self) -> bool: ...
    @property
    def RuleSetPath(self) -> str: ...
    @property
    def ScriptArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def SkipAnalyzers(self) -> bool: ...
    @property
    def SourceFiles(self) -> Immutable.ImmutableArray: ...
    @property
    def SourceLink(self) -> str: ...
    @property
    def SourcePaths(self) -> Immutable.ImmutableArray: ...
    @property
    def TouchedFilesPath(self) -> str: ...
    @property
    def Utf8Output(self) -> bool: ...
    @property
    def Win32Icon(self) -> str: ...
    @property
    def Win32Manifest(self) -> str: ...
    @property
    def Win32ResourceFile(self) -> str: ...
    @overload
    def GetOutputFilePath(self, outputFileName: str) -> str: ...
    @overload
    def GetPdbFilePath(self, outputFileName: str) -> str: ...
    @overload
    def ResolveAnalyzerReferences(self, analyzerLoader: IAnalyzerAssemblyLoader) -> Generic.IEnumerable: ...
    @overload
    def ResolveMetadataReferences(self, metadataResolver: MetadataReferenceResolver) -> Generic.IEnumerable: ...

class CommandLineParser(object):
    """    """
    @overload
    def Parse(self, args: Generic.IEnumerable, baseDirectory: str, sdkDirectory: str, additionalReferenceDirectories: str) -> CommandLineArguments: ...
    @overload
    @staticmethod
    def SplitCommandLineIntoArguments(commandLine: str, removeHashComments: bool) -> Generic.IEnumerable: ...

class CommandLineReference(System.ValueType):
    """    """
    def __init__(self, reference: str, properties: MetadataReferenceProperties): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CommandLineReference) -> bool: ...
    @property
    def Properties(self) -> MetadataReferenceProperties: ...
    @property
    def Reference(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class CommandLineSourceFile(System.ValueType):
    """    """
    @overload
    def __init__(self, path: str, isScript: bool): ...
    @overload
    def __init__(self, path: str, isScript: bool, isInputRedirected: bool): ...
    @property
    def IsInputRedirected(self) -> bool: ...
    @property
    def IsScript(self) -> bool: ...
    @property
    def Path(self) -> str: ...

class ErrorLogOptions(object):
    """    """
    def __init__(self, path: str, sarifVersion: SarifVersion): ...
    @property
    def Path(self) -> str: ...
    @property
    def SarifVersion(self) -> SarifVersion: ...

class SarifVersion(enum.Enum):
    Default = 1
    Sarif1 = 1
    Sarif2 = 2
    Latest = 2147483647

class SarifVersionFacts(object):
    """    """
    @overload
    @staticmethod
    def TryParse(version: str) -> (bool, SarifVersion): ...

class Compilation(object):
    """    """
    @overload
    def AddReferences(self, references: Generic.IEnumerable) -> Compilation: ...
    @overload
    def AddReferences(self, references: System.Array[MetadataReference]) -> Compilation: ...
    @overload
    def AddSyntaxTrees(self, trees: Generic.IEnumerable) -> Compilation: ...
    @overload
    def AddSyntaxTrees(self, trees: System.Array[SyntaxTree]) -> Compilation: ...
    @overload
    def ClassifyCommonConversion(self, source: ITypeSymbol, destination: ITypeSymbol) -> Operations.CommonConversion: ...
    @overload
    def Clone() -> Compilation: ...
    @overload
    def ContainsSymbolsWithName(self, name: str, filter_: SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSymbolsWithName(self, predicate: System.Func, filter_: SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSyntaxTree(self, syntaxTree: SyntaxTree) -> bool: ...
    @overload
    def CreateAnonymousTypeSymbol(self, memberTypes: Immutable.ImmutableArray, memberNames: Immutable.ImmutableArray, memberIsReadOnly: Immutable.ImmutableArray, memberLocations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def CreateAnonymousTypeSymbol(self, memberTypes: Immutable.ImmutableArray, memberNames: Immutable.ImmutableArray, memberIsReadOnly: Immutable.ImmutableArray, memberLocations: Immutable.ImmutableArray, memberNullableAnnotations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def CreateArrayTypeSymbol(self, elementType: ITypeSymbol, rank: int) -> IArrayTypeSymbol: ...
    @overload
    def CreateArrayTypeSymbol(self, elementType: ITypeSymbol, rank: int, elementNullableAnnotation: NullableAnnotation) -> IArrayTypeSymbol: ...
    @overload
    def CreateBuiltinOperator(self, name: str, returnType: ITypeSymbol, operandType: ITypeSymbol) -> IMethodSymbol: ...
    @overload
    def CreateBuiltinOperator(self, name: str, returnType: ITypeSymbol, leftType: ITypeSymbol, rightType: ITypeSymbol) -> IMethodSymbol: ...
    @overload
    def CreateDefaultWin32Resources(self, versionResource: bool, noManifest: bool, manifestContents: IO.Stream, iconInIcoFormat: IO.Stream) -> IO.Stream: ...
    @overload
    def CreateErrorNamespaceSymbol(self, container: INamespaceSymbol, name: str) -> INamespaceSymbol: ...
    @overload
    def CreateErrorTypeSymbol(self, container: INamespaceOrTypeSymbol, name: str, arity: int) -> INamedTypeSymbol: ...
    @overload
    def CreateFunctionPointerTypeSymbol(self, returnType: ITypeSymbol, returnRefKind: RefKind, parameterTypes: Immutable.ImmutableArray, parameterRefKinds: Immutable.ImmutableArray, callingConvention: Metadata.SignatureCallingConvention, callingConventionTypes: Immutable.ImmutableArray) -> IFunctionPointerTypeSymbol: ...
    @overload
    def CreateNativeIntegerTypeSymbol(self, signed: bool) -> INamedTypeSymbol: ...
    @overload
    def CreatePointerTypeSymbol(self, pointedAtType: ITypeSymbol) -> IPointerTypeSymbol: ...
    @overload
    def CreateTupleTypeSymbol(self, underlyingType: INamedTypeSymbol, elementNames: Immutable.ImmutableArray, elementLocations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def CreateTupleTypeSymbol(self, elementTypes: Immutable.ImmutableArray, elementNames: Immutable.ImmutableArray, elementLocations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def CreateTupleTypeSymbol(self, underlyingType: INamedTypeSymbol, elementNames: Immutable.ImmutableArray, elementLocations: Immutable.ImmutableArray, elementNullableAnnotations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def CreateTupleTypeSymbol(self, elementTypes: Immutable.ImmutableArray, elementNames: Immutable.ImmutableArray, elementLocations: Immutable.ImmutableArray, elementNullableAnnotations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def Emit(self, peStream: IO.Stream, pdbStream: IO.Stream, xmlDocumentationStream: IO.Stream, win32Resources: IO.Stream, manifestResources: Generic.IEnumerable, options: Emit.EmitOptions, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...
    @overload
    def Emit(self, peStream: IO.Stream, pdbStream: IO.Stream, xmlDocumentationStream: IO.Stream, win32Resources: IO.Stream, manifestResources: Generic.IEnumerable, options: Emit.EmitOptions, debugEntryPoint: IMethodSymbol, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...
    @overload
    def Emit(self, peStream: IO.Stream, pdbStream: IO.Stream, xmlDocumentationStream: IO.Stream, win32Resources: IO.Stream, manifestResources: Generic.IEnumerable, options: Emit.EmitOptions, debugEntryPoint: IMethodSymbol, sourceLinkStream: IO.Stream, embeddedTexts: Generic.IEnumerable, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...
    @overload
    def Emit(self, peStream: IO.Stream, pdbStream: IO.Stream, xmlDocumentationStream: IO.Stream, win32Resources: IO.Stream, manifestResources: Generic.IEnumerable, options: Emit.EmitOptions, debugEntryPoint: IMethodSymbol, sourceLinkStream: IO.Stream, embeddedTexts: Generic.IEnumerable, metadataPEStream: IO.Stream, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...
    @overload
    def EmitDifference(self, baseline: Emit.EmitBaseline, edits: Generic.IEnumerable, isAddedSymbol: System.Func, metadataStream: IO.Stream, ilStream: IO.Stream, pdbStream: IO.Stream, cancellationToken: Threading.CancellationToken) -> Emit.EmitDifferenceResult: ...
    @property
    def Assembly(self) -> IAssemblySymbol: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def DirectiveReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def DynamicType(self) -> ITypeSymbol: ...
    @property
    def ExternalReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def GlobalNamespace(self) -> INamespaceSymbol: ...
    @property
    def IsCaseSensitive(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def ObjectType(self) -> INamedTypeSymbol: ...
    @property
    def Options(self) -> CompilationOptions: ...
    @property
    def ReferencedAssemblyNames(self) -> Generic.IEnumerable: ...
    @property
    def References(self) -> Generic.IEnumerable: ...
    @property
    def ScriptClass(self) -> INamedTypeSymbol: ...
    @property
    def ScriptCompilationInfo(self) -> ScriptCompilationInfo: ...
    @property
    def SourceModule(self) -> IModuleSymbol: ...
    @property
    def SyntaxTrees(self) -> Generic.IEnumerable: ...
    @overload
    def GetAssemblyOrModuleSymbol(self, reference: MetadataReference) -> ISymbol: ...
    @overload
    def GetCompilationNamespace(self, namespaceSymbol: INamespaceSymbol) -> INamespaceSymbol: ...
    @overload
    def GetDeclarationDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetEntryPoint(self, cancellationToken: Threading.CancellationToken) -> IMethodSymbol: ...
    @overload
    def GetMetadataReference(self, assemblySymbol: IAssemblySymbol) -> MetadataReference: ...
    @overload
    def GetMethodBodyDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetParseDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetRequiredLanguageVersion(diagnostic: Diagnostic) -> str: ...
    @overload
    def GetSemanticModel(self, syntaxTree: SyntaxTree, ignoreAccessibility: bool) -> SemanticModel: ...
    @overload
    def GetSpecialType(self, specialType: SpecialType) -> INamedTypeSymbol: ...
    @overload
    def GetSymbolsWithName(self, name: str, filter_: SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetSymbolsWithName(self, predicate: System.Func, filter_: SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetTypeByMetadataName(self, fullyQualifiedMetadataName: str) -> INamedTypeSymbol: ...
    @overload
    def GetTypesByMetadataName(self, fullyQualifiedMetadataName: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetUnreferencedAssemblyIdentities(self, diagnostic: Diagnostic) -> Immutable.ImmutableArray: ...
    @overload
    def GetUsedAssemblyReferences(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def HasImplicitConversion(self, fromType: ITypeSymbol, toType: ITypeSymbol) -> bool: ...
    @overload
    def IsSymbolAccessibleWithin(self, symbol: ISymbol, within: ISymbol, throughType: ITypeSymbol) -> bool: ...
    @overload
    def RemoveAllReferences() -> Compilation: ...
    @overload
    def RemoveAllSyntaxTrees() -> Compilation: ...
    @overload
    def RemoveReferences(self, references: System.Array[MetadataReference]) -> Compilation: ...
    @overload
    def RemoveReferences(self, references: Generic.IEnumerable) -> Compilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: System.Array[SyntaxTree]) -> Compilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: Generic.IEnumerable) -> Compilation: ...
    @overload
    def ReplaceReference(self, oldReference: MetadataReference, newReference: MetadataReference) -> Compilation: ...
    @overload
    def ReplaceSyntaxTree(self, oldTree: SyntaxTree, newTree: SyntaxTree) -> Compilation: ...
    @overload
    def SupportsRuntimeCapability(self, capability: RuntimeCapability) -> bool: ...
    @overload
    def ToMetadataReference(self, aliases: Immutable.ImmutableArray, embedInteropTypes: bool) -> CompilationReference: ...
    @overload
    def WithAssemblyName(self, assemblyName: str) -> Compilation: ...
    @overload
    def WithOptions(self, options: CompilationOptions) -> Compilation: ...
    @overload
    def WithReferences(self, newReferences: System.Array[MetadataReference]) -> Compilation: ...
    @overload
    def WithReferences(self, newReferences: Generic.IEnumerable) -> Compilation: ...
    @overload
    def WithScriptCompilationInfo(self, info: ScriptCompilationInfo) -> Compilation: ...

class CandidateReason(enum.Enum):
    None_ = 0
    NotATypeOrNamespace = 1
    NotAnEvent = 2
    NotAWithEventsMember = 3
    NotAnAttributeType = 4
    WrongArity = 5
    NotCreatable = 6
    NotReferencable = 7
    Inaccessible = 8
    NotAValue = 9
    NotAVariable = 10
    NotInvocable = 11
    StaticInstanceMismatch = 12
    OverloadResolutionFailure = 13
    LateBound = 14
    Ambiguous = 15
    MemberGroup = 16

class CompilationOptions(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AssemblyIdentityComparer(self) -> AssemblyIdentityComparer: ...
    @property
    def CheckOverflow(self) -> bool: ...
    @property
    def ConcurrentBuild(self) -> bool: ...
    @property
    def CryptoKeyContainer(self) -> str: ...
    @property
    def CryptoKeyFile(self) -> str: ...
    @property
    def CryptoPublicKey(self) -> Immutable.ImmutableArray: ...
    @property
    def DelaySign(self) -> System.Nullable: ...
    @property
    def Deterministic(self) -> bool: ...
    @property
    def Errors(self) -> Immutable.ImmutableArray: ...
    @property
    def GeneralDiagnosticOption(self) -> ReportDiagnostic: ...
    @property
    def Language(self) -> str: ...
    @property
    def MainTypeName(self) -> str: ...
    @property
    def MetadataImportOptions(self) -> MetadataImportOptions: ...
    @property
    def MetadataReferenceResolver(self) -> MetadataReferenceResolver: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def NullableContextOptions(self) -> NullableContextOptions: ...
    @property
    def OptimizationLevel(self) -> OptimizationLevel: ...
    @property
    def OutputKind(self) -> OutputKind: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def PublicSign(self) -> bool: ...
    @property
    def ReportSuppressedDiagnostics(self) -> bool: ...
    @property
    def ScriptClassName(self) -> str: ...
    @property
    def SourceReferenceResolver(self) -> SourceReferenceResolver: ...
    @property
    def SpecificDiagnosticOptions(self) -> Immutable.ImmutableDictionary: ...
    @property
    def StrongNameProvider(self) -> StrongNameProvider: ...
    @property
    def SyntaxTreeOptionsProvider(self) -> SyntaxTreeOptionsProvider: ...
    @property
    def WarningLevel(self) -> int: ...
    @property
    def XmlReferenceResolver(self) -> XmlReferenceResolver: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithAssemblyIdentityComparer(self, comparer: AssemblyIdentityComparer) -> CompilationOptions: ...
    @overload
    def WithConcurrentBuild(self, concurrent: bool) -> CompilationOptions: ...
    @overload
    def WithCryptoKeyContainer(self, cryptoKeyContainer: str) -> CompilationOptions: ...
    @overload
    def WithCryptoKeyFile(self, cryptoKeyFile: str) -> CompilationOptions: ...
    @overload
    def WithCryptoPublicKey(self, cryptoPublicKey: Immutable.ImmutableArray) -> CompilationOptions: ...
    @overload
    def WithDelaySign(self, delaySign: System.Nullable) -> CompilationOptions: ...
    @overload
    def WithDeterministic(self, deterministic: bool) -> CompilationOptions: ...
    @overload
    def WithGeneralDiagnosticOption(self, value: ReportDiagnostic) -> CompilationOptions: ...
    @overload
    def WithMainTypeName(self, mainTypeName: str) -> CompilationOptions: ...
    @overload
    def WithMetadataImportOptions(self, value: MetadataImportOptions) -> CompilationOptions: ...
    @overload
    def WithMetadataReferenceResolver(self, resolver: MetadataReferenceResolver) -> CompilationOptions: ...
    @overload
    def WithModuleName(self, moduleName: str) -> CompilationOptions: ...
    @overload
    def WithOptimizationLevel(self, value: OptimizationLevel) -> CompilationOptions: ...
    @overload
    def WithOutputKind(self, kind: OutputKind) -> CompilationOptions: ...
    @overload
    def WithOverflowChecks(self, checkOverflow: bool) -> CompilationOptions: ...
    @overload
    def WithPlatform(self, platform: Platform) -> CompilationOptions: ...
    @overload
    def WithPublicSign(self, publicSign: bool) -> CompilationOptions: ...
    @overload
    def WithReportSuppressedDiagnostics(self, value: bool) -> CompilationOptions: ...
    @overload
    def WithScriptClassName(self, scriptClassName: str) -> CompilationOptions: ...
    @overload
    def WithSourceReferenceResolver(self, resolver: SourceReferenceResolver) -> CompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, value: Immutable.ImmutableDictionary) -> CompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, value: Generic.IEnumerable) -> CompilationOptions: ...
    @overload
    def WithStrongNameProvider(self, provider: StrongNameProvider) -> CompilationOptions: ...
    @overload
    def WithSyntaxTreeOptionsProvider(self, provider: SyntaxTreeOptionsProvider) -> CompilationOptions: ...
    @overload
    def WithXmlReferenceResolver(self, resolver: XmlReferenceResolver) -> CompilationOptions: ...

class ControlFlowAnalysis(object):
    """    """
    @property
    def EndPointIsReachable(self) -> bool: ...
    @property
    def EntryPoints(self) -> Immutable.ImmutableArray: ...
    @property
    def ExitPoints(self) -> Immutable.ImmutableArray: ...
    @property
    def ReturnStatements(self) -> Immutable.ImmutableArray: ...
    @property
    def StartPointIsReachable(self) -> bool: ...
    @property
    def Succeeded(self) -> bool: ...

class DataFlowAnalysis(object):
    """    """
    @property
    def AlwaysAssigned(self) -> Immutable.ImmutableArray: ...
    @property
    def Captured(self) -> Immutable.ImmutableArray: ...
    @property
    def CapturedInside(self) -> Immutable.ImmutableArray: ...
    @property
    def CapturedOutside(self) -> Immutable.ImmutableArray: ...
    @property
    def DataFlowsIn(self) -> Immutable.ImmutableArray: ...
    @property
    def DataFlowsOut(self) -> Immutable.ImmutableArray: ...
    @property
    def DefinitelyAssignedOnEntry(self) -> Immutable.ImmutableArray: ...
    @property
    def DefinitelyAssignedOnExit(self) -> Immutable.ImmutableArray: ...
    @property
    def ReadInside(self) -> Immutable.ImmutableArray: ...
    @property
    def ReadOutside(self) -> Immutable.ImmutableArray: ...
    @property
    def Succeeded(self) -> bool: ...
    @property
    def UnsafeAddressTaken(self) -> Immutable.ImmutableArray: ...
    @property
    def UsedLocalFunctions(self) -> Immutable.ImmutableArray: ...
    @property
    def VariablesDeclared(self) -> Immutable.ImmutableArray: ...
    @property
    def WrittenInside(self) -> Immutable.ImmutableArray: ...
    @property
    def WrittenOutside(self) -> Immutable.ImmutableArray: ...

class ModelExtensions(object):
    """    """
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: SemanticModel, statement: SyntaxNode) -> ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: SemanticModel, firstStatement: SyntaxNode, lastStatement: SyntaxNode) -> ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: SemanticModel, statementOrExpression: SyntaxNode) -> DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: SemanticModel, firstStatement: SyntaxNode, lastStatement: SyntaxNode) -> DataFlowAnalysis: ...
    @overload
    @staticmethod
    def GetAliasInfo(semanticModel: SemanticModel, nameSyntax: SyntaxNode, cancellationToken: Threading.CancellationToken) -> IAliasSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: SemanticModel, declaration: SyntaxNode, cancellationToken: Threading.CancellationToken) -> ISymbol: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: SemanticModel, node: SyntaxNode, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetSpeculativeAliasInfo(semanticModel: SemanticModel, position: int, nameSyntax: SyntaxNode, bindingOption: SpeculativeBindingOption) -> IAliasSymbol: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: SemanticModel, position: int, expression: SyntaxNode, bindingOption: SpeculativeBindingOption) -> SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeTypeInfo(semanticModel: SemanticModel, position: int, expression: SyntaxNode, bindingOption: SpeculativeBindingOption) -> TypeInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: SemanticModel, node: SyntaxNode, cancellationToken: Threading.CancellationToken) -> SymbolInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: SemanticModel, node: SyntaxNode, cancellationToken: Threading.CancellationToken) -> TypeInfo: ...

class GeneratedKind(enum.Enum):
    Unknown = 0
    NotGenerated = 1
    MarkedGenerated = 2

class IImportScope:
    """    """
    @property
    def Aliases(self) -> Immutable.ImmutableArray: ...
    @property
    def ExternAliases(self) -> Immutable.ImmutableArray: ...
    @property
    def Imports(self) -> Immutable.ImmutableArray: ...
    @property
    def XmlNamespaces(self) -> Immutable.ImmutableArray: ...

class ImportedNamespaceOrType(System.ValueType):
    """    """
    @property
    def DeclaringSyntaxReference(self) -> SyntaxReference: ...
    @property
    def NamespaceOrType(self) -> INamespaceOrTypeSymbol: ...

class ImportedXmlNamespace(System.ValueType):
    """    """
    @property
    def DeclaringSyntaxReference(self) -> SyntaxReference: ...
    @property
    def XmlNamespace(self) -> str: ...

class NullableContext(enum.Enum):
    Disabled = 0
    WarningsEnabled = 1
    AnnotationsEnabled = 2
    Enabled = 3
    WarningsContextInherited = 4
    AnnotationsContextInherited = 8
    ContextInherited = 12

class NullableContextExtensions(object):
    """    """
    @overload
    @staticmethod
    def AnnotationsEnabled(context: NullableContext) -> bool: ...
    @overload
    @staticmethod
    def AnnotationsInherited(context: NullableContext) -> bool: ...
    @overload
    @staticmethod
    def WarningsEnabled(context: NullableContext) -> bool: ...
    @overload
    @staticmethod
    def WarningsInherited(context: NullableContext) -> bool: ...

class NullableContextOptions(enum.Enum):
    Disable = 0
    Warnings = 1
    Annotations = 2
    Enable = 3

class NullableContextOptionsExtensions(object):
    """    """
    @overload
    @staticmethod
    def AnnotationsEnabled(context: NullableContextOptions) -> bool: ...
    @overload
    @staticmethod
    def WarningsEnabled(context: NullableContextOptions) -> bool: ...

class OptimizationLevel(enum.Enum):
    Debug = 0
    Release = 1

class ParseOptions(object):
    """    """
    @overload
    def CommonWithKind(self, kind: SourceCodeKind) -> ParseOptions: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DocumentationMode(self) -> DocumentationMode: ...
    @property
    def Errors(self) -> Immutable.ImmutableArray: ...
    @property
    def Features(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def Kind(self) -> SourceCodeKind: ...
    @property
    def Language(self) -> str: ...
    @property
    def PreprocessorSymbolNames(self) -> Generic.IEnumerable: ...
    @property
    def SpecifiedKind(self) -> SourceCodeKind: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithDocumentationMode(self, documentationMode: DocumentationMode) -> ParseOptions: ...
    @overload
    def WithFeatures(self, features: Generic.IEnumerable) -> ParseOptions: ...
    @overload
    def WithKind(self, kind: SourceCodeKind) -> ParseOptions: ...

class Platform(enum.Enum):
    AnyCpu = 0
    X86 = 1
    X64 = 2
    Itanium = 3
    AnyCpu32BitPreferred = 4
    Arm = 5
    Arm64 = 6

class PreprocessingSymbolInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, other: PreprocessingSymbolInfo) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsDefined(self) -> bool: ...
    @property
    def Symbol(self) -> IPreprocessingSymbol: ...
    @overload
    def GetHashCode() -> int: ...

class ScriptCompilationInfo(object):
    """    """
    @property
    def GlobalsType(self) -> System.Type: ...
    @property
    def PreviousScriptCompilation(self) -> Compilation: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def WithPreviousScriptCompilation(self, compilation: Compilation) -> ScriptCompilationInfo: ...

class SemanticModel(object):
    """    """
    @property
    def Compilation(self) -> Compilation: ...
    @property
    def IgnoresAccessibility(self) -> bool: ...
    @property
    def IsSpeculativeSemanticModel(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def OriginalPositionForSpeculation(self) -> int: ...
    @property
    def ParentModel(self) -> SemanticModel: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @overload
    def GetConstantValue(self, node: SyntaxNode, cancellationToken: Threading.CancellationToken) -> Optional: ...
    @overload
    def GetDeclarationDiagnostics(self, span: System.Nullable, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetDiagnostics(self, span: System.Nullable, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetEnclosingSymbol(self, position: int, cancellationToken: Threading.CancellationToken) -> ISymbol: ...
    @overload
    def GetImportScopes(self, position: int, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetMethodBodyDiagnostics(self, span: System.Nullable, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetNullableContext(self, position: int) -> NullableContext: ...
    @overload
    def GetOperation(self, node: SyntaxNode, cancellationToken: Threading.CancellationToken) -> IOperation: ...
    @overload
    def GetPreprocessingSymbolInfo(self, nameSyntax: SyntaxNode) -> PreprocessingSymbolInfo: ...
    @overload
    def GetSyntaxDiagnostics(self, span: System.Nullable, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def IsAccessible(self, position: int, symbol: ISymbol) -> bool: ...
    @overload
    def IsEventUsableAsField(self, position: int, eventSymbol: IEventSymbol) -> bool: ...
    @overload
    def LookupBaseMembers(self, position: int, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def LookupLabels(self, position: int, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def LookupNamespacesAndTypes(self, position: int, container: INamespaceOrTypeSymbol, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def LookupStaticMembers(self, position: int, container: INamespaceOrTypeSymbol, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def LookupSymbols(self, position: int, container: INamespaceOrTypeSymbol, name: str, includeReducedExtensionMethods: bool) -> Immutable.ImmutableArray: ...

class SourceReferenceResolver(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def NormalizePath(self, path: str, baseFilePath: str) -> str: ...
    @overload
    def OpenRead(self, resolvedPath: str) -> IO.Stream: ...
    @overload
    def ReadText(self, resolvedPath: str) -> Text.SourceText: ...
    @overload
    def ResolveReference(self, path: str, baseFilePath: str) -> str: ...

class SpeculativeBindingOption(enum.Enum):
    BindAsExpression = 0
    BindAsTypeOrNamespace = 1

class SubsystemVersion(System.ValueType):
    """    """
    @overload
    @staticmethod
    def Create(major: int, minor: int) -> SubsystemVersion: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SubsystemVersion) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Major(self) -> int: ...
    @property
    def Minor(self) -> int: ...
    @property
    def None_(self) -> SubsystemVersion: ...
    @property
    def Windows2000(self) -> SubsystemVersion: ...
    @property
    def Windows7(self) -> SubsystemVersion: ...
    @property
    def Windows8(self) -> SubsystemVersion: ...
    @property
    def WindowsVista(self) -> SubsystemVersion: ...
    @property
    def WindowsXP(self) -> SubsystemVersion: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryParse(str_: str) -> (bool, SubsystemVersion): ...

class SymbolFilter(enum.Enum):
    None_ = 0
    Namespace = 1
    Type = 2
    Member = 4
    TypeAndMember = 6
    All = 7

class SymbolInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SymbolInfo) -> bool: ...
    @property
    def CandidateReason(self) -> CandidateReason: ...
    @property
    def CandidateSymbols(self) -> Immutable.ImmutableArray: ...
    @property
    def Symbol(self) -> ISymbol: ...
    @overload
    def GetHashCode() -> int: ...

class SyntaxTreeOptionsProvider(object):
    """    """
    @overload
    def IsGenerated(self, tree: SyntaxTree, cancellationToken: Threading.CancellationToken) -> GeneratedKind: ...
    @overload
    def TryGetDiagnosticValue(self, tree: SyntaxTree, diagnosticId: str, cancellationToken: Threading.CancellationToken) -> (bool, ReportDiagnostic): ...
    @overload
    def TryGetGlobalDiagnosticValue(self, diagnosticId: str, cancellationToken: Threading.CancellationToken) -> (bool, ReportDiagnostic): ...

class TypeInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, other: TypeInfo) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ConvertedNullability(self) -> NullabilityInfo: ...
    @property
    def ConvertedType(self) -> ITypeSymbol: ...
    @property
    def Nullability(self) -> NullabilityInfo: ...
    @property
    def Type(self) -> ITypeSymbol: ...
    @overload
    def GetHashCode() -> int: ...

class XmlReferenceResolver(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def OpenRead(self, resolvedPath: str) -> IO.Stream: ...
    @overload
    def ResolveReference(self, path: str, baseFilePath: str) -> str: ...

class DesktopAssemblyIdentityComparer(AssemblyIdentityComparer):
    """    """
    @property
    def Default(self) -> DesktopAssemblyIdentityComparer: ...
    @overload
    @staticmethod
    def LoadFromXml(input_: IO.Stream) -> DesktopAssemblyIdentityComparer: ...

class AdditionalText(object):
    """    """
    @property
    def Path(self) -> str: ...
    @overload
    def GetText(self, cancellationToken: Threading.CancellationToken) -> Text.SourceText: ...

class IAnalyzerAssemblyLoader:
    """    """
    @overload
    def AddDependencyLocation(self, fullPath: str) -> None: ...
    @overload
    def LoadFromPath(self, fullPath: str) -> Reflection.Assembly: ...

class Diagnostic(object):
    """    """
    @overload
    @staticmethod
    def Create(descriptor: DiagnosticDescriptor, location: Location, messageArgs: System.System.Array[object]) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(descriptor: DiagnosticDescriptor, location: Location, properties: Immutable.ImmutableDictionary, messageArgs: System.System.Array[object]) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(descriptor: DiagnosticDescriptor, location: Location, additionalLocations: Generic.IEnumerable, messageArgs: System.System.Array[object]) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(descriptor: DiagnosticDescriptor, location: Location, additionalLocations: Generic.IEnumerable, properties: Immutable.ImmutableDictionary, messageArgs: System.System.Array[object]) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(descriptor: DiagnosticDescriptor, location: Location, effectiveSeverity: DiagnosticSeverity, additionalLocations: Generic.IEnumerable, properties: Immutable.ImmutableDictionary, messageArgs: System.System.Array[object]) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(id_: str, category: str, message: LocalizableString, severity: DiagnosticSeverity, defaultSeverity: DiagnosticSeverity, isEnabledByDefault: bool, warningLevel: int, title: LocalizableString, description: LocalizableString, helpLink: str, location: Location, additionalLocations: Generic.IEnumerable, customTags: Generic.IEnumerable, properties: Immutable.ImmutableDictionary) -> Diagnostic: ...
    @overload
    @staticmethod
    def Create(id_: str, category: str, message: LocalizableString, severity: DiagnosticSeverity, defaultSeverity: DiagnosticSeverity, isEnabledByDefault: bool, warningLevel: int, isSuppressed: bool, title: LocalizableString, description: LocalizableString, helpLink: str, location: Location, additionalLocations: Generic.IEnumerable, customTags: Generic.IEnumerable, properties: Immutable.ImmutableDictionary) -> Diagnostic: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Diagnostic) -> bool: ...
    @property
    def AdditionalLocations(self) -> Generic.IReadOnlyList: ...
    @property
    def DefaultSeverity(self) -> DiagnosticSeverity: ...
    @property
    def Descriptor(self) -> DiagnosticDescriptor: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsSuppressed(self) -> bool: ...
    @property
    def IsWarningAsError(self) -> bool: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Properties(self) -> Immutable.ImmutableDictionary: ...
    @property
    def Severity(self) -> DiagnosticSeverity: ...
    @property
    def WarningLevel(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMessage(self, formatProvider: System.IFormatProvider) -> str: ...
    @overload
    def GetSuppressionInfo(self, compilation: Compilation) -> Diagnostics.SuppressionInfo: ...
    @overload
    def ToString() -> str: ...

class DiagnosticDescriptor(object):
    """    """
    @overload
    def __init__(self, id_: str, title: str, messageFormat: str, category: str, defaultSeverity: DiagnosticSeverity, isEnabledByDefault: bool, description: str, helpLinkUri: str, customTags: System.System.Array[str]): ...
    @overload
    def __init__(self, id_: str, title: LocalizableString, messageFormat: LocalizableString, category: str, defaultSeverity: DiagnosticSeverity, isEnabledByDefault: bool, description: LocalizableString, helpLinkUri: str, customTags: System.System.Array[str]): ...
    @overload
    def Equals(self, other: DiagnosticDescriptor) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def CustomTags(self) -> Generic.IEnumerable: ...
    @property
    def DefaultSeverity(self) -> DiagnosticSeverity: ...
    @property
    def Description(self) -> LocalizableString: ...
    @property
    def HelpLinkUri(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsEnabledByDefault(self) -> bool: ...
    @property
    def MessageFormat(self) -> LocalizableString: ...
    @property
    def Title(self) -> LocalizableString: ...
    @overload
    def GetEffectiveSeverity(self, compilationOptions: CompilationOptions) -> ReportDiagnostic: ...
    @overload
    def GetHashCode() -> int: ...

class DiagnosticFormatter(object):
    """    """
    def __init__(self): ...
    @overload
    def Format(self, diagnostic: Diagnostic, formatter: System.IFormatProvider) -> str: ...

class DiagnosticSeverity(enum.Enum):
    Hidden = 0
    Info = 1
    Warning = 2
    Error = 3

class FileLinePositionSpan(System.ValueType):
    """    """
    @overload
    def __init__(self, path: str, span: Text.LinePositionSpan): ...
    @overload
    def __init__(self, path: str, start: Text.LinePosition, end: Text.LinePosition): ...
    @overload
    def Equals(self, other: FileLinePositionSpan) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def EndLinePosition(self) -> Text.LinePosition: ...
    @property
    def HasMappedPath(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def Span(self) -> Text.LinePositionSpan: ...
    @property
    def StartLinePosition(self) -> Text.LinePosition: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class LocalizableResourceString(LocalizableString):
    """    """
    @overload
    def __init__(self, nameOfLocalizableResource: str, resourceManager: Resources.ResourceManager, resourceSource: System.Type): ...
    @overload
    def __init__(self, nameOfLocalizableResource: str, resourceManager: Resources.ResourceManager, resourceSource: System.Type, formatArguments: System.System.Array[str]): ...
    @property
    def OnException(self): ...

class LocalizableString(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: LocalizableString) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, formatProvider: System.IFormatProvider) -> str: ...
    @property
    def OnException(self): ...

class Location(object):
    """    """
    @overload
    @staticmethod
    def Create(syntaxTree: SyntaxTree, textSpan: Text.TextSpan) -> Location: ...
    @overload
    @staticmethod
    def Create(filePath: str, textSpan: Text.TextSpan, lineSpan: Text.LinePositionSpan) -> Location: ...
    @overload
    @staticmethod
    def Create(filePath: str, textSpan: Text.TextSpan, lineSpan: Text.LinePositionSpan, mappedFilePath: str, mappedLineSpan: Text.LinePositionSpan) -> Location: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsInMetadata(self) -> bool: ...
    @property
    def IsInSource(self) -> bool: ...
    @property
    def Kind(self) -> LocationKind: ...
    @property
    def MetadataModule(self) -> IModuleSymbol: ...
    @property
    def None_(self) -> Location: ...
    @property
    def SourceSpan(self) -> Text.TextSpan: ...
    @property
    def SourceTree(self) -> SyntaxTree: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLineSpan() -> FileLinePositionSpan: ...
    @overload
    def GetMappedLineSpan() -> FileLinePositionSpan: ...
    @overload
    def ToString() -> str: ...

class LocationKind(enum.Enum):
    None_ = 0
    SourceFile = 1
    MetadataFile = 2
    XmlFile = 3
    ExternalFile = 4

class ReportDiagnostic(enum.Enum):
    Default = 0
    Error = 1
    Warn = 2
    Info = 3
    Hidden = 4
    Suppress = 5

class SuppressionDescriptor(object):
    """    """
    @overload
    def __init__(self, id_: str, suppressedDiagnosticId: str, justification: str): ...
    @overload
    def __init__(self, id_: str, suppressedDiagnosticId: str, justification: LocalizableString): ...
    @overload
    def Equals(self, other: SuppressionDescriptor) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def Justification(self) -> LocalizableString: ...
    @property
    def SuppressedDiagnosticId(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class WellKnownDiagnosticTags(object):
    """    """
    @property
    def Unnecessary(self) -> str: ...
    @property
    def EditAndContinue(self) -> str: ...
    @property
    def Build(self) -> str: ...
    @property
    def Compiler(self) -> str: ...
    @property
    def Telemetry(self) -> str: ...
    @property
    def NotConfigurable(self) -> str: ...
    @property
    def AnalyzerException(self) -> str: ...
    @property
    def CustomObsolete(self) -> str: ...
    @property
    def CompilationEnd(self) -> str: ...

class DocumentationCommentId(object):
    """    """
    @overload
    @staticmethod
    def CreateDeclarationId(symbol: ISymbol) -> str: ...
    @overload
    @staticmethod
    def CreateReferenceId(symbol: ISymbol) -> str: ...
    @overload
    @staticmethod
    def GetFirstSymbolForDeclarationId(id_: str, compilation: Compilation) -> ISymbol: ...
    @overload
    @staticmethod
    def GetFirstSymbolForReferenceId(id_: str, compilation: Compilation) -> ISymbol: ...
    @overload
    @staticmethod
    def GetSymbolsForDeclarationId(id_: str, compilation: Compilation) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetSymbolsForReferenceId(id_: str, compilation: Compilation) -> Immutable.ImmutableArray: ...

class DocumentationProvider(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Default(self) -> DocumentationProvider: ...
    @overload
    def GetHashCode() -> int: ...

class DocumentationMode(enum.Enum):
    None_ = 0
    Parse = 1
    Diagnose = 2

class EmbeddedText(object):
    """    """
    @overload
    @staticmethod
    def FromBytes(filePath: str, bytes_: System.ArraySegment, checksumAlgorithm: Text.SourceHashAlgorithm) -> EmbeddedText: ...
    @overload
    @staticmethod
    def FromSource(filePath: str, text: Text.SourceText) -> EmbeddedText: ...
    @overload
    @staticmethod
    def FromStream(filePath: str, stream: IO.Stream, checksumAlgorithm: Text.SourceHashAlgorithm) -> EmbeddedText: ...
    @property
    def Checksum(self) -> Immutable.ImmutableArray: ...
    @property
    def ChecksumAlgorithm(self) -> Text.SourceHashAlgorithm: ...
    @property
    def FilePath(self) -> str: ...

class FileSystemExtensions(object):
    """    """
    @overload
    @staticmethod
    def Emit(compilation: Compilation, outputPath: str, pdbPath: str, xmlDocPath: str, win32ResourcesPath: str, manifestResources: Generic.IEnumerable, cancellationToken: Threading.CancellationToken) -> Emit.EmitResult: ...

class OperationKind(enum.Enum):
    None_ = 0
    Invalid = 1
    Block = 2
    VariableDeclarationGroup = 3
    Switch = 4
    Loop = 5
    Labeled = 6
    Branch = 7
    Empty = 8
    Return = 9
    YieldBreak = 10
    Lock = 11
    Try = 12
    Using = 13
    YieldReturn = 14
    ExpressionStatement = 15
    LocalFunction = 16
    Stop = 17
    End = 18
    RaiseEvent = 19
    Literal = 20
    Conversion = 21
    Invocation = 22
    ArrayElementReference = 23
    LocalReference = 24
    ParameterReference = 25
    FieldReference = 26
    MethodReference = 27
    PropertyReference = 28
    EventReference = 30
    Unary = 31
    UnaryOperator = 31
    Binary = 32
    BinaryOperator = 32
    Conditional = 33
    Coalesce = 34
    AnonymousFunction = 35
    ObjectCreation = 36
    TypeParameterObjectCreation = 37
    ArrayCreation = 38
    InstanceReference = 39
    IsType = 40
    Await = 41
    SimpleAssignment = 42
    CompoundAssignment = 43
    Parenthesized = 44
    EventAssignment = 45
    ConditionalAccess = 46
    ConditionalAccessInstance = 47
    InterpolatedString = 48
    AnonymousObjectCreation = 49
    ObjectOrCollectionInitializer = 50
    MemberInitializer = 51
    CollectionElementInitializer = 52
    NameOf = 53
    Tuple = 54
    DynamicObjectCreation = 55
    DynamicMemberReference = 56
    DynamicInvocation = 57
    DynamicIndexerAccess = 58
    TranslatedQuery = 59
    DelegateCreation = 60
    DefaultValue = 61
    TypeOf = 62
    SizeOf = 63
    AddressOf = 64
    IsPattern = 65
    Increment = 66
    Throw = 67
    Decrement = 68
    DeconstructionAssignment = 69
    DeclarationExpression = 70
    OmittedArgument = 71
    FieldInitializer = 72
    VariableInitializer = 73
    PropertyInitializer = 74
    ParameterInitializer = 75
    ArrayInitializer = 76
    VariableDeclarator = 77
    VariableDeclaration = 78
    Argument = 79
    CatchClause = 80
    SwitchCase = 81
    CaseClause = 82
    InterpolatedStringText = 83
    Interpolation = 84
    ConstantPattern = 85
    DeclarationPattern = 86
    TupleBinary = 87
    TupleBinaryOperator = 87
    MethodBody = 88
    MethodBodyOperation = 88
    ConstructorBody = 89
    ConstructorBodyOperation = 89
    Discard = 90
    FlowCapture = 91
    FlowCaptureReference = 92
    IsNull = 93
    CaughtException = 94
    StaticLocalInitializationSemaphore = 95
    FlowAnonymousFunction = 96
    CoalesceAssignment = 97
    Range = 99
    ReDim = 101
    ReDimClause = 102
    RecursivePattern = 103
    DiscardPattern = 104
    SwitchExpression = 105
    SwitchExpressionArm = 106
    PropertySubpattern = 107
    UsingDeclaration = 108
    NegatedPattern = 109
    BinaryPattern = 110
    TypePattern = 111
    RelationalPattern = 112
    With = 113
    InterpolatedStringHandlerCreation = 114
    InterpolatedStringAddition = 115
    InterpolatedStringAppendLiteral = 116
    InterpolatedStringAppendFormatted = 117
    InterpolatedStringAppendInvalid = 118
    InterpolatedStringHandlerArgumentPlaceholder = 119
    FunctionPointerInvocation = 120
    ListPattern = 121
    SlicePattern = 122
    ImplicitIndexerReference = 123
    Utf8String = 124
    Attribute = 125

class MetadataImportOptions(enum.Enum):
    Public = 0
    Internal = 1
    All = 2

class AssemblyIdentity(object):
    """    """
    def __init__(self, name: str, version: System.Version, cultureName: str, publicKeyOrToken: Immutable.ImmutableArray, hasPublicKey: bool, isRetargetable: bool, contentType: Reflection.AssemblyContentType): ...
    @overload
    def Equals(self, obj: AssemblyIdentity) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromAssemblyDefinition(assembly: Reflection.Assembly) -> AssemblyIdentity: ...
    @property
    def ContentType(self) -> Reflection.AssemblyContentType: ...
    @property
    def CultureName(self) -> str: ...
    @property
    def Flags(self) -> Reflection.AssemblyNameFlags: ...
    @property
    def HasPublicKey(self) -> bool: ...
    @property
    def IsRetargetable(self) -> bool: ...
    @property
    def IsStrongName(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PublicKey(self) -> Immutable.ImmutableArray: ...
    @property
    def PublicKeyToken(self) -> Immutable.ImmutableArray: ...
    @property
    def Version(self) -> System.Version: ...
    @overload
    def GetDisplayName(self, fullKey: bool) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryParseDisplayName(displayName: str) -> (bool, AssemblyIdentity): ...
    @overload
    @staticmethod
    def TryParseDisplayName(displayName: str) -> (bool, AssemblyIdentity, AssemblyIdentityParts): ...

class AssemblyIdentityComparer(object):
    """    """
    @overload
    def Compare(self, reference: AssemblyIdentity, definition: AssemblyIdentity) -> ComparisonResult: ...
    @property
    def CultureComparer(self) -> System.StringComparer: ...
    @property
    def Default(self) -> AssemblyIdentityComparer: ...
    @property
    def SimpleNameComparer(self) -> System.StringComparer: ...
    @overload
    def ReferenceMatchesDefinition(self, referenceDisplayName: str, definition: AssemblyIdentity) -> bool: ...
    @overload
    def ReferenceMatchesDefinition(self, reference: AssemblyIdentity, definition: AssemblyIdentity) -> bool: ...

class AssemblyIdentityParts(enum.Enum):
    Name = 1
    VersionMajor = 2
    VersionMinor = 4
    VersionBuild = 8
    VersionRevision = 16
    Version = 30
    Culture = 32
    PublicKey = 64
    PublicKeyToken = 128
    PublicKeyOrToken = 192
    Retargetability = 256
    ContentType = 512
    Unknown = 1024

class AssemblyMetadata(Metadata):
    """    """
    @overload
    @staticmethod
    def Create(module: ModuleMetadata) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def Create(modules: Immutable.ImmutableArray) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def Create(modules: Generic.IEnumerable) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def Create(modules: System.Array[ModuleMetadata]) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Immutable.ImmutableArray) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Generic.IEnumerable) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def CreateFromStream(peStream: IO.Stream, leaveOpen: bool) -> AssemblyMetadata: ...
    @overload
    @staticmethod
    def CreateFromStream(peStream: IO.Stream, options: PortableExecutable.PEStreamOptions) -> AssemblyMetadata: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Kind(self) -> MetadataImageKind: ...
    @overload
    def GetModules() -> Immutable.ImmutableArray: ...
    @overload
    def GetReference(self, documentation: DocumentationProvider, aliases: Immutable.ImmutableArray, embedInteropTypes: bool, filePath: str, display: str) -> PortableExecutableReference: ...

class CompilationReference(MetadataReference):
    """    """
    @overload
    def Equals(self, other: CompilationReference) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Compilation(self) -> Compilation: ...
    @property
    def Display(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithAliases(self, aliases: Generic.IEnumerable) -> CompilationReference: ...
    @overload
    def WithAliases(self, aliases: Immutable.ImmutableArray) -> CompilationReference: ...
    @overload
    def WithEmbedInteropTypes(self, value: bool) -> CompilationReference: ...
    @overload
    def WithProperties(self, properties: MetadataReferenceProperties) -> CompilationReference: ...

class MetadataId(object):
    """    """

class Metadata(object):
    """    """
    @overload
    def Copy() -> Metadata: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Id(self) -> MetadataId: ...
    @property
    def Kind(self) -> MetadataImageKind: ...

class MetadataImageKind(enum.Enum):
    Assembly = 0
    Module = 1

class MetadataReference(object):
    """    """
    @overload
    @staticmethod
    def CreateFromFile(path: str, properties: MetadataReferenceProperties, documentation: DocumentationProvider) -> PortableExecutableReference: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Immutable.ImmutableArray, properties: MetadataReferenceProperties, documentation: DocumentationProvider, filePath: str) -> PortableExecutableReference: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Generic.IEnumerable, properties: MetadataReferenceProperties, documentation: DocumentationProvider, filePath: str) -> PortableExecutableReference: ...
    @overload
    @staticmethod
    def CreateFromStream(peStream: IO.Stream, properties: MetadataReferenceProperties, documentation: DocumentationProvider, filePath: str) -> PortableExecutableReference: ...
    @property
    def Display(self) -> str: ...
    @property
    def Properties(self) -> MetadataReferenceProperties: ...
    @overload
    def WithAliases(self, aliases: Generic.IEnumerable) -> MetadataReference: ...
    @overload
    def WithAliases(self, aliases: Immutable.ImmutableArray) -> MetadataReference: ...
    @overload
    def WithEmbedInteropTypes(self, value: bool) -> MetadataReference: ...
    @overload
    def WithProperties(self, properties: MetadataReferenceProperties) -> MetadataReference: ...

class MetadataReferenceProperties(System.ValueType):
    """    """
    def __init__(self, kind: MetadataImageKind, aliases: Immutable.ImmutableArray, embedInteropTypes: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MetadataReferenceProperties) -> bool: ...
    @property
    def Aliases(self) -> Immutable.ImmutableArray: ...
    @property
    def Assembly(self) -> MetadataReferenceProperties: ...
    @property
    def EmbedInteropTypes(self) -> bool: ...
    @property
    def GlobalAlias(self) -> str: ...
    @property
    def Kind(self) -> MetadataImageKind: ...
    @property
    def Module(self) -> MetadataReferenceProperties: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithAliases(self, aliases: Generic.IEnumerable) -> MetadataReferenceProperties: ...
    @overload
    def WithAliases(self, aliases: Immutable.ImmutableArray) -> MetadataReferenceProperties: ...
    @overload
    def WithEmbedInteropTypes(self, embedInteropTypes: bool) -> MetadataReferenceProperties: ...

class MetadataReferenceResolver(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ResolveMissingAssemblies(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ResolveMissingAssembly(self, definition: MetadataReference, referenceIdentity: AssemblyIdentity) -> PortableExecutableReference: ...
    @overload
    def ResolveReference(self, reference: str, baseFilePath: str, properties: MetadataReferenceProperties) -> Immutable.ImmutableArray: ...

class ModuleMetadata(Metadata):
    """    """
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Generic.IEnumerable) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: Immutable.ImmutableArray) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromImage(peImage: System.IntPtr, size: int) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromMetadata(metadata: System.IntPtr, size: int) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromMetadata(metadata: System.IntPtr, size: int, onDispose: System.Action) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromStream(peStream: IO.Stream, leaveOpen: bool) -> ModuleMetadata: ...
    @overload
    @staticmethod
    def CreateFromStream(peStream: IO.Stream, options: PortableExecutable.PEStreamOptions) -> ModuleMetadata: ...
    @overload
    def Dispose() -> None: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def Kind(self) -> MetadataImageKind: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetMetadataReader() -> Metadata.MetadataReader: ...
    @overload
    def GetModuleNames() -> Immutable.ImmutableArray: ...
    @overload
    def GetModuleVersionId() -> System.Guid: ...
    @overload
    def GetReference(self, documentation: DocumentationProvider, filePath: str, display: str) -> PortableExecutableReference: ...

class PortableExecutableReference(MetadataReference):
    """    """
    @property
    def Display(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @overload
    def GetMetadata() -> Metadata: ...
    @overload
    def GetMetadataId() -> MetadataId: ...
    @overload
    def WithAliases(self, aliases: Generic.IEnumerable) -> PortableExecutableReference: ...
    @overload
    def WithAliases(self, aliases: Immutable.ImmutableArray) -> PortableExecutableReference: ...
    @overload
    def WithEmbedInteropTypes(self, value: bool) -> PortableExecutableReference: ...
    @overload
    def WithProperties(self, properties: MetadataReferenceProperties) -> PortableExecutableReference: ...

class UnresolvedMetadataReference(MetadataReference):
    """    """
    @property
    def Display(self) -> str: ...
    @property
    def Reference(self) -> str: ...

class IOperation:
    """    """
    @overload
    def Accept(self, visitor: Operations.OperationVisitor) -> None: ...
    @overload
    def Accept(self, visitor: Operations.OperationVisitor, argument: TArgument) -> TResult: ...
    @property
    def ChildOperations(self) -> OperationList: ...
    @property
    def Children(self) -> Generic.IEnumerable: ...
    @property
    def ConstantValue(self) -> Optional: ...
    @property
    def IsImplicit(self) -> bool: ...
    @property
    def Kind(self) -> OperationKind: ...
    @property
    def Language(self) -> str: ...
    @property
    def Parent(self) -> IOperation: ...
    @property
    def SemanticModel(self) -> SemanticModel: ...
    @property
    def Syntax(self) -> SyntaxNode: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class Optional(System.ValueType):
    """    Optional[T]
    """
    def __init__(self, value: T): ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def Value(self) -> T: ...
    @overload
    def ToString() -> str: ...

class OutputKind(enum.Enum):
    ConsoleApplication = 0
    WindowsApplication = 1
    DynamicallyLinkedLibrary = 2
    NetModule = 3
    WindowsRuntimeMetadata = 4
    WindowsRuntimeApplication = 5

class ResourceDescription(object):
    """    """
    @overload
    def __init__(self, resourceName: str, dataProvider: System.Func, isPublic: bool): ...
    @overload
    def __init__(self, resourceName: str, fileName: str, dataProvider: System.Func, isPublic: bool): ...

class RuleSet(object):
    """    """
    def __init__(self, filePath: str, generalOption: ReportDiagnostic, specificOptions: Immutable.ImmutableDictionary, includes: Immutable.ImmutableArray): ...
    @property
    def FilePath(self) -> str: ...
    @property
    def GeneralDiagnosticOption(self) -> ReportDiagnostic: ...
    @property
    def Includes(self) -> Immutable.ImmutableArray: ...
    @property
    def SpecificDiagnosticOptions(self) -> Immutable.ImmutableDictionary: ...
    @overload
    @staticmethod
    def GetDiagnosticOptionsFromRulesetFile(rulesetFileFullPath: str) -> (ReportDiagnostic, Generic.Dictionary): ...
    @overload
    @staticmethod
    def GetEffectiveIncludesFromFile(filePath: str) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def LoadEffectiveRuleSetFromFile(filePath: str) -> RuleSet: ...
    @overload
    def WithEffectiveAction(self, action: ReportDiagnostic) -> RuleSet: ...

class RuleSetInclude(object):
    """    """
    def __init__(self, includePath: str, action: ReportDiagnostic): ...
    @property
    def Action(self) -> ReportDiagnostic: ...
    @property
    def IncludePath(self) -> str: ...
    @overload
    def LoadRuleSet(self, parent: RuleSet) -> RuleSet: ...

class RuntimeCapability(enum.Enum):
    ByRefFields = 1
    CovariantReturnsOfClasses = 2
    DefaultImplementationsOfInterfaces = 3
    NumericIntPtr = 4
    UnmanagedSignatureCallingConvention = 5
    VirtualStaticsInInterfaces = 6

class SourceCodeKind(enum.Enum):
    Regular = 0
    Script = 1
    Interactive = 2

class SourceFileResolver(SourceReferenceResolver):
    """    """
    @overload
    def __init__(self, searchPaths: Generic.IEnumerable, baseDirectory: str): ...
    @overload
    def __init__(self, searchPaths: Immutable.ImmutableArray, baseDirectory: str): ...
    @overload
    def __init__(self, searchPaths: Immutable.ImmutableArray, baseDirectory: str, pathMap: Immutable.ImmutableArray): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SourceFileResolver) -> bool: ...
    @property
    def BaseDirectory(self) -> str: ...
    @property
    def Default(self) -> SourceFileResolver: ...
    @property
    def PathMap(self) -> Immutable.ImmutableArray: ...
    @property
    def SearchPaths(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def NormalizePath(self, path: str, baseFilePath: str) -> str: ...
    @overload
    def OpenRead(self, resolvedPath: str) -> IO.Stream: ...
    @overload
    def ResolveReference(self, path: str, baseFilePath: str) -> str: ...

class GeneratorAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, firstLanguage: str, additionalLanguages: System.System.Array[str]): ...
    @property
    def Languages(self) -> System.System.Array[str]: ...

class GeneratorExecutionContext(System.ValueType):
    """    """
    @overload
    def AddSource(self, hintName: str, source: str) -> None: ...
    @overload
    def AddSource(self, hintName: str, sourceText: Text.SourceText) -> None: ...
    @property
    def AdditionalFiles(self) -> Immutable.ImmutableArray: ...
    @property
    def AnalyzerConfigOptions(self) -> Diagnostics.AnalyzerConfigOptionsProvider: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> Compilation: ...
    @property
    def ParseOptions(self) -> ParseOptions: ...
    @property
    def SyntaxContextReceiver(self) -> ISyntaxContextReceiver: ...
    @property
    def SyntaxReceiver(self) -> ISyntaxReceiver: ...
    @overload
    def ReportDiagnostic(self, diagnostic: Diagnostic) -> None: ...

class GeneratorInitializationContext(System.ValueType):
    """    """
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @overload
    def RegisterForPostInitialization(self, callback: System.Action) -> None: ...
    @overload
    def RegisterForSyntaxNotifications(self, receiverCreator: SyntaxReceiverCreator) -> None: ...
    @overload
    def RegisterForSyntaxNotifications(self, receiverCreator: SyntaxContextReceiverCreator) -> None: ...

class GeneratorSyntaxContext(System.ValueType):
    """    """
    @property
    def Node(self) -> SyntaxNode: ...
    @property
    def SemanticModel(self) -> SemanticModel: ...

class GeneratorPostInitializationContext(System.ValueType):
    """    """
    @overload
    def AddSource(self, hintName: str, source: str) -> None: ...
    @overload
    def AddSource(self, hintName: str, sourceText: Text.SourceText) -> None: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...

class GeneratorDriver(object):
    """    """
    @overload
    def AddAdditionalTexts(self, additionalTexts: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def AddGenerators(self, generators: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def GetRunResult() -> GeneratorDriverRunResult: ...
    @overload
    def GetTimingInfo() -> GeneratorDriverTimingInfo: ...
    @overload
    def RemoveAdditionalTexts(self, additionalTexts: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def RemoveGenerators(self, generators: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def ReplaceAdditionalText(self, oldText: AdditionalText, newText: AdditionalText) -> GeneratorDriver: ...
    @overload
    def ReplaceAdditionalTexts(self, newTexts: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def ReplaceGenerators(self, generators: Immutable.ImmutableArray) -> GeneratorDriver: ...
    @overload
    def RunGenerators(self, compilation: Compilation, cancellationToken: Threading.CancellationToken) -> GeneratorDriver: ...
    @overload
    def RunGeneratorsAndUpdateCompilation(self, compilation: Compilation, cancellationToken: Threading.CancellationToken) -> (GeneratorDriver, Compilation, Immutable.ImmutableArray): ...
    @overload
    def WithUpdatedAnalyzerConfigOptions(self, newOptions: Diagnostics.AnalyzerConfigOptionsProvider) -> GeneratorDriver: ...
    @overload
    def WithUpdatedParseOptions(self, newOptions: ParseOptions) -> GeneratorDriver: ...

class GeneratorDriverOptions(System.ValueType):
    """    """
    @overload
    def __init__(self, disabledOutputs: IncrementalGeneratorOutputKind): ...
    @overload
    def __init__(self, disabledOutputs: IncrementalGeneratorOutputKind, trackIncrementalGeneratorSteps: bool): ...
    @property
    def DisabledOutputs(self) -> IncrementalGeneratorOutputKind: ...
    @property
    def TrackIncrementalGeneratorSteps(self) -> bool: ...

class GeneratorExtensions(object):
    """    """
    @overload
    @staticmethod
    def AsSourceGenerator(incrementalGenerator: IIncrementalGenerator) -> ISourceGenerator: ...
    @overload
    @staticmethod
    def GetGeneratorType(generator: ISourceGenerator) -> System.Type: ...

class IIncrementalGenerator:
    """    """
    @overload
    def Initialize(self, context: IncrementalGeneratorInitializationContext) -> None: ...

class IncrementalGeneratorInitializationContext(System.ValueType):
    """    """
    @property
    def AdditionalTextsProvider(self) -> IncrementalValuesProvider: ...
    @property
    def AnalyzerConfigOptionsProvider(self) -> IncrementalValueProvider: ...
    @property
    def CompilationProvider(self) -> IncrementalValueProvider: ...
    @property
    def MetadataReferencesProvider(self) -> IncrementalValuesProvider: ...
    @property
    def ParseOptionsProvider(self) -> IncrementalValueProvider: ...
    @property
    def SyntaxProvider(self) -> SyntaxValueProvider: ...
    @overload
    def RegisterImplementationSourceOutput(self, source: IncrementalValueProvider, action: System.Action) -> None: ...
    @overload
    def RegisterImplementationSourceOutput(self, source: IncrementalValuesProvider, action: System.Action) -> None: ...
    @overload
    def RegisterPostInitializationOutput(self, callback: System.Action) -> None: ...
    @overload
    def RegisterSourceOutput(self, source: IncrementalValueProvider, action: System.Action) -> None: ...
    @overload
    def RegisterSourceOutput(self, source: IncrementalValuesProvider, action: System.Action) -> None: ...

class IncrementalGeneratorPostInitializationContext(System.ValueType):
    """    """
    @overload
    def AddSource(self, hintName: str, source: str) -> None: ...
    @overload
    def AddSource(self, hintName: str, sourceText: Text.SourceText) -> None: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...

class SourceProductionContext(System.ValueType):
    """    """
    @overload
    def AddSource(self, hintName: str, source: str) -> None: ...
    @overload
    def AddSource(self, hintName: str, sourceText: Text.SourceText) -> None: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @overload
    def ReportDiagnostic(self, diagnostic: Diagnostic) -> None: ...

class IncrementalGeneratorRunStep(object):
    """    """
    @property
    def ElapsedTime(self) -> System.TimeSpan: ...
    @property
    def Inputs(self) -> Immutable.ImmutableArray: ...
    @property
    def Name(self) -> str: ...
    @property
    def Outputs(self) -> Immutable.ImmutableArray: ...

class IncrementalStepRunReason(enum.Enum):
    New = 0
    Modified = 1
    Unchanged = 2
    Cached = 3
    Removed = 4

class IncrementalValueProvider(System.ValueType):
    """    IncrementalValueProvider[TValue]
    """

class IncrementalValuesProvider(System.ValueType):
    """    IncrementalValuesProvider[TValues]
    """

class ISourceGenerator:
    """    """
    @overload
    def Execute(self, context: GeneratorExecutionContext) -> None: ...
    @overload
    def Initialize(self, context: GeneratorInitializationContext) -> None: ...

class ISyntaxReceiver:
    """    """
    @overload
    def OnVisitSyntaxNode(self, syntaxNode: SyntaxNode) -> None: ...

class SyntaxReceiverCreator(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> ISyntaxReceiver: ...
    @overload
    def Invoke() -> ISyntaxReceiver: ...

class ISyntaxContextReceiver:
    """    """
    @overload
    def OnVisitSyntaxNode(self, context: GeneratorSyntaxContext) -> None: ...

class SyntaxContextReceiverCreator(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> ISyntaxContextReceiver: ...
    @overload
    def Invoke() -> ISyntaxContextReceiver: ...

class IncrementalGeneratorOutputKind(enum.Enum):
    None_ = 0
    Source = 1
    PostInit = 2
    Implementation = 4

class SyntaxValueProvider(System.ValueType):
    """    """
    @overload
    def CreateSyntaxProvider(self, predicate: System.Func, transform: System.Func) -> IncrementalValuesProvider: ...
    @overload
    def ForAttributeWithMetadataName(self, fullyQualifiedMetadataName: str, predicate: System.Func, transform: System.Func) -> IncrementalValuesProvider: ...

class GeneratorAttributeSyntaxContext(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Immutable.ImmutableArray: ...
    @property
    def SemanticModel(self) -> SemanticModel: ...
    @property
    def TargetNode(self) -> SyntaxNode: ...
    @property
    def TargetSymbol(self) -> ISymbol: ...

class IncrementalValueProviderExtensions(object):
    """    """
    @overload
    @staticmethod
    def Collect(source: IncrementalValuesProvider) -> IncrementalValueProvider: ...
    @overload
    @staticmethod
    def Combine(provider1: IncrementalValueProvider, provider2: IncrementalValueProvider) -> IncrementalValueProvider: ...
    @overload
    @staticmethod
    def Combine(provider1: IncrementalValuesProvider, provider2: IncrementalValueProvider) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def Select(source: IncrementalValuesProvider, selector: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def Select(source: IncrementalValueProvider, selector: System.Func) -> IncrementalValueProvider: ...
    @overload
    @staticmethod
    def SelectMany(source: IncrementalValuesProvider, selector: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def SelectMany(source: IncrementalValueProvider, selector: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def SelectMany(source: IncrementalValueProvider, selector: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def SelectMany(source: IncrementalValuesProvider, selector: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def Where(source: IncrementalValuesProvider, predicate: System.Func) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def WithComparer(source: IncrementalValueProvider, comparer: Generic.IEqualityComparer) -> IncrementalValueProvider: ...
    @overload
    @staticmethod
    def WithComparer(source: IncrementalValuesProvider, comparer: Generic.IEqualityComparer) -> IncrementalValuesProvider: ...
    @overload
    @staticmethod
    def WithTrackingName(source: IncrementalValueProvider, name: str) -> IncrementalValueProvider: ...
    @overload
    @staticmethod
    def WithTrackingName(source: IncrementalValuesProvider, name: str) -> IncrementalValuesProvider: ...

class GeneratorDriverRunResult(object):
    """    """
    @property
    def Diagnostics(self) -> Immutable.ImmutableArray: ...
    @property
    def GeneratedTrees(self) -> Immutable.ImmutableArray: ...
    @property
    def Results(self) -> Immutable.ImmutableArray: ...

class GeneratorRunResult(System.ValueType):
    """    """
    @property
    def Diagnostics(self) -> Immutable.ImmutableArray: ...
    @property
    def Exception(self) -> System.Exception: ...
    @property
    def GeneratedSources(self) -> Immutable.ImmutableArray: ...
    @property
    def Generator(self) -> ISourceGenerator: ...
    @property
    def TrackedOutputSteps(self) -> Immutable.ImmutableDictionary: ...
    @property
    def TrackedSteps(self) -> Immutable.ImmutableDictionary: ...

class GeneratedSourceResult(System.ValueType):
    """    """
    @property
    def HintName(self) -> str: ...
    @property
    def SourceText(self) -> Text.SourceText: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...

class GeneratorDriverTimingInfo(System.ValueType):
    """    """
    @property
    def ElapsedTime(self) -> System.TimeSpan: ...
    @property
    def GeneratorTimes(self) -> Immutable.ImmutableArray: ...

class GeneratorTimingInfo(System.ValueType):
    """    """
    @property
    def ElapsedTime(self) -> System.TimeSpan: ...
    @property
    def Generator(self) -> ISourceGenerator: ...

class WellKnownGeneratorInputs(object):
    """    """
    @property
    def Compilation(self) -> str: ...
    @property
    def ParseOptions(self) -> str: ...
    @property
    def AdditionalTexts(self) -> str: ...
    @property
    def AnalyzerConfigOptions(self) -> str: ...
    @property
    def MetadataReferences(self) -> str: ...

class WellKnownGeneratorOutputs(object):
    """    """
    @property
    def SourceOutput(self) -> str: ...
    @property
    def ImplementationSourceOutput(self) -> str: ...

class SpecialType(enum.Enum):
    None_ = 0
    System_Object = 1
    System_Enum = 2
    System_MulticastDelegate = 3
    System_Delegate = 4
    System_ValueType = 5
    System_Void = 6
    System_Boolean = 7
    System_Char = 8
    System_SByte = 9
    System_Byte = 10
    System_Int16 = 11
    System_UInt16 = 12
    System_Int32 = 13
    System_UInt32 = 14
    System_Int64 = 15
    System_UInt64 = 16
    System_Decimal = 17
    System_Single = 18
    System_Double = 19
    System_String = 20
    System_IntPtr = 21
    System_UIntPtr = 22
    System_Array = 23
    System_Collections_IEnumerable = 24
    System_Collections_Generic_IEnumerable_T = 25
    System_Collections_Generic_IList_T = 26
    System_Collections_Generic_ICollection_T = 27
    System_Collections_IEnumerator = 28
    System_Collections_Generic_IEnumerator_T = 29
    System_Collections_Generic_IReadOnlyList_T = 30
    System_Collections_Generic_IReadOnlyCollection_T = 31
    System_Nullable_T = 32
    System_DateTime = 33
    System_Runtime_CompilerServices_IsVolatile = 34
    System_IDisposable = 35
    System_TypedReference = 36
    System_ArgIterator = 37
    System_RuntimeArgumentHandle = 38
    System_RuntimeFieldHandle = 39
    System_RuntimeMethodHandle = 40
    System_RuntimeTypeHandle = 41
    System_IAsyncResult = 42
    System_AsyncCallback = 43
    System_Runtime_CompilerServices_RuntimeFeature = 44
    System_Runtime_CompilerServices_PreserveBaseOverridesAttribute = 45
    Count = 45

class DesktopStrongNameProvider(StrongNameProvider):
    """    """
    @overload
    def __init__(self, keyFileSearchPaths: Immutable.ImmutableArray): ...
    @overload
    def __init__(self, keyFileSearchPaths: Immutable.ImmutableArray, tempPath: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class StrongNameProvider(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class SymbolDisplayDelegateStyle(enum.Enum):
    NameOnly = 0
    NameAndParameters = 1
    NameAndSignature = 2

class SymbolDisplayExtensionMethodStyle(enum.Enum):
    Default = 0
    InstanceMethod = 1
    StaticMethod = 2

class SymbolDisplayExtensions(object):
    """    """
    @overload
    @staticmethod
    def ToDisplayString(parts: Immutable.ImmutableArray) -> str: ...

class SymbolDisplayFormat(object):
    """    """
    def __init__(self, globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle, typeQualificationStyle: SymbolDisplayTypeQualificationStyle, genericsOptions: SymbolDisplayGenericsOptions, memberOptions: SymbolDisplayMemberOptions, delegateStyle: SymbolDisplayDelegateStyle, extensionMethodStyle: SymbolDisplayExtensionMethodStyle, parameterOptions: SymbolDisplayParameterOptions, propertyStyle: SymbolDisplayPropertyStyle, localOptions: SymbolDisplayLocalOptions, kindOptions: SymbolDisplayKindOptions, miscellaneousOptions: SymbolDisplayMiscellaneousOptions): ...
    @overload
    def AddGenericsOptions(self, options: SymbolDisplayGenericsOptions) -> SymbolDisplayFormat: ...
    @overload
    def AddKindOptions(self, options: SymbolDisplayKindOptions) -> SymbolDisplayFormat: ...
    @overload
    def AddLocalOptions(self, options: SymbolDisplayLocalOptions) -> SymbolDisplayFormat: ...
    @overload
    def AddMemberOptions(self, options: SymbolDisplayMemberOptions) -> SymbolDisplayFormat: ...
    @overload
    def AddMiscellaneousOptions(self, options: SymbolDisplayMiscellaneousOptions) -> SymbolDisplayFormat: ...
    @overload
    def AddParameterOptions(self, options: SymbolDisplayParameterOptions) -> SymbolDisplayFormat: ...
    @property
    def CSharpErrorMessageFormat(self) -> SymbolDisplayFormat: ...
    @property
    def CSharpShortErrorMessageFormat(self) -> SymbolDisplayFormat: ...
    @property
    def DelegateStyle(self) -> SymbolDisplayDelegateStyle: ...
    @property
    def ExtensionMethodStyle(self) -> SymbolDisplayExtensionMethodStyle: ...
    @property
    def FullyQualifiedFormat(self) -> SymbolDisplayFormat: ...
    @property
    def GenericsOptions(self) -> SymbolDisplayGenericsOptions: ...
    @property
    def GlobalNamespaceStyle(self) -> SymbolDisplayGlobalNamespaceStyle: ...
    @property
    def KindOptions(self) -> SymbolDisplayKindOptions: ...
    @property
    def LocalOptions(self) -> SymbolDisplayLocalOptions: ...
    @property
    def MemberOptions(self) -> SymbolDisplayMemberOptions: ...
    @property
    def MinimallyQualifiedFormat(self) -> SymbolDisplayFormat: ...
    @property
    def MiscellaneousOptions(self) -> SymbolDisplayMiscellaneousOptions: ...
    @property
    def ParameterOptions(self) -> SymbolDisplayParameterOptions: ...
    @property
    def PropertyStyle(self) -> SymbolDisplayPropertyStyle: ...
    @property
    def TypeQualificationStyle(self) -> SymbolDisplayTypeQualificationStyle: ...
    @property
    def VisualBasicErrorMessageFormat(self) -> SymbolDisplayFormat: ...
    @property
    def VisualBasicShortErrorMessageFormat(self) -> SymbolDisplayFormat: ...
    @overload
    def RemoveGenericsOptions(self, options: SymbolDisplayGenericsOptions) -> SymbolDisplayFormat: ...
    @overload
    def RemoveKindOptions(self, options: SymbolDisplayKindOptions) -> SymbolDisplayFormat: ...
    @overload
    def RemoveLocalOptions(self, options: SymbolDisplayLocalOptions) -> SymbolDisplayFormat: ...
    @overload
    def RemoveMemberOptions(self, options: SymbolDisplayMemberOptions) -> SymbolDisplayFormat: ...
    @overload
    def RemoveMiscellaneousOptions(self, options: SymbolDisplayMiscellaneousOptions) -> SymbolDisplayFormat: ...
    @overload
    def RemoveParameterOptions(self, options: SymbolDisplayParameterOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithGenericsOptions(self, options: SymbolDisplayGenericsOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithGlobalNamespaceStyle(self, style: SymbolDisplayGlobalNamespaceStyle) -> SymbolDisplayFormat: ...
    @overload
    def WithKindOptions(self, options: SymbolDisplayKindOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithLocalOptions(self, options: SymbolDisplayLocalOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithMemberOptions(self, options: SymbolDisplayMemberOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithMiscellaneousOptions(self, options: SymbolDisplayMiscellaneousOptions) -> SymbolDisplayFormat: ...
    @overload
    def WithParameterOptions(self, options: SymbolDisplayParameterOptions) -> SymbolDisplayFormat: ...

class SymbolDisplayGenericsOptions(enum.Enum):
    None_ = 0
    IncludeTypeParameters = 1
    IncludeTypeConstraints = 2
    IncludeVariance = 4

class SymbolDisplayGlobalNamespaceStyle(enum.Enum):
    Omitted = 0
    OmittedAsContaining = 1
    Included = 2

class SymbolDisplayKindOptions(enum.Enum):
    None_ = 0
    IncludeNamespaceKeyword = 1
    IncludeTypeKeyword = 2
    IncludeMemberKeyword = 4

class SymbolDisplayLocalOptions(enum.Enum):
    None_ = 0
    IncludeType = 1
    IncludeConstantValue = 2
    IncludeRef = 4
    IncludeModifiers = 4

class SymbolDisplayMemberOptions(enum.Enum):
    None_ = 0
    IncludeType = 1
    IncludeModifiers = 2
    IncludeAccessibility = 4
    IncludeExplicitInterface = 8
    IncludeParameters = 16
    IncludeContainingType = 32
    IncludeConstantValue = 64
    IncludeRef = 128

class SymbolDisplayMiscellaneousOptions(enum.Enum):
    None_ = 0
    UseSpecialTypes = 1
    EscapeKeywordIdentifiers = 2
    UseAsterisksInMultiDimensionalArrays = 4
    UseErrorTypeSymbolName = 8
    RemoveAttributeSuffix = 16
    ExpandNullable = 32
    IncludeNullableReferenceTypeModifier = 64
    AllowDefaultLiteral = 128
    IncludeNotNullableReferenceTypeModifier = 256
    CollapseTupleTypes = 512
    ExpandValueTuple = 1024

class SymbolDisplayParameterOptions(enum.Enum):
    None_ = 0
    IncludeExtensionThis = 1
    IncludeParamsRefOut = 2
    IncludeModifiers = 2
    IncludeType = 4
    IncludeName = 8
    IncludeDefaultValue = 16
    IncludeOptionalBrackets = 32

class SymbolDisplayPart(System.ValueType):
    """    """
    def __init__(self, kind: SymbolDisplayPartKind, symbol: ISymbol, text: str): ...
    @property
    def Kind(self) -> SymbolDisplayPartKind: ...
    @property
    def Symbol(self) -> ISymbol: ...
    @overload
    def ToString() -> str: ...

class SymbolDisplayPartKind(enum.Enum):
    AliasName = 0
    AssemblyName = 1
    ClassName = 2
    DelegateName = 3
    EnumName = 4
    ErrorTypeName = 5
    EventName = 6
    FieldName = 7
    InterfaceName = 8
    Keyword = 9
    LabelName = 10
    LineBreak = 11
    NumericLiteral = 12
    StringLiteral = 13
    LocalName = 14
    MethodName = 15
    ModuleName = 16
    NamespaceName = 17
    Operator = 18
    ParameterName = 19
    PropertyName = 20
    Punctuation = 21
    Space = 22
    StructName = 23
    AnonymousTypeIndicator = 24
    Text = 25
    TypeParameterName = 26
    RangeVariableName = 27
    EnumMemberName = 28
    ExtensionMethodName = 29
    ConstantName = 30
    RecordClassName = 31
    RecordStructName = 32

class SymbolDisplayPropertyStyle(enum.Enum):
    NameOnly = 0
    ShowReadWriteDescriptor = 1

class SymbolDisplayTypeQualificationStyle(enum.Enum):
    NameOnly = 0
    NameAndContainingTypes = 1
    NameAndContainingTypesAndNamespaces = 2

class Accessibility(enum.Enum):
    NotApplicable = 0
    Private = 1
    ProtectedAndInternal = 2
    ProtectedAndFriend = 2
    Protected = 3
    Internal = 4
    Friend = 4
    ProtectedOrInternal = 5
    ProtectedOrFriend = 5
    Public = 6

class AttributeData(object):
    """    """
    @property
    def ApplicationSyntaxReference(self) -> SyntaxReference: ...
    @property
    def AttributeClass(self) -> INamedTypeSymbol: ...
    @property
    def AttributeConstructor(self) -> IMethodSymbol: ...
    @property
    def ConstructorArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def NamedArguments(self) -> Immutable.ImmutableArray: ...

class CustomModifier(object):
    """    """
    @property
    def IsOptional(self) -> bool: ...
    @property
    def Modifier(self) -> INamedTypeSymbol: ...

class IAliasSymbol:
    """    """
    @property
    def Target(self) -> INamespaceOrTypeSymbol: ...

class IArrayTypeSymbol:
    """    """
    @overload
    def Equals(self, other: IArrayTypeSymbol) -> bool: ...
    @property
    def CustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def ElementNullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def ElementType(self) -> ITypeSymbol: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def LowerBounds(self) -> Immutable.ImmutableArray: ...
    @property
    def Rank(self) -> int: ...
    @property
    def Sizes(self) -> Immutable.ImmutableArray: ...

class IAssemblySymbol:
    """    """
    @property
    def GlobalNamespace(self) -> INamespaceSymbol: ...
    @property
    def Identity(self) -> AssemblyIdentity: ...
    @property
    def IsInteractive(self) -> bool: ...
    @property
    def MightContainExtensionMethods(self) -> bool: ...
    @property
    def Modules(self) -> Generic.IEnumerable: ...
    @property
    def NamespaceNames(self) -> Generic.ICollection: ...
    @property
    def TypeNames(self) -> Generic.ICollection: ...
    @overload
    def GetForwardedTypes() -> Immutable.ImmutableArray: ...
    @overload
    def GetMetadata() -> AssemblyMetadata: ...
    @overload
    def GetTypeByMetadataName(self, fullyQualifiedMetadataName: str) -> INamedTypeSymbol: ...
    @overload
    def GivesAccessTo(self, toAssembly: IAssemblySymbol) -> bool: ...
    @overload
    def ResolveForwardedType(self, fullyQualifiedMetadataName: str) -> INamedTypeSymbol: ...

class IDiscardSymbol:
    """    """
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class IDynamicTypeSymbol:
    """    """

class IErrorTypeSymbol:
    """    """
    @property
    def CandidateReason(self) -> CandidateReason: ...
    @property
    def CandidateSymbols(self) -> Immutable.ImmutableArray: ...

class IEventSymbol:
    """    """
    @property
    def AddMethod(self) -> IMethodSymbol: ...
    @property
    def ExplicitInterfaceImplementations(self) -> Immutable.ImmutableArray: ...
    @property
    def IsWindowsRuntimeEvent(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def OriginalDefinition(self) -> IEventSymbol: ...
    @property
    def OverriddenEvent(self) -> IEventSymbol: ...
    @property
    def RaiseMethod(self) -> IMethodSymbol: ...
    @property
    def RemoveMethod(self) -> IMethodSymbol: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class IFieldSymbol:
    """    """
    @property
    def AssociatedSymbol(self) -> ISymbol: ...
    @property
    def ConstantValue(self) -> object: ...
    @property
    def CorrespondingTupleField(self) -> IFieldSymbol: ...
    @property
    def CustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def FixedSize(self) -> int: ...
    @property
    def HasConstantValue(self) -> bool: ...
    @property
    def IsConst(self) -> bool: ...
    @property
    def IsExplicitlyNamedTupleElement(self) -> bool: ...
    @property
    def IsFixedSizeBuffer(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def IsVolatile(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def OriginalDefinition(self) -> IFieldSymbol: ...
    @property
    def RefCustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def RefKind(self) -> RefKind: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class IFunctionPointerTypeSymbol:
    """    """
    @property
    def Signature(self) -> IMethodSymbol: ...

class ILabelSymbol:
    """    """
    @property
    def ContainingMethod(self) -> IMethodSymbol: ...

class ILocalSymbol:
    """    """
    @property
    def ConstantValue(self) -> object: ...
    @property
    def HasConstantValue(self) -> bool: ...
    @property
    def IsConst(self) -> bool: ...
    @property
    def IsFixed(self) -> bool: ...
    @property
    def IsForEach(self) -> bool: ...
    @property
    def IsFunctionValue(self) -> bool: ...
    @property
    def IsRef(self) -> bool: ...
    @property
    def IsUsing(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def RefKind(self) -> RefKind: ...
    @property
    def ScopedKind(self) -> ScopedKind: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class IMethodSymbol:
    """    """
    @overload
    def Construct(self, typeArguments: System.Array[ITypeSymbol]) -> IMethodSymbol: ...
    @overload
    def Construct(self, typeArguments: Immutable.ImmutableArray, typeArgumentNullableAnnotations: Immutable.ImmutableArray) -> IMethodSymbol: ...
    @property
    def Arity(self) -> int: ...
    @property
    def AssociatedAnonymousDelegate(self) -> INamedTypeSymbol: ...
    @property
    def AssociatedSymbol(self) -> ISymbol: ...
    @property
    def CallingConvention(self) -> Metadata.SignatureCallingConvention: ...
    @property
    def ConstructedFrom(self) -> IMethodSymbol: ...
    @property
    def ExplicitInterfaceImplementations(self) -> Immutable.ImmutableArray: ...
    @property
    def HidesBaseMethodsByName(self) -> bool: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def IsCheckedBuiltin(self) -> bool: ...
    @property
    def IsConditional(self) -> bool: ...
    @property
    def IsExtensionMethod(self) -> bool: ...
    @property
    def IsGenericMethod(self) -> bool: ...
    @property
    def IsInitOnly(self) -> bool: ...
    @property
    def IsPartialDefinition(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsVararg(self) -> bool: ...
    @property
    def MethodImplementationFlags(self) -> Reflection.MethodImplAttributes: ...
    @property
    def MethodKind(self) -> MethodKind: ...
    @property
    def OriginalDefinition(self) -> IMethodSymbol: ...
    @property
    def OverriddenMethod(self) -> IMethodSymbol: ...
    @property
    def Parameters(self) -> Immutable.ImmutableArray: ...
    @property
    def PartialDefinitionPart(self) -> IMethodSymbol: ...
    @property
    def PartialImplementationPart(self) -> IMethodSymbol: ...
    @property
    def ReceiverNullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def ReceiverType(self) -> ITypeSymbol: ...
    @property
    def ReducedFrom(self) -> IMethodSymbol: ...
    @property
    def RefCustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def RefKind(self) -> RefKind: ...
    @property
    def ReturnNullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def ReturnsByRef(self) -> bool: ...
    @property
    def ReturnsByRefReadonly(self) -> bool: ...
    @property
    def ReturnsVoid(self) -> bool: ...
    @property
    def ReturnType(self) -> ITypeSymbol: ...
    @property
    def ReturnTypeCustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def TypeArgumentNullableAnnotations(self) -> Immutable.ImmutableArray: ...
    @property
    def TypeArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def TypeParameters(self) -> Immutable.ImmutableArray: ...
    @property
    def UnmanagedCallingConventionTypes(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetDllImportData() -> DllImportData: ...
    @overload
    def GetReturnTypeAttributes() -> Immutable.ImmutableArray: ...
    @overload
    def GetTypeInferredDuringReduction(self, reducedFromTypeParameter: ITypeParameterSymbol) -> ITypeSymbol: ...
    @overload
    def ReduceExtensionMethod(self, receiverType: ITypeSymbol) -> IMethodSymbol: ...

class IModuleSymbol:
    """    """
    @property
    def GlobalNamespace(self) -> INamespaceSymbol: ...
    @property
    def ReferencedAssemblies(self) -> Immutable.ImmutableArray: ...
    @property
    def ReferencedAssemblySymbols(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetMetadata() -> ModuleMetadata: ...
    @overload
    def GetModuleNamespace(self, namespaceSymbol: INamespaceSymbol) -> INamespaceSymbol: ...

class INamedTypeSymbol:
    """    """
    @overload
    def Construct(self, typeArguments: System.Array[ITypeSymbol]) -> INamedTypeSymbol: ...
    @overload
    def Construct(self, typeArguments: Immutable.ImmutableArray, typeArgumentNullableAnnotations: Immutable.ImmutableArray) -> INamedTypeSymbol: ...
    @overload
    def ConstructUnboundGenericType() -> INamedTypeSymbol: ...
    @property
    def Arity(self) -> int: ...
    @property
    def AssociatedSymbol(self) -> ISymbol: ...
    @property
    def ConstructedFrom(self) -> INamedTypeSymbol: ...
    @property
    def Constructors(self) -> Immutable.ImmutableArray: ...
    @property
    def DelegateInvokeMethod(self) -> IMethodSymbol: ...
    @property
    def EnumUnderlyingType(self) -> INamedTypeSymbol: ...
    @property
    def InstanceConstructors(self) -> Immutable.ImmutableArray: ...
    @property
    def IsComImport(self) -> bool: ...
    @property
    def IsFileLocal(self) -> bool: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsImplicitClass(self) -> bool: ...
    @property
    def IsScriptClass(self) -> bool: ...
    @property
    def IsSerializable(self) -> bool: ...
    @property
    def IsUnboundGenericType(self) -> bool: ...
    @property
    def MemberNames(self) -> Generic.IEnumerable: ...
    @property
    def MightContainExtensionMethods(self) -> bool: ...
    @property
    def NativeIntegerUnderlyingType(self) -> INamedTypeSymbol: ...
    @property
    def OriginalDefinition(self) -> INamedTypeSymbol: ...
    @property
    def StaticConstructors(self) -> Immutable.ImmutableArray: ...
    @property
    def TupleElements(self) -> Immutable.ImmutableArray: ...
    @property
    def TupleUnderlyingType(self) -> INamedTypeSymbol: ...
    @property
    def TypeArgumentNullableAnnotations(self) -> Immutable.ImmutableArray: ...
    @property
    def TypeArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def TypeParameters(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetTypeArgumentCustomModifiers(self, ordinal: int) -> Immutable.ImmutableArray: ...

class INamespaceOrTypeSymbol:
    """    """
    @property
    def IsNamespace(self) -> bool: ...
    @property
    def IsType(self) -> bool: ...
    @overload
    def GetMembers() -> Immutable.ImmutableArray: ...
    @overload
    def GetMembers(self, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetTypeMembers() -> Immutable.ImmutableArray: ...
    @overload
    def GetTypeMembers(self, name: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetTypeMembers(self, name: str, arity: int) -> Immutable.ImmutableArray: ...

class INamespaceSymbol:
    """    """
    @property
    def ConstituentNamespaces(self) -> Immutable.ImmutableArray: ...
    @property
    def ContainingCompilation(self) -> Compilation: ...
    @property
    def IsGlobalNamespace(self) -> bool: ...
    @property
    def NamespaceKind(self) -> NamespaceKind: ...
    @overload
    def GetMembers() -> Generic.IEnumerable: ...
    @overload
    def GetMembers(self, name: str) -> Generic.IEnumerable: ...
    @overload
    def GetNamespaceMembers() -> Generic.IEnumerable: ...

class IParameterSymbol:
    """    """
    @property
    def CustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def ExplicitDefaultValue(self) -> object: ...
    @property
    def HasExplicitDefaultValue(self) -> bool: ...
    @property
    def IsDiscard(self) -> bool: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def IsParams(self) -> bool: ...
    @property
    def IsThis(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def Ordinal(self) -> int: ...
    @property
    def OriginalDefinition(self) -> IParameterSymbol: ...
    @property
    def RefCustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def RefKind(self) -> RefKind: ...
    @property
    def ScopedKind(self) -> ScopedKind: ...
    @property
    def Type(self) -> ITypeSymbol: ...

class IPointerTypeSymbol:
    """    """
    @property
    def CustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def PointedAtType(self) -> ITypeSymbol: ...

class IPreprocessingSymbol:
    """    """

class IPropertySymbol:
    """    """
    @property
    def ExplicitInterfaceImplementations(self) -> Immutable.ImmutableArray: ...
    @property
    def GetMethod(self) -> IMethodSymbol: ...
    @property
    def IsIndexer(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def IsWithEvents(self) -> bool: ...
    @property
    def IsWriteOnly(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def OriginalDefinition(self) -> IPropertySymbol: ...
    @property
    def OverriddenProperty(self) -> IPropertySymbol: ...
    @property
    def Parameters(self) -> Immutable.ImmutableArray: ...
    @property
    def RefCustomModifiers(self) -> Immutable.ImmutableArray: ...
    @property
    def RefKind(self) -> RefKind: ...
    @property
    def ReturnsByRef(self) -> bool: ...
    @property
    def ReturnsByRefReadonly(self) -> bool: ...
    @property
    def SetMethod(self) -> IMethodSymbol: ...
    @property
    def Type(self) -> ITypeSymbol: ...
    @property
    def TypeCustomModifiers(self) -> Immutable.ImmutableArray: ...

class IRangeVariableSymbol:
    """    """

class ISourceAssemblySymbol:
    """    """
    @property
    def Compilation(self) -> Compilation: ...

class ISymbol:
    """    """
    @overload
    def Accept(self, visitor: SymbolVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: SymbolVisitor) -> None: ...
    @overload
    def Accept(self, visitor: SymbolVisitor, argument: TArgument) -> TResult: ...
    @overload
    def Equals(self, other: ISymbol, equalityComparer: SymbolEqualityComparer) -> bool: ...
    @property
    def CanBeReferencedByName(self) -> bool: ...
    @property
    def ContainingAssembly(self) -> IAssemblySymbol: ...
    @property
    def ContainingModule(self) -> IModuleSymbol: ...
    @property
    def ContainingNamespace(self) -> INamespaceSymbol: ...
    @property
    def ContainingSymbol(self) -> ISymbol: ...
    @property
    def ContainingType(self) -> INamedTypeSymbol: ...
    @property
    def DeclaredAccessibility(self) -> Accessibility: ...
    @property
    def DeclaringSyntaxReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def HasUnsupportedMetadata(self) -> bool: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsDefinition(self) -> bool: ...
    @property
    def IsExtern(self) -> bool: ...
    @property
    def IsImplicitlyDeclared(self) -> bool: ...
    @property
    def IsOverride(self) -> bool: ...
    @property
    def IsSealed(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def Kind(self) -> SymbolKind: ...
    @property
    def Language(self) -> str: ...
    @property
    def Locations(self) -> Immutable.ImmutableArray: ...
    @property
    def MetadataName(self) -> str: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def OriginalDefinition(self) -> ISymbol: ...
    @overload
    def GetAttributes() -> Immutable.ImmutableArray: ...
    @overload
    def GetDocumentationCommentId() -> str: ...
    @overload
    def GetDocumentationCommentXml(self, preferredCulture: Globalization.CultureInfo, expandIncludes: bool, cancellationToken: Threading.CancellationToken) -> str: ...
    @overload
    def ToDisplayParts(self, format_: SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    def ToDisplayString(self, format_: SymbolDisplayFormat) -> str: ...
    @overload
    def ToMinimalDisplayParts(self, semanticModel: SemanticModel, position: int, format_: SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    def ToMinimalDisplayString(self, semanticModel: SemanticModel, position: int, format_: SymbolDisplayFormat) -> str: ...

class ISymbolExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetConstructedReducedFrom(method: IMethodSymbol) -> IMethodSymbol: ...

class ITypeParameterSymbol:
    """    """
    @property
    def ConstraintNullableAnnotations(self) -> Immutable.ImmutableArray: ...
    @property
    def ConstraintTypes(self) -> Immutable.ImmutableArray: ...
    @property
    def DeclaringMethod(self) -> IMethodSymbol: ...
    @property
    def DeclaringType(self) -> INamedTypeSymbol: ...
    @property
    def HasConstructorConstraint(self) -> bool: ...
    @property
    def HasNotNullConstraint(self) -> bool: ...
    @property
    def HasReferenceTypeConstraint(self) -> bool: ...
    @property
    def HasUnmanagedTypeConstraint(self) -> bool: ...
    @property
    def HasValueTypeConstraint(self) -> bool: ...
    @property
    def Ordinal(self) -> int: ...
    @property
    def OriginalDefinition(self) -> ITypeParameterSymbol: ...
    @property
    def ReducedFrom(self) -> ITypeParameterSymbol: ...
    @property
    def ReferenceTypeConstraintNullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def TypeParameterKind(self) -> TypeParameterKind: ...
    @property
    def Variance(self) -> VarianceKind: ...

class ITypeSymbol:
    """    """
    @overload
    def FindImplementationForInterfaceMember(self, interfaceMember: ISymbol) -> ISymbol: ...
    @property
    def AllInterfaces(self) -> Immutable.ImmutableArray: ...
    @property
    def BaseType(self) -> INamedTypeSymbol: ...
    @property
    def Interfaces(self) -> Immutable.ImmutableArray: ...
    @property
    def IsAnonymousType(self) -> bool: ...
    @property
    def IsNativeIntegerType(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsRecord(self) -> bool: ...
    @property
    def IsReferenceType(self) -> bool: ...
    @property
    def IsRefLikeType(self) -> bool: ...
    @property
    def IsTupleType(self) -> bool: ...
    @property
    def IsUnmanagedType(self) -> bool: ...
    @property
    def IsValueType(self) -> bool: ...
    @property
    def NullableAnnotation(self) -> NullableAnnotation: ...
    @property
    def OriginalDefinition(self) -> ITypeSymbol: ...
    @property
    def SpecialType(self) -> SpecialType: ...
    @property
    def TypeKind(self) -> TypeKind: ...
    @overload
    def ToDisplayParts(self, topLevelNullability: NullableFlowState, format_: SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    def ToDisplayString(self, topLevelNullability: NullableFlowState, format_: SymbolDisplayFormat) -> str: ...
    @overload
    def ToMinimalDisplayParts(self, semanticModel: SemanticModel, topLevelNullability: NullableFlowState, position: int, format_: SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    def ToMinimalDisplayString(self, semanticModel: SemanticModel, topLevelNullability: NullableFlowState, position: int, format_: SymbolDisplayFormat) -> str: ...
    @overload
    def WithNullableAnnotation(self, nullableAnnotation: NullableAnnotation) -> ITypeSymbol: ...

class LanguageNames(object):
    """    """
    @property
    def CSharp(self) -> str: ...
    @property
    def VisualBasic(self) -> str: ...
    @property
    def FSharp(self) -> str: ...

class MethodKind(enum.Enum):
    AnonymousFunction = 0
    LambdaMethod = 0
    Constructor = 1
    Conversion = 2
    DelegateInvoke = 3
    Destructor = 4
    EventAdd = 5
    EventRaise = 6
    EventRemove = 7
    ExplicitInterfaceImplementation = 8
    UserDefinedOperator = 9
    Ordinary = 10
    PropertyGet = 11
    PropertySet = 12
    ReducedExtension = 13
    StaticConstructor = 14
    SharedConstructor = 14
    BuiltinOperator = 15
    DeclareMethod = 16
    LocalFunction = 17
    FunctionPointerSignature = 18

class NamespaceKind(enum.Enum):
    Module = 1
    Assembly = 2
    Compilation = 3

class NullabilityInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: NullabilityInfo) -> bool: ...
    @property
    def Annotation(self) -> NullableAnnotation: ...
    @property
    def FlowState(self) -> NullableFlowState: ...
    @overload
    def GetHashCode() -> int: ...

class NullableAnnotation(enum.Enum):
    None_ = 0
    NotAnnotated = 1
    Annotated = 2

class NullableFlowState(enum.Enum):
    None_ = 0
    NotNull = 1
    MaybeNull = 2

class DllImportData(object):
    """    """
    @property
    def BestFitMapping(self) -> System.Nullable: ...
    @property
    def CallingConvention(self) -> InteropServices.CallingConvention: ...
    @property
    def CharacterSet(self) -> InteropServices.CharSet: ...
    @property
    def EntryPointName(self) -> str: ...
    @property
    def ExactSpelling(self) -> bool: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def SetLastError(self) -> bool: ...
    @property
    def ThrowOnUnmappableCharacter(self) -> System.Nullable: ...

class RefKind(enum.Enum):
    None_ = 0
    Ref = 1
    Out = 2
    In = 3
    RefReadOnly = 3

class ScopedKind(enum.Enum):
    None_ = 0
    ScopedRef = 1
    ScopedValue = 2

class SymbolEqualityComparer(object):
    """    """
    @property
    def Default(self) -> SymbolEqualityComparer: ...
    @property
    def IncludeNullability(self) -> SymbolEqualityComparer: ...
    @overload
    def Equals(self, x: ISymbol, y: ISymbol) -> bool: ...
    @overload
    def GetHashCode(self, obj: ISymbol) -> int: ...

class SymbolKind(enum.Enum):
    Alias = 0
    ArrayType = 1
    Assembly = 2
    DynamicType = 3
    ErrorType = 4
    Event = 5
    Field = 6
    Label = 7
    Local = 8
    Method = 9
    NetModule = 10
    NamedType = 11
    Namespace = 12
    Parameter = 13
    PointerType = 14
    Property = 15
    RangeVariable = 16
    TypeParameter = 17
    Preprocessing = 18
    Discard = 19
    FunctionPointerType = 20

class SymbolVisitor(object):
    """    """
    @overload
    def DefaultVisit(self, symbol: ISymbol) -> None: ...
    @overload
    def Visit(self, symbol: ISymbol) -> None: ...
    @overload
    def VisitAlias(self, symbol: IAliasSymbol) -> None: ...
    @overload
    def VisitArrayType(self, symbol: IArrayTypeSymbol) -> None: ...
    @overload
    def VisitAssembly(self, symbol: IAssemblySymbol) -> None: ...
    @overload
    def VisitDiscard(self, symbol: IDiscardSymbol) -> None: ...
    @overload
    def VisitDynamicType(self, symbol: IDynamicTypeSymbol) -> None: ...
    @overload
    def VisitEvent(self, symbol: IEventSymbol) -> None: ...
    @overload
    def VisitField(self, symbol: IFieldSymbol) -> None: ...
    @overload
    def VisitFunctionPointerType(self, symbol: IFunctionPointerTypeSymbol) -> None: ...
    @overload
    def VisitLabel(self, symbol: ILabelSymbol) -> None: ...
    @overload
    def VisitLocal(self, symbol: ILocalSymbol) -> None: ...
    @overload
    def VisitMethod(self, symbol: IMethodSymbol) -> None: ...
    @overload
    def VisitModule(self, symbol: IModuleSymbol) -> None: ...
    @overload
    def VisitNamedType(self, symbol: INamedTypeSymbol) -> None: ...
    @overload
    def VisitNamespace(self, symbol: INamespaceSymbol) -> None: ...
    @overload
    def VisitParameter(self, symbol: IParameterSymbol) -> None: ...
    @overload
    def VisitPointerType(self, symbol: IPointerTypeSymbol) -> None: ...
    @overload
    def VisitProperty(self, symbol: IPropertySymbol) -> None: ...
    @overload
    def VisitRangeVariable(self, symbol: IRangeVariableSymbol) -> None: ...
    @overload
    def VisitTypeParameter(self, symbol: ITypeParameterSymbol) -> None: ...

class SymbolVisitor(object):
    """    SymbolVisitor[TResult]
    """
    @overload
    def DefaultVisit(self, symbol: ISymbol) -> TResult: ...
    @overload
    def Visit(self, symbol: ISymbol) -> TResult: ...
    @overload
    def VisitAlias(self, symbol: IAliasSymbol) -> TResult: ...
    @overload
    def VisitArrayType(self, symbol: IArrayTypeSymbol) -> TResult: ...
    @overload
    def VisitAssembly(self, symbol: IAssemblySymbol) -> TResult: ...
    @overload
    def VisitDiscard(self, symbol: IDiscardSymbol) -> TResult: ...
    @overload
    def VisitDynamicType(self, symbol: IDynamicTypeSymbol) -> TResult: ...
    @overload
    def VisitEvent(self, symbol: IEventSymbol) -> TResult: ...
    @overload
    def VisitField(self, symbol: IFieldSymbol) -> TResult: ...
    @overload
    def VisitFunctionPointerType(self, symbol: IFunctionPointerTypeSymbol) -> TResult: ...
    @overload
    def VisitLabel(self, symbol: ILabelSymbol) -> TResult: ...
    @overload
    def VisitLocal(self, symbol: ILocalSymbol) -> TResult: ...
    @overload
    def VisitMethod(self, symbol: IMethodSymbol) -> TResult: ...
    @overload
    def VisitModule(self, symbol: IModuleSymbol) -> TResult: ...
    @overload
    def VisitNamedType(self, symbol: INamedTypeSymbol) -> TResult: ...
    @overload
    def VisitNamespace(self, symbol: INamespaceSymbol) -> TResult: ...
    @overload
    def VisitParameter(self, symbol: IParameterSymbol) -> TResult: ...
    @overload
    def VisitPointerType(self, symbol: IPointerTypeSymbol) -> TResult: ...
    @overload
    def VisitProperty(self, symbol: IPropertySymbol) -> TResult: ...
    @overload
    def VisitRangeVariable(self, symbol: IRangeVariableSymbol) -> TResult: ...
    @overload
    def VisitTypeParameter(self, symbol: ITypeParameterSymbol) -> TResult: ...

class SymbolVisitor(object):
    """    SymbolVisitor[TArgument, TResult]
    """
    @overload
    def DefaultVisit(self, symbol: ISymbol, argument: TArgument) -> TResult: ...
    @overload
    def Visit(self, symbol: ISymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitAlias(self, symbol: IAliasSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitArrayType(self, symbol: IArrayTypeSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitAssembly(self, symbol: IAssemblySymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitDiscard(self, symbol: IDiscardSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitDynamicType(self, symbol: IDynamicTypeSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitEvent(self, symbol: IEventSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitField(self, symbol: IFieldSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitFunctionPointerType(self, symbol: IFunctionPointerTypeSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitLabel(self, symbol: ILabelSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitLocal(self, symbol: ILocalSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitMethod(self, symbol: IMethodSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitModule(self, symbol: IModuleSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitNamedType(self, symbol: INamedTypeSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitNamespace(self, symbol: INamespaceSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitParameter(self, symbol: IParameterSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitPointerType(self, symbol: IPointerTypeSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitProperty(self, symbol: IPropertySymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitRangeVariable(self, symbol: IRangeVariableSymbol, argument: TArgument) -> TResult: ...
    @overload
    def VisitTypeParameter(self, symbol: ITypeParameterSymbol, argument: TArgument) -> TResult: ...

class TypedConstant(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TypedConstant) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Kind(self) -> TypedConstantKind: ...
    @property
    def Type(self) -> ITypeSymbol: ...
    @property
    def Value(self) -> object: ...
    @property
    def Values(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetHashCode() -> int: ...

class TypedConstantKind(enum.Enum):
    Error = 0
    Primitive = 1
    Enum = 2
    Type = 3
    Array = 4

class TypeKind(enum.Enum):
    Unknown = 0
    Array = 1
    Class = 2
    Delegate = 3
    Dynamic = 4
    Enum = 5
    Error = 6
    Interface = 7
    Module = 8
    Pointer = 9
    Struct = 10
    Structure = 10
    TypeParameter = 11
    Submission = 12
    FunctionPointer = 13

class TypeParameterKind(enum.Enum):
    Type = 0
    Method = 1
    Cref = 2

class VarianceKind(enum.Enum):
    None_ = 0
    Out = 1
    In = 2

class WellKnownMemberNames(object):
    """    """
    @property
    def EnumBackingFieldName(self) -> str: ...
    @property
    def InstanceConstructorName(self) -> str: ...
    @property
    def StaticConstructorName(self) -> str: ...
    @property
    def Indexer(self) -> str: ...
    @property
    def DestructorName(self) -> str: ...
    @property
    def DelegateInvokeName(self) -> str: ...
    @property
    def DelegateBeginInvokeName(self) -> str: ...
    @property
    def DelegateEndInvokeName(self) -> str: ...
    @property
    def EntryPointMethodName(self) -> str: ...
    @property
    def DefaultScriptClassName(self) -> str: ...
    @property
    def ObjectToString(self) -> str: ...
    @property
    def ObjectEquals(self) -> str: ...
    @property
    def ObjectGetHashCode(self) -> str: ...
    @property
    def ImplicitConversionName(self) -> str: ...
    @property
    def ExplicitConversionName(self) -> str: ...
    @property
    def CheckedExplicitConversionName(self) -> str: ...
    @property
    def AdditionOperatorName(self) -> str: ...
    @property
    def CheckedAdditionOperatorName(self) -> str: ...
    @property
    def BitwiseAndOperatorName(self) -> str: ...
    @property
    def BitwiseOrOperatorName(self) -> str: ...
    @property
    def DecrementOperatorName(self) -> str: ...
    @property
    def CheckedDecrementOperatorName(self) -> str: ...
    @property
    def DivisionOperatorName(self) -> str: ...
    @property
    def CheckedDivisionOperatorName(self) -> str: ...
    @property
    def EqualityOperatorName(self) -> str: ...
    @property
    def ExclusiveOrOperatorName(self) -> str: ...
    @property
    def FalseOperatorName(self) -> str: ...
    @property
    def GreaterThanOperatorName(self) -> str: ...
    @property
    def GreaterThanOrEqualOperatorName(self) -> str: ...
    @property
    def IncrementOperatorName(self) -> str: ...
    @property
    def CheckedIncrementOperatorName(self) -> str: ...
    @property
    def InequalityOperatorName(self) -> str: ...
    @property
    def LeftShiftOperatorName(self) -> str: ...
    @property
    def UnsignedLeftShiftOperatorName(self) -> str: ...
    @property
    def LessThanOperatorName(self) -> str: ...
    @property
    def LessThanOrEqualOperatorName(self) -> str: ...
    @property
    def LogicalNotOperatorName(self) -> str: ...
    @property
    def LogicalOrOperatorName(self) -> str: ...
    @property
    def LogicalAndOperatorName(self) -> str: ...
    @property
    def ModulusOperatorName(self) -> str: ...
    @property
    def MultiplyOperatorName(self) -> str: ...
    @property
    def CheckedMultiplyOperatorName(self) -> str: ...
    @property
    def OnesComplementOperatorName(self) -> str: ...
    @property
    def RightShiftOperatorName(self) -> str: ...
    @property
    def UnsignedRightShiftOperatorName(self) -> str: ...
    @property
    def SubtractionOperatorName(self) -> str: ...
    @property
    def CheckedSubtractionOperatorName(self) -> str: ...
    @property
    def TrueOperatorName(self) -> str: ...
    @property
    def UnaryNegationOperatorName(self) -> str: ...
    @property
    def CheckedUnaryNegationOperatorName(self) -> str: ...
    @property
    def UnaryPlusOperatorName(self) -> str: ...
    @property
    def ConcatenateOperatorName(self) -> str: ...
    @property
    def ExponentOperatorName(self) -> str: ...
    @property
    def IntegerDivisionOperatorName(self) -> str: ...
    @property
    def LikeOperatorName(self) -> str: ...
    @property
    def GetEnumeratorMethodName(self) -> str: ...
    @property
    def GetAsyncEnumeratorMethodName(self) -> str: ...
    @property
    def MoveNextAsyncMethodName(self) -> str: ...
    @property
    def DeconstructMethodName(self) -> str: ...
    @property
    def MoveNextMethodName(self) -> str: ...
    @property
    def CurrentPropertyName(self) -> str: ...
    @property
    def ValuePropertyName(self) -> str: ...
    @property
    def CollectionInitializerAddMethodName(self) -> str: ...
    @property
    def GetAwaiter(self) -> str: ...
    @property
    def IsCompleted(self) -> str: ...
    @property
    def GetResult(self) -> str: ...
    @property
    def OnCompleted(self) -> str: ...
    @property
    def DisposeMethodName(self) -> str: ...
    @property
    def DisposeAsyncMethodName(self) -> str: ...
    @property
    def CountPropertyName(self) -> str: ...
    @property
    def LengthPropertyName(self) -> str: ...
    @property
    def SliceMethodName(self) -> str: ...
    @property
    def PrintMembersMethodName(self) -> str: ...
    @property
    def TopLevelStatementsEntryPointMethodName(self) -> str: ...
    @property
    def TopLevelStatementsEntryPointTypeName(self) -> str: ...

class AnnotationExtensions(object):
    """    """
    @overload
    @staticmethod
    def WithAdditionalAnnotations(node: TNode, annotations: System.Array[SyntaxAnnotation]) -> TNode: ...
    @overload
    @staticmethod
    def WithAdditionalAnnotations(node: TNode, annotations: Generic.IEnumerable) -> TNode: ...
    @overload
    @staticmethod
    def WithoutAnnotations(node: TNode, annotations: System.Array[SyntaxAnnotation]) -> TNode: ...
    @overload
    @staticmethod
    def WithoutAnnotations(node: TNode, annotations: Generic.IEnumerable) -> TNode: ...
    @overload
    @staticmethod
    def WithoutAnnotations(node: TNode, annotationKind: str) -> TNode: ...

class ChildSyntaxList(System.ValueType):
    """    """
    @overload
    def Any() -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ChildSyntaxList) -> bool: ...
    @overload
    def First() -> SyntaxNodeOrToken: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SyntaxNodeOrToken: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Last() -> SyntaxNodeOrToken: ...
    @overload
    def Reverse() -> Reversed: ...

class ICompilationUnitSyntax:
    """    """
    @property
    def EndOfFileToken(self) -> SyntaxToken: ...

class ISkippedTokensTriviaSyntax:
    """    """
    @property
    def Tokens(self) -> SyntaxTokenList: ...

class IStructuredTriviaSyntax:
    """    """
    @property
    def ParentTrivia(self) -> SyntaxTrivia: ...

class LineMapping(System.ValueType):
    """    """
    def __init__(self, span: Text.LinePositionSpan, characterOffset: System.Nullable, mappedSpan: FileLinePositionSpan): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LineMapping) -> bool: ...
    @property
    def CharacterOffset(self) -> System.Nullable: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def MappedSpan(self) -> FileLinePositionSpan: ...
    @property
    def Span(self) -> Text.LinePositionSpan: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class LineVisibility(enum.Enum):
    BeforeFirstLineDirective = 0
    Hidden = 1
    Visible = 2

class SeparatedSyntaxList(System.ValueType):
    """    SeparatedSyntaxList[TNode]
    """
    @overload
    def Add(self, node: TNode) -> SeparatedSyntaxList: ...
    @overload
    def AddRange(self, nodes: Generic.IEnumerable) -> SeparatedSyntaxList: ...
    @overload
    def Any() -> bool: ...
    @overload
    def Contains(self, node: TNode) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SeparatedSyntaxList) -> bool: ...
    @overload
    def First() -> TNode: ...
    @overload
    def FirstOrDefault() -> TNode: ...
    @property
    def Count(self) -> int: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def Item(self) -> TNode: ...
    @property
    def SeparatorCount(self) -> int: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetSeparator(self, index: int) -> SyntaxToken: ...
    @overload
    def GetSeparators() -> Generic.IEnumerable: ...
    @overload
    def GetWithSeparators() -> SyntaxNodeOrTokenList: ...
    @overload
    def IndexOf(self, predicate: System.Func) -> int: ...
    @overload
    def IndexOf(self, node: TNode) -> int: ...
    @overload
    def Insert(self, index: int, node: TNode) -> SeparatedSyntaxList: ...
    @overload
    def InsertRange(self, index: int, nodes: Generic.IEnumerable) -> SeparatedSyntaxList: ...
    @overload
    def Last() -> TNode: ...
    @overload
    def LastIndexOf(self, node: TNode) -> int: ...
    @overload
    def LastIndexOf(self, predicate: System.Func) -> int: ...
    @overload
    def LastOrDefault() -> TNode: ...
    @overload
    def Remove(self, node: TNode) -> SeparatedSyntaxList: ...
    @overload
    def RemoveAt(self, index: int) -> SeparatedSyntaxList: ...
    @overload
    def Replace(self, nodeInList: TNode, newNode: TNode) -> SeparatedSyntaxList: ...
    @overload
    def ReplaceRange(self, nodeInList: TNode, newNodes: Generic.IEnumerable) -> SeparatedSyntaxList: ...
    @overload
    def ReplaceSeparator(self, separatorToken: SyntaxToken, newSeparator: SyntaxToken) -> SeparatedSyntaxList: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...

class SyntaxAnnotation(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, kind: str): ...
    @overload
    def __init__(self, kind: str, data: str): ...
    @overload
    def Equals(self, other: SyntaxAnnotation) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> str: ...
    @property
    def ElasticAnnotation(self) -> SyntaxAnnotation: ...
    @property
    def Kind(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class SyntaxList(System.ValueType):
    """    SyntaxList[TNode]
    """
    @overload
    def __init__(self, node: TNode): ...
    @overload
    def __init__(self, nodes: Generic.IEnumerable): ...
    @overload
    def Add(self, node: TNode) -> SyntaxList: ...
    @overload
    def AddRange(self, nodes: Generic.IEnumerable) -> SyntaxList: ...
    @overload
    def Any() -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SyntaxList) -> bool: ...
    @overload
    def First() -> TNode: ...
    @overload
    def FirstOrDefault() -> TNode: ...
    @property
    def Count(self) -> int: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def Item(self) -> TNode: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, predicate: System.Func) -> int: ...
    @overload
    def IndexOf(self, node: TNode) -> int: ...
    @overload
    def Insert(self, index: int, node: TNode) -> SyntaxList: ...
    @overload
    def InsertRange(self, index: int, nodes: Generic.IEnumerable) -> SyntaxList: ...
    @overload
    def Last() -> TNode: ...
    @overload
    def LastIndexOf(self, predicate: System.Func) -> int: ...
    @overload
    def LastIndexOf(self, node: TNode) -> int: ...
    @overload
    def LastOrDefault() -> TNode: ...
    @overload
    def Remove(self, node: TNode) -> SyntaxList: ...
    @overload
    def RemoveAt(self, index: int) -> SyntaxList: ...
    @overload
    def Replace(self, nodeInList: TNode, newNode: TNode) -> SyntaxList: ...
    @overload
    def ReplaceRange(self, nodeInList: TNode, newNodes: Generic.IEnumerable) -> SyntaxList: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...

class SyntaxNode(object):
    """    """
    @overload
    def Ancestors(self, ascendOutOfTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def AncestorsAndSelf(self, ascendOutOfTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def ChildNodes() -> Generic.IEnumerable: ...
    @overload
    def ChildNodesAndTokens() -> ChildSyntaxList: ...
    @overload
    def ChildThatContainsPosition(self, position: int) -> SyntaxNodeOrToken: ...
    @overload
    def ChildTokens() -> Generic.IEnumerable: ...
    @overload
    def Contains(self, node: SyntaxNode) -> bool: ...
    @overload
    def ContainsDirective(self, rawKind: int) -> bool: ...
    @overload
    def CopyAnnotationsTo(self, node: T) -> T: ...
    @overload
    def DescendantNodes(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodes(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndSelf(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndSelf(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndTokens(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndTokens(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndTokensAndSelf(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantNodesAndTokensAndSelf(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantTokens(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantTokens(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantTrivia(self, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def DescendantTrivia(self, span: Text.TextSpan, descendIntoChildren: System.Func, descendIntoTrivia: bool) -> Generic.IEnumerable: ...
    @overload
    def FindNode(self, span: Text.TextSpan, findInsideTrivia: bool, getInnermostNodeForTie: bool) -> SyntaxNode: ...
    @overload
    def FindToken(self, position: int, findInsideTrivia: bool) -> SyntaxToken: ...
    @overload
    def FindTrivia(self, position: int, findInsideTrivia: bool) -> SyntaxTrivia: ...
    @overload
    def FindTrivia(self, position: int, stepInto: System.Func) -> SyntaxTrivia: ...
    @overload
    def FirstAncestorOrSelf(self, predicate: System.Func, ascendOutOfTrivia: bool) -> TNode: ...
    @overload
    def FirstAncestorOrSelf(self, predicate: System.Func, argument: TArg, ascendOutOfTrivia: bool) -> TNode: ...
    @property
    def ContainsAnnotations(self) -> bool: ...
    @property
    def ContainsDiagnostics(self) -> bool: ...
    @property
    def ContainsDirectives(self) -> bool: ...
    @property
    def ContainsSkippedText(self) -> bool: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def HasLeadingTrivia(self) -> bool: ...
    @property
    def HasStructuredTrivia(self) -> bool: ...
    @property
    def HasTrailingTrivia(self) -> bool: ...
    @property
    def IsMissing(self) -> bool: ...
    @property
    def IsStructuredTrivia(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def Parent(self) -> SyntaxNode: ...
    @property
    def ParentTrivia(self) -> SyntaxTrivia: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @property
    def SpanStart(self) -> int: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @overload
    def GetAnnotatedNodes(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedNodes(self, syntaxAnnotation: SyntaxAnnotation) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedNodesAndTokens(self, annotation: SyntaxAnnotation) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedNodesAndTokens(self, annotationKinds: System.System.Array[str]) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedNodesAndTokens(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedTokens(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedTokens(self, syntaxAnnotation: SyntaxAnnotation) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedTrivia(self, annotation: SyntaxAnnotation) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedTrivia(self, annotationKinds: System.System.Array[str]) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotatedTrivia(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKinds: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    def GetFirstToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> SyntaxToken: ...
    @overload
    def GetLastToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> SyntaxToken: ...
    @overload
    def GetLeadingTrivia() -> SyntaxTriviaList: ...
    @overload
    def GetLocation() -> Location: ...
    @overload
    def GetReference() -> SyntaxReference: ...
    @overload
    def GetText(self, encoding: Text.Encoding, checksumAlgorithm: Text.SourceHashAlgorithm) -> Text.SourceText: ...
    @overload
    def GetTrailingTrivia() -> SyntaxTriviaList: ...
    @overload
    def HasAnnotation(self, annotation: SyntaxAnnotation) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKinds: Generic.IEnumerable) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKind: str) -> bool: ...
    @overload
    def IsEquivalentTo(self, other: SyntaxNode) -> bool: ...
    @overload
    def IsEquivalentTo(self, node: SyntaxNode, topLevel: bool) -> bool: ...
    @overload
    def IsIncrementallyIdenticalTo(self, other: SyntaxNode) -> bool: ...
    @overload
    def IsPartOfStructuredTrivia() -> bool: ...
    @overload
    def SerializeTo(self, stream: IO.Stream, cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteTo(self, writer: IO.TextWriter) -> None: ...

class SyntaxNodeExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetCurrentNode(root: SyntaxNode, node: TNode) -> TNode: ...
    @overload
    @staticmethod
    def GetCurrentNodes(root: SyntaxNode, nodes: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCurrentNodes(root: SyntaxNode, node: TNode) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def InsertNodesAfter(root: TRoot, nodeInList: SyntaxNode, newNodes: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def InsertNodesBefore(root: TRoot, nodeInList: SyntaxNode, newNodes: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def InsertTokensAfter(root: TRoot, tokenInList: SyntaxToken, newTokens: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def InsertTokensBefore(root: TRoot, tokenInList: SyntaxToken, newTokens: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def InsertTriviaAfter(root: TRoot, trivia: SyntaxTrivia, newTrivia: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def InsertTriviaBefore(root: TRoot, trivia: SyntaxTrivia, newTrivia: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(node: TNode, indentation: str, elasticTrivia: bool) -> TNode: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(node: TNode, indentation: str, eol: str, elasticTrivia: bool) -> TNode: ...
    @overload
    @staticmethod
    def RemoveNode(root: TRoot, node: SyntaxNode, options: SyntaxRemoveOptions) -> TRoot: ...
    @overload
    @staticmethod
    def RemoveNodes(root: TRoot, nodes: Generic.IEnumerable, options: SyntaxRemoveOptions) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceNode(root: TRoot, oldNode: SyntaxNode, newNode: SyntaxNode) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceNode(root: TRoot, oldNode: SyntaxNode, newNodes: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceNodes(root: TRoot, nodes: Generic.IEnumerable, computeReplacementNode: System.Func) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceSyntax(root: TRoot, nodes: Generic.IEnumerable, computeReplacementNode: System.Func, tokens: Generic.IEnumerable, computeReplacementToken: System.Func, trivia: Generic.IEnumerable, computeReplacementTrivia: System.Func) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceToken(root: TRoot, tokenInList: SyntaxToken, newTokens: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceToken(root: TRoot, oldToken: SyntaxToken, newToken: SyntaxToken) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceTokens(root: TRoot, tokens: Generic.IEnumerable, computeReplacementToken: System.Func) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceTrivia(root: TRoot, trivia: Generic.IEnumerable, computeReplacementTrivia: System.Func) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceTrivia(root: TRoot, oldTrivia: SyntaxTrivia, newTrivia: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def ReplaceTrivia(root: TRoot, trivia: SyntaxTrivia, newTrivia: SyntaxTrivia) -> TRoot: ...
    @overload
    @staticmethod
    def TrackNodes(root: TRoot, nodes: Generic.IEnumerable) -> TRoot: ...
    @overload
    @staticmethod
    def TrackNodes(root: TRoot, nodes: System.Array[SyntaxNode]) -> TRoot: ...
    @overload
    @staticmethod
    def WithLeadingTrivia(node: TSyntax, trivia: Generic.IEnumerable) -> TSyntax: ...
    @overload
    @staticmethod
    def WithLeadingTrivia(node: TSyntax, trivia: SyntaxTriviaList) -> TSyntax: ...
    @overload
    @staticmethod
    def WithLeadingTrivia(node: TSyntax, trivia: System.Array[SyntaxTrivia]) -> TSyntax: ...
    @overload
    @staticmethod
    def WithoutLeadingTrivia(node: TSyntax) -> TSyntax: ...
    @overload
    @staticmethod
    def WithoutTrailingTrivia(node: TSyntax) -> TSyntax: ...
    @overload
    @staticmethod
    def WithoutTrivia(token: SyntaxToken) -> SyntaxToken: ...
    @overload
    @staticmethod
    def WithoutTrivia(syntax: TSyntax) -> TSyntax: ...
    @overload
    @staticmethod
    def WithTrailingTrivia(node: TSyntax, trivia: SyntaxTriviaList) -> TSyntax: ...
    @overload
    @staticmethod
    def WithTrailingTrivia(node: TSyntax, trivia: Generic.IEnumerable) -> TSyntax: ...
    @overload
    @staticmethod
    def WithTrailingTrivia(node: TSyntax, trivia: System.Array[SyntaxTrivia]) -> TSyntax: ...
    @overload
    @staticmethod
    def WithTriviaFrom(syntax: TSyntax, node: SyntaxNode) -> TSyntax: ...

class SyntaxNodeOrToken(System.ValueType):
    """    """
    @overload
    def AsNode() -> SyntaxNode: ...
    @overload
    def AsToken() -> SyntaxToken: ...
    @overload
    def ChildNodesAndTokens() -> ChildSyntaxList: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SyntaxNodeOrToken) -> bool: ...
    @property
    def ContainsAnnotations(self) -> bool: ...
    @property
    def ContainsDiagnostics(self) -> bool: ...
    @property
    def ContainsDirectives(self) -> bool: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def HasLeadingTrivia(self) -> bool: ...
    @property
    def HasTrailingTrivia(self) -> bool: ...
    @property
    def IsMissing(self) -> bool: ...
    @property
    def IsNode(self) -> bool: ...
    @property
    def IsToken(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def Parent(self) -> SyntaxNode: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @property
    def SpanStart(self) -> int: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @overload
    def GetAnnotations(self, annotationKinds: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetFirstChildIndexSpanningPosition(node: SyntaxNode, position: int) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLeadingTrivia() -> SyntaxTriviaList: ...
    @overload
    def GetLocation() -> Location: ...
    @overload
    def GetNextSibling() -> SyntaxNodeOrToken: ...
    @overload
    def GetPreviousSibling() -> SyntaxNodeOrToken: ...
    @overload
    def GetTrailingTrivia() -> SyntaxTriviaList: ...
    @overload
    def HasAnnotation(self, annotation: SyntaxAnnotation) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKinds: Generic.IEnumerable) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKind: str) -> bool: ...
    @overload
    def IsEquivalentTo(self, other: SyntaxNodeOrToken) -> bool: ...
    @overload
    def IsIncrementallyIdenticalTo(self, other: SyntaxNodeOrToken) -> bool: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxNodeOrToken: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxNodeOrToken: ...
    @overload
    def WithLeadingTrivia(self, trivia: System.Array[SyntaxTrivia]) -> SyntaxNodeOrToken: ...
    @overload
    def WithLeadingTrivia(self, trivia: Generic.IEnumerable) -> SyntaxNodeOrToken: ...
    @overload
    def WithoutAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxNodeOrToken: ...
    @overload
    def WithoutAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxNodeOrToken: ...
    @overload
    def WithoutAnnotations(self, annotationKind: str) -> SyntaxNodeOrToken: ...
    @overload
    def WithTrailingTrivia(self, trivia: System.Array[SyntaxTrivia]) -> SyntaxNodeOrToken: ...
    @overload
    def WithTrailingTrivia(self, trivia: Generic.IEnumerable) -> SyntaxNodeOrToken: ...
    @overload
    def WriteTo(self, writer: IO.TextWriter) -> None: ...

class SyntaxNodeOrTokenList(System.ValueType):
    """    """
    @overload
    def __init__(self, nodesAndTokens: Generic.IEnumerable): ...
    @overload
    def __init__(self, nodesAndTokens: System.Array[SyntaxNodeOrToken]): ...
    @overload
    def Add(self, nodeOrToken: SyntaxNodeOrToken) -> SyntaxNodeOrTokenList: ...
    @overload
    def AddRange(self, nodesOrTokens: Generic.IEnumerable) -> SyntaxNodeOrTokenList: ...
    @overload
    def Any() -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SyntaxNodeOrTokenList) -> bool: ...
    @overload
    def First() -> SyntaxNodeOrToken: ...
    @overload
    def FirstOrDefault() -> SyntaxNodeOrToken: ...
    @property
    def Count(self) -> int: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def Item(self) -> SyntaxNodeOrToken: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, nodeOrToken: SyntaxNodeOrToken) -> int: ...
    @overload
    def Insert(self, index: int, nodeOrToken: SyntaxNodeOrToken) -> SyntaxNodeOrTokenList: ...
    @overload
    def InsertRange(self, index: int, nodesAndTokens: Generic.IEnumerable) -> SyntaxNodeOrTokenList: ...
    @overload
    def Last() -> SyntaxNodeOrToken: ...
    @overload
    def LastOrDefault() -> SyntaxNodeOrToken: ...
    @overload
    def Remove(self, nodeOrTokenInList: SyntaxNodeOrToken) -> SyntaxNodeOrTokenList: ...
    @overload
    def RemoveAt(self, index: int) -> SyntaxNodeOrTokenList: ...
    @overload
    def Replace(self, nodeOrTokenInList: SyntaxNodeOrToken, newNodeOrToken: SyntaxNodeOrToken) -> SyntaxNodeOrTokenList: ...
    @overload
    def ReplaceRange(self, nodeOrTokenInList: SyntaxNodeOrToken, newNodesAndTokens: Generic.IEnumerable) -> SyntaxNodeOrTokenList: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...

class SyntaxReference(object):
    """    """
    @property
    def Span(self) -> Text.TextSpan: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @overload
    def GetSyntax(self, cancellationToken: Threading.CancellationToken) -> SyntaxNode: ...
    @overload
    def GetSyntaxAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class SyntaxRemoveOptions(enum.Enum):
    KeepNoTrivia = 0
    KeepLeadingTrivia = 1
    KeepTrailingTrivia = 2
    KeepExteriorTrivia = 3
    KeepUnbalancedDirectives = 4
    KeepDirectives = 8
    KeepEndOfLine = 16
    AddElasticMarker = 32

class SyntaxToken(System.ValueType):
    """    """
    @overload
    def CopyAnnotationsTo(self, token: SyntaxToken) -> SyntaxToken: ...
    @overload
    def Equals(self, other: SyntaxToken) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ContainsAnnotations(self) -> bool: ...
    @property
    def ContainsDiagnostics(self) -> bool: ...
    @property
    def ContainsDirectives(self) -> bool: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def HasLeadingTrivia(self) -> bool: ...
    @property
    def HasStructuredTrivia(self) -> bool: ...
    @property
    def HasTrailingTrivia(self) -> bool: ...
    @property
    def IsMissing(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def LeadingTrivia(self) -> SyntaxTriviaList: ...
    @property
    def Parent(self) -> SyntaxNode: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @property
    def SpanStart(self) -> int: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @property
    def Text(self) -> str: ...
    @property
    def TrailingTrivia(self) -> SyntaxTriviaList: ...
    @property
    def Value(self) -> object: ...
    @property
    def ValueText(self) -> str: ...
    @overload
    def GetAllTrivia() -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKinds: System.System.Array[str]) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKinds: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLocation() -> Location: ...
    @overload
    def GetNextToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> SyntaxToken: ...
    @overload
    def GetPreviousToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> SyntaxToken: ...
    @overload
    def HasAnnotation(self, annotation: SyntaxAnnotation) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKind: str) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKinds: System.System.Array[str]) -> bool: ...
    @overload
    def IsEquivalentTo(self, token: SyntaxToken) -> bool: ...
    @overload
    def IsIncrementallyIdenticalTo(self, token: SyntaxToken) -> bool: ...
    @overload
    def IsPartOfStructuredTrivia() -> bool: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxToken: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxToken: ...
    @overload
    def WithLeadingTrivia(self, trivia: Generic.IEnumerable) -> SyntaxToken: ...
    @overload
    def WithLeadingTrivia(self, trivia: System.Array[SyntaxTrivia]) -> SyntaxToken: ...
    @overload
    def WithLeadingTrivia(self, trivia: SyntaxTriviaList) -> SyntaxToken: ...
    @overload
    def WithoutAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxToken: ...
    @overload
    def WithoutAnnotations(self, annotationKind: str) -> SyntaxToken: ...
    @overload
    def WithoutAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxToken: ...
    @overload
    def WithTrailingTrivia(self, trivia: Generic.IEnumerable) -> SyntaxToken: ...
    @overload
    def WithTrailingTrivia(self, trivia: System.Array[SyntaxTrivia]) -> SyntaxToken: ...
    @overload
    def WithTrailingTrivia(self, trivia: SyntaxTriviaList) -> SyntaxToken: ...
    @overload
    def WithTriviaFrom(self, token: SyntaxToken) -> SyntaxToken: ...
    @overload
    def WriteTo(self, writer: IO.TextWriter) -> None: ...

class SyntaxTokenList(System.ValueType):
    """    """
    @overload
    def __init__(self, token: SyntaxToken): ...
    @overload
    def __init__(self, tokens: System.Array[SyntaxToken]): ...
    @overload
    def __init__(self, tokens: Generic.IEnumerable): ...
    @overload
    def Add(self, token: SyntaxToken) -> SyntaxTokenList: ...
    @overload
    def AddRange(self, tokens: Generic.IEnumerable) -> SyntaxTokenList: ...
    @overload
    def Any() -> bool: ...
    @overload
    @staticmethod
    def Create(token: SyntaxToken) -> SyntaxTokenList: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SyntaxTokenList) -> bool: ...
    @overload
    def First() -> SyntaxToken: ...
    @property
    def Count(self) -> int: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def Item(self) -> SyntaxToken: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, tokenInList: SyntaxToken) -> int: ...
    @overload
    def Insert(self, index: int, token: SyntaxToken) -> SyntaxTokenList: ...
    @overload
    def InsertRange(self, index: int, tokens: Generic.IEnumerable) -> SyntaxTokenList: ...
    @overload
    def Last() -> SyntaxToken: ...
    @overload
    def Remove(self, tokenInList: SyntaxToken) -> SyntaxTokenList: ...
    @overload
    def RemoveAt(self, index: int) -> SyntaxTokenList: ...
    @overload
    def Replace(self, tokenInList: SyntaxToken, newToken: SyntaxToken) -> SyntaxTokenList: ...
    @overload
    def ReplaceRange(self, tokenInList: SyntaxToken, newTokens: Generic.IEnumerable) -> SyntaxTokenList: ...
    @overload
    def Reverse() -> Reversed: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...

class SyntaxTree(object):
    """    """
    @property
    def DiagnosticOptions(self) -> Immutable.ImmutableDictionary: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def HasCompilationUnitRoot(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Options(self) -> ParseOptions: ...
    @overload
    def GetChangedSpans(self, syntaxTree: SyntaxTree) -> Generic.IList: ...
    @overload
    def GetChanges(self, oldTree: SyntaxTree) -> Generic.IList: ...
    @overload
    def GetDiagnostics(self, trivia: SyntaxTrivia) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, token: SyntaxToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, node: SyntaxNode) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, nodeOrToken: SyntaxNodeOrToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineMappings(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> FileLinePositionSpan: ...
    @overload
    def GetLineVisibility(self, position: int, cancellationToken: Threading.CancellationToken) -> LineVisibility: ...
    @overload
    def GetLocation(self, span: Text.TextSpan) -> Location: ...
    @overload
    def GetMappedLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> FileLinePositionSpan: ...
    @overload
    def GetReference(self, node: SyntaxNode) -> SyntaxReference: ...
    @overload
    def GetRoot(self, cancellationToken: Threading.CancellationToken) -> SyntaxNode: ...
    @overload
    def GetRootAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetText(self, cancellationToken: Threading.CancellationToken) -> Text.SourceText: ...
    @overload
    def GetTextAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def HasHiddenRegions() -> bool: ...
    @overload
    def IsEquivalentTo(self, tree: SyntaxTree, topLevel: bool) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryGetRoot() -> (bool, SyntaxNode): ...
    @overload
    def TryGetText() -> (bool, Text.SourceText): ...
    @overload
    def WithChangedText(self, newText: Text.SourceText) -> SyntaxTree: ...
    @overload
    def WithFilePath(self, path: str) -> SyntaxTree: ...
    @overload
    def WithRootAndOptions(self, root: SyntaxNode, options: ParseOptions) -> SyntaxTree: ...

class SyntaxTrivia(System.ValueType):
    """    """
    @overload
    def CopyAnnotationsTo(self, trivia: SyntaxTrivia) -> SyntaxTrivia: ...
    @overload
    def Equals(self, other: SyntaxTrivia) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ContainsDiagnostics(self) -> bool: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def HasStructure(self) -> bool: ...
    @property
    def IsDirective(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @property
    def SpanStart(self) -> int: ...
    @property
    def SyntaxTree(self) -> SyntaxTree: ...
    @property
    def Token(self) -> SyntaxToken: ...
    @overload
    def GetAnnotations(self, annotationKind: str) -> Generic.IEnumerable: ...
    @overload
    def GetAnnotations(self, annotationKinds: System.System.Array[str]) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLocation() -> Location: ...
    @overload
    def GetStructure() -> SyntaxNode: ...
    @overload
    def HasAnnotation(self, annotation: SyntaxAnnotation) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKinds: System.System.Array[str]) -> bool: ...
    @overload
    def HasAnnotations(self, annotationKind: str) -> bool: ...
    @overload
    def IsEquivalentTo(self, trivia: SyntaxTrivia) -> bool: ...
    @overload
    def IsPartOfStructuredTrivia() -> bool: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxTrivia: ...
    @overload
    def WithAdditionalAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxTrivia: ...
    @overload
    def WithoutAnnotations(self, annotations: System.Array[SyntaxAnnotation]) -> SyntaxTrivia: ...
    @overload
    def WithoutAnnotations(self, annotations: Generic.IEnumerable) -> SyntaxTrivia: ...
    @overload
    def WithoutAnnotations(self, annotationKind: str) -> SyntaxTrivia: ...
    @overload
    def WriteTo(self, writer: IO.TextWriter) -> None: ...

class SyntaxTriviaList(System.ValueType):
    """    """
    @overload
    def __init__(self, trivia: SyntaxTrivia): ...
    @overload
    def __init__(self, trivias: System.Array[SyntaxTrivia]): ...
    @overload
    def __init__(self, trivias: Generic.IEnumerable): ...
    @overload
    def Add(self, trivia: SyntaxTrivia) -> SyntaxTriviaList: ...
    @overload
    def AddRange(self, trivia: Generic.IEnumerable) -> SyntaxTriviaList: ...
    @overload
    def Any() -> bool: ...
    @overload
    @staticmethod
    def Create(trivia: SyntaxTrivia) -> SyntaxTriviaList: ...
    @overload
    def ElementAt(self, index: int) -> SyntaxTrivia: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SyntaxTriviaList) -> bool: ...
    @overload
    def First() -> SyntaxTrivia: ...
    @property
    def Count(self) -> int: ...
    @property
    def Empty(self) -> SyntaxTriviaList: ...
    @property
    def FullSpan(self) -> Text.TextSpan: ...
    @property
    def Item(self) -> SyntaxTrivia: ...
    @property
    def Span(self) -> Text.TextSpan: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, triviaInList: SyntaxTrivia) -> int: ...
    @overload
    def Insert(self, index: int, trivia: SyntaxTrivia) -> SyntaxTriviaList: ...
    @overload
    def InsertRange(self, index: int, trivia: Generic.IEnumerable) -> SyntaxTriviaList: ...
    @overload
    def Last() -> SyntaxTrivia: ...
    @overload
    def Remove(self, triviaInList: SyntaxTrivia) -> SyntaxTriviaList: ...
    @overload
    def RemoveAt(self, index: int) -> SyntaxTriviaList: ...
    @overload
    def Replace(self, triviaInList: SyntaxTrivia, newTrivia: SyntaxTrivia) -> SyntaxTriviaList: ...
    @overload
    def ReplaceRange(self, triviaInList: SyntaxTrivia, newTrivia: Generic.IEnumerable) -> SyntaxTriviaList: ...
    @overload
    def Reverse() -> Reversed: ...
    @overload
    def ToFullString() -> str: ...
    @overload
    def ToString() -> str: ...

class SyntaxWalker(object):
    """    """
    @overload
    def Visit(self, node: SyntaxNode) -> None: ...

class SyntaxWalkerDepth(enum.Enum):
    Node = 0
    Token = 1
    Trivia = 2
    StructuredTrivia = 3

class XmlFileResolver(XmlReferenceResolver):
    """    """
    def __init__(self, baseDirectory: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BaseDirectory(self) -> str: ...
    @property
    def Default(self) -> XmlFileResolver: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def OpenRead(self, resolvedPath: str) -> IO.Stream: ...
    @overload
    def ResolveReference(self, path: str, baseFilePath: str) -> str: ...

class ComparisonResult(enum.Enum):
    NotEquivalent = 0
    Equivalent = 1
    EquivalentIgnoringVersion = 2

class OperationList(System.ValueType):
    """    """
    @overload
    def Any() -> bool: ...
    @overload
    def First() -> IOperation: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Last() -> IOperation: ...
    @overload
    def Reverse() -> Reversed: ...
    @overload
    def ToImmutableArray() -> Immutable.ImmutableArray: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> SyntaxNodeOrToken: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Reversed(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Reversed) -> bool: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...

class Enumerator(System.ValueType):
    """    Enumerator[TNode]
    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Current(self) -> TNode: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[TNode]
    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Current(self) -> TNode: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Enumerator(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Current(self) -> SyntaxNodeOrToken: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveNext() -> bool: ...

class Enumerator(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Current(self) -> SyntaxToken: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveNext() -> bool: ...

class Reversed(System.ValueType):
    """    """
    def __init__(self, list_: SyntaxTokenList): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Reversed) -> bool: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> SyntaxTrivia: ...
    @overload
    def MoveNext() -> bool: ...

class Reversed(System.ValueType):
    """    """
    def __init__(self, list_: SyntaxTriviaList): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Reversed) -> bool: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> IOperation: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Reversed(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def ToImmutableArray() -> Immutable.ImmutableArray: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> SyntaxNodeOrToken: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Enumerator(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Current(self) -> SyntaxToken: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveNext() -> bool: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> SyntaxTrivia: ...
    @overload
    def MoveNext() -> bool: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> IOperation: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

# endregion

# region: Microsoft.CodeAnalysis.VisualBasic, Version=4.6.0.0

class VisualBasicExtensions(object):
    """    """
    @overload
    @staticmethod
    def Any(list_: SeparatedSyntaxList, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxTokenList, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxTriviaList, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxList, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def ContainsDirective(node: SyntaxNode, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IndexOf(list_: SeparatedSyntaxList, kind: VisualBasic.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxTriviaList, kind: VisualBasic.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxTokenList, kind: VisualBasic.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxList, kind: VisualBasic.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IsKind(nodeOrToken: SyntaxNodeOrToken, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(node: SyntaxNode, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(token: SyntaxToken, kind: VisualBasic.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(trivia: SyntaxTrivia, kind: VisualBasic.SyntaxKind) -> bool: ...

# endregion

# region: Microsoft.CodeAnalysis.CSharp, Version=4.6.0.0

class CSharpExtensions(object):
    """    """
    @overload
    @staticmethod
    def Any(list_: SeparatedSyntaxList, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxTokenList, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxTriviaList, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def Any(list_: SyntaxList, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def ContainsDirective(node: SyntaxNode, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IndexOf(list_: SeparatedSyntaxList, kind: CSharp.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxTriviaList, kind: CSharp.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxTokenList, kind: CSharp.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: SyntaxList, kind: CSharp.SyntaxKind) -> int: ...
    @overload
    @staticmethod
    def IsKind(nodeOrToken: SyntaxNodeOrToken, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(node: SyntaxNode, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(trivia: SyntaxTrivia, kind: CSharp.SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKind(token: SyntaxToken, kind: CSharp.SyntaxKind) -> bool: ...

# endregion
