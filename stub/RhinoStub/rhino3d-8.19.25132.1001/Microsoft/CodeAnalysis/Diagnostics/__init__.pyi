"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Telemetry", "AnalysisResult", "AnalyzerConfigOptions", "AnalyzerConfigOptionsProvider", "AnalyzerFileReference", "AnalyzerImageReference", "AnalyzerLoadFailureEventArgs", "AnalyzerOptions", "AnalyzerReference", "CompilationWithAnalyzers", "CompilationWithAnalyzersOptions", "AnalysisContext", "GeneratedCodeAnalysisFlags", "CompilationStartAnalysisContext", "CompilationAnalysisContext", "SemanticModelAnalysisContext", "SymbolAnalysisContext", "SymbolStartAnalysisContext", "CodeBlockStartAnalysisContext", "CodeBlockAnalysisContext", "OperationBlockStartAnalysisContext", "OperationBlockAnalysisContext", "SyntaxTreeAnalysisContext", "AdditionalFileAnalysisContext", "SyntaxNodeAnalysisContext", "OperationAnalysisContext", "SuppressionAnalysisContext", "DiagnosticAnalyzer", "DiagnosticAnalyzerAttribute", "DiagnosticAnalyzerExtensions", "DiagnosticSuppressor", "SourceTextValueProvider", "Suppression", "SyntaxTreeValueProvider", "UnresolvedAnalyzerReference", "SuppressionInfo", "FailureErrorCode"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import FlowAnalysis
from Microsoft.CodeAnalysis import Text
from System import Reflection
from System import Threading
from System.Collections import Generic
from System.Collections import Immutable
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis, Version=4.6.0.0

class AnalysisResult(object):
    """    """
    @property
    def AdditionalFileDiagnostics(self) -> Immutable.ImmutableDictionary: ...
    @property
    def Analyzers(self) -> Immutable.ImmutableArray: ...
    @property
    def AnalyzerTelemetryInfo(self) -> Immutable.ImmutableDictionary: ...
    @property
    def CompilationDiagnostics(self) -> Immutable.ImmutableDictionary: ...
    @property
    def SemanticDiagnostics(self) -> Immutable.ImmutableDictionary: ...
    @property
    def SyntaxDiagnostics(self) -> Immutable.ImmutableDictionary: ...
    @overload
    def GetAllDiagnostics() -> Immutable.ImmutableArray: ...
    @overload
    def GetAllDiagnostics(self, analyzer: DiagnosticAnalyzer) -> Immutable.ImmutableArray: ...

class AnalyzerConfigOptions(object):
    """    """
    @property
    def KeyComparer(self) -> System.StringComparer: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @overload
    def TryGetValue(self, key: str) -> (bool, str): ...

class AnalyzerConfigOptionsProvider(object):
    """    """
    @property
    def GlobalOptions(self) -> AnalyzerConfigOptions: ...
    @overload
    def GetOptions(self, tree: CodeAnalysis.SyntaxTree) -> AnalyzerConfigOptions: ...
    @overload
    def GetOptions(self, textFile: CodeAnalysis.AdditionalText) -> AnalyzerConfigOptions: ...

class AnalyzerFileReference(AnalyzerReference):
    """    """
    def __init__(self, fullPath: str, assemblyLoader: CodeAnalysis.IAnalyzerAssemblyLoader): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AnalyzerFileReference) -> bool: ...
    @overload
    def Equals(self, other: AnalyzerReference) -> bool: ...
    @property
    def AssemblyLoader(self) -> CodeAnalysis.IAnalyzerAssemblyLoader: ...
    @property
    def Display(self) -> str: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Id(self) -> object: ...
    @overload
    def GetAnalyzers(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetAnalyzersForAllLanguages() -> Immutable.ImmutableArray: ...
    @overload
    def GetAssembly() -> Reflection.Assembly: ...
    @overload
    def GetGenerators(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetGeneratorsForAllLanguages() -> Immutable.ImmutableArray: ...
    @overload
    def GetHashCode() -> int: ...
    @property
    def AnalyzerLoadFailed(self): ...

class AnalyzerImageReference(AnalyzerReference):
    """    """
    def __init__(self, analyzers: Immutable.ImmutableArray, fullPath: str, display: str): ...
    @property
    def Display(self) -> str: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Id(self) -> object: ...
    @overload
    def GetAnalyzers(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetAnalyzersForAllLanguages() -> Immutable.ImmutableArray: ...

class AnalyzerLoadFailureEventArgs(System.EventArgs):
    """    """
    def __init__(self, errorCode: FailureErrorCode, message: str, exceptionOpt: System.Exception, typeNameOpt: str): ...
    @property
    def ErrorCode(self) -> FailureErrorCode: ...
    @property
    def Exception(self) -> System.Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def ReferencedCompilerVersion(self) -> System.Version: ...
    @property
    def TypeName(self) -> str: ...

class AnalyzerOptions(object):
    """    """
    @overload
    def __init__(self, additionalFiles: Immutable.ImmutableArray): ...
    @overload
    def __init__(self, additionalFiles: Immutable.ImmutableArray, optionsProvider: AnalyzerConfigOptionsProvider): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AdditionalFiles(self) -> Immutable.ImmutableArray: ...
    @property
    def AnalyzerConfigOptionsProvider(self) -> AnalyzerConfigOptionsProvider: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithAdditionalFiles(self, additionalFiles: Immutable.ImmutableArray) -> AnalyzerOptions: ...

class AnalyzerReference(object):
    """    """
    @property
    def Display(self) -> str: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Id(self) -> object: ...
    @overload
    def GetAnalyzers(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetAnalyzersForAllLanguages() -> Immutable.ImmutableArray: ...
    @overload
    def GetGenerators(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetGeneratorsForAllLanguages() -> Immutable.ImmutableArray: ...

class CompilationWithAnalyzers(object):
    """    """
    @overload
    def __init__(self, compilation: CodeAnalysis.Compilation, analyzers: Immutable.ImmutableArray, analysisOptions: CompilationWithAnalyzersOptions): ...
    @overload
    def __init__(self, compilation: CodeAnalysis.Compilation, analyzers: Immutable.ImmutableArray, options: AnalyzerOptions, cancellationToken: Threading.CancellationToken): ...
    @property
    def AnalysisOptions(self) -> CompilationWithAnalyzersOptions: ...
    @property
    def Analyzers(self) -> Immutable.ImmutableArray: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @overload
    def GetAllDiagnosticsAsync() -> Tasks.Task: ...
    @overload
    def GetAllDiagnosticsAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, file: CodeAnalysis.AdditionalText, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, tree: CodeAnalysis.SyntaxTree, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, model: CodeAnalysis.SemanticModel, filterSpan: System.Nullable, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, file: CodeAnalysis.AdditionalText, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, tree: CodeAnalysis.SyntaxTree, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalysisResultAsync(self, model: CodeAnalysis.SemanticModel, filterSpan: System.Nullable, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerDiagnosticsAsync() -> Tasks.Task: ...
    @overload
    def GetAnalyzerDiagnosticsAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerDiagnosticsAsync(self, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerSemanticDiagnosticsAsync(self, model: CodeAnalysis.SemanticModel, filterSpan: System.Nullable, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerSemanticDiagnosticsAsync(self, model: CodeAnalysis.SemanticModel, filterSpan: System.Nullable, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerSyntaxDiagnosticsAsync(self, tree: CodeAnalysis.SyntaxTree, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerSyntaxDiagnosticsAsync(self, tree: CodeAnalysis.SyntaxTree, analyzers: Immutable.ImmutableArray, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAnalyzerTelemetryInfoAsync(self, analyzer: DiagnosticAnalyzer, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetEffectiveDiagnostics(diagnostics: Generic.IEnumerable, compilation: CodeAnalysis.Compilation) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetEffectiveDiagnostics(diagnostics: Immutable.ImmutableArray, compilation: CodeAnalysis.Compilation) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IsDiagnosticAnalyzerSuppressed(analyzer: DiagnosticAnalyzer, options: CodeAnalysis.CompilationOptions, onAnalyzerException: System.Action) -> bool: ...

class CompilationWithAnalyzersOptions(object):
    """    """
    @overload
    def __init__(self, options: AnalyzerOptions, onAnalyzerException: System.Action, concurrentAnalysis: bool, logAnalyzerExecutionTime: bool): ...
    @overload
    def __init__(self, options: AnalyzerOptions, onAnalyzerException: System.Action, concurrentAnalysis: bool, logAnalyzerExecutionTime: bool, reportSuppressedDiagnostics: bool): ...
    @overload
    def __init__(self, options: AnalyzerOptions, onAnalyzerException: System.Action, concurrentAnalysis: bool, logAnalyzerExecutionTime: bool, reportSuppressedDiagnostics: bool, analyzerExceptionFilter: System.Func): ...
    @property
    def AnalyzerExceptionFilter(self) -> System.Func: ...
    @property
    def ConcurrentAnalysis(self) -> bool: ...
    @property
    def LogAnalyzerExecutionTime(self) -> bool: ...
    @property
    def OnAnalyzerException(self) -> System.Action: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def ReportSuppressedDiagnostics(self) -> bool: ...

class AnalysisContext(object):
    """    """
    @overload
    def ConfigureGeneratedCodeAnalysis(self, analysisMode: GeneratedCodeAnalysisFlags) -> None: ...
    @overload
    def EnableConcurrentExecution() -> None: ...
    @overload
    def RegisterAdditionalFileAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCodeBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCodeBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCompilationAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCompilationStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: CodeAnalysis.System.Array[CodeAnalysis.OperationKind]) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterOperationBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSemanticModelAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSymbolAction(self, action: System.Action, symbolKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterSymbolAction(self, action: System.Action, symbolKinds: CodeAnalysis.System.Array[CodeAnalysis.SymbolKind]) -> None: ...
    @overload
    def RegisterSymbolStartAction(self, action: System.Action, symbolKind: CodeAnalysis.SymbolKind) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: System.Array[TLanguageKindEnum]) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterSyntaxTreeAction(self, action: System.Action) -> None: ...
    @overload
    def TryGetValue(self, text: Text.SourceText, valueProvider: SourceTextValueProvider) -> (bool, TValue): ...

class GeneratedCodeAnalysisFlags(enum.Enum):
    None_ = 0
    Analyze = 1
    ReportDiagnostics = 2

class CompilationStartAnalysisContext(object):
    """    """
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @overload
    def RegisterAdditionalFileAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCodeBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCodeBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCompilationEndAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: CodeAnalysis.System.Array[CodeAnalysis.OperationKind]) -> None: ...
    @overload
    def RegisterOperationBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSemanticModelAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSymbolAction(self, action: System.Action, symbolKinds: CodeAnalysis.System.Array[CodeAnalysis.SymbolKind]) -> None: ...
    @overload
    def RegisterSymbolAction(self, action: System.Action, symbolKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterSymbolStartAction(self, action: System.Action, symbolKind: CodeAnalysis.SymbolKind) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: System.Array[TLanguageKindEnum]) -> None: ...
    @overload
    def RegisterSyntaxTreeAction(self, action: System.Action) -> None: ...
    @overload
    def TryGetValue(self, text: Text.SourceText, valueProvider: SourceTextValueProvider) -> (bool, TValue): ...
    @overload
    def TryGetValue(self, tree: CodeAnalysis.SyntaxTree, valueProvider: SyntaxTreeValueProvider) -> (bool, TValue): ...

class CompilationAnalysisContext(System.ValueType):
    """    """
    def __init__(self, compilation: CodeAnalysis.Compilation, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...
    @overload
    def TryGetValue(self, text: Text.SourceText, valueProvider: SourceTextValueProvider) -> (bool, TValue): ...
    @overload
    def TryGetValue(self, tree: CodeAnalysis.SyntaxTree, valueProvider: SyntaxTreeValueProvider) -> (bool, TValue): ...

class SemanticModelAnalysisContext(System.ValueType):
    """    """
    def __init__(self, semanticModel: CodeAnalysis.SemanticModel, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def SemanticModel(self) -> CodeAnalysis.SemanticModel: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class SymbolAnalysisContext(System.ValueType):
    """    """
    def __init__(self, symbol: CodeAnalysis.ISymbol, compilation: CodeAnalysis.Compilation, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def Symbol(self) -> CodeAnalysis.ISymbol: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class SymbolStartAnalysisContext(object):
    """    """
    def __init__(self, symbol: CodeAnalysis.ISymbol, compilation: CodeAnalysis.Compilation, options: AnalyzerOptions, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def Symbol(self) -> CodeAnalysis.ISymbol: ...
    @overload
    def RegisterCodeBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterCodeBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: CodeAnalysis.System.Array[CodeAnalysis.OperationKind]) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterOperationBlockAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterOperationBlockStartAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSymbolEndAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: System.Array[TLanguageKindEnum]) -> None: ...

class CodeBlockStartAnalysisContext(object):
    """    CodeBlockStartAnalysisContext[TLanguageKindEnum]
    """
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def CodeBlock(self) -> CodeAnalysis.SyntaxNode: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def OwningSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def SemanticModel(self) -> CodeAnalysis.SemanticModel: ...
    @overload
    def RegisterCodeBlockEndAction(self, action: System.Action) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: System.Array[TLanguageKindEnum]) -> None: ...
    @overload
    def RegisterSyntaxNodeAction(self, action: System.Action, syntaxKinds: Immutable.ImmutableArray) -> None: ...

class CodeBlockAnalysisContext(System.ValueType):
    """    """
    def __init__(self, codeBlock: CodeAnalysis.SyntaxNode, owningSymbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def CodeBlock(self) -> CodeAnalysis.SyntaxNode: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def OwningSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def SemanticModel(self) -> CodeAnalysis.SemanticModel: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class OperationBlockStartAnalysisContext(object):
    """    """
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def OperationBlocks(self) -> Immutable.ImmutableArray: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def OwningSymbol(self) -> CodeAnalysis.ISymbol: ...
    @overload
    def GetControlFlowGraph(self, operationBlock: CodeAnalysis.IOperation) -> FlowAnalysis.ControlFlowGraph: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: CodeAnalysis.System.Array[CodeAnalysis.OperationKind]) -> None: ...
    @overload
    def RegisterOperationAction(self, action: System.Action, operationKinds: Immutable.ImmutableArray) -> None: ...
    @overload
    def RegisterOperationBlockEndAction(self, action: System.Action) -> None: ...

class OperationBlockAnalysisContext(System.ValueType):
    """    """
    def __init__(self, operationBlocks: Immutable.ImmutableArray, owningSymbol: CodeAnalysis.ISymbol, compilation: CodeAnalysis.Compilation, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def OperationBlocks(self) -> Immutable.ImmutableArray: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def OwningSymbol(self) -> CodeAnalysis.ISymbol: ...
    @overload
    def GetControlFlowGraph(self, operationBlock: CodeAnalysis.IOperation) -> FlowAnalysis.ControlFlowGraph: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class SyntaxTreeAnalysisContext(System.ValueType):
    """    """
    def __init__(self, tree: CodeAnalysis.SyntaxTree, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def Tree(self) -> CodeAnalysis.SyntaxTree: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class AdditionalFileAnalysisContext(System.ValueType):
    """    """
    @property
    def AdditionalFile(self) -> CodeAnalysis.AdditionalText: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class SyntaxNodeAnalysisContext(System.ValueType):
    """    """
    @overload
    def __init__(self, node: CodeAnalysis.SyntaxNode, semanticModel: CodeAnalysis.SemanticModel, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, node: CodeAnalysis.SyntaxNode, containingSymbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def ContainingSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Node(self) -> CodeAnalysis.SyntaxNode: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def SemanticModel(self) -> CodeAnalysis.SemanticModel: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class OperationAnalysisContext(System.ValueType):
    """    """
    def __init__(self, operation: CodeAnalysis.IOperation, containingSymbol: CodeAnalysis.ISymbol, compilation: CodeAnalysis.Compilation, options: AnalyzerOptions, reportDiagnostic: System.Action, isSupportedDiagnostic: System.Func, cancellationToken: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def ContainingSymbol(self) -> CodeAnalysis.ISymbol: ...
    @property
    def IsGeneratedCode(self) -> bool: ...
    @property
    def Operation(self) -> CodeAnalysis.IOperation: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @overload
    def GetControlFlowGraph() -> FlowAnalysis.ControlFlowGraph: ...
    @overload
    def ReportDiagnostic(self, diagnostic: CodeAnalysis.Diagnostic) -> None: ...

class SuppressionAnalysisContext(System.ValueType):
    """    """
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def Compilation(self) -> CodeAnalysis.Compilation: ...
    @property
    def Options(self) -> AnalyzerOptions: ...
    @property
    def ReportedDiagnostics(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetSemanticModel(self, syntaxTree: CodeAnalysis.SyntaxTree) -> CodeAnalysis.SemanticModel: ...
    @overload
    def ReportSuppression(self, suppression: Suppression) -> None: ...

class DiagnosticAnalyzer(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def SupportedDiagnostics(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Initialize(self, context: AnalysisContext) -> None: ...
    @overload
    def ToString() -> str: ...

class DiagnosticAnalyzerAttribute(System.Attribute):
    """    """
    def __init__(self, firstLanguage: str, additionalLanguages: System.System.Array[str]): ...
    @property
    def Languages(self) -> System.System.Array[str]: ...

class DiagnosticAnalyzerExtensions(object):
    """    """
    @overload
    @staticmethod
    def WithAnalyzers(compilation: CodeAnalysis.Compilation, analyzers: Immutable.ImmutableArray, analysisOptions: CompilationWithAnalyzersOptions) -> CompilationWithAnalyzers: ...
    @overload
    @staticmethod
    def WithAnalyzers(compilation: CodeAnalysis.Compilation, analyzers: Immutable.ImmutableArray, options: AnalyzerOptions, cancellationToken: Threading.CancellationToken) -> CompilationWithAnalyzers: ...

class DiagnosticSuppressor(DiagnosticAnalyzer):
    """    """
    @property
    def SupportedDiagnostics(self) -> Immutable.ImmutableArray: ...
    @property
    def SupportedSuppressions(self) -> Immutable.ImmutableArray: ...
    @overload
    def Initialize(self, context: AnalysisContext) -> None: ...
    @overload
    def ReportSuppressions(self, context: SuppressionAnalysisContext) -> None: ...

class SourceTextValueProvider(object):
    """    SourceTextValueProvider[TValue]
    """
    def __init__(self, computeValue: System.Func, sourceTextComparer: Generic.IEqualityComparer): ...

class Suppression(System.ValueType):
    """    """
    @overload
    @staticmethod
    def Create(descriptor: CodeAnalysis.SuppressionDescriptor, suppressedDiagnostic: CodeAnalysis.Diagnostic) -> Suppression: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Suppression) -> bool: ...
    @property
    def Descriptor(self) -> CodeAnalysis.SuppressionDescriptor: ...
    @property
    def SuppressedDiagnostic(self) -> CodeAnalysis.Diagnostic: ...
    @overload
    def GetHashCode() -> int: ...

class SyntaxTreeValueProvider(object):
    """    SyntaxTreeValueProvider[TValue]
    """
    def __init__(self, computeValue: System.Func, syntaxTreeComparer: Generic.IEqualityComparer): ...

class UnresolvedAnalyzerReference(AnalyzerReference):
    """    """
    def __init__(self, unresolvedPath: str): ...
    @property
    def Display(self) -> str: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Id(self) -> object: ...
    @overload
    def GetAnalyzers(self, language: str) -> Immutable.ImmutableArray: ...
    @overload
    def GetAnalyzersForAllLanguages() -> Immutable.ImmutableArray: ...

class SuppressionInfo(object):
    """    """
    @property
    def Attribute(self) -> CodeAnalysis.AttributeData: ...
    @property
    def Id(self) -> str: ...

class FailureErrorCode(enum.Enum):
    None_ = 0
    UnableToLoadAnalyzer = 1
    UnableToCreateAnalyzer = 2
    NoAnalyzers = 3
    ReferencesFramework = 4
    ReferencesNewerCompiler = 5

# endregion
