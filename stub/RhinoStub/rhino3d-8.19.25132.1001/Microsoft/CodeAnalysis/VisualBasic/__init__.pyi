"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Syntax", "VisualBasicCommandLineArguments", "VisualBasicCommandLineParser", "AwaitExpressionInfo", "VisualBasicCompilation", "ForEachStatementInfo", "CollectionRangeVariableSymbolInfo", "AggregateClauseSymbolInfo", "VisualBasicDiagnosticFormatter", "LocalizableErrorArgument", "VisualBasicSyntaxVisitor", "VisualBasicSyntaxRewriter", "SyntaxFactory", "SyntaxFacts", "GeneratedExtensionSyntaxFacts", "GlobalImport", "LanguageVersion", "LanguageVersionFacts", "OptionStrict", "PredefinedPreprocessorSymbols", "Conversion", "VisualBasicGeneratorDriver", "SymbolDisplay", "HandledEvent", "HandledEventKind", "TypedConstantExtensions", "SyntaxExtensions", "SyntaxKind", "VisualBasicSyntaxNode", "VisualBasicSyntaxTree", "VisualBasicSyntaxWalker", "VisualBasicCompilationOptions", "VisualBasicExtensions", "VisualBasicParseOptions"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import Diagnostics
from Microsoft.CodeAnalysis import Operations
from Microsoft.CodeAnalysis import Text
from Microsoft.CodeAnalysis.VisualBasic import Syntax
from System import IO
from System import Text
from System import Threading
from System.Collections import Generic
from System.Collections import Immutable
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis.VisualBasic, Version=4.6.0.0

class VisualBasicCommandLineArguments(CodeAnalysis.CommandLineArguments):
    """    """
    @property
    def CompilationOptions(self) -> VisualBasicCompilationOptions: ...
    @property
    def ParseOptions(self) -> VisualBasicParseOptions: ...
    @CompilationOptions.setter
    def CompilationOptions(self, value: System.Void): ...
    @ParseOptions.setter
    def ParseOptions(self, value: System.Void): ...

class VisualBasicCommandLineParser(CodeAnalysis.CommandLineParser):
    """    """
    @property
    def Default(self) -> VisualBasicCommandLineParser: ...
    @property
    def Script(self) -> VisualBasicCommandLineParser: ...
    @overload
    def Parse(self, args: Generic.IEnumerable, baseDirectory: str, sdkDirectory: str, additionalReferenceDirectories: str) -> VisualBasicCommandLineArguments: ...
    @overload
    @staticmethod
    def ParseConditionalCompilationSymbols(symbolList: str, symbols: Generic.IEnumerable) -> (Generic.IReadOnlyDictionary, Generic.IEnumerable): ...

class AwaitExpressionInfo(System.ValueType):
    """    """
    @property
    def GetAwaiterMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def GetResultMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def IsCompletedProperty(self) -> CodeAnalysis.IPropertySymbol: ...

class VisualBasicCompilation(CodeAnalysis.Compilation):
    """    """
    @overload
    def AddReferences(self, references: Generic.IEnumerable) -> VisualBasicCompilation: ...
    @overload
    def AddReferences(self, references: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> VisualBasicCompilation: ...
    @overload
    def AddSyntaxTrees(self, trees: Generic.IEnumerable) -> VisualBasicCompilation: ...
    @overload
    def AddSyntaxTrees(self, trees: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTree]) -> VisualBasicCompilation: ...
    @overload
    def ClassifyCommonConversion(self, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Operations.CommonConversion: ...
    @overload
    def ClassifyConversion(self, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    def Clone() -> VisualBasicCompilation: ...
    @overload
    def ContainsSymbolsWithName(self, predicate: System.Func, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSymbolsWithName(self, name: str, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def ContainsSyntaxTree(self, syntaxTree: CodeAnalysis.SyntaxTree) -> bool: ...
    @overload
    @staticmethod
    def Create(assemblyName: str, syntaxTrees: Generic.IEnumerable, references: Generic.IEnumerable, options: VisualBasicCompilationOptions) -> VisualBasicCompilation: ...
    @property
    def DirectiveReferences(self) -> Immutable.ImmutableArray: ...
    @property
    def IsCaseSensitive(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def LanguageVersion(self) -> LanguageVersion: ...
    @property
    def Options(self) -> VisualBasicCompilationOptions: ...
    @property
    def ReferencedAssemblyNames(self) -> Generic.IEnumerable: ...
    @property
    def SyntaxTrees(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetDeclarationDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetMethodBodyDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetParseDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def GetSemanticModel(self, syntaxTree: CodeAnalysis.SyntaxTree, ignoreAccessibility: bool) -> CodeAnalysis.SemanticModel: ...
    @overload
    def GetSymbolsWithName(self, predicate: System.Func, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetSymbolsWithName(self, name: str, filter_: CodeAnalysis.SymbolFilter, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetUsedAssemblyReferences(self, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    def RemoveAllReferences() -> VisualBasicCompilation: ...
    @overload
    def RemoveAllSyntaxTrees() -> VisualBasicCompilation: ...
    @overload
    def RemoveReferences(self, references: Generic.IEnumerable) -> VisualBasicCompilation: ...
    @overload
    def RemoveReferences(self, references: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> VisualBasicCompilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTree]) -> VisualBasicCompilation: ...
    @overload
    def RemoveSyntaxTrees(self, trees: Generic.IEnumerable) -> VisualBasicCompilation: ...
    @overload
    def ReplaceReference(self, oldReference: CodeAnalysis.MetadataReference, newReference: CodeAnalysis.MetadataReference) -> VisualBasicCompilation: ...
    @overload
    def ReplaceSyntaxTree(self, oldTree: CodeAnalysis.SyntaxTree, newTree: CodeAnalysis.SyntaxTree) -> VisualBasicCompilation: ...
    @overload
    def ToMetadataReference(self, aliases: Immutable.ImmutableArray, embedInteropTypes: bool) -> CodeAnalysis.CompilationReference: ...
    @overload
    def WithAssemblyName(self, assemblyName: str) -> VisualBasicCompilation: ...
    @overload
    def WithOptions(self, newOptions: VisualBasicCompilationOptions) -> VisualBasicCompilation: ...
    @overload
    def WithReferences(self, newReferences: Generic.IEnumerable) -> VisualBasicCompilation: ...
    @overload
    def WithReferences(self, newReferences: CodeAnalysis.System.Array[CodeAnalysis.MetadataReference]) -> VisualBasicCompilation: ...

class ForEachStatementInfo(System.ValueType):
    """    """
    @property
    def CurrentConversion(self) -> Conversion: ...
    @property
    def CurrentProperty(self) -> CodeAnalysis.IPropertySymbol: ...
    @property
    def DisposeMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def ElementConversion(self) -> Conversion: ...
    @property
    def ElementType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def GetEnumeratorMethod(self) -> CodeAnalysis.IMethodSymbol: ...
    @property
    def MoveNextMethod(self) -> CodeAnalysis.IMethodSymbol: ...

class CollectionRangeVariableSymbolInfo(System.ValueType):
    """    """
    @property
    def AsClauseConversion(self) -> CodeAnalysis.SymbolInfo: ...
    @property
    def SelectMany(self) -> CodeAnalysis.SymbolInfo: ...
    @property
    def ToQueryableCollectionConversion(self) -> CodeAnalysis.SymbolInfo: ...

class AggregateClauseSymbolInfo(System.ValueType):
    """    """
    @property
    def Select1(self) -> CodeAnalysis.SymbolInfo: ...
    @property
    def Select2(self) -> CodeAnalysis.SymbolInfo: ...

class VisualBasicDiagnosticFormatter(CodeAnalysis.DiagnosticFormatter):
    """    """
    @property
    def Instance(self) -> VisualBasicDiagnosticFormatter: ...

class LocalizableErrorArgument(System.ValueType):
    """    """
    @overload
    def ToString() -> str: ...
    @overload
    def ToString_IFormattable(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...

class VisualBasicSyntaxVisitor(object):
    """    VisualBasicSyntaxVisitor[TResult]
    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> TResult: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> TResult: ...
    @overload
    def VisitAccessorBlock(self, node: Syntax.AccessorBlockSyntax) -> TResult: ...
    @overload
    def VisitAccessorStatement(self, node: Syntax.AccessorStatementSyntax) -> TResult: ...
    @overload
    def VisitAddRemoveHandlerStatement(self, node: Syntax.AddRemoveHandlerStatementSyntax) -> TResult: ...
    @overload
    def VisitAggregateClause(self, node: Syntax.AggregateClauseSyntax) -> TResult: ...
    @overload
    def VisitAggregationRangeVariable(self, node: Syntax.AggregationRangeVariableSyntax) -> TResult: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> TResult: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> TResult: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> TResult: ...
    @overload
    def VisitAsNewClause(self, node: Syntax.AsNewClauseSyntax) -> TResult: ...
    @overload
    def VisitAssignmentStatement(self, node: Syntax.AssignmentStatementSyntax) -> TResult: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> TResult: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> TResult: ...
    @overload
    def VisitAttributesStatement(self, node: Syntax.AttributesStatementSyntax) -> TResult: ...
    @overload
    def VisitAttributeTarget(self, node: Syntax.AttributeTargetSyntax) -> TResult: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> TResult: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitBinaryConditionalExpression(self, node: Syntax.BinaryConditionalExpressionSyntax) -> TResult: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> TResult: ...
    @overload
    def VisitCallStatement(self, node: Syntax.CallStatementSyntax) -> TResult: ...
    @overload
    def VisitCaseBlock(self, node: Syntax.CaseBlockSyntax) -> TResult: ...
    @overload
    def VisitCaseStatement(self, node: Syntax.CaseStatementSyntax) -> TResult: ...
    @overload
    def VisitCatchBlock(self, node: Syntax.CatchBlockSyntax) -> TResult: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> TResult: ...
    @overload
    def VisitCatchStatement(self, node: Syntax.CatchStatementSyntax) -> TResult: ...
    @overload
    def VisitClassBlock(self, node: Syntax.ClassBlockSyntax) -> TResult: ...
    @overload
    def VisitClassStatement(self, node: Syntax.ClassStatementSyntax) -> TResult: ...
    @overload
    def VisitCollectionInitializer(self, node: Syntax.CollectionInitializerSyntax) -> TResult: ...
    @overload
    def VisitCollectionRangeVariable(self, node: Syntax.CollectionRangeVariableSyntax) -> TResult: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> TResult: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitConstDirectiveTrivia(self, node: Syntax.ConstDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitConstructorBlock(self, node: Syntax.ConstructorBlockSyntax) -> TResult: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> TResult: ...
    @overload
    def VisitCrefOperatorReference(self, node: Syntax.CrefOperatorReferenceSyntax) -> TResult: ...
    @overload
    def VisitCrefReference(self, node: Syntax.CrefReferenceSyntax) -> TResult: ...
    @overload
    def VisitCrefSignature(self, node: Syntax.CrefSignatureSyntax) -> TResult: ...
    @overload
    def VisitCrefSignaturePart(self, node: Syntax.CrefSignaturePartSyntax) -> TResult: ...
    @overload
    def VisitCTypeExpression(self, node: Syntax.CTypeExpressionSyntax) -> TResult: ...
    @overload
    def VisitDeclareStatement(self, node: Syntax.DeclareStatementSyntax) -> TResult: ...
    @overload
    def VisitDelegateStatement(self, node: Syntax.DelegateStatementSyntax) -> TResult: ...
    @overload
    def VisitDirectCastExpression(self, node: Syntax.DirectCastExpressionSyntax) -> TResult: ...
    @overload
    def VisitDisableWarningDirectiveTrivia(self, node: Syntax.DisableWarningDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitDistinctClause(self, node: Syntax.DistinctClauseSyntax) -> TResult: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> TResult: ...
    @overload
    def VisitDoLoopBlock(self, node: Syntax.DoLoopBlockSyntax) -> TResult: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> TResult: ...
    @overload
    def VisitElseBlock(self, node: Syntax.ElseBlockSyntax) -> TResult: ...
    @overload
    def VisitElseCaseClause(self, node: Syntax.ElseCaseClauseSyntax) -> TResult: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitElseIfBlock(self, node: Syntax.ElseIfBlockSyntax) -> TResult: ...
    @overload
    def VisitElseIfStatement(self, node: Syntax.ElseIfStatementSyntax) -> TResult: ...
    @overload
    def VisitElseStatement(self, node: Syntax.ElseStatementSyntax) -> TResult: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> TResult: ...
    @overload
    def VisitEnableWarningDirectiveTrivia(self, node: Syntax.EnableWarningDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEndBlockStatement(self, node: Syntax.EndBlockStatementSyntax) -> TResult: ...
    @overload
    def VisitEndExternalSourceDirectiveTrivia(self, node: Syntax.EndExternalSourceDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitEnumBlock(self, node: Syntax.EnumBlockSyntax) -> TResult: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> TResult: ...
    @overload
    def VisitEnumStatement(self, node: Syntax.EnumStatementSyntax) -> TResult: ...
    @overload
    def VisitEqualsValue(self, node: Syntax.EqualsValueSyntax) -> TResult: ...
    @overload
    def VisitEraseStatement(self, node: Syntax.EraseStatementSyntax) -> TResult: ...
    @overload
    def VisitErrorStatement(self, node: Syntax.ErrorStatementSyntax) -> TResult: ...
    @overload
    def VisitEventBlock(self, node: Syntax.EventBlockSyntax) -> TResult: ...
    @overload
    def VisitEventStatement(self, node: Syntax.EventStatementSyntax) -> TResult: ...
    @overload
    def VisitExitStatement(self, node: Syntax.ExitStatementSyntax) -> TResult: ...
    @overload
    def VisitExpressionRangeVariable(self, node: Syntax.ExpressionRangeVariableSyntax) -> TResult: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> TResult: ...
    @overload
    def VisitExternalChecksumDirectiveTrivia(self, node: Syntax.ExternalChecksumDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitExternalSourceDirectiveTrivia(self, node: Syntax.ExternalSourceDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> TResult: ...
    @overload
    def VisitFinallyBlock(self, node: Syntax.FinallyBlockSyntax) -> TResult: ...
    @overload
    def VisitFinallyStatement(self, node: Syntax.FinallyStatementSyntax) -> TResult: ...
    @overload
    def VisitForBlock(self, node: Syntax.ForBlockSyntax) -> TResult: ...
    @overload
    def VisitForEachBlock(self, node: Syntax.ForEachBlockSyntax) -> TResult: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> TResult: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> TResult: ...
    @overload
    def VisitForStepClause(self, node: Syntax.ForStepClauseSyntax) -> TResult: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> TResult: ...
    @overload
    def VisitFunctionAggregation(self, node: Syntax.FunctionAggregationSyntax) -> TResult: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> TResult: ...
    @overload
    def VisitGetTypeExpression(self, node: Syntax.GetTypeExpressionSyntax) -> TResult: ...
    @overload
    def VisitGetXmlNamespaceExpression(self, node: Syntax.GetXmlNamespaceExpressionSyntax) -> TResult: ...
    @overload
    def VisitGlobalName(self, node: Syntax.GlobalNameSyntax) -> TResult: ...
    @overload
    def VisitGoToStatement(self, node: Syntax.GoToStatementSyntax) -> TResult: ...
    @overload
    def VisitGroupAggregation(self, node: Syntax.GroupAggregationSyntax) -> TResult: ...
    @overload
    def VisitGroupByClause(self, node: Syntax.GroupByClauseSyntax) -> TResult: ...
    @overload
    def VisitGroupJoinClause(self, node: Syntax.GroupJoinClauseSyntax) -> TResult: ...
    @overload
    def VisitHandlesClause(self, node: Syntax.HandlesClauseSyntax) -> TResult: ...
    @overload
    def VisitHandlesClauseItem(self, node: Syntax.HandlesClauseItemSyntax) -> TResult: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> TResult: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> TResult: ...
    @overload
    def VisitImplementsClause(self, node: Syntax.ImplementsClauseSyntax) -> TResult: ...
    @overload
    def VisitImplementsStatement(self, node: Syntax.ImplementsStatementSyntax) -> TResult: ...
    @overload
    def VisitImportAliasClause(self, node: Syntax.ImportAliasClauseSyntax) -> TResult: ...
    @overload
    def VisitImportsStatement(self, node: Syntax.ImportsStatementSyntax) -> TResult: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> TResult: ...
    @overload
    def VisitInferredFieldInitializer(self, node: Syntax.InferredFieldInitializerSyntax) -> TResult: ...
    @overload
    def VisitInheritsStatement(self, node: Syntax.InheritsStatementSyntax) -> TResult: ...
    @overload
    def VisitInterfaceBlock(self, node: Syntax.InterfaceBlockSyntax) -> TResult: ...
    @overload
    def VisitInterfaceStatement(self, node: Syntax.InterfaceStatementSyntax) -> TResult: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> TResult: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> TResult: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> TResult: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> TResult: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> TResult: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> TResult: ...
    @overload
    def VisitJoinCondition(self, node: Syntax.JoinConditionSyntax) -> TResult: ...
    @overload
    def VisitKeywordEventContainer(self, node: Syntax.KeywordEventContainerSyntax) -> TResult: ...
    @overload
    def VisitLabel(self, node: Syntax.LabelSyntax) -> TResult: ...
    @overload
    def VisitLabelStatement(self, node: Syntax.LabelStatementSyntax) -> TResult: ...
    @overload
    def VisitLambdaHeader(self, node: Syntax.LambdaHeaderSyntax) -> TResult: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> TResult: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> TResult: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> TResult: ...
    @overload
    def VisitLoopStatement(self, node: Syntax.LoopStatementSyntax) -> TResult: ...
    @overload
    def VisitMeExpression(self, node: Syntax.MeExpressionSyntax) -> TResult: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitMethodBlock(self, node: Syntax.MethodBlockSyntax) -> TResult: ...
    @overload
    def VisitMethodStatement(self, node: Syntax.MethodStatementSyntax) -> TResult: ...
    @overload
    def VisitMidExpression(self, node: Syntax.MidExpressionSyntax) -> TResult: ...
    @overload
    def VisitModifiedIdentifier(self, node: Syntax.ModifiedIdentifierSyntax) -> TResult: ...
    @overload
    def VisitModuleBlock(self, node: Syntax.ModuleBlockSyntax) -> TResult: ...
    @overload
    def VisitModuleStatement(self, node: Syntax.ModuleStatementSyntax) -> TResult: ...
    @overload
    def VisitMultiLineIfBlock(self, node: Syntax.MultiLineIfBlockSyntax) -> TResult: ...
    @overload
    def VisitMultiLineLambdaExpression(self, node: Syntax.MultiLineLambdaExpressionSyntax) -> TResult: ...
    @overload
    def VisitMyBaseExpression(self, node: Syntax.MyBaseExpressionSyntax) -> TResult: ...
    @overload
    def VisitMyClassExpression(self, node: Syntax.MyClassExpressionSyntax) -> TResult: ...
    @overload
    def VisitNameColonEquals(self, node: Syntax.NameColonEqualsSyntax) -> TResult: ...
    @overload
    def VisitNamedFieldInitializer(self, node: Syntax.NamedFieldInitializerSyntax) -> TResult: ...
    @overload
    def VisitNamedTupleElement(self, node: Syntax.NamedTupleElementSyntax) -> TResult: ...
    @overload
    def VisitNameOfExpression(self, node: Syntax.NameOfExpressionSyntax) -> TResult: ...
    @overload
    def VisitNamespaceBlock(self, node: Syntax.NamespaceBlockSyntax) -> TResult: ...
    @overload
    def VisitNamespaceStatement(self, node: Syntax.NamespaceStatementSyntax) -> TResult: ...
    @overload
    def VisitNextStatement(self, node: Syntax.NextStatementSyntax) -> TResult: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> TResult: ...
    @overload
    def VisitObjectCollectionInitializer(self, node: Syntax.ObjectCollectionInitializerSyntax) -> TResult: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> TResult: ...
    @overload
    def VisitObjectMemberInitializer(self, node: Syntax.ObjectMemberInitializerSyntax) -> TResult: ...
    @overload
    def VisitOmittedArgument(self, node: Syntax.OmittedArgumentSyntax) -> TResult: ...
    @overload
    def VisitOnErrorGoToStatement(self, node: Syntax.OnErrorGoToStatementSyntax) -> TResult: ...
    @overload
    def VisitOnErrorResumeNextStatement(self, node: Syntax.OnErrorResumeNextStatementSyntax) -> TResult: ...
    @overload
    def VisitOperatorBlock(self, node: Syntax.OperatorBlockSyntax) -> TResult: ...
    @overload
    def VisitOperatorStatement(self, node: Syntax.OperatorStatementSyntax) -> TResult: ...
    @overload
    def VisitOptionStatement(self, node: Syntax.OptionStatementSyntax) -> TResult: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> TResult: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> TResult: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> TResult: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> TResult: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> TResult: ...
    @overload
    def VisitPartitionClause(self, node: Syntax.PartitionClauseSyntax) -> TResult: ...
    @overload
    def VisitPartitionWhileClause(self, node: Syntax.PartitionWhileClauseSyntax) -> TResult: ...
    @overload
    def VisitPredefinedCastExpression(self, node: Syntax.PredefinedCastExpressionSyntax) -> TResult: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> TResult: ...
    @overload
    def VisitPrintStatement(self, node: Syntax.PrintStatementSyntax) -> TResult: ...
    @overload
    def VisitPropertyBlock(self, node: Syntax.PropertyBlockSyntax) -> TResult: ...
    @overload
    def VisitPropertyStatement(self, node: Syntax.PropertyStatementSyntax) -> TResult: ...
    @overload
    def VisitQualifiedCrefOperatorReference(self, node: Syntax.QualifiedCrefOperatorReferenceSyntax) -> TResult: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> TResult: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> TResult: ...
    @overload
    def VisitRaiseEventStatement(self, node: Syntax.RaiseEventStatementSyntax) -> TResult: ...
    @overload
    def VisitRangeArgument(self, node: Syntax.RangeArgumentSyntax) -> TResult: ...
    @overload
    def VisitRangeCaseClause(self, node: Syntax.RangeCaseClauseSyntax) -> TResult: ...
    @overload
    def VisitRedimClause(self, node: Syntax.RedimClauseSyntax) -> TResult: ...
    @overload
    def VisitReDimStatement(self, node: Syntax.ReDimStatementSyntax) -> TResult: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> TResult: ...
    @overload
    def VisitRelationalCaseClause(self, node: Syntax.RelationalCaseClauseSyntax) -> TResult: ...
    @overload
    def VisitResumeStatement(self, node: Syntax.ResumeStatementSyntax) -> TResult: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> TResult: ...
    @overload
    def VisitSelectBlock(self, node: Syntax.SelectBlockSyntax) -> TResult: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> TResult: ...
    @overload
    def VisitSelectStatement(self, node: Syntax.SelectStatementSyntax) -> TResult: ...
    @overload
    def VisitSimpleArgument(self, node: Syntax.SimpleArgumentSyntax) -> TResult: ...
    @overload
    def VisitSimpleAsClause(self, node: Syntax.SimpleAsClauseSyntax) -> TResult: ...
    @overload
    def VisitSimpleCaseClause(self, node: Syntax.SimpleCaseClauseSyntax) -> TResult: ...
    @overload
    def VisitSimpleImportsClause(self, node: Syntax.SimpleImportsClauseSyntax) -> TResult: ...
    @overload
    def VisitSimpleJoinClause(self, node: Syntax.SimpleJoinClauseSyntax) -> TResult: ...
    @overload
    def VisitSingleLineElseClause(self, node: Syntax.SingleLineElseClauseSyntax) -> TResult: ...
    @overload
    def VisitSingleLineIfStatement(self, node: Syntax.SingleLineIfStatementSyntax) -> TResult: ...
    @overload
    def VisitSingleLineLambdaExpression(self, node: Syntax.SingleLineLambdaExpressionSyntax) -> TResult: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> TResult: ...
    @overload
    def VisitSpecialConstraint(self, node: Syntax.SpecialConstraintSyntax) -> TResult: ...
    @overload
    def VisitStopOrEndStatement(self, node: Syntax.StopOrEndStatementSyntax) -> TResult: ...
    @overload
    def VisitStructureBlock(self, node: Syntax.StructureBlockSyntax) -> TResult: ...
    @overload
    def VisitStructureStatement(self, node: Syntax.StructureStatementSyntax) -> TResult: ...
    @overload
    def VisitSubNewStatement(self, node: Syntax.SubNewStatementSyntax) -> TResult: ...
    @overload
    def VisitSyncLockBlock(self, node: Syntax.SyncLockBlockSyntax) -> TResult: ...
    @overload
    def VisitSyncLockStatement(self, node: Syntax.SyncLockStatementSyntax) -> TResult: ...
    @overload
    def VisitTernaryConditionalExpression(self, node: Syntax.TernaryConditionalExpressionSyntax) -> TResult: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> TResult: ...
    @overload
    def VisitTryBlock(self, node: Syntax.TryBlockSyntax) -> TResult: ...
    @overload
    def VisitTryCastExpression(self, node: Syntax.TryCastExpressionSyntax) -> TResult: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> TResult: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> TResult: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> TResult: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> TResult: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> TResult: ...
    @overload
    def VisitTypedTupleElement(self, node: Syntax.TypedTupleElementSyntax) -> TResult: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> TResult: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> TResult: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> TResult: ...
    @overload
    def VisitTypeParameterMultipleConstraintClause(self, node: Syntax.TypeParameterMultipleConstraintClauseSyntax) -> TResult: ...
    @overload
    def VisitTypeParameterSingleConstraintClause(self, node: Syntax.TypeParameterSingleConstraintClauseSyntax) -> TResult: ...
    @overload
    def VisitUnaryExpression(self, node: Syntax.UnaryExpressionSyntax) -> TResult: ...
    @overload
    def VisitUsingBlock(self, node: Syntax.UsingBlockSyntax) -> TResult: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> TResult: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> TResult: ...
    @overload
    def VisitVariableNameEquals(self, node: Syntax.VariableNameEqualsSyntax) -> TResult: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> TResult: ...
    @overload
    def VisitWhileBlock(self, node: Syntax.WhileBlockSyntax) -> TResult: ...
    @overload
    def VisitWhileOrUntilClause(self, node: Syntax.WhileOrUntilClauseSyntax) -> TResult: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> TResult: ...
    @overload
    def VisitWithBlock(self, node: Syntax.WithBlockSyntax) -> TResult: ...
    @overload
    def VisitWithEventsEventContainer(self, node: Syntax.WithEventsEventContainerSyntax) -> TResult: ...
    @overload
    def VisitWithEventsPropertyEventContainer(self, node: Syntax.WithEventsPropertyEventContainerSyntax) -> TResult: ...
    @overload
    def VisitWithStatement(self, node: Syntax.WithStatementSyntax) -> TResult: ...
    @overload
    def VisitXmlAttribute(self, node: Syntax.XmlAttributeSyntax) -> TResult: ...
    @overload
    def VisitXmlBracketedName(self, node: Syntax.XmlBracketedNameSyntax) -> TResult: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> TResult: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> TResult: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> TResult: ...
    @overload
    def VisitXmlDeclaration(self, node: Syntax.XmlDeclarationSyntax) -> TResult: ...
    @overload
    def VisitXmlDeclarationOption(self, node: Syntax.XmlDeclarationOptionSyntax) -> TResult: ...
    @overload
    def VisitXmlDocument(self, node: Syntax.XmlDocumentSyntax) -> TResult: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> TResult: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> TResult: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> TResult: ...
    @overload
    def VisitXmlEmbeddedExpression(self, node: Syntax.XmlEmbeddedExpressionSyntax) -> TResult: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> TResult: ...
    @overload
    def VisitXmlMemberAccessExpression(self, node: Syntax.XmlMemberAccessExpressionSyntax) -> TResult: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> TResult: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> TResult: ...
    @overload
    def VisitXmlNamespaceImportsClause(self, node: Syntax.XmlNamespaceImportsClauseSyntax) -> TResult: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> TResult: ...
    @overload
    def VisitXmlPrefixName(self, node: Syntax.XmlPrefixNameSyntax) -> TResult: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> TResult: ...
    @overload
    def VisitXmlString(self, node: Syntax.XmlStringSyntax) -> TResult: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> TResult: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> TResult: ...

class VisualBasicSyntaxVisitor(object):
    """    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def VisitAccessorBlock(self, node: Syntax.AccessorBlockSyntax) -> None: ...
    @overload
    def VisitAccessorStatement(self, node: Syntax.AccessorStatementSyntax) -> None: ...
    @overload
    def VisitAddRemoveHandlerStatement(self, node: Syntax.AddRemoveHandlerStatementSyntax) -> None: ...
    @overload
    def VisitAggregateClause(self, node: Syntax.AggregateClauseSyntax) -> None: ...
    @overload
    def VisitAggregationRangeVariable(self, node: Syntax.AggregationRangeVariableSyntax) -> None: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> None: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> None: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> None: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> None: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> None: ...
    @overload
    def VisitAsNewClause(self, node: Syntax.AsNewClauseSyntax) -> None: ...
    @overload
    def VisitAssignmentStatement(self, node: Syntax.AssignmentStatementSyntax) -> None: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> None: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> None: ...
    @overload
    def VisitAttributesStatement(self, node: Syntax.AttributesStatementSyntax) -> None: ...
    @overload
    def VisitAttributeTarget(self, node: Syntax.AttributeTargetSyntax) -> None: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> None: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitBinaryConditionalExpression(self, node: Syntax.BinaryConditionalExpressionSyntax) -> None: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> None: ...
    @overload
    def VisitCallStatement(self, node: Syntax.CallStatementSyntax) -> None: ...
    @overload
    def VisitCaseBlock(self, node: Syntax.CaseBlockSyntax) -> None: ...
    @overload
    def VisitCaseStatement(self, node: Syntax.CaseStatementSyntax) -> None: ...
    @overload
    def VisitCatchBlock(self, node: Syntax.CatchBlockSyntax) -> None: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> None: ...
    @overload
    def VisitCatchStatement(self, node: Syntax.CatchStatementSyntax) -> None: ...
    @overload
    def VisitClassBlock(self, node: Syntax.ClassBlockSyntax) -> None: ...
    @overload
    def VisitClassStatement(self, node: Syntax.ClassStatementSyntax) -> None: ...
    @overload
    def VisitCollectionInitializer(self, node: Syntax.CollectionInitializerSyntax) -> None: ...
    @overload
    def VisitCollectionRangeVariable(self, node: Syntax.CollectionRangeVariableSyntax) -> None: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> None: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> None: ...
    @overload
    def VisitConstDirectiveTrivia(self, node: Syntax.ConstDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitConstructorBlock(self, node: Syntax.ConstructorBlockSyntax) -> None: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> None: ...
    @overload
    def VisitCrefOperatorReference(self, node: Syntax.CrefOperatorReferenceSyntax) -> None: ...
    @overload
    def VisitCrefReference(self, node: Syntax.CrefReferenceSyntax) -> None: ...
    @overload
    def VisitCrefSignature(self, node: Syntax.CrefSignatureSyntax) -> None: ...
    @overload
    def VisitCrefSignaturePart(self, node: Syntax.CrefSignaturePartSyntax) -> None: ...
    @overload
    def VisitCTypeExpression(self, node: Syntax.CTypeExpressionSyntax) -> None: ...
    @overload
    def VisitDeclareStatement(self, node: Syntax.DeclareStatementSyntax) -> None: ...
    @overload
    def VisitDelegateStatement(self, node: Syntax.DelegateStatementSyntax) -> None: ...
    @overload
    def VisitDirectCastExpression(self, node: Syntax.DirectCastExpressionSyntax) -> None: ...
    @overload
    def VisitDisableWarningDirectiveTrivia(self, node: Syntax.DisableWarningDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitDistinctClause(self, node: Syntax.DistinctClauseSyntax) -> None: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> None: ...
    @overload
    def VisitDoLoopBlock(self, node: Syntax.DoLoopBlockSyntax) -> None: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> None: ...
    @overload
    def VisitElseBlock(self, node: Syntax.ElseBlockSyntax) -> None: ...
    @overload
    def VisitElseCaseClause(self, node: Syntax.ElseCaseClauseSyntax) -> None: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitElseIfBlock(self, node: Syntax.ElseIfBlockSyntax) -> None: ...
    @overload
    def VisitElseIfStatement(self, node: Syntax.ElseIfStatementSyntax) -> None: ...
    @overload
    def VisitElseStatement(self, node: Syntax.ElseStatementSyntax) -> None: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> None: ...
    @overload
    def VisitEnableWarningDirectiveTrivia(self, node: Syntax.EnableWarningDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEndBlockStatement(self, node: Syntax.EndBlockStatementSyntax) -> None: ...
    @overload
    def VisitEndExternalSourceDirectiveTrivia(self, node: Syntax.EndExternalSourceDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitEnumBlock(self, node: Syntax.EnumBlockSyntax) -> None: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> None: ...
    @overload
    def VisitEnumStatement(self, node: Syntax.EnumStatementSyntax) -> None: ...
    @overload
    def VisitEqualsValue(self, node: Syntax.EqualsValueSyntax) -> None: ...
    @overload
    def VisitEraseStatement(self, node: Syntax.EraseStatementSyntax) -> None: ...
    @overload
    def VisitErrorStatement(self, node: Syntax.ErrorStatementSyntax) -> None: ...
    @overload
    def VisitEventBlock(self, node: Syntax.EventBlockSyntax) -> None: ...
    @overload
    def VisitEventStatement(self, node: Syntax.EventStatementSyntax) -> None: ...
    @overload
    def VisitExitStatement(self, node: Syntax.ExitStatementSyntax) -> None: ...
    @overload
    def VisitExpressionRangeVariable(self, node: Syntax.ExpressionRangeVariableSyntax) -> None: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> None: ...
    @overload
    def VisitExternalChecksumDirectiveTrivia(self, node: Syntax.ExternalChecksumDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitExternalSourceDirectiveTrivia(self, node: Syntax.ExternalSourceDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> None: ...
    @overload
    def VisitFinallyBlock(self, node: Syntax.FinallyBlockSyntax) -> None: ...
    @overload
    def VisitFinallyStatement(self, node: Syntax.FinallyStatementSyntax) -> None: ...
    @overload
    def VisitForBlock(self, node: Syntax.ForBlockSyntax) -> None: ...
    @overload
    def VisitForEachBlock(self, node: Syntax.ForEachBlockSyntax) -> None: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> None: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> None: ...
    @overload
    def VisitForStepClause(self, node: Syntax.ForStepClauseSyntax) -> None: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> None: ...
    @overload
    def VisitFunctionAggregation(self, node: Syntax.FunctionAggregationSyntax) -> None: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> None: ...
    @overload
    def VisitGetTypeExpression(self, node: Syntax.GetTypeExpressionSyntax) -> None: ...
    @overload
    def VisitGetXmlNamespaceExpression(self, node: Syntax.GetXmlNamespaceExpressionSyntax) -> None: ...
    @overload
    def VisitGlobalName(self, node: Syntax.GlobalNameSyntax) -> None: ...
    @overload
    def VisitGoToStatement(self, node: Syntax.GoToStatementSyntax) -> None: ...
    @overload
    def VisitGroupAggregation(self, node: Syntax.GroupAggregationSyntax) -> None: ...
    @overload
    def VisitGroupByClause(self, node: Syntax.GroupByClauseSyntax) -> None: ...
    @overload
    def VisitGroupJoinClause(self, node: Syntax.GroupJoinClauseSyntax) -> None: ...
    @overload
    def VisitHandlesClause(self, node: Syntax.HandlesClauseSyntax) -> None: ...
    @overload
    def VisitHandlesClauseItem(self, node: Syntax.HandlesClauseItemSyntax) -> None: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> None: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> None: ...
    @overload
    def VisitImplementsClause(self, node: Syntax.ImplementsClauseSyntax) -> None: ...
    @overload
    def VisitImplementsStatement(self, node: Syntax.ImplementsStatementSyntax) -> None: ...
    @overload
    def VisitImportAliasClause(self, node: Syntax.ImportAliasClauseSyntax) -> None: ...
    @overload
    def VisitImportsStatement(self, node: Syntax.ImportsStatementSyntax) -> None: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> None: ...
    @overload
    def VisitInferredFieldInitializer(self, node: Syntax.InferredFieldInitializerSyntax) -> None: ...
    @overload
    def VisitInheritsStatement(self, node: Syntax.InheritsStatementSyntax) -> None: ...
    @overload
    def VisitInterfaceBlock(self, node: Syntax.InterfaceBlockSyntax) -> None: ...
    @overload
    def VisitInterfaceStatement(self, node: Syntax.InterfaceStatementSyntax) -> None: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> None: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> None: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> None: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> None: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> None: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> None: ...
    @overload
    def VisitJoinCondition(self, node: Syntax.JoinConditionSyntax) -> None: ...
    @overload
    def VisitKeywordEventContainer(self, node: Syntax.KeywordEventContainerSyntax) -> None: ...
    @overload
    def VisitLabel(self, node: Syntax.LabelSyntax) -> None: ...
    @overload
    def VisitLabelStatement(self, node: Syntax.LabelStatementSyntax) -> None: ...
    @overload
    def VisitLambdaHeader(self, node: Syntax.LambdaHeaderSyntax) -> None: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> None: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> None: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> None: ...
    @overload
    def VisitLoopStatement(self, node: Syntax.LoopStatementSyntax) -> None: ...
    @overload
    def VisitMeExpression(self, node: Syntax.MeExpressionSyntax) -> None: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> None: ...
    @overload
    def VisitMethodBlock(self, node: Syntax.MethodBlockSyntax) -> None: ...
    @overload
    def VisitMethodStatement(self, node: Syntax.MethodStatementSyntax) -> None: ...
    @overload
    def VisitMidExpression(self, node: Syntax.MidExpressionSyntax) -> None: ...
    @overload
    def VisitModifiedIdentifier(self, node: Syntax.ModifiedIdentifierSyntax) -> None: ...
    @overload
    def VisitModuleBlock(self, node: Syntax.ModuleBlockSyntax) -> None: ...
    @overload
    def VisitModuleStatement(self, node: Syntax.ModuleStatementSyntax) -> None: ...
    @overload
    def VisitMultiLineIfBlock(self, node: Syntax.MultiLineIfBlockSyntax) -> None: ...
    @overload
    def VisitMultiLineLambdaExpression(self, node: Syntax.MultiLineLambdaExpressionSyntax) -> None: ...
    @overload
    def VisitMyBaseExpression(self, node: Syntax.MyBaseExpressionSyntax) -> None: ...
    @overload
    def VisitMyClassExpression(self, node: Syntax.MyClassExpressionSyntax) -> None: ...
    @overload
    def VisitNameColonEquals(self, node: Syntax.NameColonEqualsSyntax) -> None: ...
    @overload
    def VisitNamedFieldInitializer(self, node: Syntax.NamedFieldInitializerSyntax) -> None: ...
    @overload
    def VisitNamedTupleElement(self, node: Syntax.NamedTupleElementSyntax) -> None: ...
    @overload
    def VisitNameOfExpression(self, node: Syntax.NameOfExpressionSyntax) -> None: ...
    @overload
    def VisitNamespaceBlock(self, node: Syntax.NamespaceBlockSyntax) -> None: ...
    @overload
    def VisitNamespaceStatement(self, node: Syntax.NamespaceStatementSyntax) -> None: ...
    @overload
    def VisitNextStatement(self, node: Syntax.NextStatementSyntax) -> None: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> None: ...
    @overload
    def VisitObjectCollectionInitializer(self, node: Syntax.ObjectCollectionInitializerSyntax) -> None: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> None: ...
    @overload
    def VisitObjectMemberInitializer(self, node: Syntax.ObjectMemberInitializerSyntax) -> None: ...
    @overload
    def VisitOmittedArgument(self, node: Syntax.OmittedArgumentSyntax) -> None: ...
    @overload
    def VisitOnErrorGoToStatement(self, node: Syntax.OnErrorGoToStatementSyntax) -> None: ...
    @overload
    def VisitOnErrorResumeNextStatement(self, node: Syntax.OnErrorResumeNextStatementSyntax) -> None: ...
    @overload
    def VisitOperatorBlock(self, node: Syntax.OperatorBlockSyntax) -> None: ...
    @overload
    def VisitOperatorStatement(self, node: Syntax.OperatorStatementSyntax) -> None: ...
    @overload
    def VisitOptionStatement(self, node: Syntax.OptionStatementSyntax) -> None: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> None: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> None: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> None: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> None: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> None: ...
    @overload
    def VisitPartitionClause(self, node: Syntax.PartitionClauseSyntax) -> None: ...
    @overload
    def VisitPartitionWhileClause(self, node: Syntax.PartitionWhileClauseSyntax) -> None: ...
    @overload
    def VisitPredefinedCastExpression(self, node: Syntax.PredefinedCastExpressionSyntax) -> None: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> None: ...
    @overload
    def VisitPrintStatement(self, node: Syntax.PrintStatementSyntax) -> None: ...
    @overload
    def VisitPropertyBlock(self, node: Syntax.PropertyBlockSyntax) -> None: ...
    @overload
    def VisitPropertyStatement(self, node: Syntax.PropertyStatementSyntax) -> None: ...
    @overload
    def VisitQualifiedCrefOperatorReference(self, node: Syntax.QualifiedCrefOperatorReferenceSyntax) -> None: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> None: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> None: ...
    @overload
    def VisitRaiseEventStatement(self, node: Syntax.RaiseEventStatementSyntax) -> None: ...
    @overload
    def VisitRangeArgument(self, node: Syntax.RangeArgumentSyntax) -> None: ...
    @overload
    def VisitRangeCaseClause(self, node: Syntax.RangeCaseClauseSyntax) -> None: ...
    @overload
    def VisitRedimClause(self, node: Syntax.RedimClauseSyntax) -> None: ...
    @overload
    def VisitReDimStatement(self, node: Syntax.ReDimStatementSyntax) -> None: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> None: ...
    @overload
    def VisitRelationalCaseClause(self, node: Syntax.RelationalCaseClauseSyntax) -> None: ...
    @overload
    def VisitResumeStatement(self, node: Syntax.ResumeStatementSyntax) -> None: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> None: ...
    @overload
    def VisitSelectBlock(self, node: Syntax.SelectBlockSyntax) -> None: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> None: ...
    @overload
    def VisitSelectStatement(self, node: Syntax.SelectStatementSyntax) -> None: ...
    @overload
    def VisitSimpleArgument(self, node: Syntax.SimpleArgumentSyntax) -> None: ...
    @overload
    def VisitSimpleAsClause(self, node: Syntax.SimpleAsClauseSyntax) -> None: ...
    @overload
    def VisitSimpleCaseClause(self, node: Syntax.SimpleCaseClauseSyntax) -> None: ...
    @overload
    def VisitSimpleImportsClause(self, node: Syntax.SimpleImportsClauseSyntax) -> None: ...
    @overload
    def VisitSimpleJoinClause(self, node: Syntax.SimpleJoinClauseSyntax) -> None: ...
    @overload
    def VisitSingleLineElseClause(self, node: Syntax.SingleLineElseClauseSyntax) -> None: ...
    @overload
    def VisitSingleLineIfStatement(self, node: Syntax.SingleLineIfStatementSyntax) -> None: ...
    @overload
    def VisitSingleLineLambdaExpression(self, node: Syntax.SingleLineLambdaExpressionSyntax) -> None: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> None: ...
    @overload
    def VisitSpecialConstraint(self, node: Syntax.SpecialConstraintSyntax) -> None: ...
    @overload
    def VisitStopOrEndStatement(self, node: Syntax.StopOrEndStatementSyntax) -> None: ...
    @overload
    def VisitStructureBlock(self, node: Syntax.StructureBlockSyntax) -> None: ...
    @overload
    def VisitStructureStatement(self, node: Syntax.StructureStatementSyntax) -> None: ...
    @overload
    def VisitSubNewStatement(self, node: Syntax.SubNewStatementSyntax) -> None: ...
    @overload
    def VisitSyncLockBlock(self, node: Syntax.SyncLockBlockSyntax) -> None: ...
    @overload
    def VisitSyncLockStatement(self, node: Syntax.SyncLockStatementSyntax) -> None: ...
    @overload
    def VisitTernaryConditionalExpression(self, node: Syntax.TernaryConditionalExpressionSyntax) -> None: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> None: ...
    @overload
    def VisitTryBlock(self, node: Syntax.TryBlockSyntax) -> None: ...
    @overload
    def VisitTryCastExpression(self, node: Syntax.TryCastExpressionSyntax) -> None: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> None: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> None: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> None: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> None: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> None: ...
    @overload
    def VisitTypedTupleElement(self, node: Syntax.TypedTupleElementSyntax) -> None: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> None: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> None: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> None: ...
    @overload
    def VisitTypeParameterMultipleConstraintClause(self, node: Syntax.TypeParameterMultipleConstraintClauseSyntax) -> None: ...
    @overload
    def VisitTypeParameterSingleConstraintClause(self, node: Syntax.TypeParameterSingleConstraintClauseSyntax) -> None: ...
    @overload
    def VisitUnaryExpression(self, node: Syntax.UnaryExpressionSyntax) -> None: ...
    @overload
    def VisitUsingBlock(self, node: Syntax.UsingBlockSyntax) -> None: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> None: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> None: ...
    @overload
    def VisitVariableNameEquals(self, node: Syntax.VariableNameEqualsSyntax) -> None: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> None: ...
    @overload
    def VisitWhileBlock(self, node: Syntax.WhileBlockSyntax) -> None: ...
    @overload
    def VisitWhileOrUntilClause(self, node: Syntax.WhileOrUntilClauseSyntax) -> None: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> None: ...
    @overload
    def VisitWithBlock(self, node: Syntax.WithBlockSyntax) -> None: ...
    @overload
    def VisitWithEventsEventContainer(self, node: Syntax.WithEventsEventContainerSyntax) -> None: ...
    @overload
    def VisitWithEventsPropertyEventContainer(self, node: Syntax.WithEventsPropertyEventContainerSyntax) -> None: ...
    @overload
    def VisitWithStatement(self, node: Syntax.WithStatementSyntax) -> None: ...
    @overload
    def VisitXmlAttribute(self, node: Syntax.XmlAttributeSyntax) -> None: ...
    @overload
    def VisitXmlBracketedName(self, node: Syntax.XmlBracketedNameSyntax) -> None: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> None: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> None: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> None: ...
    @overload
    def VisitXmlDeclaration(self, node: Syntax.XmlDeclarationSyntax) -> None: ...
    @overload
    def VisitXmlDeclarationOption(self, node: Syntax.XmlDeclarationOptionSyntax) -> None: ...
    @overload
    def VisitXmlDocument(self, node: Syntax.XmlDocumentSyntax) -> None: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> None: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> None: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> None: ...
    @overload
    def VisitXmlEmbeddedExpression(self, node: Syntax.XmlEmbeddedExpressionSyntax) -> None: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> None: ...
    @overload
    def VisitXmlMemberAccessExpression(self, node: Syntax.XmlMemberAccessExpressionSyntax) -> None: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> None: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> None: ...
    @overload
    def VisitXmlNamespaceImportsClause(self, node: Syntax.XmlNamespaceImportsClauseSyntax) -> None: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> None: ...
    @overload
    def VisitXmlPrefixName(self, node: Syntax.XmlPrefixNameSyntax) -> None: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> None: ...
    @overload
    def VisitXmlString(self, node: Syntax.XmlStringSyntax) -> None: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> None: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> None: ...

class VisualBasicSyntaxRewriter(VisualBasicSyntaxVisitor):
    """    """
    def __init__(self, visitIntoStructuredTrivia: bool): ...
    @property
    def VisitIntoStructuredTrivia(self) -> bool: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAccessorBlock(self, node: Syntax.AccessorBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAccessorStatement(self, node: Syntax.AccessorStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAddRemoveHandlerStatement(self, node: Syntax.AddRemoveHandlerStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAggregateClause(self, node: Syntax.AggregateClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAggregationRangeVariable(self, node: Syntax.AggregationRangeVariableSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAnonymousObjectCreationExpression(self, node: Syntax.AnonymousObjectCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArgumentList(self, node: Syntax.ArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayCreationExpression(self, node: Syntax.ArrayCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayRankSpecifier(self, node: Syntax.ArrayRankSpecifierSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitArrayType(self, node: Syntax.ArrayTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAsNewClause(self, node: Syntax.AsNewClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAssignmentStatement(self, node: Syntax.AssignmentStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttribute(self, node: Syntax.AttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeList(self, node: Syntax.AttributeListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributesStatement(self, node: Syntax.AttributesStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAttributeTarget(self, node: Syntax.AttributeTargetSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitAwaitExpression(self, node: Syntax.AwaitExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBadDirectiveTrivia(self, node: Syntax.BadDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBinaryConditionalExpression(self, node: Syntax.BinaryConditionalExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitBinaryExpression(self, node: Syntax.BinaryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCallStatement(self, node: Syntax.CallStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCaseBlock(self, node: Syntax.CaseBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCaseStatement(self, node: Syntax.CaseStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchBlock(self, node: Syntax.CatchBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchFilterClause(self, node: Syntax.CatchFilterClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCatchStatement(self, node: Syntax.CatchStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitClassBlock(self, node: Syntax.ClassBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitClassStatement(self, node: Syntax.ClassStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCollectionInitializer(self, node: Syntax.CollectionInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCollectionRangeVariable(self, node: Syntax.CollectionRangeVariableSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCompilationUnit(self, node: Syntax.CompilationUnitSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConditionalAccessExpression(self, node: Syntax.ConditionalAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstDirectiveTrivia(self, node: Syntax.ConstDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitConstructorBlock(self, node: Syntax.ConstructorBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitContinueStatement(self, node: Syntax.ContinueStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefOperatorReference(self, node: Syntax.CrefOperatorReferenceSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefReference(self, node: Syntax.CrefReferenceSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefSignature(self, node: Syntax.CrefSignatureSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCrefSignaturePart(self, node: Syntax.CrefSignaturePartSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitCTypeExpression(self, node: Syntax.CTypeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDeclareStatement(self, node: Syntax.DeclareStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDelegateStatement(self, node: Syntax.DelegateStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDirectCastExpression(self, node: Syntax.DirectCastExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDisableWarningDirectiveTrivia(self, node: Syntax.DisableWarningDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDistinctClause(self, node: Syntax.DistinctClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDocumentationCommentTrivia(self, node: Syntax.DocumentationCommentTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDoLoopBlock(self, node: Syntax.DoLoopBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitDoStatement(self, node: Syntax.DoStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseBlock(self, node: Syntax.ElseBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseCaseClause(self, node: Syntax.ElseCaseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseDirectiveTrivia(self, node: Syntax.ElseDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseIfBlock(self, node: Syntax.ElseIfBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseIfStatement(self, node: Syntax.ElseIfStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitElseStatement(self, node: Syntax.ElseStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEmptyStatement(self, node: Syntax.EmptyStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnableWarningDirectiveTrivia(self, node: Syntax.EnableWarningDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndBlockStatement(self, node: Syntax.EndBlockStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndExternalSourceDirectiveTrivia(self, node: Syntax.EndExternalSourceDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndIfDirectiveTrivia(self, node: Syntax.EndIfDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEndRegionDirectiveTrivia(self, node: Syntax.EndRegionDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnumBlock(self, node: Syntax.EnumBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnumMemberDeclaration(self, node: Syntax.EnumMemberDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEnumStatement(self, node: Syntax.EnumStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEqualsValue(self, node: Syntax.EqualsValueSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEraseStatement(self, node: Syntax.EraseStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitErrorStatement(self, node: Syntax.ErrorStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEventBlock(self, node: Syntax.EventBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitEventStatement(self, node: Syntax.EventStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExitStatement(self, node: Syntax.ExitStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExpressionRangeVariable(self, node: Syntax.ExpressionRangeVariableSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExpressionStatement(self, node: Syntax.ExpressionStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExternalChecksumDirectiveTrivia(self, node: Syntax.ExternalChecksumDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitExternalSourceDirectiveTrivia(self, node: Syntax.ExternalSourceDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFieldDeclaration(self, node: Syntax.FieldDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFinallyBlock(self, node: Syntax.FinallyBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFinallyStatement(self, node: Syntax.FinallyStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForBlock(self, node: Syntax.ForBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForEachBlock(self, node: Syntax.ForEachBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForEachStatement(self, node: Syntax.ForEachStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForStatement(self, node: Syntax.ForStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitForStepClause(self, node: Syntax.ForStepClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFromClause(self, node: Syntax.FromClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitFunctionAggregation(self, node: Syntax.FunctionAggregationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGenericName(self, node: Syntax.GenericNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGetTypeExpression(self, node: Syntax.GetTypeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGetXmlNamespaceExpression(self, node: Syntax.GetXmlNamespaceExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGlobalName(self, node: Syntax.GlobalNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGoToStatement(self, node: Syntax.GoToStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGroupAggregation(self, node: Syntax.GroupAggregationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGroupByClause(self, node: Syntax.GroupByClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitGroupJoinClause(self, node: Syntax.GroupJoinClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitHandlesClause(self, node: Syntax.HandlesClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitHandlesClauseItem(self, node: Syntax.HandlesClauseItemSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIdentifierName(self, node: Syntax.IdentifierNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIfDirectiveTrivia(self, node: Syntax.IfDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIfStatement(self, node: Syntax.IfStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplementsClause(self, node: Syntax.ImplementsClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImplementsStatement(self, node: Syntax.ImplementsStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImportAliasClause(self, node: Syntax.ImportAliasClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitImportsStatement(self, node: Syntax.ImportsStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitIncompleteMember(self, node: Syntax.IncompleteMemberSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInferredFieldInitializer(self, node: Syntax.InferredFieldInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInheritsStatement(self, node: Syntax.InheritsStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterfaceBlock(self, node: Syntax.InterfaceBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterfaceStatement(self, node: Syntax.InterfaceStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolatedStringExpression(self, node: Syntax.InterpolatedStringExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolatedStringText(self, node: Syntax.InterpolatedStringTextSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolation(self, node: Syntax.InterpolationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolationAlignmentClause(self, node: Syntax.InterpolationAlignmentClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInterpolationFormatClause(self, node: Syntax.InterpolationFormatClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitInvocationExpression(self, node: Syntax.InvocationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitJoinCondition(self, node: Syntax.JoinConditionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitKeywordEventContainer(self, node: Syntax.KeywordEventContainerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLabel(self, node: Syntax.LabelSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLabelStatement(self, node: Syntax.LabelStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLambdaHeader(self, node: Syntax.LambdaHeaderSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLetClause(self, node: Syntax.LetClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SeparatedSyntaxList) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxTokenList) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def VisitList(self, list_: CodeAnalysis.SyntaxList) -> CodeAnalysis.SyntaxList: ...
    @overload
    def VisitListElement(self, token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def VisitListElement(self, element: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    def VisitListElement(self, node: TNode) -> TNode: ...
    @overload
    def VisitListSeparator(self, token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def VisitLiteralExpression(self, node: Syntax.LiteralExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLocalDeclarationStatement(self, node: Syntax.LocalDeclarationStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitLoopStatement(self, node: Syntax.LoopStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMeExpression(self, node: Syntax.MeExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMemberAccessExpression(self, node: Syntax.MemberAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMethodBlock(self, node: Syntax.MethodBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMethodStatement(self, node: Syntax.MethodStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMidExpression(self, node: Syntax.MidExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitModifiedIdentifier(self, node: Syntax.ModifiedIdentifierSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitModuleBlock(self, node: Syntax.ModuleBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitModuleStatement(self, node: Syntax.ModuleStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMultiLineIfBlock(self, node: Syntax.MultiLineIfBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMultiLineLambdaExpression(self, node: Syntax.MultiLineLambdaExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMyBaseExpression(self, node: Syntax.MyBaseExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitMyClassExpression(self, node: Syntax.MyClassExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNameColonEquals(self, node: Syntax.NameColonEqualsSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNamedFieldInitializer(self, node: Syntax.NamedFieldInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNamedTupleElement(self, node: Syntax.NamedTupleElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNameOfExpression(self, node: Syntax.NameOfExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNamespaceBlock(self, node: Syntax.NamespaceBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNamespaceStatement(self, node: Syntax.NamespaceStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNextStatement(self, node: Syntax.NextStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitNullableType(self, node: Syntax.NullableTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitObjectCollectionInitializer(self, node: Syntax.ObjectCollectionInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitObjectCreationExpression(self, node: Syntax.ObjectCreationExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitObjectMemberInitializer(self, node: Syntax.ObjectMemberInitializerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOmittedArgument(self, node: Syntax.OmittedArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOnErrorGoToStatement(self, node: Syntax.OnErrorGoToStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOnErrorResumeNextStatement(self, node: Syntax.OnErrorResumeNextStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOperatorBlock(self, node: Syntax.OperatorBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOperatorStatement(self, node: Syntax.OperatorStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOptionStatement(self, node: Syntax.OptionStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOrderByClause(self, node: Syntax.OrderByClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitOrdering(self, node: Syntax.OrderingSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParameter(self, node: Syntax.ParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParameterList(self, node: Syntax.ParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitParenthesizedExpression(self, node: Syntax.ParenthesizedExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPartitionClause(self, node: Syntax.PartitionClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPartitionWhileClause(self, node: Syntax.PartitionWhileClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPredefinedCastExpression(self, node: Syntax.PredefinedCastExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPredefinedType(self, node: Syntax.PredefinedTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPrintStatement(self, node: Syntax.PrintStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPropertyBlock(self, node: Syntax.PropertyBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitPropertyStatement(self, node: Syntax.PropertyStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQualifiedCrefOperatorReference(self, node: Syntax.QualifiedCrefOperatorReferenceSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQualifiedName(self, node: Syntax.QualifiedNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitQueryExpression(self, node: Syntax.QueryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRaiseEventStatement(self, node: Syntax.RaiseEventStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRangeArgument(self, node: Syntax.RangeArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRangeCaseClause(self, node: Syntax.RangeCaseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRedimClause(self, node: Syntax.RedimClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitReDimStatement(self, node: Syntax.ReDimStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitReferenceDirectiveTrivia(self, node: Syntax.ReferenceDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRegionDirectiveTrivia(self, node: Syntax.RegionDirectiveTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitRelationalCaseClause(self, node: Syntax.RelationalCaseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitResumeStatement(self, node: Syntax.ResumeStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitReturnStatement(self, node: Syntax.ReturnStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSelectBlock(self, node: Syntax.SelectBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSelectClause(self, node: Syntax.SelectClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSelectStatement(self, node: Syntax.SelectStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleArgument(self, node: Syntax.SimpleArgumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleAsClause(self, node: Syntax.SimpleAsClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleCaseClause(self, node: Syntax.SimpleCaseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleImportsClause(self, node: Syntax.SimpleImportsClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSimpleJoinClause(self, node: Syntax.SimpleJoinClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSingleLineElseClause(self, node: Syntax.SingleLineElseClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSingleLineIfStatement(self, node: Syntax.SingleLineIfStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSingleLineLambdaExpression(self, node: Syntax.SingleLineLambdaExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSkippedTokensTrivia(self, node: Syntax.SkippedTokensTriviaSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSpecialConstraint(self, node: Syntax.SpecialConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitStopOrEndStatement(self, node: Syntax.StopOrEndStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitStructureBlock(self, node: Syntax.StructureBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitStructureStatement(self, node: Syntax.StructureStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSubNewStatement(self, node: Syntax.SubNewStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSyncLockBlock(self, node: Syntax.SyncLockBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitSyncLockStatement(self, node: Syntax.SyncLockStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTernaryConditionalExpression(self, node: Syntax.TernaryConditionalExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitThrowStatement(self, node: Syntax.ThrowStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitToken(self, token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def VisitTrivia(self, trivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    def VisitTryBlock(self, node: Syntax.TryBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTryCastExpression(self, node: Syntax.TryCastExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTryStatement(self, node: Syntax.TryStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTupleExpression(self, node: Syntax.TupleExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTupleType(self, node: Syntax.TupleTypeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeArgumentList(self, node: Syntax.TypeArgumentListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeConstraint(self, node: Syntax.TypeConstraintSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypedTupleElement(self, node: Syntax.TypedTupleElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeOfExpression(self, node: Syntax.TypeOfExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameter(self, node: Syntax.TypeParameterSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameterList(self, node: Syntax.TypeParameterListSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameterMultipleConstraintClause(self, node: Syntax.TypeParameterMultipleConstraintClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitTypeParameterSingleConstraintClause(self, node: Syntax.TypeParameterSingleConstraintClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUnaryExpression(self, node: Syntax.UnaryExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUsingBlock(self, node: Syntax.UsingBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitUsingStatement(self, node: Syntax.UsingStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitVariableDeclarator(self, node: Syntax.VariableDeclaratorSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitVariableNameEquals(self, node: Syntax.VariableNameEqualsSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhereClause(self, node: Syntax.WhereClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhileBlock(self, node: Syntax.WhileBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhileOrUntilClause(self, node: Syntax.WhileOrUntilClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWhileStatement(self, node: Syntax.WhileStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWithBlock(self, node: Syntax.WithBlockSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWithEventsEventContainer(self, node: Syntax.WithEventsEventContainerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWithEventsPropertyEventContainer(self, node: Syntax.WithEventsPropertyEventContainerSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitWithStatement(self, node: Syntax.WithStatementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlAttribute(self, node: Syntax.XmlAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlBracketedName(self, node: Syntax.XmlBracketedNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlCDataSection(self, node: Syntax.XmlCDataSectionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlComment(self, node: Syntax.XmlCommentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlCrefAttribute(self, node: Syntax.XmlCrefAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlDeclaration(self, node: Syntax.XmlDeclarationSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlDeclarationOption(self, node: Syntax.XmlDeclarationOptionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlDocument(self, node: Syntax.XmlDocumentSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElement(self, node: Syntax.XmlElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElementEndTag(self, node: Syntax.XmlElementEndTagSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlElementStartTag(self, node: Syntax.XmlElementStartTagSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlEmbeddedExpression(self, node: Syntax.XmlEmbeddedExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlEmptyElement(self, node: Syntax.XmlEmptyElementSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlMemberAccessExpression(self, node: Syntax.XmlMemberAccessExpressionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlName(self, node: Syntax.XmlNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlNameAttribute(self, node: Syntax.XmlNameAttributeSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlNamespaceImportsClause(self, node: Syntax.XmlNamespaceImportsClauseSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlPrefix(self, node: Syntax.XmlPrefixSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlPrefixName(self, node: Syntax.XmlPrefixNameSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlProcessingInstruction(self, node: Syntax.XmlProcessingInstructionSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlString(self, node: Syntax.XmlStringSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitXmlText(self, node: Syntax.XmlTextSyntax) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def VisitYieldStatement(self, node: Syntax.YieldStatementSyntax) -> CodeAnalysis.SyntaxNode: ...

class SyntaxFactory(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AccessorBlock(kind: SyntaxKind, accessorStatement: Syntax.AccessorStatementSyntax, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def AccessorBlock(kind: SyntaxKind, accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def AccessorStatement(kind: SyntaxKind, accessorKeyword: CodeAnalysis.SyntaxToken) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def AccessorStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def AddAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def AddAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def AddExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AddExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorStatement() -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def AddHandlerAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def AddHandlerStatement(eventExpression: Syntax.ExpressionSyntax, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def AddHandlerStatement(addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken, eventExpression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def AddRemoveHandlerStatement(kind: SyntaxKind, addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken, eventExpression: Syntax.ExpressionSyntax, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def AddRemoveHandlerStatement(kind: SyntaxKind, addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken, eventExpression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def AddressOfExpression(operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AddressOfExpression(operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AggregateClause(variables: CodeAnalysis.SeparatedSyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AggregateClauseSyntax: ...
    @overload
    @staticmethod
    def AggregateClause(variables: CodeAnalysis.SeparatedSyntaxList, additionalQueryOperators: CodeAnalysis.SyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AggregateClauseSyntax: ...
    @overload
    @staticmethod
    def AggregateClause(aggregateKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList, additionalQueryOperators: CodeAnalysis.SyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AggregateClauseSyntax: ...
    @overload
    @staticmethod
    def AggregationRangeVariable(aggregation: Syntax.AggregationSyntax) -> Syntax.AggregationRangeVariableSyntax: ...
    @overload
    @staticmethod
    def AggregationRangeVariable(nameEquals: Syntax.VariableNameEqualsSyntax, aggregation: Syntax.AggregationSyntax) -> Syntax.AggregationRangeVariableSyntax: ...
    @overload
    @staticmethod
    def AndAlsoExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AndAlsoExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AndExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AndExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectCreationExpression(initializer: Syntax.ObjectMemberInitializerSyntax) -> Syntax.AnonymousObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectCreationExpression(attributeLists: CodeAnalysis.SyntaxList, initializer: Syntax.ObjectMemberInitializerSyntax) -> Syntax.AnonymousObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def AnonymousObjectCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, initializer: Syntax.ObjectMemberInitializerSyntax) -> Syntax.AnonymousObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SyntaxTokenList, newList: CodeAnalysis.SyntaxTokenList) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldToken: CodeAnalysis.SyntaxToken, newToken: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldNode: CodeAnalysis.SyntaxNode, newNode: CodeAnalysis.SyntaxNode, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SyntaxList, newList: CodeAnalysis.SyntaxList, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldList: CodeAnalysis.SeparatedSyntaxList, newList: CodeAnalysis.SeparatedSyntaxList, ignoreChildNode: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldNode: CodeAnalysis.SyntaxNode, newNode: CodeAnalysis.SyntaxNode, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def AreEquivalent(oldTree: CodeAnalysis.SyntaxTree, newTree: CodeAnalysis.SyntaxTree, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def ArgumentList() -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ArgumentList(openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(type_: Syntax.TypeSyntax, initializer: Syntax.CollectionInitializerSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax, arrayBounds: Syntax.ArgumentListSyntax, initializer: Syntax.CollectionInitializerSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax, arrayBounds: Syntax.ArgumentListSyntax, rankSpecifiers: CodeAnalysis.SyntaxList, initializer: Syntax.CollectionInitializerSyntax) -> Syntax.ArrayCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ArrayRankSpecifier() -> Syntax.ArrayRankSpecifierSyntax: ...
    @overload
    @staticmethod
    def ArrayRankSpecifier(openParenToken: CodeAnalysis.SyntaxToken, commaTokens: CodeAnalysis.SyntaxTokenList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ArrayRankSpecifierSyntax: ...
    @overload
    @staticmethod
    def ArrayType(elementType: Syntax.TypeSyntax) -> Syntax.ArrayTypeSyntax: ...
    @overload
    @staticmethod
    def ArrayType(elementType: Syntax.TypeSyntax, rankSpecifiers: CodeAnalysis.SyntaxList) -> Syntax.ArrayTypeSyntax: ...
    @overload
    @staticmethod
    def AscendingOrdering(expression: Syntax.ExpressionSyntax) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def AscendingOrdering(expression: Syntax.ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def AsNewClause(newExpression: Syntax.NewExpressionSyntax) -> Syntax.AsNewClauseSyntax: ...
    @overload
    @staticmethod
    def AsNewClause(asKeyword: CodeAnalysis.SyntaxToken, newExpression: Syntax.NewExpressionSyntax) -> Syntax.AsNewClauseSyntax: ...
    @overload
    @staticmethod
    def AssignmentStatement(kind: SyntaxKind, left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def Attribute(name: Syntax.TypeSyntax) -> Syntax.AttributeSyntax: ...
    @overload
    @staticmethod
    def Attribute(target: Syntax.AttributeTargetSyntax, name: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.AttributeSyntax: ...
    @overload
    @staticmethod
    def AttributeList() -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributeList(attributes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributeList(lessThanToken: CodeAnalysis.SyntaxToken, attributes: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.AttributeListSyntax: ...
    @overload
    @staticmethod
    def AttributesStatement() -> Syntax.AttributesStatementSyntax: ...
    @overload
    @staticmethod
    def AttributesStatement(attributeLists: CodeAnalysis.SyntaxList) -> Syntax.AttributesStatementSyntax: ...
    @overload
    @staticmethod
    def AttributeTarget(attributeModifier: CodeAnalysis.SyntaxToken) -> Syntax.AttributeTargetSyntax: ...
    @overload
    @staticmethod
    def AttributeTarget(attributeModifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.AttributeTargetSyntax: ...
    @overload
    @staticmethod
    def AwaitExpression(expression: Syntax.ExpressionSyntax) -> Syntax.AwaitExpressionSyntax: ...
    @overload
    @staticmethod
    def AwaitExpression(awaitKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.AwaitExpressionSyntax: ...
    @overload
    @staticmethod
    def BadDirectiveTrivia() -> Syntax.BadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def BadDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken) -> Syntax.BadDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def BadToken(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def BadToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def BinaryConditionalExpression(firstExpression: Syntax.ExpressionSyntax, secondExpression: Syntax.ExpressionSyntax) -> Syntax.BinaryConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def BinaryConditionalExpression(ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, firstExpression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, secondExpression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.BinaryConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def BinaryExpression(kind: SyntaxKind, left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def BracketedIdentifier(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def BracketedIdentifier(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def CallStatement(invocation: Syntax.ExpressionSyntax) -> Syntax.CallStatementSyntax: ...
    @overload
    @staticmethod
    def CallStatement(callKeyword: CodeAnalysis.SyntaxToken, invocation: Syntax.ExpressionSyntax) -> Syntax.CallStatementSyntax: ...
    @overload
    @staticmethod
    def CaseBlock(caseStatement: Syntax.CaseStatementSyntax) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseBlock(caseStatement: Syntax.CaseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseBlock(kind: SyntaxKind, caseStatement: Syntax.CaseStatementSyntax) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseBlock(kind: SyntaxKind, caseStatement: Syntax.CaseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseElseBlock(caseStatement: Syntax.CaseStatementSyntax) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseElseBlock(caseStatement: Syntax.CaseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.CaseBlockSyntax: ...
    @overload
    @staticmethod
    def CaseElseStatement(cases: Syntax.System.Array[Syntax.CaseClauseSyntax]) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseElseStatement(cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseElseStatement(caseKeyword: CodeAnalysis.SyntaxToken, cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseEqualsClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseEqualsClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseGreaterThanClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseGreaterThanClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseGreaterThanOrEqualClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseGreaterThanOrEqualClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseLessThanClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseLessThanClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseLessThanOrEqualClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseLessThanOrEqualClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseNotEqualsClause(value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseNotEqualsClause(isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(cases: Syntax.System.Array[Syntax.CaseClauseSyntax]) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(kind: SyntaxKind, cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(kind: SyntaxKind, cases: Syntax.System.Array[Syntax.CaseClauseSyntax]) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(caseKeyword: CodeAnalysis.SyntaxToken, cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CaseStatement(kind: SyntaxKind, caseKeyword: CodeAnalysis.SyntaxToken, cases: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CaseStatementSyntax: ...
    @overload
    @staticmethod
    def CatchBlock(catchStatement: Syntax.CatchStatementSyntax) -> Syntax.CatchBlockSyntax: ...
    @overload
    @staticmethod
    def CatchBlock(catchStatement: Syntax.CatchStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.CatchBlockSyntax: ...
    @overload
    @staticmethod
    def CatchFilterClause(filter_: Syntax.ExpressionSyntax) -> Syntax.CatchFilterClauseSyntax: ...
    @overload
    @staticmethod
    def CatchFilterClause(whenKeyword: CodeAnalysis.SyntaxToken, filter_: Syntax.ExpressionSyntax) -> Syntax.CatchFilterClauseSyntax: ...
    @overload
    @staticmethod
    def CatchStatement() -> Syntax.CatchStatementSyntax: ...
    @overload
    @staticmethod
    def CatchStatement(identifierName: Syntax.IdentifierNameSyntax, asClause: Syntax.SimpleAsClauseSyntax, whenClause: Syntax.CatchFilterClauseSyntax) -> Syntax.CatchStatementSyntax: ...
    @overload
    @staticmethod
    def CatchStatement(catchKeyword: CodeAnalysis.SyntaxToken, identifierName: Syntax.IdentifierNameSyntax, asClause: Syntax.SimpleAsClauseSyntax, whenClause: Syntax.CatchFilterClauseSyntax) -> Syntax.CatchStatementSyntax: ...
    @overload
    @staticmethod
    def CharacterLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def CharacterLiteralToken(text: str, value: System.Char) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def CharacterLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Char, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ClassBlock(classStatement: Syntax.ClassStatementSyntax) -> Syntax.ClassBlockSyntax: ...
    @overload
    @staticmethod
    def ClassBlock(classStatement: Syntax.ClassStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.ClassBlockSyntax: ...
    @overload
    @staticmethod
    def ClassBlock(classStatement: Syntax.ClassStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endClassStatement: Syntax.EndBlockStatementSyntax) -> Syntax.ClassBlockSyntax: ...
    @overload
    @staticmethod
    def ClassConstraint(constraintKeyword: CodeAnalysis.SyntaxToken) -> Syntax.SpecialConstraintSyntax: ...
    @overload
    @staticmethod
    def ClassStatement(identifier: str) -> Syntax.ClassStatementSyntax: ...
    @overload
    @staticmethod
    def ClassStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ClassStatementSyntax: ...
    @overload
    @staticmethod
    def ClassStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.ClassStatementSyntax: ...
    @overload
    @staticmethod
    def ClassStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, classKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.ClassStatementSyntax: ...
    @overload
    @staticmethod
    def CollectionInitializer() -> Syntax.CollectionInitializerSyntax: ...
    @overload
    @staticmethod
    def CollectionInitializer(initializers: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CollectionInitializerSyntax: ...
    @overload
    @staticmethod
    def CollectionInitializer(openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.CollectionInitializerSyntax: ...
    @overload
    @staticmethod
    def CollectionRangeVariable(identifier: Syntax.ModifiedIdentifierSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.CollectionRangeVariableSyntax: ...
    @overload
    @staticmethod
    def CollectionRangeVariable(identifier: Syntax.ModifiedIdentifierSyntax, asClause: Syntax.SimpleAsClauseSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.CollectionRangeVariableSyntax: ...
    @overload
    @staticmethod
    def CollectionRangeVariable(identifier: Syntax.ModifiedIdentifierSyntax, asClause: Syntax.SimpleAsClauseSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.CollectionRangeVariableSyntax: ...
    @overload
    @staticmethod
    def ColonTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def CommentTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def CompilationUnit() -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def CompilationUnit(options: CodeAnalysis.SyntaxList, imports: CodeAnalysis.SyntaxList, attributes: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def CompilationUnit(options: CodeAnalysis.SyntaxList, imports: CodeAnalysis.SyntaxList, attributes: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endOfFileToken: CodeAnalysis.SyntaxToken) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def ConcatenateAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def ConcatenateAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def ConcatenateExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ConcatenateExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalAccessExpression(whenNotNull: Syntax.ExpressionSyntax) -> Syntax.ConditionalAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalAccessExpression(expression: Syntax.ExpressionSyntax, whenNotNull: Syntax.ExpressionSyntax) -> Syntax.ConditionalAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ConditionalAccessExpression(expression: Syntax.ExpressionSyntax, questionMarkToken: CodeAnalysis.SyntaxToken, whenNotNull: Syntax.ExpressionSyntax) -> Syntax.ConditionalAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def ConflictMarkerTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ConstDirectiveTrivia(name: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.ConstDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ConstDirectiveTrivia(name: str, value: Syntax.ExpressionSyntax) -> Syntax.ConstDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ConstDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, constKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.ConstDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ConstructorBlock(subNewStatement: Syntax.SubNewStatementSyntax) -> Syntax.ConstructorBlockSyntax: ...
    @overload
    @staticmethod
    def ConstructorBlock(subNewStatement: Syntax.SubNewStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.ConstructorBlockSyntax: ...
    @overload
    @staticmethod
    def ConstructorBlock(subNewStatement: Syntax.SubNewStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubStatement: Syntax.EndBlockStatementSyntax) -> Syntax.ConstructorBlockSyntax: ...
    @overload
    @staticmethod
    def ContinueDoStatement() -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueDoStatement(continueKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueForStatement() -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueForStatement(continueKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement(kind: SyntaxKind, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueStatement(kind: SyntaxKind, continueKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueWhileStatement() -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def ContinueWhileStatement(continueKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ContinueStatementSyntax: ...
    @overload
    @staticmethod
    def CrefOperatorReference(operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.CrefOperatorReferenceSyntax: ...
    @overload
    @staticmethod
    def CrefOperatorReference(operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.CrefOperatorReferenceSyntax: ...
    @overload
    @staticmethod
    def CrefReference(name: Syntax.TypeSyntax) -> Syntax.CrefReferenceSyntax: ...
    @overload
    @staticmethod
    def CrefReference(name: Syntax.TypeSyntax, signature: Syntax.CrefSignatureSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.CrefReferenceSyntax: ...
    @overload
    @staticmethod
    def CrefSignature(argumentTypes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.CrefSignatureSyntax: ...
    @overload
    @staticmethod
    def CrefSignature(argumentTypes: Syntax.System.Array[Syntax.CrefSignaturePartSyntax]) -> Syntax.CrefSignatureSyntax: ...
    @overload
    @staticmethod
    def CrefSignature(openParenToken: CodeAnalysis.SyntaxToken, argumentTypes: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CrefSignatureSyntax: ...
    @overload
    @staticmethod
    def CrefSignaturePart() -> Syntax.CrefSignaturePartSyntax: ...
    @overload
    @staticmethod
    def CrefSignaturePart(modifier: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.CrefSignaturePartSyntax: ...
    @overload
    @staticmethod
    def CTypeExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.CTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def CTypeExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.CTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def DateLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def DateLiteralToken(text: str, value: System.DateTime) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DateLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: System.DateTime, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DecimalLiteralToken(text: str, typeSuffix: Syntax.TypeCharacter, value: System.Decimal) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DecimalLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, typeSuffix: Syntax.TypeCharacter, value: System.Decimal, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DeclareFunctionStatement(identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareFunctionStatement(identifier: str, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, charsetKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declareKeyword: CodeAnalysis.SyntaxToken, charsetKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libKeyword: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasKeyword: CodeAnalysis.SyntaxToken, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: str, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, charsetKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declareKeyword: CodeAnalysis.SyntaxToken, charsetKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libKeyword: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasKeyword: CodeAnalysis.SyntaxToken, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareSubStatement(identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareSubStatement(identifier: str, libraryName: Syntax.LiteralExpressionSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareSubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, charsetKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DeclareSubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declareKeyword: CodeAnalysis.SyntaxToken, charsetKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libKeyword: CodeAnalysis.SyntaxToken, libraryName: Syntax.LiteralExpressionSyntax, aliasKeyword: CodeAnalysis.SyntaxToken, aliasName: Syntax.LiteralExpressionSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DeclareStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateFunctionStatement(identifier: str) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateFunctionStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateFunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: str) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateSubStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateSubStatement(identifier: str) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateSubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DelegateSubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.DelegateStatementSyntax: ...
    @overload
    @staticmethod
    def DescendingOrdering(expression: Syntax.ExpressionSyntax) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def DescendingOrdering(expression: Syntax.ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def DictionaryAccessExpression(name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def DictionaryAccessExpression(expression: Syntax.ExpressionSyntax, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def DictionaryAccessExpression(expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def DirectCastExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.DirectCastExpressionSyntax: ...
    @overload
    @staticmethod
    def DirectCastExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.DirectCastExpressionSyntax: ...
    @overload
    @staticmethod
    def DisabledTextTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def DisableWarningDirectiveTrivia(errorCodes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.DisableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DisableWarningDirectiveTrivia(errorCodes: Syntax.System.Array[Syntax.IdentifierNameSyntax]) -> Syntax.DisableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DisableWarningDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, disableKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.DisableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def DistinctClause() -> Syntax.DistinctClauseSyntax: ...
    @overload
    @staticmethod
    def DistinctClause(distinctKeyword: CodeAnalysis.SyntaxToken) -> Syntax.DistinctClauseSyntax: ...
    @overload
    @staticmethod
    def DivideAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def DivideAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def DivideExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def DivideExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def DocumentationComment(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DocumentationCommentExteriorTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def DocumentationCommentLineBreakToken(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DocumentationCommentLineBreakToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def DocumentationCommentTrivia() -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DocumentationCommentTrivia(content: CodeAnalysis.SyntaxList) -> Syntax.DocumentationCommentTriviaSyntax: ...
    @overload
    @staticmethod
    def DoLoopBlock(kind: SyntaxKind, doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoLoopBlock(kind: SyntaxKind, doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoLoopUntilBlock(doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoLoopUntilBlock(doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoLoopWhileBlock(doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoLoopWhileBlock(doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoStatement(kind: SyntaxKind) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoStatement(kind: SyntaxKind, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoStatement(kind: SyntaxKind, doKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoUntilLoopBlock(doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoUntilLoopBlock(doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoUntilStatement() -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoUntilStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoUntilStatement(doKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoWhileLoopBlock(doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoWhileLoopBlock(doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def DoWhileStatement() -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoWhileStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def DoWhileStatement(doKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def ElasticEndOfLine(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ElasticWhitespace(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def ElseBlock() -> Syntax.ElseBlockSyntax: ...
    @overload
    @staticmethod
    def ElseBlock(statements: CodeAnalysis.SyntaxList) -> Syntax.ElseBlockSyntax: ...
    @overload
    @staticmethod
    def ElseBlock(elseStatement: Syntax.ElseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.ElseBlockSyntax: ...
    @overload
    @staticmethod
    def ElseCaseClause() -> Syntax.ElseCaseClauseSyntax: ...
    @overload
    @staticmethod
    def ElseCaseClause(elseKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ElseCaseClauseSyntax: ...
    @overload
    @staticmethod
    def ElseDirectiveTrivia() -> Syntax.ElseDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ElseDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseIfBlock(elseIfStatement: Syntax.ElseIfStatementSyntax) -> Syntax.ElseIfBlockSyntax: ...
    @overload
    @staticmethod
    def ElseIfBlock(elseIfStatement: Syntax.ElseIfStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.ElseIfBlockSyntax: ...
    @overload
    @staticmethod
    def ElseIfDirectiveTrivia(ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseIfDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ElseIfStatement(condition: Syntax.ExpressionSyntax) -> Syntax.ElseIfStatementSyntax: ...
    @overload
    @staticmethod
    def ElseIfStatement(elseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ElseIfStatementSyntax: ...
    @overload
    @staticmethod
    def ElseStatement() -> Syntax.ElseStatementSyntax: ...
    @overload
    @staticmethod
    def ElseStatement(elseKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ElseStatementSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement() -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EmptyStatement(empty: CodeAnalysis.SyntaxToken) -> Syntax.EmptyStatementSyntax: ...
    @overload
    @staticmethod
    def EnableWarningDirectiveTrivia(errorCodes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.EnableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EnableWarningDirectiveTrivia(errorCodes: Syntax.System.Array[Syntax.IdentifierNameSyntax]) -> Syntax.EnableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EnableWarningDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, enableKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> Syntax.EnableWarningDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndAddHandlerStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndAddHandlerStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndBlockStatement(kind: SyntaxKind, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndBlockStatement(kind: SyntaxKind, endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndClassStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndClassStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndEnumStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndEnumStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndEventStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndEventStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndExternalSourceDirectiveTrivia() -> Syntax.EndExternalSourceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndExternalSourceDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, externalSourceKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndExternalSourceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndFunctionStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndFunctionStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndGetStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndGetStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndIfDirectiveTrivia() -> Syntax.EndIfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndIfDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, ifKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndIfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndIfStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndIfStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndInterfaceStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndInterfaceStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndModuleStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndModuleStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndNamespaceStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndNamespaceStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndOfLine(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def EndOfLineTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def EndOperatorStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndOperatorStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndPropertyStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndPropertyStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndRaiseEventStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndRaiseEventStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndRegionDirectiveTrivia() -> Syntax.EndRegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndRegionDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndRegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def EndRemoveHandlerStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndRemoveHandlerStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSelectStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSelectStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSetStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSetStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndStatement(stopOrEndKeyword: CodeAnalysis.SyntaxToken) -> Syntax.StopOrEndStatementSyntax: ...
    @overload
    @staticmethod
    def EndStructureStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndStructureStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSubStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSubStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSyncLockStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndSyncLockStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndTryStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndTryStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndUsingStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndUsingStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndWhileStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndWhileStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndWithStatement() -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EndWithStatement(endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.EndBlockStatementSyntax: ...
    @overload
    @staticmethod
    def EnumBlock(enumStatement: Syntax.EnumStatementSyntax) -> Syntax.EnumBlockSyntax: ...
    @overload
    @staticmethod
    def EnumBlock(enumStatement: Syntax.EnumStatementSyntax, members: CodeAnalysis.SyntaxList) -> Syntax.EnumBlockSyntax: ...
    @overload
    @staticmethod
    def EnumBlock(enumStatement: Syntax.EnumStatementSyntax, members: CodeAnalysis.SyntaxList, endEnumStatement: Syntax.EndBlockStatementSyntax) -> Syntax.EnumBlockSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(identifier: CodeAnalysis.SyntaxToken) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(identifier: str) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumMemberDeclaration(attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, initializer: Syntax.EqualsValueSyntax) -> Syntax.EnumMemberDeclarationSyntax: ...
    @overload
    @staticmethod
    def EnumStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.EnumStatementSyntax: ...
    @overload
    @staticmethod
    def EnumStatement(identifier: str) -> Syntax.EnumStatementSyntax: ...
    @overload
    @staticmethod
    def EnumStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, underlyingType: Syntax.AsClauseSyntax) -> Syntax.EnumStatementSyntax: ...
    @overload
    @staticmethod
    def EnumStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, enumKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, underlyingType: Syntax.AsClauseSyntax) -> Syntax.EnumStatementSyntax: ...
    @overload
    @staticmethod
    def EqualsExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def EqualsExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def EqualsValue(value: Syntax.ExpressionSyntax) -> Syntax.EqualsValueSyntax: ...
    @overload
    @staticmethod
    def EqualsValue(equalsToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.EqualsValueSyntax: ...
    @overload
    @staticmethod
    def EraseStatement(expressions: Syntax.System.Array[Syntax.ExpressionSyntax]) -> Syntax.EraseStatementSyntax: ...
    @overload
    @staticmethod
    def EraseStatement(expressions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.EraseStatementSyntax: ...
    @overload
    @staticmethod
    def EraseStatement(eraseKeyword: CodeAnalysis.SyntaxToken, expressions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.EraseStatementSyntax: ...
    @overload
    @staticmethod
    def ErrorStatement(errorNumber: Syntax.ExpressionSyntax) -> Syntax.ErrorStatementSyntax: ...
    @overload
    @staticmethod
    def ErrorStatement(errorKeyword: CodeAnalysis.SyntaxToken, errorNumber: Syntax.ExpressionSyntax) -> Syntax.ErrorStatementSyntax: ...
    @overload
    @staticmethod
    def EventBlock(eventStatement: Syntax.EventStatementSyntax, accessors: CodeAnalysis.SyntaxList) -> Syntax.EventBlockSyntax: ...
    @overload
    @staticmethod
    def EventBlock(eventStatement: Syntax.EventStatementSyntax, accessors: CodeAnalysis.SyntaxList, endEventStatement: Syntax.EndBlockStatementSyntax) -> Syntax.EventBlockSyntax: ...
    @overload
    @staticmethod
    def EventStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.EventStatementSyntax: ...
    @overload
    @staticmethod
    def EventStatement(identifier: str) -> Syntax.EventStatementSyntax: ...
    @overload
    @staticmethod
    def EventStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.EventStatementSyntax: ...
    @overload
    @staticmethod
    def EventStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, customKeyword: CodeAnalysis.SyntaxToken, eventKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.EventStatementSyntax: ...
    @overload
    @staticmethod
    def ExclusiveOrExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ExclusiveOrExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ExitDoStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitDoStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitForStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitForStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitFunctionStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitFunctionStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitOperatorStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitOperatorStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitPropertyStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitPropertyStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitSelectStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitSelectStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitStatement(kind: SyntaxKind, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitStatement(kind: SyntaxKind, exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitSubStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitSubStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitTryStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitTryStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitWhileStatement() -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExitWhileStatement(exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> Syntax.ExitStatementSyntax: ...
    @overload
    @staticmethod
    def ExponentiateAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def ExponentiateAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def ExponentiateExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ExponentiateExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ExpressionRangeVariable(expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionRangeVariableSyntax: ...
    @overload
    @staticmethod
    def ExpressionRangeVariable(nameEquals: Syntax.VariableNameEqualsSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionRangeVariableSyntax: ...
    @overload
    @staticmethod
    def ExpressionStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ExpressionStatementSyntax: ...
    @overload
    @staticmethod
    def ExternalChecksumDirectiveTrivia() -> Syntax.ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ExternalChecksumDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, externalChecksumKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, externalSource: CodeAnalysis.SyntaxToken, firstCommaToken: CodeAnalysis.SyntaxToken, guid: CodeAnalysis.SyntaxToken, secondCommaToken: CodeAnalysis.SyntaxToken, checksum: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ExternalSourceDirectiveTrivia() -> Syntax.ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ExternalSourceDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, externalSourceKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, externalSource: CodeAnalysis.SyntaxToken, commaToken: CodeAnalysis.SyntaxToken, lineStart: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def FalseLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(declarators: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(declarators: Syntax.System.Array[Syntax.VariableDeclaratorSyntax]) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FieldDeclaration(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declarators: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FieldDeclarationSyntax: ...
    @overload
    @staticmethod
    def FinallyBlock() -> Syntax.FinallyBlockSyntax: ...
    @overload
    @staticmethod
    def FinallyBlock(statements: CodeAnalysis.SyntaxList) -> Syntax.FinallyBlockSyntax: ...
    @overload
    @staticmethod
    def FinallyBlock(finallyStatement: Syntax.FinallyStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.FinallyBlockSyntax: ...
    @overload
    @staticmethod
    def FinallyStatement() -> Syntax.FinallyStatementSyntax: ...
    @overload
    @staticmethod
    def FinallyStatement(finallyKeyword: CodeAnalysis.SyntaxToken) -> Syntax.FinallyStatementSyntax: ...
    @overload
    @staticmethod
    def FloatingLiteralToken(text: str, typeSuffix: Syntax.TypeCharacter, value: float) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def FloatingLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, typeSuffix: Syntax.TypeCharacter, value: float, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ForBlock(forStatement: Syntax.ForStatementSyntax) -> Syntax.ForBlockSyntax: ...
    @overload
    @staticmethod
    def ForBlock(forStatement: Syntax.ForStatementSyntax, statements: CodeAnalysis.SyntaxList, nextStatement: Syntax.NextStatementSyntax) -> Syntax.ForBlockSyntax: ...
    @overload
    @staticmethod
    def ForEachBlock(forEachStatement: Syntax.ForEachStatementSyntax) -> Syntax.ForEachBlockSyntax: ...
    @overload
    @staticmethod
    def ForEachBlock(forEachStatement: Syntax.ForEachStatementSyntax, statements: CodeAnalysis.SyntaxList, nextStatement: Syntax.NextStatementSyntax) -> Syntax.ForEachBlockSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(controlVariable: VisualBasicSyntaxNode, expression: Syntax.ExpressionSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForEachStatement(forKeyword: CodeAnalysis.SyntaxToken, eachKeyword: CodeAnalysis.SyntaxToken, controlVariable: VisualBasicSyntaxNode, inKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ForEachStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(controlVariable: VisualBasicSyntaxNode, fromValue: Syntax.ExpressionSyntax, toValue: Syntax.ExpressionSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(controlVariable: VisualBasicSyntaxNode, fromValue: Syntax.ExpressionSyntax, toValue: Syntax.ExpressionSyntax, stepClause: Syntax.ForStepClauseSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStatement(forKeyword: CodeAnalysis.SyntaxToken, controlVariable: VisualBasicSyntaxNode, equalsToken: CodeAnalysis.SyntaxToken, fromValue: Syntax.ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, toValue: Syntax.ExpressionSyntax, stepClause: Syntax.ForStepClauseSyntax) -> Syntax.ForStatementSyntax: ...
    @overload
    @staticmethod
    def ForStepClause(stepValue: Syntax.ExpressionSyntax) -> Syntax.ForStepClauseSyntax: ...
    @overload
    @staticmethod
    def ForStepClause(stepKeyword: CodeAnalysis.SyntaxToken, stepValue: Syntax.ExpressionSyntax) -> Syntax.ForStepClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(variables: Syntax.System.Array[Syntax.CollectionRangeVariableSyntax]) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FromClause(fromKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.FromClauseSyntax: ...
    @overload
    @staticmethod
    def FunctionAggregation(functionName: CodeAnalysis.SyntaxToken) -> Syntax.FunctionAggregationSyntax: ...
    @overload
    @staticmethod
    def FunctionAggregation(functionName: str) -> Syntax.FunctionAggregationSyntax: ...
    @overload
    @staticmethod
    def FunctionAggregation(functionName: CodeAnalysis.SyntaxToken, argument: Syntax.ExpressionSyntax) -> Syntax.FunctionAggregationSyntax: ...
    @overload
    @staticmethod
    def FunctionAggregation(functionName: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, argument: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.FunctionAggregationSyntax: ...
    @overload
    @staticmethod
    def FunctionBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def FunctionBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def FunctionBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def FunctionLambdaHeader() -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def FunctionLambdaHeader(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def FunctionLambdaHeader(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def FunctionStatement(identifier: str) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def FunctionStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def FunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, handlesClause: Syntax.HandlesClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def FunctionStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, handlesClause: Syntax.HandlesClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def GenericName(identifier: str, typeArgumentList: Syntax.TypeArgumentListSyntax) -> Syntax.GenericNameSyntax: ...
    @overload
    @staticmethod
    def GenericName(identifier: CodeAnalysis.SyntaxToken, typeArgumentList: Syntax.TypeArgumentListSyntax) -> Syntax.GenericNameSyntax: ...
    @property
    def CarriageReturn(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def CarriageReturnLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticCarriageReturn(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticCarriageReturnLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticLineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticMarker(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticSpace(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def ElasticTab(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def LineFeed(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def Space(self) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def Tab(self) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def GetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def GetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def GetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def GetAccessorStatement() -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def GetAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def GetAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def GetStandaloneExpression(node: Syntax.ExpressionSyntax) -> Syntax.ExpressionSyntax: ...
    @overload
    @staticmethod
    def GetTypeExpression(type_: Syntax.TypeSyntax) -> Syntax.GetTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def GetTypeExpression(getTypeKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.GetTypeExpressionSyntax: ...
    @overload
    @staticmethod
    def GetXmlNamespaceExpression() -> Syntax.GetXmlNamespaceExpressionSyntax: ...
    @overload
    @staticmethod
    def GetXmlNamespaceExpression(getXmlNamespaceKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlPrefixNameSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.GetXmlNamespaceExpressionSyntax: ...
    @overload
    @staticmethod
    def GlobalName() -> Syntax.GlobalNameSyntax: ...
    @overload
    @staticmethod
    def GlobalName(globalKeyword: CodeAnalysis.SyntaxToken) -> Syntax.GlobalNameSyntax: ...
    @overload
    @staticmethod
    def GoToStatement(label: Syntax.LabelSyntax) -> Syntax.GoToStatementSyntax: ...
    @overload
    @staticmethod
    def GoToStatement(goToKeyword: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.GoToStatementSyntax: ...
    @overload
    @staticmethod
    def GreaterThanExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def GreaterThanExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def GroupAggregation() -> Syntax.GroupAggregationSyntax: ...
    @overload
    @staticmethod
    def GroupAggregation(groupKeyword: CodeAnalysis.SyntaxToken) -> Syntax.GroupAggregationSyntax: ...
    @overload
    @staticmethod
    def GroupByClause(keys: CodeAnalysis.SeparatedSyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupByClauseSyntax: ...
    @overload
    @staticmethod
    def GroupByClause(items: CodeAnalysis.SeparatedSyntaxList, keys: CodeAnalysis.SeparatedSyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupByClauseSyntax: ...
    @overload
    @staticmethod
    def GroupByClause(groupKeyword: CodeAnalysis.SyntaxToken, items: CodeAnalysis.SeparatedSyntaxList, byKeyword: CodeAnalysis.SyntaxToken, keys: CodeAnalysis.SeparatedSyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupByClauseSyntax: ...
    @overload
    @staticmethod
    def GroupJoinClause(joinedVariables: CodeAnalysis.SeparatedSyntaxList, joinConditions: CodeAnalysis.SeparatedSyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupJoinClauseSyntax: ...
    @overload
    @staticmethod
    def GroupJoinClause(joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, joinConditions: CodeAnalysis.SeparatedSyntaxList, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupJoinClauseSyntax: ...
    @overload
    @staticmethod
    def GroupJoinClause(groupKeyword: CodeAnalysis.SyntaxToken, joinKeyword: CodeAnalysis.SyntaxToken, joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, onKeyword: CodeAnalysis.SyntaxToken, joinConditions: CodeAnalysis.SeparatedSyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.GroupJoinClauseSyntax: ...
    @overload
    @staticmethod
    def HandlesClause(events: CodeAnalysis.SeparatedSyntaxList) -> Syntax.HandlesClauseSyntax: ...
    @overload
    @staticmethod
    def HandlesClause(events: Syntax.System.Array[Syntax.HandlesClauseItemSyntax]) -> Syntax.HandlesClauseSyntax: ...
    @overload
    @staticmethod
    def HandlesClause(handlesKeyword: CodeAnalysis.SyntaxToken, events: CodeAnalysis.SeparatedSyntaxList) -> Syntax.HandlesClauseSyntax: ...
    @overload
    @staticmethod
    def HandlesClauseItem(eventContainer: Syntax.EventContainerSyntax, eventMember: Syntax.IdentifierNameSyntax) -> Syntax.HandlesClauseItemSyntax: ...
    @overload
    @staticmethod
    def HandlesClauseItem(eventContainer: Syntax.EventContainerSyntax, dotToken: CodeAnalysis.SyntaxToken, eventMember: Syntax.IdentifierNameSyntax) -> Syntax.HandlesClauseItemSyntax: ...
    @overload
    @staticmethod
    def Identifier(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Identifier(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Identifier(text: str, isBracketed: bool, identifierText: str, typeCharacter: Syntax.TypeCharacter) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Identifier(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, isBracketed: bool, identifierText: str, typeCharacter: Syntax.TypeCharacter, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def IdentifierLabel(labelToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def IdentifierLabel(labelToken: str) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def IdentifierName(identifier: CodeAnalysis.SyntaxToken) -> Syntax.IdentifierNameSyntax: ...
    @overload
    @staticmethod
    def IdentifierName(identifier: str) -> Syntax.IdentifierNameSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(kind: SyntaxKind, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfDirectiveTrivia(kind: SyntaxKind, hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> Syntax.IfDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def IfStatement(condition: Syntax.ExpressionSyntax) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def IfStatement(ifKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> Syntax.IfStatementSyntax: ...
    @overload
    @staticmethod
    def ImplementsClause(interfaceMembers: Syntax.System.Array[Syntax.QualifiedNameSyntax]) -> Syntax.ImplementsClauseSyntax: ...
    @overload
    @staticmethod
    def ImplementsClause(interfaceMembers: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImplementsClauseSyntax: ...
    @overload
    @staticmethod
    def ImplementsClause(implementsKeyword: CodeAnalysis.SyntaxToken, interfaceMembers: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImplementsClauseSyntax: ...
    @overload
    @staticmethod
    def ImplementsStatement(types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImplementsStatementSyntax: ...
    @overload
    @staticmethod
    def ImplementsStatement(types: Syntax.System.Array[Syntax.TypeSyntax]) -> Syntax.ImplementsStatementSyntax: ...
    @overload
    @staticmethod
    def ImplementsStatement(implementsKeyword: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImplementsStatementSyntax: ...
    @overload
    @staticmethod
    def ImportAliasClause(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ImportAliasClauseSyntax: ...
    @overload
    @staticmethod
    def ImportAliasClause(identifier: str) -> Syntax.ImportAliasClauseSyntax: ...
    @overload
    @staticmethod
    def ImportAliasClause(identifier: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken) -> Syntax.ImportAliasClauseSyntax: ...
    @overload
    @staticmethod
    def ImportsStatement() -> Syntax.ImportsStatementSyntax: ...
    @overload
    @staticmethod
    def ImportsStatement(importsClauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImportsStatementSyntax: ...
    @overload
    @staticmethod
    def ImportsStatement(importsKeyword: CodeAnalysis.SyntaxToken, importsClauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ImportsStatementSyntax: ...
    @overload
    @staticmethod
    def IncompleteMember() -> Syntax.IncompleteMemberSyntax: ...
    @overload
    @staticmethod
    def IncompleteMember(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, missingIdentifier: CodeAnalysis.SyntaxToken) -> Syntax.IncompleteMemberSyntax: ...
    @overload
    @staticmethod
    def InferredFieldInitializer(expression: Syntax.ExpressionSyntax) -> Syntax.InferredFieldInitializerSyntax: ...
    @overload
    @staticmethod
    def InferredFieldInitializer(keyKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.InferredFieldInitializerSyntax: ...
    @overload
    @staticmethod
    def InheritsStatement(types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.InheritsStatementSyntax: ...
    @overload
    @staticmethod
    def InheritsStatement(types: Syntax.System.Array[Syntax.TypeSyntax]) -> Syntax.InheritsStatementSyntax: ...
    @overload
    @staticmethod
    def InheritsStatement(inheritsKeyword: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> Syntax.InheritsStatementSyntax: ...
    @overload
    @staticmethod
    def IntegerDivideAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def IntegerDivideAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def IntegerDivideExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def IntegerDivideExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def IntegerLiteralToken(text: str, base: Syntax.LiteralBase, typeSuffix: Syntax.TypeCharacter, value: System.UInt64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def IntegerLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, base: Syntax.LiteralBase, typeSuffix: Syntax.TypeCharacter, value: System.UInt64, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def InterfaceBlock(interfaceStatement: Syntax.InterfaceStatementSyntax) -> Syntax.InterfaceBlockSyntax: ...
    @overload
    @staticmethod
    def InterfaceBlock(interfaceStatement: Syntax.InterfaceStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.InterfaceBlockSyntax: ...
    @overload
    @staticmethod
    def InterfaceBlock(interfaceStatement: Syntax.InterfaceStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endInterfaceStatement: Syntax.EndBlockStatementSyntax) -> Syntax.InterfaceBlockSyntax: ...
    @overload
    @staticmethod
    def InterfaceStatement(identifier: str) -> Syntax.InterfaceStatementSyntax: ...
    @overload
    @staticmethod
    def InterfaceStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.InterfaceStatementSyntax: ...
    @overload
    @staticmethod
    def InterfaceStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.InterfaceStatementSyntax: ...
    @overload
    @staticmethod
    def InterfaceStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, interfaceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.InterfaceStatementSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(contents: CodeAnalysis.SyntaxList) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(contents: Syntax.System.Array[Syntax.InterpolatedStringContentSyntax]) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringExpression(dollarSignDoubleQuoteToken: CodeAnalysis.SyntaxToken, contents: CodeAnalysis.SyntaxList, doubleQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringExpressionSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringText() -> Syntax.InterpolatedStringTextSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringText(textToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolatedStringTextSyntax: ...
    @overload
    @staticmethod
    def InterpolatedStringTextToken(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def InterpolatedStringTextToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Interpolation(expression: Syntax.ExpressionSyntax) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def Interpolation(expression: Syntax.ExpressionSyntax, alignmentClause: Syntax.InterpolationAlignmentClauseSyntax) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def Interpolation(openBraceToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, alignmentClause: Syntax.InterpolationAlignmentClauseSyntax, formatClause: Syntax.InterpolationFormatClauseSyntax, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolationSyntax: ...
    @overload
    @staticmethod
    def InterpolationAlignmentClause(value: Syntax.ExpressionSyntax) -> Syntax.InterpolationAlignmentClauseSyntax: ...
    @overload
    @staticmethod
    def InterpolationAlignmentClause(commaToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.InterpolationAlignmentClauseSyntax: ...
    @overload
    @staticmethod
    def InterpolationFormatClause() -> Syntax.InterpolationFormatClauseSyntax: ...
    @overload
    @staticmethod
    def InterpolationFormatClause(colonToken: CodeAnalysis.SyntaxToken, formatStringToken: CodeAnalysis.SyntaxToken) -> Syntax.InterpolationFormatClauseSyntax: ...
    @overload
    @staticmethod
    def InvocationExpression() -> Syntax.InvocationExpressionSyntax: ...
    @overload
    @staticmethod
    def InvocationExpression(expression: Syntax.ExpressionSyntax) -> Syntax.InvocationExpressionSyntax: ...
    @overload
    @staticmethod
    def InvocationExpression(expression: Syntax.ExpressionSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.InvocationExpressionSyntax: ...
    @overload
    @staticmethod
    def IsExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def IsExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def IsNotExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def IsNotExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def JoinCondition(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.JoinConditionSyntax: ...
    @overload
    @staticmethod
    def JoinCondition(left: Syntax.ExpressionSyntax, equalsKeyword: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.JoinConditionSyntax: ...
    @overload
    @staticmethod
    def KeywordEventContainer(keyword: CodeAnalysis.SyntaxToken) -> Syntax.KeywordEventContainerSyntax: ...
    @overload
    @staticmethod
    def Label(kind: SyntaxKind, labelToken: str) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def Label(kind: SyntaxKind, labelToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def LabelStatement(labelToken: str) -> Syntax.LabelStatementSyntax: ...
    @overload
    @staticmethod
    def LabelStatement(labelToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelStatementSyntax: ...
    @overload
    @staticmethod
    def LabelStatement(labelToken: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelStatementSyntax: ...
    @overload
    @staticmethod
    def LambdaHeader(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def LambdaHeader(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def LeftShiftAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def LeftShiftAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def LeftShiftExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LeftShiftExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LessThanExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LessThanExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LessThanOrEqualExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LessThanOrEqualExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LetClause(variables: Syntax.System.Array[Syntax.ExpressionRangeVariableSyntax]) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LetClause(variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LetClause(letKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.LetClauseSyntax: ...
    @overload
    @staticmethod
    def LikeExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LikeExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def LineContinuationTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def List() -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def List(nodes: Generic.IEnumerable) -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def Literal(value: System.Int64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Char) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.UInt32) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Decimal) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.Single) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: System.UInt64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: float) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(value: int) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: float) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: int) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Decimal) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Int64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Single) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.UInt64) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.UInt32) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(text: str, value: System.Char) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.UInt64, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.UInt32, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Single, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: int, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Char, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: float, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Int64, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: System.Decimal, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Literal(leading: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def LiteralExpression(kind: SyntaxKind, token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def LocalDeclarationStatement(modifiers: CodeAnalysis.SyntaxTokenList, declarators: CodeAnalysis.SeparatedSyntaxList) -> Syntax.LocalDeclarationStatementSyntax: ...
    @overload
    @staticmethod
    def LoopStatement(kind: SyntaxKind) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopStatement(kind: SyntaxKind, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopStatement(kind: SyntaxKind, loopKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopUntilStatement() -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopUntilStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopUntilStatement(loopKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopWhileStatement() -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopWhileStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def LoopWhileStatement(loopKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def MeExpression() -> Syntax.MeExpressionSyntax: ...
    @overload
    @staticmethod
    def MeExpression(keyword: CodeAnalysis.SyntaxToken) -> Syntax.MeExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberAccessExpression(kind: SyntaxKind, operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def MemberAccessExpression(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def MethodBlock(kind: SyntaxKind, subOrFunctionStatement: Syntax.MethodStatementSyntax, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def MethodBlock(kind: SyntaxKind, subOrFunctionStatement: Syntax.MethodStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def MethodStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: str) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def MethodStatement(kind: SyntaxKind, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def MethodStatement(kind: SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, handlesClause: Syntax.HandlesClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def MidAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def MidAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def MidExpression(mid: str, argumentList: Syntax.ArgumentListSyntax) -> Syntax.MidExpressionSyntax: ...
    @overload
    @staticmethod
    def MidExpression(mid: CodeAnalysis.SyntaxToken, argumentList: Syntax.ArgumentListSyntax) -> Syntax.MidExpressionSyntax: ...
    @overload
    @staticmethod
    def ModifiedIdentifier(identifier: str) -> Syntax.ModifiedIdentifierSyntax: ...
    @overload
    @staticmethod
    def ModifiedIdentifier(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ModifiedIdentifierSyntax: ...
    @overload
    @staticmethod
    def ModifiedIdentifier(identifier: CodeAnalysis.SyntaxToken, arrayBounds: Syntax.ArgumentListSyntax) -> Syntax.ModifiedIdentifierSyntax: ...
    @overload
    @staticmethod
    def ModifiedIdentifier(identifier: CodeAnalysis.SyntaxToken, nullable: CodeAnalysis.SyntaxToken, arrayBounds: Syntax.ArgumentListSyntax, arrayRankSpecifiers: CodeAnalysis.SyntaxList) -> Syntax.ModifiedIdentifierSyntax: ...
    @overload
    @staticmethod
    def ModuleBlock(moduleStatement: Syntax.ModuleStatementSyntax) -> Syntax.ModuleBlockSyntax: ...
    @overload
    @staticmethod
    def ModuleBlock(moduleStatement: Syntax.ModuleStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.ModuleBlockSyntax: ...
    @overload
    @staticmethod
    def ModuleBlock(moduleStatement: Syntax.ModuleStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endModuleStatement: Syntax.EndBlockStatementSyntax) -> Syntax.ModuleBlockSyntax: ...
    @overload
    @staticmethod
    def ModuleStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.ModuleStatementSyntax: ...
    @overload
    @staticmethod
    def ModuleStatement(identifier: str) -> Syntax.ModuleStatementSyntax: ...
    @overload
    @staticmethod
    def ModuleStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.ModuleStatementSyntax: ...
    @overload
    @staticmethod
    def ModuleStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, moduleKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.ModuleStatementSyntax: ...
    @overload
    @staticmethod
    def ModuloExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def ModuloExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineFunctionLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineFunctionLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineIfBlock(ifStatement: Syntax.IfStatementSyntax) -> Syntax.MultiLineIfBlockSyntax: ...
    @overload
    @staticmethod
    def MultiLineIfBlock(ifStatement: Syntax.IfStatementSyntax, statements: CodeAnalysis.SyntaxList, elseIfBlocks: CodeAnalysis.SyntaxList, elseBlock: Syntax.ElseBlockSyntax) -> Syntax.MultiLineIfBlockSyntax: ...
    @overload
    @staticmethod
    def MultiLineIfBlock(ifStatement: Syntax.IfStatementSyntax, statements: CodeAnalysis.SyntaxList, elseIfBlocks: CodeAnalysis.SyntaxList, elseBlock: Syntax.ElseBlockSyntax, endIfStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineIfBlockSyntax: ...
    @overload
    @staticmethod
    def MultiLineLambdaExpression(kind: SyntaxKind, subOrFunctionHeader: Syntax.LambdaHeaderSyntax, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineLambdaExpression(kind: SyntaxKind, subOrFunctionHeader: Syntax.LambdaHeaderSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineSubLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiLineSubLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MultiLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiplyAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def MultiplyAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def MultiplyExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def MultiplyExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def MyBaseExpression() -> Syntax.MyBaseExpressionSyntax: ...
    @overload
    @staticmethod
    def MyBaseExpression(keyword: CodeAnalysis.SyntaxToken) -> Syntax.MyBaseExpressionSyntax: ...
    @overload
    @staticmethod
    def MyClassExpression() -> Syntax.MyClassExpressionSyntax: ...
    @overload
    @staticmethod
    def MyClassExpression(keyword: CodeAnalysis.SyntaxToken) -> Syntax.MyClassExpressionSyntax: ...
    @overload
    @staticmethod
    def NameColonEquals(name: Syntax.IdentifierNameSyntax) -> Syntax.NameColonEqualsSyntax: ...
    @overload
    @staticmethod
    def NameColonEquals(name: Syntax.IdentifierNameSyntax, colonEqualsToken: CodeAnalysis.SyntaxToken) -> Syntax.NameColonEqualsSyntax: ...
    @overload
    @staticmethod
    def NamedFieldInitializer(name: Syntax.IdentifierNameSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.NamedFieldInitializerSyntax: ...
    @overload
    @staticmethod
    def NamedFieldInitializer(keyKeyword: CodeAnalysis.SyntaxToken, dotToken: CodeAnalysis.SyntaxToken, name: Syntax.IdentifierNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.NamedFieldInitializerSyntax: ...
    @overload
    @staticmethod
    def NamedTupleElement(identifier: str) -> Syntax.NamedTupleElementSyntax: ...
    @overload
    @staticmethod
    def NamedTupleElement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.NamedTupleElementSyntax: ...
    @overload
    @staticmethod
    def NamedTupleElement(identifier: CodeAnalysis.SyntaxToken, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.NamedTupleElementSyntax: ...
    @overload
    @staticmethod
    def NameOfExpression(argument: Syntax.ExpressionSyntax) -> Syntax.NameOfExpressionSyntax: ...
    @overload
    @staticmethod
    def NameOfExpression(nameOfKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, argument: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.NameOfExpressionSyntax: ...
    @overload
    @staticmethod
    def NamespaceBlock(namespaceStatement: Syntax.NamespaceStatementSyntax) -> Syntax.NamespaceBlockSyntax: ...
    @overload
    @staticmethod
    def NamespaceBlock(namespaceStatement: Syntax.NamespaceStatementSyntax, members: CodeAnalysis.SyntaxList) -> Syntax.NamespaceBlockSyntax: ...
    @overload
    @staticmethod
    def NamespaceBlock(namespaceStatement: Syntax.NamespaceStatementSyntax, members: CodeAnalysis.SyntaxList, endNamespaceStatement: Syntax.EndBlockStatementSyntax) -> Syntax.NamespaceBlockSyntax: ...
    @overload
    @staticmethod
    def NamespaceStatement(name: Syntax.NameSyntax) -> Syntax.NamespaceStatementSyntax: ...
    @overload
    @staticmethod
    def NamespaceStatement(namespaceKeyword: CodeAnalysis.SyntaxToken, name: Syntax.NameSyntax) -> Syntax.NamespaceStatementSyntax: ...
    @overload
    @staticmethod
    def NewConstraint(constraintKeyword: CodeAnalysis.SyntaxToken) -> Syntax.SpecialConstraintSyntax: ...
    @overload
    @staticmethod
    def NextLabel() -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def NextLabel(labelToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def NextStatement() -> Syntax.NextStatementSyntax: ...
    @overload
    @staticmethod
    def NextStatement(controlVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.NextStatementSyntax: ...
    @overload
    @staticmethod
    def NextStatement(nextKeyword: CodeAnalysis.SyntaxToken, controlVariables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.NextStatementSyntax: ...
    @overload
    @staticmethod
    def NodeOrTokenList() -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NodeOrTokenList(nodesAndTokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxNodeOrToken]) -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NodeOrTokenList(nodesAndTokens: Generic.IEnumerable) -> CodeAnalysis.SyntaxNodeOrTokenList: ...
    @overload
    @staticmethod
    def NotEqualsExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def NotEqualsExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def NotExpression(operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def NotExpression(operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def NothingLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def NullableType(elementType: Syntax.TypeSyntax) -> Syntax.NullableTypeSyntax: ...
    @overload
    @staticmethod
    def NullableType(elementType: Syntax.TypeSyntax, questionMarkToken: CodeAnalysis.SyntaxToken) -> Syntax.NullableTypeSyntax: ...
    @overload
    @staticmethod
    def NumericLabel() -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def NumericLabel(labelToken: CodeAnalysis.SyntaxToken) -> Syntax.LabelSyntax: ...
    @overload
    @staticmethod
    def NumericLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectCollectionInitializer(initializer: Syntax.CollectionInitializerSyntax) -> Syntax.ObjectCollectionInitializerSyntax: ...
    @overload
    @staticmethod
    def ObjectCollectionInitializer(fromKeyword: CodeAnalysis.SyntaxToken, initializer: Syntax.CollectionInitializerSyntax) -> Syntax.ObjectCollectionInitializerSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(type_: Syntax.TypeSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.ObjectCreationInitializerSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectCreationExpression(newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax, argumentList: Syntax.ArgumentListSyntax, initializer: Syntax.ObjectCreationInitializerSyntax) -> Syntax.ObjectCreationExpressionSyntax: ...
    @overload
    @staticmethod
    def ObjectMemberInitializer(initializers: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ObjectMemberInitializerSyntax: ...
    @overload
    @staticmethod
    def ObjectMemberInitializer(initializers: Syntax.System.Array[Syntax.FieldInitializerSyntax]) -> Syntax.ObjectMemberInitializerSyntax: ...
    @overload
    @staticmethod
    def ObjectMemberInitializer(withKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.ObjectMemberInitializerSyntax: ...
    @overload
    @staticmethod
    def OmittedArgument() -> Syntax.OmittedArgumentSyntax: ...
    @overload
    @staticmethod
    def OmittedArgument(empty: CodeAnalysis.SyntaxToken) -> Syntax.OmittedArgumentSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToLabelStatement(label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToLabelStatement(onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, goToKeyword: CodeAnalysis.SyntaxToken, minus: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToMinusOneStatement(label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToMinusOneStatement(onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, goToKeyword: CodeAnalysis.SyntaxToken, minus: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToStatement(kind: SyntaxKind, label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToStatement(kind: SyntaxKind, onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, goToKeyword: CodeAnalysis.SyntaxToken, minus: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToZeroStatement(label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorGoToZeroStatement(onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, goToKeyword: CodeAnalysis.SyntaxToken, minus: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.OnErrorGoToStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorResumeNextStatement() -> Syntax.OnErrorResumeNextStatementSyntax: ...
    @overload
    @staticmethod
    def OnErrorResumeNextStatement(onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, resumeKeyword: CodeAnalysis.SyntaxToken, nextKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OnErrorResumeNextStatementSyntax: ...
    @overload
    @staticmethod
    def OperatorBlock(operatorStatement: Syntax.OperatorStatementSyntax) -> Syntax.OperatorBlockSyntax: ...
    @overload
    @staticmethod
    def OperatorBlock(operatorStatement: Syntax.OperatorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.OperatorBlockSyntax: ...
    @overload
    @staticmethod
    def OperatorBlock(operatorStatement: Syntax.OperatorStatementSyntax, statements: CodeAnalysis.SyntaxList, endOperatorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.OperatorBlockSyntax: ...
    @overload
    @staticmethod
    def OperatorStatement(operatorToken: CodeAnalysis.SyntaxToken) -> Syntax.OperatorStatementSyntax: ...
    @overload
    @staticmethod
    def OperatorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.OperatorStatementSyntax: ...
    @overload
    @staticmethod
    def OperatorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.OperatorStatementSyntax: ...
    @overload
    @staticmethod
    def OptionStatement(nameKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OptionStatementSyntax: ...
    @overload
    @staticmethod
    def OptionStatement(nameKeyword: CodeAnalysis.SyntaxToken, valueKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OptionStatementSyntax: ...
    @overload
    @staticmethod
    def OptionStatement(optionKeyword: CodeAnalysis.SyntaxToken, nameKeyword: CodeAnalysis.SyntaxToken, valueKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OptionStatementSyntax: ...
    @overload
    @staticmethod
    def OrderByClause(orderings: CodeAnalysis.SeparatedSyntaxList) -> Syntax.OrderByClauseSyntax: ...
    @overload
    @staticmethod
    def OrderByClause(orderings: Syntax.System.Array[Syntax.OrderingSyntax]) -> Syntax.OrderByClauseSyntax: ...
    @overload
    @staticmethod
    def OrderByClause(orderKeyword: CodeAnalysis.SyntaxToken, byKeyword: CodeAnalysis.SyntaxToken, orderings: CodeAnalysis.SeparatedSyntaxList) -> Syntax.OrderByClauseSyntax: ...
    @overload
    @staticmethod
    def Ordering(kind: SyntaxKind, expression: Syntax.ExpressionSyntax) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def Ordering(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> Syntax.OrderingSyntax: ...
    @overload
    @staticmethod
    def OrElseExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def OrElseExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def OrExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def OrExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def Parameter(identifier: Syntax.ModifiedIdentifierSyntax) -> Syntax.ParameterSyntax: ...
    @overload
    @staticmethod
    def Parameter(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: Syntax.ModifiedIdentifierSyntax, asClause: Syntax.SimpleAsClauseSyntax, default: Syntax.EqualsValueSyntax) -> Syntax.ParameterSyntax: ...
    @overload
    @staticmethod
    def ParameterList() -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParameterList(openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedExpression(expression: Syntax.ExpressionSyntax) -> Syntax.ParenthesizedExpressionSyntax: ...
    @overload
    @staticmethod
    def ParenthesizedExpression(openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.ParenthesizedExpressionSyntax: ...
    @overload
    @staticmethod
    def ParseArgumentList(text: str, offset: int, consumeFullText: bool) -> Syntax.ArgumentListSyntax: ...
    @overload
    @staticmethod
    def ParseCompilationUnit(text: str, offset: int, options: VisualBasicParseOptions) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def ParseExecutableStatement(text: str, offset: int, consumeFullText: bool) -> Syntax.StatementSyntax: ...
    @overload
    @staticmethod
    def ParseExpression(text: str, offset: int, consumeFullText: bool) -> Syntax.ExpressionSyntax: ...
    @overload
    @staticmethod
    def ParseLeadingTrivia(text: str, offset: int) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ParseName(text: str, offset: int, consumeFullText: bool) -> Syntax.NameSyntax: ...
    @overload
    @staticmethod
    def ParseParameterList(text: str, offset: int, consumeFullText: bool) -> Syntax.ParameterListSyntax: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: Text.SourceText, options: CodeAnalysis.ParseOptions, path: str, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: str, options: CodeAnalysis.ParseOptions, path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: Text.SourceText, options: CodeAnalysis.ParseOptions, path: str, diagnosticOptions: Immutable.ImmutableDictionary, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseSyntaxTree(text: str, options: CodeAnalysis.ParseOptions, path: str, encoding: Text.Encoding, diagnosticOptions: Immutable.ImmutableDictionary, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseToken(text: str, offset: int, startStatement: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ParseTokens(text: str, offset: int, initialTokenPosition: int, options: VisualBasicParseOptions) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ParseTrailingTrivia(text: str, offset: int) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ParseTypeName(text: str, offset: int, consumeFullText: bool) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def ParseTypeName(text: str, offset: int, options: CodeAnalysis.ParseOptions, consumeFullText: bool) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def PartitionClause(kind: SyntaxKind, skipOrTakeKeyword: CodeAnalysis.SyntaxToken, count: Syntax.ExpressionSyntax) -> Syntax.PartitionClauseSyntax: ...
    @overload
    @staticmethod
    def PartitionWhileClause(kind: SyntaxKind, skipOrTakeKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def PartitionWhileClause(kind: SyntaxKind, skipOrTakeKeyword: CodeAnalysis.SyntaxToken, whileKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def PredefinedCastExpression(keyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.PredefinedCastExpressionSyntax: ...
    @overload
    @staticmethod
    def PredefinedCastExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.PredefinedCastExpressionSyntax: ...
    @overload
    @staticmethod
    def PredefinedType(keyword: CodeAnalysis.SyntaxToken) -> Syntax.PredefinedTypeSyntax: ...
    @overload
    @staticmethod
    def PrintStatement(expression: Syntax.ExpressionSyntax) -> Syntax.PrintStatementSyntax: ...
    @overload
    @staticmethod
    def PrintStatement(questionToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.PrintStatementSyntax: ...
    @overload
    @staticmethod
    def PropertyBlock(propertyStatement: Syntax.PropertyStatementSyntax, accessors: CodeAnalysis.SyntaxList) -> Syntax.PropertyBlockSyntax: ...
    @overload
    @staticmethod
    def PropertyBlock(propertyStatement: Syntax.PropertyStatementSyntax, accessors: CodeAnalysis.SyntaxList, endPropertyStatement: Syntax.EndBlockStatementSyntax) -> Syntax.PropertyBlockSyntax: ...
    @overload
    @staticmethod
    def PropertyStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.PropertyStatementSyntax: ...
    @overload
    @staticmethod
    def PropertyStatement(identifier: str) -> Syntax.PropertyStatementSyntax: ...
    @overload
    @staticmethod
    def PropertyStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.AsClauseSyntax, initializer: Syntax.EqualsValueSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.PropertyStatementSyntax: ...
    @overload
    @staticmethod
    def PropertyStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, propertyKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.AsClauseSyntax, initializer: Syntax.EqualsValueSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.PropertyStatementSyntax: ...
    @overload
    @staticmethod
    def QualifiedCrefOperatorReference(left: Syntax.NameSyntax, right: Syntax.CrefOperatorReferenceSyntax) -> Syntax.QualifiedCrefOperatorReferenceSyntax: ...
    @overload
    @staticmethod
    def QualifiedCrefOperatorReference(left: Syntax.NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: Syntax.CrefOperatorReferenceSyntax) -> Syntax.QualifiedCrefOperatorReferenceSyntax: ...
    @overload
    @staticmethod
    def QualifiedName(left: Syntax.NameSyntax, right: Syntax.SimpleNameSyntax) -> Syntax.QualifiedNameSyntax: ...
    @overload
    @staticmethod
    def QualifiedName(left: Syntax.NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: Syntax.SimpleNameSyntax) -> Syntax.QualifiedNameSyntax: ...
    @overload
    @staticmethod
    def QueryExpression(clauses: CodeAnalysis.SyntaxList) -> Syntax.QueryExpressionSyntax: ...
    @overload
    @staticmethod
    def QueryExpression(clauses: Syntax.System.Array[Syntax.QueryClauseSyntax]) -> Syntax.QueryExpressionSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorStatement() -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RaiseEventAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RaiseEventStatement(name: Syntax.IdentifierNameSyntax) -> Syntax.RaiseEventStatementSyntax: ...
    @overload
    @staticmethod
    def RaiseEventStatement(name: Syntax.IdentifierNameSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.RaiseEventStatementSyntax: ...
    @overload
    @staticmethod
    def RaiseEventStatement(raiseEventKeyword: CodeAnalysis.SyntaxToken, name: Syntax.IdentifierNameSyntax, argumentList: Syntax.ArgumentListSyntax) -> Syntax.RaiseEventStatementSyntax: ...
    @overload
    @staticmethod
    def RangeArgument(lowerBound: Syntax.ExpressionSyntax, upperBound: Syntax.ExpressionSyntax) -> Syntax.RangeArgumentSyntax: ...
    @overload
    @staticmethod
    def RangeArgument(lowerBound: Syntax.ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, upperBound: Syntax.ExpressionSyntax) -> Syntax.RangeArgumentSyntax: ...
    @overload
    @staticmethod
    def RangeCaseClause(lowerBound: Syntax.ExpressionSyntax, upperBound: Syntax.ExpressionSyntax) -> Syntax.RangeCaseClauseSyntax: ...
    @overload
    @staticmethod
    def RangeCaseClause(lowerBound: Syntax.ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, upperBound: Syntax.ExpressionSyntax) -> Syntax.RangeCaseClauseSyntax: ...
    @overload
    @staticmethod
    def RedimClause(expression: Syntax.ExpressionSyntax, arrayBounds: Syntax.ArgumentListSyntax) -> Syntax.RedimClauseSyntax: ...
    @overload
    @staticmethod
    def ReDimPreserveStatement(clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimPreserveStatement(clauses: Syntax.System.Array[Syntax.RedimClauseSyntax]) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimPreserveStatement(reDimKeyword: CodeAnalysis.SyntaxToken, preserveKeyword: CodeAnalysis.SyntaxToken, clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(clauses: Syntax.System.Array[Syntax.RedimClauseSyntax]) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(kind: SyntaxKind, clauses: Syntax.System.Array[Syntax.RedimClauseSyntax]) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(kind: SyntaxKind, clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(reDimKeyword: CodeAnalysis.SyntaxToken, preserveKeyword: CodeAnalysis.SyntaxToken, clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReDimStatement(kind: SyntaxKind, reDimKeyword: CodeAnalysis.SyntaxToken, preserveKeyword: CodeAnalysis.SyntaxToken, clauses: CodeAnalysis.SeparatedSyntaxList) -> Syntax.ReDimStatementSyntax: ...
    @overload
    @staticmethod
    def ReferenceDirectiveTrivia() -> Syntax.ReferenceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def ReferenceDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, referenceKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken) -> Syntax.ReferenceDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RegionDirectiveTrivia() -> Syntax.RegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RegionDirectiveTrivia(hashToken: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken) -> Syntax.RegionDirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def RelationalCaseClause(kind: SyntaxKind, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def RelationalCaseClause(kind: SyntaxKind, isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: Syntax.ExpressionSyntax) -> Syntax.RelationalCaseClauseSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorStatement() -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerStatement(eventExpression: Syntax.ExpressionSyntax, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def RemoveHandlerStatement(addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken, eventExpression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, delegateExpression: Syntax.ExpressionSyntax) -> Syntax.AddRemoveHandlerStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeLabelStatement() -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeLabelStatement(label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeLabelStatement(resumeKeyword: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeNextStatement() -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeNextStatement(label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeNextStatement(resumeKeyword: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement() -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement(kind: SyntaxKind) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement(label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement(kind: SyntaxKind, label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement(resumeKeyword: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ResumeStatement(kind: SyntaxKind, resumeKeyword: CodeAnalysis.SyntaxToken, label: Syntax.LabelSyntax) -> Syntax.ResumeStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement() -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def ReturnStatement(returnKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ReturnStatementSyntax: ...
    @overload
    @staticmethod
    def RightShiftAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def RightShiftAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def RightShiftExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def RightShiftExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def SelectBlock(selectStatement: Syntax.SelectStatementSyntax) -> Syntax.SelectBlockSyntax: ...
    @overload
    @staticmethod
    def SelectBlock(selectStatement: Syntax.SelectStatementSyntax, caseBlocks: CodeAnalysis.SyntaxList) -> Syntax.SelectBlockSyntax: ...
    @overload
    @staticmethod
    def SelectBlock(selectStatement: Syntax.SelectStatementSyntax, caseBlocks: CodeAnalysis.SyntaxList, endSelectStatement: Syntax.EndBlockStatementSyntax) -> Syntax.SelectBlockSyntax: ...
    @overload
    @staticmethod
    def SelectClause(variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SelectClauseSyntax: ...
    @overload
    @staticmethod
    def SelectClause(variables: Syntax.System.Array[Syntax.ExpressionRangeVariableSyntax]) -> Syntax.SelectClauseSyntax: ...
    @overload
    @staticmethod
    def SelectClause(selectKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SelectClauseSyntax: ...
    @overload
    @staticmethod
    def SelectStatement(expression: Syntax.ExpressionSyntax) -> Syntax.SelectStatementSyntax: ...
    @overload
    @staticmethod
    def SelectStatement(selectKeyword: CodeAnalysis.SyntaxToken, caseKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.SelectStatementSyntax: ...
    @overload
    @staticmethod
    def SeparatedList() -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodesAndTokens: CodeAnalysis.SyntaxNodeOrTokenList) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodesAndTokens: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodes: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SeparatedList(nodes: Generic.IEnumerable, separators: Generic.IEnumerable) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def SetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def SetAccessorBlock(accessorStatement: Syntax.AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: Syntax.EndBlockStatementSyntax) -> Syntax.AccessorBlockSyntax: ...
    @overload
    @staticmethod
    def SetAccessorStatement() -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def SetAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def SetAccessorStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.AccessorStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleArgument(expression: Syntax.ExpressionSyntax) -> Syntax.SimpleArgumentSyntax: ...
    @overload
    @staticmethod
    def SimpleArgument(nameColonEquals: Syntax.NameColonEqualsSyntax, expression: Syntax.ExpressionSyntax) -> Syntax.SimpleArgumentSyntax: ...
    @overload
    @staticmethod
    def SimpleAsClause(type_: Syntax.TypeSyntax) -> Syntax.SimpleAsClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleAsClause(attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax) -> Syntax.SimpleAsClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleAsClause(asKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: Syntax.TypeSyntax) -> Syntax.SimpleAsClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleCaseClause(value: Syntax.ExpressionSyntax) -> Syntax.SimpleCaseClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleDoLoopBlock(doStatement: Syntax.DoStatementSyntax, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def SimpleDoLoopBlock(doStatement: Syntax.DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: Syntax.LoopStatementSyntax) -> Syntax.DoLoopBlockSyntax: ...
    @overload
    @staticmethod
    def SimpleDoStatement() -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleDoStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleDoStatement(doKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.DoStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleImportsClause(name: Syntax.NameSyntax) -> Syntax.SimpleImportsClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleImportsClause(alias: Syntax.ImportAliasClauseSyntax, name: Syntax.NameSyntax) -> Syntax.SimpleImportsClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleJoinClause(joinedVariables: CodeAnalysis.SeparatedSyntaxList, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SimpleJoinClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleJoinClause(joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SimpleJoinClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleJoinClause(joinKeyword: CodeAnalysis.SyntaxToken, joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, onKeyword: CodeAnalysis.SyntaxToken, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> Syntax.SimpleJoinClauseSyntax: ...
    @overload
    @staticmethod
    def SimpleLoopStatement() -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleLoopStatement(whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleLoopStatement(loopKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: Syntax.WhileOrUntilClauseSyntax) -> Syntax.LoopStatementSyntax: ...
    @overload
    @staticmethod
    def SimpleMemberAccessExpression(name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleMemberAccessExpression(expression: Syntax.ExpressionSyntax, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def SimpleMemberAccessExpression(expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: Syntax.SimpleNameSyntax) -> Syntax.MemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def SingleLineElseClause() -> Syntax.SingleLineElseClauseSyntax: ...
    @overload
    @staticmethod
    def SingleLineElseClause(statements: CodeAnalysis.SyntaxList) -> Syntax.SingleLineElseClauseSyntax: ...
    @overload
    @staticmethod
    def SingleLineElseClause(elseKeyword: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList) -> Syntax.SingleLineElseClauseSyntax: ...
    @overload
    @staticmethod
    def SingleLineFunctionLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, body: VisualBasicSyntaxNode) -> Syntax.SingleLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SingleLineIfStatement(condition: Syntax.ExpressionSyntax) -> Syntax.SingleLineIfStatementSyntax: ...
    @overload
    @staticmethod
    def SingleLineIfStatement(condition: Syntax.ExpressionSyntax, statements: CodeAnalysis.SyntaxList, elseClause: Syntax.SingleLineElseClauseSyntax) -> Syntax.SingleLineIfStatementSyntax: ...
    @overload
    @staticmethod
    def SingleLineIfStatement(ifKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, elseClause: Syntax.SingleLineElseClauseSyntax) -> Syntax.SingleLineIfStatementSyntax: ...
    @overload
    @staticmethod
    def SingleLineLambdaExpression(kind: SyntaxKind, subOrFunctionHeader: Syntax.LambdaHeaderSyntax, body: VisualBasicSyntaxNode) -> Syntax.SingleLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SingleLineSubLambdaExpression(subOrFunctionHeader: Syntax.LambdaHeaderSyntax, body: VisualBasicSyntaxNode) -> Syntax.SingleLineLambdaExpressionSyntax: ...
    @overload
    @staticmethod
    def SingletonList(node: TNode) -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def SingletonSeparatedList(node: TNode) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    @staticmethod
    def SkipClause(count: Syntax.ExpressionSyntax) -> Syntax.PartitionClauseSyntax: ...
    @overload
    @staticmethod
    def SkipClause(skipOrTakeKeyword: CodeAnalysis.SyntaxToken, count: Syntax.ExpressionSyntax) -> Syntax.PartitionClauseSyntax: ...
    @overload
    @staticmethod
    def SkippedTokensTrivia() -> Syntax.SkippedTokensTriviaSyntax: ...
    @overload
    @staticmethod
    def SkippedTokensTrivia(tokens: CodeAnalysis.SyntaxTokenList) -> Syntax.SkippedTokensTriviaSyntax: ...
    @overload
    @staticmethod
    def SkipWhileClause(condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def SkipWhileClause(skipOrTakeKeyword: CodeAnalysis.SyntaxToken, whileKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def SpecialConstraint(kind: SyntaxKind, constraintKeyword: CodeAnalysis.SyntaxToken) -> Syntax.SpecialConstraintSyntax: ...
    @overload
    @staticmethod
    def StopOrEndStatement(kind: SyntaxKind, stopOrEndKeyword: CodeAnalysis.SyntaxToken) -> Syntax.StopOrEndStatementSyntax: ...
    @overload
    @staticmethod
    def StopStatement(stopOrEndKeyword: CodeAnalysis.SyntaxToken) -> Syntax.StopOrEndStatementSyntax: ...
    @overload
    @staticmethod
    def StringLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def StringLiteralToken(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def StringLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def StructureBlock(structureStatement: Syntax.StructureStatementSyntax) -> Syntax.StructureBlockSyntax: ...
    @overload
    @staticmethod
    def StructureBlock(structureStatement: Syntax.StructureStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList) -> Syntax.StructureBlockSyntax: ...
    @overload
    @staticmethod
    def StructureBlock(structureStatement: Syntax.StructureStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endStructureStatement: Syntax.EndBlockStatementSyntax) -> Syntax.StructureBlockSyntax: ...
    @overload
    @staticmethod
    def StructureConstraint(constraintKeyword: CodeAnalysis.SyntaxToken) -> Syntax.SpecialConstraintSyntax: ...
    @overload
    @staticmethod
    def StructureStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.StructureStatementSyntax: ...
    @overload
    @staticmethod
    def StructureStatement(identifier: str) -> Syntax.StructureStatementSyntax: ...
    @overload
    @staticmethod
    def StructureStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.StructureStatementSyntax: ...
    @overload
    @staticmethod
    def StructureStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, structureKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.StructureStatementSyntax: ...
    @overload
    @staticmethod
    def SubBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def SubBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def SubBlock(subOrFunctionStatement: Syntax.MethodStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: Syntax.EndBlockStatementSyntax) -> Syntax.MethodBlockSyntax: ...
    @overload
    @staticmethod
    def SubLambdaHeader() -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def SubLambdaHeader(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def SubLambdaHeader(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.LambdaHeaderSyntax: ...
    @overload
    @staticmethod
    def SubNewStatement() -> Syntax.SubNewStatementSyntax: ...
    @overload
    @staticmethod
    def SubNewStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, parameterList: Syntax.ParameterListSyntax) -> Syntax.SubNewStatementSyntax: ...
    @overload
    @staticmethod
    def SubNewStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subKeyword: CodeAnalysis.SyntaxToken, newKeyword: CodeAnalysis.SyntaxToken, parameterList: Syntax.ParameterListSyntax) -> Syntax.SubNewStatementSyntax: ...
    @overload
    @staticmethod
    def SubStatement(identifier: CodeAnalysis.SyntaxToken) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def SubStatement(identifier: str) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def SubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, handlesClause: Syntax.HandlesClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def SubStatement(attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax, parameterList: Syntax.ParameterListSyntax, asClause: Syntax.SimpleAsClauseSyntax, handlesClause: Syntax.HandlesClauseSyntax, implementsClause: Syntax.ImplementsClauseSyntax) -> Syntax.MethodStatementSyntax: ...
    @overload
    @staticmethod
    def SubtractAssignmentStatement(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def SubtractAssignmentStatement(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.AssignmentStatementSyntax: ...
    @overload
    @staticmethod
    def SubtractExpression(left: Syntax.ExpressionSyntax, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def SubtractExpression(left: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: Syntax.ExpressionSyntax) -> Syntax.BinaryExpressionSyntax: ...
    @overload
    @staticmethod
    def SyncLockBlock(syncLockStatement: Syntax.SyncLockStatementSyntax) -> Syntax.SyncLockBlockSyntax: ...
    @overload
    @staticmethod
    def SyncLockBlock(syncLockStatement: Syntax.SyncLockStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.SyncLockBlockSyntax: ...
    @overload
    @staticmethod
    def SyncLockBlock(syncLockStatement: Syntax.SyncLockStatementSyntax, statements: CodeAnalysis.SyntaxList, endSyncLockStatement: Syntax.EndBlockStatementSyntax) -> Syntax.SyncLockBlockSyntax: ...
    @overload
    @staticmethod
    def SyncLockStatement(expression: Syntax.ExpressionSyntax) -> Syntax.SyncLockStatementSyntax: ...
    @overload
    @staticmethod
    def SyncLockStatement(syncLockKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.SyncLockStatementSyntax: ...
    @overload
    @staticmethod
    def SyntaxTree(root: CodeAnalysis.SyntaxNode, options: CodeAnalysis.ParseOptions, path: str, encoding: Text.Encoding) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def SyntaxTrivia(kind: SyntaxKind, text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def TakeClause(count: Syntax.ExpressionSyntax) -> Syntax.PartitionClauseSyntax: ...
    @overload
    @staticmethod
    def TakeClause(skipOrTakeKeyword: CodeAnalysis.SyntaxToken, count: Syntax.ExpressionSyntax) -> Syntax.PartitionClauseSyntax: ...
    @overload
    @staticmethod
    def TakeWhileClause(condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def TakeWhileClause(skipOrTakeKeyword: CodeAnalysis.SyntaxToken, whileKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.PartitionWhileClauseSyntax: ...
    @overload
    @staticmethod
    def TernaryConditionalExpression(condition: Syntax.ExpressionSyntax, whenTrue: Syntax.ExpressionSyntax, whenFalse: Syntax.ExpressionSyntax) -> Syntax.TernaryConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def TernaryConditionalExpression(ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax, firstCommaToken: CodeAnalysis.SyntaxToken, whenTrue: Syntax.ExpressionSyntax, secondCommaToken: CodeAnalysis.SyntaxToken, whenFalse: Syntax.ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TernaryConditionalExpressionSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement() -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(expression: Syntax.ExpressionSyntax) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def ThrowStatement(throwKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.ThrowStatementSyntax: ...
    @overload
    @staticmethod
    def Token(kind: SyntaxKind, text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Token(leading: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Token(kind: SyntaxKind, trailing: CodeAnalysis.SyntaxTriviaList, text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def Token(leading: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, trailing: CodeAnalysis.SyntaxTriviaList, text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def TokenList() -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(tokens: Generic.IEnumerable) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def TokenList(tokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def Trivia(node: Syntax.StructuredTriviaSyntax) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def TriviaList() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivias: Generic.IEnumerable) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TriviaList(trivias: CodeAnalysis.System.Array[CodeAnalysis.SyntaxTrivia]) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TrueLiteralExpression(token: CodeAnalysis.SyntaxToken) -> Syntax.LiteralExpressionSyntax: ...
    @overload
    @staticmethod
    def TryBlock() -> Syntax.TryBlockSyntax: ...
    @overload
    @staticmethod
    def TryBlock(statements: CodeAnalysis.SyntaxList, catchBlocks: CodeAnalysis.SyntaxList, finallyBlock: Syntax.FinallyBlockSyntax) -> Syntax.TryBlockSyntax: ...
    @overload
    @staticmethod
    def TryBlock(tryStatement: Syntax.TryStatementSyntax, statements: CodeAnalysis.SyntaxList, catchBlocks: CodeAnalysis.SyntaxList, finallyBlock: Syntax.FinallyBlockSyntax, endTryStatement: Syntax.EndBlockStatementSyntax) -> Syntax.TryBlockSyntax: ...
    @overload
    @staticmethod
    def TryCastExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.TryCastExpressionSyntax: ...
    @overload
    @staticmethod
    def TryCastExpression(keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TryCastExpressionSyntax: ...
    @overload
    @staticmethod
    def TryStatement() -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TryStatement(tryKeyword: CodeAnalysis.SyntaxToken) -> Syntax.TryStatementSyntax: ...
    @overload
    @staticmethod
    def TupleExpression(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TupleExpressionSyntax: ...
    @overload
    @staticmethod
    def TupleExpression(arguments: Syntax.System.Array[Syntax.SimpleArgumentSyntax]) -> Syntax.TupleExpressionSyntax: ...
    @overload
    @staticmethod
    def TupleExpression(openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TupleExpressionSyntax: ...
    @overload
    @staticmethod
    def TupleType(elements: Syntax.System.Array[Syntax.TupleElementSyntax]) -> Syntax.TupleTypeSyntax: ...
    @overload
    @staticmethod
    def TupleType(elements: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TupleTypeSyntax: ...
    @overload
    @staticmethod
    def TupleType(openParenToken: CodeAnalysis.SyntaxToken, elements: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TupleTypeSyntax: ...
    @overload
    @staticmethod
    def TypeArgumentList(arguments: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeArgumentListSyntax: ...
    @overload
    @staticmethod
    def TypeArgumentList(arguments: Syntax.System.Array[Syntax.TypeSyntax]) -> Syntax.TypeArgumentListSyntax: ...
    @overload
    @staticmethod
    def TypeArgumentList(openParenToken: CodeAnalysis.SyntaxToken, ofKeyword: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeArgumentListSyntax: ...
    @overload
    @staticmethod
    def TypeBlock(blockKind: SyntaxKind, begin: Syntax.TypeStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, end: Syntax.EndBlockStatementSyntax) -> Syntax.TypeBlockSyntax: ...
    @overload
    @staticmethod
    def TypeConstraint(type_: Syntax.TypeSyntax) -> Syntax.TypeConstraintSyntax: ...
    @overload
    @staticmethod
    def TypedTupleElement(type_: Syntax.TypeSyntax) -> Syntax.TypedTupleElementSyntax: ...
    @overload
    @staticmethod
    def TypeOfExpression(kind: SyntaxKind, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfExpression(kind: SyntaxKind, typeOfKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfIsExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfIsExpression(typeOfKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfIsNotExpression(expression: Syntax.ExpressionSyntax, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeOfIsNotExpression(typeOfKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, type_: Syntax.TypeSyntax) -> Syntax.TypeOfExpressionSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(identifier: str) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(identifier: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameter(varianceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterConstraintClause: Syntax.TypeParameterConstraintClauseSyntax) -> Syntax.TypeParameterSyntax: ...
    @overload
    @staticmethod
    def TypeParameterList(parameters: Syntax.System.Array[Syntax.TypeParameterSyntax]) -> Syntax.TypeParameterListSyntax: ...
    @overload
    @staticmethod
    def TypeParameterList(parameters: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeParameterListSyntax: ...
    @overload
    @staticmethod
    def TypeParameterList(openParenToken: CodeAnalysis.SyntaxToken, ofKeyword: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterListSyntax: ...
    @overload
    @staticmethod
    def TypeParameterMultipleConstraintClause(constraints: CodeAnalysis.SeparatedSyntaxList) -> Syntax.TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterMultipleConstraintClause(constraints: Syntax.System.Array[Syntax.ConstraintSyntax]) -> Syntax.TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterMultipleConstraintClause(asKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, constraints: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> Syntax.TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterSingleConstraintClause(constraint: Syntax.ConstraintSyntax) -> Syntax.TypeParameterSingleConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeParameterSingleConstraintClause(asKeyword: CodeAnalysis.SyntaxToken, constraint: Syntax.ConstraintSyntax) -> Syntax.TypeParameterSingleConstraintClauseSyntax: ...
    @overload
    @staticmethod
    def TypeStatement(statementKind: SyntaxKind, attributes: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, keyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: Syntax.TypeParameterListSyntax) -> Syntax.TypeStatementSyntax: ...
    @overload
    @staticmethod
    def UnaryExpression(kind: SyntaxKind, operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def UnaryMinusExpression(operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def UnaryMinusExpression(operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def UnaryPlusExpression(operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def UnaryPlusExpression(operatorToken: CodeAnalysis.SyntaxToken, operand: Syntax.ExpressionSyntax) -> Syntax.UnaryExpressionSyntax: ...
    @overload
    @staticmethod
    def UntilClause(condition: Syntax.ExpressionSyntax) -> Syntax.WhileOrUntilClauseSyntax: ...
    @overload
    @staticmethod
    def UntilClause(whileOrUntilKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhileOrUntilClauseSyntax: ...
    @overload
    @staticmethod
    def UsingBlock(usingStatement: Syntax.UsingStatementSyntax) -> Syntax.UsingBlockSyntax: ...
    @overload
    @staticmethod
    def UsingBlock(usingStatement: Syntax.UsingStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.UsingBlockSyntax: ...
    @overload
    @staticmethod
    def UsingBlock(usingStatement: Syntax.UsingStatementSyntax, statements: CodeAnalysis.SyntaxList, endUsingStatement: Syntax.EndBlockStatementSyntax) -> Syntax.UsingBlockSyntax: ...
    @overload
    @staticmethod
    def UsingStatement() -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(expression: Syntax.ExpressionSyntax, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def UsingStatement(usingKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, variables: CodeAnalysis.SeparatedSyntaxList) -> Syntax.UsingStatementSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(names: Syntax.System.Array[Syntax.ModifiedIdentifierSyntax]) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(names: CodeAnalysis.SeparatedSyntaxList) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VariableDeclarator(names: CodeAnalysis.SeparatedSyntaxList, asClause: Syntax.AsClauseSyntax, initializer: Syntax.EqualsValueSyntax) -> Syntax.VariableDeclaratorSyntax: ...
    @overload
    @staticmethod
    def VariableNameEquals(identifier: Syntax.ModifiedIdentifierSyntax) -> Syntax.VariableNameEqualsSyntax: ...
    @overload
    @staticmethod
    def VariableNameEquals(identifier: Syntax.ModifiedIdentifierSyntax, asClause: Syntax.SimpleAsClauseSyntax) -> Syntax.VariableNameEqualsSyntax: ...
    @overload
    @staticmethod
    def VariableNameEquals(identifier: Syntax.ModifiedIdentifierSyntax, asClause: Syntax.SimpleAsClauseSyntax, equalsToken: CodeAnalysis.SyntaxToken) -> Syntax.VariableNameEqualsSyntax: ...
    @overload
    @staticmethod
    def WhereClause(condition: Syntax.ExpressionSyntax) -> Syntax.WhereClauseSyntax: ...
    @overload
    @staticmethod
    def WhereClause(whereKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhereClauseSyntax: ...
    @overload
    @staticmethod
    def WhileBlock(whileStatement: Syntax.WhileStatementSyntax) -> Syntax.WhileBlockSyntax: ...
    @overload
    @staticmethod
    def WhileBlock(whileStatement: Syntax.WhileStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.WhileBlockSyntax: ...
    @overload
    @staticmethod
    def WhileBlock(whileStatement: Syntax.WhileStatementSyntax, statements: CodeAnalysis.SyntaxList, endWhileStatement: Syntax.EndBlockStatementSyntax) -> Syntax.WhileBlockSyntax: ...
    @overload
    @staticmethod
    def WhileClause(condition: Syntax.ExpressionSyntax) -> Syntax.WhileOrUntilClauseSyntax: ...
    @overload
    @staticmethod
    def WhileClause(whileOrUntilKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhileOrUntilClauseSyntax: ...
    @overload
    @staticmethod
    def WhileOrUntilClause(kind: SyntaxKind, whileOrUntilKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhileOrUntilClauseSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(condition: Syntax.ExpressionSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def WhileStatement(whileKeyword: CodeAnalysis.SyntaxToken, condition: Syntax.ExpressionSyntax) -> Syntax.WhileStatementSyntax: ...
    @overload
    @staticmethod
    def Whitespace(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def WhitespaceTrivia(text: str) -> CodeAnalysis.SyntaxTrivia: ...
    @overload
    @staticmethod
    def WithBlock(withStatement: Syntax.WithStatementSyntax) -> Syntax.WithBlockSyntax: ...
    @overload
    @staticmethod
    def WithBlock(withStatement: Syntax.WithStatementSyntax, statements: CodeAnalysis.SyntaxList) -> Syntax.WithBlockSyntax: ...
    @overload
    @staticmethod
    def WithBlock(withStatement: Syntax.WithStatementSyntax, statements: CodeAnalysis.SyntaxList, endWithStatement: Syntax.EndBlockStatementSyntax) -> Syntax.WithBlockSyntax: ...
    @overload
    @staticmethod
    def WithEventsEventContainer(identifier: CodeAnalysis.SyntaxToken) -> Syntax.WithEventsEventContainerSyntax: ...
    @overload
    @staticmethod
    def WithEventsEventContainer(identifier: str) -> Syntax.WithEventsEventContainerSyntax: ...
    @overload
    @staticmethod
    def WithEventsPropertyEventContainer(withEventsContainer: Syntax.WithEventsEventContainerSyntax, property_: Syntax.IdentifierNameSyntax) -> Syntax.WithEventsPropertyEventContainerSyntax: ...
    @overload
    @staticmethod
    def WithEventsPropertyEventContainer(withEventsContainer: Syntax.WithEventsEventContainerSyntax, dotToken: CodeAnalysis.SyntaxToken, property_: Syntax.IdentifierNameSyntax) -> Syntax.WithEventsPropertyEventContainerSyntax: ...
    @overload
    @staticmethod
    def WithStatement(expression: Syntax.ExpressionSyntax) -> Syntax.WithStatementSyntax: ...
    @overload
    @staticmethod
    def WithStatement(withKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.WithStatementSyntax: ...
    @overload
    @staticmethod
    def XmlAttribute(name: Syntax.XmlNodeSyntax, value: Syntax.XmlNodeSyntax) -> Syntax.XmlAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlAttribute(name: Syntax.XmlNodeSyntax, equalsToken: CodeAnalysis.SyntaxToken, value: Syntax.XmlNodeSyntax) -> Syntax.XmlAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlAttributeAccessExpression(name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlAttributeAccessExpression(base: Syntax.ExpressionSyntax, token2: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlAttributeAccessExpression(base: Syntax.ExpressionSyntax, token1: CodeAnalysis.SyntaxToken, token2: CodeAnalysis.SyntaxToken, token3: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlBracketedName(name: Syntax.XmlNameSyntax) -> Syntax.XmlBracketedNameSyntax: ...
    @overload
    @staticmethod
    def XmlBracketedName(lessThanToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlBracketedNameSyntax: ...
    @overload
    @staticmethod
    def XmlCDataSection() -> Syntax.XmlCDataSectionSyntax: ...
    @overload
    @staticmethod
    def XmlCDataSection(beginCDataToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endCDataToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCDataSectionSyntax: ...
    @overload
    @staticmethod
    def XmlComment() -> Syntax.XmlCommentSyntax: ...
    @overload
    @staticmethod
    def XmlComment(lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCommentSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(cref: Syntax.CrefReferenceSyntax) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(cref: Syntax.CrefReferenceSyntax, quoteKind: SyntaxKind) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, reference: Syntax.CrefReferenceSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlCrefAttribute(name: Syntax.XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, reference: Syntax.CrefReferenceSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlCrefAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlDeclaration(version: Syntax.XmlDeclarationOptionSyntax) -> Syntax.XmlDeclarationSyntax: ...
    @overload
    @staticmethod
    def XmlDeclaration(version: Syntax.XmlDeclarationOptionSyntax, encoding: Syntax.XmlDeclarationOptionSyntax, standalone: Syntax.XmlDeclarationOptionSyntax) -> Syntax.XmlDeclarationSyntax: ...
    @overload
    @staticmethod
    def XmlDeclaration(lessThanQuestionToken: CodeAnalysis.SyntaxToken, xmlKeyword: CodeAnalysis.SyntaxToken, version: Syntax.XmlDeclarationOptionSyntax, encoding: Syntax.XmlDeclarationOptionSyntax, standalone: Syntax.XmlDeclarationOptionSyntax, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlDeclarationSyntax: ...
    @overload
    @staticmethod
    def XmlDeclarationOption(value: Syntax.XmlStringSyntax) -> Syntax.XmlDeclarationOptionSyntax: ...
    @overload
    @staticmethod
    def XmlDeclarationOption(name: CodeAnalysis.SyntaxToken, equals: CodeAnalysis.SyntaxToken, value: Syntax.XmlStringSyntax) -> Syntax.XmlDeclarationOptionSyntax: ...
    @overload
    @staticmethod
    def XmlDescendantAccessExpression(name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlDescendantAccessExpression(base: Syntax.ExpressionSyntax, token2: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlDescendantAccessExpression(base: Syntax.ExpressionSyntax, token1: CodeAnalysis.SyntaxToken, token2: CodeAnalysis.SyntaxToken, token3: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlDocument(declaration: Syntax.XmlDeclarationSyntax, root: Syntax.XmlNodeSyntax) -> Syntax.XmlDocumentSyntax: ...
    @overload
    @staticmethod
    def XmlDocument(declaration: Syntax.XmlDeclarationSyntax, precedingMisc: CodeAnalysis.SyntaxList, root: Syntax.XmlNodeSyntax, followingMisc: CodeAnalysis.SyntaxList) -> Syntax.XmlDocumentSyntax: ...
    @overload
    @staticmethod
    def XmlElement(name: Syntax.XmlNameSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(startTag: Syntax.XmlElementStartTagSyntax, endTag: Syntax.XmlElementEndTagSyntax) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(localName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElement(startTag: Syntax.XmlElementStartTagSyntax, content: CodeAnalysis.SyntaxList, endTag: Syntax.XmlElementEndTagSyntax) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlElementAccessExpression(name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlElementAccessExpression(base: Syntax.ExpressionSyntax, token2: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlElementAccessExpression(base: Syntax.ExpressionSyntax, token1: CodeAnalysis.SyntaxToken, token2: CodeAnalysis.SyntaxToken, token3: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlElementEndTag() -> Syntax.XmlElementEndTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementEndTag(name: Syntax.XmlNameSyntax) -> Syntax.XmlElementEndTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementEndTag(lessThanSlashToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlElementEndTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(name: Syntax.XmlNodeSyntax) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(name: Syntax.XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlElementStartTag(lessThanToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlElementStartTagSyntax: ...
    @overload
    @staticmethod
    def XmlEmbeddedExpression(expression: Syntax.ExpressionSyntax) -> Syntax.XmlEmbeddedExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlEmbeddedExpression(lessThanPercentEqualsToken: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax, percentGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlEmbeddedExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(localName: str) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(name: Syntax.XmlNodeSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(name: Syntax.XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEmptyElement(lessThanToken: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlEntityLiteralToken(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlEntityLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlExampleElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExampleElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExceptionElement(cref: Syntax.CrefReferenceSyntax, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlExceptionElement(cref: Syntax.CrefReferenceSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlMemberAccessExpression(kind: SyntaxKind, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlMemberAccessExpression(kind: SyntaxKind, base: Syntax.ExpressionSyntax, token2: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlMemberAccessExpression(kind: SyntaxKind, base: Syntax.ExpressionSyntax, token1: CodeAnalysis.SyntaxToken, token2: CodeAnalysis.SyntaxToken, token3: CodeAnalysis.SyntaxToken, name: Syntax.XmlNodeSyntax) -> Syntax.XmlMemberAccessExpressionSyntax: ...
    @overload
    @staticmethod
    def XmlMultiLineElement(name: Syntax.XmlNameSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlMultiLineElement(localName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlName() -> Syntax.XmlNameSyntax: ...
    @overload
    @staticmethod
    def XmlName(prefix: Syntax.XmlPrefixSyntax, localName: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(parameterName: str) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(name: Syntax.XmlNameSyntax, startQuoteToken: CodeAnalysis.SyntaxToken, reference: Syntax.IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNameAttribute(name: Syntax.XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, reference: Syntax.IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNameAttributeSyntax: ...
    @overload
    @staticmethod
    def XmlNamespaceImportsClause(xmlNamespace: Syntax.XmlAttributeSyntax) -> Syntax.XmlNamespaceImportsClauseSyntax: ...
    @overload
    @staticmethod
    def XmlNamespaceImportsClause(lessThanToken: CodeAnalysis.SyntaxToken, xmlNamespace: Syntax.XmlAttributeSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlNamespaceImportsClauseSyntax: ...
    @overload
    @staticmethod
    def XmlNameToken(text: str, possibleKeywordKind: SyntaxKind) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlNameToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, possibleKeywordKind: SyntaxKind, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlNewLine(text: str) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlNullKeywordElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlParaElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParaElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamElement(parameterName: str, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamElement(parameterName: str, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlParamRefElement(parameterName: str) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlPermissionElement(cref: Syntax.CrefReferenceSyntax, content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPermissionElement(cref: Syntax.CrefReferenceSyntax, content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPlaceholderElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPlaceholderElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlPrefix() -> Syntax.XmlPrefixSyntax: ...
    @overload
    @staticmethod
    def XmlPrefix(name: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlPrefixSyntax: ...
    @overload
    @staticmethod
    def XmlPrefixName() -> Syntax.XmlPrefixNameSyntax: ...
    @overload
    @staticmethod
    def XmlPrefixName(name: CodeAnalysis.SyntaxToken) -> Syntax.XmlPrefixNameSyntax: ...
    @overload
    @staticmethod
    def XmlPreliminaryElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlProcessingInstruction() -> Syntax.XmlProcessingInstructionSyntax: ...
    @overload
    @staticmethod
    def XmlProcessingInstruction(lessThanQuestionToken: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlProcessingInstructionSyntax: ...
    @overload
    @staticmethod
    def XmlRemarksElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlRemarksElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlReturnsElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlReturnsElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeAlsoElement(cref: Syntax.CrefReferenceSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeAlsoElement(linkAddress: System.Uri, linkText: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSeeElement(cref: Syntax.CrefReferenceSyntax) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlString(startQuoteToken: CodeAnalysis.SyntaxToken, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlStringSyntax: ...
    @overload
    @staticmethod
    def XmlString(startQuoteToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endQuoteToken: CodeAnalysis.SyntaxToken) -> Syntax.XmlStringSyntax: ...
    @overload
    @staticmethod
    def XmlSummaryElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlSummaryElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlText() -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(textTokens: CodeAnalysis.SyntaxTokenList) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(textTokens: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlText(value: str) -> Syntax.XmlTextSyntax: ...
    @overload
    @staticmethod
    def XmlTextLiteral(value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextLiteral(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextLiteralToken(text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextLiteralToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(text: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(text: str, continueXmlDocumentationComment: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextNewLine(text: str, value: str, leading: CodeAnalysis.SyntaxTriviaList, trailing: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextToken(kind: SyntaxKind, text: str, value: str) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlTextToken(leadingTrivia: CodeAnalysis.SyntaxTriviaList, kind: SyntaxKind, text: str, value: str, trailingTrivia: CodeAnalysis.SyntaxTriviaList) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def XmlThreadSafetyElement() -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlThreadSafetyElement(isStatic: bool, isInstance: bool) -> Syntax.XmlEmptyElementSyntax: ...
    @overload
    @staticmethod
    def XmlValueElement(content: Syntax.System.Array[Syntax.XmlNodeSyntax]) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def XmlValueElement(content: CodeAnalysis.SyntaxList) -> Syntax.XmlElementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(expression: Syntax.ExpressionSyntax) -> Syntax.YieldStatementSyntax: ...
    @overload
    @staticmethod
    def YieldStatement(yieldKeyword: CodeAnalysis.SyntaxToken, expression: Syntax.ExpressionSyntax) -> Syntax.YieldStatementSyntax: ...

class SyntaxFacts(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AllowsLeadingImplicitLineContinuation(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def AllowsTrailingImplicitLineContinuation(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @property
    def EqualityComparer(self) -> Generic.IEqualityComparer: ...
    @overload
    @staticmethod
    def GetAccessorStatementKind(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetBaseTypeStatementKind(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetBinaryExpression(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetBlockName(kind: SyntaxKind) -> str: ...
    @overload
    @staticmethod
    def GetContextualKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetContextualKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInstanceExpression(kind: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetLiteralExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetOperatorKind(operatorMetadataName: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPreprocessorKeywordKind(text: str) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetPreprocessorKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetPunctuationKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetReservedKeywordKinds() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetText(accessibility: CodeAnalysis.Accessibility) -> str: ...
    @overload
    @staticmethod
    def GetText(kind: SyntaxKind) -> str: ...
    @overload
    @staticmethod
    def GetTypeStatementKind(keyword: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def GetUnaryExpression(token: SyntaxKind) -> SyntaxKind: ...
    @overload
    @staticmethod
    def IsAccessibilityModifier(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAccessorBlock(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAccessorStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAccessorStatementAccessorKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAddRemoveHandlerStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAddRemoveHandlerStatementAddHandlerOrRemoveHandlerKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAddressOfOperand(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsAnyToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAssignmentStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAssignmentStatementOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsAttributeName(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsAttributeTargetAttributeModifier(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsBinaryExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsBinaryExpressionOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsCaseBlock(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsCaseStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsColon(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsContextualKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsContinueStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsContinueStatementBlockKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsCrefOperatorReferenceOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsCrefSignaturePartModifier(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDeclareStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDeclareStatementCharsetKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDeclareStatementSubOrFunctionKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDelegateStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDelegateStatementSubOrFunctionKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDoLoopBlock(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsDoStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsEndBlockStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsEndBlockStatementBlockKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsExitStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsExitStatementBlockKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsHash(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsIdentifierPartCharacter(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsIdentifierStartCharacter(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsIfDirectiveTrivia(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsIfDirectiveTriviaIfOrElseIfKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsInNamespaceOrTypeContext(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsInstanceExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsInTypeOnlyContext(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsInvocationOrAddressOfOperand(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsInvoked(node: Syntax.ExpressionSyntax) -> bool: ...
    @overload
    @staticmethod
    def IsKeywordEventContainerKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsKeywordKind(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLabel(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLabelLabelToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLabelStatementLabelToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLambdaHeader(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLambdaHeaderSubOrFunctionKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLanguagePunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLiteralExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLiteralExpressionToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsLoopStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMemberAccessExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMemberAccessExpressionOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMethodBlock(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMethodStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMethodStatementSubOrFunctionKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsMultiLineLambdaExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsName(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsNamedArgumentName(node: CodeAnalysis.SyntaxNode) -> bool: ...
    @overload
    @staticmethod
    def IsNamespaceMemberDeclaration(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsNewLine(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsOnErrorGoToStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOperator(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOperatorStatementOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOptionStatementNameKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOptionStatementValueKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOrdering(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsOrderingAscendingOrDescendingKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPartitionClause(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPartitionClauseSkipOrTakeKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPartitionWhileClause(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPartitionWhileClauseSkipOrTakeKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPredefinedCastExpressionKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPredefinedType(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorDirective(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorPunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuation(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuationOrKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsReDimStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsRelationalCaseClause(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsRelationalCaseClauseOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsRelationalOperator(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsReservedKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsReservedTupleElementName(elementName: str) -> bool: ...
    @overload
    @staticmethod
    def IsResumeStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsSingleLineLambdaExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsSpecialConstraint(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsSpecialConstraintConstraintKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsStopOrEndStatement(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsStopOrEndStatementStopOrEndKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTrivia(this: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeOfExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeOfExpressionOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsTypeParameterVarianceKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsUnaryExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsUnaryExpressionOperatorToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsUnderscore(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsValidIdentifier(name: str) -> bool: ...
    @overload
    @staticmethod
    def IsWhileOrUntilClause(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsWhileOrUntilClauseWhileOrUntilKeyword(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsWhitespace(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsXmlCrefAttributeEndQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlCrefAttributeStartQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlMemberAccessExpression(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlMemberAccessExpressionToken2(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlNameAttributeEndQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlNameAttributeStartQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlStringEndQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlStringStartQuoteToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlTextToken(kind: SyntaxKind) -> bool: ...
    @overload
    @staticmethod
    def IsXmlWhitespace(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def MakeHalfWidthIdentifier(text: str) -> str: ...
    @overload
    @staticmethod
    def VarianceKindFromToken(token: CodeAnalysis.SyntaxToken) -> CodeAnalysis.VarianceKind: ...

class GeneratedExtensionSyntaxFacts(object):
    """    """
    @overload
    @staticmethod
    def GetText(kind: SyntaxKind) -> str: ...

class GlobalImport(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: GlobalImport) -> bool: ...
    @property
    def Clause(self) -> Syntax.ImportsClauseSyntax: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(importedNames: str) -> GlobalImport: ...
    @overload
    @staticmethod
    def Parse(importedNames: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Parse(importedNames: System.System.Array[str]) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Parse(importedNames: str) -> (GlobalImport, Immutable.ImmutableArray): ...
    @overload
    @staticmethod
    def Parse(importedNames: Generic.IEnumerable) -> (Generic.IEnumerable, Immutable.ImmutableArray): ...

class LanguageVersion(enum.Enum):
    Default = 0
    VisualBasic9 = 9
    VisualBasic10 = 10
    VisualBasic11 = 11
    VisualBasic12 = 12
    VisualBasic14 = 14
    VisualBasic15 = 15
    VisualBasic15_3 = 1503
    VisualBasic15_5 = 1505
    VisualBasic16 = 1600
    VisualBasic16_9 = 1609
    Latest = 2147483647

class LanguageVersionFacts(object):
    """    """
    @overload
    @staticmethod
    def MapSpecifiedToEffectiveVersion(version: LanguageVersion) -> LanguageVersion: ...
    @overload
    @staticmethod
    def ToDisplayString(version: LanguageVersion) -> str: ...
    @overload
    @staticmethod
    def TryParse(version: str) -> (bool, LanguageVersion): ...

class OptionStrict(enum.Enum):
    Off = 0
    Custom = 1
    On = 2

class PredefinedPreprocessorSymbols(object):
    """    """
    @overload
    @staticmethod
    def AddPredefinedPreprocessorSymbols(kind: CodeAnalysis.OutputKind, symbols: Generic.IEnumerable) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def AddPredefinedPreprocessorSymbols(kind: CodeAnalysis.OutputKind, symbols: Generic.System.Array[Generic.KeyValuePair]) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def AddPredefinedPreprocessorSymbols(kind: CodeAnalysis.OutputKind, symbols: Immutable.ImmutableArray) -> Immutable.ImmutableArray: ...

class Conversion(System.ValueType):
    """    """
    @overload
    def Equals(self, other: Conversion) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsAnonymousDelegate(self) -> bool: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsBoolean(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsLambda(self) -> bool: ...
    @property
    def IsNarrowing(self) -> bool: ...
    @property
    def IsNullableValueType(self) -> bool: ...
    @property
    def IsNumeric(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsString(self) -> bool: ...
    @property
    def IsTypeParameter(self) -> bool: ...
    @property
    def IsUserDefined(self) -> bool: ...
    @property
    def IsValueType(self) -> bool: ...
    @property
    def IsWidening(self) -> bool: ...
    @property
    def MethodSymbol(self) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToCommonConversion() -> Operations.CommonConversion: ...
    @overload
    def ToString() -> str: ...

class VisualBasicGeneratorDriver(CodeAnalysis.GeneratorDriver):
    """    """
    @overload
    @staticmethod
    def Create(generators: Immutable.ImmutableArray, additionalTexts: Immutable.ImmutableArray, parseOptions: VisualBasicParseOptions, analyzerConfigOptionsProvider: Diagnostics.AnalyzerConfigOptionsProvider) -> VisualBasicGeneratorDriver: ...
    @overload
    @staticmethod
    def Create(generators: Immutable.ImmutableArray, additionalTexts: Immutable.ImmutableArray, parseOptions: VisualBasicParseOptions, analyzerConfigOptionsProvider: Diagnostics.AnalyzerConfigOptionsProvider, driverOptions: CodeAnalysis.GeneratorDriverOptions) -> VisualBasicGeneratorDriver: ...

class SymbolDisplay(object):
    """    """
    @overload
    @staticmethod
    def FormatPrimitive(obj: object, quoteStrings: bool, useHexadecimalNumbers: bool) -> str: ...
    @overload
    @staticmethod
    def ToDisplayParts(symbol: CodeAnalysis.ISymbol, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToDisplayString(symbol: CodeAnalysis.ISymbol, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...
    @overload
    @staticmethod
    def ToMinimalDisplayParts(symbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def ToMinimalDisplayString(symbol: CodeAnalysis.ISymbol, semanticModel: CodeAnalysis.SemanticModel, position: int, format_: CodeAnalysis.SymbolDisplayFormat) -> str: ...

class HandledEvent(object):
    """    """
    @property
    def EventContainer(self) -> CodeAnalysis.IPropertySymbol: ...
    @property
    def EventSymbol(self) -> CodeAnalysis.IEventSymbol: ...
    @property
    def HandlesKind(self) -> HandledEventKind: ...
    @property
    def WithEventsSourceProperty(self) -> CodeAnalysis.IPropertySymbol: ...

class HandledEventKind(enum.Enum):
    Me = 0
    MyClass = 1
    MyBase = 2
    WithEvents = 3

class TypedConstantExtensions(object):
    """    """
    @overload
    @staticmethod
    def ToVisualBasicString(constant: CodeAnalysis.TypedConstant) -> str: ...

class SyntaxExtensions(object):
    """    """
    @overload
    @staticmethod
    def Attributes(asClauseSyntax: Syntax.AsClauseSyntax) -> CodeAnalysis.SyntaxList: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(token: CodeAnalysis.SyntaxToken, indentation: str, elasticTrivia: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(node: TNode, useDefaultCasing: bool, indentation: str, elasticTrivia: bool) -> TNode: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(node: TNode, useDefaultCasing: bool, indentation: str, eol: str, elasticTrivia: bool) -> TNode: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(token: CodeAnalysis.SyntaxToken, indentation: str, eol: str, elasticTrivia: bool, useDefaultCasing: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def NormalizeWhitespace(trivia: CodeAnalysis.SyntaxTriviaList, indentation: str, eol: str, elasticTrivia: bool, useDefaultCasing: bool) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def ToSyntaxTriviaList(sequence: Generic.IEnumerable) -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    @staticmethod
    def TryGetInferredMemberName(syntax: CodeAnalysis.SyntaxNode) -> str: ...
    @overload
    @staticmethod
    def Type(newExpressionSyntax: Syntax.NewExpressionSyntax) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def Type(asClauseSyntax: Syntax.AsClauseSyntax) -> Syntax.TypeSyntax: ...
    @overload
    @staticmethod
    def WithIdentifier(simpleName: Syntax.SimpleNameSyntax, identifier: CodeAnalysis.SyntaxToken) -> Syntax.SimpleNameSyntax: ...

class SyntaxKind(enum.Enum):
    None_ = 0
    List = 1
    EmptyStatement = 2
    EndIfStatement = 5
    EndUsingStatement = 6
    EndWithStatement = 7
    EndSelectStatement = 8
    EndStructureStatement = 9
    EndEnumStatement = 10
    EndInterfaceStatement = 11
    EndClassStatement = 12
    EndModuleStatement = 13
    EndNamespaceStatement = 14
    EndSubStatement = 15
    EndFunctionStatement = 16
    EndGetStatement = 17
    EndSetStatement = 18
    EndPropertyStatement = 19
    EndOperatorStatement = 20
    EndEventStatement = 21
    EndAddHandlerStatement = 22
    EndRemoveHandlerStatement = 23
    EndRaiseEventStatement = 24
    EndWhileStatement = 25
    EndTryStatement = 26
    EndSyncLockStatement = 27
    CompilationUnit = 38
    OptionStatement = 41
    ImportsStatement = 42
    SimpleImportsClause = 44
    XmlNamespaceImportsClause = 45
    NamespaceBlock = 48
    NamespaceStatement = 49
    ModuleBlock = 50
    StructureBlock = 51
    InterfaceBlock = 52
    ClassBlock = 53
    EnumBlock = 54
    InheritsStatement = 57
    ImplementsStatement = 58
    ModuleStatement = 59
    StructureStatement = 60
    InterfaceStatement = 61
    ClassStatement = 62
    EnumStatement = 63
    TypeParameterList = 66
    TypeParameter = 67
    TypeParameterSingleConstraintClause = 70
    TypeParameterMultipleConstraintClause = 71
    NewConstraint = 72
    ClassConstraint = 73
    StructureConstraint = 74
    TypeConstraint = 75
    EnumMemberDeclaration = 78
    SubBlock = 79
    FunctionBlock = 80
    ConstructorBlock = 81
    OperatorBlock = 82
    GetAccessorBlock = 83
    SetAccessorBlock = 84
    AddHandlerAccessorBlock = 85
    RemoveHandlerAccessorBlock = 86
    RaiseEventAccessorBlock = 87
    PropertyBlock = 88
    EventBlock = 89
    ParameterList = 92
    SubStatement = 93
    FunctionStatement = 94
    SubNewStatement = 95
    DeclareSubStatement = 96
    DeclareFunctionStatement = 97
    DelegateSubStatement = 98
    DelegateFunctionStatement = 99
    EventStatement = 102
    OperatorStatement = 103
    PropertyStatement = 104
    GetAccessorStatement = 105
    SetAccessorStatement = 106
    AddHandlerAccessorStatement = 107
    RemoveHandlerAccessorStatement = 108
    RaiseEventAccessorStatement = 111
    ImplementsClause = 112
    HandlesClause = 113
    KeywordEventContainer = 114
    WithEventsEventContainer = 115
    WithEventsPropertyEventContainer = 116
    HandlesClauseItem = 117
    IncompleteMember = 118
    FieldDeclaration = 119
    VariableDeclarator = 122
    SimpleAsClause = 123
    AsNewClause = 124
    ObjectMemberInitializer = 125
    ObjectCollectionInitializer = 126
    InferredFieldInitializer = 127
    NamedFieldInitializer = 128
    EqualsValue = 129
    Parameter = 132
    ModifiedIdentifier = 133
    ArrayRankSpecifier = 134
    AttributeList = 135
    Attribute = 136
    AttributeTarget = 137
    AttributesStatement = 138
    ExpressionStatement = 139
    PrintStatement = 140
    WhileBlock = 141
    UsingBlock = 144
    SyncLockBlock = 145
    WithBlock = 146
    LocalDeclarationStatement = 147
    LabelStatement = 148
    GoToStatement = 149
    IdentifierLabel = 150
    NumericLabel = 151
    NextLabel = 152
    StopStatement = 153
    EndStatement = 156
    ExitDoStatement = 157
    ExitForStatement = 158
    ExitSubStatement = 159
    ExitFunctionStatement = 160
    ExitOperatorStatement = 161
    ExitPropertyStatement = 162
    ExitTryStatement = 163
    ExitSelectStatement = 164
    ExitWhileStatement = 165
    ContinueWhileStatement = 166
    ContinueDoStatement = 167
    ContinueForStatement = 168
    ReturnStatement = 169
    SingleLineIfStatement = 170
    SingleLineIfPart = 171
    SingleLineElseClause = 172
    MultiLineIfBlock = 173
    ElseIfBlock = 180
    ElseBlock = 181
    IfStatement = 182
    ElseIfStatement = 183
    ElseStatement = 184
    TryBlock = 185
    CatchBlock = 187
    FinallyBlock = 188
    TryStatement = 189
    CatchStatement = 190
    CatchFilterClause = 191
    FinallyStatement = 194
    ErrorStatement = 195
    OnErrorGoToZeroStatement = 196
    OnErrorGoToMinusOneStatement = 197
    OnErrorGoToLabelStatement = 198
    OnErrorResumeNextStatement = 199
    ResumeStatement = 200
    ResumeLabelStatement = 201
    ResumeNextStatement = 202
    SelectBlock = 203
    SelectStatement = 204
    CaseBlock = 207
    CaseElseBlock = 210
    CaseStatement = 211
    CaseElseStatement = 212
    ElseCaseClause = 213
    SimpleCaseClause = 214
    RangeCaseClause = 215
    CaseEqualsClause = 216
    CaseNotEqualsClause = 217
    CaseLessThanClause = 218
    CaseLessThanOrEqualClause = 219
    CaseGreaterThanOrEqualClause = 222
    CaseGreaterThanClause = 223
    SyncLockStatement = 226
    WhileStatement = 234
    ForBlock = 237
    ForEachBlock = 238
    ForStatement = 239
    ForStepClause = 240
    ForEachStatement = 241
    NextStatement = 242
    UsingStatement = 243
    ThrowStatement = 246
    SimpleAssignmentStatement = 247
    MidAssignmentStatement = 248
    AddAssignmentStatement = 249
    SubtractAssignmentStatement = 250
    MultiplyAssignmentStatement = 251
    DivideAssignmentStatement = 252
    IntegerDivideAssignmentStatement = 253
    ExponentiateAssignmentStatement = 254
    LeftShiftAssignmentStatement = 255
    RightShiftAssignmentStatement = 258
    ConcatenateAssignmentStatement = 259
    MidExpression = 260
    CallStatement = 261
    AddHandlerStatement = 262
    RemoveHandlerStatement = 263
    RaiseEventStatement = 264
    WithStatement = 265
    ReDimStatement = 266
    ReDimPreserveStatement = 267
    RedimClause = 270
    EraseStatement = 271
    CharacterLiteralExpression = 272
    TrueLiteralExpression = 273
    FalseLiteralExpression = 274
    NumericLiteralExpression = 275
    DateLiteralExpression = 276
    StringLiteralExpression = 279
    NothingLiteralExpression = 280
    ParenthesizedExpression = 281
    MeExpression = 282
    MyBaseExpression = 283
    MyClassExpression = 284
    GetTypeExpression = 285
    TypeOfIsExpression = 286
    TypeOfIsNotExpression = 287
    GetXmlNamespaceExpression = 290
    SimpleMemberAccessExpression = 291
    DictionaryAccessExpression = 292
    XmlElementAccessExpression = 293
    XmlDescendantAccessExpression = 294
    XmlAttributeAccessExpression = 295
    InvocationExpression = 296
    ObjectCreationExpression = 297
    AnonymousObjectCreationExpression = 298
    ArrayCreationExpression = 301
    CollectionInitializer = 302
    CTypeExpression = 303
    DirectCastExpression = 304
    TryCastExpression = 305
    PredefinedCastExpression = 306
    AddExpression = 307
    SubtractExpression = 308
    MultiplyExpression = 309
    DivideExpression = 310
    IntegerDivideExpression = 311
    ExponentiateExpression = 314
    LeftShiftExpression = 315
    RightShiftExpression = 316
    ConcatenateExpression = 317
    ModuloExpression = 318
    EqualsExpression = 319
    NotEqualsExpression = 320
    LessThanExpression = 321
    LessThanOrEqualExpression = 322
    GreaterThanOrEqualExpression = 323
    GreaterThanExpression = 324
    IsExpression = 325
    IsNotExpression = 326
    LikeExpression = 327
    OrExpression = 328
    ExclusiveOrExpression = 329
    AndExpression = 330
    OrElseExpression = 331
    AndAlsoExpression = 332
    UnaryPlusExpression = 333
    UnaryMinusExpression = 334
    NotExpression = 335
    AddressOfExpression = 336
    BinaryConditionalExpression = 337
    TernaryConditionalExpression = 338
    SingleLineFunctionLambdaExpression = 339
    SingleLineSubLambdaExpression = 342
    MultiLineFunctionLambdaExpression = 343
    MultiLineSubLambdaExpression = 344
    SubLambdaHeader = 345
    FunctionLambdaHeader = 346
    ArgumentList = 347
    OmittedArgument = 348
    SimpleArgument = 349
    RangeArgument = 351
    QueryExpression = 352
    CollectionRangeVariable = 353
    ExpressionRangeVariable = 354
    AggregationRangeVariable = 355
    VariableNameEquals = 356
    FunctionAggregation = 357
    GroupAggregation = 358
    FromClause = 359
    LetClause = 360
    AggregateClause = 361
    DistinctClause = 362
    WhereClause = 363
    SkipWhileClause = 364
    TakeWhileClause = 365
    SkipClause = 366
    TakeClause = 367
    GroupByClause = 368
    JoinCondition = 369
    SimpleJoinClause = 370
    GroupJoinClause = 371
    OrderByClause = 372
    AscendingOrdering = 375
    DescendingOrdering = 376
    SelectClause = 377
    XmlDocument = 378
    XmlDeclaration = 379
    XmlDeclarationOption = 380
    XmlElement = 381
    XmlText = 382
    XmlElementStartTag = 383
    XmlElementEndTag = 384
    XmlEmptyElement = 385
    XmlAttribute = 386
    XmlString = 387
    XmlPrefixName = 388
    XmlName = 389
    XmlBracketedName = 390
    XmlPrefix = 391
    XmlComment = 392
    XmlProcessingInstruction = 393
    XmlCDataSection = 394
    XmlEmbeddedExpression = 395
    ArrayType = 396
    NullableType = 397
    PredefinedType = 398
    IdentifierName = 399
    GenericName = 400
    QualifiedName = 401
    GlobalName = 402
    TypeArgumentList = 403
    CrefReference = 404
    CrefSignature = 407
    CrefSignaturePart = 408
    CrefOperatorReference = 409
    QualifiedCrefOperatorReference = 410
    YieldStatement = 411
    AwaitExpression = 412
    AddHandlerKeyword = 413
    AddressOfKeyword = 414
    AliasKeyword = 415
    AndKeyword = 416
    AndAlsoKeyword = 417
    AsKeyword = 418
    BooleanKeyword = 421
    ByRefKeyword = 422
    ByteKeyword = 423
    ByValKeyword = 424
    CallKeyword = 425
    CaseKeyword = 426
    CatchKeyword = 427
    CBoolKeyword = 428
    CByteKeyword = 429
    CCharKeyword = 432
    CDateKeyword = 433
    CDecKeyword = 434
    CDblKeyword = 435
    CharKeyword = 436
    CIntKeyword = 437
    ClassKeyword = 438
    CLngKeyword = 439
    CObjKeyword = 440
    ConstKeyword = 441
    ReferenceKeyword = 442
    ContinueKeyword = 443
    CSByteKeyword = 444
    CShortKeyword = 445
    CSngKeyword = 446
    CStrKeyword = 447
    CTypeKeyword = 448
    CUIntKeyword = 449
    CULngKeyword = 450
    CUShortKeyword = 453
    DateKeyword = 454
    DecimalKeyword = 455
    DeclareKeyword = 456
    DefaultKeyword = 457
    DelegateKeyword = 458
    DimKeyword = 459
    DirectCastKeyword = 460
    DoKeyword = 461
    DoubleKeyword = 462
    EachKeyword = 463
    ElseKeyword = 464
    ElseIfKeyword = 465
    EndKeyword = 466
    EnumKeyword = 467
    EraseKeyword = 468
    ErrorKeyword = 469
    EventKeyword = 470
    ExitKeyword = 471
    FalseKeyword = 474
    FinallyKeyword = 475
    ForKeyword = 476
    FriendKeyword = 477
    FunctionKeyword = 478
    GetKeyword = 479
    GetTypeKeyword = 480
    GetXmlNamespaceKeyword = 481
    GlobalKeyword = 482
    GoToKeyword = 483
    HandlesKeyword = 484
    IfKeyword = 485
    ImplementsKeyword = 486
    ImportsKeyword = 487
    InKeyword = 488
    InheritsKeyword = 489
    IntegerKeyword = 490
    InterfaceKeyword = 491
    IsKeyword = 492
    IsNotKeyword = 495
    LetKeyword = 496
    LibKeyword = 497
    LikeKeyword = 498
    LongKeyword = 499
    LoopKeyword = 500
    MeKeyword = 501
    ModKeyword = 502
    ModuleKeyword = 503
    MustInheritKeyword = 504
    MustOverrideKeyword = 505
    MyBaseKeyword = 506
    MyClassKeyword = 507
    NamespaceKeyword = 508
    NarrowingKeyword = 509
    NextKeyword = 510
    NewKeyword = 511
    NotKeyword = 512
    NothingKeyword = 513
    NotInheritableKeyword = 516
    NotOverridableKeyword = 517
    ObjectKeyword = 518
    OfKeyword = 519
    OnKeyword = 520
    OperatorKeyword = 521
    OptionKeyword = 522
    OptionalKeyword = 523
    OrKeyword = 524
    OrElseKeyword = 525
    OverloadsKeyword = 526
    OverridableKeyword = 527
    OverridesKeyword = 528
    ParamArrayKeyword = 529
    PartialKeyword = 530
    PrivateKeyword = 531
    PropertyKeyword = 532
    ProtectedKeyword = 533
    PublicKeyword = 534
    RaiseEventKeyword = 537
    ReadOnlyKeyword = 538
    ReDimKeyword = 539
    REMKeyword = 540
    RemoveHandlerKeyword = 541
    ResumeKeyword = 542
    ReturnKeyword = 543
    SByteKeyword = 544
    SelectKeyword = 545
    SetKeyword = 546
    ShadowsKeyword = 547
    SharedKeyword = 548
    ShortKeyword = 549
    SingleKeyword = 550
    StaticKeyword = 551
    StepKeyword = 552
    StopKeyword = 553
    StringKeyword = 554
    StructureKeyword = 555
    SubKeyword = 558
    SyncLockKeyword = 559
    ThenKeyword = 560
    ThrowKeyword = 561
    ToKeyword = 562
    TrueKeyword = 563
    TryKeyword = 564
    TryCastKeyword = 565
    TypeOfKeyword = 566
    UIntegerKeyword = 567
    ULongKeyword = 568
    UShortKeyword = 569
    UsingKeyword = 570
    WhenKeyword = 571
    WhileKeyword = 572
    WideningKeyword = 573
    WithKeyword = 574
    WithEventsKeyword = 575
    WriteOnlyKeyword = 578
    XorKeyword = 579
    EndIfKeyword = 580
    GosubKeyword = 581
    VariantKeyword = 582
    WendKeyword = 583
    AggregateKeyword = 584
    AllKeyword = 585
    AnsiKeyword = 586
    AscendingKeyword = 587
    AssemblyKeyword = 588
    AutoKeyword = 589
    BinaryKeyword = 590
    ByKeyword = 591
    CompareKeyword = 592
    CustomKeyword = 593
    DescendingKeyword = 594
    DisableKeyword = 595
    DistinctKeyword = 596
    EnableKeyword = 599
    EqualsKeyword = 600
    ExplicitKeyword = 601
    ExternalSourceKeyword = 602
    ExternalChecksumKeyword = 603
    FromKeyword = 604
    GroupKeyword = 605
    InferKeyword = 606
    IntoKeyword = 607
    IsFalseKeyword = 608
    IsTrueKeyword = 609
    JoinKeyword = 610
    KeyKeyword = 611
    MidKeyword = 612
    OffKeyword = 613
    OrderKeyword = 614
    OutKeyword = 615
    PreserveKeyword = 616
    RegionKeyword = 617
    SkipKeyword = 620
    StrictKeyword = 621
    TakeKeyword = 622
    TextKeyword = 623
    UnicodeKeyword = 624
    UntilKeyword = 625
    WarningKeyword = 626
    WhereKeyword = 627
    TypeKeyword = 628
    XmlKeyword = 629
    AsyncKeyword = 630
    AwaitKeyword = 631
    IteratorKeyword = 632
    YieldKeyword = 633
    ExclamationToken = 634
    AtToken = 635
    CommaToken = 636
    HashToken = 637
    AmpersandToken = 638
    SingleQuoteToken = 641
    OpenParenToken = 642
    CloseParenToken = 643
    OpenBraceToken = 644
    CloseBraceToken = 645
    SemicolonToken = 646
    AsteriskToken = 647
    PlusToken = 648
    MinusToken = 649
    DotToken = 650
    SlashToken = 651
    ColonToken = 652
    LessThanToken = 653
    LessThanEqualsToken = 654
    LessThanGreaterThanToken = 655
    EqualsToken = 656
    GreaterThanToken = 657
    GreaterThanEqualsToken = 658
    BackslashToken = 659
    CaretToken = 662
    ColonEqualsToken = 663
    AmpersandEqualsToken = 664
    AsteriskEqualsToken = 665
    PlusEqualsToken = 666
    MinusEqualsToken = 667
    SlashEqualsToken = 668
    BackslashEqualsToken = 669
    CaretEqualsToken = 670
    LessThanLessThanToken = 671
    GreaterThanGreaterThanToken = 672
    LessThanLessThanEqualsToken = 673
    GreaterThanGreaterThanEqualsToken = 674
    QuestionToken = 675
    DoubleQuoteToken = 676
    StatementTerminatorToken = 677
    EndOfFileToken = 678
    EmptyToken = 679
    SlashGreaterThanToken = 680
    LessThanSlashToken = 683
    LessThanExclamationMinusMinusToken = 684
    MinusMinusGreaterThanToken = 685
    LessThanQuestionToken = 686
    QuestionGreaterThanToken = 687
    LessThanPercentEqualsToken = 688
    PercentGreaterThanToken = 689
    BeginCDataToken = 690
    EndCDataToken = 691
    EndOfXmlToken = 692
    BadToken = 693
    XmlNameToken = 694
    XmlTextLiteralToken = 695
    XmlEntityLiteralToken = 696
    DocumentationCommentLineBreakToken = 697
    IdentifierToken = 700
    IntegerLiteralToken = 701
    FloatingLiteralToken = 702
    DecimalLiteralToken = 703
    DateLiteralToken = 704
    StringLiteralToken = 705
    CharacterLiteralToken = 706
    SkippedTokensTrivia = 709
    DocumentationCommentTrivia = 710
    XmlCrefAttribute = 711
    XmlNameAttribute = 712
    ConditionalAccessExpression = 713
    WhitespaceTrivia = 729
    EndOfLineTrivia = 730
    ColonTrivia = 731
    CommentTrivia = 732
    LineContinuationTrivia = 733
    DocumentationCommentExteriorTrivia = 734
    DisabledTextTrivia = 735
    ConstDirectiveTrivia = 736
    IfDirectiveTrivia = 737
    ElseIfDirectiveTrivia = 738
    ElseDirectiveTrivia = 739
    EndIfDirectiveTrivia = 740
    RegionDirectiveTrivia = 741
    EndRegionDirectiveTrivia = 744
    ExternalSourceDirectiveTrivia = 745
    EndExternalSourceDirectiveTrivia = 746
    ExternalChecksumDirectiveTrivia = 747
    EnableWarningDirectiveTrivia = 748
    DisableWarningDirectiveTrivia = 749
    ReferenceDirectiveTrivia = 750
    BadDirectiveTrivia = 753
    ImportAliasClause = 754
    NameColonEquals = 755
    SimpleDoLoopBlock = 756
    DoWhileLoopBlock = 757
    DoUntilLoopBlock = 758
    DoLoopWhileBlock = 759
    DoLoopUntilBlock = 760
    SimpleDoStatement = 770
    DoWhileStatement = 771
    DoUntilStatement = 772
    SimpleLoopStatement = 773
    LoopWhileStatement = 774
    LoopUntilStatement = 775
    WhileClause = 776
    UntilClause = 777
    NameOfKeyword = 778
    NameOfExpression = 779
    InterpolatedStringExpression = 780
    InterpolatedStringText = 781
    Interpolation = 782
    InterpolationAlignmentClause = 783
    InterpolationFormatClause = 784
    DollarSignDoubleQuoteToken = 785
    InterpolatedStringTextToken = 786
    EndOfInterpolatedStringToken = 787
    TupleExpression = 788
    TupleType = 789
    TypedTupleElement = 790
    NamedTupleElement = 791
    ConflictMarkerTrivia = 792

class VisualBasicSyntaxNode(CodeAnalysis.SyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasicSyntaxVisitor) -> None: ...
    @overload
    @staticmethod
    def DeserializeFrom(stream: IO.Stream, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxNode: ...
    @overload
    def FindToken(self, position: int, findInsideTrivia: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def FindTrivia(self, textPosition: int, findInsideTrivia: bool) -> CodeAnalysis.SyntaxTrivia: ...
    @property
    def IsDirective(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def SpanStart(self) -> int: ...
    @overload
    def GetDiagnostics() -> Generic.IEnumerable: ...
    @overload
    def GetDirectives(self, filter_: System.Func) -> Generic.IList: ...
    @overload
    def GetFirstDirective(self, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    def GetFirstToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def GetLastDirective(self, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    def GetLastToken(self, includeZeroWidth: bool, includeSkipped: bool, includeDirectives: bool, includeDocumentationComments: bool) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def GetLeadingTrivia() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def GetLocation() -> CodeAnalysis.Location: ...
    @overload
    def GetTrailingTrivia() -> CodeAnalysis.SyntaxTriviaList: ...
    @overload
    def Kind() -> SyntaxKind: ...

class VisualBasicSyntaxTree(CodeAnalysis.SyntaxTree):
    """    """
    @overload
    @staticmethod
    def Create(root: VisualBasicSyntaxNode, options: VisualBasicParseOptions, path: str, encoding: Text.Encoding) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def Create(root: VisualBasicSyntaxNode, options: VisualBasicParseOptions, path: str, encoding: Text.Encoding, diagnosticOptions: Immutable.ImmutableDictionary) -> CodeAnalysis.SyntaxTree: ...
    @property
    def Options(self) -> VisualBasicParseOptions: ...
    @overload
    def GetChangedSpans(self, oldTree: CodeAnalysis.SyntaxTree) -> Generic.IList: ...
    @overload
    def GetChanges(self, oldTree: CodeAnalysis.SyntaxTree) -> Generic.IList: ...
    @overload
    def GetCompilationUnitRoot(self, cancellationToken: Threading.CancellationToken) -> Syntax.CompilationUnitSyntax: ...
    @overload
    def GetDiagnostics(self, trivia: CodeAnalysis.SyntaxTrivia) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, node: CodeAnalysis.SyntaxNode) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, token: CodeAnalysis.SyntaxToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, nodeOrToken: CodeAnalysis.SyntaxNodeOrToken) -> Generic.IEnumerable: ...
    @overload
    def GetDiagnostics(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineMappings(self, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    def GetLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.FileLinePositionSpan: ...
    @overload
    def GetLineVisibility(self, position: int, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.LineVisibility: ...
    @overload
    def GetLocation(self, span: Text.TextSpan) -> CodeAnalysis.Location: ...
    @overload
    def GetMappedLineSpan(self, span: Text.TextSpan, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.FileLinePositionSpan: ...
    @overload
    def GetRoot(self, cancellationToken: Threading.CancellationToken) -> VisualBasicSyntaxNode: ...
    @overload
    def GetRootAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def HasHiddenRegions() -> bool: ...
    @overload
    def IsEquivalentTo(self, tree: CodeAnalysis.SyntaxTree, topLevel: bool) -> bool: ...
    @overload
    @staticmethod
    def ParseText(text: Text.SourceText, options: VisualBasicParseOptions, path: str, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseText(text: Text.SourceText, options: VisualBasicParseOptions, path: str, diagnosticOptions: Immutable.ImmutableDictionary, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseText(text: str, options: VisualBasicParseOptions, path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    @staticmethod
    def ParseText(text: str, options: VisualBasicParseOptions, path: str, encoding: Text.Encoding, diagnosticOptions: Immutable.ImmutableDictionary, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SyntaxTree: ...
    @overload
    def TryGetRoot() -> (bool, VisualBasicSyntaxNode): ...
    @overload
    def WithChangedText(self, newText: Text.SourceText) -> CodeAnalysis.SyntaxTree: ...

class VisualBasicSyntaxWalker(VisualBasicSyntaxVisitor):
    """    """
    @overload
    def DefaultVisit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def Visit(self, node: CodeAnalysis.SyntaxNode) -> None: ...
    @overload
    def VisitLeadingTrivia(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitToken(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitTrailingTrivia(self, token: CodeAnalysis.SyntaxToken) -> None: ...
    @overload
    def VisitTrivia(self, trivia: CodeAnalysis.SyntaxTrivia) -> None: ...

class VisualBasicCompilationOptions(CodeAnalysis.CompilationOptions):
    """    """
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, globalImports: Generic.IEnumerable, rootNamespace: str, optionStrict: OptionStrict, optionInfer: bool, optionExplicit: bool, optionCompareText: bool, parseOptions: VisualBasicParseOptions, embedVbCoreRuntime: bool, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, globalImports: Generic.IEnumerable, rootNamespace: str, optionStrict: OptionStrict, optionInfer: bool, optionExplicit: bool, optionCompareText: bool, parseOptions: VisualBasicParseOptions, embedVbCoreRuntime: bool, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, reportSuppressedDiagnostics: bool, moduleName: str, mainTypeName: str, scriptClassName: str, globalImports: Generic.IEnumerable, rootNamespace: str, optionStrict: OptionStrict, optionInfer: bool, optionExplicit: bool, optionCompareText: bool, parseOptions: VisualBasicParseOptions, embedVbCoreRuntime: bool, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, globalImports: Generic.IEnumerable, rootNamespace: str, optionStrict: OptionStrict, optionInfer: bool, optionExplicit: bool, optionCompareText: bool, parseOptions: VisualBasicParseOptions, embedVbCoreRuntime: bool, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider, publicSign: bool, reportSuppressedDiagnostics: bool): ...
    @overload
    def __init__(self, outputKind: CodeAnalysis.OutputKind, moduleName: str, mainTypeName: str, scriptClassName: str, globalImports: Generic.IEnumerable, rootNamespace: str, optionStrict: OptionStrict, optionInfer: bool, optionExplicit: bool, optionCompareText: bool, parseOptions: VisualBasicParseOptions, embedVbCoreRuntime: bool, optimizationLevel: CodeAnalysis.OptimizationLevel, checkOverflow: bool, cryptoKeyContainer: str, cryptoKeyFile: str, cryptoPublicKey: Immutable.ImmutableArray, delaySign: System.Nullable, platform: CodeAnalysis.Platform, generalDiagnosticOption: CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions: Generic.IEnumerable, concurrentBuild: bool, deterministic: bool, xmlReferenceResolver: CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver: CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver: CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer: CodeAnalysis.AssemblyIdentityComparer, strongNameProvider: CodeAnalysis.StrongNameProvider, publicSign: bool, reportSuppressedDiagnostics: bool, metadataImportOptions: CodeAnalysis.MetadataImportOptions): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: VisualBasicCompilationOptions) -> bool: ...
    @property
    def EmbedVbCoreRuntime(self) -> bool: ...
    @property
    def GlobalImports(self) -> Immutable.ImmutableArray: ...
    @property
    def Language(self) -> str: ...
    @property
    def NullableContextOptions(self) -> CodeAnalysis.NullableContextOptions: ...
    @property
    def OptionCompareText(self) -> bool: ...
    @property
    def OptionExplicit(self) -> bool: ...
    @property
    def OptionInfer(self) -> bool: ...
    @property
    def OptionStrict(self) -> OptionStrict: ...
    @property
    def ParseOptions(self) -> VisualBasicParseOptions: ...
    @property
    def RootNamespace(self) -> str: ...
    @overload
    def WithAssemblyIdentityComparer(self, comparer: CodeAnalysis.AssemblyIdentityComparer) -> VisualBasicCompilationOptions: ...
    @overload
    def WithConcurrentBuild(self, concurrentBuild: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithCryptoKeyContainer(self, name: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithCryptoKeyFile(self, path: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithCryptoPublicKey(self, value: Immutable.ImmutableArray) -> VisualBasicCompilationOptions: ...
    @overload
    def WithDelaySign(self, value: System.Nullable) -> VisualBasicCompilationOptions: ...
    @overload
    def WithDeterministic(self, deterministic: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithEmbedVbCoreRuntime(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithGeneralDiagnosticOption(self, value: CodeAnalysis.ReportDiagnostic) -> VisualBasicCompilationOptions: ...
    @overload
    def WithGlobalImports(self, globalImports: Immutable.ImmutableArray) -> VisualBasicCompilationOptions: ...
    @overload
    def WithGlobalImports(self, globalImports: Generic.IEnumerable) -> VisualBasicCompilationOptions: ...
    @overload
    def WithGlobalImports(self, globalImports: System.Array[GlobalImport]) -> VisualBasicCompilationOptions: ...
    @overload
    def WithMainTypeName(self, name: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithMetadataImportOptions(self, value: CodeAnalysis.MetadataImportOptions) -> VisualBasicCompilationOptions: ...
    @overload
    def WithMetadataReferenceResolver(self, resolver: CodeAnalysis.MetadataReferenceResolver) -> VisualBasicCompilationOptions: ...
    @overload
    def WithModuleName(self, moduleName: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOptimizationLevel(self, value: CodeAnalysis.OptimizationLevel) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOptionCompareText(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOptionExplicit(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOptionInfer(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOptionStrict(self, value: OptionStrict) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOutputKind(self, kind: CodeAnalysis.OutputKind) -> VisualBasicCompilationOptions: ...
    @overload
    def WithOverflowChecks(self, enabled: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithParseOptions(self, options: VisualBasicParseOptions) -> VisualBasicCompilationOptions: ...
    @overload
    def WithPlatform(self, value: CodeAnalysis.Platform) -> VisualBasicCompilationOptions: ...
    @overload
    def WithPublicSign(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithReportSuppressedDiagnostics(self, value: bool) -> VisualBasicCompilationOptions: ...
    @overload
    def WithRootNamespace(self, rootNamespace: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithScriptClassName(self, name: str) -> VisualBasicCompilationOptions: ...
    @overload
    def WithSourceReferenceResolver(self, resolver: CodeAnalysis.SourceReferenceResolver) -> VisualBasicCompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, value: Generic.IEnumerable) -> VisualBasicCompilationOptions: ...
    @overload
    def WithSpecificDiagnosticOptions(self, value: Immutable.ImmutableDictionary) -> VisualBasicCompilationOptions: ...
    @overload
    def WithStrongNameProvider(self, provider: CodeAnalysis.StrongNameProvider) -> VisualBasicCompilationOptions: ...
    @overload
    def WithSyntaxTreeOptionsProvider(self, provider: CodeAnalysis.SyntaxTreeOptionsProvider) -> VisualBasicCompilationOptions: ...
    @overload
    def WithXmlReferenceResolver(self, resolver: CodeAnalysis.XmlReferenceResolver) -> VisualBasicCompilationOptions: ...

class VisualBasicExtensions(object):
    """    """
    @overload
    @staticmethod
    def Add(list_: CodeAnalysis.SyntaxTokenList, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def AliasImports(compilation: CodeAnalysis.Compilation) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: CodeAnalysis.SemanticModel, statement: Syntax.StatementSyntax) -> CodeAnalysis.ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeControlFlow(semanticModel: CodeAnalysis.SemanticModel, firstStatement: Syntax.StatementSyntax, lastStatement: Syntax.StatementSyntax) -> CodeAnalysis.ControlFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, statement: Syntax.StatementSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AnalyzeDataFlow(semanticModel: CodeAnalysis.SemanticModel, firstStatement: Syntax.StatementSyntax, lastStatement: Syntax.StatementSyntax) -> CodeAnalysis.DataFlowAnalysis: ...
    @overload
    @staticmethod
    def AssociatedField(eventSymbol: CodeAnalysis.IEventSymbol) -> CodeAnalysis.IFieldSymbol: ...
    @overload
    @staticmethod
    def ClassifyConversion(compilation: CodeAnalysis.Compilation, source: CodeAnalysis.ITypeSymbol, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    @staticmethod
    def ClassifyConversion(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    @staticmethod
    def ClassifyConversion(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, destination: CodeAnalysis.ITypeSymbol) -> Conversion: ...
    @overload
    @staticmethod
    def GetAggregateClauseSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, aggregateSyntax: Syntax.AggregateClauseSyntax, cancellationToken: Threading.CancellationToken) -> AggregateClauseSymbolInfo: ...
    @overload
    @staticmethod
    def GetAliasInfo(semanticModel: CodeAnalysis.SemanticModel, nameSyntax: Syntax.IdentifierNameSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetAwaitExpressionInfo(semanticModel: CodeAnalysis.SemanticModel, awaitExpression: Syntax.AwaitExpressionSyntax, cancellationToken: Threading.CancellationToken) -> AwaitExpressionInfo: ...
    @overload
    @staticmethod
    def GetBase(token: CodeAnalysis.SyntaxToken) -> System.Nullable: ...
    @overload
    @staticmethod
    def GetCollectionInitializerSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetCollectionRangeVariableSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, variableSyntax: Syntax.CollectionRangeVariableSyntax, cancellationToken: Threading.CancellationToken) -> CollectionRangeVariableSymbolInfo: ...
    @overload
    @staticmethod
    def GetCompilationUnitRoot(tree: CodeAnalysis.SyntaxTree) -> Syntax.CompilationUnitSyntax: ...
    @overload
    @staticmethod
    def GetConversion(conversionExpression: Operations.IConversionOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetConversion(semanticModel: CodeAnalysis.SemanticModel, expression: CodeAnalysis.SyntaxNode, cancellationToken: Threading.CancellationToken) -> Conversion: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.TypeBlockSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EnumBlockSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.NamespaceStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamespaceSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.NamespaceBlockSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamespaceSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EnumStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.TypeStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, elementSyntax: Syntax.TupleElementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.LabelStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILabelSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, rangeVariableSyntax: Syntax.AggregationRangeVariableSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, identifierSyntax: Syntax.ModifiedIdentifierSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ISymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, fieldInitializerSyntax: Syntax.FieldInitializerSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, anonymousObjectCreationExpressionSyntax: Syntax.AnonymousObjectCreationExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EnumMemberDeclarationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IFieldSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, parameter: Syntax.ParameterSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IParameterSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.MethodBlockBaseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, typeParameter: Syntax.TypeParameterSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ITypeParameterSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.SimpleImportsClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.AccessorStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.CatchStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.ILocalSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EventBlockSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IEventSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.EventStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IEventSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.PropertyStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.PropertyBlockSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IPropertySymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.OperatorStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.DeclareStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.MethodStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.SubNewStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IMethodSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, declarationSyntax: Syntax.DelegateStatementSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, rangeVariableSyntax: Syntax.ExpressionRangeVariableSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDeclaredSymbol(semanticModel: CodeAnalysis.SemanticModel, rangeVariableSyntax: Syntax.CollectionRangeVariableSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.IRangeVariableSymbol: ...
    @overload
    @staticmethod
    def GetDirectives(node: CodeAnalysis.SyntaxNode, filter_: System.Func) -> Generic.IList: ...
    @overload
    @staticmethod
    def GetFieldAttributes(eventSymbol: CodeAnalysis.IEventSymbol) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetFirstDirective(node: CodeAnalysis.SyntaxNode, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def GetForEachStatementInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.ForEachStatementSyntax) -> ForEachStatementInfo: ...
    @overload
    @staticmethod
    def GetForEachStatementInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.ForEachBlockSyntax) -> ForEachStatementInfo: ...
    @overload
    @staticmethod
    def GetIdentifierText(token: CodeAnalysis.SyntaxToken) -> str: ...
    @overload
    @staticmethod
    def GetInConversion(compoundAssignment: Operations.ICompoundAssignmentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetInConversion(argument: Operations.IArgumentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetLastDirective(node: CodeAnalysis.SyntaxNode, predicate: System.Func) -> Syntax.DirectiveTriviaSyntax: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetMemberGroup(semanticModel: CodeAnalysis.SemanticModel, attribute: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetModuleMembers(namespace: CodeAnalysis.INamespaceSymbol) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetModuleMembers(namespace: CodeAnalysis.INamespaceSymbol, name: str) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetOutConversion(compoundAssignment: Operations.ICompoundAssignmentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetOutConversion(argument: Operations.IArgumentOperation) -> Conversion: ...
    @overload
    @staticmethod
    def GetPreprocessingSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, node: Syntax.IdentifierNameSyntax) -> CodeAnalysis.PreprocessingSymbolInfo: ...
    @overload
    @staticmethod
    def GetSpecialType(compilation: CodeAnalysis.Compilation, typeId: CodeAnalysis.SpecialType) -> CodeAnalysis.INamedTypeSymbol: ...
    @overload
    @staticmethod
    def GetSpeculativeAliasInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, nameSyntax: Syntax.IdentifierNameSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.IAliasSymbol: ...
    @overload
    @staticmethod
    def GetSpeculativeConversion(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> Conversion: ...
    @overload
    @staticmethod
    def GetSpeculativeMemberGroup(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, attribute: Syntax.AttributeSyntax) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSpeculativeTypeInfo(semanticModel: CodeAnalysis.SemanticModel, position: int, expression: Syntax.ExpressionSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, clauseSyntax: Syntax.QueryClauseSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, attribute: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, crefReference: Syntax.CrefReferenceSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, variableSyntax: Syntax.ExpressionRangeVariableSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, orderingSyntax: Syntax.OrderingSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetSymbolInfo(semanticModel: CodeAnalysis.SemanticModel, functionSyntax: Syntax.FunctionAggregationSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.SymbolInfo: ...
    @overload
    @staticmethod
    def GetTypeCharacter(token: CodeAnalysis.SyntaxToken) -> Syntax.TypeCharacter: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, attribute: Syntax.AttributeSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def GetTypeInfo(semanticModel: CodeAnalysis.SemanticModel, expression: Syntax.ExpressionSyntax, cancellationToken: Threading.CancellationToken) -> CodeAnalysis.TypeInfo: ...
    @overload
    @staticmethod
    def HandledEvents(methodSymbol: CodeAnalysis.IMethodSymbol) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def HasAssociatedField(eventSymbol: CodeAnalysis.IEventSymbol) -> bool: ...
    @overload
    @staticmethod
    def Insert(list_: CodeAnalysis.SyntaxTokenList, index: int, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    @staticmethod
    def IsBracketed(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsCatch(localSymbol: CodeAnalysis.ILocalSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsContextualKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsDefault(propertySymbol: CodeAnalysis.IPropertySymbol) -> bool: ...
    @overload
    @staticmethod
    def IsFor(localSymbol: CodeAnalysis.ILocalSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsForEach(localSymbol: CodeAnalysis.ILocalSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsImplicitlyDeclared(eventSymbol: CodeAnalysis.IEventSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsMe(parameterSymbol: CodeAnalysis.IParameterSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsMustOverride(symbol: CodeAnalysis.ISymbol) -> bool: ...
    @overload
    @staticmethod
    def IsNotOverridable(symbol: CodeAnalysis.ISymbol) -> bool: ...
    @overload
    @staticmethod
    def IsOverloads(methodSymbol: CodeAnalysis.IMethodSymbol) -> bool: ...
    @overload
    @staticmethod
    def IsOverloads(propertySymbol: CodeAnalysis.IPropertySymbol) -> bool: ...
    @overload
    @staticmethod
    def IsOverridable(symbol: CodeAnalysis.ISymbol) -> bool: ...
    @overload
    @staticmethod
    def IsOverrides(symbol: CodeAnalysis.ISymbol) -> bool: ...
    @overload
    @staticmethod
    def IsPreprocessorKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsReservedKeyword(token: CodeAnalysis.SyntaxToken) -> bool: ...
    @overload
    @staticmethod
    def IsShared(symbol: CodeAnalysis.ISymbol) -> bool: ...
    @overload
    @staticmethod
    def Kind(node: CodeAnalysis.SyntaxNode) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(nodeOrToken: CodeAnalysis.SyntaxNodeOrToken) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(token: CodeAnalysis.SyntaxToken) -> SyntaxKind: ...
    @overload
    @staticmethod
    def Kind(trivia: CodeAnalysis.SyntaxTrivia) -> SyntaxKind: ...
    @overload
    @staticmethod
    def MemberImports(compilation: CodeAnalysis.Compilation) -> Immutable.ImmutableArray: ...
    @overload
    @staticmethod
    def OptionCompareText(semanticModel: CodeAnalysis.SemanticModel) -> bool: ...
    @overload
    @staticmethod
    def OptionExplicit(semanticModel: CodeAnalysis.SemanticModel) -> bool: ...
    @overload
    @staticmethod
    def OptionInfer(semanticModel: CodeAnalysis.SemanticModel) -> bool: ...
    @overload
    @staticmethod
    def OptionStrict(semanticModel: CodeAnalysis.SemanticModel) -> OptionStrict: ...
    @overload
    @staticmethod
    def ReplaceTrivia(token: CodeAnalysis.SyntaxToken, trivia: Generic.IEnumerable, computeReplacementTrivia: System.Func) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def ReplaceTrivia(token: CodeAnalysis.SyntaxToken, oldTrivia: CodeAnalysis.SyntaxTrivia, newTrivia: CodeAnalysis.SyntaxTrivia) -> CodeAnalysis.SyntaxToken: ...
    @overload
    @staticmethod
    def RootNamespace(compilation: CodeAnalysis.Compilation) -> CodeAnalysis.INamespaceSymbol: ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, rangeArgument: Syntax.RangeArgumentSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, statement: Syntax.ExecutableStatementSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, initializer: Syntax.EqualsValueSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, attribute: Syntax.AttributeSyntax) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModel(semanticModel: CodeAnalysis.SemanticModel, position: int, type_: Syntax.TypeSyntax, bindingOption: CodeAnalysis.SpeculativeBindingOption) -> (bool, CodeAnalysis.SemanticModel): ...
    @overload
    @staticmethod
    def TryGetSpeculativeSemanticModelForMethodBody(semanticModel: CodeAnalysis.SemanticModel, position: int, method: Syntax.MethodBlockBaseSyntax) -> (bool, CodeAnalysis.SemanticModel): ...

class VisualBasicParseOptions(CodeAnalysis.ParseOptions):
    """    """
    def __init__(self, languageVersion: LanguageVersion, documentationMode: CodeAnalysis.DocumentationMode, kind: CodeAnalysis.SourceCodeKind, preprocessorSymbols: Generic.IEnumerable): ...
    @overload
    def CommonWithKind(self, kind: CodeAnalysis.SourceCodeKind) -> CodeAnalysis.ParseOptions: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: VisualBasicParseOptions) -> bool: ...
    @property
    def Default(self) -> VisualBasicParseOptions: ...
    @property
    def Features(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def Language(self) -> str: ...
    @property
    def LanguageVersion(self) -> LanguageVersion: ...
    @property
    def PreprocessorSymbolNames(self) -> Generic.IEnumerable: ...
    @property
    def PreprocessorSymbols(self) -> Immutable.ImmutableArray: ...
    @property
    def SpecifiedLanguageVersion(self) -> LanguageVersion: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def WithDocumentationMode(self, documentationMode: CodeAnalysis.DocumentationMode) -> VisualBasicParseOptions: ...
    @overload
    def WithFeatures(self, features: Generic.IEnumerable) -> VisualBasicParseOptions: ...
    @overload
    def WithKind(self, kind: CodeAnalysis.SourceCodeKind) -> VisualBasicParseOptions: ...
    @overload
    def WithLanguageVersion(self, version: LanguageVersion) -> VisualBasicParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, symbols: Generic.System.Array[Generic.KeyValuePair]) -> VisualBasicParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, symbols: Generic.IEnumerable) -> VisualBasicParseOptions: ...
    @overload
    def WithPreprocessorSymbols(self, symbols: Immutable.ImmutableArray) -> VisualBasicParseOptions: ...

# endregion
