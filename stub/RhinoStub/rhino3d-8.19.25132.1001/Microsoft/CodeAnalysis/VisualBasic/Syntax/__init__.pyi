"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["TypeCharacter", "LiteralBase", "StatementSyntax", "ExecutableStatementSyntax", "DeclarationStatementSyntax", "EmptyStatementSyntax", "EndBlockStatementSyntax", "CompilationUnitSyntax", "OptionStatementSyntax", "ImportsStatementSyntax", "ImportsClauseSyntax", "SimpleImportsClauseSyntax", "ImportAliasClauseSyntax", "XmlNamespaceImportsClauseSyntax", "NamespaceBlockSyntax", "NamespaceStatementSyntax", "TypeBlockSyntax", "ModuleBlockSyntax", "StructureBlockSyntax", "InterfaceBlockSyntax", "ClassBlockSyntax", "EnumBlockSyntax", "InheritsOrImplementsStatementSyntax", "InheritsStatementSyntax", "ImplementsStatementSyntax", "TypeStatementSyntax", "ModuleStatementSyntax", "StructureStatementSyntax", "InterfaceStatementSyntax", "ClassStatementSyntax", "EnumStatementSyntax", "TypeParameterListSyntax", "TypeParameterSyntax", "TypeParameterConstraintClauseSyntax", "TypeParameterSingleConstraintClauseSyntax", "TypeParameterMultipleConstraintClauseSyntax", "ConstraintSyntax", "SpecialConstraintSyntax", "TypeConstraintSyntax", "EnumMemberDeclarationSyntax", "MethodBlockBaseSyntax", "MethodBlockSyntax", "ConstructorBlockSyntax", "OperatorBlockSyntax", "AccessorBlockSyntax", "PropertyBlockSyntax", "EventBlockSyntax", "MethodBaseSyntax", "ParameterListSyntax", "MethodStatementSyntax", "SubNewStatementSyntax", "DeclareStatementSyntax", "DelegateStatementSyntax", "EventStatementSyntax", "OperatorStatementSyntax", "PropertyStatementSyntax", "AccessorStatementSyntax", "ImplementsClauseSyntax", "HandlesClauseSyntax", "EventContainerSyntax", "KeywordEventContainerSyntax", "WithEventsEventContainerSyntax", "WithEventsPropertyEventContainerSyntax", "HandlesClauseItemSyntax", "IncompleteMemberSyntax", "FieldDeclarationSyntax", "VariableDeclaratorSyntax", "AsClauseSyntax", "SimpleAsClauseSyntax", "AsNewClauseSyntax", "ObjectCreationInitializerSyntax", "ObjectMemberInitializerSyntax", "ObjectCollectionInitializerSyntax", "FieldInitializerSyntax", "InferredFieldInitializerSyntax", "NamedFieldInitializerSyntax", "EqualsValueSyntax", "ParameterSyntax", "ModifiedIdentifierSyntax", "ArrayRankSpecifierSyntax", "AttributeListSyntax", "AttributeSyntax", "AttributeTargetSyntax", "AttributesStatementSyntax", "ExpressionStatementSyntax", "PrintStatementSyntax", "WhileBlockSyntax", "UsingBlockSyntax", "SyncLockBlockSyntax", "WithBlockSyntax", "LocalDeclarationStatementSyntax", "LabelStatementSyntax", "GoToStatementSyntax", "LabelSyntax", "StopOrEndStatementSyntax", "ExitStatementSyntax", "ContinueStatementSyntax", "ReturnStatementSyntax", "SingleLineIfStatementSyntax", "SingleLineElseClauseSyntax", "MultiLineIfBlockSyntax", "IfStatementSyntax", "ElseIfBlockSyntax", "ElseIfStatementSyntax", "ElseBlockSyntax", "ElseStatementSyntax", "TryBlockSyntax", "TryStatementSyntax", "CatchBlockSyntax", "CatchStatementSyntax", "CatchFilterClauseSyntax", "FinallyBlockSyntax", "FinallyStatementSyntax", "ErrorStatementSyntax", "OnErrorGoToStatementSyntax", "OnErrorResumeNextStatementSyntax", "ResumeStatementSyntax", "SelectBlockSyntax", "SelectStatementSyntax", "CaseBlockSyntax", "CaseStatementSyntax", "CaseClauseSyntax", "ElseCaseClauseSyntax", "SimpleCaseClauseSyntax", "RangeCaseClauseSyntax", "RelationalCaseClauseSyntax", "SyncLockStatementSyntax", "DoLoopBlockSyntax", "DoStatementSyntax", "LoopStatementSyntax", "WhileOrUntilClauseSyntax", "WhileStatementSyntax", "ForOrForEachBlockSyntax", "ForBlockSyntax", "ForEachBlockSyntax", "ForOrForEachStatementSyntax", "ForStatementSyntax", "ForStepClauseSyntax", "ForEachStatementSyntax", "NextStatementSyntax", "UsingStatementSyntax", "ThrowStatementSyntax", "AssignmentStatementSyntax", "MidExpressionSyntax", "CallStatementSyntax", "AddRemoveHandlerStatementSyntax", "RaiseEventStatementSyntax", "WithStatementSyntax", "ReDimStatementSyntax", "RedimClauseSyntax", "EraseStatementSyntax", "ExpressionSyntax", "LiteralExpressionSyntax", "ParenthesizedExpressionSyntax", "TupleExpressionSyntax", "TupleTypeSyntax", "TupleElementSyntax", "TypedTupleElementSyntax", "NamedTupleElementSyntax", "InstanceExpressionSyntax", "MeExpressionSyntax", "MyBaseExpressionSyntax", "MyClassExpressionSyntax", "GetTypeExpressionSyntax", "TypeOfExpressionSyntax", "GetXmlNamespaceExpressionSyntax", "MemberAccessExpressionSyntax", "XmlMemberAccessExpressionSyntax", "InvocationExpressionSyntax", "NewExpressionSyntax", "ObjectCreationExpressionSyntax", "AnonymousObjectCreationExpressionSyntax", "ArrayCreationExpressionSyntax", "CollectionInitializerSyntax", "CastExpressionSyntax", "CTypeExpressionSyntax", "DirectCastExpressionSyntax", "TryCastExpressionSyntax", "PredefinedCastExpressionSyntax", "BinaryExpressionSyntax", "UnaryExpressionSyntax", "BinaryConditionalExpressionSyntax", "TernaryConditionalExpressionSyntax", "LambdaExpressionSyntax", "SingleLineLambdaExpressionSyntax", "MultiLineLambdaExpressionSyntax", "LambdaHeaderSyntax", "ArgumentListSyntax", "ArgumentSyntax", "OmittedArgumentSyntax", "SimpleArgumentSyntax", "NameColonEqualsSyntax", "RangeArgumentSyntax", "QueryExpressionSyntax", "QueryClauseSyntax", "CollectionRangeVariableSyntax", "ExpressionRangeVariableSyntax", "AggregationRangeVariableSyntax", "VariableNameEqualsSyntax", "AggregationSyntax", "FunctionAggregationSyntax", "GroupAggregationSyntax", "FromClauseSyntax", "LetClauseSyntax", "AggregateClauseSyntax", "DistinctClauseSyntax", "WhereClauseSyntax", "PartitionWhileClauseSyntax", "PartitionClauseSyntax", "GroupByClauseSyntax", "JoinClauseSyntax", "JoinConditionSyntax", "SimpleJoinClauseSyntax", "GroupJoinClauseSyntax", "OrderByClauseSyntax", "OrderingSyntax", "SelectClauseSyntax", "XmlNodeSyntax", "XmlDocumentSyntax", "XmlDeclarationSyntax", "XmlDeclarationOptionSyntax", "XmlElementSyntax", "XmlTextSyntax", "XmlElementStartTagSyntax", "XmlElementEndTagSyntax", "XmlEmptyElementSyntax", "XmlAttributeSyntax", "BaseXmlAttributeSyntax", "XmlStringSyntax", "XmlPrefixNameSyntax", "XmlNameSyntax", "XmlBracketedNameSyntax", "XmlPrefixSyntax", "XmlCommentSyntax", "XmlProcessingInstructionSyntax", "XmlCDataSectionSyntax", "XmlEmbeddedExpressionSyntax", "TypeSyntax", "ArrayTypeSyntax", "NullableTypeSyntax", "PredefinedTypeSyntax", "NameSyntax", "SimpleNameSyntax", "IdentifierNameSyntax", "GenericNameSyntax", "QualifiedNameSyntax", "GlobalNameSyntax", "TypeArgumentListSyntax", "CrefReferenceSyntax", "CrefSignatureSyntax", "CrefSignaturePartSyntax", "CrefOperatorReferenceSyntax", "QualifiedCrefOperatorReferenceSyntax", "YieldStatementSyntax", "AwaitExpressionSyntax", "StructuredTriviaSyntax", "SkippedTokensTriviaSyntax", "DocumentationCommentTriviaSyntax", "XmlCrefAttributeSyntax", "XmlNameAttributeSyntax", "ConditionalAccessExpressionSyntax", "NameOfExpressionSyntax", "InterpolatedStringExpressionSyntax", "InterpolatedStringContentSyntax", "InterpolatedStringTextSyntax", "InterpolationSyntax", "InterpolationAlignmentClauseSyntax", "InterpolationFormatClauseSyntax", "DirectiveTriviaSyntax", "ConstDirectiveTriviaSyntax", "IfDirectiveTriviaSyntax", "ElseDirectiveTriviaSyntax", "EndIfDirectiveTriviaSyntax", "RegionDirectiveTriviaSyntax", "EndRegionDirectiveTriviaSyntax", "ExternalSourceDirectiveTriviaSyntax", "EndExternalSourceDirectiveTriviaSyntax", "ExternalChecksumDirectiveTriviaSyntax", "EnableWarningDirectiveTriviaSyntax", "DisableWarningDirectiveTriviaSyntax", "ReferenceDirectiveTriviaSyntax", "BadDirectiveTriviaSyntax", "SyntaxNodeRemover"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import VisualBasic
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis.VisualBasic, Version=4.6.0.0

class TypeCharacter(enum.Enum):
    None_ = 0
    Integer = 1
    Long = 2
    Decimal = 3
    Single = 4
    Double = 5
    String = 6
    ShortLiteral = 7
    UShortLiteral = 8
    IntegerLiteral = 9
    UIntegerLiteral = 10
    LongLiteral = 11
    ULongLiteral = 12
    SingleLiteral = 13
    DoubleLiteral = 14
    DecimalLiteral = 15

class LiteralBase(enum.Enum):
    Decimal = 0
    Hexadecimal = 1
    Octal = 2
    Binary = 3

class StatementSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class ExecutableStatementSyntax(StatementSyntax):
    """    """

class DeclarationStatementSyntax(StatementSyntax):
    """    """

class EmptyStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Empty(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, empty: CodeAnalysis.SyntaxToken) -> EmptyStatementSyntax: ...
    @overload
    def WithEmpty(self, empty: CodeAnalysis.SyntaxToken) -> EmptyStatementSyntax: ...

class EndBlockStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def BlockKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, endKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> EndBlockStatementSyntax: ...
    @overload
    def WithBlockKeyword(self, blockKeyword: CodeAnalysis.SyntaxToken) -> EndBlockStatementSyntax: ...
    @overload
    def WithEndKeyword(self, endKeyword: CodeAnalysis.SyntaxToken) -> EndBlockStatementSyntax: ...

class CompilationUnitSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[AttributesStatementSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddImports(self, items: System.Array[ImportsStatementSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> CompilationUnitSyntax: ...
    @overload
    def AddOptions(self, items: System.Array[OptionStatementSyntax]) -> CompilationUnitSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndOfFileToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Imports(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Options(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def GetReferenceDirectives() -> Generic.IList: ...
    @overload
    def Update(self, options: CodeAnalysis.SyntaxList, imports: CodeAnalysis.SyntaxList, attributes: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endOfFileToken: CodeAnalysis.SyntaxToken) -> CompilationUnitSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithEndOfFileToken(self, endOfFileToken: CodeAnalysis.SyntaxToken) -> CompilationUnitSyntax: ...
    @overload
    def WithImports(self, imports: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...
    @overload
    def WithOptions(self, options: CodeAnalysis.SyntaxList) -> CompilationUnitSyntax: ...

class OptionStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def NameKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OptionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ValueKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, optionKeyword: CodeAnalysis.SyntaxToken, nameKeyword: CodeAnalysis.SyntaxToken, valueKeyword: CodeAnalysis.SyntaxToken) -> OptionStatementSyntax: ...
    @overload
    def WithNameKeyword(self, nameKeyword: CodeAnalysis.SyntaxToken) -> OptionStatementSyntax: ...
    @overload
    def WithOptionKeyword(self, optionKeyword: CodeAnalysis.SyntaxToken) -> OptionStatementSyntax: ...
    @overload
    def WithValueKeyword(self, valueKeyword: CodeAnalysis.SyntaxToken) -> OptionStatementSyntax: ...

class ImportsStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddImportsClauses(self, items: System.Array[ImportsClauseSyntax]) -> ImportsStatementSyntax: ...
    @property
    def ImportsClauses(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def ImportsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, importsKeyword: CodeAnalysis.SyntaxToken, importsClauses: CodeAnalysis.SeparatedSyntaxList) -> ImportsStatementSyntax: ...
    @overload
    def WithImportsClauses(self, importsClauses: CodeAnalysis.SeparatedSyntaxList) -> ImportsStatementSyntax: ...
    @overload
    def WithImportsKeyword(self, importsKeyword: CodeAnalysis.SyntaxToken) -> ImportsStatementSyntax: ...

class ImportsClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class SimpleImportsClauseSyntax(ImportsClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Alias(self) -> ImportAliasClauseSyntax: ...
    @property
    def Name(self) -> NameSyntax: ...
    @overload
    def Update(self, alias: ImportAliasClauseSyntax, name: NameSyntax) -> SimpleImportsClauseSyntax: ...
    @overload
    def WithAlias(self, alias: ImportAliasClauseSyntax) -> SimpleImportsClauseSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> SimpleImportsClauseSyntax: ...

class ImportAliasClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken) -> ImportAliasClauseSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> ImportAliasClauseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ImportAliasClauseSyntax: ...

class XmlNamespaceImportsClauseSyntax(ImportsClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def XmlNamespace(self) -> XmlAttributeSyntax: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, xmlNamespace: XmlAttributeSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlNamespaceImportsClauseSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlNamespaceImportsClauseSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlNamespaceImportsClauseSyntax: ...
    @overload
    def WithXmlNamespace(self, xmlNamespace: XmlAttributeSyntax) -> XmlNamespaceImportsClauseSyntax: ...

class NamespaceBlockSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> NamespaceBlockSyntax: ...
    @property
    def EndNamespaceStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def NamespaceStatement(self) -> NamespaceStatementSyntax: ...
    @overload
    def Update(self, namespaceStatement: NamespaceStatementSyntax, members: CodeAnalysis.SyntaxList, endNamespaceStatement: EndBlockStatementSyntax) -> NamespaceBlockSyntax: ...
    @overload
    def WithEndNamespaceStatement(self, endNamespaceStatement: EndBlockStatementSyntax) -> NamespaceBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> NamespaceBlockSyntax: ...
    @overload
    def WithNamespaceStatement(self, namespaceStatement: NamespaceStatementSyntax) -> NamespaceBlockSyntax: ...

class NamespaceStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Name(self) -> NameSyntax: ...
    @property
    def NamespaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, namespaceKeyword: CodeAnalysis.SyntaxToken, name: NameSyntax) -> NamespaceStatementSyntax: ...
    @overload
    def WithName(self, name: NameSyntax) -> NamespaceStatementSyntax: ...
    @overload
    def WithNamespaceKeyword(self, namespaceKeyword: CodeAnalysis.SyntaxToken) -> NamespaceStatementSyntax: ...

class TypeBlockSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def AddImplements(self, items: System.Array[ImplementsStatementSyntax]) -> TypeBlockSyntax: ...
    @overload
    def AddInherits(self, items: System.Array[InheritsStatementSyntax]) -> TypeBlockSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> TypeBlockSyntax: ...
    @property
    def Begin(self) -> TypeStatementSyntax: ...
    @property
    def BlockStatement(self) -> TypeStatementSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Implements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Inherits(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithBlockStatement(self, blockStatement: TypeStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithImplements(self, implements: CodeAnalysis.SyntaxList) -> TypeBlockSyntax: ...
    @overload
    def WithInherits(self, inherits: CodeAnalysis.SyntaxList) -> TypeBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> TypeBlockSyntax: ...

class ModuleBlockSyntax(TypeBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddImplements(self, items: System.Array[ImplementsStatementSyntax]) -> ModuleBlockSyntax: ...
    @overload
    def AddInherits(self, items: System.Array[InheritsStatementSyntax]) -> ModuleBlockSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> ModuleBlockSyntax: ...
    @property
    def Begin(self) -> ModuleStatementSyntax: ...
    @property
    def BlockStatement(self) -> TypeStatementSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndModuleStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Implements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Inherits(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ModuleStatement(self) -> ModuleStatementSyntax: ...
    @overload
    def Update(self, moduleStatement: ModuleStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endModuleStatement: EndBlockStatementSyntax) -> ModuleBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: TypeStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndModuleStatement(self, endModuleStatement: EndBlockStatementSyntax) -> ModuleBlockSyntax: ...
    @overload
    def WithImplements(self, implements: CodeAnalysis.SyntaxList) -> ModuleBlockSyntax: ...
    @overload
    def WithInherits(self, inherits: CodeAnalysis.SyntaxList) -> ModuleBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> ModuleBlockSyntax: ...
    @overload
    def WithModuleStatement(self, moduleStatement: ModuleStatementSyntax) -> ModuleBlockSyntax: ...

class StructureBlockSyntax(TypeBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddImplements(self, items: System.Array[ImplementsStatementSyntax]) -> StructureBlockSyntax: ...
    @overload
    def AddInherits(self, items: System.Array[InheritsStatementSyntax]) -> StructureBlockSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> StructureBlockSyntax: ...
    @property
    def Begin(self) -> StructureStatementSyntax: ...
    @property
    def BlockStatement(self) -> TypeStatementSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndStructureStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Implements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Inherits(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def StructureStatement(self) -> StructureStatementSyntax: ...
    @overload
    def Update(self, structureStatement: StructureStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endStructureStatement: EndBlockStatementSyntax) -> StructureBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: TypeStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndStructureStatement(self, endStructureStatement: EndBlockStatementSyntax) -> StructureBlockSyntax: ...
    @overload
    def WithImplements(self, implements: CodeAnalysis.SyntaxList) -> StructureBlockSyntax: ...
    @overload
    def WithInherits(self, inherits: CodeAnalysis.SyntaxList) -> StructureBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> StructureBlockSyntax: ...
    @overload
    def WithStructureStatement(self, structureStatement: StructureStatementSyntax) -> StructureBlockSyntax: ...

class InterfaceBlockSyntax(TypeBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddImplements(self, items: System.Array[ImplementsStatementSyntax]) -> InterfaceBlockSyntax: ...
    @overload
    def AddInherits(self, items: System.Array[InheritsStatementSyntax]) -> InterfaceBlockSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> InterfaceBlockSyntax: ...
    @property
    def Begin(self) -> InterfaceStatementSyntax: ...
    @property
    def BlockStatement(self) -> TypeStatementSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndInterfaceStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Implements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Inherits(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def InterfaceStatement(self) -> InterfaceStatementSyntax: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, interfaceStatement: InterfaceStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endInterfaceStatement: EndBlockStatementSyntax) -> InterfaceBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: TypeStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndInterfaceStatement(self, endInterfaceStatement: EndBlockStatementSyntax) -> InterfaceBlockSyntax: ...
    @overload
    def WithImplements(self, implements: CodeAnalysis.SyntaxList) -> InterfaceBlockSyntax: ...
    @overload
    def WithInherits(self, inherits: CodeAnalysis.SyntaxList) -> InterfaceBlockSyntax: ...
    @overload
    def WithInterfaceStatement(self, interfaceStatement: InterfaceStatementSyntax) -> InterfaceBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> InterfaceBlockSyntax: ...

class ClassBlockSyntax(TypeBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddImplements(self, items: System.Array[ImplementsStatementSyntax]) -> ClassBlockSyntax: ...
    @overload
    def AddInherits(self, items: System.Array[InheritsStatementSyntax]) -> ClassBlockSyntax: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> ClassBlockSyntax: ...
    @property
    def Begin(self) -> ClassStatementSyntax: ...
    @property
    def BlockStatement(self) -> TypeStatementSyntax: ...
    @property
    def ClassStatement(self) -> ClassStatementSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndClassStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Implements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Inherits(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, classStatement: ClassStatementSyntax, inherits: CodeAnalysis.SyntaxList, implements: CodeAnalysis.SyntaxList, members: CodeAnalysis.SyntaxList, endClassStatement: EndBlockStatementSyntax) -> ClassBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: TypeStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithClassStatement(self, classStatement: ClassStatementSyntax) -> ClassBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> TypeBlockSyntax: ...
    @overload
    def WithEndClassStatement(self, endClassStatement: EndBlockStatementSyntax) -> ClassBlockSyntax: ...
    @overload
    def WithImplements(self, implements: CodeAnalysis.SyntaxList) -> ClassBlockSyntax: ...
    @overload
    def WithInherits(self, inherits: CodeAnalysis.SyntaxList) -> ClassBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> ClassBlockSyntax: ...

class EnumBlockSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddMembers(self, items: System.Array[StatementSyntax]) -> EnumBlockSyntax: ...
    @property
    def EndEnumStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EnumStatement(self) -> EnumStatementSyntax: ...
    @property
    def Members(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, enumStatement: EnumStatementSyntax, members: CodeAnalysis.SyntaxList, endEnumStatement: EndBlockStatementSyntax) -> EnumBlockSyntax: ...
    @overload
    def WithEndEnumStatement(self, endEnumStatement: EndBlockStatementSyntax) -> EnumBlockSyntax: ...
    @overload
    def WithEnumStatement(self, enumStatement: EnumStatementSyntax) -> EnumBlockSyntax: ...
    @overload
    def WithMembers(self, members: CodeAnalysis.SyntaxList) -> EnumBlockSyntax: ...

class InheritsOrImplementsStatementSyntax(DeclarationStatementSyntax):
    """    """

class InheritsStatementSyntax(InheritsOrImplementsStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTypes(self, items: System.Array[TypeSyntax]) -> InheritsStatementSyntax: ...
    @property
    def InheritsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Types(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, inheritsKeyword: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> InheritsStatementSyntax: ...
    @overload
    def WithInheritsKeyword(self, inheritsKeyword: CodeAnalysis.SyntaxToken) -> InheritsStatementSyntax: ...
    @overload
    def WithTypes(self, types: CodeAnalysis.SeparatedSyntaxList) -> InheritsStatementSyntax: ...

class ImplementsStatementSyntax(InheritsOrImplementsStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTypes(self, items: System.Array[TypeSyntax]) -> ImplementsStatementSyntax: ...
    @property
    def ImplementsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Types(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, implementsKeyword: CodeAnalysis.SyntaxToken, types: CodeAnalysis.SeparatedSyntaxList) -> ImplementsStatementSyntax: ...
    @overload
    def WithImplementsKeyword(self, implementsKeyword: CodeAnalysis.SyntaxToken) -> ImplementsStatementSyntax: ...
    @overload
    def WithTypes(self, types: CodeAnalysis.SeparatedSyntaxList) -> ImplementsStatementSyntax: ...

class TypeStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> TypeStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> TypeStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> TypeStatementSyntax: ...
    @property
    def Arity(self) -> int: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> TypeStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> TypeStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> TypeStatementSyntax: ...

class ModuleStatementSyntax(TypeStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ModuleStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ModuleStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> ModuleStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ModuleKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, moduleKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax) -> ModuleStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ModuleStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ModuleStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ModuleStatementSyntax: ...
    @overload
    def WithModuleKeyword(self, moduleKeyword: CodeAnalysis.SyntaxToken) -> ModuleStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> ModuleStatementSyntax: ...

class StructureStatementSyntax(TypeStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> StructureStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> StructureStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> StructureStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def StructureKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, structureKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax) -> StructureStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> StructureStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> StructureStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> StructureStatementSyntax: ...
    @overload
    def WithStructureKeyword(self, structureKeyword: CodeAnalysis.SyntaxToken) -> StructureStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> StructureStatementSyntax: ...

class InterfaceStatementSyntax(TypeStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> InterfaceStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> InterfaceStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> InterfaceStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InterfaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, interfaceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax) -> InterfaceStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> InterfaceStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> InterfaceStatementSyntax: ...
    @overload
    def WithInterfaceKeyword(self, interfaceKeyword: CodeAnalysis.SyntaxToken) -> InterfaceStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> InterfaceStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> InterfaceStatementSyntax: ...

class ClassStatementSyntax(TypeStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ClassStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ClassStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> ClassStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ClassKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, classKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax) -> ClassStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ClassStatementSyntax: ...
    @overload
    def WithClassKeyword(self, classKeyword: CodeAnalysis.SyntaxToken) -> ClassStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TypeStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ClassStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ClassStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> ClassStatementSyntax: ...

class EnumStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EnumStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EnumStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EnumKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def UnderlyingType(self) -> AsClauseSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, enumKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, underlyingType: AsClauseSyntax) -> EnumStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EnumStatementSyntax: ...
    @overload
    def WithEnumKeyword(self, enumKeyword: CodeAnalysis.SyntaxToken) -> EnumStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EnumStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EnumStatementSyntax: ...
    @overload
    def WithUnderlyingType(self, underlyingType: AsClauseSyntax) -> EnumStatementSyntax: ...

class TypeParameterListSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddParameters(self, items: System.Array[TypeParameterSyntax]) -> TypeParameterListSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, ofKeyword: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithOfKeyword(self, ofKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TypeParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> TypeParameterListSyntax: ...

class TypeParameterSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterConstraintClause(self) -> TypeParameterConstraintClauseSyntax: ...
    @property
    def VarianceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, varianceKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterConstraintClause: TypeParameterConstraintClauseSyntax) -> TypeParameterSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> TypeParameterSyntax: ...
    @overload
    def WithTypeParameterConstraintClause(self, typeParameterConstraintClause: TypeParameterConstraintClauseSyntax) -> TypeParameterSyntax: ...
    @overload
    def WithVarianceKeyword(self, varianceKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterSyntax: ...

class TypeParameterConstraintClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class TypeParameterSingleConstraintClauseSyntax(TypeParameterConstraintClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Constraint(self) -> ConstraintSyntax: ...
    @overload
    def Update(self, asKeyword: CodeAnalysis.SyntaxToken, constraint: ConstraintSyntax) -> TypeParameterSingleConstraintClauseSyntax: ...
    @overload
    def WithAsKeyword(self, asKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterSingleConstraintClauseSyntax: ...
    @overload
    def WithConstraint(self, constraint: ConstraintSyntax) -> TypeParameterSingleConstraintClauseSyntax: ...

class TypeParameterMultipleConstraintClauseSyntax(TypeParameterConstraintClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddConstraints(self, items: System.Array[ConstraintSyntax]) -> TypeParameterMultipleConstraintClauseSyntax: ...
    @property
    def AsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Constraints(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, asKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, constraints: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    def WithAsKeyword(self, asKeyword: CodeAnalysis.SyntaxToken) -> TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    def WithConstraints(self, constraints: CodeAnalysis.SeparatedSyntaxList) -> TypeParameterMultipleConstraintClauseSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> TypeParameterMultipleConstraintClauseSyntax: ...

class ConstraintSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class SpecialConstraintSyntax(ConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ConstraintKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, constraintKeyword: CodeAnalysis.SyntaxToken) -> SpecialConstraintSyntax: ...
    @overload
    def WithConstraintKeyword(self, constraintKeyword: CodeAnalysis.SyntaxToken) -> SpecialConstraintSyntax: ...

class TypeConstraintSyntax(ConstraintSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> TypeConstraintSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypeConstraintSyntax: ...

class EnumMemberDeclarationSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EnumMemberDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> EqualsValueSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, identifier: CodeAnalysis.SyntaxToken, initializer: EqualsValueSyntax) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EnumMemberDeclarationSyntax: ...
    @overload
    def WithInitializer(self, initializer: EqualsValueSyntax) -> EnumMemberDeclarationSyntax: ...

class MethodBlockBaseSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> MethodBlockBaseSyntax: ...
    @property
    def Begin(self) -> MethodBaseSyntax: ...
    @property
    def BlockStatement(self) -> MethodBaseSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithBlockStatement(self, blockStatement: MethodBaseSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> MethodBlockBaseSyntax: ...

class MethodBlockSyntax(MethodBlockBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> MethodBlockSyntax: ...
    @property
    def Begin(self) -> MethodStatementSyntax: ...
    @property
    def BlockStatement(self) -> MethodBaseSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndSubOrFunctionStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SubOrFunctionStatement(self) -> MethodStatementSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, subOrFunctionStatement: MethodStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: EndBlockStatementSyntax) -> MethodBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: MethodBaseSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndSubOrFunctionStatement(self, endSubOrFunctionStatement: EndBlockStatementSyntax) -> MethodBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> MethodBlockSyntax: ...
    @overload
    def WithSubOrFunctionStatement(self, subOrFunctionStatement: MethodStatementSyntax) -> MethodBlockSyntax: ...

class ConstructorBlockSyntax(MethodBlockBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ConstructorBlockSyntax: ...
    @property
    def Begin(self) -> SubNewStatementSyntax: ...
    @property
    def BlockStatement(self) -> MethodBaseSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndSubStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SubNewStatement(self) -> SubNewStatementSyntax: ...
    @overload
    def Update(self, subNewStatement: SubNewStatementSyntax, statements: CodeAnalysis.SyntaxList, endSubStatement: EndBlockStatementSyntax) -> ConstructorBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: MethodBaseSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndSubStatement(self, endSubStatement: EndBlockStatementSyntax) -> ConstructorBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ConstructorBlockSyntax: ...
    @overload
    def WithSubNewStatement(self, subNewStatement: SubNewStatementSyntax) -> ConstructorBlockSyntax: ...

class OperatorBlockSyntax(MethodBlockBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> OperatorBlockSyntax: ...
    @property
    def Begin(self) -> OperatorStatementSyntax: ...
    @property
    def BlockStatement(self) -> MethodBaseSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndOperatorStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def OperatorStatement(self) -> OperatorStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, operatorStatement: OperatorStatementSyntax, statements: CodeAnalysis.SyntaxList, endOperatorStatement: EndBlockStatementSyntax) -> OperatorBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: MethodBaseSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndOperatorStatement(self, endOperatorStatement: EndBlockStatementSyntax) -> OperatorBlockSyntax: ...
    @overload
    def WithOperatorStatement(self, operatorStatement: OperatorStatementSyntax) -> OperatorBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> OperatorBlockSyntax: ...

class AccessorBlockSyntax(MethodBlockBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> AccessorBlockSyntax: ...
    @property
    def AccessorStatement(self) -> AccessorStatementSyntax: ...
    @property
    def Begin(self) -> AccessorStatementSyntax: ...
    @property
    def BlockStatement(self) -> MethodBaseSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndAccessorStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EndBlockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, accessorStatement: AccessorStatementSyntax, statements: CodeAnalysis.SyntaxList, endAccessorStatement: EndBlockStatementSyntax) -> AccessorBlockSyntax: ...
    @overload
    def WithAccessorStatement(self, accessorStatement: AccessorStatementSyntax) -> AccessorBlockSyntax: ...
    @overload
    def WithBlockStatement(self, blockStatement: MethodBaseSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithEndAccessorStatement(self, endAccessorStatement: EndBlockStatementSyntax) -> AccessorBlockSyntax: ...
    @overload
    def WithEndBlockStatement(self, endBlockStatement: EndBlockStatementSyntax) -> MethodBlockBaseSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> AccessorBlockSyntax: ...

class PropertyBlockSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAccessors(self, items: System.Array[AccessorBlockSyntax]) -> PropertyBlockSyntax: ...
    @property
    def Accessors(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndPropertyStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def PropertyStatement(self) -> PropertyStatementSyntax: ...
    @overload
    def Update(self, propertyStatement: PropertyStatementSyntax, accessors: CodeAnalysis.SyntaxList, endPropertyStatement: EndBlockStatementSyntax) -> PropertyBlockSyntax: ...
    @overload
    def WithAccessors(self, accessors: CodeAnalysis.SyntaxList) -> PropertyBlockSyntax: ...
    @overload
    def WithEndPropertyStatement(self, endPropertyStatement: EndBlockStatementSyntax) -> PropertyBlockSyntax: ...
    @overload
    def WithPropertyStatement(self, propertyStatement: PropertyStatementSyntax) -> PropertyBlockSyntax: ...

class EventBlockSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAccessors(self, items: System.Array[AccessorBlockSyntax]) -> EventBlockSyntax: ...
    @property
    def Accessors(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndEventStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def EventStatement(self) -> EventStatementSyntax: ...
    @overload
    def Update(self, eventStatement: EventStatementSyntax, accessors: CodeAnalysis.SyntaxList, endEventStatement: EndBlockStatementSyntax) -> EventBlockSyntax: ...
    @overload
    def WithAccessors(self, accessors: CodeAnalysis.SyntaxList) -> EventBlockSyntax: ...
    @overload
    def WithEndEventStatement(self, endEventStatement: EndBlockStatementSyntax) -> EventBlockSyntax: ...
    @overload
    def WithEventStatement(self, eventStatement: EventStatementSyntax) -> EventBlockSyntax: ...

class MethodBaseSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> MethodBaseSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> MethodBaseSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> MethodBaseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> MethodBaseSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> MethodBaseSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> MethodBaseSyntax: ...

class ParameterListSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddParameters(self, items: System.Array[ParameterSyntax]) -> ParameterListSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Parameters(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, parameters: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParameterListSyntax: ...
    @overload
    def WithParameters(self, parameters: CodeAnalysis.SeparatedSyntaxList) -> ParameterListSyntax: ...

class MethodStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> MethodStatementSyntax: ...
    @overload
    def AddHandlesClauseEvents(self, items: System.Array[HandlesClauseItemSyntax]) -> MethodStatementSyntax: ...
    @overload
    def AddImplementsClauseInterfaceMembers(self, items: System.Array[QualifiedNameSyntax]) -> MethodStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> MethodStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> MethodStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> MethodStatementSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HandlesClause(self) -> HandlesClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ImplementsClause(self) -> ImplementsClauseSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SubOrFunctionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax, handlesClause: HandlesClauseSyntax, implementsClause: ImplementsClauseSyntax) -> MethodStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> MethodStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> MethodStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithHandlesClause(self, handlesClause: HandlesClauseSyntax) -> MethodStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> MethodStatementSyntax: ...
    @overload
    def WithImplementsClause(self, implementsClause: ImplementsClauseSyntax) -> MethodStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> MethodStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> MethodStatementSyntax: ...
    @overload
    def WithSubOrFunctionKeyword(self, subOrFunctionKeyword: CodeAnalysis.SyntaxToken) -> MethodStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> MethodStatementSyntax: ...

class SubNewStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SubNewStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> SubNewStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> SubNewStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SubKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subKeyword: CodeAnalysis.SyntaxToken, newKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax) -> SubNewStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> SubNewStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> SubNewStatementSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> SubNewStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> SubNewStatementSyntax: ...
    @overload
    def WithSubKeyword(self, subKeyword: CodeAnalysis.SyntaxToken) -> SubNewStatementSyntax: ...

class DeclareStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DeclareStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> DeclareStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> DeclareStatementSyntax: ...
    @property
    def AliasKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AliasName(self) -> LiteralExpressionSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CharsetKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DeclareKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LibKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LibraryName(self) -> LiteralExpressionSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SubOrFunctionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declareKeyword: CodeAnalysis.SyntaxToken, charsetKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, libKeyword: CodeAnalysis.SyntaxToken, libraryName: LiteralExpressionSyntax, aliasKeyword: CodeAnalysis.SyntaxToken, aliasName: LiteralExpressionSyntax, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax) -> DeclareStatementSyntax: ...
    @overload
    def WithAliasKeyword(self, aliasKeyword: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...
    @overload
    def WithAliasName(self, aliasName: LiteralExpressionSyntax) -> DeclareStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> DeclareStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> DeclareStatementSyntax: ...
    @overload
    def WithCharsetKeyword(self, charsetKeyword: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithDeclareKeyword(self, declareKeyword: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...
    @overload
    def WithLibKeyword(self, libKeyword: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...
    @overload
    def WithLibraryName(self, libraryName: LiteralExpressionSyntax) -> DeclareStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> DeclareStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> DeclareStatementSyntax: ...
    @overload
    def WithSubOrFunctionKeyword(self, subOrFunctionKeyword: CodeAnalysis.SyntaxToken) -> DeclareStatementSyntax: ...

class DelegateStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> DelegateStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> DelegateStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> DelegateStatementSyntax: ...
    @overload
    def AddTypeParameterListParameters(self, items: System.Array[TypeParameterSyntax]) -> DelegateStatementSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DelegateKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SubOrFunctionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeParameterList(self) -> TypeParameterListSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, delegateKeyword: CodeAnalysis.SyntaxToken, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax) -> DelegateStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> DelegateStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> DelegateStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithDelegateKeyword(self, delegateKeyword: CodeAnalysis.SyntaxToken) -> DelegateStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> DelegateStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> DelegateStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> DelegateStatementSyntax: ...
    @overload
    def WithSubOrFunctionKeyword(self, subOrFunctionKeyword: CodeAnalysis.SyntaxToken) -> DelegateStatementSyntax: ...
    @overload
    def WithTypeParameterList(self, typeParameterList: TypeParameterListSyntax) -> DelegateStatementSyntax: ...

class EventStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> EventStatementSyntax: ...
    @overload
    def AddImplementsClauseInterfaceMembers(self, items: System.Array[QualifiedNameSyntax]) -> EventStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> EventStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> EventStatementSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def CustomKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EventKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ImplementsClause(self) -> ImplementsClauseSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, customKeyword: CodeAnalysis.SyntaxToken, eventKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax, implementsClause: ImplementsClauseSyntax) -> EventStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> EventStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> EventStatementSyntax: ...
    @overload
    def WithCustomKeyword(self, customKeyword: CodeAnalysis.SyntaxToken) -> EventStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithEventKeyword(self, eventKeyword: CodeAnalysis.SyntaxToken) -> EventStatementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> EventStatementSyntax: ...
    @overload
    def WithImplementsClause(self, implementsClause: ImplementsClauseSyntax) -> EventStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> EventStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> EventStatementSyntax: ...

class OperatorStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> OperatorStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> OperatorStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> OperatorStatementSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax) -> OperatorStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> OperatorStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> OperatorStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> OperatorStatementSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> OperatorStatementSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> OperatorStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> OperatorStatementSyntax: ...

class PropertyStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> PropertyStatementSyntax: ...
    @overload
    def AddImplementsClauseInterfaceMembers(self, items: System.Array[QualifiedNameSyntax]) -> PropertyStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> PropertyStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> PropertyStatementSyntax: ...
    @property
    def AsClause(self) -> AsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ImplementsClause(self) -> ImplementsClauseSyntax: ...
    @property
    def Initializer(self) -> EqualsValueSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def PropertyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, propertyKeyword: CodeAnalysis.SyntaxToken, identifier: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, asClause: AsClauseSyntax, initializer: EqualsValueSyntax, implementsClause: ImplementsClauseSyntax) -> PropertyStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: AsClauseSyntax) -> PropertyStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> PropertyStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> PropertyStatementSyntax: ...
    @overload
    def WithImplementsClause(self, implementsClause: ImplementsClauseSyntax) -> PropertyStatementSyntax: ...
    @overload
    def WithInitializer(self, initializer: EqualsValueSyntax) -> PropertyStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> PropertyStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> PropertyStatementSyntax: ...
    @overload
    def WithPropertyKeyword(self, propertyKeyword: CodeAnalysis.SyntaxToken) -> PropertyStatementSyntax: ...

class AccessorStatementSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AccessorStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> AccessorStatementSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> AccessorStatementSyntax: ...
    @property
    def AccessorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, accessorKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax) -> AccessorStatementSyntax: ...
    @overload
    def WithAccessorKeyword(self, accessorKeyword: CodeAnalysis.SyntaxToken) -> AccessorStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> AccessorStatementSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> AccessorStatementSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> AccessorStatementSyntax: ...

class ImplementsClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddInterfaceMembers(self, items: System.Array[QualifiedNameSyntax]) -> ImplementsClauseSyntax: ...
    @property
    def ImplementsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InterfaceMembers(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, implementsKeyword: CodeAnalysis.SyntaxToken, interfaceMembers: CodeAnalysis.SeparatedSyntaxList) -> ImplementsClauseSyntax: ...
    @overload
    def WithImplementsKeyword(self, implementsKeyword: CodeAnalysis.SyntaxToken) -> ImplementsClauseSyntax: ...
    @overload
    def WithInterfaceMembers(self, interfaceMembers: CodeAnalysis.SeparatedSyntaxList) -> ImplementsClauseSyntax: ...

class HandlesClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddEvents(self, items: System.Array[HandlesClauseItemSyntax]) -> HandlesClauseSyntax: ...
    @property
    def Events(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def HandlesKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, handlesKeyword: CodeAnalysis.SyntaxToken, events: CodeAnalysis.SeparatedSyntaxList) -> HandlesClauseSyntax: ...
    @overload
    def WithEvents(self, events: CodeAnalysis.SeparatedSyntaxList) -> HandlesClauseSyntax: ...
    @overload
    def WithHandlesKeyword(self, handlesKeyword: CodeAnalysis.SyntaxToken) -> HandlesClauseSyntax: ...

class EventContainerSyntax(ExpressionSyntax):
    """    """

class KeywordEventContainerSyntax(EventContainerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> KeywordEventContainerSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> KeywordEventContainerSyntax: ...

class WithEventsEventContainerSyntax(EventContainerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken) -> WithEventsEventContainerSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> WithEventsEventContainerSyntax: ...

class WithEventsPropertyEventContainerSyntax(EventContainerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Property(self) -> IdentifierNameSyntax: ...
    @property
    def WithEventsContainer(self) -> WithEventsEventContainerSyntax: ...
    @overload
    def Update(self, withEventsContainer: WithEventsEventContainerSyntax, dotToken: CodeAnalysis.SyntaxToken, property_: IdentifierNameSyntax) -> WithEventsPropertyEventContainerSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> WithEventsPropertyEventContainerSyntax: ...
    @overload
    def WithProperty(self, property_: IdentifierNameSyntax) -> WithEventsPropertyEventContainerSyntax: ...
    @overload
    def WithWithEventsContainer(self, withEventsContainer: WithEventsEventContainerSyntax) -> WithEventsPropertyEventContainerSyntax: ...

class HandlesClauseItemSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EventContainer(self) -> EventContainerSyntax: ...
    @property
    def EventMember(self) -> IdentifierNameSyntax: ...
    @overload
    def Update(self, eventContainer: EventContainerSyntax, dotToken: CodeAnalysis.SyntaxToken, eventMember: IdentifierNameSyntax) -> HandlesClauseItemSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> HandlesClauseItemSyntax: ...
    @overload
    def WithEventContainer(self, eventContainer: EventContainerSyntax) -> HandlesClauseItemSyntax: ...
    @overload
    def WithEventMember(self, eventMember: IdentifierNameSyntax) -> HandlesClauseItemSyntax: ...

class IncompleteMemberSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> IncompleteMemberSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> IncompleteMemberSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def MissingIdentifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, missingIdentifier: CodeAnalysis.SyntaxToken) -> IncompleteMemberSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> IncompleteMemberSyntax: ...
    @overload
    def WithMissingIdentifier(self, missingIdentifier: CodeAnalysis.SyntaxToken) -> IncompleteMemberSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> IncompleteMemberSyntax: ...

class FieldDeclarationSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> FieldDeclarationSyntax: ...
    @overload
    def AddDeclarators(self, items: System.Array[VariableDeclaratorSyntax]) -> FieldDeclarationSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> FieldDeclarationSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Declarators(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, declarators: CodeAnalysis.SeparatedSyntaxList) -> FieldDeclarationSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> FieldDeclarationSyntax: ...
    @overload
    def WithDeclarators(self, declarators: CodeAnalysis.SeparatedSyntaxList) -> FieldDeclarationSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> FieldDeclarationSyntax: ...

class VariableDeclaratorSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddNames(self, items: System.Array[ModifiedIdentifierSyntax]) -> VariableDeclaratorSyntax: ...
    @property
    def AsClause(self) -> AsClauseSyntax: ...
    @property
    def Initializer(self) -> EqualsValueSyntax: ...
    @property
    def Names(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, names: CodeAnalysis.SeparatedSyntaxList, asClause: AsClauseSyntax, initializer: EqualsValueSyntax) -> VariableDeclaratorSyntax: ...
    @overload
    def WithAsClause(self, asClause: AsClauseSyntax) -> VariableDeclaratorSyntax: ...
    @overload
    def WithInitializer(self, initializer: EqualsValueSyntax) -> VariableDeclaratorSyntax: ...
    @overload
    def WithNames(self, names: CodeAnalysis.SeparatedSyntaxList) -> VariableDeclaratorSyntax: ...

class AsClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @property
    def AsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAsKeyword(self, asKeyword: CodeAnalysis.SyntaxToken) -> AsClauseSyntax: ...

class SimpleAsClauseSyntax(AsClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> SimpleAsClauseSyntax: ...
    @property
    def AsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, asKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: TypeSyntax) -> SimpleAsClauseSyntax: ...
    @overload
    def WithAsKeyword(self, asKeyword: CodeAnalysis.SyntaxToken) -> SimpleAsClauseSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> SimpleAsClauseSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> SimpleAsClauseSyntax: ...

class AsNewClauseSyntax(AsClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def NewExpression(self) -> NewExpressionSyntax: ...
    @overload
    def Update(self, asKeyword: CodeAnalysis.SyntaxToken, newExpression: NewExpressionSyntax) -> AsNewClauseSyntax: ...
    @overload
    def WithAsKeyword(self, asKeyword: CodeAnalysis.SyntaxToken) -> AsNewClauseSyntax: ...
    @overload
    def WithNewExpression(self, newExpression: NewExpressionSyntax) -> AsNewClauseSyntax: ...

class ObjectCreationInitializerSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class ObjectMemberInitializerSyntax(ObjectCreationInitializerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddInitializers(self, items: System.Array[FieldInitializerSyntax]) -> ObjectMemberInitializerSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializers(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WithKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, withKeyword: CodeAnalysis.SyntaxToken, openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> ObjectMemberInitializerSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> ObjectMemberInitializerSyntax: ...
    @overload
    def WithInitializers(self, initializers: CodeAnalysis.SeparatedSyntaxList) -> ObjectMemberInitializerSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> ObjectMemberInitializerSyntax: ...
    @overload
    def WithWithKeyword(self, withKeyword: CodeAnalysis.SyntaxToken) -> ObjectMemberInitializerSyntax: ...

class ObjectCollectionInitializerSyntax(ObjectCreationInitializerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddInitializerInitializers(self, items: System.Array[ExpressionSyntax]) -> ObjectCollectionInitializerSyntax: ...
    @property
    def FromKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializer(self) -> CollectionInitializerSyntax: ...
    @overload
    def Update(self, fromKeyword: CodeAnalysis.SyntaxToken, initializer: CollectionInitializerSyntax) -> ObjectCollectionInitializerSyntax: ...
    @overload
    def WithFromKeyword(self, fromKeyword: CodeAnalysis.SyntaxToken) -> ObjectCollectionInitializerSyntax: ...
    @overload
    def WithInitializer(self, initializer: CollectionInitializerSyntax) -> ObjectCollectionInitializerSyntax: ...

class FieldInitializerSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @property
    def KeyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithKeyKeyword(self, keyKeyword: CodeAnalysis.SyntaxToken) -> FieldInitializerSyntax: ...

class InferredFieldInitializerSyntax(FieldInitializerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def KeyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> InferredFieldInitializerSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> InferredFieldInitializerSyntax: ...
    @overload
    def WithKeyKeyword(self, keyKeyword: CodeAnalysis.SyntaxToken) -> InferredFieldInitializerSyntax: ...

class NamedFieldInitializerSyntax(FieldInitializerSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def KeyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @overload
    def Update(self, keyKeyword: CodeAnalysis.SyntaxToken, dotToken: CodeAnalysis.SyntaxToken, name: IdentifierNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> NamedFieldInitializerSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> NamedFieldInitializerSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> NamedFieldInitializerSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> NamedFieldInitializerSyntax: ...
    @overload
    def WithKeyKeyword(self, keyKeyword: CodeAnalysis.SyntaxToken) -> NamedFieldInitializerSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> NamedFieldInitializerSyntax: ...

class EqualsValueSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, equalsToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> EqualsValueSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> EqualsValueSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> EqualsValueSyntax: ...

class ParameterSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ParameterSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ParameterSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Default(self) -> EqualsValueSyntax: ...
    @property
    def Identifier(self) -> ModifiedIdentifierSyntax: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, identifier: ModifiedIdentifierSyntax, asClause: SimpleAsClauseSyntax, default: EqualsValueSyntax) -> ParameterSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> ParameterSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ParameterSyntax: ...
    @overload
    def WithDefault(self, default: EqualsValueSyntax) -> ParameterSyntax: ...
    @overload
    def WithIdentifier(self, identifier: ModifiedIdentifierSyntax) -> ParameterSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> ParameterSyntax: ...

class ModifiedIdentifierSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddArrayBoundsArguments(self, items: System.Array[ArgumentSyntax]) -> ModifiedIdentifierSyntax: ...
    @overload
    def AddArrayRankSpecifiers(self, items: System.Array[ArrayRankSpecifierSyntax]) -> ModifiedIdentifierSyntax: ...
    @property
    def ArrayBounds(self) -> ArgumentListSyntax: ...
    @property
    def ArrayRankSpecifiers(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Nullable(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, nullable: CodeAnalysis.SyntaxToken, arrayBounds: ArgumentListSyntax, arrayRankSpecifiers: CodeAnalysis.SyntaxList) -> ModifiedIdentifierSyntax: ...
    @overload
    def WithArrayBounds(self, arrayBounds: ArgumentListSyntax) -> ModifiedIdentifierSyntax: ...
    @overload
    def WithArrayRankSpecifiers(self, arrayRankSpecifiers: CodeAnalysis.SyntaxList) -> ModifiedIdentifierSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> ModifiedIdentifierSyntax: ...
    @overload
    def WithNullable(self, nullable: CodeAnalysis.SyntaxToken) -> ModifiedIdentifierSyntax: ...

class ArrayRankSpecifierSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddCommaTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> ArrayRankSpecifierSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Rank(self) -> int: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, commaTokens: CodeAnalysis.SyntaxTokenList, closeParenToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithCommaTokens(self, commaTokens: CodeAnalysis.SyntaxTokenList) -> ArrayRankSpecifierSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ArrayRankSpecifierSyntax: ...

class AttributeListSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributes(self, items: System.Array[AttributeSyntax]) -> AttributeListSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, attributes: CodeAnalysis.SeparatedSyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SeparatedSyntaxList) -> AttributeListSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> AttributeListSyntax: ...

class AttributeSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> AttributeSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Name(self) -> TypeSyntax: ...
    @property
    def Target(self) -> AttributeTargetSyntax: ...
    @overload
    def Update(self, target: AttributeTargetSyntax, name: TypeSyntax, argumentList: ArgumentListSyntax) -> AttributeSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> AttributeSyntax: ...
    @overload
    def WithName(self, name: TypeSyntax) -> AttributeSyntax: ...
    @overload
    def WithTarget(self, target: AttributeTargetSyntax) -> AttributeSyntax: ...

class AttributeTargetSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AttributeModifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, attributeModifier: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> AttributeTargetSyntax: ...
    @overload
    def WithAttributeModifier(self, attributeModifier: CodeAnalysis.SyntaxToken) -> AttributeTargetSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> AttributeTargetSyntax: ...

class AttributesStatementSyntax(DeclarationStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AttributesStatementSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, attributeLists: CodeAnalysis.SyntaxList) -> AttributesStatementSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> AttributesStatementSyntax: ...

class ExpressionStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax) -> ExpressionStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ExpressionStatementSyntax: ...

class PrintStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def QuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, questionToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> PrintStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> PrintStatementSyntax: ...
    @overload
    def WithQuestionToken(self, questionToken: CodeAnalysis.SyntaxToken) -> PrintStatementSyntax: ...

class WhileBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> WhileBlockSyntax: ...
    @property
    def EndWhileStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def WhileStatement(self) -> WhileStatementSyntax: ...
    @overload
    def Update(self, whileStatement: WhileStatementSyntax, statements: CodeAnalysis.SyntaxList, endWhileStatement: EndBlockStatementSyntax) -> WhileBlockSyntax: ...
    @overload
    def WithEndWhileStatement(self, endWhileStatement: EndBlockStatementSyntax) -> WhileBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> WhileBlockSyntax: ...
    @overload
    def WithWhileStatement(self, whileStatement: WhileStatementSyntax) -> WhileBlockSyntax: ...

class UsingBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> UsingBlockSyntax: ...
    @property
    def EndUsingStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def UsingStatement(self) -> UsingStatementSyntax: ...
    @overload
    def Update(self, usingStatement: UsingStatementSyntax, statements: CodeAnalysis.SyntaxList, endUsingStatement: EndBlockStatementSyntax) -> UsingBlockSyntax: ...
    @overload
    def WithEndUsingStatement(self, endUsingStatement: EndBlockStatementSyntax) -> UsingBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> UsingBlockSyntax: ...
    @overload
    def WithUsingStatement(self, usingStatement: UsingStatementSyntax) -> UsingBlockSyntax: ...

class SyncLockBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> SyncLockBlockSyntax: ...
    @property
    def EndSyncLockStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SyncLockStatement(self) -> SyncLockStatementSyntax: ...
    @overload
    def Update(self, syncLockStatement: SyncLockStatementSyntax, statements: CodeAnalysis.SyntaxList, endSyncLockStatement: EndBlockStatementSyntax) -> SyncLockBlockSyntax: ...
    @overload
    def WithEndSyncLockStatement(self, endSyncLockStatement: EndBlockStatementSyntax) -> SyncLockBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> SyncLockBlockSyntax: ...
    @overload
    def WithSyncLockStatement(self, syncLockStatement: SyncLockStatementSyntax) -> SyncLockBlockSyntax: ...

class WithBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> WithBlockSyntax: ...
    @property
    def EndWithStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def WithStatement(self) -> WithStatementSyntax: ...
    @overload
    def Update(self, withStatement: WithStatementSyntax, statements: CodeAnalysis.SyntaxList, endWithStatement: EndBlockStatementSyntax) -> WithBlockSyntax: ...
    @overload
    def WithEndWithStatement(self, endWithStatement: EndBlockStatementSyntax) -> WithBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> WithBlockSyntax: ...
    @overload
    def WithWithStatement(self, withStatement: WithStatementSyntax) -> WithBlockSyntax: ...

class LocalDeclarationStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddDeclarators(self, items: System.Array[VariableDeclaratorSyntax]) -> LocalDeclarationStatementSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> LocalDeclarationStatementSyntax: ...
    @property
    def Declarators(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, modifiers: CodeAnalysis.SyntaxTokenList, declarators: CodeAnalysis.SeparatedSyntaxList) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithDeclarators(self, declarators: CodeAnalysis.SeparatedSyntaxList) -> LocalDeclarationStatementSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> LocalDeclarationStatementSyntax: ...

class LabelStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LabelToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, labelToken: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> LabelStatementSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> LabelStatementSyntax: ...
    @overload
    def WithLabelToken(self, labelToken: CodeAnalysis.SyntaxToken) -> LabelStatementSyntax: ...

class GoToStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GoToKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Label(self) -> LabelSyntax: ...
    @overload
    def Update(self, goToKeyword: CodeAnalysis.SyntaxToken, label: LabelSyntax) -> GoToStatementSyntax: ...
    @overload
    def WithGoToKeyword(self, goToKeyword: CodeAnalysis.SyntaxToken) -> GoToStatementSyntax: ...
    @overload
    def WithLabel(self, label: LabelSyntax) -> GoToStatementSyntax: ...

class LabelSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def LabelToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, labelToken: CodeAnalysis.SyntaxToken) -> LabelSyntax: ...
    @overload
    def WithLabelToken(self, labelToken: CodeAnalysis.SyntaxToken) -> LabelSyntax: ...

class StopOrEndStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def StopOrEndKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, stopOrEndKeyword: CodeAnalysis.SyntaxToken) -> StopOrEndStatementSyntax: ...
    @overload
    def WithStopOrEndKeyword(self, stopOrEndKeyword: CodeAnalysis.SyntaxToken) -> StopOrEndStatementSyntax: ...

class ExitStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def BlockKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, exitKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> ExitStatementSyntax: ...
    @overload
    def WithBlockKeyword(self, blockKeyword: CodeAnalysis.SyntaxToken) -> ExitStatementSyntax: ...
    @overload
    def WithExitKeyword(self, exitKeyword: CodeAnalysis.SyntaxToken) -> ExitStatementSyntax: ...

class ContinueStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def BlockKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ContinueKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, continueKeyword: CodeAnalysis.SyntaxToken, blockKeyword: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...
    @overload
    def WithBlockKeyword(self, blockKeyword: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...
    @overload
    def WithContinueKeyword(self, continueKeyword: CodeAnalysis.SyntaxToken) -> ContinueStatementSyntax: ...

class ReturnStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ReturnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, returnKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ReturnStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ReturnStatementSyntax: ...
    @overload
    def WithReturnKeyword(self, returnKeyword: CodeAnalysis.SyntaxToken) -> ReturnStatementSyntax: ...

class SingleLineIfStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddElseClauseStatements(self, items: System.Array[StatementSyntax]) -> SingleLineIfStatementSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> SingleLineIfStatementSyntax: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ElseClause(self) -> SingleLineElseClauseSyntax: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def ThenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, ifKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList, elseClause: SingleLineElseClauseSyntax) -> SingleLineIfStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> SingleLineIfStatementSyntax: ...
    @overload
    def WithElseClause(self, elseClause: SingleLineElseClauseSyntax) -> SingleLineIfStatementSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> SingleLineIfStatementSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> SingleLineIfStatementSyntax: ...
    @overload
    def WithThenKeyword(self, thenKeyword: CodeAnalysis.SyntaxToken) -> SingleLineIfStatementSyntax: ...

class SingleLineElseClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> SingleLineElseClauseSyntax: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, elseKeyword: CodeAnalysis.SyntaxToken, statements: CodeAnalysis.SyntaxList) -> SingleLineElseClauseSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> SingleLineElseClauseSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> SingleLineElseClauseSyntax: ...

class MultiLineIfBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddElseBlockStatements(self, items: System.Array[StatementSyntax]) -> MultiLineIfBlockSyntax: ...
    @overload
    def AddElseIfBlocks(self, items: System.Array[ElseIfBlockSyntax]) -> MultiLineIfBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> MultiLineIfBlockSyntax: ...
    @property
    def ElseBlock(self) -> ElseBlockSyntax: ...
    @property
    def ElseIfBlocks(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndIfStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def IfStatement(self) -> IfStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, ifStatement: IfStatementSyntax, statements: CodeAnalysis.SyntaxList, elseIfBlocks: CodeAnalysis.SyntaxList, elseBlock: ElseBlockSyntax, endIfStatement: EndBlockStatementSyntax) -> MultiLineIfBlockSyntax: ...
    @overload
    def WithElseBlock(self, elseBlock: ElseBlockSyntax) -> MultiLineIfBlockSyntax: ...
    @overload
    def WithElseIfBlocks(self, elseIfBlocks: CodeAnalysis.SyntaxList) -> MultiLineIfBlockSyntax: ...
    @overload
    def WithEndIfStatement(self, endIfStatement: EndBlockStatementSyntax) -> MultiLineIfBlockSyntax: ...
    @overload
    def WithIfStatement(self, ifStatement: IfStatementSyntax) -> MultiLineIfBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> MultiLineIfBlockSyntax: ...

class IfStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, ifKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> IfStatementSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...
    @overload
    def WithThenKeyword(self, thenKeyword: CodeAnalysis.SyntaxToken) -> IfStatementSyntax: ...

class ElseIfBlockSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ElseIfBlockSyntax: ...
    @property
    def ElseIfStatement(self) -> ElseIfStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, elseIfStatement: ElseIfStatementSyntax, statements: CodeAnalysis.SyntaxList) -> ElseIfBlockSyntax: ...
    @overload
    def WithElseIfStatement(self, elseIfStatement: ElseIfStatementSyntax) -> ElseIfBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ElseIfBlockSyntax: ...

class ElseIfStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ElseIfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, elseIfKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> ElseIfStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> ElseIfStatementSyntax: ...
    @overload
    def WithElseIfKeyword(self, elseIfKeyword: CodeAnalysis.SyntaxToken) -> ElseIfStatementSyntax: ...
    @overload
    def WithThenKeyword(self, thenKeyword: CodeAnalysis.SyntaxToken) -> ElseIfStatementSyntax: ...

class ElseBlockSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ElseBlockSyntax: ...
    @property
    def ElseStatement(self) -> ElseStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, elseStatement: ElseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> ElseBlockSyntax: ...
    @overload
    def WithElseStatement(self, elseStatement: ElseStatementSyntax) -> ElseBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ElseBlockSyntax: ...

class ElseStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseStatementSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseStatementSyntax: ...

class TryBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddCatchBlocks(self, items: System.Array[CatchBlockSyntax]) -> TryBlockSyntax: ...
    @overload
    def AddFinallyBlockStatements(self, items: System.Array[StatementSyntax]) -> TryBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> TryBlockSyntax: ...
    @property
    def CatchBlocks(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndTryStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def FinallyBlock(self) -> FinallyBlockSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def TryStatement(self) -> TryStatementSyntax: ...
    @overload
    def Update(self, tryStatement: TryStatementSyntax, statements: CodeAnalysis.SyntaxList, catchBlocks: CodeAnalysis.SyntaxList, finallyBlock: FinallyBlockSyntax, endTryStatement: EndBlockStatementSyntax) -> TryBlockSyntax: ...
    @overload
    def WithCatchBlocks(self, catchBlocks: CodeAnalysis.SyntaxList) -> TryBlockSyntax: ...
    @overload
    def WithEndTryStatement(self, endTryStatement: EndBlockStatementSyntax) -> TryBlockSyntax: ...
    @overload
    def WithFinallyBlock(self, finallyBlock: FinallyBlockSyntax) -> TryBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> TryBlockSyntax: ...
    @overload
    def WithTryStatement(self, tryStatement: TryStatementSyntax) -> TryBlockSyntax: ...

class TryStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def TryKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, tryKeyword: CodeAnalysis.SyntaxToken) -> TryStatementSyntax: ...
    @overload
    def WithTryKeyword(self, tryKeyword: CodeAnalysis.SyntaxToken) -> TryStatementSyntax: ...

class CatchBlockSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> CatchBlockSyntax: ...
    @property
    def CatchStatement(self) -> CatchStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, catchStatement: CatchStatementSyntax, statements: CodeAnalysis.SyntaxList) -> CatchBlockSyntax: ...
    @overload
    def WithCatchStatement(self, catchStatement: CatchStatementSyntax) -> CatchBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> CatchBlockSyntax: ...

class CatchStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def CatchKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IdentifierName(self) -> IdentifierNameSyntax: ...
    @property
    def WhenClause(self) -> CatchFilterClauseSyntax: ...
    @overload
    def Update(self, catchKeyword: CodeAnalysis.SyntaxToken, identifierName: IdentifierNameSyntax, asClause: SimpleAsClauseSyntax, whenClause: CatchFilterClauseSyntax) -> CatchStatementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> CatchStatementSyntax: ...
    @overload
    def WithCatchKeyword(self, catchKeyword: CodeAnalysis.SyntaxToken) -> CatchStatementSyntax: ...
    @overload
    def WithIdentifierName(self, identifierName: IdentifierNameSyntax) -> CatchStatementSyntax: ...
    @overload
    def WithWhenClause(self, whenClause: CatchFilterClauseSyntax) -> CatchStatementSyntax: ...

class CatchFilterClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Filter(self) -> ExpressionSyntax: ...
    @property
    def WhenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whenKeyword: CodeAnalysis.SyntaxToken, filter_: ExpressionSyntax) -> CatchFilterClauseSyntax: ...
    @overload
    def WithFilter(self, filter_: ExpressionSyntax) -> CatchFilterClauseSyntax: ...
    @overload
    def WithWhenKeyword(self, whenKeyword: CodeAnalysis.SyntaxToken) -> CatchFilterClauseSyntax: ...

class FinallyBlockSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> FinallyBlockSyntax: ...
    @property
    def FinallyStatement(self) -> FinallyStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, finallyStatement: FinallyStatementSyntax, statements: CodeAnalysis.SyntaxList) -> FinallyBlockSyntax: ...
    @overload
    def WithFinallyStatement(self, finallyStatement: FinallyStatementSyntax) -> FinallyBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> FinallyBlockSyntax: ...

class FinallyStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def FinallyKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, finallyKeyword: CodeAnalysis.SyntaxToken) -> FinallyStatementSyntax: ...
    @overload
    def WithFinallyKeyword(self, finallyKeyword: CodeAnalysis.SyntaxToken) -> FinallyStatementSyntax: ...

class ErrorStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ErrorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ErrorNumber(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, errorKeyword: CodeAnalysis.SyntaxToken, errorNumber: ExpressionSyntax) -> ErrorStatementSyntax: ...
    @overload
    def WithErrorKeyword(self, errorKeyword: CodeAnalysis.SyntaxToken) -> ErrorStatementSyntax: ...
    @overload
    def WithErrorNumber(self, errorNumber: ExpressionSyntax) -> ErrorStatementSyntax: ...

class OnErrorGoToStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ErrorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GoToKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Label(self) -> LabelSyntax: ...
    @property
    def Minus(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, goToKeyword: CodeAnalysis.SyntaxToken, minus: CodeAnalysis.SyntaxToken, label: LabelSyntax) -> OnErrorGoToStatementSyntax: ...
    @overload
    def WithErrorKeyword(self, errorKeyword: CodeAnalysis.SyntaxToken) -> OnErrorGoToStatementSyntax: ...
    @overload
    def WithGoToKeyword(self, goToKeyword: CodeAnalysis.SyntaxToken) -> OnErrorGoToStatementSyntax: ...
    @overload
    def WithLabel(self, label: LabelSyntax) -> OnErrorGoToStatementSyntax: ...
    @overload
    def WithMinus(self, minus: CodeAnalysis.SyntaxToken) -> OnErrorGoToStatementSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> OnErrorGoToStatementSyntax: ...

class OnErrorResumeNextStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ErrorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def NextKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ResumeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, onKeyword: CodeAnalysis.SyntaxToken, errorKeyword: CodeAnalysis.SyntaxToken, resumeKeyword: CodeAnalysis.SyntaxToken, nextKeyword: CodeAnalysis.SyntaxToken) -> OnErrorResumeNextStatementSyntax: ...
    @overload
    def WithErrorKeyword(self, errorKeyword: CodeAnalysis.SyntaxToken) -> OnErrorResumeNextStatementSyntax: ...
    @overload
    def WithNextKeyword(self, nextKeyword: CodeAnalysis.SyntaxToken) -> OnErrorResumeNextStatementSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> OnErrorResumeNextStatementSyntax: ...
    @overload
    def WithResumeKeyword(self, resumeKeyword: CodeAnalysis.SyntaxToken) -> OnErrorResumeNextStatementSyntax: ...

class ResumeStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Label(self) -> LabelSyntax: ...
    @property
    def ResumeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, resumeKeyword: CodeAnalysis.SyntaxToken, label: LabelSyntax) -> ResumeStatementSyntax: ...
    @overload
    def WithLabel(self, label: LabelSyntax) -> ResumeStatementSyntax: ...
    @overload
    def WithResumeKeyword(self, resumeKeyword: CodeAnalysis.SyntaxToken) -> ResumeStatementSyntax: ...

class SelectBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddCaseBlocks(self, items: System.Array[CaseBlockSyntax]) -> SelectBlockSyntax: ...
    @property
    def CaseBlocks(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndSelectStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def SelectStatement(self) -> SelectStatementSyntax: ...
    @overload
    def Update(self, selectStatement: SelectStatementSyntax, caseBlocks: CodeAnalysis.SyntaxList, endSelectStatement: EndBlockStatementSyntax) -> SelectBlockSyntax: ...
    @overload
    def WithCaseBlocks(self, caseBlocks: CodeAnalysis.SyntaxList) -> SelectBlockSyntax: ...
    @overload
    def WithEndSelectStatement(self, endSelectStatement: EndBlockStatementSyntax) -> SelectBlockSyntax: ...
    @overload
    def WithSelectStatement(self, selectStatement: SelectStatementSyntax) -> SelectBlockSyntax: ...

class SelectStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CaseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def SelectKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, selectKeyword: CodeAnalysis.SyntaxToken, caseKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> SelectStatementSyntax: ...
    @overload
    def WithCaseKeyword(self, caseKeyword: CodeAnalysis.SyntaxToken) -> SelectStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SelectStatementSyntax: ...
    @overload
    def WithSelectKeyword(self, selectKeyword: CodeAnalysis.SyntaxToken) -> SelectStatementSyntax: ...

class CaseBlockSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddCaseStatementCases(self, items: System.Array[CaseClauseSyntax]) -> CaseBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> CaseBlockSyntax: ...
    @property
    def Begin(self) -> CaseStatementSyntax: ...
    @property
    def CaseStatement(self) -> CaseStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, caseStatement: CaseStatementSyntax, statements: CodeAnalysis.SyntaxList) -> CaseBlockSyntax: ...
    @overload
    def WithCaseStatement(self, caseStatement: CaseStatementSyntax) -> CaseBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> CaseBlockSyntax: ...

class CaseStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddCases(self, items: System.Array[CaseClauseSyntax]) -> CaseStatementSyntax: ...
    @property
    def CaseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Cases(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, caseKeyword: CodeAnalysis.SyntaxToken, cases: CodeAnalysis.SeparatedSyntaxList) -> CaseStatementSyntax: ...
    @overload
    def WithCaseKeyword(self, caseKeyword: CodeAnalysis.SyntaxToken) -> CaseStatementSyntax: ...
    @overload
    def WithCases(self, cases: CodeAnalysis.SeparatedSyntaxList) -> CaseStatementSyntax: ...

class CaseClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class ElseCaseClauseSyntax(CaseClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseCaseClauseSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseCaseClauseSyntax: ...

class SimpleCaseClauseSyntax(CaseClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, value: ExpressionSyntax) -> SimpleCaseClauseSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> SimpleCaseClauseSyntax: ...

class RangeCaseClauseSyntax(CaseClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def LowerBound(self) -> ExpressionSyntax: ...
    @property
    def ToKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UpperBound(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, lowerBound: ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, upperBound: ExpressionSyntax) -> RangeCaseClauseSyntax: ...
    @overload
    def WithLowerBound(self, lowerBound: ExpressionSyntax) -> RangeCaseClauseSyntax: ...
    @overload
    def WithToKeyword(self, toKeyword: CodeAnalysis.SyntaxToken) -> RangeCaseClauseSyntax: ...
    @overload
    def WithUpperBound(self, upperBound: ExpressionSyntax) -> RangeCaseClauseSyntax: ...

class RelationalCaseClauseSyntax(CaseClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def IsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, isKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> RelationalCaseClauseSyntax: ...
    @overload
    def WithIsKeyword(self, isKeyword: CodeAnalysis.SyntaxToken) -> RelationalCaseClauseSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> RelationalCaseClauseSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> RelationalCaseClauseSyntax: ...

class SyncLockStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def SyncLockKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, syncLockKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> SyncLockStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SyncLockStatementSyntax: ...
    @overload
    def WithSyncLockKeyword(self, syncLockKeyword: CodeAnalysis.SyntaxToken) -> SyncLockStatementSyntax: ...

class DoLoopBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> DoLoopBlockSyntax: ...
    @property
    def DoStatement(self) -> DoStatementSyntax: ...
    @property
    def LoopStatement(self) -> LoopStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, doStatement: DoStatementSyntax, statements: CodeAnalysis.SyntaxList, loopStatement: LoopStatementSyntax) -> DoLoopBlockSyntax: ...
    @overload
    def WithDoStatement(self, doStatement: DoStatementSyntax) -> DoLoopBlockSyntax: ...
    @overload
    def WithLoopStatement(self, loopStatement: LoopStatementSyntax) -> DoLoopBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> DoLoopBlockSyntax: ...

class DoStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def DoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhileOrUntilClause(self) -> WhileOrUntilClauseSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, doKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: WhileOrUntilClauseSyntax) -> DoStatementSyntax: ...
    @overload
    def WithDoKeyword(self, doKeyword: CodeAnalysis.SyntaxToken) -> DoStatementSyntax: ...
    @overload
    def WithWhileOrUntilClause(self, whileOrUntilClause: WhileOrUntilClauseSyntax) -> DoStatementSyntax: ...

class LoopStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def LoopKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhileOrUntilClause(self) -> WhileOrUntilClauseSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, loopKeyword: CodeAnalysis.SyntaxToken, whileOrUntilClause: WhileOrUntilClauseSyntax) -> LoopStatementSyntax: ...
    @overload
    def WithLoopKeyword(self, loopKeyword: CodeAnalysis.SyntaxToken) -> LoopStatementSyntax: ...
    @overload
    def WithWhileOrUntilClause(self, whileOrUntilClause: WhileOrUntilClauseSyntax) -> LoopStatementSyntax: ...

class WhileOrUntilClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def WhileOrUntilKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, whileOrUntilKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> WhileOrUntilClauseSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhileOrUntilClauseSyntax: ...
    @overload
    def WithWhileOrUntilKeyword(self, whileOrUntilKeyword: CodeAnalysis.SyntaxToken) -> WhileOrUntilClauseSyntax: ...

class WhileStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def WhileKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whileKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> WhileStatementSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhileStatementSyntax: ...
    @overload
    def WithWhileKeyword(self, whileKeyword: CodeAnalysis.SyntaxToken) -> WhileStatementSyntax: ...

class ForOrForEachBlockSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def AddNextStatementControlVariables(self, items: System.Array[ExpressionSyntax]) -> ForOrForEachBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ForOrForEachBlockSyntax: ...
    @property
    def ForOrForEachStatement(self) -> ForOrForEachStatementSyntax: ...
    @property
    def NextStatement(self) -> NextStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def WithNextStatement(self, nextStatement: NextStatementSyntax) -> ForOrForEachBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ForOrForEachBlockSyntax: ...

class ForBlockSyntax(ForOrForEachBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddNextStatementControlVariables(self, items: System.Array[ExpressionSyntax]) -> ForBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ForBlockSyntax: ...
    @property
    def ForOrForEachStatement(self) -> ForOrForEachStatementSyntax: ...
    @property
    def ForStatement(self) -> ForStatementSyntax: ...
    @property
    def NextStatement(self) -> NextStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, forStatement: ForStatementSyntax, statements: CodeAnalysis.SyntaxList, nextStatement: NextStatementSyntax) -> ForBlockSyntax: ...
    @overload
    def WithForStatement(self, forStatement: ForStatementSyntax) -> ForBlockSyntax: ...
    @overload
    def WithNextStatement(self, nextStatement: NextStatementSyntax) -> ForBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ForBlockSyntax: ...

class ForEachBlockSyntax(ForOrForEachBlockSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddNextStatementControlVariables(self, items: System.Array[ExpressionSyntax]) -> ForEachBlockSyntax: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> ForEachBlockSyntax: ...
    @property
    def ForEachStatement(self) -> ForEachStatementSyntax: ...
    @property
    def ForOrForEachStatement(self) -> ForOrForEachStatementSyntax: ...
    @property
    def NextStatement(self) -> NextStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, forEachStatement: ForEachStatementSyntax, statements: CodeAnalysis.SyntaxList, nextStatement: NextStatementSyntax) -> ForEachBlockSyntax: ...
    @overload
    def WithForEachStatement(self, forEachStatement: ForEachStatementSyntax) -> ForEachBlockSyntax: ...
    @overload
    def WithNextStatement(self, nextStatement: NextStatementSyntax) -> ForEachBlockSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> ForEachBlockSyntax: ...

class ForOrForEachStatementSyntax(StatementSyntax):
    """    """
    @property
    def ControlVariable(self) -> VisualBasic.VisualBasicSyntaxNode: ...
    @property
    def ForKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithControlVariable(self, controlVariable: VisualBasic.VisualBasicSyntaxNode) -> ForOrForEachStatementSyntax: ...
    @overload
    def WithForKeyword(self, forKeyword: CodeAnalysis.SyntaxToken) -> ForOrForEachStatementSyntax: ...

class ForStatementSyntax(ForOrForEachStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ControlVariable(self) -> VisualBasic.VisualBasicSyntaxNode: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ForKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FromValue(self) -> ExpressionSyntax: ...
    @property
    def StepClause(self) -> ForStepClauseSyntax: ...
    @property
    def ToKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ToValue(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, forKeyword: CodeAnalysis.SyntaxToken, controlVariable: VisualBasic.VisualBasicSyntaxNode, equalsToken: CodeAnalysis.SyntaxToken, fromValue: ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, toValue: ExpressionSyntax, stepClause: ForStepClauseSyntax) -> ForStatementSyntax: ...
    @overload
    def WithControlVariable(self, controlVariable: VisualBasic.VisualBasicSyntaxNode) -> ForStatementSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithForKeyword(self, forKeyword: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithFromValue(self, fromValue: ExpressionSyntax) -> ForStatementSyntax: ...
    @overload
    def WithStepClause(self, stepClause: ForStepClauseSyntax) -> ForStatementSyntax: ...
    @overload
    def WithToKeyword(self, toKeyword: CodeAnalysis.SyntaxToken) -> ForStatementSyntax: ...
    @overload
    def WithToValue(self, toValue: ExpressionSyntax) -> ForStatementSyntax: ...

class ForStepClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def StepKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StepValue(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, stepKeyword: CodeAnalysis.SyntaxToken, stepValue: ExpressionSyntax) -> ForStepClauseSyntax: ...
    @overload
    def WithStepKeyword(self, stepKeyword: CodeAnalysis.SyntaxToken) -> ForStepClauseSyntax: ...
    @overload
    def WithStepValue(self, stepValue: ExpressionSyntax) -> ForStepClauseSyntax: ...

class ForEachStatementSyntax(ForOrForEachStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ControlVariable(self) -> VisualBasic.VisualBasicSyntaxNode: ...
    @property
    def EachKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ForKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, forKeyword: CodeAnalysis.SyntaxToken, eachKeyword: CodeAnalysis.SyntaxToken, controlVariable: VisualBasic.VisualBasicSyntaxNode, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ForEachStatementSyntax: ...
    @overload
    def WithControlVariable(self, controlVariable: VisualBasic.VisualBasicSyntaxNode) -> ForEachStatementSyntax: ...
    @overload
    def WithEachKeyword(self, eachKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ForEachStatementSyntax: ...
    @overload
    def WithForKeyword(self, forKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> ForEachStatementSyntax: ...

class NextStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddControlVariables(self, items: System.Array[ExpressionSyntax]) -> NextStatementSyntax: ...
    @property
    def ControlVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def NextKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, nextKeyword: CodeAnalysis.SyntaxToken, controlVariables: CodeAnalysis.SeparatedSyntaxList) -> NextStatementSyntax: ...
    @overload
    def WithControlVariables(self, controlVariables: CodeAnalysis.SeparatedSyntaxList) -> NextStatementSyntax: ...
    @overload
    def WithNextKeyword(self, nextKeyword: CodeAnalysis.SyntaxToken) -> NextStatementSyntax: ...

class UsingStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddVariables(self, items: System.Array[VariableDeclaratorSyntax]) -> UsingStatementSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def UsingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, usingKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, variables: CodeAnalysis.SeparatedSyntaxList) -> UsingStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> UsingStatementSyntax: ...
    @overload
    def WithUsingKeyword(self, usingKeyword: CodeAnalysis.SyntaxToken) -> UsingStatementSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> UsingStatementSyntax: ...

class ThrowStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def ThrowKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, throwKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> ThrowStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ThrowStatementSyntax: ...
    @overload
    def WithThrowKeyword(self, throwKeyword: CodeAnalysis.SyntaxToken) -> ThrowStatementSyntax: ...

class AssignmentStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Left(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Right(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, left: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: ExpressionSyntax) -> AssignmentStatementSyntax: ...
    @overload
    def WithLeft(self, left: ExpressionSyntax) -> AssignmentStatementSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> AssignmentStatementSyntax: ...
    @overload
    def WithRight(self, right: ExpressionSyntax) -> AssignmentStatementSyntax: ...

class MidExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> MidExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Mid(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, mid: CodeAnalysis.SyntaxToken, argumentList: ArgumentListSyntax) -> MidExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> MidExpressionSyntax: ...
    @overload
    def WithMid(self, mid: CodeAnalysis.SyntaxToken) -> MidExpressionSyntax: ...

class CallStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CallKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Invocation(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, callKeyword: CodeAnalysis.SyntaxToken, invocation: ExpressionSyntax) -> CallStatementSyntax: ...
    @overload
    def WithCallKeyword(self, callKeyword: CodeAnalysis.SyntaxToken) -> CallStatementSyntax: ...
    @overload
    def WithInvocation(self, invocation: ExpressionSyntax) -> CallStatementSyntax: ...

class AddRemoveHandlerStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def AddHandlerOrRemoveHandlerKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DelegateExpression(self) -> ExpressionSyntax: ...
    @property
    def EventExpression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken, eventExpression: ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, delegateExpression: ExpressionSyntax) -> AddRemoveHandlerStatementSyntax: ...
    @overload
    def WithAddHandlerOrRemoveHandlerKeyword(self, addHandlerOrRemoveHandlerKeyword: CodeAnalysis.SyntaxToken) -> AddRemoveHandlerStatementSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> AddRemoveHandlerStatementSyntax: ...
    @overload
    def WithDelegateExpression(self, delegateExpression: ExpressionSyntax) -> AddRemoveHandlerStatementSyntax: ...
    @overload
    def WithEventExpression(self, eventExpression: ExpressionSyntax) -> AddRemoveHandlerStatementSyntax: ...

class RaiseEventStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> RaiseEventStatementSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @property
    def RaiseEventKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, raiseEventKeyword: CodeAnalysis.SyntaxToken, name: IdentifierNameSyntax, argumentList: ArgumentListSyntax) -> RaiseEventStatementSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> RaiseEventStatementSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> RaiseEventStatementSyntax: ...
    @overload
    def WithRaiseEventKeyword(self, raiseEventKeyword: CodeAnalysis.SyntaxToken) -> RaiseEventStatementSyntax: ...

class WithStatementSyntax(StatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def WithKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, withKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> WithStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> WithStatementSyntax: ...
    @overload
    def WithWithKeyword(self, withKeyword: CodeAnalysis.SyntaxToken) -> WithStatementSyntax: ...

class ReDimStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddClauses(self, items: System.Array[RedimClauseSyntax]) -> ReDimStatementSyntax: ...
    @property
    def Clauses(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def PreserveKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ReDimKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, reDimKeyword: CodeAnalysis.SyntaxToken, preserveKeyword: CodeAnalysis.SyntaxToken, clauses: CodeAnalysis.SeparatedSyntaxList) -> ReDimStatementSyntax: ...
    @overload
    def WithClauses(self, clauses: CodeAnalysis.SeparatedSyntaxList) -> ReDimStatementSyntax: ...
    @overload
    def WithPreserveKeyword(self, preserveKeyword: CodeAnalysis.SyntaxToken) -> ReDimStatementSyntax: ...
    @overload
    def WithReDimKeyword(self, reDimKeyword: CodeAnalysis.SyntaxToken) -> ReDimStatementSyntax: ...

class RedimClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArrayBoundsArguments(self, items: System.Array[ArgumentSyntax]) -> RedimClauseSyntax: ...
    @property
    def ArrayBounds(self) -> ArgumentListSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, arrayBounds: ArgumentListSyntax) -> RedimClauseSyntax: ...
    @overload
    def WithArrayBounds(self, arrayBounds: ArgumentListSyntax) -> RedimClauseSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> RedimClauseSyntax: ...

class EraseStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddExpressions(self, items: System.Array[ExpressionSyntax]) -> EraseStatementSyntax: ...
    @property
    def EraseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expressions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, eraseKeyword: CodeAnalysis.SyntaxToken, expressions: CodeAnalysis.SeparatedSyntaxList) -> EraseStatementSyntax: ...
    @overload
    def WithEraseKeyword(self, eraseKeyword: CodeAnalysis.SyntaxToken) -> EraseStatementSyntax: ...
    @overload
    def WithExpressions(self, expressions: CodeAnalysis.SeparatedSyntaxList) -> EraseStatementSyntax: ...

class ExpressionSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class LiteralExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Token(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, token: CodeAnalysis.SyntaxToken) -> LiteralExpressionSyntax: ...
    @overload
    def WithToken(self, token: CodeAnalysis.SyntaxToken) -> LiteralExpressionSyntax: ...

class ParenthesizedExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ParenthesizedExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ParenthesizedExpressionSyntax: ...

class TupleExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArguments(self, items: System.Array[SimpleArgumentSyntax]) -> TupleExpressionSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> TupleExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TupleExpressionSyntax: ...

class TupleTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddElements(self, items: System.Array[TupleElementSyntax]) -> TupleTypeSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Elements(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, elements: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...
    @overload
    def WithElements(self, elements: CodeAnalysis.SeparatedSyntaxList) -> TupleTypeSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TupleTypeSyntax: ...

class TupleElementSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class TypedTupleElementSyntax(TupleElementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, type_: TypeSyntax) -> TypedTupleElementSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypedTupleElementSyntax: ...

class NamedTupleElementSyntax(TupleElementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, asClause: SimpleAsClauseSyntax) -> NamedTupleElementSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> NamedTupleElementSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> NamedTupleElementSyntax: ...

class InstanceExpressionSyntax(ExpressionSyntax):
    """    """
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> InstanceExpressionSyntax: ...

class MeExpressionSyntax(InstanceExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> MeExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MeExpressionSyntax: ...

class MyBaseExpressionSyntax(InstanceExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> MyBaseExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MyBaseExpressionSyntax: ...

class MyClassExpressionSyntax(InstanceExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> MyClassExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MyClassExpressionSyntax: ...

class GetTypeExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GetTypeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, getTypeKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> GetTypeExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> GetTypeExpressionSyntax: ...
    @overload
    def WithGetTypeKeyword(self, getTypeKeyword: CodeAnalysis.SyntaxToken) -> GetTypeExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> GetTypeExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> GetTypeExpressionSyntax: ...

class TypeOfExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @property
    def TypeOfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, typeOfKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> TypeOfExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> TypeOfExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TypeOfExpressionSyntax: ...
    @overload
    def WithTypeOfKeyword(self, typeOfKeyword: CodeAnalysis.SyntaxToken) -> TypeOfExpressionSyntax: ...

class GetXmlNamespaceExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GetXmlNamespaceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlPrefixNameSyntax: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, getXmlNamespaceKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, name: XmlPrefixNameSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> GetXmlNamespaceExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> GetXmlNamespaceExpressionSyntax: ...
    @overload
    def WithGetXmlNamespaceKeyword(self, getXmlNamespaceKeyword: CodeAnalysis.SyntaxToken) -> GetXmlNamespaceExpressionSyntax: ...
    @overload
    def WithName(self, name: XmlPrefixNameSyntax) -> GetXmlNamespaceExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> GetXmlNamespaceExpressionSyntax: ...

class MemberAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Name(self) -> SimpleNameSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, expression: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, name: SimpleNameSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithName(self, name: SimpleNameSyntax) -> MemberAccessExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> MemberAccessExpressionSyntax: ...

class XmlMemberAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Base(self) -> ExpressionSyntax: ...
    @property
    def Name(self) -> XmlNodeSyntax: ...
    @property
    def Token1(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Token2(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Token3(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, base: ExpressionSyntax, token1: CodeAnalysis.SyntaxToken, token2: CodeAnalysis.SyntaxToken, token3: CodeAnalysis.SyntaxToken, name: XmlNodeSyntax) -> XmlMemberAccessExpressionSyntax: ...
    @overload
    def WithBase(self, base: ExpressionSyntax) -> XmlMemberAccessExpressionSyntax: ...
    @overload
    def WithName(self, name: XmlNodeSyntax) -> XmlMemberAccessExpressionSyntax: ...
    @overload
    def WithToken1(self, token1: CodeAnalysis.SyntaxToken) -> XmlMemberAccessExpressionSyntax: ...
    @overload
    def WithToken2(self, token2: CodeAnalysis.SyntaxToken) -> XmlMemberAccessExpressionSyntax: ...
    @overload
    def WithToken3(self, token3: CodeAnalysis.SyntaxToken) -> XmlMemberAccessExpressionSyntax: ...

class InvocationExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> InvocationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, argumentList: ArgumentListSyntax) -> InvocationExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> InvocationExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> InvocationExpressionSyntax: ...

class NewExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> NewExpressionSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> NewExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> NewExpressionSyntax: ...

class ObjectCreationExpressionSyntax(NewExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddArgumentListArguments(self, items: System.Array[ArgumentSyntax]) -> ObjectCreationExpressionSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ObjectCreationExpressionSyntax: ...
    @property
    def ArgumentList(self) -> ArgumentListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Initializer(self) -> ObjectCreationInitializerSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: TypeSyntax, argumentList: ArgumentListSyntax, initializer: ObjectCreationInitializerSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithArgumentList(self, argumentList: ArgumentListSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: ObjectCreationInitializerSyntax) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ObjectCreationExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ObjectCreationExpressionSyntax: ...

class AnonymousObjectCreationExpressionSyntax(NewExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def AddInitializerInitializers(self, items: System.Array[FieldInitializerSyntax]) -> AnonymousObjectCreationExpressionSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Initializer(self) -> ObjectMemberInitializerSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, initializer: ObjectMemberInitializerSyntax) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: ObjectMemberInitializerSyntax) -> AnonymousObjectCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> AnonymousObjectCreationExpressionSyntax: ...

class ArrayCreationExpressionSyntax(NewExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddArrayBoundsArguments(self, items: System.Array[ArgumentSyntax]) -> ArrayCreationExpressionSyntax: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> ArrayCreationExpressionSyntax: ...
    @overload
    def AddInitializerInitializers(self, items: System.Array[ExpressionSyntax]) -> ArrayCreationExpressionSyntax: ...
    @overload
    def AddRankSpecifiers(self, items: System.Array[ArrayRankSpecifierSyntax]) -> ArrayCreationExpressionSyntax: ...
    @property
    def ArrayBounds(self) -> ArgumentListSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Initializer(self) -> CollectionInitializerSyntax: ...
    @property
    def NewKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RankSpecifiers(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, newKeyword: CodeAnalysis.SyntaxToken, attributeLists: CodeAnalysis.SyntaxList, type_: TypeSyntax, arrayBounds: ArgumentListSyntax, rankSpecifiers: CodeAnalysis.SyntaxList, initializer: CollectionInitializerSyntax) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithArrayBounds(self, arrayBounds: ArgumentListSyntax) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithInitializer(self, initializer: CollectionInitializerSyntax) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithNewKeyword(self, newKeyword: CodeAnalysis.SyntaxToken) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithRankSpecifiers(self, rankSpecifiers: CodeAnalysis.SyntaxList) -> ArrayCreationExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> ArrayCreationExpressionSyntax: ...

class CollectionInitializerSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddInitializers(self, items: System.Array[ExpressionSyntax]) -> CollectionInitializerSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Initializers(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, initializers: CodeAnalysis.SeparatedSyntaxList, closeBraceToken: CodeAnalysis.SyntaxToken) -> CollectionInitializerSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> CollectionInitializerSyntax: ...
    @overload
    def WithInitializers(self, initializers: CodeAnalysis.SeparatedSyntaxList) -> CollectionInitializerSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> CollectionInitializerSyntax: ...

class CastExpressionSyntax(ExpressionSyntax):
    """    """
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CastExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CastExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CastExpressionSyntax: ...

class CTypeExpressionSyntax(CastExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> CTypeExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CTypeExpressionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> CTypeExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CTypeExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> CTypeExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CTypeExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CTypeExpressionSyntax: ...

class DirectCastExpressionSyntax(CastExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> DirectCastExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> DirectCastExpressionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> DirectCastExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> DirectCastExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> DirectCastExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> DirectCastExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> DirectCastExpressionSyntax: ...

class TryCastExpressionSyntax(CastExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, type_: TypeSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> TryCastExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TryCastExpressionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> TryCastExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> TryCastExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> TryCastExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TryCastExpressionSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> TryCastExpressionSyntax: ...

class PredefinedCastExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> PredefinedCastExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> PredefinedCastExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> PredefinedCastExpressionSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> PredefinedCastExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> PredefinedCastExpressionSyntax: ...

class BinaryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Left(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Right(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, left: ExpressionSyntax, operatorToken: CodeAnalysis.SyntaxToken, right: ExpressionSyntax) -> BinaryExpressionSyntax: ...
    @overload
    def WithLeft(self, left: ExpressionSyntax) -> BinaryExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> BinaryExpressionSyntax: ...
    @overload
    def WithRight(self, right: ExpressionSyntax) -> BinaryExpressionSyntax: ...

class UnaryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Operand(self) -> ExpressionSyntax: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, operatorToken: CodeAnalysis.SyntaxToken, operand: ExpressionSyntax) -> UnaryExpressionSyntax: ...
    @overload
    def WithOperand(self, operand: ExpressionSyntax) -> UnaryExpressionSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> UnaryExpressionSyntax: ...

class BinaryConditionalExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FirstExpression(self) -> ExpressionSyntax: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SecondExpression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, firstExpression: ExpressionSyntax, commaToken: CodeAnalysis.SyntaxToken, secondExpression: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithFirstExpression(self, firstExpression: ExpressionSyntax) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> BinaryConditionalExpressionSyntax: ...
    @overload
    def WithSecondExpression(self, secondExpression: ExpressionSyntax) -> BinaryConditionalExpressionSyntax: ...

class TernaryConditionalExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def FirstCommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SecondCommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhenFalse(self) -> ExpressionSyntax: ...
    @property
    def WhenTrue(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, ifKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, firstCommaToken: CodeAnalysis.SyntaxToken, whenTrue: ExpressionSyntax, secondCommaToken: CodeAnalysis.SyntaxToken, whenFalse: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithFirstCommaToken(self, firstCommaToken: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithSecondCommaToken(self, secondCommaToken: CodeAnalysis.SyntaxToken) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithWhenFalse(self, whenFalse: ExpressionSyntax) -> TernaryConditionalExpressionSyntax: ...
    @overload
    def WithWhenTrue(self, whenTrue: ExpressionSyntax) -> TernaryConditionalExpressionSyntax: ...

class LambdaExpressionSyntax(ExpressionSyntax):
    """    """
    @property
    def Begin(self) -> LambdaHeaderSyntax: ...
    @property
    def SubOrFunctionHeader(self) -> LambdaHeaderSyntax: ...
    @overload
    def WithSubOrFunctionHeader(self, subOrFunctionHeader: LambdaHeaderSyntax) -> LambdaExpressionSyntax: ...

class SingleLineLambdaExpressionSyntax(LambdaExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Begin(self) -> LambdaHeaderSyntax: ...
    @property
    def Body(self) -> VisualBasic.VisualBasicSyntaxNode: ...
    @property
    def SubOrFunctionHeader(self) -> LambdaHeaderSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, subOrFunctionHeader: LambdaHeaderSyntax, body: VisualBasic.VisualBasicSyntaxNode) -> SingleLineLambdaExpressionSyntax: ...
    @overload
    def WithBody(self, body: VisualBasic.VisualBasicSyntaxNode) -> SingleLineLambdaExpressionSyntax: ...
    @overload
    def WithSubOrFunctionHeader(self, subOrFunctionHeader: LambdaHeaderSyntax) -> SingleLineLambdaExpressionSyntax: ...

class MultiLineLambdaExpressionSyntax(LambdaExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddStatements(self, items: System.Array[StatementSyntax]) -> MultiLineLambdaExpressionSyntax: ...
    @property
    def Begin(self) -> LambdaHeaderSyntax: ...
    @property
    def End(self) -> EndBlockStatementSyntax: ...
    @property
    def EndSubOrFunctionStatement(self) -> EndBlockStatementSyntax: ...
    @property
    def Statements(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def SubOrFunctionHeader(self) -> LambdaHeaderSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, subOrFunctionHeader: LambdaHeaderSyntax, statements: CodeAnalysis.SyntaxList, endSubOrFunctionStatement: EndBlockStatementSyntax) -> MultiLineLambdaExpressionSyntax: ...
    @overload
    def WithEndSubOrFunctionStatement(self, endSubOrFunctionStatement: EndBlockStatementSyntax) -> MultiLineLambdaExpressionSyntax: ...
    @overload
    def WithStatements(self, statements: CodeAnalysis.SyntaxList) -> MultiLineLambdaExpressionSyntax: ...
    @overload
    def WithSubOrFunctionHeader(self, subOrFunctionHeader: LambdaHeaderSyntax) -> MultiLineLambdaExpressionSyntax: ...

class LambdaHeaderSyntax(MethodBaseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributeLists(self, items: System.Array[AttributeListSyntax]) -> LambdaHeaderSyntax: ...
    @overload
    def AddModifiers(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> LambdaHeaderSyntax: ...
    @overload
    def AddParameterListParameters(self, items: System.Array[ParameterSyntax]) -> LambdaHeaderSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def AttributeLists(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DeclarationKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Modifiers(self) -> CodeAnalysis.SyntaxTokenList: ...
    @property
    def ParameterList(self) -> ParameterListSyntax: ...
    @property
    def SubOrFunctionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, attributeLists: CodeAnalysis.SyntaxList, modifiers: CodeAnalysis.SyntaxTokenList, subOrFunctionKeyword: CodeAnalysis.SyntaxToken, parameterList: ParameterListSyntax, asClause: SimpleAsClauseSyntax) -> LambdaHeaderSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> LambdaHeaderSyntax: ...
    @overload
    def WithAttributeLists(self, attributeLists: CodeAnalysis.SyntaxList) -> LambdaHeaderSyntax: ...
    @overload
    def WithDeclarationKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> MethodBaseSyntax: ...
    @overload
    def WithModifiers(self, modifiers: CodeAnalysis.SyntaxTokenList) -> LambdaHeaderSyntax: ...
    @overload
    def WithParameterList(self, parameterList: ParameterListSyntax) -> LambdaHeaderSyntax: ...
    @overload
    def WithSubOrFunctionKeyword(self, subOrFunctionKeyword: CodeAnalysis.SyntaxToken) -> LambdaHeaderSyntax: ...

class ArgumentListSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArguments(self, items: System.Array[ArgumentSyntax]) -> ArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> ArgumentListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ArgumentListSyntax: ...

class ArgumentSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @property
    def IsNamed(self) -> bool: ...
    @property
    def IsOmitted(self) -> bool: ...
    @overload
    def GetExpression() -> ExpressionSyntax: ...

class OmittedArgumentSyntax(ArgumentSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Empty(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IsNamed(self) -> bool: ...
    @overload
    def GetExpression() -> ExpressionSyntax: ...
    @overload
    def Update(self, empty: CodeAnalysis.SyntaxToken) -> OmittedArgumentSyntax: ...
    @overload
    def WithEmpty(self, empty: CodeAnalysis.SyntaxToken) -> OmittedArgumentSyntax: ...

class SimpleArgumentSyntax(ArgumentSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def IsNamed(self) -> bool: ...
    @property
    def NameColonEquals(self) -> NameColonEqualsSyntax: ...
    @overload
    def GetExpression() -> ExpressionSyntax: ...
    @overload
    def Update(self, nameColonEquals: NameColonEqualsSyntax, expression: ExpressionSyntax) -> SimpleArgumentSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> SimpleArgumentSyntax: ...
    @overload
    def WithNameColonEquals(self, nameColonEquals: NameColonEqualsSyntax) -> SimpleArgumentSyntax: ...

class NameColonEqualsSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ColonEqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> IdentifierNameSyntax: ...
    @overload
    def Update(self, name: IdentifierNameSyntax, colonEqualsToken: CodeAnalysis.SyntaxToken) -> NameColonEqualsSyntax: ...
    @overload
    def WithColonEqualsToken(self, colonEqualsToken: CodeAnalysis.SyntaxToken) -> NameColonEqualsSyntax: ...
    @overload
    def WithName(self, name: IdentifierNameSyntax) -> NameColonEqualsSyntax: ...

class RangeArgumentSyntax(ArgumentSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def IsNamed(self) -> bool: ...
    @property
    def LowerBound(self) -> ExpressionSyntax: ...
    @property
    def ToKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def UpperBound(self) -> ExpressionSyntax: ...
    @overload
    def GetExpression() -> ExpressionSyntax: ...
    @overload
    def Update(self, lowerBound: ExpressionSyntax, toKeyword: CodeAnalysis.SyntaxToken, upperBound: ExpressionSyntax) -> RangeArgumentSyntax: ...
    @overload
    def WithLowerBound(self, lowerBound: ExpressionSyntax) -> RangeArgumentSyntax: ...
    @overload
    def WithToKeyword(self, toKeyword: CodeAnalysis.SyntaxToken) -> RangeArgumentSyntax: ...
    @overload
    def WithUpperBound(self, upperBound: ExpressionSyntax) -> RangeArgumentSyntax: ...

class QueryExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddClauses(self, items: System.Array[QueryClauseSyntax]) -> QueryExpressionSyntax: ...
    @property
    def Clauses(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, clauses: CodeAnalysis.SyntaxList) -> QueryExpressionSyntax: ...
    @overload
    def WithClauses(self, clauses: CodeAnalysis.SyntaxList) -> QueryExpressionSyntax: ...

class QueryClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class CollectionRangeVariableSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def Identifier(self) -> ModifiedIdentifierSyntax: ...
    @property
    def InKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: ModifiedIdentifierSyntax, asClause: SimpleAsClauseSyntax, inKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> CollectionRangeVariableSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> CollectionRangeVariableSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> CollectionRangeVariableSyntax: ...
    @overload
    def WithIdentifier(self, identifier: ModifiedIdentifierSyntax) -> CollectionRangeVariableSyntax: ...
    @overload
    def WithInKeyword(self, inKeyword: CodeAnalysis.SyntaxToken) -> CollectionRangeVariableSyntax: ...

class ExpressionRangeVariableSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def NameEquals(self) -> VariableNameEqualsSyntax: ...
    @overload
    def Update(self, nameEquals: VariableNameEqualsSyntax, expression: ExpressionSyntax) -> ExpressionRangeVariableSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ExpressionRangeVariableSyntax: ...
    @overload
    def WithNameEquals(self, nameEquals: VariableNameEqualsSyntax) -> ExpressionRangeVariableSyntax: ...

class AggregationRangeVariableSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Aggregation(self) -> AggregationSyntax: ...
    @property
    def NameEquals(self) -> VariableNameEqualsSyntax: ...
    @overload
    def Update(self, nameEquals: VariableNameEqualsSyntax, aggregation: AggregationSyntax) -> AggregationRangeVariableSyntax: ...
    @overload
    def WithAggregation(self, aggregation: AggregationSyntax) -> AggregationRangeVariableSyntax: ...
    @overload
    def WithNameEquals(self, nameEquals: VariableNameEqualsSyntax) -> AggregationRangeVariableSyntax: ...

class VariableNameEqualsSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Identifier(self) -> ModifiedIdentifierSyntax: ...
    @overload
    def Update(self, identifier: ModifiedIdentifierSyntax, asClause: SimpleAsClauseSyntax, equalsToken: CodeAnalysis.SyntaxToken) -> VariableNameEqualsSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> VariableNameEqualsSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> VariableNameEqualsSyntax: ...
    @overload
    def WithIdentifier(self, identifier: ModifiedIdentifierSyntax) -> VariableNameEqualsSyntax: ...

class AggregationSyntax(ExpressionSyntax):
    """    """

class FunctionAggregationSyntax(AggregationSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Argument(self) -> ExpressionSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FunctionName(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, functionName: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, argument: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> FunctionAggregationSyntax: ...
    @overload
    def WithArgument(self, argument: ExpressionSyntax) -> FunctionAggregationSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> FunctionAggregationSyntax: ...
    @overload
    def WithFunctionName(self, functionName: CodeAnalysis.SyntaxToken) -> FunctionAggregationSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> FunctionAggregationSyntax: ...

class GroupAggregationSyntax(AggregationSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GroupKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, groupKeyword: CodeAnalysis.SyntaxToken) -> GroupAggregationSyntax: ...
    @overload
    def WithGroupKeyword(self, groupKeyword: CodeAnalysis.SyntaxToken) -> GroupAggregationSyntax: ...

class FromClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddVariables(self, items: System.Array[CollectionRangeVariableSyntax]) -> FromClauseSyntax: ...
    @property
    def FromKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, fromKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> FromClauseSyntax: ...
    @overload
    def WithFromKeyword(self, fromKeyword: CodeAnalysis.SyntaxToken) -> FromClauseSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> FromClauseSyntax: ...

class LetClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddVariables(self, items: System.Array[ExpressionRangeVariableSyntax]) -> LetClauseSyntax: ...
    @property
    def LetKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, letKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> LetClauseSyntax: ...
    @overload
    def WithLetKeyword(self, letKeyword: CodeAnalysis.SyntaxToken) -> LetClauseSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> LetClauseSyntax: ...

class AggregateClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAdditionalQueryOperators(self, items: System.Array[QueryClauseSyntax]) -> AggregateClauseSyntax: ...
    @overload
    def AddAggregationVariables(self, items: System.Array[AggregationRangeVariableSyntax]) -> AggregateClauseSyntax: ...
    @overload
    def AddVariables(self, items: System.Array[CollectionRangeVariableSyntax]) -> AggregateClauseSyntax: ...
    @property
    def AdditionalQueryOperators(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AggregateKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def AggregationVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def IntoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, aggregateKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList, additionalQueryOperators: CodeAnalysis.SyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> AggregateClauseSyntax: ...
    @overload
    def WithAdditionalQueryOperators(self, additionalQueryOperators: CodeAnalysis.SyntaxList) -> AggregateClauseSyntax: ...
    @overload
    def WithAggregateKeyword(self, aggregateKeyword: CodeAnalysis.SyntaxToken) -> AggregateClauseSyntax: ...
    @overload
    def WithAggregationVariables(self, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> AggregateClauseSyntax: ...
    @overload
    def WithIntoKeyword(self, intoKeyword: CodeAnalysis.SyntaxToken) -> AggregateClauseSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> AggregateClauseSyntax: ...

class DistinctClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def DistinctKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, distinctKeyword: CodeAnalysis.SyntaxToken) -> DistinctClauseSyntax: ...
    @overload
    def WithDistinctKeyword(self, distinctKeyword: CodeAnalysis.SyntaxToken) -> DistinctClauseSyntax: ...

class WhereClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def WhereKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, whereKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> WhereClauseSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> WhereClauseSyntax: ...
    @overload
    def WithWhereKeyword(self, whereKeyword: CodeAnalysis.SyntaxToken) -> WhereClauseSyntax: ...

class PartitionWhileClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def SkipOrTakeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhileKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, skipOrTakeKeyword: CodeAnalysis.SyntaxToken, whileKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax) -> PartitionWhileClauseSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> PartitionWhileClauseSyntax: ...
    @overload
    def WithSkipOrTakeKeyword(self, skipOrTakeKeyword: CodeAnalysis.SyntaxToken) -> PartitionWhileClauseSyntax: ...
    @overload
    def WithWhileKeyword(self, whileKeyword: CodeAnalysis.SyntaxToken) -> PartitionWhileClauseSyntax: ...

class PartitionClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Count(self) -> ExpressionSyntax: ...
    @property
    def SkipOrTakeKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, skipOrTakeKeyword: CodeAnalysis.SyntaxToken, count: ExpressionSyntax) -> PartitionClauseSyntax: ...
    @overload
    def WithCount(self, count: ExpressionSyntax) -> PartitionClauseSyntax: ...
    @overload
    def WithSkipOrTakeKeyword(self, skipOrTakeKeyword: CodeAnalysis.SyntaxToken) -> PartitionClauseSyntax: ...

class GroupByClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAggregationVariables(self, items: System.Array[AggregationRangeVariableSyntax]) -> GroupByClauseSyntax: ...
    @overload
    def AddItems(self, items: System.Array[ExpressionRangeVariableSyntax]) -> GroupByClauseSyntax: ...
    @overload
    def AddKeys(self, items: System.Array[ExpressionRangeVariableSyntax]) -> GroupByClauseSyntax: ...
    @property
    def AggregationVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def ByKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def GroupKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IntoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Items(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def Keys(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, groupKeyword: CodeAnalysis.SyntaxToken, items: CodeAnalysis.SeparatedSyntaxList, byKeyword: CodeAnalysis.SyntaxToken, keys: CodeAnalysis.SeparatedSyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> GroupByClauseSyntax: ...
    @overload
    def WithAggregationVariables(self, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> GroupByClauseSyntax: ...
    @overload
    def WithByKeyword(self, byKeyword: CodeAnalysis.SyntaxToken) -> GroupByClauseSyntax: ...
    @overload
    def WithGroupKeyword(self, groupKeyword: CodeAnalysis.SyntaxToken) -> GroupByClauseSyntax: ...
    @overload
    def WithIntoKeyword(self, intoKeyword: CodeAnalysis.SyntaxToken) -> GroupByClauseSyntax: ...
    @overload
    def WithItems(self, items: CodeAnalysis.SeparatedSyntaxList) -> GroupByClauseSyntax: ...
    @overload
    def WithKeys(self, keys: CodeAnalysis.SeparatedSyntaxList) -> GroupByClauseSyntax: ...

class JoinClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def AddAdditionalJoins(self, items: System.Array[JoinClauseSyntax]) -> JoinClauseSyntax: ...
    @overload
    def AddJoinConditions(self, items: System.Array[JoinConditionSyntax]) -> JoinClauseSyntax: ...
    @overload
    def AddJoinedVariables(self, items: System.Array[CollectionRangeVariableSyntax]) -> JoinClauseSyntax: ...
    @property
    def AdditionalJoins(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def JoinConditions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinedVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithAdditionalJoins(self, additionalJoins: CodeAnalysis.SyntaxList) -> JoinClauseSyntax: ...
    @overload
    def WithJoinConditions(self, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> JoinClauseSyntax: ...
    @overload
    def WithJoinedVariables(self, joinedVariables: CodeAnalysis.SeparatedSyntaxList) -> JoinClauseSyntax: ...
    @overload
    def WithJoinKeyword(self, joinKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> JoinClauseSyntax: ...

class JoinConditionSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EqualsKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Left(self) -> ExpressionSyntax: ...
    @property
    def Right(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, left: ExpressionSyntax, equalsKeyword: CodeAnalysis.SyntaxToken, right: ExpressionSyntax) -> JoinConditionSyntax: ...
    @overload
    def WithEqualsKeyword(self, equalsKeyword: CodeAnalysis.SyntaxToken) -> JoinConditionSyntax: ...
    @overload
    def WithLeft(self, left: ExpressionSyntax) -> JoinConditionSyntax: ...
    @overload
    def WithRight(self, right: ExpressionSyntax) -> JoinConditionSyntax: ...

class SimpleJoinClauseSyntax(JoinClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAdditionalJoins(self, items: System.Array[JoinClauseSyntax]) -> SimpleJoinClauseSyntax: ...
    @overload
    def AddJoinConditions(self, items: System.Array[JoinConditionSyntax]) -> SimpleJoinClauseSyntax: ...
    @overload
    def AddJoinedVariables(self, items: System.Array[CollectionRangeVariableSyntax]) -> SimpleJoinClauseSyntax: ...
    @property
    def AdditionalJoins(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def JoinConditions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinedVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, joinKeyword: CodeAnalysis.SyntaxToken, joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, onKeyword: CodeAnalysis.SyntaxToken, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> SimpleJoinClauseSyntax: ...
    @overload
    def WithAdditionalJoins(self, additionalJoins: CodeAnalysis.SyntaxList) -> SimpleJoinClauseSyntax: ...
    @overload
    def WithJoinConditions(self, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> SimpleJoinClauseSyntax: ...
    @overload
    def WithJoinedVariables(self, joinedVariables: CodeAnalysis.SeparatedSyntaxList) -> SimpleJoinClauseSyntax: ...
    @overload
    def WithJoinKeyword(self, joinKeyword: CodeAnalysis.SyntaxToken) -> SimpleJoinClauseSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> SimpleJoinClauseSyntax: ...

class GroupJoinClauseSyntax(JoinClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddAdditionalJoins(self, items: System.Array[JoinClauseSyntax]) -> GroupJoinClauseSyntax: ...
    @overload
    def AddAggregationVariables(self, items: System.Array[AggregationRangeVariableSyntax]) -> GroupJoinClauseSyntax: ...
    @overload
    def AddJoinConditions(self, items: System.Array[JoinConditionSyntax]) -> GroupJoinClauseSyntax: ...
    @overload
    def AddJoinedVariables(self, items: System.Array[CollectionRangeVariableSyntax]) -> GroupJoinClauseSyntax: ...
    @property
    def AdditionalJoins(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def AggregationVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def GroupKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IntoKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def JoinConditions(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinedVariables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def JoinKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OnKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, groupKeyword: CodeAnalysis.SyntaxToken, joinKeyword: CodeAnalysis.SyntaxToken, joinedVariables: CodeAnalysis.SeparatedSyntaxList, additionalJoins: CodeAnalysis.SyntaxList, onKeyword: CodeAnalysis.SyntaxToken, joinConditions: CodeAnalysis.SeparatedSyntaxList, intoKeyword: CodeAnalysis.SyntaxToken, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> GroupJoinClauseSyntax: ...
    @overload
    def WithAdditionalJoins(self, additionalJoins: CodeAnalysis.SyntaxList) -> GroupJoinClauseSyntax: ...
    @overload
    def WithAggregationVariables(self, aggregationVariables: CodeAnalysis.SeparatedSyntaxList) -> GroupJoinClauseSyntax: ...
    @overload
    def WithGroupKeyword(self, groupKeyword: CodeAnalysis.SyntaxToken) -> GroupJoinClauseSyntax: ...
    @overload
    def WithIntoKeyword(self, intoKeyword: CodeAnalysis.SyntaxToken) -> GroupJoinClauseSyntax: ...
    @overload
    def WithJoinConditions(self, joinConditions: CodeAnalysis.SeparatedSyntaxList) -> GroupJoinClauseSyntax: ...
    @overload
    def WithJoinedVariables(self, joinedVariables: CodeAnalysis.SeparatedSyntaxList) -> GroupJoinClauseSyntax: ...
    @overload
    def WithJoinKeyword(self, joinKeyword: CodeAnalysis.SyntaxToken) -> GroupJoinClauseSyntax: ...
    @overload
    def WithOnKeyword(self, onKeyword: CodeAnalysis.SyntaxToken) -> GroupJoinClauseSyntax: ...

class OrderByClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddOrderings(self, items: System.Array[OrderingSyntax]) -> OrderByClauseSyntax: ...
    @property
    def ByKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Orderings(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def OrderKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, orderKeyword: CodeAnalysis.SyntaxToken, byKeyword: CodeAnalysis.SyntaxToken, orderings: CodeAnalysis.SeparatedSyntaxList) -> OrderByClauseSyntax: ...
    @overload
    def WithByKeyword(self, byKeyword: CodeAnalysis.SyntaxToken) -> OrderByClauseSyntax: ...
    @overload
    def WithOrderings(self, orderings: CodeAnalysis.SeparatedSyntaxList) -> OrderByClauseSyntax: ...
    @overload
    def WithOrderKeyword(self, orderKeyword: CodeAnalysis.SyntaxToken) -> OrderByClauseSyntax: ...

class OrderingSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AscendingOrDescendingKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, expression: ExpressionSyntax, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> OrderingSyntax: ...
    @overload
    def WithAscendingOrDescendingKeyword(self, ascendingOrDescendingKeyword: CodeAnalysis.SyntaxToken) -> OrderingSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> OrderingSyntax: ...

class SelectClauseSyntax(QueryClauseSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddVariables(self, items: System.Array[ExpressionRangeVariableSyntax]) -> SelectClauseSyntax: ...
    @property
    def SelectKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Variables(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @overload
    def Update(self, selectKeyword: CodeAnalysis.SyntaxToken, variables: CodeAnalysis.SeparatedSyntaxList) -> SelectClauseSyntax: ...
    @overload
    def WithSelectKeyword(self, selectKeyword: CodeAnalysis.SyntaxToken) -> SelectClauseSyntax: ...
    @overload
    def WithVariables(self, variables: CodeAnalysis.SeparatedSyntaxList) -> SelectClauseSyntax: ...

class XmlNodeSyntax(ExpressionSyntax):
    """    """

class XmlDocumentSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddFollowingMisc(self, items: System.Array[XmlNodeSyntax]) -> XmlDocumentSyntax: ...
    @overload
    def AddPrecedingMisc(self, items: System.Array[XmlNodeSyntax]) -> XmlDocumentSyntax: ...
    @property
    def Declaration(self) -> XmlDeclarationSyntax: ...
    @property
    def FollowingMisc(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def PrecedingMisc(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def Root(self) -> XmlNodeSyntax: ...
    @overload
    def Update(self, declaration: XmlDeclarationSyntax, precedingMisc: CodeAnalysis.SyntaxList, root: XmlNodeSyntax, followingMisc: CodeAnalysis.SyntaxList) -> XmlDocumentSyntax: ...
    @overload
    def WithDeclaration(self, declaration: XmlDeclarationSyntax) -> XmlDocumentSyntax: ...
    @overload
    def WithFollowingMisc(self, followingMisc: CodeAnalysis.SyntaxList) -> XmlDocumentSyntax: ...
    @overload
    def WithPrecedingMisc(self, precedingMisc: CodeAnalysis.SyntaxList) -> XmlDocumentSyntax: ...
    @overload
    def WithRoot(self, root: XmlNodeSyntax) -> XmlDocumentSyntax: ...

class XmlDeclarationSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Encoding(self) -> XmlDeclarationOptionSyntax: ...
    @property
    def LessThanQuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def QuestionGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Standalone(self) -> XmlDeclarationOptionSyntax: ...
    @property
    def Version(self) -> XmlDeclarationOptionSyntax: ...
    @property
    def XmlKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanQuestionToken: CodeAnalysis.SyntaxToken, xmlKeyword: CodeAnalysis.SyntaxToken, version: XmlDeclarationOptionSyntax, encoding: XmlDeclarationOptionSyntax, standalone: XmlDeclarationOptionSyntax, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlDeclarationSyntax: ...
    @overload
    def WithEncoding(self, encoding: XmlDeclarationOptionSyntax) -> XmlDeclarationSyntax: ...
    @overload
    def WithLessThanQuestionToken(self, lessThanQuestionToken: CodeAnalysis.SyntaxToken) -> XmlDeclarationSyntax: ...
    @overload
    def WithQuestionGreaterThanToken(self, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlDeclarationSyntax: ...
    @overload
    def WithStandalone(self, standalone: XmlDeclarationOptionSyntax) -> XmlDeclarationSyntax: ...
    @overload
    def WithVersion(self, version: XmlDeclarationOptionSyntax) -> XmlDeclarationSyntax: ...
    @overload
    def WithXmlKeyword(self, xmlKeyword: CodeAnalysis.SyntaxToken) -> XmlDeclarationSyntax: ...

class XmlDeclarationOptionSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Equals(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> XmlStringSyntax: ...
    @overload
    def Update(self, name: CodeAnalysis.SyntaxToken, equals: CodeAnalysis.SyntaxToken, value: XmlStringSyntax) -> XmlDeclarationOptionSyntax: ...
    @overload
    def WithEquals(self, equals: CodeAnalysis.SyntaxToken) -> XmlDeclarationOptionSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> XmlDeclarationOptionSyntax: ...
    @overload
    def WithValue(self, value: XmlStringSyntax) -> XmlDeclarationOptionSyntax: ...

class XmlElementSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddContent(self, items: System.Array[XmlNodeSyntax]) -> XmlElementSyntax: ...
    @property
    def Content(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def EndTag(self) -> XmlElementEndTagSyntax: ...
    @property
    def StartTag(self) -> XmlElementStartTagSyntax: ...
    @overload
    def Update(self, startTag: XmlElementStartTagSyntax, content: CodeAnalysis.SyntaxList, endTag: XmlElementEndTagSyntax) -> XmlElementSyntax: ...
    @overload
    def WithContent(self, content: CodeAnalysis.SyntaxList) -> XmlElementSyntax: ...
    @overload
    def WithEndTag(self, endTag: XmlElementEndTagSyntax) -> XmlElementSyntax: ...
    @overload
    def WithStartTag(self, startTag: XmlElementStartTagSyntax) -> XmlElementSyntax: ...

class XmlTextSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlTextSyntax: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlTextSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlTextSyntax: ...

class XmlElementStartTagSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[XmlNodeSyntax]) -> XmlElementStartTagSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNodeSyntax: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, name: XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SyntaxList) -> XmlElementStartTagSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlElementStartTagSyntax: ...
    @overload
    def WithName(self, name: XmlNodeSyntax) -> XmlElementStartTagSyntax: ...

class XmlElementEndTagSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanSlashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @overload
    def Update(self, lessThanSlashToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithLessThanSlashToken(self, lessThanSlashToken: CodeAnalysis.SyntaxToken) -> XmlElementEndTagSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlElementEndTagSyntax: ...

class XmlEmptyElementSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddAttributes(self, items: System.Array[XmlNodeSyntax]) -> XmlEmptyElementSyntax: ...
    @property
    def Attributes(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNodeSyntax: ...
    @property
    def SlashGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, name: XmlNodeSyntax, attributes: CodeAnalysis.SyntaxList, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...
    @overload
    def WithAttributes(self, attributes: CodeAnalysis.SyntaxList) -> XmlEmptyElementSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...
    @overload
    def WithName(self, name: XmlNodeSyntax) -> XmlEmptyElementSyntax: ...
    @overload
    def WithSlashGreaterThanToken(self, slashGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmptyElementSyntax: ...

class XmlAttributeSyntax(BaseXmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNodeSyntax: ...
    @property
    def Value(self) -> XmlNodeSyntax: ...
    @overload
    def Update(self, name: XmlNodeSyntax, equalsToken: CodeAnalysis.SyntaxToken, value: XmlNodeSyntax) -> XmlAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNodeSyntax) -> XmlAttributeSyntax: ...
    @overload
    def WithValue(self, value: XmlNodeSyntax) -> XmlAttributeSyntax: ...

class BaseXmlAttributeSyntax(XmlNodeSyntax):
    """    """

class XmlStringSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlStringSyntax: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, startQuoteToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlStringSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlStringSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlStringSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlStringSyntax: ...

class XmlPrefixNameSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: CodeAnalysis.SyntaxToken) -> XmlPrefixNameSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> XmlPrefixNameSyntax: ...

class XmlNameSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def LocalName(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Prefix(self) -> XmlPrefixSyntax: ...
    @overload
    def Update(self, prefix: XmlPrefixSyntax, localName: CodeAnalysis.SyntaxToken) -> XmlNameSyntax: ...
    @overload
    def WithLocalName(self, localName: CodeAnalysis.SyntaxToken) -> XmlNameSyntax: ...
    @overload
    def WithPrefix(self, prefix: XmlPrefixSyntax) -> XmlNameSyntax: ...

class XmlBracketedNameSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LessThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @overload
    def Update(self, lessThanToken: CodeAnalysis.SyntaxToken, name: XmlNameSyntax, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlBracketedNameSyntax: ...
    @overload
    def WithGreaterThanToken(self, greaterThanToken: CodeAnalysis.SyntaxToken) -> XmlBracketedNameSyntax: ...
    @overload
    def WithLessThanToken(self, lessThanToken: CodeAnalysis.SyntaxToken) -> XmlBracketedNameSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlBracketedNameSyntax: ...

class XmlPrefixSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: CodeAnalysis.SyntaxToken, colonToken: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> XmlPrefixSyntax: ...

class XmlCommentSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlCommentSyntax: ...
    @property
    def LessThanExclamationMinusMinusToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def MinusMinusGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithLessThanExclamationMinusMinusToken(self, lessThanExclamationMinusMinusToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithMinusMinusGreaterThanToken(self, minusMinusGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlCommentSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlCommentSyntax: ...

class XmlProcessingInstructionSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlProcessingInstructionSyntax: ...
    @property
    def LessThanQuestionToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def QuestionGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, lessThanQuestionToken: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithLessThanQuestionToken(self, lessThanQuestionToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithQuestionGreaterThanToken(self, questionGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlProcessingInstructionSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlProcessingInstructionSyntax: ...

class XmlCDataSectionSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddTextTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> XmlCDataSectionSyntax: ...
    @property
    def BeginCDataToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EndCDataToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TextTokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, beginCDataToken: CodeAnalysis.SyntaxToken, textTokens: CodeAnalysis.SyntaxTokenList, endCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithBeginCDataToken(self, beginCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithEndCDataToken(self, endCDataToken: CodeAnalysis.SyntaxToken) -> XmlCDataSectionSyntax: ...
    @overload
    def WithTextTokens(self, textTokens: CodeAnalysis.SyntaxTokenList) -> XmlCDataSectionSyntax: ...

class XmlEmbeddedExpressionSyntax(XmlNodeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def LessThanPercentEqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def PercentGreaterThanToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, lessThanPercentEqualsToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, percentGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmbeddedExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> XmlEmbeddedExpressionSyntax: ...
    @overload
    def WithLessThanPercentEqualsToken(self, lessThanPercentEqualsToken: CodeAnalysis.SyntaxToken) -> XmlEmbeddedExpressionSyntax: ...
    @overload
    def WithPercentGreaterThanToken(self, percentGreaterThanToken: CodeAnalysis.SyntaxToken) -> XmlEmbeddedExpressionSyntax: ...

class TypeSyntax(ExpressionSyntax):
    """    """

class ArrayTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddRankSpecifiers(self, items: System.Array[ArrayRankSpecifierSyntax]) -> ArrayTypeSyntax: ...
    @property
    def ElementType(self) -> TypeSyntax: ...
    @property
    def RankSpecifiers(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, elementType: TypeSyntax, rankSpecifiers: CodeAnalysis.SyntaxList) -> ArrayTypeSyntax: ...
    @overload
    def WithElementType(self, elementType: TypeSyntax) -> ArrayTypeSyntax: ...
    @overload
    def WithRankSpecifiers(self, rankSpecifiers: CodeAnalysis.SyntaxList) -> ArrayTypeSyntax: ...

class NullableTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ElementType(self) -> TypeSyntax: ...
    @property
    def QuestionMarkToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, elementType: TypeSyntax, questionMarkToken: CodeAnalysis.SyntaxToken) -> NullableTypeSyntax: ...
    @overload
    def WithElementType(self, elementType: TypeSyntax) -> NullableTypeSyntax: ...
    @overload
    def WithQuestionMarkToken(self, questionMarkToken: CodeAnalysis.SyntaxToken) -> NullableTypeSyntax: ...

class PredefinedTypeSyntax(TypeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, keyword: CodeAnalysis.SyntaxToken) -> PredefinedTypeSyntax: ...
    @overload
    def WithKeyword(self, keyword: CodeAnalysis.SyntaxToken) -> PredefinedTypeSyntax: ...

class NameSyntax(TypeSyntax):
    """    """
    @property
    def Arity(self) -> int: ...

class SimpleNameSyntax(NameSyntax):
    """    """
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> SimpleNameSyntax: ...

class IdentifierNameSyntax(SimpleNameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken) -> IdentifierNameSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> IdentifierNameSyntax: ...

class GenericNameSyntax(SimpleNameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTypeArgumentListArguments(self, items: System.Array[TypeSyntax]) -> GenericNameSyntax: ...
    @property
    def Identifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def TypeArgumentList(self) -> TypeArgumentListSyntax: ...
    @overload
    def Update(self, identifier: CodeAnalysis.SyntaxToken, typeArgumentList: TypeArgumentListSyntax) -> GenericNameSyntax: ...
    @overload
    def WithIdentifier(self, identifier: CodeAnalysis.SyntaxToken) -> GenericNameSyntax: ...
    @overload
    def WithTypeArgumentList(self, typeArgumentList: TypeArgumentListSyntax) -> GenericNameSyntax: ...

class QualifiedNameSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Left(self) -> NameSyntax: ...
    @property
    def Right(self) -> SimpleNameSyntax: ...
    @overload
    def Update(self, left: NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: SimpleNameSyntax) -> QualifiedNameSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> QualifiedNameSyntax: ...
    @overload
    def WithLeft(self, left: NameSyntax) -> QualifiedNameSyntax: ...
    @overload
    def WithRight(self, right: SimpleNameSyntax) -> QualifiedNameSyntax: ...

class GlobalNameSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def GlobalKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, globalKeyword: CodeAnalysis.SyntaxToken) -> GlobalNameSyntax: ...
    @overload
    def WithGlobalKeyword(self, globalKeyword: CodeAnalysis.SyntaxToken) -> GlobalNameSyntax: ...

class TypeArgumentListSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def AddArguments(self, items: System.Array[TypeSyntax]) -> TypeArgumentListSyntax: ...
    @property
    def Arguments(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, ofKeyword: CodeAnalysis.SyntaxToken, arguments: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...
    @overload
    def WithArguments(self, arguments: CodeAnalysis.SeparatedSyntaxList) -> TypeArgumentListSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...
    @overload
    def WithOfKeyword(self, ofKeyword: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> TypeArgumentListSyntax: ...

class CrefReferenceSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddSignatureArgumentTypes(self, items: System.Array[CrefSignaturePartSyntax]) -> CrefReferenceSyntax: ...
    @property
    def AsClause(self) -> SimpleAsClauseSyntax: ...
    @property
    def Name(self) -> TypeSyntax: ...
    @property
    def Signature(self) -> CrefSignatureSyntax: ...
    @overload
    def Update(self, name: TypeSyntax, signature: CrefSignatureSyntax, asClause: SimpleAsClauseSyntax) -> CrefReferenceSyntax: ...
    @overload
    def WithAsClause(self, asClause: SimpleAsClauseSyntax) -> CrefReferenceSyntax: ...
    @overload
    def WithName(self, name: TypeSyntax) -> CrefReferenceSyntax: ...
    @overload
    def WithSignature(self, signature: CrefSignatureSyntax) -> CrefReferenceSyntax: ...

class CrefSignatureSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddArgumentTypes(self, items: System.Array[CrefSignaturePartSyntax]) -> CrefSignatureSyntax: ...
    @property
    def ArgumentTypes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openParenToken: CodeAnalysis.SyntaxToken, argumentTypes: CodeAnalysis.SeparatedSyntaxList, closeParenToken: CodeAnalysis.SyntaxToken) -> CrefSignatureSyntax: ...
    @overload
    def WithArgumentTypes(self, argumentTypes: CodeAnalysis.SeparatedSyntaxList) -> CrefSignatureSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> CrefSignatureSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> CrefSignatureSyntax: ...

class CrefSignaturePartSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Modifier(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Type(self) -> TypeSyntax: ...
    @overload
    def Update(self, modifier: CodeAnalysis.SyntaxToken, type_: TypeSyntax) -> CrefSignaturePartSyntax: ...
    @overload
    def WithModifier(self, modifier: CodeAnalysis.SyntaxToken) -> CrefSignaturePartSyntax: ...
    @overload
    def WithType(self, type_: TypeSyntax) -> CrefSignaturePartSyntax: ...

class CrefOperatorReferenceSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Keyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OperatorToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, operatorKeyword: CodeAnalysis.SyntaxToken, operatorToken: CodeAnalysis.SyntaxToken) -> CrefOperatorReferenceSyntax: ...
    @overload
    def WithOperatorKeyword(self, operatorKeyword: CodeAnalysis.SyntaxToken) -> CrefOperatorReferenceSyntax: ...
    @overload
    def WithOperatorToken(self, operatorToken: CodeAnalysis.SyntaxToken) -> CrefOperatorReferenceSyntax: ...

class QualifiedCrefOperatorReferenceSyntax(NameSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def DotToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Left(self) -> NameSyntax: ...
    @property
    def Right(self) -> CrefOperatorReferenceSyntax: ...
    @overload
    def Update(self, left: NameSyntax, dotToken: CodeAnalysis.SyntaxToken, right: CrefOperatorReferenceSyntax) -> QualifiedCrefOperatorReferenceSyntax: ...
    @overload
    def WithDotToken(self, dotToken: CodeAnalysis.SyntaxToken) -> QualifiedCrefOperatorReferenceSyntax: ...
    @overload
    def WithLeft(self, left: NameSyntax) -> QualifiedCrefOperatorReferenceSyntax: ...
    @overload
    def WithRight(self, right: CrefOperatorReferenceSyntax) -> QualifiedCrefOperatorReferenceSyntax: ...

class YieldStatementSyntax(ExecutableStatementSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def YieldKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, yieldKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> YieldStatementSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> YieldStatementSyntax: ...
    @overload
    def WithYieldKeyword(self, yieldKeyword: CodeAnalysis.SyntaxToken) -> YieldStatementSyntax: ...

class AwaitExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AwaitKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, awaitKeyword: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax) -> AwaitExpressionSyntax: ...
    @overload
    def WithAwaitKeyword(self, awaitKeyword: CodeAnalysis.SyntaxToken) -> AwaitExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> AwaitExpressionSyntax: ...

class StructuredTriviaSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @property
    def ParentTrivia(self) -> CodeAnalysis.SyntaxTrivia: ...

class SkippedTokensTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddTokens(self, items: CodeAnalysis.System.Array[CodeAnalysis.SyntaxToken]) -> SkippedTokensTriviaSyntax: ...
    @property
    def Tokens(self) -> CodeAnalysis.SyntaxTokenList: ...
    @overload
    def Update(self, tokens: CodeAnalysis.SyntaxTokenList) -> SkippedTokensTriviaSyntax: ...
    @overload
    def WithTokens(self, tokens: CodeAnalysis.SyntaxTokenList) -> SkippedTokensTriviaSyntax: ...

class DocumentationCommentTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddContent(self, items: System.Array[XmlNodeSyntax]) -> DocumentationCommentTriviaSyntax: ...
    @property
    def Content(self) -> CodeAnalysis.SyntaxList: ...
    @overload
    def Update(self, content: CodeAnalysis.SyntaxList) -> DocumentationCommentTriviaSyntax: ...
    @overload
    def WithContent(self, content: CodeAnalysis.SyntaxList) -> DocumentationCommentTriviaSyntax: ...

class XmlCrefAttributeSyntax(BaseXmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def Reference(self) -> CrefReferenceSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, reference: CrefReferenceSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithReference(self, reference: CrefReferenceSyntax) -> XmlCrefAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlCrefAttributeSyntax: ...

class XmlNameAttributeSyntax(BaseXmlAttributeSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def EndQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> XmlNameSyntax: ...
    @property
    def Reference(self) -> IdentifierNameSyntax: ...
    @property
    def StartQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, name: XmlNameSyntax, equalsToken: CodeAnalysis.SyntaxToken, startQuoteToken: CodeAnalysis.SyntaxToken, reference: IdentifierNameSyntax, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithEndQuoteToken(self, endQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...
    @overload
    def WithName(self, name: XmlNameSyntax) -> XmlNameAttributeSyntax: ...
    @overload
    def WithReference(self, reference: IdentifierNameSyntax) -> XmlNameAttributeSyntax: ...
    @overload
    def WithStartQuoteToken(self, startQuoteToken: CodeAnalysis.SyntaxToken) -> XmlNameAttributeSyntax: ...

class ConditionalAccessExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def QuestionMarkToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WhenNotNull(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, expression: ExpressionSyntax, questionMarkToken: CodeAnalysis.SyntaxToken, whenNotNull: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithQuestionMarkToken(self, questionMarkToken: CodeAnalysis.SyntaxToken) -> ConditionalAccessExpressionSyntax: ...
    @overload
    def WithWhenNotNull(self, whenNotNull: ExpressionSyntax) -> ConditionalAccessExpressionSyntax: ...

class NameOfExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Argument(self) -> ExpressionSyntax: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def NameOfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, nameOfKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, argument: ExpressionSyntax, closeParenToken: CodeAnalysis.SyntaxToken) -> NameOfExpressionSyntax: ...
    @overload
    def WithArgument(self, argument: ExpressionSyntax) -> NameOfExpressionSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> NameOfExpressionSyntax: ...
    @overload
    def WithNameOfKeyword(self, nameOfKeyword: CodeAnalysis.SyntaxToken) -> NameOfExpressionSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> NameOfExpressionSyntax: ...

class InterpolatedStringExpressionSyntax(ExpressionSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddContents(self, items: System.Array[InterpolatedStringContentSyntax]) -> InterpolatedStringExpressionSyntax: ...
    @property
    def Contents(self) -> CodeAnalysis.SyntaxList: ...
    @property
    def DollarSignDoubleQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def DoubleQuoteToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, dollarSignDoubleQuoteToken: CodeAnalysis.SyntaxToken, contents: CodeAnalysis.SyntaxList, doubleQuoteToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithContents(self, contents: CodeAnalysis.SyntaxList) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithDollarSignDoubleQuoteToken(self, dollarSignDoubleQuoteToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...
    @overload
    def WithDoubleQuoteToken(self, doubleQuoteToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringExpressionSyntax: ...

class InterpolatedStringContentSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """

class InterpolatedStringTextSyntax(InterpolatedStringContentSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def TextToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, textToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringTextSyntax: ...
    @overload
    def WithTextToken(self, textToken: CodeAnalysis.SyntaxToken) -> InterpolatedStringTextSyntax: ...

class InterpolationSyntax(InterpolatedStringContentSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def AlignmentClause(self) -> InterpolationAlignmentClauseSyntax: ...
    @property
    def CloseBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Expression(self) -> ExpressionSyntax: ...
    @property
    def FormatClause(self) -> InterpolationFormatClauseSyntax: ...
    @property
    def OpenBraceToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, openBraceToken: CodeAnalysis.SyntaxToken, expression: ExpressionSyntax, alignmentClause: InterpolationAlignmentClauseSyntax, formatClause: InterpolationFormatClauseSyntax, closeBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...
    @overload
    def WithAlignmentClause(self, alignmentClause: InterpolationAlignmentClauseSyntax) -> InterpolationSyntax: ...
    @overload
    def WithCloseBraceToken(self, closeBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...
    @overload
    def WithExpression(self, expression: ExpressionSyntax) -> InterpolationSyntax: ...
    @overload
    def WithFormatClause(self, formatClause: InterpolationFormatClauseSyntax) -> InterpolationSyntax: ...
    @overload
    def WithOpenBraceToken(self, openBraceToken: CodeAnalysis.SyntaxToken) -> InterpolationSyntax: ...

class InterpolationAlignmentClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, commaToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> InterpolationAlignmentClauseSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> InterpolationAlignmentClauseSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> InterpolationAlignmentClauseSyntax: ...

class InterpolationFormatClauseSyntax(VisualBasic.VisualBasicSyntaxNode):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ColonToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FormatStringToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, colonToken: CodeAnalysis.SyntaxToken, formatStringToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...
    @overload
    def WithColonToken(self, colonToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...
    @overload
    def WithFormatStringToken(self, formatStringToken: CodeAnalysis.SyntaxToken) -> InterpolationFormatClauseSyntax: ...

class DirectiveTriviaSyntax(StructuredTriviaSyntax):
    """    """
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def GetNextDirective(self, predicate: System.Func) -> DirectiveTriviaSyntax: ...
    @overload
    def GetPreviousDirective(self, predicate: System.Func) -> DirectiveTriviaSyntax: ...
    @overload
    def GetRelatedDirectives() -> Generic.List: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> DirectiveTriviaSyntax: ...

class ConstDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ConstKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def EqualsToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Value(self) -> ExpressionSyntax: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, constKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken, equalsToken: CodeAnalysis.SyntaxToken, value: ExpressionSyntax) -> ConstDirectiveTriviaSyntax: ...
    @overload
    def WithConstKeyword(self, constKeyword: CodeAnalysis.SyntaxToken) -> ConstDirectiveTriviaSyntax: ...
    @overload
    def WithEqualsToken(self, equalsToken: CodeAnalysis.SyntaxToken) -> ConstDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ConstDirectiveTriviaSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> ConstDirectiveTriviaSyntax: ...
    @overload
    def WithValue(self, value: ExpressionSyntax) -> ConstDirectiveTriviaSyntax: ...

class IfDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def Condition(self) -> ExpressionSyntax: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IfOrElseIfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ThenKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, kind: VisualBasic.SyntaxKind, hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken, condition: ExpressionSyntax, thenKeyword: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithCondition(self, condition: ExpressionSyntax) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithIfOrElseIfKeyword(self, ifOrElseIfKeyword: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...
    @overload
    def WithThenKeyword(self, thenKeyword: CodeAnalysis.SyntaxToken) -> IfDirectiveTriviaSyntax: ...

class ElseDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def ElseKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithElseKeyword(self, elseKeyword: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ElseDirectiveTriviaSyntax: ...

class EndIfDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def EndKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def IfKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, ifKeyword: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithEndKeyword(self, endKeyword: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...
    @overload
    def WithIfKeyword(self, ifKeyword: CodeAnalysis.SyntaxToken) -> EndIfDirectiveTriviaSyntax: ...

class RegionDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Name(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RegionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken, name: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithName(self, name: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...
    @overload
    def WithRegionKeyword(self, regionKeyword: CodeAnalysis.SyntaxToken) -> RegionDirectiveTriviaSyntax: ...

class EndRegionDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def EndKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def RegionKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, regionKeyword: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithEndKeyword(self, endKeyword: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...
    @overload
    def WithRegionKeyword(self, regionKeyword: CodeAnalysis.SyntaxToken) -> EndRegionDirectiveTriviaSyntax: ...

class ExternalSourceDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternalSource(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternalSourceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def LineStart(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, externalSourceKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, externalSource: CodeAnalysis.SyntaxToken, commaToken: CodeAnalysis.SyntaxToken, lineStart: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithCommaToken(self, commaToken: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithExternalSource(self, externalSource: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithExternalSourceKeyword(self, externalSourceKeyword: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithLineStart(self, lineStart: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ExternalSourceDirectiveTriviaSyntax: ...

class EndExternalSourceDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def EndKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternalSourceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, endKeyword: CodeAnalysis.SyntaxToken, externalSourceKeyword: CodeAnalysis.SyntaxToken) -> EndExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithEndKeyword(self, endKeyword: CodeAnalysis.SyntaxToken) -> EndExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithExternalSourceKeyword(self, externalSourceKeyword: CodeAnalysis.SyntaxToken) -> EndExternalSourceDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EndExternalSourceDirectiveTriviaSyntax: ...

class ExternalChecksumDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def Checksum(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def CloseParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternalChecksumKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ExternalSource(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def FirstCommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def Guid(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def OpenParenToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def SecondCommaToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, externalChecksumKeyword: CodeAnalysis.SyntaxToken, openParenToken: CodeAnalysis.SyntaxToken, externalSource: CodeAnalysis.SyntaxToken, firstCommaToken: CodeAnalysis.SyntaxToken, guid: CodeAnalysis.SyntaxToken, secondCommaToken: CodeAnalysis.SyntaxToken, checksum: CodeAnalysis.SyntaxToken, closeParenToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithChecksum(self, checksum: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithCloseParenToken(self, closeParenToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithExternalChecksumKeyword(self, externalChecksumKeyword: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithExternalSource(self, externalSource: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithFirstCommaToken(self, firstCommaToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithGuid(self, guid: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithOpenParenToken(self, openParenToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...
    @overload
    def WithSecondCommaToken(self, secondCommaToken: CodeAnalysis.SyntaxToken) -> ExternalChecksumDirectiveTriviaSyntax: ...

class EnableWarningDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddErrorCodes(self, items: System.Array[IdentifierNameSyntax]) -> EnableWarningDirectiveTriviaSyntax: ...
    @property
    def EnableKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ErrorCodes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WarningKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, enableKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> EnableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithEnableKeyword(self, enableKeyword: CodeAnalysis.SyntaxToken) -> EnableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithErrorCodes(self, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> EnableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> EnableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithWarningKeyword(self, warningKeyword: CodeAnalysis.SyntaxToken) -> EnableWarningDirectiveTriviaSyntax: ...

class DisableWarningDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def AddErrorCodes(self, items: System.Array[IdentifierNameSyntax]) -> DisableWarningDirectiveTriviaSyntax: ...
    @property
    def DisableKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ErrorCodes(self) -> CodeAnalysis.SeparatedSyntaxList: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def WarningKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, disableKeyword: CodeAnalysis.SyntaxToken, warningKeyword: CodeAnalysis.SyntaxToken, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> DisableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithDisableKeyword(self, disableKeyword: CodeAnalysis.SyntaxToken) -> DisableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithErrorCodes(self, errorCodes: CodeAnalysis.SeparatedSyntaxList) -> DisableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> DisableWarningDirectiveTriviaSyntax: ...
    @overload
    def WithWarningKeyword(self, warningKeyword: CodeAnalysis.SyntaxToken) -> DisableWarningDirectiveTriviaSyntax: ...

class ReferenceDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @property
    def File(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @property
    def ReferenceKeyword(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken, referenceKeyword: CodeAnalysis.SyntaxToken, file: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithFile(self, file: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...
    @overload
    def WithReferenceKeyword(self, referenceKeyword: CodeAnalysis.SyntaxToken) -> ReferenceDirectiveTriviaSyntax: ...

class BadDirectiveTriviaSyntax(DirectiveTriviaSyntax):
    """    """
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> TResult: ...
    @overload
    def Accept(self, visitor: VisualBasic.VisualBasicSyntaxVisitor) -> None: ...
    @property
    def HashToken(self) -> CodeAnalysis.SyntaxToken: ...
    @overload
    def Update(self, hashToken: CodeAnalysis.SyntaxToken) -> BadDirectiveTriviaSyntax: ...
    @overload
    def WithHashToken(self, hashToken: CodeAnalysis.SyntaxToken) -> BadDirectiveTriviaSyntax: ...

class SyntaxNodeRemover(object):
    """    """
    def __init__(self): ...

# endregion
