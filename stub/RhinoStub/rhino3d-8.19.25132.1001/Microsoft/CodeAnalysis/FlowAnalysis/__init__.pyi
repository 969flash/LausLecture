"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IFlowCaptureOperation", "IFlowCaptureReferenceOperation", "IIsNullOperation", "ICaughtExceptionOperation", "IStaticLocalInitializationSemaphoreOperation", "IFlowAnonymousFunctionOperation", "BasicBlock", "BasicBlockKind", "CaptureId", "ControlFlowBranch", "ControlFlowBranchSemantics", "ControlFlowConditionKind", "ControlFlowGraph", "ControlFlowGraphExtensions", "ControlFlowRegion", "ControlFlowRegionKind"]
# endregion

# region: Imports
from Microsoft import CodeAnalysis
from Microsoft.CodeAnalysis import Operations
from System import Threading
from System.Collections import Immutable
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.CodeAnalysis, Version=4.6.0.0

class IFlowCaptureOperation:
    """    """
    @property
    def Id(self) -> CaptureId: ...
    @property
    def Value(self) -> CodeAnalysis.IOperation: ...

class IFlowCaptureReferenceOperation:
    """    """
    @property
    def Id(self) -> CaptureId: ...
    @property
    def IsInitialization(self) -> bool: ...

class IIsNullOperation:
    """    """
    @property
    def Operand(self) -> CodeAnalysis.IOperation: ...

class ICaughtExceptionOperation:
    """    """

class IStaticLocalInitializationSemaphoreOperation:
    """    """
    @property
    def Local(self) -> CodeAnalysis.ILocalSymbol: ...

class IFlowAnonymousFunctionOperation:
    """    """
    @property
    def Symbol(self) -> CodeAnalysis.IMethodSymbol: ...

class BasicBlock(object):
    """    """
    @property
    def BranchValue(self) -> CodeAnalysis.IOperation: ...
    @property
    def ConditionalSuccessor(self) -> ControlFlowBranch: ...
    @property
    def ConditionKind(self) -> ControlFlowConditionKind: ...
    @property
    def EnclosingRegion(self) -> ControlFlowRegion: ...
    @property
    def FallThroughSuccessor(self) -> ControlFlowBranch: ...
    @property
    def IsReachable(self) -> bool: ...
    @property
    def Kind(self) -> BasicBlockKind: ...
    @property
    def Operations(self) -> Immutable.ImmutableArray: ...
    @property
    def Ordinal(self) -> int: ...
    @property
    def Predecessors(self) -> Immutable.ImmutableArray: ...

class BasicBlockKind(enum.Enum):
    Entry = 0
    Exit = 1
    Block = 2

class CaptureId(System.ValueType):
    """    """
    @overload
    def Equals(self, other: CaptureId) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ControlFlowBranch(object):
    """    """
    @property
    def Destination(self) -> BasicBlock: ...
    @property
    def EnteringRegions(self) -> Immutable.ImmutableArray: ...
    @property
    def FinallyRegions(self) -> Immutable.ImmutableArray: ...
    @property
    def IsConditionalSuccessor(self) -> bool: ...
    @property
    def LeavingRegions(self) -> Immutable.ImmutableArray: ...
    @property
    def Semantics(self) -> ControlFlowBranchSemantics: ...
    @property
    def Source(self) -> BasicBlock: ...

class ControlFlowBranchSemantics(enum.Enum):
    None_ = 0
    Regular = 1
    Return = 2
    StructuredExceptionHandling = 3
    ProgramTermination = 4
    Throw = 5
    Rethrow = 6
    Error = 7

class ControlFlowConditionKind(enum.Enum):
    None_ = 0
    WhenFalse = 1
    WhenTrue = 2

class ControlFlowGraph(object):
    """    """
    @overload
    @staticmethod
    def Create(body: Operations.IBlockOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(initializer: Operations.IFieldInitializerOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(initializer: Operations.IPropertyInitializerOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(initializer: Operations.IParameterInitializerOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(attribute: Operations.IAttributeOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(constructorBody: Operations.IConstructorBodyOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(methodBody: Operations.IMethodBodyOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def Create(node: CodeAnalysis.SyntaxNode, semanticModel: CodeAnalysis.SemanticModel, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @property
    def Blocks(self) -> Immutable.ImmutableArray: ...
    @property
    def LocalFunctions(self) -> Immutable.ImmutableArray: ...
    @property
    def OriginalOperation(self) -> CodeAnalysis.IOperation: ...
    @property
    def Parent(self) -> ControlFlowGraph: ...
    @property
    def Root(self) -> ControlFlowRegion: ...
    @overload
    def GetAnonymousFunctionControlFlowGraph(self, anonymousFunction: IFlowAnonymousFunctionOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    def GetLocalFunctionControlFlowGraph(self, localFunction: CodeAnalysis.IMethodSymbol, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...

class ControlFlowGraphExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetAnonymousFunctionControlFlowGraphInScope(controlFlowGraph: ControlFlowGraph, anonymousFunction: IFlowAnonymousFunctionOperation, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...
    @overload
    @staticmethod
    def GetLocalFunctionControlFlowGraphInScope(controlFlowGraph: ControlFlowGraph, localFunction: CodeAnalysis.IMethodSymbol, cancellationToken: Threading.CancellationToken) -> ControlFlowGraph: ...

class ControlFlowRegion(object):
    """    """
    @property
    def CaptureIds(self) -> Immutable.ImmutableArray: ...
    @property
    def EnclosingRegion(self) -> ControlFlowRegion: ...
    @property
    def ExceptionType(self) -> CodeAnalysis.ITypeSymbol: ...
    @property
    def FirstBlockOrdinal(self) -> int: ...
    @property
    def Kind(self) -> ControlFlowRegionKind: ...
    @property
    def LastBlockOrdinal(self) -> int: ...
    @property
    def LocalFunctions(self) -> Immutable.ImmutableArray: ...
    @property
    def Locals(self) -> Immutable.ImmutableArray: ...
    @property
    def NestedRegions(self) -> Immutable.ImmutableArray: ...

class ControlFlowRegionKind(enum.Enum):
    Root = 0
    LocalLifetime = 1
    Try = 2
    Filter = 3
    Catch = 4
    FilterAndHandler = 5
    TryAndCatch = 6
    Finally = 7
    TryAndFinally = 8
    StaticLocalInitializer = 9
    ErroneousBody = 10

# endregion
