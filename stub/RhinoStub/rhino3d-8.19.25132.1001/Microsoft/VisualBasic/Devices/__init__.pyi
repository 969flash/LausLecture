"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Audio", "Clock", "Computer", "ComputerInfo", "Keyboard", "Mouse", "NetworkAvailableEventArgs", "NetworkAvailableEventHandler", "Network", "ServerComputer"]
# endregion

# region: Imports
from Microsoft import VisualBasic
from Microsoft.VisualBasic import FileIO
from Microsoft.VisualBasic import MyServices
from System import Globalization
from System import IO
from System import Media
from System import Net
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import System
# endregion

# region: Microsoft.VisualBasic.Forms, Version=7.0.0.0

class Audio(object):
    """    """
    def __init__(self): ...
    @overload
    def Play(self, location: str) -> None: ...
    @overload
    def Play(self, location: str, playMode: VisualBasic.AudioPlayMode) -> None: ...
    @overload
    def Play(self, data: System.System.Array[System.Byte], playMode: VisualBasic.AudioPlayMode) -> None: ...
    @overload
    def Play(self, stream: IO.Stream, playMode: VisualBasic.AudioPlayMode) -> None: ...
    @overload
    def PlaySystemSound(self, systemSound: Media.SystemSound) -> None: ...
    @overload
    def Stop() -> None: ...

class Clock(object):
    """    """
    def __init__(self): ...
    @property
    def GmtTime(self) -> System.DateTime: ...
    @property
    def LocalTime(self) -> System.DateTime: ...
    @property
    def TickCount(self) -> int: ...

class Computer(ServerComputer):
    """    """
    def __init__(self): ...
    @property
    def Audio(self) -> Audio: ...
    @property
    def Clipboard(self) -> MyServices.ClipboardProxy: ...
    @property
    def Keyboard(self) -> Keyboard: ...
    @property
    def Mouse(self) -> Mouse: ...
    @property
    def Screen(self) -> Forms.Screen: ...

class ComputerInfo(object):
    """    """
    def __init__(self): ...
    @property
    def AvailablePhysicalMemory(self) -> System.UInt64: ...
    @property
    def AvailableVirtualMemory(self) -> System.UInt64: ...
    @property
    def InstalledUICulture(self) -> Globalization.CultureInfo: ...
    @property
    def OSFullName(self) -> str: ...
    @property
    def OSPlatform(self) -> str: ...
    @property
    def OSVersion(self) -> str: ...
    @property
    def TotalPhysicalMemory(self) -> System.UInt64: ...
    @property
    def TotalVirtualMemory(self) -> System.UInt64: ...

class Keyboard(object):
    """    """
    def __init__(self): ...
    @property
    def AltKeyDown(self) -> bool: ...
    @property
    def CapsLock(self) -> bool: ...
    @property
    def CtrlKeyDown(self) -> bool: ...
    @property
    def NumLock(self) -> bool: ...
    @property
    def ScrollLock(self) -> bool: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @overload
    def SendKeys(self, keys: str) -> None: ...
    @overload
    def SendKeys(self, keys: str, wait: bool) -> None: ...

class Mouse(object):
    """    """
    def __init__(self): ...
    @property
    def ButtonsSwapped(self) -> bool: ...
    @property
    def WheelExists(self) -> bool: ...
    @property
    def WheelScrollLines(self) -> int: ...

class NetworkAvailableEventArgs(System.EventArgs):
    """    """
    def __init__(self, networkAvailable: bool): ...
    @property
    def IsNetworkAvailable(self) -> bool: ...

class NetworkAvailableEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: NetworkAvailableEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: NetworkAvailableEventArgs) -> None: ...

class Network(object):
    """    """
    def __init__(self): ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str, userName: str, password: str) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str, networkCredentials: Net.ICredentials, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str, networkCredentials: Net.ICredentials, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: FileIO.UICancelOption) -> None: ...
    @property
    def IsAvailable(self) -> bool: ...
    @overload
    def Ping(self, address: System.Uri) -> bool: ...
    @overload
    def Ping(self, hostNameOrAddress: str) -> bool: ...
    @overload
    def Ping(self, hostNameOrAddress: str, timeout: int) -> bool: ...
    @overload
    def Ping(self, address: System.Uri, timeout: int) -> bool: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri, userName: str, password: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri, networkCredentials: Net.ICredentials, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri, userName: str, password: str, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri, networkCredentials: Net.ICredentials, showUI: bool, connectionTimeout: int, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str, showUI: bool, connectionTimeout: int, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: System.Uri, userName: str, password: str, showUI: bool, connectionTimeout: int, onUserCancel: FileIO.UICancelOption) -> None: ...
    @property
    def NetworkAvailabilityChanged(self): ...

class ServerComputer(object):
    """    """
    def __init__(self): ...
    @property
    def Clock(self) -> Clock: ...
    @property
    def FileSystem(self) -> MyServices.FileSystemProxy: ...
    @property
    def Info(self) -> ComputerInfo: ...
    @property
    def Name(self) -> str: ...
    @property
    def Network(self) -> Network: ...
    @property
    def Registry(self) -> MyServices.RegistryProxy: ...

# endregion
