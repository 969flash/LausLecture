"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["VBCodeProvider"]
# endregion

# region: Imports
from System import CodeDom
from System import ComponentModel
from System import IO
from System.CodeDom import Compiler
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CompilerServices", "FileIO", "Collection", "ComClassAttribute", "Constants", "ControlChars", "Conversion", "DateAndTime", "ErrObject", "FileSystem", "Financial", "VariantType", "AppWinStyle", "CallType", "CompareMethod", "DateFormat", "FirstDayOfWeek", "FileAttribute", "FirstWeekOfYear", "VbStrConv", "TriState", "DateInterval", "DueDate", "OpenMode", "OpenAccess", "OpenShare", "TabInfo", "SpcInfo", "MsgBoxResult", "MsgBoxStyle", "HideModuleNameAttribute", "Information", "Interaction", "MyGroupCollectionAttribute", "Strings", "VBFixedArrayAttribute", "VBFixedStringAttribute", "VBMath"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ApplicationServices", "CompilerServices", "Devices", "Logging", "MyServices", "AudioPlayMode"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Microsoft.VisualBasic.Forms, Version=7.0.0.0

class AudioPlayMode(enum.Enum):
    WaitToComplete = 0
    Background = 1
    BackgroundLoop = 2

# endregion

# region: Microsoft.VisualBasic.Core, Version=12.0.0.0

class Collection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, Item: object, Key: str, Before: object, After: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, Key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, Key: str) -> None: ...
    @overload
    def Remove(self, Index: int) -> None: ...

class ComClassAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, _ClassID: str): ...
    @overload
    def __init__(self, _ClassID: str, _InterfaceID: str): ...
    @overload
    def __init__(self, _ClassID: str, _InterfaceID: str, _EventId: str): ...
    @property
    def ClassID(self) -> str: ...
    @property
    def EventID(self) -> str: ...
    @property
    def InterfaceID(self) -> str: ...
    @property
    def InterfaceShadows(self) -> bool: ...
    @InterfaceShadows.setter
    def InterfaceShadows(self, value: System.Void): ...

class Constants(object):
    """    """
    @property
    def vbCrLf(self) -> str: ...
    @property
    def vbObjectError(self) -> int: ...
    @property
    def vbNewLine(self) -> str: ...
    @property
    def vbCr(self) -> str: ...
    @property
    def vbLf(self) -> str: ...
    @property
    def vbBack(self) -> str: ...
    @property
    def vbFormFeed(self) -> str: ...
    @property
    def vbTab(self) -> str: ...
    @property
    def vbVerticalTab(self) -> str: ...
    @property
    def vbNullChar(self) -> str: ...
    @property
    def vbNullString(self) -> str: ...
    @property
    def vbHide(self) -> AppWinStyle: ...
    @property
    def vbNormalFocus(self) -> AppWinStyle: ...
    @property
    def vbMinimizedFocus(self) -> AppWinStyle: ...
    @property
    def vbMaximizedFocus(self) -> AppWinStyle: ...
    @property
    def vbNormalNoFocus(self) -> AppWinStyle: ...
    @property
    def vbMinimizedNoFocus(self) -> AppWinStyle: ...
    @property
    def vbMethod(self) -> CallType: ...
    @property
    def vbGet(self) -> CallType: ...
    @property
    def vbLet(self) -> CallType: ...
    @property
    def vbSet(self) -> CallType: ...
    @property
    def vbBinaryCompare(self) -> CompareMethod: ...
    @property
    def vbTextCompare(self) -> CompareMethod: ...
    @property
    def vbGeneralDate(self) -> DateFormat: ...
    @property
    def vbLongDate(self) -> DateFormat: ...
    @property
    def vbShortDate(self) -> DateFormat: ...
    @property
    def vbLongTime(self) -> DateFormat: ...
    @property
    def vbShortTime(self) -> DateFormat: ...
    @property
    def vbUseSystemDayOfWeek(self) -> FirstDayOfWeek: ...
    @property
    def vbSunday(self) -> FirstDayOfWeek: ...
    @property
    def vbMonday(self) -> FirstDayOfWeek: ...
    @property
    def vbTuesday(self) -> FirstDayOfWeek: ...
    @property
    def vbWednesday(self) -> FirstDayOfWeek: ...
    @property
    def vbThursday(self) -> FirstDayOfWeek: ...
    @property
    def vbFriday(self) -> FirstDayOfWeek: ...
    @property
    def vbSaturday(self) -> FirstDayOfWeek: ...
    @property
    def vbNormal(self) -> FileAttribute: ...
    @property
    def vbReadOnly(self) -> FileAttribute: ...
    @property
    def vbHidden(self) -> FileAttribute: ...
    @property
    def vbSystem(self) -> FileAttribute: ...
    @property
    def vbVolume(self) -> FileAttribute: ...
    @property
    def vbDirectory(self) -> FileAttribute: ...
    @property
    def vbArchive(self) -> FileAttribute: ...
    @property
    def vbUseSystem(self) -> FirstWeekOfYear: ...
    @property
    def vbFirstJan1(self) -> FirstWeekOfYear: ...
    @property
    def vbFirstFourDays(self) -> FirstWeekOfYear: ...
    @property
    def vbFirstFullWeek(self) -> FirstWeekOfYear: ...
    @property
    def vbUpperCase(self) -> VbStrConv: ...
    @property
    def vbLowerCase(self) -> VbStrConv: ...
    @property
    def vbProperCase(self) -> VbStrConv: ...
    @property
    def vbWide(self) -> VbStrConv: ...
    @property
    def vbNarrow(self) -> VbStrConv: ...
    @property
    def vbKatakana(self) -> VbStrConv: ...
    @property
    def vbHiragana(self) -> VbStrConv: ...
    @property
    def vbSimplifiedChinese(self) -> VbStrConv: ...
    @property
    def vbTraditionalChinese(self) -> VbStrConv: ...
    @property
    def vbLinguisticCasing(self) -> VbStrConv: ...
    @property
    def vbUseDefault(self) -> TriState: ...
    @property
    def vbTrue(self) -> TriState: ...
    @property
    def vbFalse(self) -> TriState: ...
    @property
    def vbEmpty(self) -> VariantType: ...
    @property
    def vbNull(self) -> VariantType: ...
    @property
    def vbInteger(self) -> VariantType: ...
    @property
    def vbLong(self) -> VariantType: ...
    @property
    def vbSingle(self) -> VariantType: ...
    @property
    def vbDouble(self) -> VariantType: ...
    @property
    def vbCurrency(self) -> VariantType: ...
    @property
    def vbDate(self) -> VariantType: ...
    @property
    def vbString(self) -> VariantType: ...
    @property
    def vbObject(self) -> VariantType: ...
    @property
    def vbBoolean(self) -> VariantType: ...
    @property
    def vbVariant(self) -> VariantType: ...
    @property
    def vbDecimal(self) -> VariantType: ...
    @property
    def vbByte(self) -> VariantType: ...
    @property
    def vbUserDefinedType(self) -> VariantType: ...
    @property
    def vbArray(self) -> VariantType: ...
    @property
    def vbOK(self) -> MsgBoxResult: ...
    @property
    def vbCancel(self) -> MsgBoxResult: ...
    @property
    def vbAbort(self) -> MsgBoxResult: ...
    @property
    def vbRetry(self) -> MsgBoxResult: ...
    @property
    def vbIgnore(self) -> MsgBoxResult: ...
    @property
    def vbYes(self) -> MsgBoxResult: ...
    @property
    def vbNo(self) -> MsgBoxResult: ...
    @property
    def vbOKOnly(self) -> MsgBoxStyle: ...
    @property
    def vbOKCancel(self) -> MsgBoxStyle: ...
    @property
    def vbAbortRetryIgnore(self) -> MsgBoxStyle: ...
    @property
    def vbYesNoCancel(self) -> MsgBoxStyle: ...
    @property
    def vbYesNo(self) -> MsgBoxStyle: ...
    @property
    def vbRetryCancel(self) -> MsgBoxStyle: ...
    @property
    def vbCritical(self) -> MsgBoxStyle: ...
    @property
    def vbQuestion(self) -> MsgBoxStyle: ...
    @property
    def vbExclamation(self) -> MsgBoxStyle: ...
    @property
    def vbInformation(self) -> MsgBoxStyle: ...
    @property
    def vbDefaultButton1(self) -> MsgBoxStyle: ...
    @property
    def vbDefaultButton2(self) -> MsgBoxStyle: ...
    @property
    def vbDefaultButton3(self) -> MsgBoxStyle: ...
    @property
    def vbApplicationModal(self) -> MsgBoxStyle: ...
    @property
    def vbSystemModal(self) -> MsgBoxStyle: ...
    @property
    def vbMsgBoxHelp(self) -> MsgBoxStyle: ...
    @property
    def vbMsgBoxRight(self) -> MsgBoxStyle: ...
    @property
    def vbMsgBoxRtlReading(self) -> MsgBoxStyle: ...
    @property
    def vbMsgBoxSetForeground(self) -> MsgBoxStyle: ...

class ControlChars(object):
    """    """
    def __init__(self): ...
    @property
    def CrLf(self) -> str: ...
    @property
    def NewLine(self) -> str: ...
    @property
    def Cr(self) -> System.Char: ...
    @property
    def Lf(self) -> System.Char: ...
    @property
    def Back(self) -> System.Char: ...
    @property
    def FormFeed(self) -> System.Char: ...
    @property
    def Tab(self) -> System.Char: ...
    @property
    def VerticalTab(self) -> System.Char: ...
    @property
    def NullChar(self) -> System.Char: ...
    @property
    def Quote(self) -> System.Char: ...

class Conversion(object):
    """    """
    @overload
    @staticmethod
    def CTypeDynamic(Expression: object) -> TargetType: ...
    @overload
    @staticmethod
    def CTypeDynamic(Expression: object, TargetType: System.Type) -> object: ...
    @overload
    @staticmethod
    def ErrorToString() -> str: ...
    @overload
    @staticmethod
    def ErrorToString(ErrorNumber: int) -> str: ...
    @overload
    @staticmethod
    def Fix(Number: System.Int16) -> System.Int16: ...
    @overload
    @staticmethod
    def Fix(Number: int) -> int: ...
    @overload
    @staticmethod
    def Fix(Number: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def Fix(Number: float) -> float: ...
    @overload
    @staticmethod
    def Fix(Number: System.Single) -> System.Single: ...
    @overload
    @staticmethod
    def Fix(Number: System.Decimal) -> System.Decimal: ...
    @overload
    @staticmethod
    def Fix(Number: object) -> object: ...
    @overload
    @staticmethod
    def Hex(Number: System.UInt32) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.SByte) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.Byte) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.Int16) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.UInt16) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: int) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.Int64) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: System.UInt64) -> str: ...
    @overload
    @staticmethod
    def Hex(Number: object) -> str: ...
    @overload
    @staticmethod
    def Int(Number: System.Int16) -> System.Int16: ...
    @overload
    @staticmethod
    def Int(Number: int) -> int: ...
    @overload
    @staticmethod
    def Int(Number: float) -> float: ...
    @overload
    @staticmethod
    def Int(Number: System.Single) -> System.Single: ...
    @overload
    @staticmethod
    def Int(Number: System.Decimal) -> System.Decimal: ...
    @overload
    @staticmethod
    def Int(Number: object) -> object: ...
    @overload
    @staticmethod
    def Int(Number: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def Oct(Number: System.Int16) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.Byte) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: object) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.UInt16) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.Int64) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.UInt32) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: int) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.SByte) -> str: ...
    @overload
    @staticmethod
    def Oct(Number: System.UInt64) -> str: ...
    @overload
    @staticmethod
    def Str(Number: object) -> str: ...
    @overload
    @staticmethod
    def Val(Expression: System.Char) -> int: ...
    @overload
    @staticmethod
    def Val(Expression: object) -> float: ...
    @overload
    @staticmethod
    def Val(InputStr: str) -> float: ...

class DateAndTime(object):
    """    """
    @overload
    @staticmethod
    def DateAdd(Interval: DateInterval, Number: float, DateValue: System.DateTime) -> System.DateTime: ...
    @overload
    @staticmethod
    def DateAdd(Interval: str, Number: float, DateValue: object) -> System.DateTime: ...
    @overload
    @staticmethod
    def DateDiff(Interval: DateInterval, Date1: System.DateTime, Date2: System.DateTime, DayOfWeek: FirstDayOfWeek, WeekOfYear: FirstWeekOfYear) -> System.Int64: ...
    @overload
    @staticmethod
    def DateDiff(Interval: str, Date1: object, Date2: object, DayOfWeek: FirstDayOfWeek, WeekOfYear: FirstWeekOfYear) -> System.Int64: ...
    @overload
    @staticmethod
    def DatePart(Interval: str, DateValue: object, DayOfWeek: FirstDayOfWeek, WeekOfYear: FirstWeekOfYear) -> int: ...
    @overload
    @staticmethod
    def DatePart(Interval: DateInterval, DateValue: System.DateTime, FirstDayOfWeekValue: FirstDayOfWeek, FirstWeekOfYearValue: FirstWeekOfYear) -> int: ...
    @overload
    @staticmethod
    def DateSerial(Year: int, Month: int, Day: int) -> System.DateTime: ...
    @overload
    @staticmethod
    def DateValue(StringDate: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def Day(DateValue: System.DateTime) -> int: ...
    @property
    def DateString(self) -> str: ...
    @property
    def Now(self) -> System.DateTime: ...
    @property
    def TimeOfDay(self) -> System.DateTime: ...
    @property
    def Timer(self) -> float: ...
    @property
    def TimeString(self) -> str: ...
    @property
    def Today(self) -> System.DateTime: ...
    @overload
    @staticmethod
    def Hour(TimeValue: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def Minute(TimeValue: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def Month(DateValue: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def MonthName(Month: int, Abbreviate: bool) -> str: ...
    @overload
    @staticmethod
    def Second(TimeValue: System.DateTime) -> int: ...
    @DateString.setter
    def DateString(self, value: System.Void): ...
    @TimeOfDay.setter
    def TimeOfDay(self, value: System.Void): ...
    @TimeString.setter
    def TimeString(self, value: System.Void): ...
    @Today.setter
    def Today(self, value: System.Void): ...
    @overload
    @staticmethod
    def TimeSerial(Hour: int, Minute: int, Second: int) -> System.DateTime: ...
    @overload
    @staticmethod
    def TimeValue(StringTime: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def Weekday(DateValue: System.DateTime, DayOfWeek: FirstDayOfWeek) -> int: ...
    @overload
    @staticmethod
    def WeekdayName(Weekday: int, Abbreviate: bool, FirstDayOfWeekValue: FirstDayOfWeek) -> str: ...
    @overload
    @staticmethod
    def Year(DateValue: System.DateTime) -> int: ...

class ErrObject(object):
    """    """
    @overload
    def Clear() -> None: ...
    @property
    def Description(self) -> str: ...
    @property
    def Erl(self) -> int: ...
    @property
    def HelpContext(self) -> int: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def LastDllError(self) -> int: ...
    @property
    def Number(self) -> int: ...
    @property
    def Source(self) -> str: ...
    @overload
    def GetException() -> System.Exception: ...
    @overload
    def Raise(self, Number: int, Source: object, Description: object, HelpFile: object, HelpContext: object) -> None: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @HelpContext.setter
    def HelpContext(self, value: System.Void): ...
    @HelpFile.setter
    def HelpFile(self, value: System.Void): ...
    @Number.setter
    def Number(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class FileSystem(object):
    """    """
    @overload
    @staticmethod
    def ChDir(Path: str) -> None: ...
    @overload
    @staticmethod
    def ChDrive(Drive: System.Char) -> None: ...
    @overload
    @staticmethod
    def ChDrive(Drive: str) -> None: ...
    @overload
    @staticmethod
    def CurDir() -> str: ...
    @overload
    @staticmethod
    def CurDir(Drive: System.Char) -> str: ...
    @overload
    @staticmethod
    def Dir() -> str: ...
    @overload
    @staticmethod
    def Dir(PathName: str, Attributes: FileAttribute) -> str: ...
    @overload
    @staticmethod
    def EOF(FileNumber: int) -> bool: ...
    @overload
    @staticmethod
    def FileAttr(FileNumber: int) -> OpenMode: ...
    @overload
    @staticmethod
    def FileClose(FileNumbers: System.System.Array[int]) -> None: ...
    @overload
    @staticmethod
    def FileCopy(Source: str, Destination: str) -> None: ...
    @overload
    @staticmethod
    def FileDateTime(PathName: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (int): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Int16): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Byte): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (bool): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.ValueType): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Char): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (float): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Decimal): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Int64): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.DateTime): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64) -> (System.Single): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64, StringIsFixedLength: bool) -> (str): ...
    @overload
    @staticmethod
    def FileGet(FileNumber: int, RecordNumber: System.Int64, ArrayIsDynamic: bool, StringIsFixedLength: bool) -> (System.Array): ...
    @overload
    @staticmethod
    def FileGetObject(FileNumber: int, RecordNumber: System.Int64) -> (object): ...
    @overload
    @staticmethod
    def FileLen(PathName: str) -> System.Int64: ...
    @overload
    @staticmethod
    def FileOpen(FileNumber: int, FileName: str, Mode: OpenMode, Access: OpenAccess, Share: OpenShare, RecordLength: int) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: float, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.DateTime, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Single, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Char, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Int64, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: int, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Int16, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Decimal, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: bool, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.ValueType, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Byte, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: str, RecordNumber: System.Int64, StringIsFixedLength: bool) -> None: ...
    @overload
    @staticmethod
    def FilePut(FileNumber: int, Value: System.Array, RecordNumber: System.Int64, ArrayIsDynamic: bool, StringIsFixedLength: bool) -> None: ...
    @overload
    @staticmethod
    def FilePutObject(FileNumber: int, Value: object, RecordNumber: System.Int64) -> None: ...
    @overload
    @staticmethod
    def FileWidth(FileNumber: int, RecordWidth: int) -> None: ...
    @overload
    @staticmethod
    def FreeFile() -> int: ...
    @overload
    @staticmethod
    def GetAttr(PathName: str) -> FileAttribute: ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.DateTime): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (str): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Decimal): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Single): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Char): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (float): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (int): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Int16): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Byte): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (bool): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (System.Int64): ...
    @overload
    @staticmethod
    def Input(FileNumber: int) -> (object): ...
    @overload
    @staticmethod
    def InputString(FileNumber: int, CharCount: int) -> str: ...
    @overload
    @staticmethod
    def Kill(PathName: str) -> None: ...
    @overload
    @staticmethod
    def LineInput(FileNumber: int) -> str: ...
    @overload
    @staticmethod
    def Loc(FileNumber: int) -> System.Int64: ...
    @overload
    @staticmethod
    def Lock(FileNumber: int) -> None: ...
    @overload
    @staticmethod
    def Lock(FileNumber: int, Record: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Lock(FileNumber: int, FromRecord: System.Int64, ToRecord: System.Int64) -> None: ...
    @overload
    @staticmethod
    def LOF(FileNumber: int) -> System.Int64: ...
    @overload
    @staticmethod
    def MkDir(Path: str) -> None: ...
    @overload
    @staticmethod
    def Print(FileNumber: int, Output: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def PrintLine(FileNumber: int, Output: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def Rename(OldPath: str, NewPath: str) -> None: ...
    @overload
    @staticmethod
    def Reset() -> None: ...
    @overload
    @staticmethod
    def RmDir(Path: str) -> None: ...
    @overload
    @staticmethod
    def Seek(FileNumber: int) -> System.Int64: ...
    @overload
    @staticmethod
    def Seek(FileNumber: int, Position: System.Int64) -> None: ...
    @overload
    @staticmethod
    def SetAttr(PathName: str, Attributes: FileAttribute) -> None: ...
    @overload
    @staticmethod
    def SPC(Count: System.Int16) -> SpcInfo: ...
    @overload
    @staticmethod
    def TAB() -> TabInfo: ...
    @overload
    @staticmethod
    def TAB(Column: System.Int16) -> TabInfo: ...
    @overload
    @staticmethod
    def Unlock(FileNumber: int) -> None: ...
    @overload
    @staticmethod
    def Unlock(FileNumber: int, Record: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Unlock(FileNumber: int, FromRecord: System.Int64, ToRecord: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Write(FileNumber: int, Output: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def WriteLine(FileNumber: int, Output: System.System.Array[object]) -> None: ...

class Financial(object):
    """    """
    @overload
    @staticmethod
    def DDB(Cost: float, Salvage: float, Life: float, Period: float, Factor: float) -> float: ...
    @overload
    @staticmethod
    def FV(Rate: float, NPer: float, Pmt: float, PV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def IPmt(Rate: float, Per: float, NPer: float, PV: float, FV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def IRR(Guess: float) -> (float, System.System.Array[float]): ...
    @overload
    @staticmethod
    def MIRR(FinanceRate: float, ReinvestRate: float) -> (float, System.System.Array[float]): ...
    @overload
    @staticmethod
    def NPer(Rate: float, Pmt: float, PV: float, FV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def NPV(Rate: float) -> (float, System.System.Array[float]): ...
    @overload
    @staticmethod
    def Pmt(Rate: float, NPer: float, PV: float, FV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def PPmt(Rate: float, Per: float, NPer: float, PV: float, FV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def PV(Rate: float, NPer: float, Pmt: float, FV: float, Due: DueDate) -> float: ...
    @overload
    @staticmethod
    def Rate(NPer: float, Pmt: float, PV: float, FV: float, Due: DueDate, Guess: float) -> float: ...
    @overload
    @staticmethod
    def SLN(Cost: float, Salvage: float, Life: float) -> float: ...
    @overload
    @staticmethod
    def SYD(Cost: float, Salvage: float, Life: float, Period: float) -> float: ...

class VariantType(enum.Enum):
    Empty = 0
    Null = 1
    Short = 2
    Integer = 3
    Single = 4
    Double = 5
    Currency = 6
    Date = 7
    String = 8
    Object = 9
    Error = 10
    Boolean = 11
    Variant = 12
    DataObject = 13
    Decimal = 14
    Byte = 17
    Char = 18
    Long = 20
    UserDefinedType = 36
    Array = 8192

class AppWinStyle(enum.Enum):
    Hide = 0
    NormalFocus = 1
    MinimizedFocus = 2
    MaximizedFocus = 3
    NormalNoFocus = 4
    MinimizedNoFocus = 6

class CallType(enum.Enum):
    Method = 1
    Get = 2
    Let = 4
    Set = 8

class CompareMethod(enum.Enum):
    Binary = 0
    Text = 1

class DateFormat(enum.Enum):
    GeneralDate = 0
    LongDate = 1
    ShortDate = 2
    LongTime = 3
    ShortTime = 4

class FirstDayOfWeek(enum.Enum):
    System = 0
    Sunday = 1
    Monday = 2
    Tuesday = 3
    Wednesday = 4
    Thursday = 5
    Friday = 6
    Saturday = 7

class FileAttribute(enum.Enum):
    Normal = 0
    ReadOnly = 1
    Hidden = 2
    System = 4
    Volume = 8
    Directory = 16
    Archive = 32

class FirstWeekOfYear(enum.Enum):
    System = 0
    Jan1 = 1
    FirstFourDays = 2
    FirstFullWeek = 3

class VbStrConv(enum.Enum):
    None_ = 0
    Uppercase = 1
    Lowercase = 2
    ProperCase = 3
    Wide = 4
    Narrow = 8
    Katakana = 16
    Hiragana = 32
    SimplifiedChinese = 256
    TraditionalChinese = 512
    LinguisticCasing = 1024

class TriState(enum.Enum):
    False_ = 0
    UseDefault = -2
    True_ = -1

class DateInterval(enum.Enum):
    Year = 0
    Quarter = 1
    Month = 2
    DayOfYear = 3
    Day = 4
    WeekOfYear = 5
    Weekday = 6
    Hour = 7
    Minute = 8
    Second = 9

class DueDate(enum.Enum):
    EndOfPeriod = 0
    BegOfPeriod = 1

class OpenMode(enum.Enum):
    Input = 1
    Output = 2
    Random = 4
    Append = 8
    Binary = 32

class OpenAccess(enum.Enum):
    Read = 1
    Write = 2
    ReadWrite = 3
    Default = -1

class OpenShare(enum.Enum):
    LockReadWrite = 0
    LockWrite = 1
    LockRead = 2
    Shared = 3
    Default = -1

class TabInfo(System.ValueType):
    """    """
    @property
    def Column(self) -> System.Int16: ...

class SpcInfo(System.ValueType):
    """    """
    @property
    def Count(self) -> System.Int16: ...

class MsgBoxResult(enum.Enum):
    Ok = 1
    Cancel = 2
    Abort = 3
    Retry = 4
    Ignore = 5
    Yes = 6
    No = 7

class MsgBoxStyle(enum.Enum):
    ApplicationModal = 0
    DefaultButton1 = 0
    OkOnly = 0
    OkCancel = 1
    AbortRetryIgnore = 2
    YesNoCancel = 3
    YesNo = 4
    RetryCancel = 5
    Critical = 16
    Question = 32
    Exclamation = 48
    Information = 64
    DefaultButton2 = 256
    DefaultButton3 = 512
    SystemModal = 4096
    MsgBoxHelp = 16384
    MsgBoxSetForeground = 65536
    MsgBoxRight = 524288
    MsgBoxRtlReading = 1048576

class HideModuleNameAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class Information(object):
    """    """
    @overload
    @staticmethod
    def Erl() -> int: ...
    @overload
    @staticmethod
    def Err() -> ErrObject: ...
    @overload
    @staticmethod
    def IsArray(VarName: object) -> bool: ...
    @overload
    @staticmethod
    def IsDate(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def IsDBNull(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def IsError(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def IsNothing(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def IsNumeric(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def IsReference(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def LBound(Array: System.Array, Rank: int) -> int: ...
    @overload
    @staticmethod
    def QBColor(Color: int) -> int: ...
    @overload
    @staticmethod
    def RGB(Red: int, Green: int, Blue: int) -> int: ...
    @overload
    @staticmethod
    def SystemTypeName(VbName: str) -> str: ...
    @overload
    @staticmethod
    def TypeName(VarName: object) -> str: ...
    @overload
    @staticmethod
    def UBound(Array: System.Array, Rank: int) -> int: ...
    @overload
    @staticmethod
    def VarType(VarName: object) -> VariantType: ...
    @overload
    @staticmethod
    def VbTypeName(UrtName: str) -> str: ...

class Interaction(object):
    """    """
    @overload
    @staticmethod
    def AppActivate(ProcessId: int) -> None: ...
    @overload
    @staticmethod
    def AppActivate(Title: str) -> None: ...
    @overload
    @staticmethod
    def Beep() -> None: ...
    @overload
    @staticmethod
    def CallByName(ObjectRef: object, ProcName: str, UseCallType: CallType, Args: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def Choose(Index: float, Choice: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def Command() -> str: ...
    @overload
    @staticmethod
    def CreateObject(ProgId: str, ServerName: str) -> object: ...
    @overload
    @staticmethod
    def DeleteSetting(AppName: str, Section: str, Key: str) -> None: ...
    @overload
    @staticmethod
    def Environ(Expression: int) -> str: ...
    @overload
    @staticmethod
    def Environ(Expression: str) -> str: ...
    @overload
    @staticmethod
    def GetAllSettings(AppName: str, Section: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetObject(PathName: str, Class: str) -> object: ...
    @overload
    @staticmethod
    def GetSetting(AppName: str, Section: str, Key: str, Default: str) -> str: ...
    @overload
    @staticmethod
    def IIf(Expression: bool, TruePart: object, FalsePart: object) -> object: ...
    @overload
    @staticmethod
    def InputBox(Prompt: str, Title: str, DefaultResponse: str, XPos: int, YPos: int) -> str: ...
    @overload
    @staticmethod
    def MsgBox(Prompt: object, Buttons: MsgBoxStyle, Title: object) -> MsgBoxResult: ...
    @overload
    @staticmethod
    def Partition(Number: System.Int64, Start: System.Int64, Stop: System.Int64, Interval: System.Int64) -> str: ...
    @overload
    @staticmethod
    def SaveSetting(AppName: str, Section: str, Key: str, Setting: str) -> None: ...
    @overload
    @staticmethod
    def Shell(PathName: str, Style: AppWinStyle, Wait: bool, Timeout: int) -> int: ...
    @overload
    @staticmethod
    def Switch(VarExpr: System.System.Array[object]) -> object: ...

class MyGroupCollectionAttribute(System.Attribute):
    """    """
    def __init__(self, typeToCollect: str, createInstanceMethodName: str, disposeInstanceMethodName: str, defaultInstanceAlias: str): ...
    @property
    def CreateMethod(self) -> str: ...
    @property
    def DefaultInstanceAlias(self) -> str: ...
    @property
    def DisposeMethod(self) -> str: ...
    @property
    def MyGroupName(self) -> str: ...

class Strings(object):
    """    """
    @overload
    @staticmethod
    def Asc(String: System.Char) -> int: ...
    @overload
    @staticmethod
    def Asc(String: str) -> int: ...
    @overload
    @staticmethod
    def AscW(String: str) -> int: ...
    @overload
    @staticmethod
    def AscW(String: System.Char) -> int: ...
    @overload
    @staticmethod
    def Chr(CharCode: int) -> System.Char: ...
    @overload
    @staticmethod
    def ChrW(CharCode: int) -> System.Char: ...
    @overload
    @staticmethod
    def Filter(Source: System.System.Array[object], Match: str, Include: bool, Compare: CompareMethod) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def Filter(Source: System.System.Array[str], Match: str, Include: bool, Compare: CompareMethod) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def Format(Expression: object, Style: str) -> str: ...
    @overload
    @staticmethod
    def FormatCurrency(Expression: object, NumDigitsAfterDecimal: int, IncludeLeadingDigit: TriState, UseParensForNegativeNumbers: TriState, GroupDigits: TriState) -> str: ...
    @overload
    @staticmethod
    def FormatDateTime(Expression: System.DateTime, NamedFormat: DateFormat) -> str: ...
    @overload
    @staticmethod
    def FormatNumber(Expression: object, NumDigitsAfterDecimal: int, IncludeLeadingDigit: TriState, UseParensForNegativeNumbers: TriState, GroupDigits: TriState) -> str: ...
    @overload
    @staticmethod
    def FormatPercent(Expression: object, NumDigitsAfterDecimal: int, IncludeLeadingDigit: TriState, UseParensForNegativeNumbers: TriState, GroupDigits: TriState) -> str: ...
    @overload
    @staticmethod
    def GetChar(str_: str, Index: int) -> System.Char: ...
    @overload
    @staticmethod
    def InStr(String1: str, String2: str, Compare: CompareMethod) -> int: ...
    @overload
    @staticmethod
    def InStr(Start: int, String1: str, String2: str, Compare: CompareMethod) -> int: ...
    @overload
    @staticmethod
    def InStrRev(StringCheck: str, StringMatch: str, Start: int, Compare: CompareMethod) -> int: ...
    @overload
    @staticmethod
    def Join(SourceArray: System.System.Array[object], Delimiter: str) -> str: ...
    @overload
    @staticmethod
    def Join(SourceArray: System.System.Array[str], Delimiter: str) -> str: ...
    @overload
    @staticmethod
    def LCase(Value: str) -> str: ...
    @overload
    @staticmethod
    def LCase(Value: System.Char) -> System.Char: ...
    @overload
    @staticmethod
    def Left(str_: str, Length: int) -> str: ...
    @overload
    @staticmethod
    def Len(Expression: System.SByte) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: bool) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: str) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: object) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Byte) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Int16) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.UInt16) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: int) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.UInt32) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Char) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Decimal) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Int64) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: float) -> int: ...
    @overload
    @staticmethod
    def Len(Expression: System.Single) -> int: ...
    @overload
    @staticmethod
    def LSet(Source: str, Length: int) -> str: ...
    @overload
    @staticmethod
    def LTrim(str_: str) -> str: ...
    @overload
    @staticmethod
    def Mid(str_: str, Start: int) -> str: ...
    @overload
    @staticmethod
    def Mid(str_: str, Start: int, Length: int) -> str: ...
    @overload
    @staticmethod
    def Replace(Expression: str, Find: str, Replacement: str, Start: int, Count: int, Compare: CompareMethod) -> str: ...
    @overload
    @staticmethod
    def Right(str_: str, Length: int) -> str: ...
    @overload
    @staticmethod
    def RSet(Source: str, Length: int) -> str: ...
    @overload
    @staticmethod
    def RTrim(str_: str) -> str: ...
    @overload
    @staticmethod
    def Space(Number: int) -> str: ...
    @overload
    @staticmethod
    def Split(Expression: str, Delimiter: str, Limit: int, Compare: CompareMethod) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def StrComp(String1: str, String2: str, Compare: CompareMethod) -> int: ...
    @overload
    @staticmethod
    def StrConv(str_: str, Conversion: VbStrConv, LocaleID: int) -> str: ...
    @overload
    @staticmethod
    def StrDup(Number: int, Character: str) -> str: ...
    @overload
    @staticmethod
    def StrDup(Number: int, Character: System.Char) -> str: ...
    @overload
    @staticmethod
    def StrDup(Number: int, Character: object) -> object: ...
    @overload
    @staticmethod
    def StrReverse(Expression: str) -> str: ...
    @overload
    @staticmethod
    def Trim(str_: str) -> str: ...
    @overload
    @staticmethod
    def UCase(Value: System.Char) -> System.Char: ...
    @overload
    @staticmethod
    def UCase(Value: str) -> str: ...

class VBFixedArrayAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, UpperBound1: int): ...
    @overload
    def __init__(self, UpperBound1: int, UpperBound2: int): ...
    @property
    def Bounds(self) -> System.System.Array[int]: ...
    @property
    def Length(self) -> int: ...

class VBFixedStringAttribute(System.Attribute):
    """    """
    def __init__(self, Length: int): ...
    @property
    def Length(self) -> int: ...

class VBMath(object):
    """    """
    @overload
    @staticmethod
    def Randomize() -> None: ...
    @overload
    @staticmethod
    def Randomize(Number: float) -> None: ...
    @overload
    @staticmethod
    def Rnd() -> System.Single: ...
    @overload
    @staticmethod
    def Rnd(Number: System.Single) -> System.Single: ...

# endregion

# region: System.CodeDom, Version=7.0.0.0

class VBCodeProvider(Compiler.CodeDomProvider):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, providerOptions: Generic.IDictionary): ...
    @overload
    def GenerateCodeFromMember(self, member: CodeDom.CodeTypeMember, writer: IO.TextWriter, options: Compiler.CodeGeneratorOptions) -> None: ...
    @property
    def FileExtension(self) -> str: ...
    @property
    def LanguageOptions(self) -> Compiler.LanguageOptions: ...
    @overload
    def GetConverter(self, type_: System.Type) -> ComponentModel.TypeConverter: ...
    @property
    def Disposed(self): ...

# endregion
