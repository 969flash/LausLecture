"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Internal", "ClipboardProxy", "FileSystemProxy", "RegistryProxy", "SpecialDirectoriesProxy"]
# endregion

# region: Imports
from Microsoft import Win32
from Microsoft.VisualBasic import FileIO
from System import Drawing
from System import IO
from System import Text
from System.Collections import ObjectModel
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import System
# endregion

# region: Microsoft.VisualBasic.Forms, Version=7.0.0.0

class ClipboardProxy(object):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsAudio() -> bool: ...
    @overload
    def ContainsData(self, format_: str) -> bool: ...
    @overload
    def ContainsFileDropList() -> bool: ...
    @overload
    def ContainsImage() -> bool: ...
    @overload
    def ContainsText() -> bool: ...
    @overload
    def ContainsText(self, format_: Forms.TextDataFormat) -> bool: ...
    @overload
    def GetAudioStream() -> IO.Stream: ...
    @overload
    def GetData(self, format_: str) -> object: ...
    @overload
    def GetDataObject() -> Forms.IDataObject: ...
    @overload
    def GetFileDropList() -> Specialized.StringCollection: ...
    @overload
    def GetImage() -> Drawing.Image: ...
    @overload
    def GetText() -> str: ...
    @overload
    def GetText(self, format_: Forms.TextDataFormat) -> str: ...
    @overload
    def SetAudio(self, audioBytes: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetAudio(self, audioStream: IO.Stream) -> None: ...
    @overload
    def SetData(self, format_: str, data: object) -> None: ...
    @overload
    def SetDataObject(self, data: Forms.DataObject) -> None: ...
    @overload
    def SetFileDropList(self, filePaths: Specialized.StringCollection) -> None: ...
    @overload
    def SetImage(self, image: Drawing.Image) -> None: ...
    @overload
    def SetText(self, text: str) -> None: ...
    @overload
    def SetText(self, text: str, format_: Forms.TextDataFormat) -> None: ...

class FileSystemProxy(object):
    """    """
    @overload
    def CombinePath(self, baseDirectory: str, relativePath: str) -> str: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: FileIO.UIOption) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: FileIO.UIOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, showUI: FileIO.UIOption) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, showUI: FileIO.UIOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def CreateDirectory(self, directory: str) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, onDirectoryNotEmpty: FileIO.DeleteDirectoryOption) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, showUI: FileIO.UIOption, recycle: FileIO.RecycleOption) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, showUI: FileIO.UIOption, recycle: FileIO.RecycleOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def DeleteFile(self, file: str) -> None: ...
    @overload
    def DeleteFile(self, file: str, showUI: FileIO.UIOption, recycle: FileIO.RecycleOption) -> None: ...
    @overload
    def DeleteFile(self, file: str, showUI: FileIO.UIOption, recycle: FileIO.RecycleOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def DirectoryExists(self, directory: str) -> bool: ...
    @overload
    def FileExists(self, file: str) -> bool: ...
    @overload
    def FindInFiles(self, directory: str, containsText: str, ignoreCase: bool, searchType: FileIO.SearchOption) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def FindInFiles(self, directory: str, containsText: str, ignoreCase: bool, searchType: FileIO.SearchOption, fileWildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def Drives(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def SpecialDirectories(self) -> SpecialDirectoriesProxy: ...
    @overload
    def GetDirectories(self, directory: str) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetDirectories(self, directory: str, searchType: FileIO.SearchOption, wildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetDirectoryInfo(self, directory: str) -> IO.DirectoryInfo: ...
    @overload
    def GetDriveInfo(self, drive: str) -> IO.DriveInfo: ...
    @overload
    def GetFileInfo(self, file: str) -> IO.FileInfo: ...
    @overload
    def GetFiles(self, directory: str) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetFiles(self, directory: str, searchType: FileIO.SearchOption, wildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetName(self, path: str) -> str: ...
    @overload
    def GetParentPath(self, path: str) -> str: ...
    @overload
    def GetTempFileName() -> str: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: FileIO.UIOption) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: FileIO.UIOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, showUI: FileIO.UIOption) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, showUI: FileIO.UIOption, onUserCancel: FileIO.UICancelOption) -> None: ...
    @overload
    def OpenTextFieldParser(self, file: str) -> FileIO.TextFieldParser: ...
    @overload
    def OpenTextFieldParser(self, file: str, delimiters: System.System.Array[str]) -> FileIO.TextFieldParser: ...
    @overload
    def OpenTextFieldParser(self, file: str, fieldWidths: System.System.Array[int]) -> FileIO.TextFieldParser: ...
    @overload
    def OpenTextFileReader(self, file: str) -> IO.StreamReader: ...
    @overload
    def OpenTextFileReader(self, file: str, encoding: Text.Encoding) -> IO.StreamReader: ...
    @overload
    def OpenTextFileWriter(self, file: str, append: bool) -> IO.StreamWriter: ...
    @overload
    def OpenTextFileWriter(self, file: str, append: bool, encoding: Text.Encoding) -> IO.StreamWriter: ...
    @overload
    def ReadAllBytes(self, file: str) -> System.System.Array[System.Byte]: ...
    @overload
    def ReadAllText(self, file: str) -> str: ...
    @overload
    def ReadAllText(self, file: str, encoding: Text.Encoding) -> str: ...
    @overload
    def RenameDirectory(self, directory: str, newName: str) -> None: ...
    @overload
    def RenameFile(self, file: str, newName: str) -> None: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: System.Void): ...
    @overload
    def WriteAllBytes(self, file: str, data: System.System.Array[System.Byte], append: bool) -> None: ...
    @overload
    def WriteAllText(self, file: str, text: str, append: bool) -> None: ...
    @overload
    def WriteAllText(self, file: str, text: str, append: bool, encoding: Text.Encoding) -> None: ...

class RegistryProxy(object):
    """    """
    @property
    def ClassesRoot(self) -> Win32.RegistryKey: ...
    @property
    def CurrentConfig(self) -> Win32.RegistryKey: ...
    @property
    def CurrentUser(self) -> Win32.RegistryKey: ...
    @property
    def LocalMachine(self) -> Win32.RegistryKey: ...
    @property
    def PerformanceData(self) -> Win32.RegistryKey: ...
    @property
    def Users(self) -> Win32.RegistryKey: ...
    @overload
    def GetValue(self, keyName: str, valueName: str, defaultValue: object) -> object: ...
    @overload
    def SetValue(self, keyName: str, valueName: str, value: object) -> None: ...
    @overload
    def SetValue(self, keyName: str, valueName: str, value: object, valueKind: Win32.RegistryValueKind) -> None: ...

class SpecialDirectoriesProxy(object):
    """    """
    @property
    def AllUsersApplicationData(self) -> str: ...
    @property
    def CurrentUserApplicationData(self) -> str: ...
    @property
    def Desktop(self) -> str: ...
    @property
    def MyDocuments(self) -> str: ...
    @property
    def MyMusic(self) -> str: ...
    @property
    def MyPictures(self) -> str: ...
    @property
    def ProgramFiles(self) -> str: ...
    @property
    def Programs(self) -> str: ...
    @property
    def Temp(self) -> str: ...

# endregion
