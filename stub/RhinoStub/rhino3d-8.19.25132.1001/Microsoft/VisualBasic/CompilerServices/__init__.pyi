"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BooleanType", "ByteType", "CharType", "CharArrayType", "Conversions", "DateType", "DecimalType", "DesignerGeneratedAttribute", "DoubleType", "IncompleteInitialization", "IntegerType", "LateBinding", "LikeOperator", "LongType", "NewLateBinding", "ObjectFlowControl", "ForLoopControl", "ObjectType", "Operators", "OptionCompareAttribute", "OptionTextAttribute", "ProjectData", "ShortType", "SingleType", "StandardModuleAttribute", "StaticLocalInitFlag", "StringType", "Utils", "Versioned"]
# endregion

# region: Imports
from Microsoft import VisualBasic
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["IVbHost", "HostServices"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import System
# endregion

# region: Microsoft.VisualBasic.Forms, Version=7.0.0.0

class IVbHost:
    """    """
    @overload
    def GetParentWindow() -> Forms.IWin32Window: ...
    @overload
    def GetWindowTitle() -> str: ...

class HostServices(object):
    """    """
    def __init__(self): ...
    @property
    def VBHost(self) -> IVbHost: ...
    @VBHost.setter
    def VBHost(self, value: System.Void): ...

# endregion

# region: Microsoft.VisualBasic.Core, Version=12.0.0.0

class BooleanType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> bool: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> bool: ...

class ByteType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Byte: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Byte: ...

class CharType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Char: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Char: ...

class CharArrayType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.System.Array[System.Char]: ...

class Conversions(object):
    """    """
    @overload
    @staticmethod
    def ChangeType(Expression: object, TargetType: System.Type) -> object: ...
    @overload
    @staticmethod
    def FromCharAndCount(Value: System.Char, Count: int) -> str: ...
    @overload
    @staticmethod
    def FromCharArray(Value: System.System.Array[System.Char]) -> str: ...
    @overload
    @staticmethod
    def FromCharArraySubset(Value: System.System.Array[System.Char], StartIndex: int, Length: int) -> str: ...
    @overload
    @staticmethod
    def ToBoolean(Value: str) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(Value: object) -> bool: ...
    @overload
    @staticmethod
    def ToByte(Value: str) -> System.Byte: ...
    @overload
    @staticmethod
    def ToByte(Value: object) -> System.Byte: ...
    @overload
    @staticmethod
    def ToChar(Value: object) -> System.Char: ...
    @overload
    @staticmethod
    def ToChar(Value: str) -> System.Char: ...
    @overload
    @staticmethod
    def ToCharArrayRankOne(Value: object) -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def ToCharArrayRankOne(Value: str) -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def ToDate(Value: object) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDate(Value: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDecimal(Value: bool) -> System.Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(Value: str) -> System.Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(Value: object) -> System.Decimal: ...
    @overload
    @staticmethod
    def ToDouble(Value: str) -> float: ...
    @overload
    @staticmethod
    def ToDouble(Value: object) -> float: ...
    @overload
    @staticmethod
    def ToGenericParameter(Value: object) -> T: ...
    @overload
    @staticmethod
    def ToInteger(Value: object) -> int: ...
    @overload
    @staticmethod
    def ToInteger(Value: str) -> int: ...
    @overload
    @staticmethod
    def ToLong(Value: object) -> System.Int64: ...
    @overload
    @staticmethod
    def ToLong(Value: str) -> System.Int64: ...
    @overload
    @staticmethod
    def ToSByte(Value: str) -> System.SByte: ...
    @overload
    @staticmethod
    def ToSByte(Value: object) -> System.SByte: ...
    @overload
    @staticmethod
    def ToShort(Value: object) -> System.Int16: ...
    @overload
    @staticmethod
    def ToShort(Value: str) -> System.Int16: ...
    @overload
    @staticmethod
    def ToSingle(Value: str) -> System.Single: ...
    @overload
    @staticmethod
    def ToSingle(Value: object) -> System.Single: ...
    @overload
    @staticmethod
    def ToString(Value: System.Decimal) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Single) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.DateTime) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: float) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: object) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.UInt64) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Byte) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.UInt32) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: int) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Int16) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Char) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: bool) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Int64) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Single, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: float, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def ToString(Value: System.Decimal, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def ToUInteger(Value: object) -> System.UInt32: ...
    @overload
    @staticmethod
    def ToUInteger(Value: str) -> System.UInt32: ...
    @overload
    @staticmethod
    def ToULong(Value: object) -> System.UInt64: ...
    @overload
    @staticmethod
    def ToULong(Value: str) -> System.UInt64: ...
    @overload
    @staticmethod
    def ToUShort(Value: str) -> System.UInt16: ...
    @overload
    @staticmethod
    def ToUShort(Value: object) -> System.UInt16: ...

class DateType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.DateTime: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def FromString(Value: str, culture: Globalization.CultureInfo) -> System.DateTime: ...

class DecimalType(object):
    """    """
    @overload
    @staticmethod
    def FromBoolean(Value: bool) -> System.Decimal: ...
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Decimal: ...
    @overload
    @staticmethod
    def FromObject(Value: object, NumberFormat: Globalization.NumberFormatInfo) -> System.Decimal: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Decimal: ...
    @overload
    @staticmethod
    def FromString(Value: str, NumberFormat: Globalization.NumberFormatInfo) -> System.Decimal: ...
    @overload
    @staticmethod
    def Parse(Value: str, NumberFormat: Globalization.NumberFormatInfo) -> System.Decimal: ...

class DesignerGeneratedAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DoubleType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> float: ...
    @overload
    @staticmethod
    def FromObject(Value: object, NumberFormat: Globalization.NumberFormatInfo) -> float: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> float: ...
    @overload
    @staticmethod
    def FromString(Value: str, NumberFormat: Globalization.NumberFormatInfo) -> float: ...
    @overload
    @staticmethod
    def Parse(Value: str) -> float: ...
    @overload
    @staticmethod
    def Parse(Value: str, NumberFormat: Globalization.NumberFormatInfo) -> float: ...

class IncompleteInitialization(System.Exception):
    """    """
    def __init__(self): ...

class IntegerType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> int: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> int: ...

class LateBinding(object):
    """    """
    @overload
    @staticmethod
    def LateCall(o: object, objType: System.Type, name: str, args: System.System.Array[object], paramnames: System.System.Array[str], CopyBack: System.System.Array[bool]) -> None: ...
    @overload
    @staticmethod
    def LateGet(o: object, objType: System.Type, name: str, args: System.System.Array[object], paramnames: System.System.Array[str], CopyBack: System.System.Array[bool]) -> object: ...
    @overload
    @staticmethod
    def LateIndexGet(o: object, args: System.System.Array[object], paramnames: System.System.Array[str]) -> object: ...
    @overload
    @staticmethod
    def LateIndexSet(o: object, args: System.System.Array[object], paramnames: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def LateIndexSetComplex(o: object, args: System.System.Array[object], paramnames: System.System.Array[str], OptimisticSet: bool, RValueBase: bool) -> None: ...
    @overload
    @staticmethod
    def LateSet(o: object, objType: System.Type, name: str, args: System.System.Array[object], paramnames: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def LateSetComplex(o: object, objType: System.Type, name: str, args: System.System.Array[object], paramnames: System.System.Array[str], OptimisticSet: bool, RValueBase: bool) -> None: ...

class LikeOperator(object):
    """    """
    @overload
    @staticmethod
    def LikeObject(Source: object, Pattern: object, CompareOption: VisualBasic.CompareMethod) -> object: ...
    @overload
    @staticmethod
    def LikeString(Source: str, Pattern: str, CompareOption: VisualBasic.CompareMethod) -> bool: ...

class LongType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Int64: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Int64: ...

class NewLateBinding(object):
    """    """
    @overload
    @staticmethod
    def LateCall(Instance: object, Type: System.Type, MemberName: str, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], TypeArguments: System.System.Array[System.Type], CopyBack: System.System.Array[bool], IgnoreReturn: bool) -> object: ...
    @overload
    @staticmethod
    def LateCallInvokeDefault(Instance: object, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], ReportErrors: bool) -> object: ...
    @overload
    @staticmethod
    def LateGet(Instance: object, Type: System.Type, MemberName: str, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], TypeArguments: System.System.Array[System.Type], CopyBack: System.System.Array[bool]) -> object: ...
    @overload
    @staticmethod
    def LateGetInvokeDefault(Instance: object, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], ReportErrors: bool) -> object: ...
    @overload
    @staticmethod
    def LateIndexGet(Instance: object, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str]) -> object: ...
    @overload
    @staticmethod
    def LateIndexSet(Instance: object, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def LateIndexSetComplex(Instance: object, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], OptimisticSet: bool, RValueBase: bool) -> None: ...
    @overload
    @staticmethod
    def LateSet(Instance: object, Type: System.Type, MemberName: str, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], TypeArguments: System.System.Array[System.Type]) -> None: ...
    @overload
    @staticmethod
    def LateSet(Instance: object, Type: System.Type, MemberName: str, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], TypeArguments: System.System.Array[System.Type], OptimisticSet: bool, RValueBase: bool, CallType: VisualBasic.CallType) -> None: ...
    @overload
    @staticmethod
    def LateSetComplex(Instance: object, Type: System.Type, MemberName: str, Arguments: System.System.Array[object], ArgumentNames: System.System.Array[str], TypeArguments: System.System.Array[System.Type], OptimisticSet: bool, RValueBase: bool) -> None: ...

class ObjectFlowControl(object):
    """    """
    @overload
    @staticmethod
    def CheckForSyncLockOnValueType(Expression: object) -> None: ...

class ForLoopControl(object):
    """    """
    @overload
    @staticmethod
    def ForLoopInitObj(Counter: object, Start: object, Limit: object, StepValue: object) -> (bool, object, object): ...
    @overload
    @staticmethod
    def ForNextCheckDec(count: System.Decimal, limit: System.Decimal, StepValue: System.Decimal) -> bool: ...
    @overload
    @staticmethod
    def ForNextCheckObj(Counter: object, LoopObj: object) -> (bool, object): ...
    @overload
    @staticmethod
    def ForNextCheckR4(count: System.Single, limit: System.Single, StepValue: System.Single) -> bool: ...
    @overload
    @staticmethod
    def ForNextCheckR8(count: float, limit: float, StepValue: float) -> bool: ...

class ObjectType(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AddObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def BitAndObj(obj1: object, obj2: object) -> object: ...
    @overload
    @staticmethod
    def BitOrObj(obj1: object, obj2: object) -> object: ...
    @overload
    @staticmethod
    def BitXorObj(obj1: object, obj2: object) -> object: ...
    @overload
    @staticmethod
    def DivObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def GetObjectValuePrimitive(o: object) -> object: ...
    @overload
    @staticmethod
    def IDivObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def LikeObj(vLeft: object, vRight: object, CompareOption: VisualBasic.CompareMethod) -> bool: ...
    @overload
    @staticmethod
    def ModObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def MulObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def NegObj(obj: object) -> object: ...
    @overload
    @staticmethod
    def NotObj(obj: object) -> object: ...
    @overload
    @staticmethod
    def ObjTst(o1: object, o2: object, TextCompare: bool) -> int: ...
    @overload
    @staticmethod
    def PlusObj(obj: object) -> object: ...
    @overload
    @staticmethod
    def PowObj(obj1: object, obj2: object) -> object: ...
    @overload
    @staticmethod
    def ShiftLeftObj(o1: object, amount: int) -> object: ...
    @overload
    @staticmethod
    def ShiftRightObj(o1: object, amount: int) -> object: ...
    @overload
    @staticmethod
    def StrCatObj(vLeft: object, vRight: object) -> object: ...
    @overload
    @staticmethod
    def SubObj(o1: object, o2: object) -> object: ...
    @overload
    @staticmethod
    def XorObj(obj1: object, obj2: object) -> object: ...

class Operators(object):
    """    """
    @overload
    @staticmethod
    def AddObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def AndObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def CompareObjectEqual(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareObjectGreater(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareObjectGreaterEqual(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareObjectLess(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareObjectLessEqual(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareObjectNotEqual(Left: object, Right: object, TextCompare: bool) -> object: ...
    @overload
    @staticmethod
    def CompareString(Left: str, Right: str, TextCompare: bool) -> int: ...
    @overload
    @staticmethod
    def ConcatenateObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectEqual(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectGreater(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectGreaterEqual(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectLess(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectLessEqual(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def ConditionalCompareObjectNotEqual(Left: object, Right: object, TextCompare: bool) -> bool: ...
    @overload
    @staticmethod
    def DivideObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def ExponentObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def IntDivideObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def LeftShiftObject(Operand: object, Amount: object) -> object: ...
    @overload
    @staticmethod
    def ModObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def MultiplyObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def NegateObject(Operand: object) -> object: ...
    @overload
    @staticmethod
    def NotObject(Operand: object) -> object: ...
    @overload
    @staticmethod
    def OrObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def PlusObject(Operand: object) -> object: ...
    @overload
    @staticmethod
    def RightShiftObject(Operand: object, Amount: object) -> object: ...
    @overload
    @staticmethod
    def SubtractObject(Left: object, Right: object) -> object: ...
    @overload
    @staticmethod
    def XorObject(Left: object, Right: object) -> object: ...

class OptionCompareAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OptionTextAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ProjectData(object):
    """    """
    @overload
    @staticmethod
    def ClearProjectError() -> None: ...
    @overload
    @staticmethod
    def CreateProjectError(hr: int) -> System.Exception: ...
    @overload
    @staticmethod
    def EndApp() -> None: ...
    @overload
    @staticmethod
    def SetProjectError(ex: System.Exception) -> None: ...
    @overload
    @staticmethod
    def SetProjectError(ex: System.Exception, lErl: int) -> None: ...

class ShortType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Int16: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Int16: ...

class SingleType(object):
    """    """
    @overload
    @staticmethod
    def FromObject(Value: object) -> System.Single: ...
    @overload
    @staticmethod
    def FromObject(Value: object, NumberFormat: Globalization.NumberFormatInfo) -> System.Single: ...
    @overload
    @staticmethod
    def FromString(Value: str) -> System.Single: ...
    @overload
    @staticmethod
    def FromString(Value: str, NumberFormat: Globalization.NumberFormatInfo) -> System.Single: ...

class StandardModuleAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class StaticLocalInitFlag(object):
    """    """
    def __init__(self): ...
    @property
    def State(self) -> System.Int16: ...

class StringType(object):
    """    """
    @overload
    @staticmethod
    def FromBoolean(Value: bool) -> str: ...
    @overload
    @staticmethod
    def FromByte(Value: System.Byte) -> str: ...
    @overload
    @staticmethod
    def FromChar(Value: System.Char) -> str: ...
    @overload
    @staticmethod
    def FromDate(Value: System.DateTime) -> str: ...
    @overload
    @staticmethod
    def FromDecimal(Value: System.Decimal) -> str: ...
    @overload
    @staticmethod
    def FromDecimal(Value: System.Decimal, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def FromDouble(Value: float) -> str: ...
    @overload
    @staticmethod
    def FromDouble(Value: float, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def FromInteger(Value: int) -> str: ...
    @overload
    @staticmethod
    def FromLong(Value: System.Int64) -> str: ...
    @overload
    @staticmethod
    def FromObject(Value: object) -> str: ...
    @overload
    @staticmethod
    def FromShort(Value: System.Int16) -> str: ...
    @overload
    @staticmethod
    def FromSingle(Value: System.Single) -> str: ...
    @overload
    @staticmethod
    def FromSingle(Value: System.Single, NumberFormat: Globalization.NumberFormatInfo) -> str: ...
    @overload
    @staticmethod
    def MidStmtStr(StartPosition: int, MaxInsertLength: int, sInsert: str) -> (str): ...
    @overload
    @staticmethod
    def StrCmp(sLeft: str, sRight: str, TextCompare: bool) -> int: ...
    @overload
    @staticmethod
    def StrLike(Source: str, Pattern: str, CompareOption: VisualBasic.CompareMethod) -> bool: ...
    @overload
    @staticmethod
    def StrLikeBinary(Source: str, Pattern: str) -> bool: ...
    @overload
    @staticmethod
    def StrLikeText(Source: str, Pattern: str) -> bool: ...

class Utils(object):
    """    """
    @overload
    @staticmethod
    def CopyArray(arySrc: System.Array, aryDest: System.Array) -> System.Array: ...
    @overload
    @staticmethod
    def GetResourceString(ResourceKey: str, Args: System.System.Array[str]) -> str: ...

class Versioned(object):
    """    """
    @overload
    @staticmethod
    def CallByName(Instance: object, MethodName: str, UseCallType: VisualBasic.CallType, Arguments: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def IsNumeric(Expression: object) -> bool: ...
    @overload
    @staticmethod
    def SystemTypeName(VbName: str) -> str: ...
    @overload
    @staticmethod
    def TypeName(Expression: object) -> str: ...
    @overload
    @staticmethod
    def VbTypeName(SystemName: str) -> str: ...

# endregion
