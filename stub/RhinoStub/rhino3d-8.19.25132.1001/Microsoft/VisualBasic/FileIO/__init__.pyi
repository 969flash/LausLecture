"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["FileSystem", "DeleteDirectoryOption", "RecycleOption", "SearchOption", "UICancelOption", "UIOption", "MalformedLineException", "SpecialDirectories", "TextFieldParser", "FieldType"]
# endregion

# region: Imports
from System import IO
from System import Text
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: Microsoft.VisualBasic.Core, Version=12.0.0.0

class FileSystem(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def CombinePath(baseDirectory: str, relativePath: str) -> str: ...
    @overload
    @staticmethod
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    @staticmethod
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    @staticmethod
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def CopyFile(sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    @staticmethod
    def CopyFile(sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def CopyFile(sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    @staticmethod
    def CopyFile(sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def CreateDirectory(directory: str) -> None: ...
    @overload
    @staticmethod
    def DeleteDirectory(directory: str, onDirectoryNotEmpty: DeleteDirectoryOption) -> None: ...
    @overload
    @staticmethod
    def DeleteDirectory(directory: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    @staticmethod
    def DeleteDirectory(directory: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def DeleteFile(file: str) -> None: ...
    @overload
    @staticmethod
    def DeleteFile(file: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    @staticmethod
    def DeleteFile(file: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def DirectoryExists(directory: str) -> bool: ...
    @overload
    @staticmethod
    def FileExists(file: str) -> bool: ...
    @overload
    @staticmethod
    def FindInFiles(directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def FindInFiles(directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption, fileWildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def Drives(self) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetDirectories(directory: str) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetDirectories(directory: str, searchType: SearchOption, wildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetDirectoryInfo(directory: str) -> IO.DirectoryInfo: ...
    @overload
    @staticmethod
    def GetDriveInfo(drive: str) -> IO.DriveInfo: ...
    @overload
    @staticmethod
    def GetFileInfo(file: str) -> IO.FileInfo: ...
    @overload
    @staticmethod
    def GetFiles(directory: str) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetFiles(directory: str, searchType: SearchOption, wildcards: System.System.Array[str]) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetName(path: str) -> str: ...
    @overload
    @staticmethod
    def GetParentPath(path: str) -> str: ...
    @overload
    @staticmethod
    def GetTempFileName() -> str: ...
    @overload
    @staticmethod
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    @staticmethod
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    @staticmethod
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def MoveFile(sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    @staticmethod
    def MoveFile(sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    @staticmethod
    def MoveFile(sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def MoveFile(sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    @staticmethod
    def OpenTextFieldParser(file: str) -> TextFieldParser: ...
    @overload
    @staticmethod
    def OpenTextFieldParser(file: str, delimiters: System.System.Array[str]) -> TextFieldParser: ...
    @overload
    @staticmethod
    def OpenTextFieldParser(file: str, fieldWidths: System.System.Array[int]) -> TextFieldParser: ...
    @overload
    @staticmethod
    def OpenTextFileReader(file: str) -> IO.StreamReader: ...
    @overload
    @staticmethod
    def OpenTextFileReader(file: str, encoding: Text.Encoding) -> IO.StreamReader: ...
    @overload
    @staticmethod
    def OpenTextFileWriter(file: str, append: bool) -> IO.StreamWriter: ...
    @overload
    @staticmethod
    def OpenTextFileWriter(file: str, append: bool, encoding: Text.Encoding) -> IO.StreamWriter: ...
    @overload
    @staticmethod
    def ReadAllBytes(file: str) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def ReadAllText(file: str) -> str: ...
    @overload
    @staticmethod
    def ReadAllText(file: str, encoding: Text.Encoding) -> str: ...
    @overload
    @staticmethod
    def RenameDirectory(directory: str, newName: str) -> None: ...
    @overload
    @staticmethod
    def RenameFile(file: str, newName: str) -> None: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: System.Void): ...
    @overload
    @staticmethod
    def WriteAllBytes(file: str, data: System.System.Array[System.Byte], append: bool) -> None: ...
    @overload
    @staticmethod
    def WriteAllText(file: str, text: str, append: bool) -> None: ...
    @overload
    @staticmethod
    def WriteAllText(file: str, text: str, append: bool, encoding: Text.Encoding) -> None: ...

class DeleteDirectoryOption(enum.Enum):
    ThrowIfDirectoryNonEmpty = 4
    DeleteAllContents = 5

class RecycleOption(enum.Enum):
    DeletePermanently = 2
    SendToRecycleBin = 3

class SearchOption(enum.Enum):
    SearchTopLevelOnly = 2
    SearchAllSubDirectories = 3

class UICancelOption(enum.Enum):
    DoNothing = 2
    ThrowException = 3

class UIOption(enum.Enum):
    OnlyErrorDialogs = 2
    AllDialogs = 3

class MalformedLineException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, lineNumber: System.Int64): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, lineNumber: System.Int64, innerException: System.Exception): ...
    @property
    def LineNumber(self) -> System.Int64: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @LineNumber.setter
    def LineNumber(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SpecialDirectories(object):
    """    """
    def __init__(self): ...
    @property
    def AllUsersApplicationData(self) -> str: ...
    @property
    def CurrentUserApplicationData(self) -> str: ...
    @property
    def Desktop(self) -> str: ...
    @property
    def MyDocuments(self) -> str: ...
    @property
    def MyMusic(self) -> str: ...
    @property
    def MyPictures(self) -> str: ...
    @property
    def ProgramFiles(self) -> str: ...
    @property
    def Programs(self) -> str: ...
    @property
    def Temp(self) -> str: ...

class TextFieldParser(object):
    """    """
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, reader: IO.TextReader): ...
    @overload
    def __init__(self, path: str, defaultEncoding: Text.Encoding): ...
    @overload
    def __init__(self, stream: IO.Stream, defaultEncoding: Text.Encoding): ...
    @overload
    def __init__(self, path: str, defaultEncoding: Text.Encoding, detectEncoding: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, defaultEncoding: Text.Encoding, detectEncoding: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, defaultEncoding: Text.Encoding, detectEncoding: bool, leaveOpen: bool): ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CommentTokens(self) -> System.System.Array[str]: ...
    @property
    def Delimiters(self) -> System.System.Array[str]: ...
    @property
    def EndOfData(self) -> bool: ...
    @property
    def ErrorLine(self) -> str: ...
    @property
    def ErrorLineNumber(self) -> System.Int64: ...
    @property
    def FieldWidths(self) -> System.System.Array[int]: ...
    @property
    def HasFieldsEnclosedInQuotes(self) -> bool: ...
    @property
    def LineNumber(self) -> System.Int64: ...
    @property
    def TextFieldType(self) -> FieldType: ...
    @property
    def TrimWhiteSpace(self) -> bool: ...
    @overload
    def PeekChars(self, numberOfChars: int) -> str: ...
    @overload
    def ReadFields() -> System.System.Array[str]: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadToEnd() -> str: ...
    @CommentTokens.setter
    def CommentTokens(self, value: System.Void): ...
    @Delimiters.setter
    def Delimiters(self, value: System.Void): ...
    @FieldWidths.setter
    def FieldWidths(self, value: System.Void): ...
    @HasFieldsEnclosedInQuotes.setter
    def HasFieldsEnclosedInQuotes(self, value: System.Void): ...
    @TextFieldType.setter
    def TextFieldType(self, value: System.Void): ...
    @TrimWhiteSpace.setter
    def TrimWhiteSpace(self, value: System.Void): ...
    @overload
    def SetDelimiters(self, delimiters: System.System.Array[str]) -> None: ...
    @overload
    def SetFieldWidths(self, fieldWidths: System.System.Array[int]) -> None: ...

class FieldType(enum.Enum):
    Delimited = 0
    FixedWidth = 1

# endregion
