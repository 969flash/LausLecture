"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ArrayUtils", "Assert", "CacheDict", "CheckedDictionaryEnumerator", "EnumerableWrapper", "CollectionUtils", "ContractUtils", "CopyOnWriteList", "DictionaryUnionEnumerator", "DynamicUtils", "EnumUtils", "ExceptionUtils", "IOUtils", "MathUtils", "MonitorUtils", "Publisher", "ReferenceEqualityComparer", "ReflectionUtils", "ExtensionMethodInfo", "StringUtils", "SynchronizedDictionary", "ThreadingUtils", "ThreadLocal", "TypeMemberCache", "TypeUtils", "ValueArray", "WeakDictionary", "HybridMapping", "WeakHandle", "StorageInfo"]
# endregion

# region: Imports
from System import Collections
from System import Dynamic
from System import IO
from System import Numerics
from System import Reflection
from System import Text
from System.Collections import Generic
from System.Linq import Expressions
from System.Reflection import Emit
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["EnumBounds", "ConsoleInputStream", "ConsoleStreamType"]
# endregion

# region: Imports
from Microsoft import Scripting
from System import IO
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Scripting, Version=1.3.1.0

class EnumBounds(object):
    """    """
    @overload
    @staticmethod
    def IsValid(value: Scripting.SourceCodeKind) -> bool: ...

class ConsoleInputStream(IO.Stream):
    """    """
    @property
    def Instance(self) -> ConsoleInputStream: ...
    @overload
    def Flush() -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...

class ConsoleStreamType(enum.Enum):
    Input = 0
    Output = 1
    ErrorOutput = 2

# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class ArrayUtils(object):
    """    """
    @property
    def EmptyStrings(self) -> System.System.Array[str]: ...
    @property
    def EmptyObjects(self) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def Append(array: System.Array[T], item: T) -> System.Array[T]: ...
    @overload
    @staticmethod
    def AppendRange(array: System.Array[T], items: Generic.IList) -> System.Array[T]: ...
    @overload
    @staticmethod
    def AppendRange(array: System.Array[T], items: Generic.IList, additionalItemCount: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def Concatenate(array1: System.Array[T], array2: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ConvertAll(input_: System.Array[TInput], conv: System.Func) -> System.Array[TOutput]: ...
    @overload
    @staticmethod
    def Copy(array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def GetValueHashCode(array: System.Array[T]) -> int: ...
    @overload
    @staticmethod
    def GetValueHashCode(array: System.Array[T], start: int, count: int) -> int: ...
    @overload
    @staticmethod
    def Insert(item: T, list_: Generic.IList) -> System.Array[T]: ...
    @overload
    @staticmethod
    def Insert(item: T, array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def Insert(item1: T, item2: T, list_: Generic.IList) -> System.Array[T]: ...
    @overload
    @staticmethod
    def Insert(item1: T, item2: T, array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def InsertAt(array: System.Array[T], index: int, items: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def InsertAt(list_: Generic.IList, index: int, items: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def MakeArray(list_: Generic.ICollection) -> System.Array[T]: ...
    @overload
    @staticmethod
    def MakeArray(elements: Generic.ICollection, reservedSlotsBefore: int, reservedSlotsAfter: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def PrintTable(output: Text.StringBuilder, table: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def RemoveAt(list_: Generic.IList, indexToRemove: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def RemoveAt(array: System.Array[T], indexToRemove: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def RemoveFirst(list_: Generic.IList) -> System.Array[T]: ...
    @overload
    @staticmethod
    def RemoveFirst(array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def RemoveLast(array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def Reverse(array: System.Array[T]) -> System.Array[T]: ...
    @overload
    @staticmethod
    def RotateRight(array: System.Array[T], count: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ShiftLeft(array: System.Array[T], count: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ShiftRight(array: System.Array[T], count: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def SwapLastTwo(array: System.Array[T]) -> None: ...
    @overload
    @staticmethod
    def ToArray(list_: Generic.ICollection) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ToArray(list_: Generic.ICollection, convertor: System.Func) -> System.Array[TResult]: ...
    @overload
    @staticmethod
    def ToComparer(comparison: System.Comparison) -> Generic.IComparer: ...
    @overload
    @staticmethod
    def ValueEquals(array: System.Array[T], other: System.Array[T]) -> bool: ...

class Assert(object):
    """    """
    @property
    def Unreachable(self) -> System.Exception: ...
    @overload
    @staticmethod
    def IsTrue(predicate: System.Func) -> None: ...
    @overload
    @staticmethod
    def NotEmpty(str_: str) -> None: ...
    @overload
    @staticmethod
    def NotEmpty(array: Generic.ICollection) -> None: ...
    @overload
    @staticmethod
    def NotNull(var: object) -> None: ...
    @overload
    @staticmethod
    def NotNull(var1: object, var2: object) -> None: ...
    @overload
    @staticmethod
    def NotNull(var1: object, var2: object, var3: object) -> None: ...
    @overload
    @staticmethod
    def NotNull(var1: object, var2: object, var3: object, var4: object) -> None: ...
    @overload
    @staticmethod
    def NotNullItems(items: Generic.IEnumerable) -> None: ...

class CacheDict(object):
    """    CacheDict[TKey, TValue]
    """
    def __init__(self, maxSize: int): ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @property
    def Item(self) -> TValue: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class CheckedDictionaryEnumerator(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> object: ...
    @property
    def Entry(self) -> Collections.DictionaryEntry: ...
    @property
    def Key(self) -> object: ...
    @property
    def Value(self) -> object: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class EnumerableWrapper(object):
    """    """
    def __init__(self, o: Collections.IEnumerable): ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class CollectionUtils(object):
    """    """
    @overload
    @staticmethod
    def AddRange(list_: Generic.IList, items: Generic.IEnumerable) -> None: ...
    @overload
    @staticmethod
    def AddRange(collection: Generic.ICollection, items: Generic.IEnumerable) -> None: ...
    @overload
    @staticmethod
    def Cast(sequence: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ConvertAll(collection: Generic.IList, predicate: System.Func) -> Generic.IList: ...
    @overload
    @staticmethod
    def CountOf(list_: Generic.IList, item: T) -> int: ...
    @overload
    @staticmethod
    def CreateSetComparer() -> Generic.IEqualityComparer: ...
    @overload
    @staticmethod
    def FindIndex(collection: Generic.IList, predicate: System.Predicate) -> int: ...
    @overload
    @staticmethod
    def GetRange(list_: Generic.IList, index: int, count: int) -> Generic.List: ...
    @overload
    @staticmethod
    def InsertRange(collection: Generic.IList, index: int, items: Generic.IEnumerable) -> None: ...
    @overload
    @staticmethod
    def MakeList(item: T) -> Generic.List: ...
    @overload
    @staticmethod
    def Max(values: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def RemoveRange(collection: Generic.IList, index: int, count: int) -> None: ...
    @overload
    @staticmethod
    def Select(enumerable: Collections.IEnumerable, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ToCovariant(enumerable: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ToCovariant(enumerator: Generic.IEnumerator) -> Generic.IEnumerator: ...
    @overload
    @staticmethod
    def ToDictionaryEnumerator(enumerator: Generic.IEnumerator) -> Collections.IDictionaryEnumerator: ...
    @overload
    @staticmethod
    def ToEnumerable(enumerable: Collections.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ToReverseArray(list_: Generic.IList) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ToSortedList(collection: Generic.ICollection, comparison: System.Comparison) -> Generic.IList: ...
    @overload
    @staticmethod
    def TrueForAll(collection: Generic.IEnumerable, predicate: System.Predicate) -> bool: ...

class ContractUtils(object):
    """    """
    @overload
    @staticmethod
    def Assert(precondition: bool) -> None: ...
    @overload
    @staticmethod
    def Ensures(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Ensures(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def Invariant(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Invariant(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def Old(value: T) -> T: ...
    @overload
    @staticmethod
    def Parameter() -> (T, T): ...
    @overload
    @staticmethod
    def Requires(precondition: bool) -> None: ...
    @overload
    @staticmethod
    def Requires(precondition: bool, paramName: str) -> None: ...
    @overload
    @staticmethod
    def Requires(precondition: bool, paramName: str, message: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayIndex(array: Generic.IList, index: int, indexName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayIndex(arraySize: int, index: int, indexName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayInsertIndex(array: Generic.IList, index: int, indexName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayInsertIndex(arraySize: int, index: int, indexName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayRange(array: Generic.IList, offset: int, count: int, offsetName: str, countName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayRange(arraySize: int, offset: int, count: int, offsetName: str, countName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresArrayRange(str_: str, offset: int, count: int, offsetName: str, countName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresListRange(array: Collections.IList, offset: int, count: int, offsetName: str, countName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresNotEmpty(str_: str, paramName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresNotEmpty(collection: Generic.ICollection, paramName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresNotNull(value: object, paramName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresNotNullItems(array: Generic.IList, arrayName: str) -> None: ...
    @overload
    @staticmethod
    def RequiresNotNullItems(collection: Generic.IEnumerable, collectionName: str) -> None: ...
    @overload
    @staticmethod
    def Result() -> T: ...

class CopyOnWriteList(object):
    """    CopyOnWriteList[T]
    """
    def __init__(self): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetCopyForRead() -> Generic.List: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DictionaryUnionEnumerator(CheckedDictionaryEnumerator):
    """    """
    def __init__(self, enums: Generic.IList): ...

class DynamicUtils(object):
    """    """
    @overload
    @staticmethod
    def GetExpressions(objects: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Expressions.System.Array[Expressions.Expression]: ...
    @overload
    @staticmethod
    def LightBind(binder: Dynamic.DynamicMetaObjectBinder, args: System.System.Array[object], compilationThreshold: int) -> T: ...
    @overload
    @staticmethod
    def ObjectToMetaObject(argValue: object, parameterExpression: Expressions.Expression) -> Dynamic.DynamicMetaObject: ...

class EnumUtils(object):
    """    """
    @overload
    @staticmethod
    def BitwiseAnd(self: object, other: object) -> object: ...
    @overload
    @staticmethod
    def BitwiseOr(self: object, other: object) -> object: ...
    @overload
    @staticmethod
    def ExclusiveOr(self: object, other: object) -> object: ...
    @overload
    @staticmethod
    def OnesComplement(self: object) -> object: ...

class ExceptionUtils(object):
    """    """
    @overload
    @staticmethod
    def GetData(e: System.Exception, key: object) -> object: ...
    @overload
    @staticmethod
    def MakeArgumentItemNullException(index: int, arrayName: str) -> System.ArgumentNullException: ...
    @overload
    @staticmethod
    def MakeArgumentOutOfRangeException(paramName: str, actualValue: object, message: str) -> System.ArgumentOutOfRangeException: ...
    @overload
    @staticmethod
    def RemoveData(e: System.Exception, key: object) -> None: ...
    @overload
    @staticmethod
    def SetData(e: System.Exception, key: object, value: object) -> None: ...

class IOUtils(object):
    """    """
    @overload
    @staticmethod
    def ReadTo(reader: IO.TextReader, terminator: System.Char) -> str: ...
    @overload
    @staticmethod
    def SeekLine(reader: IO.TextReader, line: int) -> bool: ...
    @overload
    @staticmethod
    def SeekTo(reader: IO.TextReader, c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def ToValidFileName(path: str) -> str: ...
    @overload
    @staticmethod
    def ToValidPath(path: str) -> str: ...
    @overload
    @staticmethod
    def ToValidPath(path: str, isMask: bool) -> str: ...

class MathUtils(object):
    """    """
    @overload
    @staticmethod
    def Abs(self: Numerics.BigInteger) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def Abs(self: Numerics.Complex) -> float: ...
    @overload
    @staticmethod
    def AsInt32(self: Numerics.BigInteger) -> (bool, int): ...
    @overload
    @staticmethod
    def AsInt64(self: Numerics.BigInteger) -> (bool, System.Int64): ...
    @overload
    @staticmethod
    def AsUInt32(self: Numerics.BigInteger) -> (bool, System.UInt32): ...
    @overload
    @staticmethod
    def AsUInt64(self: Numerics.BigInteger) -> (bool, System.UInt64): ...
    @overload
    @staticmethod
    def BitLength(x: int) -> int: ...
    @overload
    @staticmethod
    def BitLength(x: System.Int64) -> int: ...
    @overload
    @staticmethod
    def BitLength(x: Numerics.BigInteger) -> int: ...
    @overload
    @staticmethod
    def BitLengthUnsigned(x: System.UInt32) -> int: ...
    @overload
    @staticmethod
    def BitLengthUnsigned(x: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def Conjugate(self: Numerics.Complex) -> Numerics.Complex: ...
    @overload
    @staticmethod
    def Erf(v0: float) -> float: ...
    @overload
    @staticmethod
    def ErfComplement(v0: float) -> float: ...
    @overload
    @staticmethod
    def FloorDivideUnchecked(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def FloorDivideUnchecked(x: System.Int64, y: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def FloorRemainder(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def FloorRemainder(x: System.Int64, y: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def Gamma(v0: float) -> float: ...
    @overload
    @staticmethod
    def GetBitCount(self: Numerics.BigInteger) -> int: ...
    @overload
    @staticmethod
    def GetByteCount(self: Numerics.BigInteger) -> int: ...
    @overload
    @staticmethod
    def GetRandBits(generator: System.Random, bits: int) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def GetRandBits(NextBytes: System.Action, bits: int) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def GetWord(self: Numerics.BigInteger, index: int) -> System.UInt32: ...
    @overload
    @staticmethod
    def GetWordCount(self: Numerics.BigInteger) -> int: ...
    @overload
    @staticmethod
    def GetWords(self: Numerics.BigInteger) -> System.System.Array[System.UInt32]: ...
    @overload
    @staticmethod
    def Hypot(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Imaginary(self: Numerics.Complex) -> float: ...
    @overload
    @staticmethod
    def IsNegative(self: Numerics.BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeZero(self: float) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(self: Numerics.BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsZero(self: Numerics.Complex) -> bool: ...
    @overload
    @staticmethod
    def IsZero(self: Numerics.BigInteger) -> bool: ...
    @overload
    @staticmethod
    def Log(self: Numerics.BigInteger) -> float: ...
    @overload
    @staticmethod
    def Log(self: Numerics.BigInteger, baseValue: float) -> float: ...
    @overload
    @staticmethod
    def Log10(self: Numerics.BigInteger) -> float: ...
    @overload
    @staticmethod
    def LogGamma(v0: float) -> float: ...
    @overload
    @staticmethod
    def MakeComplex(real: float, imag: float) -> Numerics.Complex: ...
    @overload
    @staticmethod
    def MakeImaginary(imag: float) -> Numerics.Complex: ...
    @overload
    @staticmethod
    def MakeReal(real: float) -> Numerics.Complex: ...
    @overload
    @staticmethod
    def ModPow(self: Numerics.BigInteger, power: int, mod: Numerics.BigInteger) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def ModPow(self: Numerics.BigInteger, power: Numerics.BigInteger, mod: Numerics.BigInteger) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def Pow(self: Numerics.Complex, power: Numerics.Complex) -> Numerics.Complex: ...
    @overload
    @staticmethod
    def Power(self: Numerics.BigInteger, exp: System.Int64) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def Power(self: Numerics.BigInteger, exp: int) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def Random(generator: System.Random, limit: Numerics.BigInteger) -> Numerics.BigInteger: ...
    @overload
    @staticmethod
    def Round(value: float, precision: int, mode: System.MidpointRounding) -> float: ...
    @overload
    @staticmethod
    def ToFloat64(self: Numerics.BigInteger) -> float: ...
    @overload
    @staticmethod
    def ToString(self: Numerics.BigInteger, radix: int) -> str: ...
    @overload
    @staticmethod
    def TryToFloat64(self: Numerics.BigInteger) -> (bool, float): ...

class MonitorUtils(object):
    """    """
    @overload
    @staticmethod
    def Enter(obj: object) -> (bool): ...
    @overload
    @staticmethod
    def Exit(obj: object) -> (bool): ...
    @overload
    @staticmethod
    def TryEnter(obj: object) -> (bool, bool): ...

class Publisher(object):
    """    Publisher[TKey, TValue]
    """
    def __init__(self): ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @overload
    def GetOrCreateValue(self, key: TKey, create: System.Func) -> TValue: ...

class ReferenceEqualityComparer(object):
    """    ReferenceEqualityComparer[T]
    """
    @property
    def Instance(self) -> ReferenceEqualityComparer: ...
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...

class ReflectionUtils(object):
    """    """
    @property
    def AllMembers(self) -> Reflection.BindingFlags: ...
    @property
    def EmptyTypes(self) -> System.System.Array[System.Type]: ...
    @property
    def GenericArityDelimiter(self) -> System.Char: ...
    @overload
    @staticmethod
    def Ancestors(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def CopyMethodSignature(from_: Reflection.MethodInfo, to: Emit.MethodBuilder, substituteDeclaringType: bool) -> None: ...
    @overload
    @staticmethod
    def CreateDelegate(methodInfo: Reflection.MethodInfo, delegateType: System.Type) -> System.Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(methodInfo: Reflection.MethodInfo, delegateType: System.Type, target: object) -> System.Delegate: ...
    @overload
    @staticmethod
    def DefineDynamicAssembly(name: Reflection.AssemblyName, access: Emit.AssemblyBuilderAccess) -> Emit.AssemblyBuilder: ...
    @overload
    @staticmethod
    def DefineDynamicModule(assembly: Emit.AssemblyBuilder, name: str, emitDebugInfo: bool) -> Emit.ModuleBuilder: ...
    @overload
    @staticmethod
    def DefineMethodOverride(tb: Emit.TypeBuilder, extra: Reflection.MethodAttributes, decl: Reflection.MethodInfo) -> Emit.MethodBuilder: ...
    @overload
    @staticmethod
    def FormatSignature(result: Text.StringBuilder, method: Reflection.MethodBase) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def FormatSignature(result: Text.StringBuilder, method: Reflection.MethodBase, nameDispenser: System.Func) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def FormatTypeArgs(result: Text.StringBuilder, types: System.System.Array[System.Type]) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def FormatTypeArgs(result: Text.StringBuilder, types: System.System.Array[System.Type], nameDispenser: System.Func) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def FormatTypeName(result: Text.StringBuilder, type_: System.Type) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def FormatTypeName(result: Text.StringBuilder, type_: System.Type, nameDispenser: System.Func) -> Text.StringBuilder: ...
    @overload
    @staticmethod
    def GetCustomAttribute(assembly: Reflection.Assembly, inherit: bool) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(member: Reflection.MemberInfo, inherit: bool) -> T: ...
    @overload
    @staticmethod
    def GetDeclaredConstructors(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredEvent(type_: System.Type, name: str) -> Reflection.EventInfo: ...
    @overload
    @staticmethod
    def GetDeclaredEvents(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredField(type_: System.Type, name: str) -> Reflection.FieldInfo: ...
    @overload
    @staticmethod
    def GetDeclaredFields(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredInterfaces(type_: System.Type) -> Generic.List: ...
    @overload
    @staticmethod
    def GetDeclaredMembers(type_: System.Type, name: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredMethods(type_: System.Type, name: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredNestedType(type_: System.Type, name: str) -> System.Type: ...
    @overload
    @staticmethod
    def GetDeclaredNestedTypes(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredProperties(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetDeclaredProperty(type_: System.Type, name: str) -> Reflection.PropertyInfo: ...
    @overload
    @staticmethod
    def GetDefaultValue(info: Reflection.ParameterInfo) -> object: ...
    @overload
    @staticmethod
    def GetDelegateSignature(delegateType: System.Type) -> (Reflection.System.Array[Reflection.ParameterInfo], Reflection.ParameterInfo): ...
    @overload
    @staticmethod
    def GetGenericTypeArguments(type_: System.Type) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def GetGenericTypeParameters(type_: System.Type) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def GetInheritedEvents(type_: System.Type, name: str, flattenHierarchy: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInheritedFields(type_: System.Type, name: str, flattenHierarchy: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInheritedMembers(type_: System.Type, name: str, flattenHierarchy: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInheritedMethods(type_: System.Type, name: str, flattenHierarchy: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetInheritedProperties(type_: System.Type, name: str, flattenHierarchy: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetMethodInfos(members: Reflection.System.Array[Reflection.MemberInfo]) -> Reflection.System.Array[Reflection.MethodBase]: ...
    @overload
    @staticmethod
    def GetNormalizedTypeName(typeName: str) -> str: ...
    @overload
    @staticmethod
    def GetNormalizedTypeName(type_: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetObjectCallSiteDelegateType(paramCnt: int) -> System.Type: ...
    @overload
    @staticmethod
    def GetParameterTypes(parameterInfos: Generic.IList) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def GetParameterTypes(parameterInfos: Reflection.System.Array[Reflection.ParameterInfo]) -> System.System.Array[System.Type]: ...
    @overload
    @staticmethod
    def GetRawConstantValue(field: Reflection.FieldInfo) -> object: ...
    @overload
    @staticmethod
    def GetReturnType(mi: Reflection.MethodBase) -> System.Type: ...
    @overload
    @staticmethod
    def GetTypeCode(type_: System.Type) -> System.TypeCode: ...
    @overload
    @staticmethod
    def GetVisibleExtensionMethodGroups(assembly: Reflection.Assembly, useCache: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetVisibleExtensionMethods(assembly: Reflection.Assembly) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetVisibleExtensionMethodsSlow(assembly: Reflection.Assembly) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def HasDefaultValue(pi: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(assembly: Reflection.Assembly, attributeType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsDynamicMethod(method: Reflection.MethodBase) -> bool: ...
    @overload
    @staticmethod
    def IsExtension(member: Reflection.MemberInfo) -> bool: ...
    @overload
    @staticmethod
    def IsMandatory(pi: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def IsOutParameter(pi: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def IsParamArray(parameter: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def IsParamDictionary(parameter: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def IsParamsMethod(method: Reflection.MethodBase) -> bool: ...
    @overload
    @staticmethod
    def IsParamsMethod(pis: Reflection.System.Array[Reflection.ParameterInfo]) -> bool: ...
    @overload
    @staticmethod
    def IsPrivate(evnt: Reflection.EventInfo) -> bool: ...
    @overload
    @staticmethod
    def IsPrivate(property_: Reflection.PropertyInfo) -> bool: ...
    @overload
    @staticmethod
    def IsPublic(property_: Reflection.PropertyInfo) -> bool: ...
    @overload
    @staticmethod
    def IsStatic(property_: Reflection.PropertyInfo) -> bool: ...
    @overload
    @staticmethod
    def IsStatic(evnt: Reflection.EventInfo) -> bool: ...
    @overload
    @staticmethod
    def ProhibitsNull(parameter: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def ProhibitsNullItems(parameter: Reflection.ParameterInfo) -> bool: ...
    @overload
    @staticmethod
    def SignatureEquals(method: Reflection.MethodInfo, requiredSignature: System.System.Array[System.Type]) -> bool: ...
    @overload
    @staticmethod
    def UnwrapEnumValue(value: object) -> object: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.MethodInfo, flags: Reflection.BindingFlags) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.MemberInfo, flags: Reflection.BindingFlags) -> Reflection.MemberInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.ConstructorInfo, flags: Reflection.BindingFlags) -> Reflection.ConstructorInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.FieldInfo, flags: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.PropertyInfo, flags: Reflection.BindingFlags) -> Reflection.PropertyInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: Reflection.EventInfo, flags: Reflection.BindingFlags) -> Reflection.EventInfo: ...
    @overload
    @staticmethod
    def WithBindingFlags(member: System.Type, flags: Reflection.BindingFlags) -> System.Type: ...
    @overload
    @staticmethod
    def WithBindingFlags(members: Generic.IEnumerable, flags: Reflection.BindingFlags) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithSignature(members: Generic.IEnumerable, parameterTypes: System.System.Array[System.Type]) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithSignature(members: Generic.IEnumerable, parameterTypes: System.System.Array[System.Type]) -> Generic.IEnumerable: ...

class ExtensionMethodInfo(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ExtensionMethodInfo) -> bool: ...
    @property
    def ExtendedType(self) -> System.Type: ...
    @property
    def Method(self) -> Reflection.MethodInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsExtensionOf(self, type_: System.Type) -> bool: ...

class StringUtils(object):
    """    """
    @overload
    @staticmethod
    def AddSlashes(str_: str) -> str: ...
    @overload
    @staticmethod
    def CountOf(str_: str, c: System.Char) -> int: ...
    @property
    def DefaultEncoding(self) -> Text.Encoding: ...
    @overload
    @staticmethod
    def GetLongestPrefix(str_: str, separator: System.Char, includeSeparator: bool) -> str: ...
    @overload
    @staticmethod
    def GetSuffix(str_: str, separator: System.Char, includeSeparator: bool) -> str: ...
    @overload
    @staticmethod
    def Split(str_: str, sep: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Split(str_: str, separator: str, maxComponents: int, options: System.StringSplitOptions) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def SplitWords(text: str, indentFirst: bool, lineWidth: int) -> str: ...

class SynchronizedDictionary(object):
    """    SynchronizedDictionary[TKey, TValue]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dictionary: Generic.Dictionary): ...
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def CopyTo(self, array: Generic.System.Array[Generic.KeyValuePair], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def UnderlyingDictionary(self) -> Generic.Dictionary: ...
    @property
    def Values(self) -> Generic.ICollection: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class ThreadingUtils(object):
    """    """
    @overload
    @staticmethod
    def GetCurrentThreadId() -> int: ...

class ThreadLocal(object):
    """    ThreadLocal[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, refCounted: bool): ...
    @property
    def Value(self) -> T: ...
    @overload
    def GetOrCreate(self, func: System.Func) -> T: ...
    @overload
    def GetStorageInfo() -> StorageInfo: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def Update(self, updater: System.Func) -> T: ...
    @overload
    def Update(self, newValue: T) -> T: ...

class TypeMemberCache(object):
    """    TypeMemberCache[T]
    """
    def __init__(self, reflector: System.Func): ...
    @overload
    def GetMembers(self, type_: System.Type, name: str, inherited: bool) -> Generic.IEnumerable: ...

class TypeUtils(object):
    """    """
    @property
    def ComObjectType(self) -> System.Type: ...
    @overload
    @staticmethod
    def IsComObject(obj: object) -> bool: ...
    @overload
    @staticmethod
    def IsComObjectType(type_: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsNested(t: System.Type) -> bool: ...

class ValueArray(object):
    """    ValueArray[T]
    """
    def __init__(self, array: System.Array[T]): ...
    @overload
    def Equals(self, other: ValueArray) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class WeakDictionary(object):
    """    WeakDictionary[TKey, TValue]
    """
    def __init__(self): ...
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def CopyTo(self, array: Generic.System.Array[Generic.KeyValuePair], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def Values(self) -> Generic.ICollection: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetOrCreateValue(self, key: TKey) -> TValue: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class HybridMapping(object):
    """    HybridMapping[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, offset: int): ...
    @property
    def SIZE(self) -> int: ...
    @overload
    def GetIdFromObject(self, value: T) -> int: ...
    @overload
    def GetObjectFromId(self, id_: int) -> T: ...
    @overload
    def RemoveOnId(self, id_: int) -> None: ...
    @overload
    def RemoveOnObject(self, value: T) -> None: ...
    @overload
    def StrongAdd(self, value: T, pos: int) -> int: ...
    @overload
    def WeakAdd(self, value: T) -> int: ...

class WeakHandle(System.ValueType):
    """    """
    def __init__(self, target: object, trackResurrection: bool): ...
    @overload
    def Free() -> None: ...
    @property
    def Target(self) -> object: ...

class StorageInfo(object):
    """    StorageInfo[T]
    """
    @property
    def Value(self) -> T: ...

# endregion
