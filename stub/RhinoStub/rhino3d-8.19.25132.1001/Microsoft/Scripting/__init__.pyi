"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Utils", "Interpreter", "Hosting", "Generation", "Debugging", "ComInterop", "Runtime", "Ast", "Actions", "SourceFileInformation", "KeyboardInterruptException", "MultiRuntimeAwareAttribute", "MutableTuple", "PerfTrack", "AmbiguousFileNameException", "ICustomScriptCodeData", "SavableScriptCode", "Categories"]
# endregion

# region: Imports
from Microsoft.Scripting import Runtime
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Utils", "Runtime", "Hosting", "ArgumentTypeException", "AssemblyLoadedEventArgs", "CompilerOptions", "ErrorSink", "ErrorCounter", "IndexSpan", "InvalidImplementationException", "LanguageOptions", "PlatformAdaptationLayer", "ParamDictionaryAttribute", "ScopeStorage", "IScopeVariable", "ScopeVariable", "ScopeVariableIgnoreCase", "ScriptCode", "StreamContentProvider", "TokenInfo", "TokenTriggers", "ScriptCodeParseResult", "SourceCodePropertiesUtils", "Severity", "SourceCodeKind", "SourceCodeReader", "SourceLocation", "SourceSpan", "SourceUnit", "SyntaxErrorException", "TextContentProvider", "TokenCategory", "TokenKind"]
# endregion

# region: Imports
from Microsoft.Scripting import Runtime
from System import Dynamic
from System import IO
from System import Reflection
from System import Text
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Linq import Expressions
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Scripting, Version=1.3.1.0

class ArgumentTypeException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class AssemblyLoadedEventArgs(System.EventArgs):
    """    """
    def __init__(self, assembly: Reflection.Assembly): ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...

class CompilerOptions(object):
    """    """
    def __init__(self): ...

class ErrorSink(object):
    """    """
    @property
    def Default(self) -> ErrorSink: ...
    @property
    def Null(self) -> ErrorSink: ...
    @overload
    def Add(self, source: SourceUnit, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...
    @overload
    def Add(self, message: str, path: str, code: str, line: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...

class ErrorCounter(ErrorSink):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sink: ErrorSink): ...
    @overload
    def Add(self, source: SourceUnit, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...
    @overload
    def ClearCounters() -> None: ...
    @property
    def AnyError(self) -> bool: ...
    @property
    def ErrorCount(self) -> int: ...
    @property
    def FatalErrorCount(self) -> int: ...
    @property
    def WarningCount(self) -> int: ...

class IndexSpan(System.ValueType):
    """    """
    def __init__(self, start: int, length: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: IndexSpan) -> bool: ...
    @property
    def End(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class InvalidImplementationException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: System.Exception): ...

class LanguageOptions(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: Generic.IDictionary): ...
    @property
    def CompilationThreshold(self) -> int: ...
    @property
    def ExceptionDetail(self) -> bool: ...
    @property
    def InterpretedMode(self) -> bool: ...
    @property
    def NoAdaptiveCompilation(self) -> bool: ...
    @property
    def PerfStats(self) -> bool: ...
    @property
    def SearchPaths(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ShowClrExceptions(self) -> bool: ...
    @overload
    @staticmethod
    def GetOption(options: Generic.IDictionary, name: str, defaultValue: T) -> T: ...
    @overload
    @staticmethod
    def GetSearchPathsOption(options: Generic.IDictionary) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetStringCollectionOption(options: Generic.IDictionary, name: str, separators: System.System.Array[System.Char]) -> ObjectModel.ReadOnlyCollection: ...
    @ExceptionDetail.setter
    def ExceptionDetail(self, value: System.Void): ...
    @InterpretedMode.setter
    def InterpretedMode(self, value: System.Void): ...
    @ShowClrExceptions.setter
    def ShowClrExceptions(self, value: System.Void): ...

class PlatformAdaptationLayer(object):
    """    """
    def __init__(self): ...
    @property
    def Default(self) -> PlatformAdaptationLayer: ...
    @property
    def IsCompactFramework(self) -> bool: ...
    @overload
    def CombinePaths(self, path1: str, path2: str) -> str: ...
    @overload
    def CreateDirectory(self, path: str) -> None: ...
    @overload
    def DeleteDirectory(self, path: str, recursive: bool) -> None: ...
    @overload
    def DeleteFile(self, path: str, deleteReadOnly: bool) -> None: ...
    @overload
    def DirectoryExists(self, path: str) -> bool: ...
    @overload
    def FileExists(self, path: str) -> bool: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def IsNativeModule(self) -> bool: ...
    @property
    def IsSingleRootFileSystem(self) -> bool: ...
    @property
    def PathComparer(self) -> System.StringComparer: ...
    @overload
    def GetDirectories(self, path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    def GetDirectoryName(self, path: str) -> str: ...
    @overload
    def GetEnvironmentVariable(self, key: str) -> str: ...
    @overload
    def GetEnvironmentVariables() -> Generic.Dictionary: ...
    @overload
    def GetExtension(self, path: str) -> str: ...
    @overload
    def GetFileName(self, path: str) -> str: ...
    @overload
    def GetFileNameWithoutExtension(self, path: str) -> str: ...
    @overload
    def GetFiles(self, path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    def GetFileSystemEntries(self, path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    def GetFileSystemEntries(self, path: str, searchPattern: str, includeFiles: bool, includeDirectories: bool) -> System.System.Array[str]: ...
    @overload
    def GetFullPath(self, path: str) -> str: ...
    @overload
    def IsAbsolutePath(self, path: str) -> bool: ...
    @overload
    def LoadAssembly(self, name: str) -> Reflection.Assembly: ...
    @overload
    def LoadAssemblyFromPath(self, path: str) -> Reflection.Assembly: ...
    @overload
    def MoveFileSystemEntry(self, sourcePath: str, destinationPath: str) -> None: ...
    @overload
    def OpenFileStream(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare, bufferSize: int) -> IO.Stream: ...
    @overload
    def OpenInputFileStream(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare, bufferSize: int) -> IO.Stream: ...
    @overload
    def OpenOutputFileStream(self, path: str) -> IO.Stream: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: System.Void): ...
    @overload
    def SetEnvironmentVariable(self, key: str, value: str) -> None: ...
    @overload
    def TerminateScriptExecution(self, exitCode: int) -> None: ...

class ParamDictionaryAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ScopeStorage(object):
    """    """
    def __init__(self): ...
    @overload
    def DeleteValue(self, name: str, ignoreCase: bool) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetItems() -> Generic.IList: ...
    @overload
    def GetMemberNames() -> Generic.IList: ...
    @overload
    def GetMetaObject(self, parameter: Expressions.Expression) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetScopeVariable(self, name: str) -> ScopeVariable: ...
    @overload
    def GetScopeVariable(self, name: str, ignoreCase: bool) -> IScopeVariable: ...
    @overload
    def GetScopeVariableIgnoreCase(self, name: str) -> ScopeVariableIgnoreCase: ...
    @overload
    def GetValue(self, name: str, ignoreCase: bool) -> object: ...
    @overload
    def HasValue(self, name: str, ignoreCase: bool) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetValue(self, name: str, ignoreCase: bool, value: object) -> None: ...
    @overload
    def TryGetValue(self, name: str, ignoreCase: bool) -> (bool, object): ...

class IScopeVariable:
    """    """
    @overload
    def DeleteValue() -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @overload
    def SetValue(self, value: object) -> None: ...
    @overload
    def TryGetValue() -> (bool, object): ...

class ScopeVariable(object):
    """    """
    @overload
    def DeleteValue() -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def WeakReference(self) -> System.WeakReference: ...
    @overload
    def SetValue(self, value: object) -> None: ...
    @overload
    def TryGetValue() -> (bool, object): ...

class ScopeVariableIgnoreCase(object):
    """    """
    @overload
    def DeleteValue() -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def WeakReference(self) -> System.WeakReference: ...
    @overload
    def SetValue(self, value: object) -> None: ...
    @overload
    def TryGetValue() -> (bool, object): ...

class ScriptCode(object):
    """    """
    @overload
    def CreateScope() -> Runtime.Scope: ...
    @property
    def LanguageContext(self) -> Runtime.LanguageContext: ...
    @property
    def SourceUnit(self) -> SourceUnit: ...
    @overload
    def Run() -> object: ...
    @overload
    def Run(self, scope: Runtime.Scope) -> object: ...
    @overload
    def ToString() -> str: ...

class StreamContentProvider(object):
    """    """
    @overload
    def GetStream() -> IO.Stream: ...

class TokenInfo(System.ValueType):
    """    """
    def __init__(self, span: SourceSpan, category: TokenCategory, trigger: TokenTriggers): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TokenInfo) -> bool: ...
    @property
    def Category(self) -> TokenCategory: ...
    @property
    def SourceSpan(self) -> SourceSpan: ...
    @property
    def Trigger(self) -> TokenTriggers: ...
    @overload
    def GetHashCode() -> int: ...
    @Category.setter
    def Category(self, value: System.Void): ...
    @SourceSpan.setter
    def SourceSpan(self, value: System.Void): ...
    @Trigger.setter
    def Trigger(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class TokenTriggers(enum.Enum):
    None_ = 0
    MemberSelect = 1
    MatchBraces = 2
    ParameterStart = 16
    ParameterNext = 32
    ParameterEnd = 64
    Parameter = 128
    MethodTip = 240

class ScriptCodeParseResult(enum.Enum):
    Complete = 0
    Empty = 1
    Invalid = 2
    IncompleteToken = 3
    IncompleteStatement = 4

class SourceCodePropertiesUtils(object):
    """    """
    @overload
    @staticmethod
    def IsCompleteOrInvalid(props: ScriptCodeParseResult, allowIncompleteStatement: bool) -> bool: ...

class Severity(enum.Enum):
    Ignore = 0
    Warning = 1
    Error = 2
    FatalError = 3

class SourceCodeKind(enum.Enum):
    Unspecified = 0
    Expression = 1
    Statements = 2
    SingleStatement = 3
    File = 4
    InteractiveCode = 5
    AutoDetect = 6

class SourceCodeReader(IO.TextReader):
    """    """
    def __init__(self, textReader: IO.TextReader, encoding: Text.Encoding): ...
    @property
    def Null(self) -> SourceCodeReader: ...
    @property
    def BaseReader(self) -> IO.TextReader: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @overload
    def Peek() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadToEnd() -> str: ...
    @overload
    def SeekLine(self, line: int) -> bool: ...

class SourceLocation(System.ValueType):
    """    """
    def __init__(self, index: int, line: int, column: int): ...
    @property
    def None_(self) -> SourceLocation: ...
    @property
    def Invalid(self) -> SourceLocation: ...
    @property
    def MinValue(self) -> SourceLocation: ...
    @overload
    @staticmethod
    def Compare(left: SourceLocation, right: SourceLocation) -> int: ...
    @overload
    def Equals(self, other: SourceLocation) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Column(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Line(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class SourceSpan(System.ValueType):
    """    """
    def __init__(self, start: SourceLocation, end: SourceLocation): ...
    @property
    def None_(self) -> SourceSpan: ...
    @property
    def Invalid(self) -> SourceSpan: ...
    @overload
    def Equals(self, other: SourceSpan) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def End(self) -> SourceLocation: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> SourceLocation: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class SourceUnit(object):
    """    """
    def __init__(self, context: Runtime.LanguageContext, contentProvider: TextContentProvider, path: str, kind: SourceCodeKind): ...
    @overload
    def Compile() -> ScriptCode: ...
    @overload
    def Compile(self, errorSink: ErrorSink) -> ScriptCode: ...
    @overload
    def Compile(self, options: CompilerOptions, errorSink: ErrorSink) -> ScriptCode: ...
    @overload
    def Execute() -> object: ...
    @overload
    def Execute(self, errorSink: ErrorSink) -> object: ...
    @overload
    def Execute(self, scope: Runtime.Scope) -> object: ...
    @overload
    def Execute(self, scope: Runtime.Scope, errorSink: ErrorSink) -> object: ...
    @overload
    def Execute(self, options: CompilerOptions, errorSink: ErrorSink) -> object: ...
    @overload
    def ExecuteProgram() -> int: ...
    @property
    def CodeProperties(self) -> System.Nullable: ...
    @property
    def Document(self) -> Expressions.SymbolDocumentInfo: ...
    @property
    def EmitDebugSymbols(self) -> bool: ...
    @property
    def HasLineMapping(self) -> bool: ...
    @property
    def HasPath(self) -> bool: ...
    @property
    def Kind(self) -> SourceCodeKind: ...
    @property
    def LanguageContext(self) -> Runtime.LanguageContext: ...
    @property
    def Path(self) -> str: ...
    @overload
    def GetCode() -> str: ...
    @overload
    def GetCodeLine(self, line: int) -> str: ...
    @overload
    def GetCodeLines(self, start: int, count: int) -> System.System.Array[str]: ...
    @overload
    def GetCodeProperties() -> ScriptCodeParseResult: ...
    @overload
    def GetCodeProperties(self, options: CompilerOptions) -> ScriptCodeParseResult: ...
    @overload
    def GetReader() -> SourceCodeReader: ...
    @overload
    def MakeLocation(self, loc: SourceLocation) -> SourceLocation: ...
    @overload
    def MakeLocation(self, index: int, line: int, column: int) -> SourceLocation: ...
    @overload
    def MapLine(self, line: int) -> int: ...
    @CodeProperties.setter
    def CodeProperties(self, value: System.Void): ...
    @overload
    def SetLineMapping(self, lineMap: Generic.System.Array[Generic.KeyValuePair]) -> None: ...

class SyntaxErrorException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, sourceUnit: SourceUnit, span: SourceSpan, errorCode: int, severity: Severity): ...
    @overload
    def __init__(self, message: str, path: str, code: str, line: str, span: SourceSpan, errorCode: int, severity: Severity): ...
    @property
    def Column(self) -> int: ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def Line(self) -> int: ...
    @property
    def RawSpan(self) -> SourceSpan: ...
    @property
    def Severity(self) -> Severity: ...
    @property
    def SourceCode(self) -> str: ...
    @property
    def SourcePath(self) -> str: ...
    @overload
    def GetCodeLine() -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetSymbolDocumentName() -> str: ...

class TextContentProvider(object):
    """    """
    @overload
    def GetReader() -> SourceCodeReader: ...

class TokenCategory(enum.Enum):
    None_ = 0
    EndOfStream = 1
    WhiteSpace = 2
    Comment = 3
    LineComment = 4
    DocComment = 5
    NumericLiteral = 6
    CharacterLiteral = 7
    StringLiteral = 8
    RegularExpressionLiteral = 9
    Keyword = 10
    Directive = 11
    Operator = 12
    Delimiter = 13
    Identifier = 14
    Grouping = 15
    Error = 16
    LanguageDefined = 256

class TokenKind(enum.Enum):
    Default = 0
    Error = 1
    Whitespace = 2
    EndOfLine = 3
    LineJoin = 4
    Indentation = 5
    SingleLineComment = 6
    MultiLineComment = 7
    NestableCommentStart = 8
    NestableCommentEnd = 9
    SingleLineDocComment = 10
    MultiLineDocComment = 11
    Directive = 12
    Keyword = 13
    Identifier = 14
    VerbatimIdentifier = 15
    Variable = 16
    IntegerLiteral = 17
    FloatLiteral = 18
    CharacterLiteral = 19
    String = 20
    UnicodeString = 21
    FormattedString = 22
    FormattedUnicodeString = 23
    LeftParenthesis = 24
    RightParenthesis = 25
    LeftBracket = 26
    RightBracket = 27
    LeftBrace = 28
    RightBrace = 29
    Comma = 30
    Dot = 31
    Semicolon = 32
    Colon = 33
    DoubleColon = 34
    TripleColon = 35
    Plus = 36
    PlusPlus = 37
    PlusEqual = 38
    Minus = 39
    MinusMinus = 40
    MinusEqual = 41
    Mul = 42
    MulEqual = 43
    Div = 44
    DivEqual = 45
    FloorDivide = 46
    FloorDivideEqual = 47
    Mod = 48
    ModEqual = 49
    Power = 50
    PowerEqual = 51
    LeftShift = 52
    LeftShiftEqual = 53
    RightShift = 54
    RightShiftEqual = 55
    BitwiseAnd = 56
    BitwiseAndEqual = 57
    BitwiseOr = 58
    BitwiseOrEqual = 59
    Xor = 60
    XorEqual = 61
    BooleanAnd = 62
    BooleanAndEqual = 63
    BooleanOr = 64
    BooleanOrEqual = 65
    Twiddle = 66
    TwiddleEqual = 67
    LessThan = 68
    GreaterThan = 69
    LessThanOrEqual = 70
    GreaterThanOrEqual = 71
    Assign = 72
    AssignAlias = 73
    AssignColon = 74
    Equal = 75
    StrictEqual = 76
    Not = 77
    NotEqual = 78
    StrictNotEqual = 79
    Unequal = 80
    CompareEqual = 81
    Match = 82
    NotMatch = 83
    Arrow = 84
    DoubleArrow = 85
    BackQuote = 86
    DoubleDot = 87
    TripleDot = 88
    At = 89
    DoubleAt = 90
    Question = 91
    DoubleQuestion = 92
    Backslash = 93
    DoubleBackslash = 94
    Dollar = 95
    DoubleDollar = 96
    LanguageDefined = 97

# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class SourceFileInformation(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, fileName: str, language: System.Guid): ...
    @overload
    def __init__(self, fileName: str, language: System.Guid, vendor: System.Guid): ...
    @property
    def FileName(self) -> str: ...
    @property
    def LanguageGuid(self) -> System.Guid: ...
    @property
    def VendorGuid(self) -> System.Guid: ...

class KeyboardInterruptException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, msg: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class MultiRuntimeAwareAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class MutableTuple(object):
    """    """
    @property
    def MaxSize(self) -> int: ...
    @overload
    @staticmethod
    def Create(values: Expressions.System.Array[Expressions.Expression]) -> Expressions.Expression: ...
    @property
    def Capacity(self) -> int: ...
    @overload
    @staticmethod
    def GetAccessPath(tupleType: System.Type, index: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetAccessPath(tupleType: System.Type, size: int, index: int) -> Generic.IEnumerable: ...
    @overload
    def GetNestedValue(self, size: int, index: int) -> object: ...
    @overload
    @staticmethod
    def GetSize(tupleType: System.Type) -> int: ...
    @overload
    @staticmethod
    def GetTupleType(size: int) -> System.Type: ...
    @overload
    @staticmethod
    def GetTupleValues(tuple_: MutableTuple) -> System.System.Array[object]: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @overload
    @staticmethod
    def MakeTuple(tupleType: System.Type, args: System.System.Array[object]) -> MutableTuple: ...
    @overload
    @staticmethod
    def MakeTupleType(types: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    def SetNestedValue(self, size: int, index: int, value: object) -> None: ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item000(self) -> T0: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item000.setter
    def Item000(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item001(self) -> T1: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item001.setter
    def Item001(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item002(self) -> T2: ...
    @property
    def Item003(self) -> T3: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item002.setter
    def Item002(self, value: System.Void): ...
    @Item003.setter
    def Item003(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3, T4, T5, T6, T7]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item004(self) -> T4: ...
    @property
    def Item005(self) -> T5: ...
    @property
    def Item006(self) -> T6: ...
    @property
    def Item007(self) -> T7: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item004.setter
    def Item004(self, value: System.Void): ...
    @Item005.setter
    def Item005(self, value: System.Void): ...
    @Item006.setter
    def Item006(self, value: System.Void): ...
    @Item007.setter
    def Item007(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8, item9: T9, item10: T10, item11: T11, item12: T12, item13: T13, item14: T14, item15: T15): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item008(self) -> T8: ...
    @property
    def Item009(self) -> T9: ...
    @property
    def Item010(self) -> T10: ...
    @property
    def Item011(self) -> T11: ...
    @property
    def Item012(self) -> T12: ...
    @property
    def Item013(self) -> T13: ...
    @property
    def Item014(self) -> T14: ...
    @property
    def Item015(self) -> T15: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item008.setter
    def Item008(self, value: System.Void): ...
    @Item009.setter
    def Item009(self, value: System.Void): ...
    @Item010.setter
    def Item010(self, value: System.Void): ...
    @Item011.setter
    def Item011(self, value: System.Void): ...
    @Item012.setter
    def Item012(self, value: System.Void): ...
    @Item013.setter
    def Item013(self, value: System.Void): ...
    @Item014.setter
    def Item014(self, value: System.Void): ...
    @Item015.setter
    def Item015(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8, item9: T9, item10: T10, item11: T11, item12: T12, item13: T13, item14: T14, item15: T15, item16: T16, item17: T17, item18: T18, item19: T19, item20: T20, item21: T21, item22: T22, item23: T23, item24: T24, item25: T25, item26: T26, item27: T27, item28: T28, item29: T29, item30: T30, item31: T31): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item016(self) -> T16: ...
    @property
    def Item017(self) -> T17: ...
    @property
    def Item018(self) -> T18: ...
    @property
    def Item019(self) -> T19: ...
    @property
    def Item020(self) -> T20: ...
    @property
    def Item021(self) -> T21: ...
    @property
    def Item022(self) -> T22: ...
    @property
    def Item023(self) -> T23: ...
    @property
    def Item024(self) -> T24: ...
    @property
    def Item025(self) -> T25: ...
    @property
    def Item026(self) -> T26: ...
    @property
    def Item027(self) -> T27: ...
    @property
    def Item028(self) -> T28: ...
    @property
    def Item029(self) -> T29: ...
    @property
    def Item030(self) -> T30: ...
    @property
    def Item031(self) -> T31: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item016.setter
    def Item016(self, value: System.Void): ...
    @Item017.setter
    def Item017(self, value: System.Void): ...
    @Item018.setter
    def Item018(self, value: System.Void): ...
    @Item019.setter
    def Item019(self, value: System.Void): ...
    @Item020.setter
    def Item020(self, value: System.Void): ...
    @Item021.setter
    def Item021(self, value: System.Void): ...
    @Item022.setter
    def Item022(self, value: System.Void): ...
    @Item023.setter
    def Item023(self, value: System.Void): ...
    @Item024.setter
    def Item024(self, value: System.Void): ...
    @Item025.setter
    def Item025(self, value: System.Void): ...
    @Item026.setter
    def Item026(self, value: System.Void): ...
    @Item027.setter
    def Item027(self, value: System.Void): ...
    @Item028.setter
    def Item028(self, value: System.Void): ...
    @Item029.setter
    def Item029(self, value: System.Void): ...
    @Item030.setter
    def Item030(self, value: System.Void): ...
    @Item031.setter
    def Item031(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8, item9: T9, item10: T10, item11: T11, item12: T12, item13: T13, item14: T14, item15: T15, item16: T16, item17: T17, item18: T18, item19: T19, item20: T20, item21: T21, item22: T22, item23: T23, item24: T24, item25: T25, item26: T26, item27: T27, item28: T28, item29: T29, item30: T30, item31: T31, item32: T32, item33: T33, item34: T34, item35: T35, item36: T36, item37: T37, item38: T38, item39: T39, item40: T40, item41: T41, item42: T42, item43: T43, item44: T44, item45: T45, item46: T46, item47: T47, item48: T48, item49: T49, item50: T50, item51: T51, item52: T52, item53: T53, item54: T54, item55: T55, item56: T56, item57: T57, item58: T58, item59: T59, item60: T60, item61: T61, item62: T62, item63: T63): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item032(self) -> T32: ...
    @property
    def Item033(self) -> T33: ...
    @property
    def Item034(self) -> T34: ...
    @property
    def Item035(self) -> T35: ...
    @property
    def Item036(self) -> T36: ...
    @property
    def Item037(self) -> T37: ...
    @property
    def Item038(self) -> T38: ...
    @property
    def Item039(self) -> T39: ...
    @property
    def Item040(self) -> T40: ...
    @property
    def Item041(self) -> T41: ...
    @property
    def Item042(self) -> T42: ...
    @property
    def Item043(self) -> T43: ...
    @property
    def Item044(self) -> T44: ...
    @property
    def Item045(self) -> T45: ...
    @property
    def Item046(self) -> T46: ...
    @property
    def Item047(self) -> T47: ...
    @property
    def Item048(self) -> T48: ...
    @property
    def Item049(self) -> T49: ...
    @property
    def Item050(self) -> T50: ...
    @property
    def Item051(self) -> T51: ...
    @property
    def Item052(self) -> T52: ...
    @property
    def Item053(self) -> T53: ...
    @property
    def Item054(self) -> T54: ...
    @property
    def Item055(self) -> T55: ...
    @property
    def Item056(self) -> T56: ...
    @property
    def Item057(self) -> T57: ...
    @property
    def Item058(self) -> T58: ...
    @property
    def Item059(self) -> T59: ...
    @property
    def Item060(self) -> T60: ...
    @property
    def Item061(self) -> T61: ...
    @property
    def Item062(self) -> T62: ...
    @property
    def Item063(self) -> T63: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item032.setter
    def Item032(self, value: System.Void): ...
    @Item033.setter
    def Item033(self, value: System.Void): ...
    @Item034.setter
    def Item034(self, value: System.Void): ...
    @Item035.setter
    def Item035(self, value: System.Void): ...
    @Item036.setter
    def Item036(self, value: System.Void): ...
    @Item037.setter
    def Item037(self, value: System.Void): ...
    @Item038.setter
    def Item038(self, value: System.Void): ...
    @Item039.setter
    def Item039(self, value: System.Void): ...
    @Item040.setter
    def Item040(self, value: System.Void): ...
    @Item041.setter
    def Item041(self, value: System.Void): ...
    @Item042.setter
    def Item042(self, value: System.Void): ...
    @Item043.setter
    def Item043(self, value: System.Void): ...
    @Item044.setter
    def Item044(self, value: System.Void): ...
    @Item045.setter
    def Item045(self, value: System.Void): ...
    @Item046.setter
    def Item046(self, value: System.Void): ...
    @Item047.setter
    def Item047(self, value: System.Void): ...
    @Item048.setter
    def Item048(self, value: System.Void): ...
    @Item049.setter
    def Item049(self, value: System.Void): ...
    @Item050.setter
    def Item050(self, value: System.Void): ...
    @Item051.setter
    def Item051(self, value: System.Void): ...
    @Item052.setter
    def Item052(self, value: System.Void): ...
    @Item053.setter
    def Item053(self, value: System.Void): ...
    @Item054.setter
    def Item054(self, value: System.Void): ...
    @Item055.setter
    def Item055(self, value: System.Void): ...
    @Item056.setter
    def Item056(self, value: System.Void): ...
    @Item057.setter
    def Item057(self, value: System.Void): ...
    @Item058.setter
    def Item058(self, value: System.Void): ...
    @Item059.setter
    def Item059(self, value: System.Void): ...
    @Item060.setter
    def Item060(self, value: System.Void): ...
    @Item061.setter
    def Item061(self, value: System.Void): ...
    @Item062.setter
    def Item062(self, value: System.Void): ...
    @Item063.setter
    def Item063(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class MutableTuple(MutableTuple):
    """    MutableTuple[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98, T99, T100, T101, T102, T103, T104, T105, T106, T107, T108, T109, T110, T111, T112, T113, T114, T115, T116, T117, T118, T119, T120, T121, T122, T123, T124, T125, T126, T127]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item0: T0, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8, item9: T9, item10: T10, item11: T11, item12: T12, item13: T13, item14: T14, item15: T15, item16: T16, item17: T17, item18: T18, item19: T19, item20: T20, item21: T21, item22: T22, item23: T23, item24: T24, item25: T25, item26: T26, item27: T27, item28: T28, item29: T29, item30: T30, item31: T31, item32: T32, item33: T33, item34: T34, item35: T35, item36: T36, item37: T37, item38: T38, item39: T39, item40: T40, item41: T41, item42: T42, item43: T43, item44: T44, item45: T45, item46: T46, item47: T47, item48: T48, item49: T49, item50: T50, item51: T51, item52: T52, item53: T53, item54: T54, item55: T55, item56: T56, item57: T57, item58: T58, item59: T59, item60: T60, item61: T61, item62: T62, item63: T63, item64: T64, item65: T65, item66: T66, item67: T67, item68: T68, item69: T69, item70: T70, item71: T71, item72: T72, item73: T73, item74: T74, item75: T75, item76: T76, item77: T77, item78: T78, item79: T79, item80: T80, item81: T81, item82: T82, item83: T83, item84: T84, item85: T85, item86: T86, item87: T87, item88: T88, item89: T89, item90: T90, item91: T91, item92: T92, item93: T93, item94: T94, item95: T95, item96: T96, item97: T97, item98: T98, item99: T99, item100: T100, item101: T101, item102: T102, item103: T103, item104: T104, item105: T105, item106: T106, item107: T107, item108: T108, item109: T109, item110: T110, item111: T111, item112: T112, item113: T113, item114: T114, item115: T115, item116: T116, item117: T117, item118: T118, item119: T119, item120: T120, item121: T121, item122: T122, item123: T123, item124: T124, item125: T125, item126: T126, item127: T127): ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Item064(self) -> T64: ...
    @property
    def Item065(self) -> T65: ...
    @property
    def Item066(self) -> T66: ...
    @property
    def Item067(self) -> T67: ...
    @property
    def Item068(self) -> T68: ...
    @property
    def Item069(self) -> T69: ...
    @property
    def Item070(self) -> T70: ...
    @property
    def Item071(self) -> T71: ...
    @property
    def Item072(self) -> T72: ...
    @property
    def Item073(self) -> T73: ...
    @property
    def Item074(self) -> T74: ...
    @property
    def Item075(self) -> T75: ...
    @property
    def Item076(self) -> T76: ...
    @property
    def Item077(self) -> T77: ...
    @property
    def Item078(self) -> T78: ...
    @property
    def Item079(self) -> T79: ...
    @property
    def Item080(self) -> T80: ...
    @property
    def Item081(self) -> T81: ...
    @property
    def Item082(self) -> T82: ...
    @property
    def Item083(self) -> T83: ...
    @property
    def Item084(self) -> T84: ...
    @property
    def Item085(self) -> T85: ...
    @property
    def Item086(self) -> T86: ...
    @property
    def Item087(self) -> T87: ...
    @property
    def Item088(self) -> T88: ...
    @property
    def Item089(self) -> T89: ...
    @property
    def Item090(self) -> T90: ...
    @property
    def Item091(self) -> T91: ...
    @property
    def Item092(self) -> T92: ...
    @property
    def Item093(self) -> T93: ...
    @property
    def Item094(self) -> T94: ...
    @property
    def Item095(self) -> T95: ...
    @property
    def Item096(self) -> T96: ...
    @property
    def Item097(self) -> T97: ...
    @property
    def Item098(self) -> T98: ...
    @property
    def Item099(self) -> T99: ...
    @property
    def Item100(self) -> T100: ...
    @property
    def Item101(self) -> T101: ...
    @property
    def Item102(self) -> T102: ...
    @property
    def Item103(self) -> T103: ...
    @property
    def Item104(self) -> T104: ...
    @property
    def Item105(self) -> T105: ...
    @property
    def Item106(self) -> T106: ...
    @property
    def Item107(self) -> T107: ...
    @property
    def Item108(self) -> T108: ...
    @property
    def Item109(self) -> T109: ...
    @property
    def Item110(self) -> T110: ...
    @property
    def Item111(self) -> T111: ...
    @property
    def Item112(self) -> T112: ...
    @property
    def Item113(self) -> T113: ...
    @property
    def Item114(self) -> T114: ...
    @property
    def Item115(self) -> T115: ...
    @property
    def Item116(self) -> T116: ...
    @property
    def Item117(self) -> T117: ...
    @property
    def Item118(self) -> T118: ...
    @property
    def Item119(self) -> T119: ...
    @property
    def Item120(self) -> T120: ...
    @property
    def Item121(self) -> T121: ...
    @property
    def Item122(self) -> T122: ...
    @property
    def Item123(self) -> T123: ...
    @property
    def Item124(self) -> T124: ...
    @property
    def Item125(self) -> T125: ...
    @property
    def Item126(self) -> T126: ...
    @property
    def Item127(self) -> T127: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @Item064.setter
    def Item064(self, value: System.Void): ...
    @Item065.setter
    def Item065(self, value: System.Void): ...
    @Item066.setter
    def Item066(self, value: System.Void): ...
    @Item067.setter
    def Item067(self, value: System.Void): ...
    @Item068.setter
    def Item068(self, value: System.Void): ...
    @Item069.setter
    def Item069(self, value: System.Void): ...
    @Item070.setter
    def Item070(self, value: System.Void): ...
    @Item071.setter
    def Item071(self, value: System.Void): ...
    @Item072.setter
    def Item072(self, value: System.Void): ...
    @Item073.setter
    def Item073(self, value: System.Void): ...
    @Item074.setter
    def Item074(self, value: System.Void): ...
    @Item075.setter
    def Item075(self, value: System.Void): ...
    @Item076.setter
    def Item076(self, value: System.Void): ...
    @Item077.setter
    def Item077(self, value: System.Void): ...
    @Item078.setter
    def Item078(self, value: System.Void): ...
    @Item079.setter
    def Item079(self, value: System.Void): ...
    @Item080.setter
    def Item080(self, value: System.Void): ...
    @Item081.setter
    def Item081(self, value: System.Void): ...
    @Item082.setter
    def Item082(self, value: System.Void): ...
    @Item083.setter
    def Item083(self, value: System.Void): ...
    @Item084.setter
    def Item084(self, value: System.Void): ...
    @Item085.setter
    def Item085(self, value: System.Void): ...
    @Item086.setter
    def Item086(self, value: System.Void): ...
    @Item087.setter
    def Item087(self, value: System.Void): ...
    @Item088.setter
    def Item088(self, value: System.Void): ...
    @Item089.setter
    def Item089(self, value: System.Void): ...
    @Item090.setter
    def Item090(self, value: System.Void): ...
    @Item091.setter
    def Item091(self, value: System.Void): ...
    @Item092.setter
    def Item092(self, value: System.Void): ...
    @Item093.setter
    def Item093(self, value: System.Void): ...
    @Item094.setter
    def Item094(self, value: System.Void): ...
    @Item095.setter
    def Item095(self, value: System.Void): ...
    @Item096.setter
    def Item096(self, value: System.Void): ...
    @Item097.setter
    def Item097(self, value: System.Void): ...
    @Item098.setter
    def Item098(self, value: System.Void): ...
    @Item099.setter
    def Item099(self, value: System.Void): ...
    @Item100.setter
    def Item100(self, value: System.Void): ...
    @Item101.setter
    def Item101(self, value: System.Void): ...
    @Item102.setter
    def Item102(self, value: System.Void): ...
    @Item103.setter
    def Item103(self, value: System.Void): ...
    @Item104.setter
    def Item104(self, value: System.Void): ...
    @Item105.setter
    def Item105(self, value: System.Void): ...
    @Item106.setter
    def Item106(self, value: System.Void): ...
    @Item107.setter
    def Item107(self, value: System.Void): ...
    @Item108.setter
    def Item108(self, value: System.Void): ...
    @Item109.setter
    def Item109(self, value: System.Void): ...
    @Item110.setter
    def Item110(self, value: System.Void): ...
    @Item111.setter
    def Item111(self, value: System.Void): ...
    @Item112.setter
    def Item112(self, value: System.Void): ...
    @Item113.setter
    def Item113(self, value: System.Void): ...
    @Item114.setter
    def Item114(self, value: System.Void): ...
    @Item115.setter
    def Item115(self, value: System.Void): ...
    @Item116.setter
    def Item116(self, value: System.Void): ...
    @Item117.setter
    def Item117(self, value: System.Void): ...
    @Item118.setter
    def Item118(self, value: System.Void): ...
    @Item119.setter
    def Item119(self, value: System.Void): ...
    @Item120.setter
    def Item120(self, value: System.Void): ...
    @Item121.setter
    def Item121(self, value: System.Void): ...
    @Item122.setter
    def Item122(self, value: System.Void): ...
    @Item123.setter
    def Item123(self, value: System.Void): ...
    @Item124.setter
    def Item124(self, value: System.Void): ...
    @Item125.setter
    def Item125(self, value: System.Void): ...
    @Item126.setter
    def Item126(self, value: System.Void): ...
    @Item127.setter
    def Item127(self, value: System.Void): ...
    @overload
    def SetValue(self, index: int, value: object) -> None: ...

class PerfTrack(object):
    """    """
    @overload
    @staticmethod
    def AddHistograms(result: Generic.IDictionary, addend: Generic.IDictionary) -> None: ...
    @overload
    @staticmethod
    def DumpHistogram(histogram: Generic.IDictionary) -> None: ...
    @overload
    @staticmethod
    def DumpHistogram(histogram: Generic.IDictionary, output: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def DumpStats() -> None: ...
    @overload
    @staticmethod
    def DumpStats(output: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def IncrementEntry(histogram: Generic.IDictionary, key: TKey) -> None: ...
    @overload
    @staticmethod
    def NoteEvent(category: Categories, key: object) -> None: ...

class AmbiguousFileNameException(System.Exception):
    """    """
    @overload
    def __init__(self, firstPath: str, secondPath: str): ...
    @overload
    def __init__(self, firstPath: str, secondPath: str, message: str): ...
    @overload
    def __init__(self, firstPath: str, secondPath: str, message: str, inner: System.Exception): ...
    @property
    def FirstPath(self) -> str: ...
    @property
    def SecondPath(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ICustomScriptCodeData:
    """    """
    @overload
    def GetCustomScriptCodeData() -> str: ...

class SavableScriptCode(ScriptCode):
    """    """
    @overload
    @staticmethod
    def LoadFromAssembly(runtime: Runtime.ScriptDomainManager, assembly: Reflection.Assembly) -> System.Array[ScriptCode]: ...
    @overload
    @staticmethod
    def SaveToAssembly(assemblyName: str, codes: System.Array[SavableScriptCode]) -> None: ...
    @overload
    @staticmethod
    def SaveToAssembly(assemblyName: str, assemblyAttributes: Generic.IDictionary, codes: System.Array[SavableScriptCode]) -> None: ...
    @overload
    def ToString() -> str: ...

class Categories(enum.Enum):
    Temporary = 0
    ReflectedTypes = 1
    Exceptions = 2
    Properties = 3
    Fields = 4
    Methods = 5
    Compiler = 6
    DelegateCreate = 7
    DictInvoke = 8
    OperatorInvoke = 9
    OverAllocate = 10
    Rules = 11
    RuleEvaluation = 12
    Binding = 13
    BindingSlow = 14
    BindingFast = 15
    BindingTarget = 16
    Count = 17

# endregion
