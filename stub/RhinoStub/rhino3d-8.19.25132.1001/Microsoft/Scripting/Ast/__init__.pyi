"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Utils", "BlockBuilder", "ExpressionCollectionBuilder", "FinallyFlowControlExpression", "GeneratorExpression", "IfStatementBuilder", "IfStatementTest", "ILightExceptionAwareExpression", "LambdaBuilder", "LightDynamicExpression", "LightDynamicExpression1", "LightTypedDynamicExpression1", "LightDynamicExpression2", "LightTypedDynamicExpression2", "LightDynamicExpression3", "LightDynamicExpression4", "LightTypedDynamicExpression4", "LightTypedDynamicExpressionN", "LightLambdaExpression", "LightExpression", "TryStatementBuilder", "ExpressionAccess", "YieldExpression"]
# endregion

# region: Imports
from Microsoft import Scripting
from Microsoft.Scripting import Interpreter
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class Utils(object):
    """    """
    @overload
    @staticmethod
    def AddDebugInfo(expression: Expressions.Expression, document: Expressions.SymbolDocumentInfo, start: Scripting.SourceLocation, end: Scripting.SourceLocation) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def AddDebugInfo(expression: Expressions.Expression, document: Expressions.SymbolDocumentInfo, startLine: int, startColumn: int, endLine: int, endColumn: int) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Box(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Coalesce(left: Expressions.Expression, right: Expressions.Expression) -> (Expressions.Expression, Expressions.ParameterExpression): ...
    @overload
    @staticmethod
    def Coalesce(builder: LambdaBuilder, left: Expressions.Expression, right: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def CoalesceFalse(left: Expressions.Expression, right: Expressions.Expression, isTrue: Reflection.MethodInfo) -> (Expressions.Expression, Expressions.ParameterExpression): ...
    @overload
    @staticmethod
    def CoalesceFalse(builder: LambdaBuilder, left: Expressions.Expression, right: Expressions.Expression, isTrue: Reflection.MethodInfo) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def CoalesceTrue(left: Expressions.Expression, right: Expressions.Expression, isTrue: Reflection.MethodInfo) -> (Expressions.Expression, Expressions.ParameterExpression): ...
    @overload
    @staticmethod
    def CoalesceTrue(builder: LambdaBuilder, left: Expressions.Expression, right: Expressions.Expression, isTrue: Reflection.MethodInfo) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def ComplexCallHelper(method: Reflection.MethodInfo, arguments: Expressions.System.Array[Expressions.Expression]) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def ComplexCallHelper(instance: Expressions.Expression, method: Reflection.MethodInfo, arguments: Expressions.System.Array[Expressions.Expression]) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Constant(value: object) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Constant(value: object, type_: System.Type) -> Expressions.ConstantExpression: ...
    @overload
    @staticmethod
    def Convert(expression: Expressions.Expression, type_: System.Type) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def DebugMark(expression: Expressions.Expression, marker: str) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def DebugMarker(marker: str) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Default(type_: System.Type) -> Expressions.DefaultExpression: ...
    @overload
    @staticmethod
    def Empty() -> Expressions.DefaultExpression: ...
    @overload
    @staticmethod
    def FinallyFlowControl(body: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Generator(label: Expressions.LabelTarget, body: Expressions.Expression) -> GeneratorExpression: ...
    @overload
    @staticmethod
    def Generator(label: Expressions.LabelTarget, body: Expressions.Expression, type_: System.Type) -> GeneratorExpression: ...
    @overload
    @staticmethod
    def Generator(name: str, label: Expressions.LabelTarget, body: Expressions.Expression, type_: System.Type) -> GeneratorExpression: ...
    @overload
    @staticmethod
    def Generator(name: str, label: Expressions.LabelTarget, body: Expressions.Expression, type_: System.Type, rewriteAssignments: bool) -> GeneratorExpression: ...
    @overload
    @staticmethod
    def GeneratorLambda(label: Expressions.LabelTarget, body: Expressions.Expression, parameters: Expressions.System.Array[Expressions.ParameterExpression]) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def GeneratorLambda(label: Expressions.LabelTarget, body: Expressions.Expression, name: str, parameters: Expressions.System.Array[Expressions.ParameterExpression]) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def GeneratorLambda(label: Expressions.LabelTarget, body: Expressions.Expression, name: str, parameters: Generic.IEnumerable) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def GeneratorLambda(delegateType: System.Type, label: Expressions.LabelTarget, body: Expressions.Expression, parameters: Expressions.System.Array[Expressions.ParameterExpression]) -> Expressions.LambdaExpression: ...
    @overload
    @staticmethod
    def GeneratorLambda(delegateType: System.Type, label: Expressions.LabelTarget, body: Expressions.Expression, name: str, parameters: Expressions.System.Array[Expressions.ParameterExpression]) -> Expressions.LambdaExpression: ...
    @overload
    @staticmethod
    def GeneratorLambda(delegateType: System.Type, label: Expressions.LabelTarget, body: Expressions.Expression, name: str, parameters: Generic.IEnumerable) -> Expressions.LambdaExpression: ...
    @overload
    @staticmethod
    def GeneratorLambda(delegateType: System.Type, label: Expressions.LabelTarget, body: Expressions.Expression, name: str, rewriteAssignments: bool, parameters: Generic.IEnumerable) -> Expressions.LambdaExpression: ...
    @overload
    @staticmethod
    def GetLValueAccess(type_: Expressions.ExpressionType) -> ExpressionAccess: ...
    @overload
    @staticmethod
    def If() -> IfStatementBuilder: ...
    @overload
    @staticmethod
    def If(tests: System.Array[IfStatementTest], else_: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def If(test: Expressions.Expression, body: Expressions.System.Array[Expressions.Expression]) -> IfStatementBuilder: ...
    @overload
    @staticmethod
    def If(test: Expressions.Expression, body: Expressions.Expression) -> IfStatementBuilder: ...
    @overload
    @staticmethod
    def IfCondition(test: Expressions.Expression, body: Expressions.Expression) -> IfStatementTest: ...
    @overload
    @staticmethod
    def IfThen(test: Expressions.Expression, body: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def IfThen(test: Expressions.Expression, body: Expressions.System.Array[Expressions.Expression]) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def IfThenElse(test: Expressions.Expression, body: Expressions.Expression, else_: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Infinite(body: Expressions.Expression) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def Infinite(body: Expressions.Expression, break_: Expressions.LabelTarget, continue_: Expressions.LabelTarget) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def IsAssignment(type_: Expressions.ExpressionType) -> bool: ...
    @overload
    @staticmethod
    def IsLValue(type_: Expressions.ExpressionType) -> bool: ...
    @overload
    @staticmethod
    def IsReadWriteAssignment(type_: Expressions.ExpressionType) -> bool: ...
    @overload
    @staticmethod
    def IsWriteOnlyAssignment(type_: Expressions.ExpressionType) -> bool: ...
    @overload
    @staticmethod
    def Lambda(returnType: System.Type, name: str) -> LambdaBuilder: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arg0: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arguments: Generic.IList) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arguments: ExpressionCollectionBuilder) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arg0: Expressions.Expression, arg1: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arguments: Generic.IList) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arguments: ExpressionCollectionBuilder) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arg0: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arg0: Expressions.Expression, arg1: Expressions.Expression, arg2: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arg0: Expressions.Expression, arg1: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arg0: Expressions.Expression, arg1: Expressions.Expression, arg2: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, arg0: Expressions.Expression, arg1: Expressions.Expression, arg2: Expressions.Expression, arg3: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightDynamic(binder: CompilerServices.CallSiteBinder, returnType: System.Type, arg0: Expressions.Expression, arg1: Expressions.Expression, arg2: Expressions.Expression, arg3: Expressions.Expression) -> LightDynamicExpression: ...
    @overload
    @staticmethod
    def LightLambda(retType: System.Type, body: Expressions.Expression, name: str, args: Generic.IList) -> LightExpression: ...
    @overload
    @staticmethod
    def LightLambda(retType: System.Type, delegateType: System.Type, body: Expressions.Expression, name: str, args: Generic.IList) -> LightLambdaExpression: ...
    @overload
    @staticmethod
    def Loop(test: Expressions.Expression, increment: Expressions.Expression, body: Expressions.Expression, else_: Expressions.Expression) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def Loop(test: Expressions.Expression, increment: Expressions.Expression, body: Expressions.Expression, else_: Expressions.Expression, break_: Expressions.LabelTarget, continue_: Expressions.LabelTarget) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def MakeYield(target: Expressions.LabelTarget, value: Expressions.Expression, yieldMarker: int) -> YieldExpression: ...
    @overload
    @staticmethod
    def NewArrayHelper(type_: System.Type, initializers: Generic.IEnumerable) -> Expressions.NewArrayExpression: ...
    @overload
    @staticmethod
    def SimpleCallHelper(method: Reflection.MethodInfo, arguments: Expressions.System.Array[Expressions.Expression]) -> Expressions.MethodCallExpression: ...
    @overload
    @staticmethod
    def SimpleCallHelper(instance: Expressions.Expression, method: Reflection.MethodInfo, arguments: Expressions.System.Array[Expressions.Expression]) -> Expressions.MethodCallExpression: ...
    @overload
    @staticmethod
    def SimpleNewHelper(constructor: Reflection.ConstructorInfo, arguments: Expressions.System.Array[Expressions.Expression]) -> Expressions.NewExpression: ...
    @overload
    @staticmethod
    def Try(body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    @staticmethod
    def Try(body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    @staticmethod
    def Try(expr0: Expressions.Expression, expr1: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    @staticmethod
    def Try(expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    @staticmethod
    def Try(expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression, expr3: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    @staticmethod
    def Unless(test: Expressions.Expression, body: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Update(expression: Expressions.BinaryExpression, left: Expressions.Expression, right: Expressions.Expression) -> Expressions.BinaryExpression: ...
    @overload
    @staticmethod
    def Void(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def WeakConstant(value: object) -> Expressions.MemberExpression: ...
    @overload
    @staticmethod
    def While(test: Expressions.Expression, body: Expressions.Expression, else_: Expressions.Expression) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def While(test: Expressions.Expression, body: Expressions.Expression, else_: Expressions.Expression, break_: Expressions.LabelTarget, continue_: Expressions.LabelTarget) -> Expressions.LoopExpression: ...
    @overload
    @staticmethod
    def YieldBreak(target: Expressions.LabelTarget) -> YieldExpression: ...
    @overload
    @staticmethod
    def YieldReturn(target: Expressions.LabelTarget, value: Expressions.Expression) -> YieldExpression: ...
    @overload
    @staticmethod
    def YieldReturn(target: Expressions.LabelTarget, value: Expressions.Expression, yieldMarker: int) -> YieldExpression: ...

class BlockBuilder(ExpressionCollectionBuilder):
    """    """
    def __init__(self): ...
    @overload
    def ToExpression() -> Expressions.Expression: ...

class ExpressionCollectionBuilder(object):
    """    ExpressionCollectionBuilder[TExpression]
    """
    def __init__(self): ...
    @overload
    def Add(self, expressions: Generic.IEnumerable) -> None: ...
    @overload
    def Add(self, item: TExpression) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: TExpression) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[TExpression], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Expression0(self) -> TExpression: ...
    @property
    def Expression1(self) -> TExpression: ...
    @property
    def Expression2(self) -> TExpression: ...
    @property
    def Expression3(self) -> TExpression: ...
    @property
    def Expressions(self) -> CompilerServices.ReadOnlyCollectionBuilder: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, item: TExpression) -> bool: ...

class ExpressionCollectionBuilder(ExpressionCollectionBuilder):
    """    """
    def __init__(self): ...
    @overload
    def ToMethodCall(self, instance: Expressions.Expression, method: Reflection.MethodInfo) -> Expressions.Expression: ...

class FinallyFlowControlExpression(Expressions.Expression):
    """    """
    @property
    def Body(self) -> Expressions.Expression: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def NodeType(self) -> Expressions.ExpressionType: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class GeneratorExpression(Expressions.Expression):
    """    """
    @property
    def Body(self) -> Expressions.Expression: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> Expressions.ExpressionType: ...
    @property
    def RewriteAssignments(self) -> bool: ...
    @property
    def Target(self) -> Expressions.LabelTarget: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class IfStatementBuilder(object):
    """    """
    @overload
    def Else(self, body: Expressions.System.Array[Expressions.Expression]) -> Expressions.Expression: ...
    @overload
    def Else(self, body: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    def ElseIf(self, test: Expressions.Expression, body: Expressions.System.Array[Expressions.Expression]) -> IfStatementBuilder: ...
    @overload
    def ElseIf(self, test: Expressions.Expression, body: Expressions.Expression) -> IfStatementBuilder: ...
    @overload
    def ToStatement() -> Expressions.Expression: ...

class IfStatementTest(object):
    """    """
    @property
    def Body(self) -> Expressions.Expression: ...
    @property
    def Test(self) -> Expressions.Expression: ...

class ILightExceptionAwareExpression:
    """    """
    @overload
    def ReduceForLightExceptions() -> Expressions.Expression: ...

class LambdaBuilder(object):
    """    """
    @overload
    def AddHiddenVariable(self, temp: Expressions.ParameterExpression) -> None: ...
    @overload
    def AddParameters(self, parameters: Expressions.System.Array[Expressions.ParameterExpression]) -> None: ...
    @overload
    def ClosedOverParameter(self, type_: System.Type, name: str) -> Expressions.ParameterExpression: ...
    @overload
    def ClosedOverVariable(self, type_: System.Type, name: str) -> Expressions.Expression: ...
    @overload
    def CreateHiddenParameter(self, name: str, type_: System.Type) -> Expressions.ParameterExpression: ...
    @overload
    def CreateParamsArray(self, type_: System.Type, name: str) -> Expressions.ParameterExpression: ...
    @property
    def Body(self) -> Expressions.Expression: ...
    @property
    def Dictionary(self) -> bool: ...
    @property
    def Locals(self) -> Generic.List: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> Generic.List: ...
    @property
    def ParamsArray(self) -> Expressions.ParameterExpression: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetVisibleVariables() -> Generic.List: ...
    @overload
    def HiddenVariable(self, type_: System.Type, name: str) -> Expressions.ParameterExpression: ...
    @overload
    def MakeGenerator(self, label: Expressions.LabelTarget, lambdaType: System.Type) -> Expressions.LambdaExpression: ...
    @overload
    def MakeLambda() -> Expressions.LambdaExpression: ...
    @overload
    def MakeLambda(self, lambdaType: System.Type) -> Expressions.LambdaExpression: ...
    @overload
    def Parameter(self, type_: System.Type, name: str) -> Expressions.ParameterExpression: ...
    @Body.setter
    def Body(self, value: System.Void): ...
    @Dictionary.setter
    def Dictionary(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @ReturnType.setter
    def ReturnType(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def Variable(self, type_: System.Type, name: str) -> Expressions.Expression: ...

class LightDynamicExpression(Expressions.Expression):
    """    """
    @overload
    def AddInstructions(self, compiler: Interpreter.LightCompiler) -> None: ...
    @property
    def Binder(self) -> CompilerServices.CallSiteBinder: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def NodeType(self) -> Expressions.ExpressionType: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightDynamicExpression1(LightDynamicExpression):
    """    """
    @property
    def Argument0(self) -> Expressions.Expression: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightTypedDynamicExpression1(LightDynamicExpression1):
    """    """
    @property
    def Type(self) -> System.Type: ...

class LightDynamicExpression2(LightDynamicExpression):
    """    """
    @property
    def Argument0(self) -> Expressions.Expression: ...
    @property
    def Argument1(self) -> Expressions.Expression: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightTypedDynamicExpression2(LightDynamicExpression2):
    """    """
    @property
    def Type(self) -> System.Type: ...

class LightDynamicExpression3(LightDynamicExpression):
    """    """
    @property
    def Argument0(self) -> Expressions.Expression: ...
    @property
    def Argument1(self) -> Expressions.Expression: ...
    @property
    def Argument2(self) -> Expressions.Expression: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightDynamicExpression4(LightDynamicExpression):
    """    """
    @property
    def Argument0(self) -> Expressions.Expression: ...
    @property
    def Argument1(self) -> Expressions.Expression: ...
    @property
    def Argument2(self) -> Expressions.Expression: ...
    @property
    def Argument3(self) -> Expressions.Expression: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightTypedDynamicExpression4(LightDynamicExpression4):
    """    """
    @property
    def Type(self) -> System.Type: ...

class LightTypedDynamicExpressionN(LightDynamicExpression):
    """    """
    @property
    def Arguments(self) -> Generic.IList: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightLambdaExpression(Expressions.Expression):
    """    """
    @overload
    def Compile() -> System.Delegate: ...
    @overload
    def Compile(self, compilationThreshold: int) -> System.Delegate: ...
    @property
    def Body(self) -> Expressions.Expression: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> Expressions.ExpressionType: ...
    @property
    def Parameters(self) -> Generic.IList: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def Reduce() -> Expressions.Expression: ...

class LightExpression(LightLambdaExpression):
    """    LightExpression[T]
    """
    @overload
    def Compile() -> T: ...
    @overload
    def Compile(self, compilationThreshold: int) -> T: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def ReduceToLambda() -> Expressions.Expression: ...

class TryStatementBuilder(object):
    """    """
    @overload
    def Catch(self, type_: System.Type, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, type_: System.Type, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Catch(self, holder: Expressions.ParameterExpression, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Catch(self, holder: Expressions.ParameterExpression, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, type_: System.Type, expr0: Expressions.Expression, expr1: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, holder: Expressions.ParameterExpression, expr0: Expressions.Expression, expr1: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, type_: System.Type, expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, holder: Expressions.ParameterExpression, expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, type_: System.Type, expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression, expr3: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Catch(self, holder: Expressions.ParameterExpression, expr0: Expressions.Expression, expr1: Expressions.Expression, expr2: Expressions.Expression, expr3: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Fault(self, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Filter(self, holder: Expressions.ParameterExpression, condition: Expressions.Expression, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Filter(self, holder: Expressions.ParameterExpression, condition: Expressions.Expression, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Filter(self, type_: System.Type, condition: Expressions.Expression, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Filter(self, type_: System.Type, condition: Expressions.Expression, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def Finally(self, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def Finally(self, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def FinallyWithJumps(self, body: Expressions.System.Array[Expressions.Expression]) -> TryStatementBuilder: ...
    @overload
    def FinallyWithJumps(self, body: Expressions.Expression) -> TryStatementBuilder: ...
    @overload
    def ToExpression() -> Expressions.Expression: ...

class ExpressionAccess(enum.Enum):
    None_ = 0
    Read = 1
    Write = 2
    ReadWrite = 3

class YieldExpression(Expressions.Expression):
    """    """
    @property
    def CanReduce(self) -> bool: ...
    @property
    def NodeType(self) -> Expressions.ExpressionType: ...
    @property
    def Target(self) -> Expressions.LabelTarget: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Value(self) -> Expressions.Expression: ...
    @property
    def YieldMarker(self) -> int: ...

# endregion
