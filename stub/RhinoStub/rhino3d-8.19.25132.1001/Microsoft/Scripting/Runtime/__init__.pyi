"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ScriptingRuntimeHelpers", "IExpressionSerializable", "ArgumentArray", "BinderOps", "BinderType", "BindingRestrictionsHelpers", "DlrMainCallTarget", "CallTypes", "Cast", "CodeDomCodeGen", "CompilerContext", "CustomStringDictionary", "DelegateInfo", "DlrCachedCodeAttribute", "CachedOptimizedCodeAttribute", "DocumentationAttribute", "DynamicDelegateCreator", "DynamicNull", "ExceptionHelpers", "ExplicitConversionMethodAttribute", "Extensible", "ExtensionTypeAttribute", "IDebuggableGenerator", "GeneratorNext", "IConvertibleMetaObject", "IdDispenser", "IMembersList", "ImplicitConversionMethodAttribute", "IRestrictedMetaObject", "ISlice", "LightExceptions", "LightThrowingAttribute", "LocalsDictionary", "MetaObjectExtensions", "ModuleChangeEventArgs", "ModuleChangeType", "NullTextContentProvider", "OperationFailed", "OperatorSlotAttribute", "PositionTrackingWriter", "PropertyMethodAttribute", "ReflectionCache", "RestrictedMetaObject", "StaticExtensionMethodAttribute", "TokenizerBuffer", "Uninitialized", "MethodBaseCache"]
# endregion

# region: Imports
from Microsoft import Scripting
from Microsoft.Scripting import Actions
from System import CodeDom
from System import Collections
from System import Dynamic
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ContextId", "DlrConfiguration", "DocumentationProvider", "DynamicOperations", "DynamicRuntimeHostingProvider", "DynamicStackFrame", "LanguageContext", "NotNullAttribute", "NotNullItemsAttribute", "ObjectDictionaryExpando", "ParserSink", "Scope", "ScopeExtension", "ScriptDomainManager", "SharedIO", "StringDictionaryExpando", "TokenizerService"]
# endregion

# region: Imports
from Microsoft import Scripting
from Microsoft.Scripting import Utils
from System import CodeDom
from System import Dynamic
from System import IO
from System import Reflection
from System import Text
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Microsoft.Scripting, Version=1.3.1.0

class ContextId(System.ValueType):
    """    """
    @property
    def Empty(self) -> ContextId: ...
    @overload
    def Equals(self, other: ContextId) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def LookupContext(identifier: object) -> ContextId: ...
    @overload
    @staticmethod
    def RegisterContext(identifier: object) -> ContextId: ...

class DlrConfiguration(object):
    """    """
    def __init__(self, debugMode: bool, privateBinding: bool, options: Generic.IDictionary): ...
    @property
    def FileExtensionComparer(self) -> System.StringComparer: ...
    @property
    def LanguageNameComparer(self) -> System.StringComparer: ...
    @property
    def OptionNameComparer(self) -> System.StringComparer: ...
    @overload
    def AddLanguage(self, languageTypeName: str, displayName: str, names: Generic.IList, fileExtensions: Generic.IList, options: Generic.IDictionary) -> None: ...
    @property
    def DebugMode(self) -> bool: ...
    @property
    def PrivateBinding(self) -> bool: ...
    @overload
    def GetFileExtensions() -> System.System.Array[str]: ...
    @overload
    def GetFileExtensions(self, context: LanguageContext) -> System.System.Array[str]: ...
    @overload
    def GetLanguageNames() -> System.System.Array[str]: ...
    @overload
    def GetLanguageNames(self, context: LanguageContext) -> System.System.Array[str]: ...

class DocumentationProvider(object):
    """    """
    @overload
    def GetMembers(self, value: object) -> Generic.ICollection: ...
    @overload
    def GetOverloads(self, value: object) -> Generic.ICollection: ...

class DynamicOperations(object):
    """    """
    def __init__(self, lc: LanguageContext): ...
    @overload
    def ContainsMember(self, obj: object, name: str) -> bool: ...
    @overload
    def ContainsMember(self, obj: object, name: str, ignoreCase: bool) -> bool: ...
    @overload
    def ConvertTo(self, obj: object) -> T: ...
    @overload
    def ConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def CreateInstance(self, obj: object, parameters: System.System.Array[object]) -> object: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: TTarget) -> TResult: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: TTarget, other: TOther) -> TResult: ...
    @overload
    def ExplicitConvertTo(self, obj: object) -> T: ...
    @overload
    def ExplicitConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def Format(self, obj: object) -> str: ...
    @overload
    def GetCallSignatures(self, o: object) -> Generic.IList: ...
    @overload
    def GetDocumentation(self, o: object) -> str: ...
    @overload
    def GetMember(self, obj: object, name: str) -> object: ...
    @overload
    def GetMember(self, obj: object, name: str) -> T: ...
    @overload
    def GetMember(self, obj: object, name: str, ignoreCase: bool) -> T: ...
    @overload
    def GetMember(self, obj: object, name: str, ignoreCase: bool) -> object: ...
    @overload
    def GetMemberNames(self, obj: object) -> Generic.IList: ...
    @overload
    def GetOrCreateActionSite(self, siteBinder: CompilerServices.CallSiteBinder) -> CompilerServices.CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CompilerServices.CallSiteBinder) -> CompilerServices.CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CompilerServices.CallSiteBinder) -> CompilerServices.CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CompilerServices.CallSiteBinder) -> CompilerServices.CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CompilerServices.CallSiteBinder) -> CompilerServices.CallSite: ...
    @overload
    def ImplicitConvertTo(self, obj: object) -> T: ...
    @overload
    def ImplicitConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def Invoke(self, obj: object, parameters: System.System.Array[object]) -> object: ...
    @overload
    def InvokeMember(self, obj: object, memberName: str, parameters: System.System.Array[object]) -> object: ...
    @overload
    def InvokeMember(self, obj: object, memberName: str, ignoreCase: bool, parameters: System.System.Array[object]) -> object: ...
    @overload
    def IsCallable(self, o: object) -> bool: ...
    @overload
    def RemoveMember(self, obj: object, name: str) -> None: ...
    @overload
    def RemoveMember(self, obj: object, name: str, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: object) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: T) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: T, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: object, ignoreCase: bool) -> None: ...
    @overload
    def TryConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...
    @overload
    def TryExplicitConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryExplicitConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...
    @overload
    def TryGetMember(self, obj: object, name: str) -> (bool, object): ...
    @overload
    def TryGetMember(self, obj: object, name: str, ignoreCase: bool) -> (bool, object): ...
    @overload
    def TryImplicitConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryImplicitConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...

class DynamicRuntimeHostingProvider(object):
    """    """
    @property
    def PlatformAdaptationLayer(self) -> Scripting.PlatformAdaptationLayer: ...

class DynamicStackFrame(object):
    """    """
    def __init__(self, method: Reflection.MethodBase, funcName: str, filename: str, line: int): ...
    @overload
    def GetFileLineNumber() -> int: ...
    @overload
    def GetFileName() -> str: ...
    @overload
    def GetMethod() -> Reflection.MethodBase: ...
    @overload
    def GetMethodName() -> str: ...
    @overload
    def ToString() -> str: ...

class LanguageContext(object):
    """    """
    @overload
    def CompileSourceCode(self, sourceUnit: Scripting.SourceUnit, options: Scripting.CompilerOptions, errorSink: Scripting.ErrorSink) -> Scripting.ScriptCode: ...
    @overload
    def CreateBinaryOperationBinder(self, operation: Expressions.ExpressionType) -> Dynamic.BinaryOperationBinder: ...
    @overload
    def CreateCallBinder(self, name: str, ignoreCase: bool, callInfo: Dynamic.CallInfo) -> Dynamic.InvokeMemberBinder: ...
    @overload
    def CreateConvertBinder(self, toType: System.Type, explicitCast: System.Nullable) -> Dynamic.ConvertBinder: ...
    @overload
    def CreateCreateBinder(self, callInfo: Dynamic.CallInfo) -> Dynamic.CreateInstanceBinder: ...
    @overload
    def CreateDeleteMemberBinder(self, name: str, ignoreCase: bool) -> Dynamic.DeleteMemberBinder: ...
    @overload
    def CreateFileUnit(self, path: str) -> Scripting.SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, encoding: Text.Encoding) -> Scripting.SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, content: str) -> Scripting.SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, encoding: Text.Encoding, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @overload
    def CreateGetMemberBinder(self, name: str, ignoreCase: bool) -> Dynamic.GetMemberBinder: ...
    @overload
    def CreateInvokeBinder(self, callInfo: Dynamic.CallInfo) -> Dynamic.InvokeBinder: ...
    @overload
    def CreateScope() -> Scope: ...
    @overload
    def CreateScope(self, dictionary: Generic.IDictionary) -> Scope: ...
    @overload
    def CreateScope(self, storage: Dynamic.IDynamicMetaObjectProvider) -> Scope: ...
    @overload
    def CreateScopeExtension(self, scope: Scope) -> ScopeExtension: ...
    @overload
    def CreateSetMemberBinder(self, name: str, ignoreCase: bool) -> Dynamic.SetMemberBinder: ...
    @overload
    def CreateSnippet(self, code: str, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @overload
    def CreateSnippet(self, code: str, id_: str, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @overload
    def CreateSourceUnit(self, contentProvider: Scripting.TextContentProvider, path: str, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @overload
    def CreateSourceUnit(self, contentProvider: Scripting.StreamContentProvider, path: str, encoding: Text.Encoding, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @overload
    def CreateUnaryOperationBinder(self, operation: Expressions.ExpressionType) -> Dynamic.UnaryOperationBinder: ...
    @overload
    def EnsureScopeExtension(self, scope: Scope) -> ScopeExtension: ...
    @overload
    def ExecuteProgram(self, program: Scripting.SourceUnit) -> int: ...
    @overload
    def FormatException(self, exception: System.Exception) -> str: ...
    @overload
    def FormatObject(self, operations: DynamicOperations, obj: object) -> str: ...
    @overload
    def GenerateSourceCode(self, codeDom: CodeDom.CodeObject, path: str, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...
    @property
    def CanCreateSourceCode(self) -> bool: ...
    @property
    def ContextId(self) -> ContextId: ...
    @property
    def DefaultEncoding(self) -> Text.Encoding: ...
    @property
    def DomainManager(self) -> ScriptDomainManager: ...
    @property
    def LanguageGuid(self) -> System.Guid: ...
    @property
    def LanguageVersion(self) -> System.Version: ...
    @property
    def Operations(self) -> DynamicOperations: ...
    @property
    def Options(self) -> Scripting.LanguageOptions: ...
    @property
    def VendorGuid(self) -> System.Guid: ...
    @overload
    def GetCallSignatures(self, obj: object) -> Generic.IList: ...
    @overload
    def GetCompilerErrorSink() -> Scripting.ErrorSink: ...
    @overload
    def GetCompilerOptions() -> Scripting.CompilerOptions: ...
    @overload
    def GetCompilerOptions(self, scope: Scope) -> Scripting.CompilerOptions: ...
    @overload
    def GetDocumentation(self, obj: object) -> str: ...
    @overload
    def GetExceptionMessage(self, exception: System.Exception) -> (str, str): ...
    @overload
    def GetMemberNames(self, obj: object) -> Generic.IList: ...
    @overload
    def GetScope(self, path: str) -> Scope: ...
    @overload
    def GetSearchPaths() -> Generic.ICollection: ...
    @overload
    def GetService(self, args: System.System.Array[object]) -> TService: ...
    @overload
    def GetSourceReader(self, stream: IO.Stream, defaultEncoding: Text.Encoding, path: str) -> Scripting.SourceCodeReader: ...
    @overload
    def GetStackFrames(self, exception: System.Exception) -> Generic.IList: ...
    @overload
    def IsCallable(self, obj: object) -> bool: ...
    @overload
    def LoadCompiledCode(self, method: System.Delegate, path: str, customData: str) -> Scripting.ScriptCode: ...
    @overload
    def ScopeGetVariable(self, scope: Scope, name: str) -> object: ...
    @overload
    def ScopeGetVariable(self, scope: Scope, name: str) -> T: ...
    @overload
    def ScopeSetVariable(self, scope: Scope, name: str, value: object) -> None: ...
    @overload
    def ScopeTryGetVariable(self, scope: Scope, name: str) -> (bool, object): ...
    @overload
    def SetSearchPaths(self, paths: Generic.ICollection) -> None: ...
    @overload
    def Shutdown() -> None: ...

class NotNullAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class NotNullItemsAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ObjectDictionaryExpando(object):
    """    """
    def __init__(self, dictionary: Generic.IDictionary): ...
    @property
    def Dictionary(self) -> Generic.IDictionary: ...

class ParserSink(object):
    """    """
    def __init__(self): ...
    @property
    def Null(self) -> ParserSink: ...
    @overload
    def EndParameters(self, span: Scripting.SourceSpan) -> None: ...
    @overload
    def MatchPair(self, opening: Scripting.SourceSpan, closing: Scripting.SourceSpan, priority: int) -> None: ...
    @overload
    def MatchTriple(self, opening: Scripting.SourceSpan, middle: Scripting.SourceSpan, closing: Scripting.SourceSpan, priority: int) -> None: ...
    @overload
    def NextParameter(self, span: Scripting.SourceSpan) -> None: ...
    @overload
    def QualifyName(self, selector: Scripting.SourceSpan, span: Scripting.SourceSpan, name: str) -> None: ...
    @overload
    def StartName(self, span: Scripting.SourceSpan, name: str) -> None: ...
    @overload
    def StartParameters(self, context: Scripting.SourceSpan) -> None: ...

class Scope(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dictionary: Generic.IDictionary): ...
    @overload
    def __init__(self, storage: Dynamic.IDynamicMetaObjectProvider): ...
    @property
    def Storage(self) -> object: ...
    @overload
    def GetExtension(self, languageContextId: ContextId) -> ScopeExtension: ...
    @overload
    def SetExtension(self, languageContextId: ContextId, extension: ScopeExtension) -> ScopeExtension: ...

class ScopeExtension(object):
    """    """
    def __init__(self, scope: Scope): ...
    @property
    def EmptyArray(self) -> System.Array[ScopeExtension]: ...
    @property
    def Scope(self) -> Scope: ...

class ScriptDomainManager(object):
    """    """
    def __init__(self, hostingProvider: DynamicRuntimeHostingProvider, configuration: DlrConfiguration): ...
    @property
    def Configuration(self) -> DlrConfiguration: ...
    @property
    def Globals(self) -> Scope: ...
    @property
    def Host(self) -> DynamicRuntimeHostingProvider: ...
    @property
    def Platform(self) -> Scripting.PlatformAdaptationLayer: ...
    @property
    def SharedIO(self) -> SharedIO: ...
    @overload
    def GetLanguage(self, providerType: System.Type) -> LanguageContext: ...
    @overload
    def GetLanguageByExtension(self, fileExtension: str) -> LanguageContext: ...
    @overload
    def GetLanguageByName(self, languageName: str) -> LanguageContext: ...
    @overload
    def GetLanguageByTypeName(self, providerAssemblyQualifiedTypeName: str) -> LanguageContext: ...
    @overload
    def GetLoadedAssemblyList() -> Generic.IList: ...
    @overload
    def LoadAssembly(self, assembly: Reflection.Assembly) -> bool: ...
    @Globals.setter
    def Globals(self, value: System.Void): ...
    @overload
    def TryGetLanguage(self, languageName: str) -> (bool, LanguageContext): ...
    @overload
    def TryGetLanguageByFileExtension(self, fileExtension: str) -> (bool, LanguageContext): ...
    @property
    def AssemblyLoaded(self): ...

class SharedIO(object):
    """    """
    @property
    def ErrorEncoding(self) -> Text.Encoding: ...
    @property
    def ErrorStream(self) -> IO.Stream: ...
    @property
    def ErrorWriter(self) -> IO.TextWriter: ...
    @property
    def InputEncoding(self) -> Text.Encoding: ...
    @property
    def InputReader(self) -> IO.TextReader: ...
    @property
    def InputStream(self) -> IO.Stream: ...
    @property
    def OutputEncoding(self) -> Text.Encoding: ...
    @property
    def OutputStream(self) -> IO.Stream: ...
    @property
    def OutputWriter(self) -> IO.TextWriter: ...
    @overload
    def GetEncoding(self, type_: Utils.ConsoleStreamType) -> Text.Encoding: ...
    @overload
    def GetReader() -> (IO.TextReader, Text.Encoding): ...
    @overload
    def GetStream(self, type_: Utils.ConsoleStreamType) -> IO.Stream: ...
    @overload
    def GetStreamProxy(self, type_: Utils.ConsoleStreamType) -> IO.Stream: ...
    @overload
    def GetWriter(self, type_: Utils.ConsoleStreamType) -> IO.TextWriter: ...
    @overload
    def RedirectToConsole() -> None: ...
    @overload
    def SetErrorOutput(self, stream: IO.Stream, writer: IO.TextWriter) -> None: ...
    @overload
    def SetInput(self, stream: IO.Stream, reader: IO.TextReader, encoding: Text.Encoding) -> None: ...
    @overload
    def SetOutput(self, stream: IO.Stream, writer: IO.TextWriter) -> None: ...

class StringDictionaryExpando(object):
    """    """
    def __init__(self, data: Generic.IDictionary): ...
    @property
    def Dictionary(self) -> Generic.IDictionary: ...

class TokenizerService(object):
    """    """
    @property
    def CurrentPosition(self) -> Scripting.SourceLocation: ...
    @property
    def CurrentState(self) -> object: ...
    @property
    def ErrorSink(self) -> Scripting.ErrorSink: ...
    @property
    def IsRestartable(self) -> bool: ...
    @overload
    def Initialize(self, state: object, sourceReader: IO.TextReader, sourceUnit: Scripting.SourceUnit, initialLocation: Scripting.SourceLocation) -> None: ...
    @overload
    def ReadToken() -> Scripting.TokenInfo: ...
    @overload
    def ReadTokens(self, characterCount: int) -> Generic.IEnumerable: ...
    @ErrorSink.setter
    def ErrorSink(self, value: System.Void): ...
    @overload
    def SkipToken() -> bool: ...
    @overload
    def SkipTokens(self, countOfChars: int) -> bool: ...

# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class ScriptingRuntimeHelpers(object):
    """    """
    @property
    def True_(self) -> object: ...
    @property
    def False_(self) -> object: ...
    @overload
    @staticmethod
    def BooleanToObject(value: bool) -> object: ...
    @overload
    @staticmethod
    def CannotConvertError(toType: System.Type, value: object) -> System.Exception: ...
    @overload
    @staticmethod
    def CharToString(ch: System.Char) -> str: ...
    @overload
    @staticmethod
    def CheckDictionaryMembers(dict_: Collections.IDictionary, names: System.System.Array[str]) -> bool: ...
    @overload
    @staticmethod
    def CreateArray(args: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def CreateInstance() -> T: ...
    @overload
    @staticmethod
    def GetEventHandlerType(eventInfo: Reflection.EventInfo) -> System.Type: ...
    @overload
    @staticmethod
    def GetStringMembers(members: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def Int32ToObject(value: int) -> object: ...
    @overload
    @staticmethod
    def InterpretedCallSiteTest(restrictionResult: bool, bindingInfo: object) -> bool: ...
    @overload
    @staticmethod
    def MakeIncorrectBoxTypeError(type_: System.Type, received: object) -> System.Exception: ...
    @overload
    @staticmethod
    def ReadOnlyAssignError(field: bool, fieldName: str) -> object: ...
    @overload
    @staticmethod
    def SetEvent(eventTracker: Actions.EventTracker, value: object) -> None: ...
    @overload
    @staticmethod
    def ShiftParamsArray(array: System.Array[T], count: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def SimpleAttributeError(message: str) -> System.Exception: ...
    @overload
    @staticmethod
    def SimpleTypeError(message: str) -> Scripting.ArgumentTypeException: ...

class IExpressionSerializable:
    """    """
    @overload
    def CreateExpression() -> Expressions.Expression: ...

class ArgumentArray(object):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    @staticmethod
    def GetArg(array: ArgumentArray, index: int) -> object: ...
    @overload
    def GetArgument(self, index: int) -> object: ...
    @overload
    def GetMetaObject(self, parameter: Expressions.Expression, index: int) -> Dynamic.DynamicMetaObject: ...

class BinderOps(object):
    """    """
    @overload
    @staticmethod
    def BadArgumentsForOperation(op: Expressions.ExpressionType, args: System.System.Array[object]) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def CheckDictionaryMembers(dict_: Collections.IDictionary, names: System.System.Array[str], types: System.System.Array[System.Type]) -> bool: ...
    @overload
    @staticmethod
    def GetCombinedParameters(initialArgs: System.System.Array[object], additionalArgs: object) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def GetEventHandlerType(eventInfo: Reflection.EventInfo) -> System.Type: ...
    @overload
    @staticmethod
    def GetStringMembers(members: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def InvalidSplatteeError(name: str, typeName: str) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def InvokeConstructor(ci: Reflection.ConstructorInfo, args: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def InvokeMethod(mb: Reflection.MethodBase, obj: object, args: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def MakeDictionary(names: System.System.Array[str], values: System.System.Array[object]) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def MakeReadOnlyDictionary(names: System.System.Array[str], values: System.System.Array[object]) -> Generic.IReadOnlyDictionary: ...
    @overload
    @staticmethod
    def SetEvent(eventTracker: Actions.EventTracker, value: object) -> None: ...
    @overload
    @staticmethod
    def SimpleTypeError(message: str) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForDuplicateArgument(name: str, position: int, argumentName: str) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForDuplicateKeywordArgument(name: str, argumentName: str) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForExtraKeywordArgument(name: str, argumentName: str) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForIncorrectArgumentCount(name: str, expected: int, received: int) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForIncorrectArgumentCount(name: str, formalNormalArgumentCount: int, defaultArgumentCount: int, providedArgumentCount: int) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForIncorrectArgumentCount(methodName: str, formalNormalArgumentCount: int, defaultArgumentCount: int, providedArgumentCount: int, hasArgList: bool, keywordArgumentsProvided: bool) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForIncorrectArgumentCount(methodName: str, minFormalNormalArgumentCount: int, maxFormalNormalArgumentCount: int, defaultArgumentCount: int, providedArgumentCount: int, hasArgList: bool, keywordArgumentsProvided: bool) -> Scripting.ArgumentTypeException: ...
    @overload
    @staticmethod
    def TypeErrorForNonInferrableMethod(name: str) -> Scripting.ArgumentTypeException: ...

class BinderType(enum.Enum):
    Normal = 0
    BinaryOperator = 1
    ComparisonOperator = 2
    Constructor = 3

class BindingRestrictionsHelpers(object):
    """    """
    @overload
    @staticmethod
    def GetRuntimeTypeRestriction(obj: Dynamic.DynamicMetaObject) -> Dynamic.BindingRestrictions: ...
    @overload
    @staticmethod
    def GetRuntimeTypeRestriction(expr: Expressions.Expression, type_: System.Type) -> Dynamic.BindingRestrictions: ...

class DlrMainCallTarget(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, scope: Scope, context: LanguageContext, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> object: ...
    @overload
    def Invoke(self, scope: Scope, context: LanguageContext) -> object: ...

class CallTypes(enum.Enum):
    None_ = 0
    ImplicitInstance = 1

class Cast(object):
    """    """
    @overload
    @staticmethod
    def Explicit(o: object) -> T: ...
    @overload
    @staticmethod
    def Explicit(o: object, to: System.Type) -> object: ...
    @overload
    @staticmethod
    def ExplicitCastToBoolean(o: object) -> bool: ...
    @overload
    @staticmethod
    def ExplicitCastToByte(o: object) -> System.Byte: ...
    @overload
    @staticmethod
    def ExplicitCastToChar(o: object) -> System.Char: ...
    @overload
    @staticmethod
    def ExplicitCastToDecimal(o: object) -> System.Decimal: ...
    @overload
    @staticmethod
    def ExplicitCastToDouble(o: object) -> float: ...
    @overload
    @staticmethod
    def ExplicitCastToInt16(o: object) -> System.Int16: ...
    @overload
    @staticmethod
    def ExplicitCastToInt32(o: object) -> int: ...
    @overload
    @staticmethod
    def ExplicitCastToInt64(o: object) -> System.Int64: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableBoolean(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableByte(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableChar(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableDecimal(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableDouble(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableInt16(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableInt32(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableInt64(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableSByte(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableSingle(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableUInt16(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableUInt32(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToNullableUInt64(o: object) -> System.Nullable: ...
    @overload
    @staticmethod
    def ExplicitCastToSByte(o: object) -> System.SByte: ...
    @overload
    @staticmethod
    def ExplicitCastToSingle(o: object) -> System.Single: ...
    @overload
    @staticmethod
    def ExplicitCastToUInt16(o: object) -> System.UInt16: ...
    @overload
    @staticmethod
    def ExplicitCastToUInt32(o: object) -> System.UInt32: ...
    @overload
    @staticmethod
    def ExplicitCastToUInt64(o: object) -> System.UInt64: ...
    @overload
    @staticmethod
    def NewNullableInstance(type_: System.Type) -> object: ...

class CodeDomCodeGen(object):
    """    """
    @overload
    def GenerateCode(self, codeDom: CodeDom.CodeMemberMethod, context: LanguageContext, path: str, kind: Scripting.SourceCodeKind) -> Scripting.SourceUnit: ...

class CompilerContext(object):
    """    """
    @overload
    def __init__(self, sourceUnit: Scripting.SourceUnit, options: Scripting.CompilerOptions, errorSink: Scripting.ErrorSink): ...
    @overload
    def __init__(self, sourceUnit: Scripting.SourceUnit, options: Scripting.CompilerOptions, errorSink: Scripting.ErrorSink, parserSink: ParserSink): ...
    @property
    def Errors(self) -> Scripting.ErrorSink: ...
    @property
    def Options(self) -> Scripting.CompilerOptions: ...
    @property
    def ParserSink(self) -> ParserSink: ...
    @property
    def SourceUnit(self) -> Scripting.SourceUnit: ...

class CustomStringDictionary(object):
    """    """
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def Contains(self, key: object) -> bool: ...
    @overload
    def CopyTo(self, array: Generic.System.Array[Generic.KeyValuePair], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetExtraKeys() -> System.System.Array[str]: ...
    @overload
    def GetValueHashCode() -> int: ...
    @overload
    @staticmethod
    def IsNullObject(o: object) -> bool: ...
    @overload
    @staticmethod
    def NullToObj(o: object) -> object: ...
    @overload
    @staticmethod
    def ObjToNull(o: object) -> object: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def Remove(self, key: object) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: object) -> (bool, object): ...
    @overload
    def ValueEquals(self, other: object) -> bool: ...

class DelegateInfo(object):
    """    """
    def __init__(self, context: LanguageContext, returnType: System.Type, parameters: System.System.Array[System.Type]): ...
    @overload
    def CreateDelegate(self, delegateType: System.Type, dynamicObject: object) -> System.Delegate: ...

class DlrCachedCodeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CachedOptimizedCodeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, names: System.System.Array[str]): ...
    @property
    def Names(self) -> System.System.Array[str]: ...

class DocumentationAttribute(System.Attribute):
    """    """
    def __init__(self, documentation: str): ...
    @property
    def Documentation(self) -> str: ...

class DynamicDelegateCreator(object):
    """    """
    def __init__(self, languageContext: LanguageContext): ...
    @overload
    def GetDelegate(self, callableObject: object, delegateType: System.Type) -> System.Delegate: ...
    @overload
    def GetOrCreateDelegateForDynamicObject(self, dynamicObject: object, delegateType: System.Type, invoke: Reflection.MethodInfo) -> System.Delegate: ...

class DynamicNull(object):
    """    """

class ExceptionHelpers(object):
    """    """
    @overload
    @staticmethod
    def GetExceptionStackTraces(rethrow: System.Exception) -> Generic.IList: ...
    @overload
    @staticmethod
    def UpdateForRethrow(rethrow: System.Exception) -> System.Exception: ...

class ExplicitConversionMethodAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class Extensible(object):
    """    Extensible[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: T): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Value(self) -> T: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ExtensionTypeAttribute(System.Attribute):
    """    """
    def __init__(self, extends: System.Type, extensionType: System.Type): ...
    @property
    def Extends(self) -> System.Type: ...
    @property
    def ExtensionType(self) -> System.Type: ...

class IDebuggableGenerator:
    """    """
    @property
    def YieldMarkerLocation(self) -> int: ...
    @YieldMarkerLocation.setter
    def YieldMarkerLocation(self, value: System.Void): ...

class GeneratorNext(System.MulticastDelegate):
    """    GeneratorNext[T]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, int, T): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (int, T): ...
    @overload
    def Invoke() -> (int, T): ...

class IConvertibleMetaObject:
    """    """
    @overload
    def CanConvertTo(self, type_: System.Type, isExplicit: bool) -> bool: ...

class IdDispenser(object):
    """    """
    @overload
    @staticmethod
    def GetId(o: object) -> System.Int64: ...
    @overload
    @staticmethod
    def GetObject(id_: System.Int64) -> object: ...

class IMembersList:
    """    """
    @overload
    def GetMemberNames() -> Generic.IList: ...

class ImplicitConversionMethodAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class IRestrictedMetaObject:
    """    """
    @overload
    def Restrict(self, type_: System.Type) -> Dynamic.DynamicMetaObject: ...

class ISlice:
    """    """
    @property
    def Start(self) -> object: ...
    @property
    def Step(self) -> object: ...
    @property
    def Stop(self) -> object: ...

class LightExceptions(object):
    """    """
    @overload
    @staticmethod
    def CheckAndThrow(value: object) -> object: ...
    @overload
    @staticmethod
    def CheckAndThrow(expr: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def GetLightException(exceptionValue: object) -> System.Exception: ...
    @overload
    @staticmethod
    def IsLightException(value: object) -> bool: ...
    @overload
    @staticmethod
    def Rewrite(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def RewriteExternal(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def RewriteLazy(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def SupportsLightThrow(binder: CompilerServices.CallSiteBinder) -> bool: ...
    @overload
    @staticmethod
    def Throw(exceptionValue: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Throw(exceptionValue: System.Exception) -> object: ...
    @overload
    @staticmethod
    def Throw(exceptionValue: Expressions.Expression, retType: System.Type) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Throw(binder: Dynamic.DynamicMetaObjectBinder, exceptionValue: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Throw(binder: Dynamic.DynamicMetaObjectBinder, exceptionValue: Expressions.Expression, retType: System.Type) -> Expressions.Expression: ...

class LightThrowingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class LocalsDictionary(CustomStringDictionary):
    """    """
    def __init__(self, locals_: CompilerServices.IRuntimeVariables, symbols: System.System.Array[str]): ...
    @overload
    def GetExtraKeys() -> System.System.Array[str]: ...

class MetaObjectExtensions(object):
    """    """
    @overload
    @staticmethod
    def Clone(self: Dynamic.DynamicMetaObject, newExpression: Expressions.Expression) -> Dynamic.DynamicMetaObject: ...
    @overload
    @staticmethod
    def Clone(self: Dynamic.DynamicMetaObject, newRestrictions: Dynamic.BindingRestrictions) -> Dynamic.DynamicMetaObject: ...
    @overload
    @staticmethod
    def Clone(self: Dynamic.DynamicMetaObject, newExpression: Expressions.Expression, newRestrictions: Dynamic.BindingRestrictions) -> Dynamic.DynamicMetaObject: ...
    @overload
    @staticmethod
    def GetLimitType(self: Dynamic.DynamicMetaObject) -> System.Type: ...
    @overload
    @staticmethod
    def GetRuntimeType(self: Dynamic.DynamicMetaObject) -> System.Type: ...
    @overload
    @staticmethod
    def NeedsDeferral(self: Dynamic.DynamicMetaObject) -> bool: ...
    @overload
    @staticmethod
    def Restrict(self: Dynamic.DynamicMetaObject, type_: System.Type) -> Dynamic.DynamicMetaObject: ...

class ModuleChangeEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, name: str, changeType: ModuleChangeType): ...
    @overload
    def __init__(self, name: str, changeType: ModuleChangeType, value: object): ...
    @property
    def ChangeType(self) -> ModuleChangeType: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> object: ...

class ModuleChangeType(enum.Enum):
    Set = 0
    Delete = 1

class NullTextContentProvider(Scripting.TextContentProvider):
    """    """
    @property
    def Null(self) -> NullTextContentProvider: ...
    @overload
    def GetReader() -> Scripting.SourceCodeReader: ...

class OperationFailed(object):
    """    """
    @property
    def Value(self) -> OperationFailed: ...

class OperatorSlotAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class PositionTrackingWriter(IO.StringWriter):
    """    """
    def __init__(self): ...
    @overload
    def GetFileMap() -> Generic.System.Array[Generic.KeyValuePair]: ...
    @overload
    def GetLineMap() -> Generic.System.Array[Generic.KeyValuePair]: ...
    @overload
    def MapLocation(self, linePragma: CodeDom.CodeLinePragma) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...

class PropertyMethodAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ReflectionCache(object):
    """    """
    @overload
    @staticmethod
    def GetMethodGroup(name: str, methods: Reflection.System.Array[Reflection.MethodBase]) -> Actions.MethodGroup: ...
    @overload
    @staticmethod
    def GetMethodGroup(name: str, mems: Actions.MemberGroup) -> Actions.MethodGroup: ...
    @overload
    @staticmethod
    def GetTypeTracker(type_: System.Type) -> Actions.TypeTracker: ...

class RestrictedMetaObject(Dynamic.DynamicMetaObject):
    """    """
    @overload
    def __init__(self, expression: Expressions.Expression, restriction: Dynamic.BindingRestrictions): ...
    @overload
    def __init__(self, expression: Expressions.Expression, restriction: Dynamic.BindingRestrictions, value: object): ...
    @overload
    def Restrict(self, type_: System.Type) -> Dynamic.DynamicMetaObject: ...

class StaticExtensionMethodAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class TokenizerBuffer(object):
    """    """
    def __init__(self, reader: IO.TextReader, initialLocation: Scripting.SourceLocation, initialCapacity: int, multiEolns: bool): ...
    @property
    def EndOfFile(self) -> int: ...
    @property
    def InvalidCharacter(self) -> int: ...
    @overload
    def Back() -> None: ...
    @overload
    def DiscardToken() -> None: ...
    @property
    def AtBeginning(self) -> bool: ...
    @property
    def Position(self) -> int: ...
    @property
    def Reader(self) -> IO.TextReader: ...
    @property
    def TokenEnd(self) -> Scripting.SourceLocation: ...
    @property
    def TokenLength(self) -> int: ...
    @property
    def TokenRelativePosition(self) -> int: ...
    @property
    def TokenSpan(self) -> Scripting.SourceSpan: ...
    @property
    def TokenStart(self) -> Scripting.SourceLocation: ...
    @overload
    def GetChar(self, offset: int) -> System.Char: ...
    @overload
    def GetCharRelative(self, disp: int) -> System.Char: ...
    @overload
    def GetTokenString() -> str: ...
    @overload
    def GetTokenSubstring(self, offset: int) -> str: ...
    @overload
    def GetTokenSubstring(self, offset: int, length: int) -> str: ...
    @overload
    def Initialize(self, reader: IO.TextReader, initialLocation: Scripting.SourceLocation, initialCapacity: int, multiEolns: bool) -> None: ...
    @overload
    def IsEoln(self, current: int) -> bool: ...
    @overload
    def MarkMultiLineTokenEnd() -> None: ...
    @overload
    def MarkMultiLineTokenEnd(self, disp: int) -> None: ...
    @overload
    def MarkSingleLineTokenEnd() -> None: ...
    @overload
    def MarkSingleLineTokenEnd(self, disp: int) -> None: ...
    @overload
    def MarkTokenEnd(self, isMultiLine: bool) -> None: ...
    @overload
    def Peek() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, ch: int) -> bool: ...
    @overload
    def Read(self, str_: str) -> bool: ...
    @overload
    def ReadEolnOpt(self, current: int) -> int: ...
    @overload
    def ReadLine() -> int: ...
    @overload
    def Seek(self, offset: int) -> None: ...
    @overload
    def SeekRelative(self, disp: int) -> None: ...

class Uninitialized(object):
    """    """
    @property
    def Instance(self) -> Uninitialized: ...

class MethodBaseCache(object):
    """    """
    def __init__(self, name: str, members: Reflection.System.Array[Reflection.MethodBase]): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

# endregion
