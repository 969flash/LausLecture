"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ActualArguments", "ApplicableCandidate", "ArgBuilder", "ArgumentBinding", "BindingResult", "BindingTarget", "CallFailure", "CallFailureReason", "Candidate", "ConversionResult", "InstanceBuilder", "MethodCandidate", "NarrowingLevel", "OverloadInfo", "ReflectionOverloadInfo", "OverloadResolver", "OverloadResolverFactory", "ParameterMapping", "ParameterBindingFlags", "ParameterWrapper", "RestrictedArguments", "SimpleArgBuilder", "TypeInferer", "IInferableInvokable", "InferenceResult"]
# endregion

# region: Imports
from Microsoft.Scripting import Actions
from Microsoft.Scripting import Runtime
from System import Dynamic
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class ActualArguments(object):
    """    """
    def __init__(self, args: Generic.IList, namedArgs: Generic.IList, argNames: Generic.IList, hiddenCount: int, collapsedCount: int, firstSplattedArg: int, splatIndex: int): ...
    @property
    def ArgNames(self) -> Generic.IList: ...
    @property
    def Arguments(self) -> Generic.IList: ...
    @property
    def CollapsedCount(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def FirstSplattedArg(self) -> int: ...
    @property
    def HiddenCount(self) -> int: ...
    @property
    def Item(self) -> Dynamic.DynamicMetaObject: ...
    @property
    def NamedArguments(self) -> Generic.IList: ...
    @property
    def SplatIndex(self) -> int: ...
    @property
    def VisibleCount(self) -> int: ...

class ApplicableCandidate(object):
    """    """
    @property
    def Method(self) -> MethodCandidate: ...
    @property
    def ArgumentBinding(self) -> ArgumentBinding: ...
    @overload
    def GetParameter(self, argumentIndex: int) -> ParameterWrapper: ...
    @overload
    def ToString() -> str: ...

class ArgBuilder(object):
    """    """
    @overload
    def Clone(self, newType: Reflection.ParameterInfo) -> ArgBuilder: ...
    @property
    def ConsumedArgumentCount(self) -> int: ...
    @property
    def ParameterInfo(self) -> Reflection.ParameterInfo: ...
    @property
    def Priority(self) -> int: ...
    @property
    def Type(self) -> System.Type: ...

class ArgumentBinding(System.ValueType):
    """    """
    @overload
    def ArgumentToParameter(self, argumentIndex: int) -> int: ...
    @property
    def PositionalArgCount(self) -> int: ...

class BindingResult(enum.Enum):
    Success = 0
    AmbiguousMatch = 1
    IncorrectArgumentCount = 2
    CallFailure = 3
    InvalidArguments = 4
    NoCallableMethod = 5

class BindingTarget(object):
    """    """
    @property
    def ActualArgumentCount(self) -> int: ...
    @property
    def AmbiguousMatches(self) -> Generic.IEnumerable: ...
    @property
    def CallFailures(self) -> Generic.ICollection: ...
    @property
    def ExpectedArgumentCount(self) -> Generic.IList: ...
    @property
    def Method(self) -> Reflection.MethodBase: ...
    @property
    def MethodCandidate(self) -> MethodCandidate: ...
    @property
    def Name(self) -> str: ...
    @property
    def NarrowingLevel(self) -> NarrowingLevel: ...
    @property
    def Overload(self) -> OverloadInfo: ...
    @property
    def RestrictedArguments(self) -> RestrictedArguments: ...
    @property
    def Result(self) -> BindingResult: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @property
    def Success(self) -> bool: ...
    @overload
    def MakeExpression() -> Expressions.Expression: ...

class CallFailure(object):
    """    """
    @property
    def Candidate(self) -> MethodCandidate: ...
    @property
    def ConversionResults(self) -> Generic.IList: ...
    @property
    def KeywordArguments(self) -> Generic.IList: ...
    @property
    def PositionalArguments(self) -> Generic.IList: ...
    @property
    def Reason(self) -> CallFailureReason: ...

class CallFailureReason(enum.Enum):
    None_ = 0
    ConversionFailure = 1
    UnassignableKeyword = 2
    DuplicateKeyword = 3
    TypeInference = 4

class Candidate(enum.Enum):
    Equivalent = 0
    One = 1
    Ambiguous = 2
    Two = -1

class ConversionResult(object):
    """    """
    @property
    def Arg(self) -> object: ...
    @property
    def ArgType(self) -> System.Type: ...
    @property
    def Failed(self) -> bool: ...
    @property
    def To(self) -> System.Type: ...
    @overload
    def GetArgumentTypeName(self, binder: Actions.ActionBinder) -> str: ...

class InstanceBuilder(object):
    """    """
    def __init__(self, index: int): ...
    @property
    def ConsumedArgumentCount(self) -> int: ...
    @property
    def HasValue(self) -> bool: ...

class MethodCandidate(object):
    """    """
    @property
    def Binder(self) -> Actions.ActionBinder: ...
    @property
    def HasParamsArray(self) -> bool: ...
    @property
    def HasParamsDictionary(self) -> bool: ...
    @property
    def Method(self) -> Reflection.MethodBase: ...
    @property
    def Overload(self) -> OverloadInfo: ...
    @property
    def ParamsArrayIndex(self) -> int: ...
    @property
    def Resolver(self) -> OverloadResolver: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def GetParameters() -> Generic.IList: ...
    @overload
    def GetParameterTypes() -> System.System.Array[System.Type]: ...
    @overload
    def GetVisibleParameterCount() -> int: ...
    @overload
    def ToString() -> str: ...

class NarrowingLevel(enum.Enum):
    None_ = 0
    One = 1
    Two = 2
    Three = 3
    All = 4

class OverloadInfo(object):
    """    """
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def CallingConvention(self) -> Reflection.CallingConventions: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def GenericArguments(self) -> Generic.IList: ...
    @property
    def IsAssembly(self) -> bool: ...
    @property
    def IsConstructor(self) -> bool: ...
    @property
    def IsExtension(self) -> bool: ...
    @property
    def IsFamily(self) -> bool: ...
    @property
    def IsFamilyAndAssembly(self) -> bool: ...
    @property
    def IsFamilyOrAssembly(self) -> bool: ...
    @property
    def IsFinal(self) -> bool: ...
    @property
    def IsGenericMethod(self) -> bool: ...
    @property
    def IsGenericMethodDefinition(self) -> bool: ...
    @property
    def IsInstanceFactory(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def IsVariadic(self) -> bool: ...
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterCount(self) -> int: ...
    @property
    def Parameters(self) -> Generic.IList: ...
    @property
    def ReflectionInfo(self) -> Reflection.MethodBase: ...
    @property
    def ReturnParameter(self) -> Reflection.ParameterInfo: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def IsParamArray(self, parameterIndex: int) -> bool: ...
    @overload
    def IsParamDictionary(self, parameterIndex: int) -> bool: ...
    @overload
    def MakeGenericMethod(self, genericArguments: System.System.Array[System.Type]) -> OverloadInfo: ...
    @overload
    def ProhibitsNull(self, parameterIndex: int) -> bool: ...
    @overload
    def ProhibitsNullItems(self, parameterIndex: int) -> bool: ...

class ReflectionOverloadInfo(OverloadInfo):
    """    """
    def __init__(self, method: Reflection.MethodBase): ...
    @overload
    @staticmethod
    def CreateArray(methods: Reflection.System.Array[Reflection.MethodBase]) -> System.Array[OverloadInfo]: ...
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def CallingConvention(self) -> Reflection.CallingConventions: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def GenericArguments(self) -> Generic.IList: ...
    @property
    def IsConstructor(self) -> bool: ...
    @property
    def IsExtension(self) -> bool: ...
    @property
    def IsGenericMethod(self) -> bool: ...
    @property
    def IsGenericMethodDefinition(self) -> bool: ...
    @property
    def IsInstanceFactory(self) -> bool: ...
    @property
    def IsVariadic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> Generic.IList: ...
    @property
    def ReflectionInfo(self) -> Reflection.MethodBase: ...
    @property
    def ReturnParameter(self) -> Reflection.ParameterInfo: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def MakeGenericMethod(self, genericArguments: System.System.Array[System.Type]) -> OverloadInfo: ...

class OverloadResolver(object):
    """    """
    @overload
    def CanConvertFrom(self, parameter1: ParameterWrapper, parameter2: ParameterWrapper) -> bool: ...
    @overload
    def CanConvertFrom(self, fromType: System.Type, fromArgument: Dynamic.DynamicMetaObject, toParameter: ParameterWrapper, level: NarrowingLevel) -> bool: ...
    @overload
    def Convert(self, metaObject: Dynamic.DynamicMetaObject, restrictedType: System.Type, info: Reflection.ParameterInfo, toType: System.Type) -> Expressions.Expression: ...
    @property
    def Binder(self) -> Actions.ActionBinder: ...
    @property
    def MaxAccessedCollapsedArg(self) -> int: ...
    @overload
    def GetActualArguments() -> ActualArguments: ...
    @overload
    def GetCollapsedArgsCondition() -> Expressions.Expression: ...
    @overload
    def GetDynamicConversion(self, value: Expressions.Expression, type_: System.Type) -> Expressions.Expression: ...
    @overload
    def GetGenericInferenceType(self, dynamicObject: Dynamic.DynamicMetaObject) -> System.Type: ...
    @overload
    def MakeInvalidParametersError(self, target: BindingTarget) -> Actions.ErrorInfo: ...
    @overload
    def ParametersEquivalent(self, parameter1: ParameterWrapper, parameter2: ParameterWrapper) -> bool: ...
    @overload
    def PreferConvert(self, t1: System.Type, t2: System.Type) -> Candidate: ...
    @overload
    def ResolveOverload(self, methodName: str, methods: Generic.IList, minLevel: NarrowingLevel, maxLevel: NarrowingLevel) -> BindingTarget: ...
    @overload
    def ResolveOverload(self, methodName: str, methods: Generic.IList, minLevel: NarrowingLevel, maxLevel: NarrowingLevel) -> BindingTarget: ...
    @overload
    def SelectBestConversionFor(self, arg: Dynamic.DynamicMetaObject, candidateOne: ParameterWrapper, candidateTwo: ParameterWrapper, level: NarrowingLevel) -> Candidate: ...
    @overload
    def ToString() -> str: ...

class OverloadResolverFactory(object):
    """    """
    @overload
    def CreateOverloadResolver(self, args: Generic.IList, signature: Actions.CallSignature, callType: Runtime.CallTypes) -> Actions.DefaultOverloadResolver: ...

class ParameterMapping(object):
    """    """
    @overload
    def AddBuilder(self, builder: ArgBuilder) -> None: ...
    @overload
    def AddInstanceBuilder(self, builder: InstanceBuilder) -> None: ...
    @overload
    def AddParameter(self, parameter: ParameterWrapper) -> None: ...
    @property
    def ArgIndex(self) -> int: ...
    @property
    def Method(self) -> Reflection.MethodBase: ...
    @property
    def Overload(self) -> OverloadInfo: ...
    @property
    def ParameterInfos(self) -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def MapParameter(self, pi: Reflection.ParameterInfo) -> None: ...

class ParameterBindingFlags(enum.Enum):
    None_ = 0
    ProhibitNull = 1
    ProhibitNullItems = 2
    IsParamArray = 4
    IsParamDictionary = 8
    IsHidden = 16

class ParameterWrapper(object):
    """    """
    @overload
    def __init__(self, type_: System.Type, name: str, prohibitNull: bool): ...
    @overload
    def __init__(self, info: Reflection.ParameterInfo, type_: System.Type, name: str, flags: ParameterBindingFlags): ...
    @overload
    def __init__(self, info: Reflection.ParameterInfo, type_: System.Type, name: str, prohibitNull: bool, isParams: bool, isParamsDict: bool, isHidden: bool): ...
    @overload
    def Clone(self, name: str) -> ParameterWrapper: ...
    @property
    def Flags(self) -> ParameterBindingFlags: ...
    @property
    def IsByRef(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsParamsArray(self) -> bool: ...
    @property
    def IsParamsDict(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterInfo(self) -> Reflection.ParameterInfo: ...
    @property
    def ProhibitNull(self) -> bool: ...
    @property
    def ProhibitNullItems(self) -> bool: ...
    @property
    def Type(self) -> System.Type: ...

class RestrictedArguments(object):
    """    """
    def __init__(self, objects: Dynamic.System.Array[Dynamic.DynamicMetaObject], types: System.System.Array[System.Type], hasUntypedRestrictions: bool): ...
    @property
    def HasUntypedRestrictions(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @overload
    def GetAllRestrictions() -> Dynamic.BindingRestrictions: ...
    @overload
    def GetObject(self, i: int) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetObjects() -> Generic.IList: ...
    @overload
    def GetType(self, i: int) -> System.Type: ...
    @overload
    def GetTypes() -> Generic.IList: ...

class SimpleArgBuilder(ArgBuilder):
    """    """
    @overload
    def __init__(self, info: Reflection.ParameterInfo, index: int): ...
    @overload
    def __init__(self, parameterType: System.Type, index: int, isParams: bool, isParamsDict: bool): ...
    @overload
    def __init__(self, info: Reflection.ParameterInfo, parameterType: System.Type, index: int, isParams: bool, isParamsDict: bool): ...
    @overload
    def Clone(self, newType: Reflection.ParameterInfo) -> ArgBuilder: ...
    @property
    def ConsumedArgumentCount(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsParamsArray(self) -> bool: ...
    @property
    def IsParamsDict(self) -> bool: ...
    @property
    def Priority(self) -> int: ...
    @property
    def Type(self) -> System.Type: ...

class TypeInferer(object):
    """    """
    @overload
    @staticmethod
    def GetInferedType(genericParameter: System.Type, parameterType: System.Type, inputType: System.Type, argType: System.Type, binding: Generic.Dictionary) -> System.Type: ...

class IInferableInvokable:
    """    """
    @overload
    def GetInferredType(self, delegateType: System.Type, parameterType: System.Type) -> InferenceResult: ...

class InferenceResult(object):
    """    """
    def __init__(self, type_: System.Type, restrictions: Dynamic.BindingRestrictions): ...
    @property
    def Restrictions(self) -> Dynamic.BindingRestrictions: ...
    @property
    def Type(self) -> System.Type: ...

# endregion
