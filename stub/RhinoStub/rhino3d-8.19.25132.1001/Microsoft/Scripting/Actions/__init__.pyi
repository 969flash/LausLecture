"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Calls", "ActionBinder", "Argument", "ArgumentType", "BoundMemberTracker", "CallSignature", "DefaultOverloadResolver", "ComboActionRewriter", "ComboBinder", "ParameterMappingInfo", "BinderMappingInfo", "ConstructorTracker", "ConversionResultKind", "CustomTracker", "DefaultBinder", "DynamicSiteHelpers", "ErrorInfo", "ErrorInfoKind", "ErrorMetaObject", "EventTracker", "ExtensionBinaryOperationBinder", "ExtensionMethodTracker", "ExtensionPropertyTracker", "ExtensionUnaryOperationBinder", "FieldTracker", "ILightExceptionBinder", "Interceptor", "MemberGroup", "MemberRequestKind", "MemberTracker", "MethodGroup", "MethodTracker", "NamespaceTracker", "NestedTypeTracker", "NoSideEffectsAttribute", "OperationMetaObject", "PropertyTracker", "ReflectedPropertyTracker", "TopNamespaceTracker", "TrackerTypes", "TypeGroup", "TypeTracker"]
# endregion

# region: Imports
from Microsoft.Scripting import Runtime
from Microsoft.Scripting.Actions import Calls
from System import Dynamic
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class ActionBinder(object):
    """    """
    @overload
    def CanConvertFrom(self, fromType: System.Type, toType: System.Type, toNotNullable: bool, level: Calls.NarrowingLevel) -> bool: ...
    @overload
    def Convert(self, obj: object, toType: System.Type) -> object: ...
    @overload
    def ConvertExpression(self, expr: Expressions.Expression, toType: System.Type, kind: ConversionResultKind, resolverFactory: Calls.OverloadResolverFactory) -> Expressions.Expression: ...
    @property
    def Manager(self) -> Runtime.ScriptDomainManager: ...
    @property
    def PrivateBinding(self) -> bool: ...
    @overload
    def GetAllExtensionMembers(self, type_: System.Type, name: str) -> MemberGroup: ...
    @overload
    def GetExtensionMembers(self, declaringType: System.Type, name: str) -> MemberGroup: ...
    @overload
    def GetExtensionTypes(self, t: System.Type) -> Generic.IList: ...
    @overload
    def GetMember(self, action: MemberRequestKind, type_: System.Type, name: str) -> MemberGroup: ...
    @overload
    def GetObjectTypeName(self, arg: object) -> str: ...
    @overload
    def GetTypeName(self, t: System.Type) -> str: ...
    @overload
    def IncludeExtensionMember(self, member: Reflection.MemberInfo) -> bool: ...
    @overload
    def MakeCallExpression(self, resolverFactory: Calls.OverloadResolverFactory, method: Reflection.MethodInfo, parameters: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def MakeContainsGenericParametersError(self, tracker: MemberTracker) -> ErrorInfo: ...
    @overload
    def MakeConversionError(self, toType: System.Type, value: Expressions.Expression) -> ErrorInfo: ...
    @overload
    def MakeGenericAccessError(self, info: MemberTracker) -> ErrorInfo: ...
    @overload
    def MakeMissingMemberError(self, type_: System.Type, self: Dynamic.DynamicMetaObject, name: str) -> ErrorInfo: ...
    @overload
    def MakeMissingMemberErrorForAssign(self, type_: System.Type, self: Dynamic.DynamicMetaObject, name: str) -> ErrorInfo: ...
    @overload
    def MakeMissingMemberErrorForAssignReadOnlyProperty(self, type_: System.Type, self: Dynamic.DynamicMetaObject, name: str) -> ErrorInfo: ...
    @overload
    def MakeMissingMemberErrorForDelete(self, type_: System.Type, self: Dynamic.DynamicMetaObject, name: str) -> ErrorInfo: ...
    @overload
    def MakeMissingMemberErrorInfo(self, type_: System.Type, name: str) -> ErrorInfo: ...
    @overload
    def MakeSetValueTypeFieldError(self, field: FieldTracker, instance: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject) -> ErrorInfo: ...
    @overload
    def MakeStaticAssignFromDerivedTypeError(self, accessingType: System.Type, self: Dynamic.DynamicMetaObject, assigning: MemberTracker, assignedValue: Dynamic.DynamicMetaObject, context: Calls.OverloadResolverFactory) -> ErrorInfo: ...
    @overload
    def MakeStaticPropertyInstanceAccessError(self, tracker: PropertyTracker, isAssignment: bool, parameters: Generic.IList) -> ErrorInfo: ...
    @overload
    def MakeStaticPropertyInstanceAccessError(self, tracker: PropertyTracker, isAssignment: bool, parameters: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> ErrorInfo: ...
    @overload
    def PreferConvert(self, t1: System.Type, t2: System.Type) -> Calls.Candidate: ...
    @overload
    def ReturnMemberTracker(self, type_: System.Type, memberTracker: MemberTracker) -> Dynamic.DynamicMetaObject: ...

class Argument(System.ValueType):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, kind: ArgumentType): ...
    @overload
    def __init__(self, kind: ArgumentType, name: str): ...
    @property
    def Simple(self) -> Argument: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Argument) -> bool: ...
    @property
    def IsSimple(self) -> bool: ...
    @property
    def Kind(self) -> ArgumentType: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ArgumentType(enum.Enum):
    Simple = 0
    Named = 1
    List = 2
    Dictionary = 3
    Instance = 4

class BoundMemberTracker(MemberTracker):
    """    """
    @overload
    def __init__(self, tracker: MemberTracker, instance: Dynamic.DynamicMetaObject): ...
    @overload
    def __init__(self, tracker: MemberTracker, instance: object): ...
    @property
    def BoundTo(self) -> MemberTracker: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def Instance(self) -> Dynamic.DynamicMetaObject: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def ObjectInstance(self) -> object: ...
    @overload
    def GetError(self, binder: ActionBinder, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type, value: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type, value: Dynamic.DynamicMetaObject, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...

class CallSignature(System.ValueType):
    """    """
    @overload
    def __init__(self, signature: CallSignature): ...
    @overload
    def __init__(self, argumentCount: int): ...
    @overload
    def __init__(self, infos: System.Array[Argument]): ...
    @overload
    def __init__(self, kinds: System.Array[ArgumentType]): ...
    @overload
    def CreateExpression() -> Expressions.Expression: ...
    @overload
    def Equals(self, other: CallSignature) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def IsSimple(self) -> bool: ...
    @overload
    def GetArgumentInfos() -> System.Array[Argument]: ...
    @overload
    def GetArgumentKind(self, index: int) -> ArgumentType: ...
    @overload
    def GetArgumentName(self, index: int) -> str: ...
    @overload
    def GetArgumentNames() -> System.System.Array[str]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetProvidedPositionalArgumentCount() -> int: ...
    @overload
    def HasDictionaryArgument() -> bool: ...
    @overload
    def HasInstanceArgument() -> bool: ...
    @overload
    def HasKeywordArgument() -> bool: ...
    @overload
    def HasListArgument() -> bool: ...
    @overload
    def IndexOf(self, kind: ArgumentType) -> int: ...
    @overload
    def InsertArgument(self, info: Argument) -> CallSignature: ...
    @overload
    def InsertArgumentAt(self, index: int, info: Argument) -> CallSignature: ...
    @overload
    def RemoveArgumentAt(self, index: int) -> CallSignature: ...
    @overload
    def RemoveFirstArgument() -> CallSignature: ...
    @overload
    def ToString() -> str: ...

class DefaultOverloadResolver(Calls.OverloadResolver):
    """    """
    @overload
    def __init__(self, binder: ActionBinder, args: Generic.IList, signature: CallSignature): ...
    @overload
    def __init__(self, binder: ActionBinder, instance: Dynamic.DynamicMetaObject, args: Generic.IList, signature: CallSignature): ...
    @overload
    def __init__(self, binder: ActionBinder, args: Generic.IList, signature: CallSignature, callType: Runtime.CallTypes): ...
    @property
    def Arguments(self) -> Generic.IList: ...
    @property
    def CallType(self) -> Runtime.CallTypes: ...
    @property
    def Factory(self) -> Calls.OverloadResolverFactory: ...
    @property
    def Signature(self) -> CallSignature: ...
    @overload
    def MakeInvalidParametersError(self, target: Calls.BindingTarget) -> ErrorInfo: ...

class ComboActionRewriter(Expressions.DynamicExpressionVisitor):
    """    """
    def __init__(self): ...

class ComboBinder(Dynamic.DynamicMetaObjectBinder):
    """    """
    @overload
    def __init__(self, binders: System.Array[BinderMappingInfo]): ...
    @overload
    def __init__(self, binders: Generic.ICollection): ...
    @overload
    def Bind(self, target: Dynamic.DynamicMetaObject, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @overload
    def GetHashCode() -> int: ...

class ParameterMappingInfo(object):
    """    """
    @overload
    @staticmethod
    def Action(index: int) -> ParameterMappingInfo: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Fixed(e: Expressions.ConstantExpression) -> ParameterMappingInfo: ...
    @property
    def ActionIndex(self) -> int: ...
    @property
    def Constant(self) -> Expressions.ConstantExpression: ...
    @property
    def IsAction(self) -> bool: ...
    @property
    def IsConstant(self) -> bool: ...
    @property
    def IsParameter(self) -> bool: ...
    @property
    def ParameterIndex(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parameter(index: int) -> ParameterMappingInfo: ...
    @overload
    def ToString() -> str: ...

class BinderMappingInfo(object):
    """    """
    @overload
    def __init__(self, binder: Dynamic.DynamicMetaObjectBinder, mappingInfo: Generic.IList): ...
    @overload
    def __init__(self, binder: Dynamic.DynamicMetaObjectBinder, mappingInfos: System.Array[ParameterMappingInfo]): ...
    @property
    def Binder(self) -> Dynamic.DynamicMetaObjectBinder: ...
    @property
    def MappingInfo(self) -> Generic.IList: ...
    @overload
    def ToString() -> str: ...

class ConstructorTracker(MemberTracker):
    """    """
    def __init__(self, ctor: Reflection.ConstructorInfo): ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @overload
    def ToString() -> str: ...

class ConversionResultKind(enum.Enum):
    ImplicitCast = 0
    ExplicitCast = 1
    ImplicitTry = 2
    ExplicitTry = 3

class CustomTracker(MemberTracker):
    """    """
    @property
    def MemberType(self) -> TrackerTypes: ...

class DefaultBinder(ActionBinder):
    """    """
    def __init__(self): ...
    @overload
    def Call(self, signature: CallSignature, target: Dynamic.DynamicMetaObject, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def Call(self, signature: CallSignature, resolverFactory: Calls.OverloadResolverFactory, target: Dynamic.DynamicMetaObject, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def Call(self, signature: CallSignature, errorSuggestion: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory, target: Dynamic.DynamicMetaObject, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def CallMethod(self, resolver: DefaultOverloadResolver, targets: Generic.IList) -> Dynamic.DynamicMetaObject: ...
    @overload
    def CallMethod(self, resolver: DefaultOverloadResolver, targets: Generic.IList, restrictions: Dynamic.BindingRestrictions) -> Dynamic.DynamicMetaObject: ...
    @overload
    def CallMethod(self, resolver: DefaultOverloadResolver, targets: Generic.IList, name: str) -> Dynamic.DynamicMetaObject: ...
    @overload
    def CallMethod(self, resolver: DefaultOverloadResolver, targets: Generic.IList, restrictions: Dynamic.BindingRestrictions, name: str) -> Dynamic.DynamicMetaObject: ...
    @overload
    def CallMethod(self, resolver: DefaultOverloadResolver, targets: Generic.IList, restrictions: Dynamic.BindingRestrictions, name: str, minLevel: Calls.NarrowingLevel, maxLevel: Calls.NarrowingLevel) -> (Dynamic.DynamicMetaObject, Calls.BindingTarget): ...
    @overload
    def CanConvertFrom(self, fromType: System.Type, toType: System.Type, toNotNullable: bool, level: Calls.NarrowingLevel) -> bool: ...
    @overload
    def ConvertTo(self, toType: System.Type, kind: ConversionResultKind, arg: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def ConvertTo(self, toType: System.Type, kind: ConversionResultKind, arg: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory) -> Dynamic.DynamicMetaObject: ...
    @overload
    def ConvertTo(self, toType: System.Type, kind: ConversionResultKind, arg: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def DeleteMember(self, name: str, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def DeleteMember(self, name: str, target: Dynamic.DynamicMetaObject, resolutionFactory: Calls.OverloadResolverFactory) -> Dynamic.DynamicMetaObject: ...
    @overload
    def DeleteMember(self, name: str, target: Dynamic.DynamicMetaObject, resolutionFactory: Calls.OverloadResolverFactory, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, resolverFactory: Calls.OverloadResolverFactory, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetCallSignatures(self, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetDocumentation(self, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetIndex(self, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetIndex(self, resolverFactory: Calls.OverloadResolverFactory, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetIsCallable(self, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMember(self, name: str, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMember(self, name: str, target: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMember(self, name: str, target: Dynamic.DynamicMetaObject, isNoThrow: bool, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMember(self, name: str, target: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory, isNoThrow: bool, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMemberNames(self, target: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def GetMemberType(self, members: MemberGroup) -> (TrackerTypes, Expressions.Expression): ...
    @overload
    def GetMethod(self, type_: System.Type, name: str) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def GetTryConvertReturnValue(type_: System.Type) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def MakeError(error: ErrorInfo, type_: System.Type) -> Dynamic.DynamicMetaObject: ...
    @overload
    @staticmethod
    def MakeError(error: ErrorInfo, restrictions: Dynamic.BindingRestrictions, type_: System.Type) -> Dynamic.DynamicMetaObject: ...
    @overload
    def MakeEventValidation(self, members: MemberGroup, eventObject: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory) -> ErrorInfo: ...
    @overload
    def MakeNonPublicMemberGetError(self, resolverFactory: Calls.OverloadResolverFactory, member: MemberTracker, type_: System.Type, instance: Dynamic.DynamicMetaObject) -> ErrorInfo: ...
    @overload
    def MakeReadOnlyMemberError(self, type_: System.Type, name: str) -> ErrorInfo: ...
    @overload
    def MakeUndeletableMemberError(self, type_: System.Type, name: str) -> ErrorInfo: ...
    @overload
    def PreferConvert(self, t1: System.Type, t2: System.Type) -> Calls.Candidate: ...
    @overload
    def SetIndex(self, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetIndex(self, resolverFactory: Calls.OverloadResolverFactory, args: Dynamic.System.Array[Dynamic.DynamicMetaObject]) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetMember(self, name: str, target: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetMember(self, name: str, target: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetMember(self, name: str, target: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetMember(self, name: str, target: Dynamic.DynamicMetaObject, value: Dynamic.DynamicMetaObject, errorSuggestion: Dynamic.DynamicMetaObject, resolverFactory: Calls.OverloadResolverFactory) -> Dynamic.DynamicMetaObject: ...

class DynamicSiteHelpers(object):
    """    """
    @overload
    @staticmethod
    def GetStandardDelegateType(types: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    @staticmethod
    def IsInvisibleDlrStackFrame(mb: Reflection.MethodBase) -> bool: ...
    @overload
    @staticmethod
    def MakeCallSiteDelegate(types: System.System.Array[System.Type]) -> System.Type: ...

class ErrorInfo(object):
    """    """
    @overload
    @staticmethod
    def FromException(exceptionValue: Expressions.Expression) -> ErrorInfo: ...
    @overload
    @staticmethod
    def FromValue(resultValue: Expressions.Expression) -> ErrorInfo: ...
    @overload
    @staticmethod
    def FromValueNoError(resultValue: Expressions.Expression) -> ErrorInfo: ...
    @property
    def Expression(self) -> Expressions.Expression: ...
    @property
    def Kind(self) -> ErrorInfoKind: ...

class ErrorInfoKind(enum.Enum):
    Exception = 0
    Error = 1
    Success = 2

class ErrorMetaObject(Dynamic.DynamicMetaObject):
    """    """
    def __init__(self, body: Expressions.Expression, restrictions: Dynamic.BindingRestrictions): ...

class EventTracker(MemberTracker):
    """    """
    @overload
    def AddHandler(self, target: object, handler: object, delegateCreator: Runtime.DynamicDelegateCreator) -> None: ...
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def Event(self) -> Reflection.EventInfo: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetCallableAddMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetCallableRemoveMethod() -> Reflection.MethodInfo: ...
    @overload
    def RemoveHandler(self, target: object, handler: object, objectComparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def ToString() -> str: ...

class ExtensionBinaryOperationBinder(Dynamic.BinaryOperationBinder):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ExtensionOperation(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class ExtensionMethodTracker(MethodTracker):
    """    """
    @property
    def DeclaringType(self) -> System.Type: ...

class ExtensionPropertyTracker(PropertyTracker):
    """    """
    def __init__(self, name: str, getter: Reflection.MethodInfo, setter: Reflection.MethodInfo, deleter: Reflection.MethodInfo, declaringType: System.Type): ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @overload
    def GetDeleteMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetDeleteMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetGetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetGetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetIndexParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def GetSetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetSetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...

class ExtensionUnaryOperationBinder(Dynamic.UnaryOperationBinder):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ExtensionOperation(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class FieldTracker(MemberTracker):
    """    """
    def __init__(self, field: Reflection.FieldInfo): ...
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def Field(self) -> Reflection.FieldInfo: ...
    @property
    def FieldType(self) -> System.Type: ...
    @property
    def IsInitOnly(self) -> bool: ...
    @property
    def IsLiteral(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetError(self, binder: ActionBinder, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, type_: System.Type) -> Dynamic.DynamicMetaObject: ...
    @overload
    def ToString() -> str: ...

class ILightExceptionBinder:
    """    """
    @property
    def SupportsLightThrow(self) -> bool: ...
    @overload
    def GetLightExceptionBinder() -> CompilerServices.CallSiteBinder: ...

class Interceptor(object):
    """    """
    @overload
    @staticmethod
    def Intercept(expression: Expressions.Expression) -> Expressions.Expression: ...
    @overload
    @staticmethod
    def Intercept(lambda_: Expressions.LambdaExpression) -> Expressions.LambdaExpression: ...

class MemberGroup(object):
    """    """
    @overload
    def __init__(self, members: System.Array[MemberTracker]): ...
    @overload
    def __init__(self, members: Reflection.System.Array[Reflection.MemberInfo]): ...
    @property
    def EmptyGroup(self) -> MemberGroup: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> MemberTracker: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class MemberRequestKind(enum.Enum):
    None_ = 0
    Get = 1
    Set = 2
    Delete = 3
    Invoke = 4
    InvokeMember = 5
    Convert = 6
    Operation = 7

class MemberTracker(object):
    """    """
    @property
    def EmptyTrackers(self) -> System.Array[MemberTracker]: ...
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @overload
    @staticmethod
    def FromMemberInfo(member: Reflection.MemberInfo) -> MemberTracker: ...
    @overload
    @staticmethod
    def FromMemberInfo(member: Reflection.MemberInfo, extending: System.Type) -> MemberTracker: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetBoundError(self, binder: ActionBinder, instance: Dynamic.DynamicMetaObject, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetError(self, binder: ActionBinder, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type, value: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...
    @overload
    def SetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type, value: Dynamic.DynamicMetaObject, errorSuggestion: Dynamic.DynamicMetaObject) -> Dynamic.DynamicMetaObject: ...

class MethodGroup(MemberTracker):
    """    """
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @property
    def ContainsInstance(self) -> bool: ...
    @property
    def ContainsStatic(self) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Methods(self) -> Generic.IList: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetMethodBases() -> Reflection.System.Array[Reflection.MethodBase]: ...
    @overload
    def MakeGenericMethod(self, types: System.System.Array[System.Type]) -> MethodGroup: ...

class MethodTracker(MemberTracker):
    """    """
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Method(self) -> Reflection.MethodInfo: ...
    @property
    def Name(self) -> str: ...
    @overload
    def ToString() -> str: ...

class NamespaceTracker(MemberTracker):
    """    """
    @overload
    def ContainsKey(self, name: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def Id(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def PackageAssemblies(self) -> Generic.IList: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetMemberNames() -> Generic.IList: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryGetValue(self, name: str) -> (bool, MemberTracker): ...
    @overload
    def TryGetValue(self, name: str) -> (bool, object): ...

class NestedTypeTracker(TypeTracker):
    """    """
    def __init__(self, type_: System.Type): ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def ToString() -> str: ...

class NoSideEffectsAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OperationMetaObject(Dynamic.DynamicMetaObject):
    """    """
    @overload
    def __init__(self, expression: Expressions.Expression, restrictions: Dynamic.BindingRestrictions): ...
    @overload
    def __init__(self, expression: Expressions.Expression, restrictions: Dynamic.BindingRestrictions, value: object): ...

class PropertyTracker(MemberTracker):
    """    """
    @overload
    def BindToInstance(self, instance: Dynamic.DynamicMetaObject) -> MemberTracker: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @overload
    def GetBoundError(self, binder: ActionBinder, instance: Dynamic.DynamicMetaObject, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetDeleteMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetDeleteMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetError(self, binder: ActionBinder, instanceType: System.Type) -> ErrorInfo: ...
    @overload
    def GetGetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetGetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetIndexParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def GetSetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetSetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetValue(self, resolverFactory: Calls.OverloadResolverFactory, binder: ActionBinder, instanceType: System.Type) -> Dynamic.DynamicMetaObject: ...

class ReflectedPropertyTracker(PropertyTracker):
    """    """
    def __init__(self, property_: Reflection.PropertyInfo): ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Property(self) -> Reflection.PropertyInfo: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @overload
    def GetDeleteMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetDeleteMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetGetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetGetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetIndexParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def GetSetMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetSetMethod(self, privateMembers: bool) -> Reflection.MethodInfo: ...
    @overload
    def ToString() -> str: ...

class TopNamespaceTracker(NamespaceTracker):
    """    """
    def __init__(self, manager: Runtime.ScriptDomainManager): ...
    @property
    def DomainManager(self) -> Runtime.ScriptDomainManager: ...
    @overload
    def LoadAssembly(self, assem: Reflection.Assembly) -> bool: ...
    @overload
    @staticmethod
    def PublishComTypes(interopAssembly: Reflection.Assembly) -> None: ...
    @overload
    def TryGetPackage(self, name: str) -> NamespaceTracker: ...
    @overload
    def TryGetPackageAny(self, name: str) -> MemberTracker: ...
    @overload
    def TryGetPackageLazy(self, name: str) -> MemberTracker: ...

class TrackerTypes(enum.Enum):
    None_ = 0
    Constructor = 1
    Event = 2
    Field = 4
    Method = 8
    Property = 16
    Type = 32
    Namespace = 64
    MethodGroup = 128
    TypeGroup = 256
    Custom = 512
    Bound = 1024
    All = 1535

class TypeGroup(TypeTracker):
    """    """
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def MemberType(self) -> TrackerTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Types(self) -> Generic.IEnumerable: ...
    @property
    def TypesByArity(self) -> Generic.IDictionary: ...
    @overload
    def GetMemberNames() -> Generic.IList: ...
    @overload
    def GetNonGenericType() -> System.Type: ...
    @overload
    def GetTypeForArity(self, arity: int) -> TypeTracker: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryGetNonGenericType() -> (bool, System.Type): ...
    @overload
    @staticmethod
    def UpdateTypeEntity(existingTypeEntity: TypeTracker, newType: TypeTracker) -> TypeTracker: ...

class TypeTracker(MemberTracker):
    """    """
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def GetMemberNames() -> Generic.IList: ...
    @overload
    @staticmethod
    def GetTypeTracker(type_: System.Type) -> TypeTracker: ...

# endregion
