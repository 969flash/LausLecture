"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BranchLabel", "ILightCallSiteBinder", "NewArrayInitInstruction", "NewArrayInstruction", "NewArrayBoundsInstruction", "GetArrayItemInstruction", "SetArrayItemInstruction", "CallInstruction", "IInstructionProvider", "Instruction", "InstructionFactory", "InstructionArray", "InstructionList", "LabelScopeKind", "InterpretedFrame", "ExceptionHandler", "DebugInfo", "InterpretedFrameInfo", "LightCompiler", "LightLambdaCompileEventArgs", "LightLambda", "LocalVariable", "LocalDefinition", "LocalVariables"]
# endregion

# region: Imports
from Microsoft.Scripting import Utils
from System import Reflection
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Dynamic, Version=1.3.1.0

class BranchLabel(object):
    """    """
    def __init__(self): ...

class ILightCallSiteBinder:
    """    """
    @property
    def AcceptsArgumentArray(self) -> bool: ...

class NewArrayInitInstruction(Instruction):
    """    NewArrayInitInstruction[TElement]
    """
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...

class NewArrayInstruction(Instruction):
    """    NewArrayInstruction[TElement]
    """
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...

class NewArrayBoundsInstruction(Instruction):
    """    """
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...

class GetArrayItemInstruction(Instruction):
    """    GetArrayItemInstruction[TElement]
    """
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def InstructionName(self) -> str: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...

class SetArrayItemInstruction(Instruction):
    """    SetArrayItemInstruction[TElement]
    """
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def InstructionName(self) -> str: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...

class CallInstruction(Instruction):
    """    """
    @overload
    @staticmethod
    def ArrayItemSetter1(array: System.Array, index0: int, value: object) -> None: ...
    @overload
    @staticmethod
    def ArrayItemSetter2(array: System.Array, index0: int, index1: int, value: object) -> None: ...
    @overload
    @staticmethod
    def ArrayItemSetter3(array: System.Array, index0: int, index1: int, index2: int, value: object) -> None: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheAction(method: System.Action) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def CacheFunc(method: System.Func) -> Reflection.MethodInfo: ...
    @overload
    @staticmethod
    def Create(info: Reflection.MethodInfo) -> CallInstruction: ...
    @overload
    @staticmethod
    def Create(info: Reflection.MethodInfo, parameters: Reflection.System.Array[Reflection.ParameterInfo]) -> CallInstruction: ...
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def Info(self) -> Reflection.MethodInfo: ...
    @property
    def InstructionName(self) -> str: ...
    @property
    def ProducedStack(self) -> int: ...
    @overload
    def Invoke() -> object: ...
    @overload
    def Invoke(self, arg0: object) -> object: ...
    @overload
    def Invoke(self, args: System.System.Array[object]) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> object: ...
    @overload
    def Invoke(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> object: ...
    @overload
    def InvokeInstance(self, instance: object, args: System.System.Array[object]) -> object: ...
    @overload
    def ToString() -> str: ...

class IInstructionProvider:
    """    """
    @overload
    def AddInstructions(self, compiler: LightCompiler) -> None: ...

class Instruction(object):
    """    """
    @property
    def ConsumedContinuations(self) -> int: ...
    @property
    def ConsumedStack(self) -> int: ...
    @property
    def ContinuationsBalance(self) -> int: ...
    @property
    def InstructionName(self) -> str: ...
    @property
    def ProducedContinuations(self) -> int: ...
    @property
    def ProducedStack(self) -> int: ...
    @property
    def StackBalance(self) -> int: ...
    @overload
    def GetDebugCookie(self, compiler: LightCompiler) -> object: ...
    @overload
    def Run(self, frame: InterpretedFrame) -> int: ...
    @overload
    def ToDebugString(self, instructionIndex: int, cookie: object, labelIndexer: System.Func, objects: Generic.IList) -> str: ...
    @overload
    def ToString() -> str: ...

class InstructionFactory(object):
    """    """

class InstructionFactory(InstructionFactory):
    """    InstructionFactory[T]
    """
    @property
    def Factory(self) -> InstructionFactory: ...

class InstructionArray(System.ValueType):
    """    """

class InstructionList(object):
    """    """
    def __init__(self): ...
    @overload
    def Emit(self, instruction: Instruction) -> None: ...
    @overload
    def EmitAdd(self, type_: System.Type, checked: bool) -> None: ...
    @overload
    def EmitAssignLocal(self, index: int) -> None: ...
    @overload
    def EmitAssignLocalBoxed(self, index: int) -> None: ...
    @overload
    def EmitAssignLocalToClosure(self, index: int) -> None: ...
    @overload
    def EmitBranch(self, label: BranchLabel) -> None: ...
    @overload
    def EmitBranch(self, label: BranchLabel, hasResult: bool, hasValue: bool) -> None: ...
    @overload
    def EmitBranchFalse(self, elseLabel: BranchLabel) -> None: ...
    @overload
    def EmitBranchTrue(self, elseLabel: BranchLabel) -> None: ...
    @overload
    def EmitCoalescingBranch(self, leftNotNull: BranchLabel) -> None: ...
    @overload
    def EmitDefaultValue(self, type_: System.Type) -> None: ...
    @overload
    def EmitDiv(self, type_: System.Type) -> None: ...
    @overload
    def EmitDup() -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitDynamic(self, type_: System.Type, binder: CompilerServices.CallSiteBinder) -> None: ...
    @overload
    def EmitEnterExceptionHandlerNonVoid() -> None: ...
    @overload
    def EmitEnterExceptionHandlerVoid() -> None: ...
    @overload
    def EmitEnterFinally() -> None: ...
    @overload
    def EmitEnterTryFinally(self, finallyStartLabel: BranchLabel) -> None: ...
    @overload
    def EmitEqual(self, type_: System.Type) -> None: ...
    @overload
    def EmitGetArrayItem(self, arrayType: System.Type) -> None: ...
    @overload
    def EmitGoto(self, label: BranchLabel, hasResult: bool, hasValue: bool) -> None: ...
    @overload
    def EmitGreaterThan(self, type_: System.Type) -> None: ...
    @overload
    def EmitGreaterThanOrEqual(self, type_: System.Type) -> None: ...
    @overload
    def EmitInitializeLocal(self, index: int, type_: System.Type) -> None: ...
    @overload
    def EmitLeaveExceptionHandler(self, hasValue: bool, tryExpressionEndLabel: BranchLabel) -> None: ...
    @overload
    def EmitLeaveFault(self, hasValue: bool) -> None: ...
    @overload
    def EmitLeaveFinally() -> None: ...
    @overload
    def EmitLessThan(self, type_: System.Type) -> None: ...
    @overload
    def EmitLessThanOrEqual(self, type_: System.Type) -> None: ...
    @overload
    def EmitLoad(self, value: bool) -> None: ...
    @overload
    def EmitLoad(self, value: object) -> None: ...
    @overload
    def EmitLoad(self, value: object, type_: System.Type) -> None: ...
    @overload
    def EmitLoadField(self, field: Reflection.FieldInfo) -> None: ...
    @overload
    def EmitLoadLocal(self, index: int) -> None: ...
    @overload
    def EmitLoadLocalBoxed(self, index: int) -> None: ...
    @overload
    def EmitLoadLocalFromClosure(self, index: int) -> None: ...
    @overload
    def EmitLoadLocalFromClosureBoxed(self, index: int) -> None: ...
    @overload
    def EmitMul(self, type_: System.Type, checked: bool) -> None: ...
    @overload
    def EmitNew(self, constructorInfo: Reflection.ConstructorInfo) -> None: ...
    @overload
    def EmitNewArray(self, elementType: System.Type) -> None: ...
    @overload
    def EmitNewArrayBounds(self, elementType: System.Type, rank: int) -> None: ...
    @overload
    def EmitNewArrayInit(self, elementType: System.Type, elementCount: int) -> None: ...
    @overload
    def EmitNewRuntimeVariables(self, count: int) -> None: ...
    @overload
    def EmitNot() -> None: ...
    @overload
    def EmitNotEqual(self, type_: System.Type) -> None: ...
    @overload
    def EmitNumericConvertChecked(self, from_: System.TypeCode, to: System.TypeCode) -> None: ...
    @overload
    def EmitNumericConvertUnchecked(self, from_: System.TypeCode, to: System.TypeCode) -> None: ...
    @overload
    def EmitPop() -> None: ...
    @overload
    def EmitRethrow() -> None: ...
    @overload
    def EmitRethrowVoid() -> None: ...
    @overload
    def EmitSetArrayItem(self, arrayType: System.Type) -> None: ...
    @overload
    def EmitStoreField(self, field: Reflection.FieldInfo) -> None: ...
    @overload
    def EmitStoreLocal(self, index: int) -> None: ...
    @overload
    def EmitStoreLocalBoxed(self, index: int) -> None: ...
    @overload
    def EmitStoreLocalToClosure(self, index: int) -> None: ...
    @overload
    def EmitSub(self, type_: System.Type, checked: bool) -> None: ...
    @overload
    def EmitSwitch(self, cases: Generic.Dictionary) -> None: ...
    @overload
    def EmitThrow() -> None: ...
    @overload
    def EmitThrowVoid() -> None: ...
    @overload
    def EmitTypeAs(self, type_: System.Type) -> None: ...
    @overload
    def EmitTypeEquals() -> None: ...
    @overload
    def EmitTypeIs(self, type_: System.Type) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentContinuationsDepth(self) -> int: ...
    @property
    def CurrentStackDepth(self) -> int: ...
    @property
    def MaxStackDepth(self) -> int: ...
    @overload
    def MakeLabel() -> BranchLabel: ...
    @overload
    def MarkLabel(self, label: BranchLabel) -> None: ...
    @overload
    def MarkRuntimeLabel() -> int: ...
    @overload
    def SetDebugCookie(self, cookie: object) -> None: ...
    @overload
    def ToArray() -> InstructionArray: ...

class LabelScopeKind(enum.Enum):
    Statement = 0
    Block = 1
    Switch = 2
    Lambda = 3
    Try = 4
    Catch = 5
    Finally = 6
    Filter = 7
    Expression = 8

class InterpretedFrame(object):
    """    """
    @property
    def Data(self) -> System.System.Array[object]: ...
    @property
    def Closure(self) -> CompilerServices.System.Array[CompilerServices.StrongBox]: ...
    @property
    def StackIndex(self) -> int: ...
    @property
    def InstructionIndex(self) -> int: ...
    @property
    def CurrentAbortHandler(self) -> ExceptionHandler: ...
    @property
    def CurrentFrame(self) -> Utils.ThreadLocal: ...
    @overload
    def Dup() -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> InterpretedFrame: ...
    @overload
    def GetDebugInfo(self, instructionIndex: int) -> DebugInfo: ...
    @overload
    @staticmethod
    def GetExceptionStackTrace(exception: System.Exception) -> System.Array[InterpretedFrameInfo]: ...
    @overload
    def GetStackTraceDebugInfo() -> Generic.IEnumerable: ...
    @overload
    def Goto(self, labelIndex: int, value: object) -> int: ...
    @overload
    @staticmethod
    def GroupStackFrames(stackTrace: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IsInterpretedFrame(method: Reflection.MethodBase) -> bool: ...
    @overload
    def Peek() -> object: ...
    @overload
    def Pop() -> object: ...
    @overload
    def Pop(self, n: int) -> object: ...
    @overload
    def Push(self, value: object) -> None: ...
    @overload
    def Push(self, value: int) -> None: ...
    @overload
    def Push(self, value: bool) -> None: ...
    @overload
    def PushContinuation(self, continuation: int) -> None: ...
    @overload
    def RemoveContinuation() -> None: ...
    @overload
    def VoidGoto(self, labelIndex: int) -> int: ...
    @overload
    def YieldToCurrentContinuation() -> int: ...
    @overload
    def YieldToPendingContinuation() -> int: ...

class ExceptionHandler(object):
    """    """
    @property
    def ExceptionType(self) -> System.Type: ...
    @property
    def StartIndex(self) -> int: ...
    @property
    def EndIndex(self) -> int: ...
    @property
    def LabelIndex(self) -> int: ...
    @property
    def HandlerStartIndex(self) -> int: ...
    @property
    def IsFault(self) -> bool: ...
    @overload
    def IsBetterThan(self, other: ExceptionHandler) -> bool: ...
    @overload
    def Matches(self, exceptionType: System.Type, index: int) -> bool: ...
    @overload
    def ToString() -> str: ...

class DebugInfo(object):
    """    """
    def __init__(self): ...
    @property
    def StartLine(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def FileName(self) -> str: ...
    @property
    def IsClear(self) -> bool: ...
    @overload
    @staticmethod
    def GetMatchingDebugInfo(debugInfos: System.Array[DebugInfo], index: int) -> DebugInfo: ...
    @overload
    def ToString() -> str: ...

class InterpretedFrameInfo(System.ValueType):
    """    """
    def __init__(self, methodName: str, info: DebugInfo): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def DebugInfo(self) -> DebugInfo: ...
    @overload
    def ToString() -> str: ...

class LightCompiler(object):
    """    """
    @overload
    def Compile(self, expr: Expressions.Expression) -> None: ...
    @overload
    def CompileGetBoxedVariable(self, variable: Expressions.ParameterExpression) -> None: ...
    @overload
    def CompileGetVariable(self, variable: Expressions.ParameterExpression) -> None: ...
    @overload
    def CompileParameterExpression(self, expr: Expressions.Expression) -> None: ...
    @overload
    def CompileSetVariable(self, variable: Expressions.ParameterExpression, isVoid: bool) -> None: ...
    @overload
    def EmitCall(self, method: Reflection.MethodInfo) -> None: ...
    @overload
    def EmitCall(self, method: Reflection.MethodInfo, parameters: Reflection.System.Array[Reflection.ParameterInfo]) -> None: ...
    @property
    def Instructions(self) -> InstructionList: ...
    @property
    def Locals(self) -> LocalVariables: ...
    @overload
    def GetBranchLabel(self, target: Expressions.LabelTarget) -> BranchLabel: ...
    @overload
    def PopLabelBlock(self, kind: LabelScopeKind) -> None: ...
    @overload
    def PushLabelBlock(self, type_: LabelScopeKind) -> None: ...

class LightLambdaCompileEventArgs(System.EventArgs):
    """    """
    @property
    def Compiled(self) -> System.Delegate: ...

class LightLambda(object):
    """    """
    @overload
    def Run(self, arguments: System.System.Array[object]) -> object: ...
    @property
    def Compile(self): ...

class LocalVariable(object):
    """    """
    @property
    def Index(self) -> int: ...
    @property
    def InClosure(self) -> bool: ...
    @property
    def InClosureOrBoxed(self) -> bool: ...
    @property
    def IsBoxed(self) -> bool: ...
    @IsBoxed.setter
    def IsBoxed(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class LocalDefinition(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LocalDefinition) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def Parameter(self) -> Expressions.ParameterExpression: ...
    @overload
    def GetHashCode() -> int: ...

class LocalVariables(object):
    """    """
    @overload
    def DefineLocal(self, variable: Expressions.ParameterExpression, start: int) -> LocalDefinition: ...
    @property
    def LocalCount(self) -> int: ...
    @overload
    def GetLocalIndex(self, var: Expressions.ParameterExpression) -> int: ...
    @overload
    def GetOrDefineLocal(self, var: Expressions.ParameterExpression) -> int: ...
    @overload
    def TryGetLocalOrClosure(self, var: Expressions.ParameterExpression) -> (bool, LocalVariable): ...
    @overload
    def UndefineLocal(self, definition: LocalDefinition, end: int) -> None: ...

# endregion
