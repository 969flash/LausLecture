"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Shell"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Providers", "Configuration", "CompiledCode", "DocumentationOperations", "ErrorListener", "ErrorSinkProxyListener", "ExceptionOperations", "LanguageSetup", "MemberDoc", "MemberKind", "ObjectOperations", "OverloadDoc", "ParameterDoc", "ParameterFlags", "ScriptEngine", "ScriptHost", "ScriptIO", "ScriptRuntime", "ScriptRuntimeSetup", "ScriptScope", "ScriptSource", "TokenCategorizer"]
# endregion

# region: Imports
from Microsoft import Scripting
from System import CodeDom
from System import Dynamic
from System import IO
from System import Reflection
from System import Text
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Microsoft.Scripting, Version=1.3.1.0

class CompiledCode(object):
    """    """
    @overload
    def Execute() -> object: ...
    @overload
    def Execute() -> T: ...
    @overload
    def Execute(self, scope: ScriptScope) -> object: ...
    @overload
    def Execute(self, scope: ScriptScope) -> T: ...
    @property
    def DefaultScope(self) -> ScriptScope: ...
    @property
    def Engine(self) -> ScriptEngine: ...

class DocumentationOperations(object):
    """    """
    @overload
    def GetMembers(self, value: object) -> Generic.ICollection: ...
    @overload
    def GetOverloads(self, value: object) -> Generic.ICollection: ...

class ErrorListener(object):
    """    """
    @overload
    def ErrorReported(self, source: ScriptSource, message: str, span: Scripting.SourceSpan, errorCode: int, severity: Scripting.Severity) -> None: ...

class ErrorSinkProxyListener(ErrorListener):
    """    """
    def __init__(self, errorSink: Scripting.ErrorSink): ...
    @overload
    def ErrorReported(self, source: ScriptSource, message: str, span: Scripting.SourceSpan, errorCode: int, severity: Scripting.Severity) -> None: ...

class ExceptionOperations(object):
    """    """
    @overload
    def FormatException(self, exception: System.Exception) -> str: ...
    @overload
    def GetExceptionMessage(self, exception: System.Exception) -> (str, str): ...
    @overload
    def GetStackFrames(self, exception: System.Exception) -> Generic.IList: ...
    @overload
    def HandleException(self, exception: System.Exception) -> bool: ...

class LanguageSetup(object):
    """    """
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeName: str, displayName: str): ...
    @overload
    def __init__(self, typeName: str, displayName: str, names: Generic.IEnumerable, fileExtensions: Generic.IEnumerable): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def ExceptionDetail(self) -> bool: ...
    @property
    def FileExtensions(self) -> Generic.IList: ...
    @property
    def InterpretedMode(self) -> bool: ...
    @property
    def Names(self) -> Generic.IList: ...
    @property
    def NoAdaptiveCompilation(self) -> bool: ...
    @property
    def Options(self) -> Generic.IDictionary: ...
    @property
    def PerfStats(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetOption(self, name: str, defaultValue: T) -> T: ...
    @DisplayName.setter
    def DisplayName(self, value: System.Void): ...
    @ExceptionDetail.setter
    def ExceptionDetail(self, value: System.Void): ...
    @InterpretedMode.setter
    def InterpretedMode(self, value: System.Void): ...
    @NoAdaptiveCompilation.setter
    def NoAdaptiveCompilation(self, value: System.Void): ...
    @PerfStats.setter
    def PerfStats(self, value: System.Void): ...
    @TypeName.setter
    def TypeName(self, value: System.Void): ...

class MemberDoc(object):
    """    """
    def __init__(self, name: str, kind: MemberKind): ...
    @property
    def Kind(self) -> MemberKind: ...
    @property
    def Name(self) -> str: ...

class MemberKind(enum.Enum):
    None_ = 0
    Class = 1
    Delegate = 2
    Enum = 3
    Event = 4
    Field = 5
    Function = 6
    Module = 7
    Property = 8
    Constant = 9
    EnumMember = 10
    Instance = 11
    Method = 12
    Namespace = 13

class ObjectOperations(object):
    """    """
    @overload
    def Add(self, self: object, other: object) -> object: ...
    @overload
    def BitwiseAnd(self, self: object, other: object) -> object: ...
    @overload
    def BitwiseOr(self, self: object, other: object) -> object: ...
    @overload
    def ContainsMember(self, obj: object, name: str) -> bool: ...
    @overload
    def ContainsMember(self, obj: object, name: str, ignoreCase: bool) -> bool: ...
    @overload
    def ConvertTo(self, obj: object) -> T: ...
    @overload
    def ConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def CreateInstance(self, obj: object, parameters: System.System.Array[object]) -> object: ...
    @overload
    def Divide(self, self: object, other: object) -> object: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: object) -> object: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: TTarget) -> TResult: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: TTarget, other: TOther) -> TResult: ...
    @overload
    def DoOperation(self, operation: Expressions.ExpressionType, target: object, other: object) -> object: ...
    @overload
    def Equal(self, self: object, other: object) -> bool: ...
    @overload
    def ExclusiveOr(self, self: object, other: object) -> object: ...
    @overload
    def ExplicitConvertTo(self, obj: object) -> T: ...
    @overload
    def ExplicitConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def Format(self, obj: object) -> str: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    @overload
    def GetCallSignatures(self, obj: object) -> Generic.IList: ...
    @overload
    def GetDocumentation(self, obj: object) -> str: ...
    @overload
    def GetMember(self, obj: object, name: str) -> object: ...
    @overload
    def GetMember(self, obj: object, name: str) -> T: ...
    @overload
    def GetMember(self, obj: object, name: str, ignoreCase: bool) -> object: ...
    @overload
    def GetMember(self, obj: object, name: str, ignoreCase: bool) -> T: ...
    @overload
    def GetMemberNames(self, obj: object) -> Generic.IList: ...
    @overload
    def GreaterThan(self, self: object, other: object) -> bool: ...
    @overload
    def GreaterThanOrEqual(self, self: object, other: object) -> bool: ...
    @overload
    def ImplicitConvertTo(self, obj: object) -> T: ...
    @overload
    def ImplicitConvertTo(self, obj: object, type_: System.Type) -> object: ...
    @overload
    def Invoke(self, obj: object, parameters: System.System.Array[object]) -> object: ...
    @overload
    def InvokeMember(self, obj: object, memberName: str, parameters: System.System.Array[object]) -> object: ...
    @overload
    def IsCallable(self, obj: object) -> bool: ...
    @overload
    def LeftShift(self, self: object, other: object) -> object: ...
    @overload
    def LessThan(self, self: object, other: object) -> bool: ...
    @overload
    def LessThanOrEqual(self, self: object, other: object) -> bool: ...
    @overload
    def Modulo(self, self: object, other: object) -> object: ...
    @overload
    def Multiply(self, self: object, other: object) -> object: ...
    @overload
    def NotEqual(self, self: object, other: object) -> bool: ...
    @overload
    def Power(self, self: object, other: object) -> object: ...
    @overload
    def RemoveMember(self, obj: object, name: str) -> None: ...
    @overload
    def RemoveMember(self, obj: object, name: str, ignoreCase: bool) -> None: ...
    @overload
    def RightShift(self, self: object, other: object) -> object: ...
    @overload
    def SetMember(self, obj: object, name: str, value: object) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: T) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: object, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: object, name: str, value: T, ignoreCase: bool) -> None: ...
    @overload
    def Subtract(self, self: object, other: object) -> object: ...
    @overload
    def TryConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...
    @overload
    def TryExplicitConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryExplicitConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...
    @overload
    def TryGetMember(self, obj: object, name: str) -> (bool, object): ...
    @overload
    def TryGetMember(self, obj: object, name: str, ignoreCase: bool) -> (bool, object): ...
    @overload
    def TryImplicitConvertTo(self, obj: object) -> (bool, T): ...
    @overload
    def TryImplicitConvertTo(self, obj: object, type_: System.Type) -> (bool, object): ...

class OverloadDoc(object):
    """    """
    @overload
    def __init__(self, name: str, documentation: str, parameters: Generic.ICollection): ...
    @overload
    def __init__(self, name: str, documentation: str, parameters: Generic.ICollection, returnParameter: ParameterDoc): ...
    @property
    def Documentation(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> Generic.ICollection: ...
    @property
    def ReturnParameter(self) -> ParameterDoc: ...

class ParameterDoc(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, paramFlags: ParameterFlags): ...
    @overload
    def __init__(self, name: str, typeName: str): ...
    @overload
    def __init__(self, name: str, typeName: str, documentation: str): ...
    @overload
    def __init__(self, name: str, typeName: str, documentation: str, paramFlags: ParameterFlags): ...
    @property
    def Documentation(self) -> str: ...
    @property
    def Flags(self) -> ParameterFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> str: ...

class ParameterFlags(enum.Enum):
    None_ = 0
    ParamsArray = 1
    ParamsDict = 2

class ScriptEngine(object):
    """    """
    @overload
    def CreateOperations() -> ObjectOperations: ...
    @overload
    def CreateOperations(self, scope: ScriptScope) -> ObjectOperations: ...
    @overload
    def CreateScope() -> ScriptScope: ...
    @overload
    def CreateScope(self, dictionary: Generic.IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, storage: Dynamic.IDynamicMetaObjectProvider) -> ScriptScope: ...
    @overload
    def CreateScriptSource(self, content: CodeDom.CodeObject) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: Scripting.StreamContentProvider, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeDom.CodeObject, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeDom.CodeObject, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, contentProvider: Scripting.TextContentProvider, path: str, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: Scripting.StreamContentProvider, path: str, encoding: Text.Encoding) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeDom.CodeObject, path: str, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: Scripting.StreamContentProvider, path: str, encoding: Text.Encoding, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str, encoding: Text.Encoding) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str, encoding: Text.Encoding, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, expression: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, code: str, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, expression: str, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, code: str, path: str, kind: Scripting.SourceCodeKind) -> ScriptSource: ...
    @overload
    def Execute(self, expression: str) -> T: ...
    @overload
    def Execute(self, expression: str) -> object: ...
    @overload
    def Execute(self, expression: str, scope: ScriptScope) -> T: ...
    @overload
    def Execute(self, expression: str, scope: ScriptScope) -> object: ...
    @overload
    def ExecuteFile(self, path: str) -> ScriptScope: ...
    @overload
    def ExecuteFile(self, path: str, scope: ScriptScope) -> ScriptScope: ...
    @property
    def LanguageVersion(self) -> System.Version: ...
    @property
    def Operations(self) -> ObjectOperations: ...
    @property
    def Runtime(self) -> ScriptRuntime: ...
    @property
    def Setup(self) -> LanguageSetup: ...
    @overload
    def GetCompilerOptions() -> Scripting.CompilerOptions: ...
    @overload
    def GetCompilerOptions(self, scope: ScriptScope) -> Scripting.CompilerOptions: ...
    @overload
    def GetScope(self, path: str) -> ScriptScope: ...
    @overload
    def GetSearchPaths() -> Generic.ICollection: ...
    @overload
    def GetService(self, args: System.System.Array[object]) -> TService: ...
    @overload
    def SetSearchPaths(self, paths: Generic.ICollection) -> None: ...

class ScriptHost(object):
    """    """
    def __init__(self): ...
    @property
    def PlatformAdaptationLayer(self) -> Scripting.PlatformAdaptationLayer: ...
    @property
    def Runtime(self) -> ScriptRuntime: ...

class ScriptIO(object):
    """    """
    @property
    def ErrorEncoding(self) -> Text.Encoding: ...
    @property
    def ErrorStream(self) -> IO.Stream: ...
    @property
    def ErrorWriter(self) -> IO.TextWriter: ...
    @property
    def InputEncoding(self) -> Text.Encoding: ...
    @property
    def InputReader(self) -> IO.TextReader: ...
    @property
    def InputStream(self) -> IO.Stream: ...
    @property
    def OutputEncoding(self) -> Text.Encoding: ...
    @property
    def OutputStream(self) -> IO.Stream: ...
    @property
    def OutputWriter(self) -> IO.TextWriter: ...
    @overload
    def RedirectToConsole() -> None: ...
    @overload
    def SetErrorOutput(self, stream: IO.Stream, encoding: Text.Encoding) -> None: ...
    @overload
    def SetErrorOutput(self, stream: IO.Stream, writer: IO.TextWriter) -> None: ...
    @overload
    def SetInput(self, stream: IO.Stream, encoding: Text.Encoding) -> None: ...
    @overload
    def SetInput(self, stream: IO.Stream, reader: IO.TextReader, encoding: Text.Encoding) -> None: ...
    @overload
    def SetOutput(self, stream: IO.Stream, writer: IO.TextWriter) -> None: ...
    @overload
    def SetOutput(self, stream: IO.Stream, encoding: Text.Encoding) -> None: ...

class ScriptRuntime(object):
    """    """
    def __init__(self, setup: ScriptRuntimeSetup): ...
    @overload
    @staticmethod
    def CreateFromConfiguration() -> ScriptRuntime: ...
    @overload
    def CreateOperations() -> ObjectOperations: ...
    @overload
    def CreateScope() -> ScriptScope: ...
    @overload
    def CreateScope(self, dictionary: Generic.IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, storage: Dynamic.IDynamicMetaObjectProvider) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str, storage: Generic.IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str, storage: Dynamic.IDynamicMetaObjectProvider) -> ScriptScope: ...
    @overload
    def ExecuteFile(self, path: str) -> ScriptScope: ...
    @property
    def Globals(self) -> ScriptScope: ...
    @property
    def Host(self) -> ScriptHost: ...
    @property
    def IO(self) -> ScriptIO: ...
    @property
    def Operations(self) -> ObjectOperations: ...
    @property
    def Setup(self) -> ScriptRuntimeSetup: ...
    @overload
    def GetEngine(self, languageName: str) -> ScriptEngine: ...
    @overload
    def GetEngineByFileExtension(self, fileExtension: str) -> ScriptEngine: ...
    @overload
    def GetEngineByTypeName(self, assemblyQualifiedTypeName: str) -> ScriptEngine: ...
    @overload
    def LoadAssembly(self, assembly: Reflection.Assembly) -> None: ...
    @Globals.setter
    def Globals(self, value: System.Void): ...
    @overload
    def Shutdown() -> None: ...
    @overload
    def TryGetEngine(self, languageName: str) -> (bool, ScriptEngine): ...
    @overload
    def TryGetEngineByFileExtension(self, fileExtension: str) -> (bool, ScriptEngine): ...
    @overload
    def UseFile(self, path: str) -> ScriptScope: ...

class ScriptRuntimeSetup(object):
    """    """
    def __init__(self): ...
    @property
    def DebugMode(self) -> bool: ...
    @property
    def HostArguments(self) -> Generic.IList: ...
    @property
    def HostType(self) -> System.Type: ...
    @property
    def LanguageSetups(self) -> Generic.IList: ...
    @property
    def Options(self) -> Generic.IDictionary: ...
    @property
    def PrivateBinding(self) -> bool: ...
    @overload
    @staticmethod
    def ReadConfiguration() -> ScriptRuntimeSetup: ...
    @overload
    @staticmethod
    def ReadConfiguration(configFileStream: IO.Stream) -> ScriptRuntimeSetup: ...
    @overload
    @staticmethod
    def ReadConfiguration(configFilePath: str) -> ScriptRuntimeSetup: ...
    @DebugMode.setter
    def DebugMode(self, value: System.Void): ...
    @HostArguments.setter
    def HostArguments(self, value: System.Void): ...
    @HostType.setter
    def HostType(self, value: System.Void): ...
    @PrivateBinding.setter
    def PrivateBinding(self, value: System.Void): ...

class ScriptScope(object):
    """    """
    @overload
    def ContainsVariable(self, name: str) -> bool: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    @overload
    def GetItems() -> Generic.IEnumerable: ...
    @overload
    def GetVariable(self, name: str) -> object: ...
    @overload
    def GetVariable(self, name: str) -> T: ...
    @overload
    def GetVariableNames() -> Generic.IEnumerable: ...
    @overload
    def RemoveVariable(self, name: str) -> bool: ...
    @overload
    def SetVariable(self, name: str, value: object) -> None: ...
    @overload
    def TryGetVariable(self, name: str) -> (bool, object): ...
    @overload
    def TryGetVariable(self, name: str) -> (bool, T): ...

class ScriptSource(object):
    """    """
    @overload
    def Compile() -> CompiledCode: ...
    @overload
    def Compile(self, errorListener: ErrorListener) -> CompiledCode: ...
    @overload
    def Compile(self, compilerOptions: Scripting.CompilerOptions) -> CompiledCode: ...
    @overload
    def Compile(self, compilerOptions: Scripting.CompilerOptions, errorListener: ErrorListener) -> CompiledCode: ...
    @overload
    def DetectEncoding() -> Text.Encoding: ...
    @overload
    def Execute() -> object: ...
    @overload
    def Execute() -> T: ...
    @overload
    def Execute(self, scope: ScriptScope) -> object: ...
    @overload
    def Execute(self, scope: ScriptScope) -> T: ...
    @overload
    def ExecuteProgram() -> int: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    @property
    def Kind(self) -> Scripting.SourceCodeKind: ...
    @property
    def Path(self) -> str: ...
    @overload
    def GetCode() -> str: ...
    @overload
    def GetCodeLine(self, line: int) -> str: ...
    @overload
    def GetCodeLines(self, start: int, count: int) -> System.System.Array[str]: ...
    @overload
    def GetCodeProperties() -> Scripting.ScriptCodeParseResult: ...
    @overload
    def GetCodeProperties(self, options: Scripting.CompilerOptions) -> Scripting.ScriptCodeParseResult: ...
    @overload
    def GetReader() -> Scripting.SourceCodeReader: ...
    @overload
    def MapLine(self, line: int) -> int: ...
    @overload
    def MapLine(self, span: Scripting.SourceSpan) -> Scripting.SourceSpan: ...
    @overload
    def MapLine(self, location: Scripting.SourceLocation) -> Scripting.SourceLocation: ...
    @overload
    def MapLinetoFile(self, line: int) -> str: ...

class TokenCategorizer(object):
    """    """
    @property
    def CurrentPosition(self) -> Scripting.SourceLocation: ...
    @property
    def CurrentState(self) -> object: ...
    @property
    def ErrorSink(self) -> Scripting.ErrorSink: ...
    @property
    def IsRestartable(self) -> bool: ...
    @overload
    def Initialize(self, state: object, scriptSource: ScriptSource, initialLocation: Scripting.SourceLocation) -> None: ...
    @overload
    def ReadToken() -> Scripting.TokenInfo: ...
    @overload
    def ReadTokens(self, characterCount: int) -> Generic.IEnumerable: ...
    @ErrorSink.setter
    def ErrorSink(self, value: System.Void): ...
    @overload
    def SkipToken() -> bool: ...
    @overload
    def SkipTokens(self, characterCount: int) -> bool: ...

# endregion

