"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["SafeHandles", "Registry", "RegistryHive", "RegistryValueKind", "RegistryKey", "RegistryKeyPermissionCheck", "RegistryOptions", "RegistryValueOptions", "RegistryView"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System.Runtime import CompilerServices
from System.Security import AccessControl
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["PowerModeChangedEventArgs", "PowerModeChangedEventHandler", "PowerModes", "SessionEndedEventArgs", "SessionEndedEventHandler", "SessionEndingEventArgs", "SessionEndingEventHandler", "SessionEndReasons", "SessionSwitchEventArgs", "SessionSwitchEventHandler", "SessionSwitchReason", "SystemEvents", "TimerElapsedEventArgs", "TimerElapsedEventHandler", "UserPreferenceCategory", "UserPreferenceChangedEventArgs", "UserPreferenceChangedEventHandler", "UserPreferenceChangingEventArgs", "UserPreferenceChangingEventHandler"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["SafeHandles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Microsoft.Win32.SystemEvents, Version=7.0.0.0

class PowerModeChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, mode: PowerModes): ...
    @property
    def Mode(self) -> PowerModes: ...

class PowerModeChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PowerModeChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PowerModeChangedEventArgs) -> None: ...

class PowerModes(enum.Enum):
    Resume = 1
    StatusChange = 2
    Suspend = 3

class SessionEndedEventArgs(System.EventArgs):
    """    """
    def __init__(self, reason: SessionEndReasons): ...
    @property
    def Reason(self) -> SessionEndReasons: ...

class SessionEndedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SessionEndedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SessionEndedEventArgs) -> None: ...

class SessionEndingEventArgs(System.EventArgs):
    """    """
    def __init__(self, reason: SessionEndReasons): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def Reason(self) -> SessionEndReasons: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...

class SessionEndingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SessionEndingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SessionEndingEventArgs) -> None: ...

class SessionEndReasons(enum.Enum):
    Logoff = 1
    SystemShutdown = 2

class SessionSwitchEventArgs(System.EventArgs):
    """    """
    def __init__(self, reason: SessionSwitchReason): ...
    @property
    def Reason(self) -> SessionSwitchReason: ...

class SessionSwitchEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SessionSwitchEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SessionSwitchEventArgs) -> None: ...

class SessionSwitchReason(enum.Enum):
    ConsoleConnect = 1
    ConsoleDisconnect = 2
    RemoteConnect = 3
    RemoteDisconnect = 4
    SessionLogon = 5
    SessionLogoff = 6
    SessionLock = 7
    SessionUnlock = 8
    SessionRemoteControl = 9

class SystemEvents(object):
    """    """
    @overload
    @staticmethod
    def CreateTimer(interval: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def InvokeOnEventsThread(method: System.Delegate) -> None: ...
    @overload
    @staticmethod
    def KillTimer(timerId: System.IntPtr) -> None: ...
    @property
    def DisplaySettingsChanging(self): ...
    @property
    def DisplaySettingsChanged(self): ...
    @property
    def EventsThreadShutdown(self): ...
    @property
    def InstalledFontsChanged(self): ...
    @property
    def LowMemory(self): ...
    @property
    def PaletteChanged(self): ...
    @property
    def PowerModeChanged(self): ...
    @property
    def SessionEnded(self): ...
    @property
    def SessionEnding(self): ...
    @property
    def SessionSwitch(self): ...
    @property
    def TimeChanged(self): ...
    @property
    def TimerElapsed(self): ...
    @property
    def UserPreferenceChanged(self): ...
    @property
    def UserPreferenceChanging(self): ...

class TimerElapsedEventArgs(System.EventArgs):
    """    """
    def __init__(self, timerId: System.IntPtr): ...
    @property
    def TimerId(self) -> System.IntPtr: ...

class TimerElapsedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TimerElapsedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TimerElapsedEventArgs) -> None: ...

class UserPreferenceCategory(enum.Enum):
    Accessibility = 1
    Color = 2
    Desktop = 3
    General = 4
    Icon = 5
    Keyboard = 6
    Menu = 7
    Mouse = 8
    Policy = 9
    Power = 10
    Screensaver = 11
    Window = 12
    Locale = 13
    VisualStyle = 14

class UserPreferenceChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, category: UserPreferenceCategory): ...
    @property
    def Category(self) -> UserPreferenceCategory: ...

class UserPreferenceChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UserPreferenceChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UserPreferenceChangedEventArgs) -> None: ...

class UserPreferenceChangingEventArgs(System.EventArgs):
    """    """
    def __init__(self, category: UserPreferenceCategory): ...
    @property
    def Category(self) -> UserPreferenceCategory: ...

class UserPreferenceChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UserPreferenceChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UserPreferenceChangingEventArgs) -> None: ...

# endregion

# region: Microsoft.Win32.Registry, Version=7.0.0.0

class Registry(object):
    """    """
    @property
    def CurrentUser(self) -> RegistryKey: ...
    @property
    def LocalMachine(self) -> RegistryKey: ...
    @property
    def ClassesRoot(self) -> RegistryKey: ...
    @property
    def Users(self) -> RegistryKey: ...
    @property
    def PerformanceData(self) -> RegistryKey: ...
    @property
    def CurrentConfig(self) -> RegistryKey: ...
    @overload
    @staticmethod
    def GetValue(keyName: str, valueName: str, defaultValue: object) -> object: ...
    @overload
    @staticmethod
    def SetValue(keyName: str, valueName: str, value: object) -> None: ...
    @overload
    @staticmethod
    def SetValue(keyName: str, valueName: str, value: object, valueKind: RegistryValueKind) -> None: ...

class RegistryHive(enum.Enum):
    ClassesRoot = -2147483648
    CurrentUser = -2147483647
    LocalMachine = -2147483646
    Users = -2147483645
    PerformanceData = -2147483644
    CurrentConfig = -2147483643

class RegistryValueKind(enum.Enum):
    Unknown = 0
    String = 1
    ExpandString = 2
    Binary = 3
    DWord = 4
    MultiString = 7
    QWord = 11
    None_ = -1

class RegistryKey(System.MarshalByRefObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CreateSubKey(self, subkey: str) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, writable: bool) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, writable: bool, options: RegistryOptions) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registrySecurity: AccessControl.RegistrySecurity) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registryOptions: RegistryOptions) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registryOptions: RegistryOptions, registrySecurity: AccessControl.RegistrySecurity) -> RegistryKey: ...
    @overload
    def DeleteSubKey(self, subkey: str) -> None: ...
    @overload
    def DeleteSubKey(self, subkey: str, throwOnMissingSubKey: bool) -> None: ...
    @overload
    def DeleteSubKeyTree(self, subkey: str) -> None: ...
    @overload
    def DeleteSubKeyTree(self, subkey: str, throwOnMissingSubKey: bool) -> None: ...
    @overload
    def DeleteValue(self, name: str) -> None: ...
    @overload
    def DeleteValue(self, name: str, throwOnMissingValue: bool) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    @staticmethod
    def FromHandle(handle: SafeHandles.SafeRegistryHandle) -> RegistryKey: ...
    @overload
    @staticmethod
    def FromHandle(handle: SafeHandles.SafeRegistryHandle, view: RegistryView) -> RegistryKey: ...
    @property
    def Handle(self) -> SafeHandles.SafeRegistryHandle: ...
    @property
    def Name(self) -> str: ...
    @property
    def SubKeyCount(self) -> int: ...
    @property
    def ValueCount(self) -> int: ...
    @property
    def View(self) -> RegistryView: ...
    @overload
    def GetAccessControl() -> AccessControl.RegistrySecurity: ...
    @overload
    def GetAccessControl(self, includeSections: AccessControl.AccessControlSections) -> AccessControl.RegistrySecurity: ...
    @overload
    def GetSubKeyNames() -> System.System.Array[str]: ...
    @overload
    def GetValue(self, name: str) -> object: ...
    @overload
    def GetValue(self, name: str, defaultValue: object) -> object: ...
    @overload
    def GetValue(self, name: str, defaultValue: object, options: RegistryValueOptions) -> object: ...
    @overload
    def GetValueKind(self, name: str) -> RegistryValueKind: ...
    @overload
    def GetValueNames() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def OpenBaseKey(hKey: RegistryHive, view: RegistryView) -> RegistryKey: ...
    @overload
    @staticmethod
    def OpenRemoteBaseKey(hKey: RegistryHive, machineName: str) -> RegistryKey: ...
    @overload
    @staticmethod
    def OpenRemoteBaseKey(hKey: RegistryHive, machineName: str, view: RegistryView) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, rights: AccessControl.RegistryRights) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, writable: bool) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, permissionCheck: RegistryKeyPermissionCheck) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, permissionCheck: RegistryKeyPermissionCheck, rights: AccessControl.RegistryRights) -> RegistryKey: ...
    @overload
    def SetAccessControl(self, registrySecurity: AccessControl.RegistrySecurity) -> None: ...
    @overload
    def SetValue(self, name: str, value: object) -> None: ...
    @overload
    def SetValue(self, name: str, value: object, valueKind: RegistryValueKind) -> None: ...
    @overload
    def ToString() -> str: ...

class RegistryKeyPermissionCheck(enum.Enum):
    Default = 0
    ReadSubTree = 1
    ReadWriteSubTree = 2

class RegistryOptions(enum.Enum):
    None_ = 0
    Volatile = 1

class RegistryValueOptions(enum.Enum):
    None_ = 0
    DoNotExpandEnvironmentNames = 1

class RegistryView(enum.Enum):
    Default = 0
    Registry64 = 256
    Registry32 = 512

# endregion

