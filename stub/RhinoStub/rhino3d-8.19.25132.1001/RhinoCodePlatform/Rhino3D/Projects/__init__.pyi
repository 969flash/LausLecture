"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Plugin", "Rhino3DCommandEditable", "Rhino3DComponentEditable", "Rhino3DComponentSourceEditable", "Rhino3DProjectEditable", "Rhino3DProjectServer"]
# endregion

# region: Imports
from Rhino import Commands
from Rhino.Runtime import Code
from Rhino.Runtime.Code import Diagnostics
from Rhino.Runtime.Code import Display
from Rhino.Runtime.Code import Editing
from Rhino.Runtime.Code import Execution
from Rhino.Runtime.Code import Languages
from Rhino.Runtime.Code import Platform
from Rhino.Runtime.Code import Projects
from Rhino.Runtime.Code import Serialization
from RhinoCodePlatform import GH
from RhinoCodePlatform import GH1
from RhinoCodePlatform import Projects
from RhinoCodePlatform.GH import Context
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: RhinoCodePlatform.Rhino3D, Version=8.19.25132.1001

class Rhino3DCommandEditable(Projects.Rhino3DCommand):
    """    """
    @overload
    def __init__(self, code: Projects.Rhino3DCommand): ...
    @overload
    def __init__(self, kind: Projects.Rhino3DCommandKind, icode: Code.ICode): ...
    @overload
    def CanEdit() -> bool: ...
    @overload
    def Clone() -> Projects.ProjectCode: ...
    @overload
    def Edit(self, library: Code.ILibrary, theme: Editing.EditorTheme) -> Editing.ITemplateEditContext: ...
    @property
    def IsExcluded(self) -> bool: ...
    @overload
    def OnEdited() -> None: ...
    @IsExcluded.setter
    def IsExcluded(self, value: System.Void): ...
    @overload
    def SetExposure(self, project: Projects.Rhino3DProject) -> None: ...
    @overload
    def Write(self, writer: Serialization.IWriter) -> None: ...
    @property
    def Changed(self): ...

class Rhino3DComponentEditable(Projects.Rhino3DProjectCode):
    """    """
    @overload
    def __init__(self, component: Rhino3DComponentEditable): ...
    @overload
    def __init__(self, source: Rhino3DComponentSourceEditable, script: GH1.IScriptArchive): ...
    @overload
    def CanEdit() -> bool: ...
    @overload
    def Clone() -> Projects.ProjectCode: ...
    @overload
    def CreateCode() -> Code.Code: ...
    @overload
    def Edit(self, library: Code.ILibrary, theme: Editing.EditorTheme) -> Editing.ITemplateEditContext: ...
    @property
    def Description(self) -> str: ...
    @property
    def Image(self) -> Display.ImageSet: ...
    @property
    def Nickname(self) -> str: ...
    @property
    def ScriptExposure(self) -> GH.ScriptExposure: ...
    @property
    def SubCategory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @overload
    def OnEdited() -> None: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @Nickname.setter
    def Nickname(self, value: System.Void): ...
    @ScriptExposure.setter
    def ScriptExposure(self, value: System.Void): ...
    @SubCategory.setter
    def SubCategory(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @overload
    def SetExposure(self, project: Projects.Rhino3DProject) -> None: ...
    @overload
    def TryDiagnose() -> (bool, Diagnostics.Diagnosis): ...
    @property
    def Changed(self): ...

class Rhino3DComponentSourceEditable(Projects.Rhino3DComponentSource):
    """    """
    @overload
    def __init__(self, code: Code.ICode): ...
    @overload
    def __init__(self, source: Projects.Rhino3DComponentSource): ...
    @overload
    def BeginWatch() -> None: ...
    @overload
    def CanEdit() -> bool: ...
    @overload
    def Clone() -> Projects.ProjectCode: ...
    @overload
    def EndWatch() -> None: ...
    @overload
    def GetEditableComponents() -> Generic.IEnumerable: ...
    @overload
    def OnEdited() -> None: ...
    @overload
    def Write(self, writer: Serialization.IWriter) -> None: ...
    @property
    def Changed(self): ...

class Rhino3DProjectEditable(Projects.Rhino3DProject):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, code: Projects.Rhino3DProjectCode) -> Projects.Rhino3DProjectCode: ...
    @overload
    def Add(self, path: Projects.Rhino3DProjectPath, code: Projects.Rhino3DProjectCode) -> Projects.Rhino3DProjectCode: ...
    @property
    def BuildTargets(self) -> Generic.IEnumerable: ...
    @property
    def PublishTargets(self) -> Generic.IEnumerable: ...
    @property
    def Server(self) -> Projects.IProjectServer: ...
    @overload
    def Remove(self, path: Projects.Rhino3DProjectPath) -> bool: ...
    @property
    def LibrariesSet(self): ...
    @property
    def ResourcesSet(self): ...
    @property
    def StorageSet(self): ...
    @property
    def Changed(self): ...

class Rhino3DProjectServer(Projects.BaseRhino3DProjectServer):
    """    """
    def __init__(self): ...
    @property
    def RHINO_COMMAND_ARGNAME(self) -> str: ...
    @property
    def RHINO_COMMAND_RESULT_ARGNAME(self) -> str: ...
    @property
    def RHINO_DOCUMENT_ARGNAME(self) -> str: ...
    @property
    def RHINO_RUNMODE_ARGNAME(self) -> str: ...
    @property
    def RHINO_ISINTERACTIVE_ARGNAME(self) -> str: ...
    @overload
    def CreateContext(self, name: str) -> Execution.RunContext: ...
    @overload
    def CreateContext(self, command: Commands.Command, doc: Rhino.RhinoDoc, mode: Commands.RunMode, name: str) -> Execution.RunContext: ...
    @overload
    def CreateProject() -> Projects.IProject: ...
    @property
    def Instance(self) -> Rhino3DProjectServer: ...
    @property
    def MockCommand(self) -> Commands.Command: ...
    @property
    def Platform(self) -> Platform.IPlatform: ...
    @overload
    def GetArguments(self, languageSpec: Languages.LanguageSpec) -> Generic.IEnumerable: ...
    @overload
    def GetArguments(self, project: Projects.IProject, code: Code.Code) -> Generic.IEnumerable: ...
    @overload
    def PrepareContext(self, context: Execution.RunContext, cmdScript: Context.IScriptCommand) -> None: ...
    @overload
    def TryInvoke(self, endpoint: str, context: Platform.InvokeContext) -> bool: ...
    @overload
    def TryPrepareContext(self, languageSpec: Languages.LanguageSpec, context: Execution.RunContext) -> bool: ...
    @overload
    def TryPrepareContext(self, project: Projects.IProject, code: Code.Code, context: Execution.RunContext) -> bool: ...
    @overload
    @staticmethod
    def TryRenderSvg(svg: Display.Svg, size: int) -> (bool, Display.Bitmap): ...

# endregion
