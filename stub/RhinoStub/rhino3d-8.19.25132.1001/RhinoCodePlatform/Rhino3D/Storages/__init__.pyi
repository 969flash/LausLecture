"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["EtoFileStorageSite", "EtoFileStorageSiteContext", "EtoFileStorageSiteFilter", "RhinoFilesStorageSite"]
# endregion

# region: Imports
from Eto import Forms
from Rhino.Runtime.Code import Languages
from Rhino.Runtime.Code import Storage
from Rhino.Runtime.Code.Storage import Local
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: RhinoCodePlatform.Rhino3D, Version=8.19.25132.1001

class EtoFileStorageSite(Local.FileStorageSite):
    """    """
    def __init__(self): ...
    @overload
    def CanOpen() -> bool: ...
    @property
    def Id(self) -> Storage.StorageSiteIdentity: ...
    @overload
    def Open(self, parent: TControl, _: Storage.StorageSiteTheme) -> Storage.IStorageSiteContext: ...

class EtoFileStorageSiteContext(Storage.StorageSiteContext):
    """    """
    def __init__(self, site: EtoFileStorageSite, parent: Forms.Control): ...
    @overload
    def GetPath(self, prompt: str) -> System.Uri: ...
    @overload
    def Load(self, prompt: str) -> Storage.IStorage: ...
    @overload
    def Load(self, filter_: Storage.IStorageFilter, prompt: str) -> Storage.IStorage: ...
    @overload
    def Load(self, filters: Generic.IEnumerable, prompt: str) -> Storage.IStorage: ...
    @overload
    def LoadMany(self, prompt: str) -> Generic.IEnumerable: ...
    @overload
    def LoadMany(self, filter_: Storage.IStorageFilter, prompt: str) -> Generic.IEnumerable: ...
    @overload
    def LoadMany(self, filters: Generic.IEnumerable, prompt: str) -> Generic.IEnumerable: ...
    @overload
    def Store(self, prompt: str, title: str) -> Storage.IStorage: ...
    @overload
    def Store(self, filter_: Storage.IStorageFilter, prompt: str, title: str) -> Storage.IStorage: ...
    @overload
    def Store(self, filters: Generic.IEnumerable, prompt: str, title: str) -> Storage.IStorage: ...

class EtoFileStorageSiteFilter(Forms.FileFilter):
    """    """
    def __init__(self, filter_: Storage.IStorageExtensionFilter): ...
    @overload
    def Equals(self, other: EtoFileStorageSiteFilter) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def StorageFilter(self) -> Storage.IStorageExtensionFilter: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def SetFilter(dialog: Forms.FileDialog, filter_: Storage.IStorageFilter) -> None: ...
    @overload
    @staticmethod
    def SetFilters(dialog: Forms.FileDialog, filters: Generic.IEnumerable, defaultFilter: Storage.IStorageFilter) -> None: ...
    @overload
    def ToString() -> str: ...

class RhinoFilesStorageSite(Local.FileStorageSite):
    """    """
    def __init__(self): ...
    @overload
    def CanOpen() -> bool: ...
    @overload
    def Delete(self, uri: System.Uri) -> bool: ...
    @overload
    def Exists(self, uri: System.Uri) -> bool: ...
    @property
    def Id(self) -> Storage.StorageSiteIdentity: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def IsBaseOf(self, uri: System.Uri) -> (bool, System.Uri): ...
    @overload
    def Load(self, uri: System.Uri) -> Local.FileStorage: ...
    @overload
    def Move(self, uri: System.Uri, newUri: System.Uri) -> bool: ...
    @overload
    def Open(self, parent: TControl, theme: Storage.StorageSiteTheme) -> Storage.IStorageSiteContext: ...
    @overload
    def Query(self, uri: System.Uri, languageSpec: Languages.LanguageSpec) -> Storage.IStorageSiteLibrary: ...
    @overload
    def QueryFast(self, uri: System.Uri, languageSpec: Languages.LanguageSpec) -> Storage.IStorageSiteFastLibrary: ...
    @overload
    def Store(self, uri: System.Uri) -> Local.FileStorage: ...

# endregion
