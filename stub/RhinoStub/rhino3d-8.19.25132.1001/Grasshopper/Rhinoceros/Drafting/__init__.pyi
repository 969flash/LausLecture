"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Params", "ModelHatchLine", "ModelHatchPattern", "ModelLinetype", "ModelLineWidth", "ObjectDrafting", "ObjectDraftingColor", "ObjectDraftingLinetype", "ObjectDraftingLineWidth", "Attributes", "Value"]
# endregion

# region: Imports
from Grasshopper import Rhinoceros
from Grasshopper.Kernel import Types
from Rhino import DocObjects
from Rhino import Geometry
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class ModelHatchLine(Rhinoceros.ModelValue):
    """Represents a Rhino model hatch line.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, hatchLine: DocObjects.HatchLine): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelHatchLine: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Angle(self) -> float: ...
    @property
    def Base(self) -> Geometry.Point2d: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Offset(self) -> Geometry.Vector2d: ...
    @property
    def Segments(self) -> Generic.IReadOnlyList: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def ToHatchLine() -> DocObjects.HatchLine: ...
    @overload
    def ToString() -> str: ...

class ModelHatchPattern(Rhinoceros.ModelComponentContent):
    """Represents a Rhino model hatch pattern. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, pattern: DocObjects.HatchPattern): ...
    @overload
    def __init__(self, id_: System.Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelHatchPattern: ...
    @property
    def FillType(self) -> System.Nullable: ...
    @property
    def Lines(self) -> Generic.IReadOnlyList: ...
    @property
    def Unset(self) -> ModelHatchPattern: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelLinetype(Rhinoceros.ModelComponentContent):
    """Represents a Rhino model linetype. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, linetype: DocObjects.Linetype): ...
    @overload
    def __init__(self, id_: System.Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelLinetype: ...
    @property
    def CapStyle(self) -> System.Nullable: ...
    @property
    def JoinStyle(self) -> System.Nullable: ...
    @property
    def Name(self) -> Rhinoceros.ModelContentName: ...
    @property
    def Segments(self) -> Generic.IReadOnlyList: ...
    @property
    def TaperPoints(self) -> Generic.IReadOnlyList: ...
    @property
    def Unset(self) -> ModelLinetype: ...
    @property
    def Width(self) -> System.Nullable: ...
    @property
    def WidthUnits(self) -> System.Nullable: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelLineWidth(Types.GH_Number):
    """Represents a Rhino model linetype.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def Duplicate() -> Types.IGH_Goo: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelLineWidth) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ObjectDrafting(Rhinoceros.ModelValue):
    """Represents a Rhino object drafting attributes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDrafting: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def LineScale(self) -> System.Nullable: ...
    @property
    def Linetype(self) -> System.Nullable: ...
    @property
    def LineWidth(self) -> System.Nullable: ...
    @property
    def Order(self) -> System.Nullable: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def ToDetails() -> str: ...

class ObjectDraftingColor(Rhinoceros.ModelValue):
    """Represents a Rhino object drafting color.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingColor: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Source(self) -> DocObjects.ObjectPlotColorSource: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Value: ...

class ObjectDraftingLinetype(Rhinoceros.ModelValue):
    """Represents a Rhino object drafintg linetype.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingLinetype: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Linetype(self) -> ModelLinetype: ...
    @property
    def Source(self) -> DocObjects.ObjectLinetypeSource: ...
    @overload
    def GetHashCode() -> int: ...

class ObjectDraftingLineWidth(Rhinoceros.ModelValue):
    """Represents a Rhino object drafintg linetype.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingLineWidth: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Source(self) -> DocObjects.ObjectPlotWeightSource: ...
    @property
    def Width(self) -> System.Nullable: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Value: ...

class Attributes(System.ValueType):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @overload
    @staticmethod
    def From(modelHatchLine: DocObjects.HatchLine) -> Attributes: ...
    @property
    def Angle(self) -> float: ...
    @property
    def Base(self) -> Geometry.Point2d: ...
    @property
    def Offset(self) -> Geometry.Vector2d: ...
    @property
    def Segments(self) -> Generic.IReadOnlyList: ...
    @overload
    def GetHashCode() -> int: ...
    @Angle.setter
    def Angle(self, value: System.Void): ...
    @Base.setter
    def Base(self, value: System.Void): ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @Segments.setter
    def Segments(self, value: System.Void): ...
    @overload
    def ToHatchLine() -> DocObjects.HatchLine: ...

class Attributes(Rhinoceros.Attributes):
    """    """
    def __init__(self): ...
    @property
    def Lines(self) -> Generic.IReadOnlyList: ...
    @Lines.setter
    def Lines(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...

class Attributes(Rhinoceros.Attributes):
    """    """
    def __init__(self): ...
    @property
    def CapStyle(self) -> System.Nullable: ...
    @property
    def JoinStyle(self) -> System.Nullable: ...
    @property
    def Segments(self) -> Generic.IReadOnlyList: ...
    @property
    def TaperPoints(self) -> Generic.IReadOnlyList: ...
    @property
    def Width(self) -> System.Nullable: ...
    @property
    def WidthUnits(self) -> System.Nullable: ...
    @CapStyle.setter
    def CapStyle(self, value: System.Void): ...
    @JoinStyle.setter
    def JoinStyle(self, value: System.Void): ...
    @Segments.setter
    def Segments(self, value: System.Void): ...
    @TaperPoints.setter
    def TaperPoints(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @WidthUnits.setter
    def WidthUnits(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...
    @overload
    def ToString() -> str: ...

class Attributes(System.ValueType):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def LineScale(self) -> System.Nullable: ...
    @property
    def Linetype(self) -> System.Nullable: ...
    @property
    def LineWidth(self) -> System.Nullable: ...
    @property
    def Order(self) -> System.Nullable: ...
    @overload
    def GetHashCode() -> int: ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @LineScale.setter
    def LineScale(self, value: System.Void): ...
    @Linetype.setter
    def Linetype(self, value: System.Void): ...
    @LineWidth.setter
    def LineWidth(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...

class Value(System.ValueType):
    """    """
    @overload
    def __init__(self, source: DocObjects.ObjectPlotColorSource): ...
    @overload
    def __init__(self, color: Rhinoceros.ModelColor): ...
    @overload
    def __init__(self, source: DocObjects.ObjectPlotColorSource, color: Rhinoceros.ModelColor): ...
    @overload
    def CompareTo(self, other: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct() -> (DocObjects.ObjectPlotColorSource, Rhinoceros.ModelColor): ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ByDisplay(self) -> Value: ...
    @property
    def ByLayer(self) -> Value: ...
    @property
    def ByParent(self) -> Value: ...
    @property
    def Color(self) -> Rhinoceros.ModelColor: ...
    @property
    def Source(self) -> DocObjects.ObjectPlotColorSource: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Value(System.ValueType):
    """    """
    @overload
    def __init__(self, source: DocObjects.ObjectLinetypeSource): ...
    @overload
    def __init__(self, value: ModelLinetype): ...
    @overload
    def __init__(self, source: DocObjects.ObjectLinetypeSource, value: ModelLinetype): ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct() -> (DocObjects.ObjectLinetypeSource, ModelLinetype): ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ByLayer(self) -> Value: ...
    @property
    def ByParent(self) -> Value: ...
    @property
    def Continuous(self) -> Value: ...
    @property
    def Linetype(self) -> ModelLinetype: ...
    @property
    def Source(self) -> DocObjects.ObjectLinetypeSource: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Value(System.ValueType):
    """    """
    @overload
    def __init__(self, source: DocObjects.ObjectPlotWeightSource): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, source: DocObjects.ObjectPlotWeightSource, value: float): ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct() -> (DocObjects.ObjectPlotWeightSource, float): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @property
    def ByLayer(self) -> Value: ...
    @property
    def ByParent(self) -> Value: ...
    @property
    def Source(self) -> DocObjects.ObjectPlotWeightSource: ...
    @property
    def Width(self) -> float: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

# endregion
