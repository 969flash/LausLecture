"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Params", "Annotations", "Model", "Display", "Drafting", "Render", "ModelComponentContent", "ModelContent", "ModelData", "ModelFont", "ModelMeshingParameters", "ModelUnitSystem", "ModelValue", "ModelColor", "ModelContentEnablerLoader", "ModelContentName", "ModelTags", "ModelUserText", "Attributes", "Value"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import Kernel
from Grasshopper.Kernel import Types
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class ModelComponentContent(ModelContent):
    """Represents a Rhino model component. Wraps the functionality of the
type.

    """
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelContent(ModelData):
    """Represents a Rhino model element.

    """
    @overload
    @staticmethod
    def Cast(source: object) -> ModelContent: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    @staticmethod
    def FromId(document: Rhino.RhinoDoc, guid: System.Guid) -> ModelContent: ...
    @property
    def Id(self) -> System.Nullable: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def TooltipString() -> str: ...
    @overload
    def ToString() -> str: ...

class ModelData(object):
    """Represents a Rhino model chunk of data.

    """
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def TooltipString() -> str: ...
    @overload
    def ToString() -> str: ...

class ModelFont(Types.GH_Goo):
    """Represents a typography font. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, font: DocObjects.Font): ...
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def Duplicate() -> Types.IGH_Goo: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelFont) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def InstalledFamilies(self) -> Generic.IReadOnlyList: ...
    @property
    def InstalledFonts(self) -> Generic.IReadOnlyList: ...
    @property
    def IsInstalled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsFamilyNameInstalled(familyName: str) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class ModelMeshingParameters(ModelValue):
    """Represents some meshing parameters. Wraps the functionality of the
type.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelMeshingParameters: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DefaultAnalysis(self) -> ModelMeshingParameters: ...
    @property
    def DefaultRender(self) -> ModelMeshingParameters: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FastRender(self) -> ModelMeshingParameters: ...
    @property
    def QualityRender(self) -> ModelMeshingParameters: ...
    @property
    def Unset(self) -> ModelMeshingParameters: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToMeshingParameters(self, document: Rhino.RhinoDoc) -> Geometry.MeshingParameters: ...

class ModelUnitSystem(ModelValue):
    """Represents a Rhino Unit System. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Value): ...
    @overload
    def __init__(self, space: DocObjects.ActiveSpace, document: Rhino.RhinoDoc): ...
    @overload
    def AdjustDocumentUnitSystem(self, document: Rhino.RhinoDoc, space: DocObjects.ActiveSpace, scale: bool) -> None: ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelUnitSystem: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    @staticmethod
    def Copy(source: Rhino.RhinoDoc, target: Rhino.RhinoDoc, space: DocObjects.ActiveSpace) -> None: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ActiveSpace(self) -> DocObjects.ActiveSpace: ...
    @property
    def BaseSystem(self) -> Rhino.UnitSystem: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Factor(self) -> float: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MetersPerUnit(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def TooltipString() -> str: ...

class ModelValue(object):
    """Represents a value in a Rhino model.

    """
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def TooltipString() -> str: ...
    @overload
    def ToString() -> str: ...

class ModelColor(System.ValueType):
    """Represents a color stored on a model.

    """
    @overload
    def CompareTo(self, other: ModelColor) -> int: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelColor) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(argb: int) -> ModelColor: ...
    @overload
    @staticmethod
    def FromArgb(r: System.Byte, g: System.Byte, b: System.Byte) -> ModelColor: ...
    @overload
    @staticmethod
    def FromArgb(a: System.Byte, r: System.Byte, g: System.Byte, b: System.Byte) -> ModelColor: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToArgb() -> int: ...
    @overload
    def ToString() -> str: ...

class ModelContentEnablerLoader(Kernel.GH_AssemblyPriority):
    """    """
    def __init__(self): ...
    @overload
    def PriorityLoad() -> Kernel.GH_LoadingInstruction: ...

class ModelContentName(System.ValueType):
    """    """
    @property
    def Empty(self) -> ModelContentName: ...
    @property
    def Comparer(self) -> System.StringComparer: ...
    @overload
    @staticmethod
    def Combine(paths: System.Array[ModelContentName]) -> ModelContentName: ...
    @overload
    def CompareTo(self, other: ModelContentName) -> int: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContentName) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Separator(self) -> str: ...
    @property
    def Stem(self) -> ModelContentName: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Split() -> System.System.Array[str]: ...
    @overload
    def ToString() -> str: ...

class ModelTags(System.ValueType):
    """Represents an immutable set of strings.

    """
    def __init__(self, source: Generic.IEnumerable): ...
    @property
    def Empty(self) -> ModelTags: ...
    @overload
    def AddRange(self, source: Generic.IEnumerable) -> ModelTags: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: ModelTags) -> int: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelTags) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def RemoveRange(self, source: Generic.IEnumerable) -> ModelTags: ...
    @overload
    def ToString() -> str: ...

class ModelUserText(System.ValueType):
    """Represents an immutable collection of string/string pairs.

    """
    def __init__(self, source: Generic.IEnumerable): ...
    @property
    def Empty(self) -> ModelUserText: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def EnsureRange(self, keys: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def EnsureRange(self, source: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelUserText) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> Generic.KeyValuePair: ...
    @property
    def Item(self) -> str: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MergeRange(self, source: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def MergeRange(self, source: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def RemoveRange(self, source: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def TryGetValue(self, key: str) -> (bool, str): ...
    @overload
    def UpdateRange(self, keys: Generic.IEnumerable) -> ModelUserText: ...
    @overload
    def UpdateRange(self, source: Generic.IEnumerable) -> ModelUserText: ...

class Attributes(Attributes):
    """    """
    @property
    def UserText(self) -> ModelUserText: ...
    @UserText.setter
    def UserText(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...

class Attributes(Attributes):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    def GetHashCode() -> int: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Notes.setter
    def Notes(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @Tags.setter
    def Tags(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class Attributes(object):
    """    """
    @overload
    def Clone() -> Attributes: ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> ModelData: ...
    @overload
    def ToString() -> str: ...

class Value(System.ValueType):
    """    """
    @overload
    def __init__(self, activeSpace: DocObjects.ActiveSpace, name: str): ...
    @overload
    def __init__(self, unitSystem: Rhino.UnitSystem, name: str): ...
    @overload
    def __init__(self, unitSystem: Rhino.UnitSystem, name: str, factor: float): ...
    @overload
    def __init__(self, other: Value, name: str, factor: System.Nullable): ...
    @property
    def _MetersPerUnit(self) -> float: ...
    @overload
    def AdjustDocumentUnitSystem(self, document: Rhino.RhinoDoc, space: DocObjects.ActiveSpace, scale: bool) -> None: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @property
    def ActiveSpace(self) -> DocObjects.ActiveSpace: ...
    @property
    def BaseSystem(self) -> Rhino.UnitSystem: ...
    @property
    def Factor(self) -> float: ...
    @property
    def Feet(self) -> Value: ...
    @property
    def Inches(self) -> Value: ...
    @property
    def Meters(self) -> Value: ...
    @property
    def MetersPerUnit(self) -> float: ...
    @property
    def Millimeters(self) -> Value: ...
    @property
    def ModelUnits(self) -> Value: ...
    @property
    def Name(self) -> str: ...
    @property
    def None_(self) -> Value: ...
    @property
    def PageUnits(self) -> Value: ...
    @property
    def Symbol(self) -> str: ...
    @property
    def Unset(self) -> Value: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToNonCustomUnitSystem() -> (Rhino.UnitSystem, float): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToUnitSystem() -> (Rhino.UnitSystem, float): ...

# endregion
