"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Params", "ModelDisplayMode", "ModelNamedView", "ModelPageViewport", "ModelStandardViewport", "ModelView", "ModelViewport", "ObjectDisplay", "ObjectDisplayColor", "ObjectVisibility", "DisplayColorGradient", "DisplayColorStop", "Attributes", "Value"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import Kernel
from Grasshopper import Rhinoceros
from Grasshopper.Kernel import Types
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from System import Drawing
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class ModelDisplayMode(Rhinoceros.ModelContent):
    """Represents a Rhino display mode. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, displayMode: Display.DisplayModeDescription): ...
    @overload
    def __init__(self, id_: System.Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelDisplayMode: ...
    @property
    def Unset(self) -> ModelDisplayMode: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def TooltipString() -> str: ...
    @overload
    def ToString() -> str: ...

class ModelNamedView(Rhinoceros.ModelContent):
    """Represents a Rhino named view. Wraps a
instance in the named views table.

    """
    @overload
    @staticmethod
    def Cast(data: object) -> ModelNamedView: ...
    @overload
    def CastTo() -> (bool, T): ...
    @property
    def View(self) -> ModelView: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelPageViewport(ModelViewport):
    """Represents a Rhino page layout. Wraps the main viewport of a
instance.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, viewport: Display.RhinoViewport): ...
    @overload
    def __init__(self, id_: System.Guid): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelPageViewport: ...
    @overload
    def CastTo() -> (bool, T): ...
    @property
    def PageNumber(self) -> System.Nullable: ...
    @property
    def Space(self) -> DocObjects.ActiveSpace: ...
    @property
    def ViewportType(self) -> Display.ViewportType: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelStandardViewport(ModelViewport):
    """Represents a Rhino standard modeling viewport. Wraps the main viewport of a modeling
instance.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, viewport: Display.RhinoViewport): ...
    @overload
    def __init__(self, id_: System.Guid): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelStandardViewport: ...
    @overload
    def CastTo() -> (bool, T): ...
    @property
    def Space(self) -> DocObjects.ActiveSpace: ...
    @property
    def ViewportType(self) -> Display.ViewportType: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ModelView(object):
    """Represents a 3D view frustum. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, viewportInfo: DocObjects.ViewportInfo): ...
    @overload
    def __init__(self, viewInfo: DocObjects.ViewInfo): ...
    @overload
    def __init__(self, view: Display.RhinoView): ...
    @overload
    def __init__(self, viewport: Display.RhinoViewport): ...
    @overload
    def __init__(self, ref_guid: System.Guid): ...
    @overload
    def __init__(self, other: ModelView): ...
    @overload
    def __init__(self, viewportInfo: DocObjects.ViewportInfo, title: str): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelView: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelView) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @overload
    def GetBoundingBox(self, xform: Geometry.Transform) -> Geometry.BoundingBox: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Morph(self, xmorph: Geometry.SpaceMorph) -> Types.IGH_GeometricGoo: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToViewportInfo() -> DocObjects.ViewportInfo: ...
    @overload
    def Transform(self, xform: Geometry.Transform) -> Types.IGH_GeometricGoo: ...

class ModelViewport(Rhinoceros.ModelContent):
    """Represents a Rhino viewport. Wraps the main viewport of a
instance.

    """
    @overload
    @staticmethod
    def Cast(data: object) -> ModelViewport: ...
    @overload
    def CastTo() -> (bool, T): ...
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @property
    def Space(self) -> DocObjects.ActiveSpace: ...
    @property
    def Unset(self) -> ModelViewport: ...
    @property
    def UserText(self) -> Rhinoceros.ModelUserText: ...
    @property
    def View(self) -> ModelView: ...
    @property
    def ViewportType(self) -> Display.ViewportType: ...
    @overload
    def ToAttributes() -> Attributes: ...

class ObjectDisplay(Rhinoceros.ModelValue):
    """Represents a Rhino object display attributes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDisplay: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Mode(self) -> ModelDisplayMode: ...
    @property
    def WireDensity(self) -> System.Nullable: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def ToDetails() -> str: ...

class ObjectDisplayColor(Rhinoceros.ModelValue):
    """Represents a Rhino object display color.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDisplayColor: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Source(self) -> DocObjects.ObjectColorSource: ...
    @overload
    def GetHashCode() -> int: ...

class ObjectVisibility(Rhinoceros.ModelValue):
    """Represents a Rhino object visibility attributes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectVisibility: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Hidden(self) -> System.Nullable: ...
    @property
    def Locked(self) -> System.Nullable: ...
    @property
    def Viewport(self) -> ModelViewport: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToAttributes() -> Attributes: ...
    @overload
    def ToDetails() -> str: ...

class DisplayColorGradient(Types.GH_Goo):
    """Represents a gradient colour stop. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colour: Display.ColorGradient): ...
    @overload
    def __init__(self, other: DisplayColorGradient): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def DrawViewportMeshes(self, args: Kernel.GH_PreviewMeshArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: Kernel.GH_PreviewWireArgs) -> None: ...
    @overload
    def Duplicate() -> Types.IGH_Goo: ...
    @overload
    def DuplicateColourGradient() -> DisplayColorGradient: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class DisplayColorStop(Types.GH_Goo):
    """Represents a gradient colour stop. Wraps the functionality of the
type.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colour: Display.ColorStop): ...
    @overload
    def __init__(self, other: DisplayColorStop): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo() -> (bool, T): ...
    @overload
    def Duplicate() -> Types.IGH_Goo: ...
    @overload
    def DuplicateColorStop() -> DisplayColorStop: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> Types.GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def QC_Bool() -> bool: ...
    @overload
    def QC_Col() -> Drawing.Color: ...
    @overload
    def QC_CompareTo(self, other: Types.IGH_QuickCast) -> int: ...
    @overload
    def QC_Complex() -> Types.Complex: ...
    @overload
    def QC_Distance(self, other: Types.IGH_QuickCast) -> float: ...
    @overload
    def QC_Hash() -> int: ...
    @overload
    def QC_Int() -> int: ...
    @overload
    def QC_Interval() -> Geometry.Interval: ...
    @overload
    def QC_Matrix() -> Geometry.Matrix: ...
    @overload
    def QC_Num() -> float: ...
    @overload
    def QC_Pt() -> Geometry.Point3d: ...
    @overload
    def QC_Text() -> str: ...
    @overload
    def QC_Vec() -> Geometry.Vector3d: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class Attributes(Rhinoceros.Attributes):
    """    """
    def __init__(self): ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...
    @overload
    def ToString() -> str: ...

class Attributes(Rhinoceros.Attributes):
    """    """
    def __init__(self): ...
    @property
    def View(self) -> ModelView: ...
    @View.setter
    def View(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...

class Attributes(Attributes):
    """    """
    def __init__(self): ...
    @property
    def PageNumber(self) -> System.Nullable: ...
    @PageNumber.setter
    def PageNumber(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...

class Attributes(Attributes):
    """    """
    def __init__(self): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...

class Attributes(Rhinoceros.Attributes):
    """    """
    def __init__(self): ...
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @property
    def UserText(self) -> Rhinoceros.ModelUserText: ...
    @property
    def View(self) -> ModelView: ...
    @DisplayMode.setter
    def DisplayMode(self, value: System.Void): ...
    @UserText.setter
    def UserText(self, value: System.Void): ...
    @View.setter
    def View(self, value: System.Void): ...
    @overload
    def ToDetails() -> str: ...
    @overload
    def ToModelData() -> Rhinoceros.ModelData: ...

class Attributes(System.ValueType):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @property
    def Color(self) -> System.Nullable: ...
    @property
    def Mode(self) -> ModelDisplayMode: ...
    @property
    def WireDensity(self) -> System.Nullable: ...
    @overload
    def GetHashCode() -> int: ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @WireDensity.setter
    def WireDensity(self, value: System.Void): ...

class Value(System.ValueType):
    """    """
    @overload
    def __init__(self, source: DocObjects.ObjectColorSource): ...
    @overload
    def __init__(self, color: Rhinoceros.ModelColor): ...
    @overload
    def __init__(self, source: DocObjects.ObjectColorSource, color: Rhinoceros.ModelColor): ...
    @overload
    def CompareTo(self, other: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct() -> (DocObjects.ObjectColorSource, Rhinoceros.ModelColor): ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ByLayer(self) -> Value: ...
    @property
    def ByMaterial(self) -> Value: ...
    @property
    def ByParent(self) -> Value: ...
    @property
    def Color(self) -> Rhinoceros.ModelColor: ...
    @property
    def Source(self) -> DocObjects.ObjectColorSource: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Attributes(System.ValueType):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @property
    def Hidden(self) -> System.Nullable: ...
    @property
    def Locked(self) -> System.Nullable: ...
    @property
    def Viewport(self) -> ModelViewport: ...
    @overload
    def GetHashCode() -> int: ...
    @Hidden.setter
    def Hidden(self, value: System.Void): ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @Viewport.setter
    def Viewport(self, value: System.Void): ...

# endregion
