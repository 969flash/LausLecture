"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IGH_DataTree", "GH_DirtyCaster", "GH_GraphicBranch", "GH_GraphicTreeDisplayArgs", "GH_TreeBuilder", "GH_IndexRange", "GH_IndexRanges", "GH_TreeIndex", "GH_RuleResult", "IGH_IndexRule", "GH_IndexRuleSet", "GH_TreeFilter", "GH_BracketMismatchException", "GH_StringMismatchException", "GH_Path", "GH_Lexer", "GH_LexerCombo", "GH_PathOffset", "GH_RuleKind", "GH_RuleOperator", "IGH_Rule", "GH_RuleAnyNumbers", "GH_RuleAnyNumber", "GH_RuleNumber", "GH_RuleGroup", "GH_RuleRange", "GH_RuleSequence", "GH_RuleComplex", "GH_TreeRules", "IGH_StructureEnumerator", "GH_SimplificationMode", "GH_ExpandMode", "GH_GraftMode", "IGH_Structure", "GH_Structure", "PathLengthComparer", "ConversionDelegate"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import Kernel
from Grasshopper.GUI import Canvas
from Grasshopper.Kernel import Expressions
from System import Collections
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import Grasshopper
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class IGH_DataTree:
    """Utility interface for detection of DataTree generic instances.

    """
    @overload
    def MergeWithParameter(self, param: Kernel.IGH_Param) -> bool: ...

class GH_DirtyCaster(object):
    """    """
    @overload
    @staticmethod
    def CastToList(in_: object) -> Generic.List: ...
    @overload
    @staticmethod
    def CastToTree(in_: object) -> Grasshopper.DataTree: ...

class GH_GraphicBranch(object):
    """    """
    def __init__(self): ...
    @property
    def DomainAngleFactor(self) -> System.Single: ...
    @property
    def TwigLengthFactor(self) -> System.Single: ...
    @property
    def TwigLengthMin(self) -> System.Single: ...
    @overload
    def Distribute_Phylogenetic(self, max_path_length_inverse: float) -> None: ...
    @property
    def Angle(self) -> System.Single: ...
    @property
    def Data(self) -> Collections.IList: ...
    @property
    def DataCount(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsLeaf(self) -> bool: ...
    @property
    def IsRoot(self) -> bool: ...
    @property
    def IsTrunk(self) -> bool: ...
    @property
    def Length(self) -> System.Single: ...
    @property
    def LongestPathLength(self) -> int: ...
    @property
    def Offset(self) -> System.Single: ...
    @property
    def Parent(self) -> GH_GraphicBranch: ...
    @property
    def Path(self) -> GH_Path: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Twigs(self) -> Generic.List: ...
    @overload
    def GrowTree(self, paths: Generic.List) -> None: ...
    @overload
    def RenderNodes(self, G: Drawing.Graphics, e: GH_GraphicTreeDisplayArgs) -> None: ...
    @overload
    def RenderTags(self, G: Drawing.Graphics, e: GH_GraphicTreeDisplayArgs) -> None: ...
    @overload
    def RenderWires_Organic(self, G: Drawing.Graphics, e: GH_GraphicTreeDisplayArgs) -> None: ...
    @overload
    def RenderWires_Schematic(self, G: Drawing.Graphics, e: GH_GraphicTreeDisplayArgs) -> None: ...
    @overload
    def SelectAll(self, bSelect: bool) -> None: ...
    @overload
    def SelectAll(self, b_path: GH_Path) -> None: ...
    @Angle.setter
    def Angle(self, value: System.Void): ...
    @Data.setter
    def Data(self, value: System.Void): ...
    @Length.setter
    def Length(self, value: System.Void): ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Twigs.setter
    def Twigs(self, value: System.Void): ...
    @overload
    def SolveLeafAngles(self, angle: System.Single, spread: System.Single, angle_per_item: System.Single, args: GH_GraphicTreeDisplayArgs) -> None: ...

class GH_GraphicTreeDisplayArgs(object):
    """A class that contains useful information used for drawing GH_GraphicTrees.

    """
    def __init__(self): ...
    @property
    def origin(self) -> Drawing.PointF: ...
    @property
    def radius(self) -> System.Single: ...
    @property
    def maxPathLength(self) -> int: ...
    @property
    def vp(self) -> Canvas.GH_Viewport: ...
    @overload
    def AdjustMaxPathLength(self, potential_new_length: int) -> None: ...
    @overload
    @staticmethod
    def Distance(A: Drawing.PointF, B: Drawing.PointF) -> System.Single: ...
    @overload
    @staticmethod
    def Distance(A: Drawing.PointF, B: Drawing.PointF, P: Drawing.PointF) -> System.Single: ...
    @overload
    @staticmethod
    def DistanceSquared(A: Drawing.PointF, B: Drawing.PointF) -> System.Single: ...
    @overload
    def RadialBox(self, box_edge: System.Single) -> Drawing.RectangleF: ...
    @overload
    def RadialCrd(self, angle: System.Single, offset: System.Single) -> Drawing.PointF: ...
    @overload
    def RadialX(self, angle: System.Single, offset: System.Single) -> System.Single: ...
    @overload
    def RadialY(self, angle: System.Single, offset: System.Single) -> System.Single: ...
    @overload
    @staticmethod
    def RadToDeg(a: System.Single) -> System.Single: ...
    @overload
    @staticmethod
    def RemapDegrees(a: System.Single) -> System.Single: ...
    @overload
    def SetupViewport(self, vport: Canvas.GH_Viewport) -> None: ...
    @overload
    def Visible(self, rec: Drawing.RectangleF) -> bool: ...
    @overload
    def Visible(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def Visible(self, rec: Drawing.RectangleF, margin: System.Single) -> bool: ...
    @overload
    def Visible(self, pt: Drawing.PointF, radius: System.Single) -> bool: ...
    @overload
    def Visible(self, ptA: Drawing.PointF, ptB: Drawing.PointF, fuzz: System.Single) -> bool: ...
    @overload
    def Visible(self, P0: Drawing.PointF, P1: Drawing.PointF, P2: Drawing.PointF, P3: Drawing.PointF, fuzz: System.Single) -> bool: ...

class GH_TreeBuilder(object):
    """    """
    def __init__(self): ...
    @overload
    def AddPath(self, p: GH_Path) -> None: ...
    @overload
    def AddPathRecursive(self, p: GH_Path) -> None: ...
    @property
    def AllPaths(self) -> Generic.List: ...

class GH_IndexRange(System.ValueType):
    """Represents a range of indices.

    """
    @overload
    def __init__(self, index: int): ...
    @overload
    def __init__(self, index0: int, index1: int): ...
    @overload
    def AdjacentTo(self, range_: GH_IndexRange) -> bool: ...
    @overload
    def Contains(self, index: int) -> bool: ...
    @overload
    def Contains(self, range_: GH_IndexRange) -> bool: ...
    @property
    def Index0(self) -> int: ...
    @property
    def Index1(self) -> int: ...
    @property
    def InvalidRange(self) -> GH_IndexRange: ...
    @property
    def IsSingular(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def MaxValue(self) -> GH_IndexRange: ...
    @overload
    @staticmethod
    def Intersection(range0: GH_IndexRange, range1: GH_IndexRange) -> GH_IndexRange: ...
    @overload
    def IntersectsWith(self, range_: GH_IndexRange) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    @staticmethod
    def Split(range_: GH_IndexRange, splitter: GH_IndexRange) -> (int, GH_IndexRange, GH_IndexRange): ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Union(range0: GH_IndexRange, range1: GH_IndexRange) -> GH_IndexRange: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_IndexRanges(object):
    """Represents a sorted, non-colliding collection of index ranges.

    """
    def __init__(self): ...
    @property
    def Count(self) -> int: ...
    @property
    def Range(self) -> GH_IndexRange: ...
    @overload
    def InsertRange(self, range_: GH_IndexRange) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemoveRange(self, range_: GH_IndexRange) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_TreeIndex(System.ValueType):
    """Represents a single unique location in a DataTree.

    """
    def __init__(self, path: GH_Path, item: int): ...
    @property
    def Item(self) -> int: ...
    @property
    def Path(self) -> GH_Path: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...

class GH_RuleResult(enum.Enum):
    NoOpinion = 0
    Include = 1
    Exclude = -1

class IGH_IndexRule:
    """Interface for index rules. An index rule is a way to determine whether a specific integer is considered valid, invalid or neutral. Index rules are used for selecting elements in DataTrees.

    """
    @overload
    def Evaluate(self, index: int) -> GH_RuleResult: ...

class GH_IndexRuleSet(object):
    """A collection of index rules.

    """
    def __init__(self): ...
    @overload
    def AddAnyDigitRule() -> None: ...
    @overload
    def AddAnyDigitsRule() -> None: ...
    @overload
    def AddDigitPatternRule(self, pattern: System.System.Array[int]) -> None: ...
    @overload
    def AddDigitPatternRule(self, firstDigit: int, nextDigit: int) -> None: ...
    @overload
    def AddDigitPatternRule(self, firstDigit: int, nextDigit: int, lastDigit: int) -> None: ...
    @overload
    def AddDigitRule(self, digit: int, invert: bool) -> None: ...
    @overload
    def AddRangePatternRule(self, pattern: System.Array[GH_IndexRange]) -> None: ...
    @overload
    def AddRangeRule(self, range_: GH_IndexRange, invert: bool) -> None: ...
    @overload
    def Evaluate(self, index: int) -> GH_RuleResult: ...
    @property
    def Count(self) -> int: ...
    @property
    def Rule(self) -> IGH_IndexRule: ...

class GH_TreeFilter(object):
    """Represents a collection of rules for validating DataTree paths and indices.

    """
    def __init__(self): ...
    @property
    def PathOpen(self) -> System.Char: ...
    @property
    def PathClose(self) -> System.Char: ...
    @property
    def ItemOpen(self) -> System.Char: ...
    @property
    def ItemClose(self) -> System.Char: ...
    @property
    def PathSeparator(self) -> System.Char: ...
    @property
    def SegmentSeparator(self) -> System.Char: ...
    @property
    def StringDelimeter(self) -> System.Char: ...
    @overload
    @staticmethod
    def FindItemBrackets(text: str) -> (bool, int, int): ...
    @overload
    @staticmethod
    def FindNextLevelChar(text: str, index: int, char: System.Char) -> int: ...
    @overload
    @staticmethod
    def FindPathBrackets(text: str) -> (bool, int, int): ...
    @overload
    @staticmethod
    def FindPrevLevelChar(text: str, index: int, char: System.Char) -> int: ...
    @overload
    @staticmethod
    def ParsePattern(filter_: str) -> GH_TreeFilter: ...
    @overload
    @staticmethod
    def SplitStringWithExpressions(text: str, separator: System.Char) -> Generic.List: ...

class GH_BracketMismatchException(System.Exception):
    """Exception used during Rule Set parsing.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, location: int): ...
    @property
    def Index(self) -> int: ...

class GH_StringMismatchException(System.Exception):
    """Exception used during Rule Set parsing.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...

class GH_Path(object):
    """Describes the path in structure space of a data item or a list of items. A path consists of a series of integers, each one of which represents an index in a branch structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, index: int): ...
    @overload
    def __init__(self, args: System.System.Array[int]): ...
    @overload
    def __init__(self, Other: GH_Path): ...
    @overload
    def AppendElement(self, index: int) -> GH_Path: ...
    @overload
    def Compare(self, x: GH_Path, y: GH_Path) -> int: ...
    @overload
    def CompareTo(self, other: GH_Path) -> int: ...
    @overload
    def CullElement() -> GH_Path: ...
    @overload
    def CullFirstElement() -> GH_Path: ...
    @overload
    def Format(self, format_provider: str, separator: str) -> str: ...
    @overload
    def FromString(self, s: str) -> bool: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def Dimension(self) -> int: ...
    @property
    def Indices(self) -> System.System.Array[int]: ...
    @property
    def InternalPath(self) -> System.System.Array[int]: ...
    @property
    def Length(self) -> int: ...
    @property
    def Valid(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Increment(self, index: int) -> GH_Path: ...
    @overload
    def Increment(self, index: int, offset: int) -> GH_Path: ...
    @overload
    def IsAncestor(self, potential_ancestor: GH_Path) -> (bool, int): ...
    @overload
    def IsCoincident(self, other: GH_Path) -> bool: ...
    @overload
    def IsCoincident(self, index_list: System.System.Array[int]) -> bool: ...
    @overload
    def PrependElement(self, index: int) -> GH_Path: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @Dimension.setter
    def Dimension(self, value: System.Void): ...
    @Indices.setter
    def Indices(self, value: System.Void): ...
    @InternalPath.setter
    def InternalPath(self, value: System.Void): ...
    @overload
    @staticmethod
    def SplitPathLikeString(s: str) -> (bool, System.System.Array[str], str): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, includeBrackets: bool) -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_Lexer(object):
    """Represents a lexical mask for path operations.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mask: str): ...
    @overload
    def EvaluatePath(self, evaluator: Expressions.GH_ExpressionParser) -> (bool, GH_Path, int): ...
    @property
    def IsItem(self) -> bool: ...
    @property
    def IsPath(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def Mask(self) -> str: ...
    @property
    def Path(self) -> Generic.List: ...
    @overload
    @staticmethod
    def PerformLexicalReplace(source: GH_Lexer, target: GH_Lexer, structure_in: IGH_Structure, structure_out: GH_Structure) -> None: ...
    @overload
    @staticmethod
    def PerformLexicalReplace(source: GH_Lexer, target: GH_Lexer, tree_in: Grasshopper.DataTree, tree_out: Grasshopper.DataTree) -> None: ...

class GH_LexerCombo(object):
    """Contains both a source and a target lexer object.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, n_source: GH_Lexer, n_target: GH_Lexer): ...
    @overload
    def __init__(self, n_source: str, n_target: str): ...
    @property
    def Source(self) -> GH_Lexer: ...
    @property
    def Target(self) -> GH_Lexer: ...
    @Source.setter
    def Source(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...

class GH_PathOffset(object):
    """Represents a relative offset within a data structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pathShift: Generic.IEnumerable): ...
    @overload
    def __init__(self, pathShift: Generic.IEnumerable, itemShift: int): ...
    @overload
    def __init__(self, pathShift: Generic.IEnumerable, itemShift: int, pathWrap: bool, itemWrap: bool): ...
    @property
    def ItemOffset(self) -> int: ...
    @property
    def ItemWrap(self) -> bool: ...
    @property
    def PathOffset(self) -> Generic.List: ...
    @property
    def PathWrap(self) -> bool: ...
    @overload
    def OffsetPath(self, path: GH_Path, index: int) -> (bool, GH_Path, int): ...
    @overload
    def OffsetPath(self, path: GH_Path, index: int, tree: IGH_Structure) -> (bool, GH_Path, int): ...
    @overload
    @staticmethod
    def ParseString(mask: str) -> GH_PathOffset: ...
    @ItemOffset.setter
    def ItemOffset(self, value: System.Void): ...
    @ItemWrap.setter
    def ItemWrap(self, value: System.Void): ...
    @PathWrap.setter
    def PathWrap(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class GH_RuleKind(enum.Enum):
    None_ = 0
    AnyNumber = 1
    AnyNumbers = 2
    Number = 3
    Group = 4
    Range = 5
    Sequence = 6
    Complex = 7

class GH_RuleOperator(enum.Enum):
    Conjunction = 0
    Disjunction = 1

class IGH_Rule:
    """Interface for individual pattern elements.

    """
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleAnyNumbers(object):
    """    """
    def __init__(self): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleAnyNumber(object):
    """    """
    def __init__(self): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleNumber(object):
    """    """
    def __init__(self, number: int, negate: bool): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleGroup(object):
    """    """
    def __init__(self, numbers: Generic.IEnumerable, negate: bool): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleRange(object):
    """    """
    def __init__(self, min_: int, max_: int, negate: bool): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleSequence(object):
    """    """
    def __init__(self, sequence: Generic.IEnumerable, limit: int, negate: bool): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_RuleComplex(object):
    """    """
    def __init__(self, fragments: Generic.IEnumerable, operators: Generic.IEnumerable): ...
    @overload
    def Apply(self, number: int) -> bool: ...
    @property
    def Kind(self) -> GH_RuleKind: ...
    @property
    def Notation(self) -> str: ...

class GH_TreeRules(object):
    """Represents an entire data tree rule set.

    """
    def __init__(self, pathRules: Generic.IEnumerable, indexRule: IGH_Rule): ...
    @property
    def OrOperator(self) -> System.Char: ...
    @property
    def AndOperator(self) -> System.Char: ...
    @property
    def NotOperator(self) -> System.Char: ...
    @property
    def RangeSymbol(self) -> System.Char: ...
    @property
    def Separator(self) -> System.Char: ...
    @property
    def SequenceSymbol(self) -> System.Char: ...
    @property
    def SequenceCode(self) -> str: ...
    @property
    def PathSeparator(self) -> System.Char: ...
    @property
    def AnyNumberSymbol(self) -> System.Char: ...
    @property
    def AnyNumbersSymbol(self) -> System.Char: ...
    @property
    def PathOpenBracket(self) -> System.Char: ...
    @property
    def PathCloseBracket(self) -> System.Char: ...
    @property
    def ItemOpenBracket(self) -> System.Char: ...
    @property
    def ItemCloseBracket(self) -> System.Char: ...
    @property
    def RuleOpenBracket(self) -> System.Char: ...
    @property
    def RuleCloseBracket(self) -> System.Char: ...
    @property
    def PathBrackets(self) -> str: ...
    @property
    def ItemBrackets(self) -> str: ...
    @property
    def RuleBrackets(self) -> str: ...
    @property
    def AllowedChars(self) -> str: ...
    @overload
    def Apply(self, path: GH_Path) -> bool: ...
    @overload
    def Apply(self, path: GH_Path, index: int) -> bool: ...
    @overload
    @staticmethod
    def FromString(text: str) -> (GH_TreeRules, str): ...
    @property
    def HasItemRule(self) -> bool: ...
    @property
    def HasPathRules(self) -> bool: ...
    @property
    def PathRuleCount(self) -> int: ...
    @overload
    def ToString() -> str: ...

class IGH_StructureEnumerator:
    """Defines a minimum interface for iterating over all data in an IGH_Structure.

    """

class GH_SimplificationMode(enum.Enum):
    None_ = 0
    CollapseLeadingOverlaps = 1
    CollapseAllOverlaps = 2

class GH_ExpandMode(enum.Enum):
    None_ = 0
    SimpleReplace = 1
    SimpleAppend = 2
    Recursive = 3

class GH_GraftMode(enum.Enum):
    None_ = 0
    GraftNullItems = 1
    GraftEmptyLists = 2
    GraftAll = 3

class IGH_Structure:
    """Base interface for all GH_Structure types.

    """
    @overload
    def AllData(self, skipNulls: bool) -> IGH_StructureEnumerator: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def DataDescription(self, includeIndices: bool, includePaths: bool) -> str: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> None: ...
    @overload
    def ExpandPath(self, path: GH_Path, element: int, mode: GH_ExpandMode) -> None: ...
    @overload
    def Flatten(self, path: GH_Path) -> None: ...
    @property
    def Branch(self) -> Collections.IList: ...
    @property
    def Branch(self) -> Collections.IList: ...
    @property
    def DataCount(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Path(self) -> GH_Path: ...
    @property
    def PathCount(self) -> int: ...
    @property
    def Paths(self) -> Generic.IList: ...
    @property
    def StructureProxy(self) -> Generic.IList: ...
    @property
    def TopologyDescription(self) -> str: ...
    @overload
    def Graft(self, mode: GH_GraftMode) -> None: ...
    @overload
    def Graft(self, mode: GH_GraftMode, path: GH_Path) -> None: ...
    @overload
    def LongestPathIndex() -> int: ...
    @overload
    def PathExists(self, path: GH_Path) -> bool: ...
    @overload
    def PathIndex(self, path: GH_Path) -> (int, int): ...
    @overload
    def RemovePath(self, path: GH_Path) -> None: ...
    @overload
    def ReplacePath(self, find: GH_Path, replace: GH_Path) -> None: ...
    @overload
    def ShortestPathIndex() -> int: ...
    @overload
    def Simplify(self, mode: GH_SimplificationMode) -> None: ...
    @overload
    def TrimExcess() -> None: ...

class GH_Structure(object):
    """Represents a data tree where each branch has a unique path

    GH_Structure[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Structure, shallowCopy: bool): ...
    @overload
    def AllData(self, skipNulls: bool) -> IGH_StructureEnumerator: ...
    @overload
    def Append(self, data: T) -> None: ...
    @overload
    def Append(self, data: T, path: GH_Path) -> None: ...
    @overload
    def AppendRange(self, data: Generic.IEnumerable) -> None: ...
    @overload
    def AppendRange(self, data: Generic.IEnumerable, path: GH_Path) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def DataDescription(self, includeIndices: bool, includePaths: bool) -> str: ...
    @overload
    def Duplicate() -> GH_Structure: ...
    @overload
    def DuplicateCast(self, conversion: ConversionDelegate) -> GH_Structure: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> None: ...
    @overload
    def EnsurePath(self, path: System.System.Array[int]) -> Generic.List: ...
    @overload
    def EnsurePath(self, path: GH_Path) -> Generic.List: ...
    @overload
    def ExpandPath(self, path: GH_Path, element: int, mode: GH_ExpandMode) -> None: ...
    @overload
    def Flatten(self, flat_path: GH_Path) -> None: ...
    @overload
    def FlattenData() -> Generic.List: ...
    @property
    def Branch(self) -> Collections.IList: ...
    @property
    def Branch(self) -> Collections.IList: ...
    @property
    def Branches(self) -> Generic.IList: ...
    @property
    def DataCount(self) -> int: ...
    @property
    def DataItem(self) -> T: ...
    @property
    def DataItem(self) -> T: ...
    @property
    def DataList(self) -> Generic.List: ...
    @property
    def DataList(self) -> Generic.List: ...
    @property
    def FirstItem(self) -> T: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def LastItem(self) -> T: ...
    @property
    def NonNulls(self) -> Generic.IEnumerable: ...
    @property
    def Path(self) -> GH_Path: ...
    @property
    def PathCount(self) -> int: ...
    @property
    def Paths(self) -> Generic.IList: ...
    @property
    def StructureProxy(self) -> Generic.IList: ...
    @property
    def TopologyDescription(self) -> str: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetEnumerator_Generic() -> Generic.IEnumerator: ...
    @overload
    def Graft(self, mode: GH_GraftMode) -> None: ...
    @overload
    def Graft(self, mode: GH_GraftMode, path: GH_Path) -> None: ...
    @overload
    def Insert(self, data: T, path: GH_Path, index: int) -> None: ...
    @overload
    def LongestPathIndex() -> int: ...
    @overload
    def MergeStructure(self, other: GH_Structure) -> None: ...
    @overload
    def PathExists(self, path: GH_Path) -> bool: ...
    @overload
    def PathIndex(self, path: GH_Path) -> (int, int): ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemoveData(self, data: T) -> None: ...
    @overload
    def RemovePath(self, path: GH_Path) -> None: ...
    @overload
    def ReplacePath(self, find: GH_Path, replace: GH_Path) -> None: ...
    @overload
    def Reverse() -> None: ...
    @overload
    def ShallowDuplicate() -> GH_Structure: ...
    @overload
    def ShortestPathIndex() -> int: ...
    @overload
    def Simplify(self, mode: GH_SimplificationMode) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class PathLengthComparer(object):
    """Use this comparer to sort lists of paths using a topological approach. Shorter paths are favoured over longer paths. Equal length paths use the default comparer.

    """
    def __init__(self): ...
    @overload
    def Compare(self, x: GH_Path, y: GH_Path) -> int: ...

class ConversionDelegate(System.MulticastDelegate):
    """Represents a conversion between two types of IGH_Goo.

    ConversionDelegate[T, Tfrom, Tto]
    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, data: Tfrom, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> Tto: ...
    @overload
    def Invoke(self, data: Tfrom) -> Tto: ...

# endregion
