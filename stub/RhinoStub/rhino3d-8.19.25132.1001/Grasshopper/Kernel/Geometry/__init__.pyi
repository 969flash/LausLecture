"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ConvexHull", "Delaunay", "SpatialTrees", "Voronoi", "GH_CurveOffsetCorner", "GH_CurveOffset", "GH_SanityXForm", "Node2", "Node3", "Parallax", "Containment", "Vec2", "Vec3", "Side2", "LineX", "LineCircleX", "Line2", "Line3", "Rectangle2", "Plane", "Circle2", "Region2", "SamplingRegion", "Node2List", "Node3List", "Node2Tree", "Node2Leaf", "Node3Tree", "Node3Leaf", "Node2Proximity", "Node3Proximity", "PointCloud", "NodeListSort", "VorLeafRecursionResult", "LeafAction", "ILeafAction"]
# endregion

# region: Imports
from Grasshopper.Kernel import Types
from Rhino import Geometry
from System import Collections
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_CurveOffsetCorner(enum.Enum):
    Chamfer = 0
    Sharp = 1
    Fillet = 2

class GH_CurveOffset(object):
    """Utility class for computing curve offsets a la Grasshopper.

    """
    @overload
    def __init__(self, curve: Geometry.Curve, offsetPlane: Geometry.Plane): ...
    @overload
    def __init__(self, curves: Generic.IEnumerable, offsetPlane: Geometry.Plane): ...
    @property
    def OffsetPlane(self) -> Geometry.Plane: ...
    @overload
    def Offset(self, distance: float, corner: GH_CurveOffsetCorner) -> Generic.List: ...
    @overload
    def OffsetSamples(self, distance: float) -> Generic.List: ...

class GH_SanityXForm(object):
    """    """
    def __init__(self): ...
    @overload
    def CreateSanityXForms(self, box: Geometry.BoundingBox) -> bool: ...
    @overload
    def MakeInsane(self, geometry: Geometry.GeometryBase) -> None: ...
    @overload
    def MakeInsane() -> (Types.IGH_GeometricGoo): ...
    @overload
    def MakeInsane() -> (Geometry.Point3d): ...
    @overload
    def MakeInsane() -> (Geometry.Plane): ...
    @overload
    def MakeSane(self, geometry: Geometry.GeometryBase) -> None: ...
    @overload
    def MakeSane() -> (Types.IGH_GeometricGoo): ...
    @overload
    def MakeSane() -> (Geometry.Point3d): ...
    @overload
    def MakeSane() -> (Geometry.Plane): ...

class Node2(object):
    """Represents a single, two-dimensional coordinate with index specifier.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Node2): ...
    @overload
    def __init__(self, nx: float, ny: float): ...
    @overload
    def __init__(self, nx: float, ny: float, n_tag: int): ...
    @overload
    def __init__(self, other: Node2, dx: float, dy: float): ...
    @overload
    def __init__(self, A: Node2, B: Node2, f: float, n_tag: int): ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def tag(self) -> int: ...
    @overload
    def CompareTo(self, other: Node2) -> int: ...
    @overload
    def CompareTo(self, other: Node2, tolerance: float) -> int: ...
    @overload
    def Distance(self, other: Node2) -> float: ...
    @overload
    def Distance(self, nx: float, ny: float) -> float: ...
    @overload
    def DistanceSquared(self, other: Node2) -> float: ...
    @overload
    def DistanceSquared(self, nx: float, ny: float) -> float: ...
    @overload
    def Duplicate() -> Node2: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def IsCoincident(self, other: Node2) -> bool: ...
    @overload
    def IsCoincident(self, ox: float, oy: float) -> bool: ...
    @overload
    def Offset(self, dx: float, dy: float) -> None: ...
    @overload
    def Set(self, other: Node2) -> None: ...
    @overload
    def Set(self, nX: float, nY: float) -> None: ...
    @overload
    def ToString() -> str: ...

class Node3(object):
    """Represents a single, three-dimensional coordinate with index specifier.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Node3): ...
    @overload
    def __init__(self, other: Geometry.Point3d, nI: int): ...
    @overload
    def __init__(self, other: Geometry.Point3f, nI: int): ...
    @overload
    def __init__(self, nX: float, nY: float, nZ: float, nI: int): ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    @property
    def tag(self) -> int: ...
    @overload
    def Coincident(self, other: Node3) -> bool: ...
    @overload
    def CoincidentFlat(self, other: Node3) -> bool: ...
    @overload
    def CompareTo(self, other: Node3) -> int: ...
    @overload
    def Distance(self, other: Node3) -> float: ...
    @overload
    def Distance(self, ox: float, oy: float, oz: float) -> float: ...
    @overload
    def DistanceSquared(self, other: Node3) -> float: ...
    @overload
    def DistanceSquared(self, ox: float, oy: float, oz: float) -> float: ...
    @overload
    def Duplicate() -> Node3: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Offset(self, dx: float, dy: float, dz: float) -> None: ...
    @overload
    def Set(self, other: Node3) -> None: ...
    @overload
    def Set(self, nX: float, nY: float, nZ: float) -> None: ...
    @overload
    def ToString() -> str: ...

class Parallax(enum.Enum):
    Divergent = 0
    Parallel = 1
    AntiParallel = -1

class Containment(enum.Enum):
    none = 0
    inside = 1
    coincident = 2
    outside = 3

class Vec2(object):
    """Represents a single, two-dimensional vector.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Vec2): ...
    @overload
    def __init__(self, other: Geometry.Vector2d): ...
    @overload
    def __init__(self, other: Geometry.Vector2f): ...
    @overload
    def __init__(self, nX: float, nY: float): ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @overload
    def CompareTo(self, other: Vec2) -> int: ...
    @overload
    def CreatePerpendicular() -> Vec2: ...
    @overload
    def Duplicate() -> Vec2: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Unit_X(self) -> Vec2: ...
    @property
    def Unit_Y(self) -> Vec2: ...
    @overload
    def Length() -> float: ...
    @overload
    def LengthSquared() -> float: ...
    @overload
    def ParallelTo(self, v: Vec2) -> Parallax: ...
    @overload
    def ParallelTo(self, v: Vec2, angle_tol: float) -> Parallax: ...
    @overload
    def PerpendicularTo(self, v: Vec2) -> bool: ...
    @overload
    def PerpendicularTo(self, v: Vec2, angle_tol: float) -> bool: ...
    @overload
    def Set(self, other: Vec2) -> None: ...
    @overload
    def Set(self, nX: float, nY: float) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Unitize() -> None: ...

class Vec3(object):
    """Represents a single, three-dimensional vector.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Vec3): ...
    @overload
    def __init__(self, other: Geometry.Vector3d): ...
    @overload
    def __init__(self, other: Geometry.Vector3f): ...
    @overload
    def __init__(self, nX: float, nY: float, nZ: float): ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    @overload
    def CompareTo(self, other: Vec3) -> int: ...
    @overload
    def CreatePerpendicular() -> Vec3: ...
    @overload
    @staticmethod
    def CrossProduct(A: Vec3, B: Vec3) -> Vec3: ...
    @overload
    @staticmethod
    def CrossProduct(ax: float, ay: float, az: float, bx: float, by: float, bz: float) -> Vec3: ...
    @overload
    def Duplicate() -> Vec3: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Unit_X(self) -> Vec3: ...
    @property
    def Unit_Y(self) -> Vec3: ...
    @property
    def Unit_Z(self) -> Vec3: ...
    @overload
    def Length() -> float: ...
    @overload
    def LengthFlat() -> float: ...
    @overload
    def LengthSquared() -> float: ...
    @overload
    def LengthSquaredFlat() -> float: ...
    @overload
    def ParallelTo(self, v: Vec3) -> Parallax: ...
    @overload
    def ParallelTo(self, v: Vec3, angle_tol: float) -> Parallax: ...
    @overload
    def PerpendicularTo(self, v: Vec3) -> bool: ...
    @overload
    def PerpendicularTo(self, v: Vec3, angle_tol: float) -> bool: ...
    @overload
    def Set(self, other: Vec3) -> None: ...
    @overload
    def Set(self, nX: float, nY: float, nZ: float) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Unitize() -> None: ...

class Side2(enum.Enum):
    Coincident = 0
    Right = 1
    Left = -1

class LineX(enum.Enum):
    None_ = 0
    Parallel = 1
    Coincident = 2
    Point = 3

class LineCircleX(enum.Enum):
    None_ = 0
    Tangent = 1
    Secant = 2

class Line2(object):
    """Represents a single, two-dimensional line segment.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Line2): ...
    @overload
    def __init__(self, nA: Node2, nB: Node2): ...
    @overload
    def __init__(self, nAx: float, nAy: float, nBx: float, nBy: float): ...
    @property
    def Ax(self) -> float: ...
    @property
    def Ay(self) -> float: ...
    @property
    def Bx(self) -> float: ...
    @property
    def By(self) -> float: ...
    @overload
    def ClosestPoint(self, pt: Node2) -> float: ...
    @overload
    def ClosestPoint(self, x: float, y: float) -> float: ...
    @overload
    def DistanceTo(self, pt: Node2) -> float: ...
    @overload
    def DistanceTo(self, x: float, y: float) -> float: ...
    @overload
    def DistanceToSquared(self, pt: Node2) -> float: ...
    @overload
    def DistanceToSquared(self, x: float, y: float) -> float: ...
    @overload
    def Duplicate() -> Line2: ...
    @overload
    @staticmethod
    def Intersect(A: Line2, B: Line2) -> (LineX, float): ...
    @overload
    @staticmethod
    def Intersect(A: Line2, B: Line2) -> (LineX, float, float): ...
    @overload
    @staticmethod
    def Intersect(Ax: float, Ay: float, Bx: float, By: float, Cx: float, Cy: float, Dx: float, Dy: float) -> (LineX, float): ...
    @overload
    @staticmethod
    def Intersect(Ax: float, Ay: float, Bx: float, By: float, Cx: float, Cy: float, Dx: float, Dy: float) -> (LineX, float, float): ...
    @overload
    def Length() -> float: ...
    @overload
    def LengthSquared() -> float: ...
    @overload
    @staticmethod
    def MidLine(A: Node2, B: Node2) -> Line2: ...
    @overload
    @staticmethod
    def MidLine(A: Node2, B: Node2, Wa: float, Wb: float) -> Line2: ...
    @overload
    def PointAt(self, t: float) -> Node2: ...
    @overload
    def Set(self, other: Line2) -> None: ...
    @overload
    def Set(self, A: Node2, B: Node2) -> None: ...
    @overload
    @staticmethod
    def Side(edge: Line2, pt: Node2) -> Side2: ...
    @overload
    @staticmethod
    def Side(Ax: float, Ay: float, Bx: float, By: float, Px: float, Py: float) -> Side2: ...

class Line3(object):
    """Represents a single, three-dimensional line segment.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Line3): ...
    @overload
    def __init__(self, nA: Node3, nB: Node3): ...
    @overload
    def __init__(self, nAx: float, nAy: float, nAz: float, nBx: float, nBy: float, nBz: float): ...
    @property
    def Ax(self) -> float: ...
    @property
    def Ay(self) -> float: ...
    @property
    def Az(self) -> float: ...
    @property
    def Bx(self) -> float: ...
    @property
    def By(self) -> float: ...
    @property
    def Bz(self) -> float: ...
    @overload
    def ClosestPoint(self, pt: Node3) -> float: ...
    @overload
    def ClosestPoint(self, x: float, y: float, z: float) -> float: ...
    @overload
    def DistanceTo(self, pt: Node3) -> float: ...
    @overload
    def DistanceTo(self, x: float, y: float, z: float) -> float: ...
    @overload
    def DistanceToSquared(self, pt: Node3) -> float: ...
    @overload
    def DistanceToSquared(self, x: float, y: float, z: float) -> float: ...
    @overload
    def Duplicate() -> Line3: ...
    @overload
    @staticmethod
    def Intersect(A: Line3, B: Line3) -> (LineX, float): ...
    @overload
    @staticmethod
    def Intersect(A: Line3, B: Line3) -> (LineX, float, float): ...
    @overload
    @staticmethod
    def Intersect(Ax: float, Ay: float, Az: float, Bx: float, By: float, Bz: float, Cx: float, Cy: float, Cz: float, Dx: float, Dy: float, Dz: float) -> (LineX, float): ...
    @overload
    @staticmethod
    def Intersect(Ax: float, Ay: float, Az: float, Bx: float, By: float, Bz: float, Cx: float, Cy: float, Cz: float, Dx: float, Dy: float, Dz: float) -> (LineX, float, float): ...
    @overload
    def Length() -> float: ...
    @overload
    def LengthSquared() -> float: ...
    @overload
    def PointAt(self, t: float) -> Node3: ...
    @overload
    def Set(self, other: Line3) -> None: ...
    @overload
    def Set(self, A: Node3, B: Node3) -> None: ...

class Rectangle2(object):
    """Represents a single, two-dimensional, orthogonal rectangle.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, p0: Node2, p1: Node2): ...
    @overload
    def __init__(self, x0: float, y0: float, x1: float, y1: float): ...
    @property
    def x_min(self) -> float: ...
    @property
    def y_min(self) -> float: ...
    @property
    def x_max(self) -> float: ...
    @property
    def y_max(self) -> float: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Grow(self, pt: Node2) -> None: ...
    @overload
    def Grow(self, rec: Rectangle2) -> None: ...
    @overload
    def Grow(self, x: float, y: float) -> None: ...
    @overload
    def Includes(self, pt: Node2) -> Containment: ...
    @overload
    def Includes(self, x: float, y: float) -> Containment: ...
    @overload
    def Intersect(self, line: Line2) -> Node2: ...
    @overload
    def MakeIncreasing() -> None: ...
    @overload
    def ParameterAt(self, pt: Node2) -> Node2: ...
    @overload
    def ParameterAt(self, x: float, y: float) -> Node2: ...
    @overload
    def PointAt(self, x: float, y: float) -> Node2: ...

class Plane(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Plane): ...
    @overload
    def __init__(self, other: Geometry.Plane): ...
    @overload
    def __init__(self, nOrigin: Node3, nNormal: Vec3): ...
    @overload
    def __init__(self, nOrigin: Node3, nXAxis: Vec3, nYAxis: Vec3): ...
    @overload
    def __init__(self, nOrigin: Node3, nXAxis: Vec3, nYAxis: Vec3, nZAxis: Vec3): ...
    @property
    def origin(self) -> Node3: ...
    @property
    def x_axis(self) -> Vec3: ...
    @property
    def y_axis(self) -> Vec3: ...
    @property
    def z_axis(self) -> Vec3: ...
    @property
    def World_XY(self) -> Plane: ...
    @overload
    def PointAt(self, u: float, v: float) -> Node3: ...
    @overload
    def PointAt(self, u: float, v: float, w: float) -> Node3: ...
    @overload
    def Project(self, pt: Node3) -> None: ...
    @overload
    def Project(self, pts: Generic.IList) -> None: ...
    @overload
    def Project(self, pt: Node3) -> (float, float): ...
    @overload
    def Unitize() -> None: ...

class Circle2(object):
    """Represents a circle, defined by origin and radius

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Circle2): ...
    @overload
    def __init__(self, origin: Node2, radius: float): ...
    @overload
    def __init__(self, A: Node2, B: Node2, C: Node2): ...
    @property
    def O(self) -> Node2: ...
    @property
    def R(self) -> float: ...
    @overload
    @staticmethod
    def Circle3Pt(ax: float, ay: float, bx: float, by: float, cx: float, cy: float) -> (bool, float, float, float): ...
    @overload
    def ClosestPointTo(self, pt: Node2) -> float: ...
    @overload
    def ClosestPointTo(self, x: float, y: float) -> float: ...
    @overload
    def ClosestPointTo(self, pt: Node2) -> (Node2, float): ...
    @overload
    def ClosestPointTo(self, x: float, y: float) -> (Node2, float): ...
    @overload
    def Contains(self, pt: Node2) -> Containment: ...
    @overload
    def Contains(self, x: float, y: float) -> Containment: ...
    @overload
    def Duplicate() -> Circle2: ...
    @property
    def Area(self) -> float: ...
    @property
    def Circumference(self) -> float: ...
    @overload
    def Intersect(self, line: Line2) -> (LineCircleX, float, float): ...
    @overload
    def Intersect(self, line: Line2) -> (LineCircleX, float, float, float, float): ...
    @overload
    def PointAt(self, t: float) -> Node2: ...
    @overload
    def TangentAt(self, t: float) -> Vec2: ...

class Region2(object):
    """Represents a closed, convex region.

    """
    def __init__(self, nodes: Generic.IEnumerable): ...
    @overload
    def Contains(self, node: Node2) -> bool: ...

class SamplingRegion(object):
    """    """
    def __init__(self, regions: Generic.IEnumerable): ...
    @overload
    def Dispose() -> None: ...

class Node2List(object):
    """Represents a list of (un)sorted nodes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, L: Generic.IEnumerable): ...
    @overload
    def __init__(self, L: Node2List): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def Append(self, node: Node2) -> None: ...
    @overload
    def AppendRange(self, nodes: Generic.IEnumerable) -> None: ...
    @overload
    def BinarySearch_I(self, i: int) -> int: ...
    @overload
    def BinarySearch_X(self, x: float) -> int: ...
    @overload
    def BinarySearch_Y(self, y: float) -> int: ...
    @overload
    def BoundingBox(self, GrowthFactor: float, ForceSquareLeaves: bool) -> (bool, float, float, float, float): ...
    @overload
    def CreateTree(self, GrowthFactor: float, SquareLeaves: bool, GroupLimit: int) -> Node2Tree: ...
    @overload
    def CullDuplicates() -> int: ...
    @overload
    def CullNullRefs() -> int: ...
    @overload
    def ExpireSequence() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def InternalList(self) -> Generic.List: ...
    @property
    def Node(self) -> Node2: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetEnumerator1() -> Collections.IEnumerator: ...
    @overload
    def Insert(self, index: int, node: Node2) -> None: ...
    @overload
    def InsertRange(self, index: int, nodes: Generic.IEnumerable) -> None: ...
    @overload
    def JitterNodes(self, amount: float) -> None: ...
    @overload
    def NearestNodes(self, x: float, y: float, N: int, min_dist_squared: float, max_dist_squared: float) -> Generic.List: ...
    @overload
    def NullifyDuplicates() -> int: ...
    @overload
    def Remove(self, node: Node2) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RenumberNodes() -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @InternalList.setter
    def InternalList(self, value: System.Void): ...
    @Node.setter
    def Node(self, value: System.Void): ...
    @overload
    def Sort(self, type_: NodeListSort) -> None: ...

class Node3List(object):
    """Represents a list of (un)sorted nodes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, L: Generic.IEnumerable): ...
    @overload
    def __init__(self, L: Node3List): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def Append(self, node: Node3) -> None: ...
    @overload
    def AppendRange(self, nodes: Generic.IEnumerable) -> None: ...
    @overload
    def BinarySearch_I(self, i: int) -> int: ...
    @overload
    def BinarySearch_X(self, x: float) -> int: ...
    @overload
    def BinarySearch_Y(self, y: float) -> int: ...
    @overload
    def BinarySearch_Z(self, z: float) -> int: ...
    @overload
    def BoundingBox(self, GrowthFactor: float, ForceSquareLeaves: bool) -> (bool, float, float, float, float, float, float): ...
    @overload
    def Clear() -> None: ...
    @overload
    def CreateTree(self, GrowthFactor: float, SquareLeaves: bool, GroupLimit: int) -> Node3Tree: ...
    @overload
    def CullDuplicates() -> int: ...
    @overload
    def CullNullRefs() -> int: ...
    @overload
    def ExpireSequence() -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def InternalList(self) -> Generic.List: ...
    @property
    def Node(self) -> Node3: ...
    @overload
    def Insert(self, index: int, node: Node3) -> None: ...
    @overload
    def InsertRange(self, index: int, nodes: Generic.IEnumerable) -> None: ...
    @overload
    def JitterNodes(self, amount: float) -> None: ...
    @overload
    def NearestNodes(self, x: float, y: float, z: float, N: int, min_dist_squared: float, max_dist_squared: float) -> Generic.List: ...
    @overload
    def NullifyDuplicates() -> int: ...
    @overload
    def Remove(self, node: Node3) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RenumberNodes() -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @InternalList.setter
    def InternalList(self, value: System.Void): ...
    @Node.setter
    def Node(self, value: System.Void): ...
    @overload
    def Sort(self, type_: NodeListSort) -> None: ...

class Node2Tree(object):
    """Frontend for a recursive Quad-tree Node structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, owner: Node2List): ...
    @overload
    def PerformAction(self, func: LeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def PerformAction(self, func: ILeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def RecreateTree(self, GrowthFactor: float, ForceSquareLeaves: bool, GroupLimit: int) -> bool: ...
    @overload
    def SolveProximity(self, prox: Node2Proximity) -> None: ...

class Node2Leaf(object):
    """Represents a single element in a recursive quad-tree Node structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Node2Leaf): ...
    @overload
    def __init__(self, x0: float, x1: float, y0: float, y1: float): ...
    @overload
    def Contains(self, x: float, y: float) -> bool: ...
    @property
    def A(self) -> Node2Leaf: ...
    @property
    def B(self) -> Node2Leaf: ...
    @property
    def C(self) -> Node2Leaf: ...
    @property
    def D(self) -> Node2Leaf: ...
    @property
    def Nodes(self) -> Generic.List: ...
    @property
    def SubLeafCount(self) -> int: ...
    @property
    def x_max(self) -> float: ...
    @property
    def x_mid(self) -> float: ...
    @property
    def x_min(self) -> float: ...
    @property
    def y_max(self) -> float: ...
    @property
    def y_mid(self) -> float: ...
    @property
    def y_min(self) -> float: ...
    @overload
    def MaximumDistance(self, x: float, y: float) -> float: ...
    @overload
    def MaximumDistanceSquared(self, x: float, y: float) -> float: ...
    @overload
    def MinimumDistance(self, x: float, y: float) -> float: ...
    @overload
    def MinimumDistanceSquared(self, x: float, y: float) -> float: ...
    @overload
    def PerformLeafAction(self, func: LeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def PerformLeafAction(self, func: ILeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def SolveProximity(self, nodes: Node2List, prox: Node2Proximity) -> None: ...
    @overload
    def SubDivide(self, nodes: Node2List, index_subset: Generic.List, group_limit: int) -> None: ...

class Node3Tree(object):
    """Frontend for a recursive Oc-tree Node structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, owner: Node3List): ...
    @property
    def Root(self) -> Node3Leaf: ...
    @overload
    def PerformAction(self, func: LeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def PerformAction(self, func: ILeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def RecreateTree(self, growthFactor: float, squareLeaves: bool, groupLimit: int) -> bool: ...
    @overload
    def SolveProximity(self, prox: Node3Proximity) -> None: ...

class Node3Leaf(object):
    """Represents a single element in a recursive Oc-tree Node structure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Node3Leaf): ...
    @overload
    def __init__(self, x0: float, x1: float, y0: float, y1: float, z0: float, z1: float): ...
    @overload
    def Contains(self, x: float, y: float, z: float) -> bool: ...
    @property
    def A(self) -> Node3Leaf: ...
    @property
    def B(self) -> Node3Leaf: ...
    @property
    def C(self) -> Node3Leaf: ...
    @property
    def D(self) -> Node3Leaf: ...
    @property
    def E(self) -> Node3Leaf: ...
    @property
    def F(self) -> Node3Leaf: ...
    @property
    def G(self) -> Node3Leaf: ...
    @property
    def H(self) -> Node3Leaf: ...
    @property
    def Nodes(self) -> Generic.List: ...
    @property
    def SubLeafCount(self) -> int: ...
    @property
    def x_max(self) -> float: ...
    @property
    def x_mid(self) -> float: ...
    @property
    def x_min(self) -> float: ...
    @property
    def y_max(self) -> float: ...
    @property
    def y_mid(self) -> float: ...
    @property
    def y_min(self) -> float: ...
    @property
    def z_max(self) -> float: ...
    @property
    def z_mid(self) -> float: ...
    @property
    def z_min(self) -> float: ...
    @overload
    def MaximumDistance(self, x: float, y: float, z: float) -> float: ...
    @overload
    def MaximumDistanceSquared(self, x: float, y: float, z: float) -> float: ...
    @overload
    def MinimumDistance(self, x: float, y: float, z: float) -> float: ...
    @overload
    def MinimumDistanceSquared(self, x: float, y: float, z: float) -> float: ...
    @overload
    def PerformLeafAction(self, func: LeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def PerformLeafAction(self, func: ILeafAction, call_on_empty_leaves: bool) -> None: ...
    @overload
    def RemoveNode(self, nodes: Node3List, node: Node3) -> bool: ...
    @overload
    def RemoveNode(self, nodes: Node3List, nodeTag: int) -> bool: ...
    @overload
    def SolveProximity(self, nodes: Node3List, prox: Node3Proximity) -> None: ...
    @overload
    def SubDivide(self, nodes: Node3List, index_subset: Generic.List, group_limit: int) -> None: ...
    @overload
    def TrimExcess() -> None: ...

class Node2Proximity(object):
    """Maintains settings and results for node proximity searches.

    """
    @overload
    def __init__(self, search_start: Node2, search_start_index: int): ...
    @overload
    def __init__(self, search_start: Node2, search_start_index: int, max_results: int): ...
    @overload
    def __init__(self, search_start: Node2, search_start_index: int, max_results: int, min_distance: float, max_distance: float): ...
    @overload
    def DistanceRange() -> (float, float): ...
    @property
    def CurrentCount(self) -> int: ...
    @property
    def DistanceList(self) -> Generic.List: ...
    @property
    def FurthestDistance(self) -> float: ...
    @property
    def FurthestDistanceSquared(self) -> float: ...
    @property
    def FurthestPoint(self) -> int: ...
    @property
    def IndexList(self) -> Generic.List: ...
    @property
    def MaximumCount(self) -> int: ...
    @property
    def MaxSearchRadius(self) -> float: ...
    @property
    def MaxSearchRadiusSquared(self) -> float: ...
    @property
    def MinSearchRadius(self) -> float: ...
    @property
    def MinSearchRadiusSquared(self) -> float: ...
    @property
    def NearestDistance(self) -> float: ...
    @property
    def NearestDistanceSquared(self) -> float: ...
    @property
    def NearestPoint(self) -> int: ...
    @property
    def Start(self) -> Node2: ...
    @property
    def StartIndex(self) -> int: ...
    @overload
    def RegisterNode(self, node: Node2, index: int) -> bool: ...
    @overload
    def ResetLists() -> None: ...

class Node3Proximity(object):
    """Maintains settings and results for node proximity searches.

    """
    @overload
    def __init__(self, search_start: Node3, search_start_index: int): ...
    @overload
    def __init__(self, search_start: Node3, search_start_index: int, max_results: int): ...
    @overload
    def __init__(self, search_start: Node3, search_start_index: int, max_results: int, min_distance: float, max_distance: float): ...
    @overload
    def DistanceRange() -> (float, float): ...
    @property
    def CurrentCount(self) -> int: ...
    @property
    def DistanceList(self) -> Generic.List: ...
    @property
    def FurthestDistance(self) -> float: ...
    @property
    def FurthestDistanceSquared(self) -> float: ...
    @property
    def FurthestPoint(self) -> int: ...
    @property
    def IndexList(self) -> Generic.List: ...
    @property
    def MaximumCount(self) -> int: ...
    @property
    def MaxSearchRadius(self) -> float: ...
    @property
    def MaxSearchRadiusSquared(self) -> float: ...
    @property
    def MinSearchRadius(self) -> float: ...
    @property
    def MinSearchRadiusSquared(self) -> float: ...
    @property
    def NearestDistance(self) -> float: ...
    @property
    def NearestDistanceSquared(self) -> float: ...
    @property
    def NearestPoint(self) -> int: ...
    @property
    def Start(self) -> Node3: ...
    @property
    def StartIndex(self) -> int: ...
    @overload
    def RegisterNode(self, node: Node3, index: int) -> bool: ...
    @overload
    def ResetLists() -> None: ...

class PointCloud(object):
    """Maintains an R-Tree of 3D points.

    """
    def __init__(self): ...
    @overload
    def InsertPoint(self, pt: Geometry.Point3d) -> int: ...

class NodeListSort(enum.Enum):
    none = 0
    X = 1
    Y = 2
    Index = 3

class NodeListSort(enum.Enum):
    none = 0
    X = 1
    Y = 2
    Z = 3
    Index = 4

class VorLeafRecursionResult(enum.Enum):
    Continue = 0
    Abort = -1

class LeafAction(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, Leaf: Node2Leaf, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> VorLeafRecursionResult: ...
    @overload
    def Invoke(self, Leaf: Node2Leaf) -> VorLeafRecursionResult: ...

class ILeafAction:
    """    """
    @overload
    def LeafAction(self, Leaf: Node2Leaf) -> VorLeafRecursionResult: ...

class VorLeafRecursionResult(enum.Enum):
    Continue = 0
    Abort = -1

class LeafAction(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, Leaf: Node3Leaf, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> VorLeafRecursionResult: ...
    @overload
    def Invoke(self, Leaf: Node3Leaf) -> VorLeafRecursionResult: ...

class ILeafAction:
    """    """
    @overload
    def LeafAction(self, Leaf: Node3Leaf) -> VorLeafRecursionResult: ...

# endregion
