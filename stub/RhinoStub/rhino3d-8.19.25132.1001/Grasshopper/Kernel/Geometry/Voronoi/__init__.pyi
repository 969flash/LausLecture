"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Cell2", "Solver", "Cell3Facet", "Cell3"]
# endregion

# region: Imports
from Grasshopper.Kernel import Geometry
from Grasshopper.Kernel.Geometry import Delaunay
from Rhino import Geometry
from System.Collections import Generic
from System.Drawing import Drawing2D
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class Cell2(object):
    """Represents a two-dimensional voronoi diagram cell.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pt: Geometry.Node2, Radius: float): ...
    @overload
    def __init__(self, pt: Geometry.Node2, Contour: Generic.IEnumerable): ...
    @property
    def M(self) -> Geometry.Node2: ...
    @property
    def C(self) -> Generic.List: ...
    @overload
    def Edges() -> Generic.List: ...
    @overload
    def Radius() -> float: ...
    @overload
    def Slice(self, other: Geometry.Node2) -> bool: ...
    @overload
    def Slice(self, line: Geometry.Line2) -> bool: ...
    @overload
    @staticmethod
    def SliceConvexNGon(V: Generic.List, line: Geometry.Line2, side: Geometry.Side2) -> (Generic.List, bool): ...
    @overload
    def ToGraphicsPath() -> Drawing2D.GraphicsPath: ...
    @overload
    def ToPolyCurve(self, radius: float) -> Geometry.PolyCurve: ...
    @overload
    def ToPolyline() -> Geometry.Polyline: ...

class Solver(object):
    """    """
    @overload
    @staticmethod
    def Solve_BruteForce(nodes: Geometry.Node2List, outline: Generic.IEnumerable) -> Generic.List: ...
    @overload
    @staticmethod
    def Solve_Connectivity(nodes: Geometry.Node2List, diagram: Delaunay.Connectivity, outline: Generic.IEnumerable) -> Generic.List: ...

class Cell3Facet(Geometry.Polyline):
    """Represents a facet of a 3D voronoi cell.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pts: Generic.IEnumerable): ...
    @overload
    def __init__(self, other: Cell3Facet): ...
    @overload
    def CleanUp(self, tolerance: float) -> (float): ...
    @overload
    def DestroyCaches() -> None: ...
    @property
    def MidPoint(self) -> Geometry.Point3d: ...
    @property
    def Original(self) -> bool: ...
    @property
    def Radius(self) -> float: ...
    @Original.setter
    def Original(self, value: System.Void): ...

class Cell3(object):
    """Represents a single 3D voronoi cell.

    """
    @overload
    def __init__(self, other: Cell3): ...
    @overload
    def __init__(self, center: Geometry.Point3d, box: Geometry.Box): ...
    @property
    def AngleTolerance(self) -> float: ...
    @property
    def BoundaryCount(self) -> int: ...
    @property
    def Center(self) -> Geometry.Point3d: ...
    @property
    def Facets(self) -> Generic.List: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    @staticmethod
    def MidPlane(A: Geometry.Point3d, B: Geometry.Point3d) -> Geometry.Plane: ...
    @Tolerance.setter
    def Tolerance(self, value: System.Void): ...
    @overload
    def Slice(self, pt: Geometry.Point3d) -> None: ...
    @overload
    def Slice(self, pt: Generic.IEnumerable) -> None: ...
    @overload
    def Slice(self, pt: Geometry.System.Array[Geometry.Point3d]) -> None: ...
    @overload
    def Slice(self, section: Geometry.Plane) -> None: ...
    @overload
    def ToBrep() -> Geometry.Brep: ...

# endregion
