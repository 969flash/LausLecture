"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Coordinates3d", "Validation3d", "TreeDelegates", "Index3d", "Node3d"]
# endregion

# region: Imports
from Grasshopper.Kernel import Geometry
from Rhino import Geometry
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import Rhino
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class Coordinates3d(System.MulticastDelegate):
    """Delegate for coordinate retrieval.

    Coordinates3d[T]
    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, element: T, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> (System.IAsyncResult, float, float, float): ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> (float, float, float): ...
    @overload
    def Invoke(self, element: T) -> (float, float, float): ...

class Validation3d(System.MulticastDelegate):
    """Delegate to be used during advanced customized searches.

    Validation3d[T]
    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, element: T, globalIndex: int, node: Node3d, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, element: T, globalIndex: int, node: Node3d) -> bool: ...

class TreeDelegates(object):
    """Provides a bunch of standard coordinate extractor methods.

    """
    @overload
    @staticmethod
    def Node2Coordinates(pt: Geometry.Node2) -> (float, float, float): ...
    @overload
    @staticmethod
    def Node3Coordinates(pt: Geometry.Node3) -> (float, float, float): ...
    @overload
    @staticmethod
    def Point2dCoordinates(pt: Geometry.Point2d) -> (float, float, float): ...
    @overload
    @staticmethod
    def Point2fCoordinates(pt: Geometry.Point2d) -> (float, float, float): ...
    @overload
    @staticmethod
    def Point3dCoordinates(pt: Geometry.Point3d) -> (float, float, float): ...
    @overload
    @staticmethod
    def Point3fCoordinates(pt: Geometry.Point3d) -> (float, float, float): ...
    @overload
    @staticmethod
    def PointCoordinates(pt: Geometry.Point) -> (float, float, float): ...

class Index3d(object):
    """Represents an element index within a Tree3d instance.

    Index3d[T]
    """
    def __init__(self, node: Node3d, nodeIndex: int): ...
    @overload
    def CompareTo(self, other: Index3d) -> int: ...
    @property
    def GlobalIndex(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @property
    def LocalIndex(self) -> int: ...
    @property
    def Node(self) -> Node3d: ...

class Node3d(object):
    """Basic node in a Tree3d structure. Nodes in tree structures maintain a local region and either a list of content indices or a list of up to 8 child nodes.

    Node3d[T]
    """
    @overload
    def __init__(self, converter: Coordinates3d, region: Geometry.BoundingBox): ...
    @overload
    def __init__(self, converter: Coordinates3d, region: Geometry.BoundingBox, limit: int): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def AddToRhinoDocument(self, doc: Rhino.RhinoDoc) -> None: ...
    @overload
    def CollapseNodes() -> Node3d: ...
    @overload
    def FurthestItem(self, locus: T) -> Index3d: ...
    @overload
    def FurthestItem(self, locus: Geometry.Point3d) -> Index3d: ...
    @overload
    def FurthestItem(self, x: float, y: float, z: float) -> Index3d: ...
    @overload
    def FurthestItem(self, locus: T, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @overload
    def FurthestItem(self, locus: Geometry.Point3d, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @overload
    def FurthestItem(self, x: float, y: float, z: float, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @property
    def Center(self) -> Geometry.Point3d: ...
    @property
    def ChildCount(self) -> int: ...
    @property
    def ChildNode(self) -> Node3d: ...
    @property
    def ContentAverage(self) -> Geometry.Point3d: ...
    @property
    def ContentBoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def IndicesLocal(self) -> Generic.List: ...
    @property
    def IndicesRecursive(self) -> Generic.List: ...
    @property
    def IsLeaf(self) -> bool: ...
    @property
    def IsMutable(self) -> bool: ...
    @property
    def IsRoot(self) -> bool: ...
    @property
    def IsTwig(self) -> bool: ...
    @property
    def ItemCount(self) -> int: ...
    @property
    def ItemsGlobal(self) -> Generic.List: ...
    @property
    def ItemsLocal(self) -> Generic.List: ...
    @property
    def Limit(self) -> int: ...
    @property
    def MemoryConsumption(self) -> System.Int64: ...
    @property
    def NextNode(self) -> Node3d: ...
    @property
    def NodeDepth(self) -> int: ...
    @property
    def ParentNode(self) -> Node3d: ...
    @property
    def Region(self) -> Geometry.BoundingBox: ...
    @property
    def RootNode(self) -> Node3d: ...
    @property
    def WeightedSubdivision(self) -> bool: ...
    @overload
    def NearestItem(self, locus: T) -> Index3d: ...
    @overload
    def NearestItem(self, locus: Geometry.Point3d) -> Index3d: ...
    @overload
    def NearestItem(self, x: float, y: float, z: float) -> Index3d: ...
    @overload
    def NearestItem(self, locus: Geometry.Point3d, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @overload
    def NearestItem(self, locus: T, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @overload
    def NearestItem(self, x: float, y: float, z: float, validationDelegate: Validation3d) -> Index3d: ...
    @overload
    def NearestItem(self, x: float, y: float, z: float, minimumDistance: float, maximumDistance: float) -> Index3d: ...
    @overload
    def NearestItems(self, locus: T, groupSize: int) -> Generic.List: ...
    @overload
    def NearestItems(self, locus: T, groupSize: int, minimumDistance: float, maximumDistance: float) -> Generic.List: ...
    @overload
    def NearestItems(self, x: float, y: float, z: float, groupSize: int) -> Generic.List: ...
    @overload
    def NearestItems(self, x: float, y: float, z: float, groupSize: int, minimumDistance: float, maximumDistance: float) -> Generic.List: ...
    @overload
    def OptimizeTree() -> Node3d: ...
    @overload
    def Remove(self, index: Index3d) -> None: ...
    @overload
    def Remove(self, index: int) -> None: ...
    @WeightedSubdivision.setter
    def WeightedSubdivision(self, value: System.Void): ...
    @overload
    def ShrinkRegions() -> None: ...
    @overload
    def SubTree(self, omitStructuralNodes: bool) -> Generic.IEnumerator: ...
    @overload
    def TrimExcess() -> None: ...

# endregion
