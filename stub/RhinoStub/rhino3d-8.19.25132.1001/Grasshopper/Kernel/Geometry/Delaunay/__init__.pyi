"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Face", "FaceEx", "FaceExList", "Edge", "EdgeList", "Connectivity", "Solver"]
# endregion

# region: Imports
from Grasshopper.Kernel import Geometry
from Rhino import Geometry
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class Face(object):
    """Represents a triangle bounded by 3 corners

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Face): ...
    @overload
    def __init__(self, nA: int, nB: int, nC: int): ...
    @property
    def A(self) -> int: ...
    @property
    def B(self) -> int: ...
    @property
    def C(self) -> int: ...
    @overload
    def ContainsEdge(self, E0: int, E1: int) -> bool: ...
    @overload
    def ContainsVertex(self, index: int) -> bool: ...
    @overload
    def Duplicate() -> Face: ...
    @property
    def DebuggerDisplay(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Set(self, other: Face) -> None: ...
    @overload
    def Set(self, nA: int, nB: int, nC: int) -> None: ...

class FaceEx(Face):
    """Represents a triangle bounded by 3 corners. FaceEx adds circumcircle caching and tests to Face

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Face): ...
    @overload
    def __init__(self, nA: int, nB: int, nC: int): ...
    @property
    def center(self) -> Geometry.Node2: ...
    @property
    def radius(self) -> float: ...
    @property
    def radius_squared(self) -> float: ...
    @property
    def A(self) -> int: ...
    @property
    def B(self) -> int: ...
    @property
    def C(self) -> int: ...
    @overload
    def ComputeBC(self, Nodes: Geometry.Node2List) -> None: ...
    @overload
    def ComputeBC(self, D: Geometry.Node2, E: Geometry.Node2, F: Geometry.Node2) -> None: ...
    @overload
    def ContainsInBoundingCircle(self, N: Geometry.Node2) -> bool: ...
    @overload
    def ContainsInBoundingCircle(self, x: float, y: float) -> bool: ...
    @property
    def Front(self) -> float: ...

class FaceExList(object):
    """Represents a list of sorted faces.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initial_capacity: int): ...
    @overload
    def AddFace(self, F: FaceEx) -> None: ...
    @overload
    def AddFace(self, A: int, B: int, C: int, Nodes: Geometry.Node2List) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CullFaces(self, x: float, y: float, F: Generic.List) -> int: ...
    @property
    def Capacity(self) -> int: ...
    @overload
    def InsertFaces(self, nodes: Geometry.Node2List) -> None: ...
    @overload
    def MigrateRemainingFaces(self, static_list: Generic.List) -> None: ...
    @overload
    def MigrateStaticFaces(self, static_list: Generic.List, wave_front: float) -> int: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @overload
    def TrimNulls() -> int: ...

class Edge(System.ValueType):
    """Represents a topological edge connecting two node indices.

    """
    def __init__(self, nA: int, nB: int, nN: int): ...
    @property
    def A(self) -> int: ...
    @property
    def B(self) -> int: ...
    @property
    def N(self) -> int: ...
    @overload
    def CompareTo(self, other: Edge) -> int: ...
    @property
    def DebuggerDisplay(self) -> str: ...

class EdgeList(object):
    """Provides fast access to a collection of edges

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, F: Generic.List): ...
    @overload
    def __init__(self, F: Generic.List): ...
    @overload
    def AddEdge(self, E: Edge) -> None: ...
    @overload
    def AddEdge(self, A: int, B: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsEdge(self, E: Edge) -> int: ...
    @overload
    def ContainsEdge(self, A: int, B: int) -> int: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Edge(self) -> Edge: ...
    @overload
    def RemoveEdge(self, E: Edge) -> bool: ...
    @overload
    def RemoveEdge(self, A: int, B: int) -> bool: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @overload
    def TrimHighValenceEdges() -> int: ...

class Connectivity(object):
    """Represents a connectivity diagram for a triangulated mesh with fast node-node neighbour lookup.

    """
    def __init__(self): ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetConnections(self, node_index: int) -> Generic.List: ...
    @overload
    def SolveConnectivity(self, nodes: Geometry.Node2List, faces: Generic.List, include_convex_hull_edges: bool) -> None: ...

class Solver(object):
    """    """
    @overload
    @staticmethod
    def Solve_Connectivity(nodes: Geometry.Node2List, jitter_amount: float, include_convex_hull_edges: bool) -> Connectivity: ...
    @overload
    @staticmethod
    def Solve_Faces(nodes: Geometry.Node2List, jitter_amount: float) -> Generic.List: ...
    @overload
    @staticmethod
    def Solve_Mesh(nodes: Geometry.Node2List, jitter_amount: float) -> (Geometry.Mesh, Generic.List): ...

# endregion
