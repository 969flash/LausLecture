"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_BezierGraph", "GH_ConicGraph", "GH_GaussianGraph", "GH_GraphDrawInstruction", "IGH_GraphProxyObject", "GH_GraphProxyObject", "IGH_Graph", "GH_AbstractGraph", "GH_GraphContainer", "GH_GripConstraint", "GH_GraphGrip", "GH_LinearGraph", "GH_PerlinGraph", "GH_PowerGraph", "GH_ParabolaGraph", "GH_SquareRootGraph", "GH_SineEquation", "GH_SineGraph", "GH_DoubleSineGraph", "GH_SincGraph", "GraphChangedEventHandler", "GripChangedEventHandler", "GH_LinearGraphProxy"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import GUI
from Grasshopper.GUI import Canvas
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_BezierGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def ClearCaches() -> None: ...
    @overload
    def Draw_PreRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_ConicGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_GaussianGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_GraphDrawInstruction(enum.Enum):
    none = 0
    skip = 1

class IGH_GraphProxyObject:
    """    """

class GH_GraphProxyObject(object):
    """    """
    def __init__(self, n_owner: IGH_Graph): ...
    @property
    def Description(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...

class GH_GraphProxyObject(object):
    """    GH_GraphProxyObject[T]
    """
    def __init__(self, n_owner: T): ...
    @property
    def Description(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...

class IGH_Graph:
    """    """
    @overload
    def ClearCaches() -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate() -> IGH_Graph: ...
    @overload
    def EmitProxyObject() -> IGH_GraphProxyObject: ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Grips(self) -> Generic.List: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse() -> None: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @property
    def GraphChanged(self): ...

class GH_AbstractGraph(object):
    """    """
    @overload
    def ClearCaches() -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate() -> IGH_Graph: ...
    @overload
    def EmitProxyObject() -> IGH_GraphProxyObject: ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Grips(self) -> Generic.List: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_GraphContainer(object):
    """    """
    @overload
    def __init__(self, n_graph: IGH_Graph): ...
    @overload
    def __init__(self, n_graph: IGH_Graph, n_x0: float, n_x1: float, n_y0: float, n_y1: float): ...
    @overload
    def ClearCaches() -> None: ...
    @overload
    def Duplicate() -> GH_GraphContainer: ...
    @overload
    def FromX(self, t: float) -> float: ...
    @overload
    def FromY(self, t: float) -> float: ...
    @property
    def DisplayScale(self) -> System.Single: ...
    @property
    def Graph(self) -> IGH_Graph: ...
    @property
    def LockGrips(self) -> bool: ...
    @property
    def Region(self) -> Drawing.RectangleF: ...
    @property
    def X0(self) -> float: ...
    @property
    def X1(self) -> float: ...
    @property
    def Y0(self) -> float: ...
    @property
    def Y1(self) -> float: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemapPointsToGraphRegion(self, pts: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    @staticmethod
    def Render_GraphBackground(G: Drawing.Graphics, region: Drawing.RectangleF, bActive: bool) -> None: ...
    @overload
    @staticmethod
    def Render_GraphGrid(G: Drawing.Graphics, region: Drawing.RectangleF) -> None: ...
    @overload
    def Render_GraphPen() -> Drawing.Pen: ...
    @overload
    @staticmethod
    def Render_GuidePen() -> Drawing.Pen: ...
    @overload
    @staticmethod
    def Render_HorizontalConstraint(g: Drawing.Graphics, rec: Drawing.RectangleF, t: float) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, bIncludeDomainTags: bool, samples: Generic.List) -> None: ...
    @overload
    @staticmethod
    def Render_VerticalConstraint(g: Drawing.Graphics, rec: Drawing.RectangleF, t: float) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: Canvas.GH_Canvas, e: Forms.KeyEventArgs) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: Canvas.GH_Canvas, e: Forms.KeyEventArgs) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @DisplayScale.setter
    def DisplayScale(self, value: System.Void): ...
    @Graph.setter
    def Graph(self, value: System.Void): ...
    @LockGrips.setter
    def LockGrips(self, value: System.Void): ...
    @Region.setter
    def Region(self, value: System.Void): ...
    @X0.setter
    def X0(self, value: System.Void): ...
    @X1.setter
    def X1(self, value: System.Void): ...
    @Y0.setter
    def Y0(self, value: System.Void): ...
    @Y1.setter
    def Y1(self, value: System.Void): ...
    @overload
    def ToRegionBox(self, pt: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def ToRegionBox_x(self, x: float) -> System.Single: ...
    @overload
    def ToRegionBox_y(self, y: float) -> System.Single: ...
    @overload
    def ToUnitBox(self, pt: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def ToX(self, t_unit: float) -> float: ...
    @overload
    def ToY(self, t_unit: float) -> float: ...
    @overload
    def TryValueAt(self, t: float) -> float: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_GripConstraint(enum.Enum):
    none = 0
    horizontal = 1
    vertical = 2

class GH_GraphGrip(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nOther: GH_GraphGrip): ...
    @overload
    def __init__(self, nX: float, nY: float): ...
    @overload
    def __init__(self, nX: float, nY: float, nConstraint: GH_GripConstraint): ...
    @property
    def Constraint(self) -> GH_GripConstraint: ...
    @property
    def Index(self) -> int: ...
    @property
    def Point(self) -> Drawing.PointF: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @overload
    def LimitToUnitDomain(self, bLimitX: bool, bLimitY: bool) -> None: ...
    @overload
    def OnGripChanged(self, bIntermediate: bool) -> None: ...
    @Constraint.setter
    def Constraint(self, value: System.Void): ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    def SetIndex(self, nIndex: int) -> None: ...
    @property
    def GripChanged(self): ...

class GH_LinearGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def EmitProxyObject() -> IGH_GraphProxyObject: ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def SetFromParameters(self, nA: float, nB: float) -> None: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_PerlinGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_PowerGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_ParabolaGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_SquareRootGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_SineEquation(object):
    """    """
    def __init__(self): ...
    @property
    def amplitude(self) -> float: ...
    @property
    def frequency(self) -> float: ...
    @property
    def offset(self) -> float: ...
    @property
    def shift(self) -> float: ...
    @property
    def X0(self) -> float: ...
    @property
    def Y0(self) -> float: ...
    @property
    def X1(self) -> float: ...
    @property
    def Y1(self) -> float: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def SetEquationFromGrips() -> None: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_SineGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_DoubleSineGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def ClearCaches() -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Drawing.Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Drawing.Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GH_SincGraph(GH_AbstractGraph):
    """    """
    def __init__(self): ...
    @overload
    def GDI_GraphPath(self, reg: Drawing.RectangleF) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def GraphTypeID(self) -> System.Guid: ...
    @property
    def Icon_16x16(self) -> Drawing.Image: ...
    @property
    def IsValid(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def GraphChanged(self): ...

class GraphChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_Graph, bIntermediate: bool, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_Graph, bIntermediate: bool) -> None: ...

class GraphChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphContainer, bIntermediate: bool, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_GraphContainer, bIntermediate: bool) -> None: ...

class GripChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphGrip, bIntermediate: bool, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_GraphGrip, bIntermediate: bool) -> None: ...

class GH_LinearGraphProxy(GH_GraphProxyObject):
    """    """
    def __init__(self, n_owner: GH_LinearGraph): ...
    @property
    def Intercept(self) -> float: ...
    @property
    def Slope(self) -> float: ...
    @Intercept.setter
    def Intercept(self, value: System.Void): ...
    @Slope.setter
    def Slope(self, value: System.Void): ...

# endregion
