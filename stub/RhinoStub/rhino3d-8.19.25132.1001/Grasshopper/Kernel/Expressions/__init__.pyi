"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_CodeString", "GH_CodeStringSegment", "GH_SyntaxException", "GH_SolverException", "GH_SignatureException", "GH_ExpressionParser", "GH_CharType", "GH_ExpressionString", "GH_ExpressionSyntaxWriter", "GH_OperatorType", "GH_ParserOperator", "GH_ParserPrecedence", "GH_ParserTokenClass", "GH_ParserSymbol", "GH_ScriptVariantType", "GH_ScriptVariant", "GH_VariantType", "GH_Variant"]
# endregion

# region: Imports
from Grasshopper.Kernel import Types
from Rhino import Geometry
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_CodeString(object):
    """    """
    def __init__(self, input_: str): ...
    @overload
    def Flatten() -> str: ...
    @property
    def Segments(self) -> Generic.List: ...
    @overload
    def ParseNewString(self, input_: str) -> None: ...
    @overload
    def Replace(self, search: str, replace: str, bIgnoreCase: bool, bOmitNonCode: bool) -> None: ...
    @overload
    def ReplaceToken(self, search: str, replace: str, bIgnoreCase: bool, bOmitNonCode: bool) -> None: ...

class GH_CodeStringSegment(object):
    """    """
    def __init__(self, nString: str, bIsCode: bool): ...
    @property
    def IsCode(self) -> bool: ...
    @property
    def String(self) -> str: ...
    @property
    def StringValue(self) -> str: ...
    @overload
    def Replace(self, search: str, replace: str, bIgnoreCase: bool) -> None: ...
    @overload
    def ReplaceToken(self, token: str, replace: str, bIgnoreCase: bool) -> None: ...
    @IsCode.setter
    def IsCode(self, value: System.Void): ...
    @String.setter
    def String(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class GH_SyntaxException(System.Exception):
    """    """
    def __init__(self, nMessage: str): ...

class GH_SolverException(System.Exception):
    """    """
    def __init__(self, nMessage: str): ...

class GH_SignatureException(System.Exception):
    """    """
    def __init__(self, args: Generic.List, name: str): ...
    @property
    def Message(self) -> str: ...

class GH_ExpressionParser(object):
    """Provides a run-time evaluator for Grasshopper expressions.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bThrowExceptions: bool): ...
    @overload
    def AddVariable(self, name: str, val: bool) -> None: ...
    @overload
    def AddVariable(self, name: str, val: int) -> None: ...
    @overload
    def AddVariable(self, name: str, val: float) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Types.Complex) -> None: ...
    @overload
    def AddVariable(self, name: str, val: str) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Geometry.Vector3d) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Geometry.Point3d) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Geometry.Plane) -> None: ...
    @overload
    def AddVariableEx(self, name: str, val: Types.IGH_Goo) -> None: ...
    @overload
    def AddVariableEx(self, name: str, val: GH_Variant) -> None: ...
    @overload
    @staticmethod
    def BalancedCharTest(str_: str, char_open: System.Char, char_close: System.Char) -> (bool, int): ...
    @overload
    def CachedSymbols() -> Generic.Queue: ...
    @overload
    def CacheSymbols(self, Expression: str) -> bool: ...
    @overload
    def ClearSymbols() -> None: ...
    @overload
    def ClearVariables() -> None: ...
    @overload
    def DisplayFunctionList(self, wnd: Forms.IWin32Window) -> None: ...
    @overload
    def Evaluate() -> GH_Variant: ...
    @overload
    def Evaluate(self, qHint: Generic.Queue) -> GH_Variant: ...
    @overload
    def Evaluate(self, expression: str) -> GH_Variant: ...
    @property
    def ThrowExceptions(self) -> bool: ...
    @property
    def Variables(self) -> Generic.SortedDictionary: ...
    @overload
    @staticmethod
    def IsValidVariableName(name: str) -> bool: ...
    @ThrowExceptions.setter
    def ThrowExceptions(self, value: System.Void): ...

class GH_CharType(enum.Enum):
    undefined = 0
    whitespace = 1
    dot = 2
    comma = 3
    colon = 4
    semicolon = 5
    continuation = 6
    newline = 7
    operator = 20
    parenthesis_open = 21
    parenthesis_close = 22
    bracket_open = 23
    bracket_close = 24
    stringstart = 50
    stringend = 51
    stringbody = 52
    commentstart = 60
    commentend = 61
    commentbody = 62

class GH_ExpressionString(Generic.List):
    """    """
    def __init__(self, in_: str): ...
    @overload
    def BuildLUT() -> None: ...
    @property
    def Char(self) -> System.Char: ...
    @property
    def Next(self) -> System.Char: ...
    @property
    def Prev(self) -> System.Char: ...
    @overload
    def IsWhiteSpace(self, index: int) -> bool: ...
    @overload
    def ToString() -> str: ...

class GH_ExpressionSyntaxWriter(object):
    """    """
    @overload
    @staticmethod
    def RewriteAll(Expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForEvaluator(Expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForEvaluator(sCode: GH_CodeString) -> None: ...
    @overload
    @staticmethod
    def RewriteForGraphicInterface(expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForGraphicInterface(code: GH_CodeString) -> None: ...

class GH_OperatorType(enum.Enum):
    UnaryOnLeft = 0
    UnaryOnRight = 1
    Binary = 2

class GH_ParserOperator(object):
    """    """
    def __init__(self, name: str, symbol: System.Char, precedence: GH_ParserPrecedence, type_: GH_OperatorType, description: str): ...
    @property
    def m_name(self) -> str: ...
    @property
    def m_symbol(self) -> System.Char: ...
    @property
    def m_description(self) -> str: ...
    @property
    def m_type(self) -> GH_OperatorType: ...
    @property
    def m_precedence(self) -> GH_ParserPrecedence: ...
    @overload
    def CompareTo(self, other: GH_ParserOperator) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...

class GH_ParserPrecedence(enum.Enum):
    None_ = 0
    Level0 = 1
    Level1 = 2
    Level2 = 3
    Level3 = 4
    Level4 = 5
    Level5 = 6
    Invalid = -1

class GH_ParserTokenClass(enum.Enum):
    Keyword = 1
    Identifier = 2
    Numeric = 3
    Literal = 4
    Operator = 5
    Punctuation = 6

class GH_ParserSymbol(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, token: str, class_: GH_ParserTokenClass, level: GH_ParserPrecedence): ...
    @property
    def m_token(self) -> str: ...
    @property
    def m_class(self) -> GH_ParserTokenClass: ...
    @property
    def m_level(self) -> GH_ParserPrecedence: ...
    @overload
    def CompareTo(self, other: GH_ParserSymbol) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ToString() -> str: ...

class GH_ScriptVariantType(enum.Enum):
    nothing = 0
    boolean = 1
    integer = 2
    double = 3
    string = 5
    datetime = 6
    point = 10
    vector = 11
    plane = 12
    object_ = 20

class GH_ScriptVariant(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, val: float): ...
    @overload
    def __init__(self, val: int): ...
    @overload
    def __init__(self, val: System.Byte): ...
    @overload
    def __init__(self, val: bool): ...
    @overload
    def __init__(self, val: str): ...
    @overload
    def __init__(self, val: System.DateTime): ...
    @overload
    def __init__(self, val: Geometry.Point3d): ...
    @overload
    def __init__(self, val: Geometry.Vector3d): ...
    @overload
    def __init__(self, val: Geometry.Plane): ...
    @property
    def Boolean(self) -> bool: ...
    @property
    def DateTime(self) -> System.DateTime: ...
    @property
    def Double(self) -> float: ...
    @property
    def Integer(self) -> int: ...
    @property
    def Object(self) -> object: ...
    @property
    def Plane(self) -> Geometry.Plane: ...
    @property
    def Point(self) -> Geometry.Point3d: ...
    @property
    def String(self) -> str: ...
    @property
    def Type(self) -> GH_ScriptVariantType: ...
    @property
    def Vector(self) -> Geometry.Vector3d: ...
    @overload
    def ToString() -> str: ...

class GH_VariantType(enum.Enum):
    null = 0
    bool_ = 1
    int_ = 2
    double = 4
    string = 8
    point = 16
    plane = 32
    complex_ = 64
    unknown = -1

class GH_Variant(object):
    """Variant data used in Grasshopper Expressions.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: Types.Complex): ...
    @overload
    def __init__(self, value: Geometry.Point3d): ...
    @overload
    def __init__(self, value: Geometry.Vector3d): ...
    @overload
    def __init__(self, value: Geometry.Plane): ...
    @overload
    def __init__(self, other: GH_Variant): ...
    @overload
    def Data() -> T: ...
    @overload
    def Duplicate() -> GH_Variant: ...
    @overload
    def Evaluate() -> bool: ...
    @property
    def _Bool(self) -> bool: ...
    @property
    def _Complex(self) -> Types.Complex: ...
    @property
    def _Double(self) -> float: ...
    @property
    def _Int(self) -> int: ...
    @property
    def _Plane(self) -> Geometry.Plane: ...
    @property
    def _Point(self) -> Geometry.Point3d: ...
    @property
    def _String(self) -> str: ...
    @property
    def _Vector(self) -> Geometry.Vector3d: ...
    @property
    def IsNumeric(self) -> bool: ...
    @property
    def Type(self) -> GH_VariantType: ...
    @overload
    def ToGoo() -> Types.IGH_Goo: ...
    @overload
    def ToString() -> str: ...

# endregion
