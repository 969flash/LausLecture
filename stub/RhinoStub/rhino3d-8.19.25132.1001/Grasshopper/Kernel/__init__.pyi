"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Parameters", "Types", "Attributes", "Special", "Graphs", "Expressions", "Components", "Geometry", "Data", "GDL", "Sorting", "Utility", "Undo", "GH_PatternMatching", "GH_PersistentReferenceParam", "GH_SolutionPhase", "GH_RuntimeMessageLevel", "IGH_ActiveObject", "GH_ActiveObject", "GH_Alias", "GH_LibraryLicense", "GH_AssemblyInfo", "GH_AssemblyInfoStub", "GH_LoadingInstruction", "GH_AssemblyPriority", "GH_PickBox", "IGH_Attributes", "GH_Attributes", "GH_AttributesChangedEventArgs", "IGH_Author", "GH_Author", "IGH_ParamNameConstructor", "GH_StringPattern", "GH_IncrementalParamNameConstructor", "GH_AutoSaveTrigger", "GH_AutoSaveSettings", "IGH_BakeAwareData", "IGH_BakeAwareObject", "GH_BakeUtility", "GH_CaseInsensitiveStringComparer", "GH_DataComparison", "IGH_Component", "IGH_ContextualComponent", "GH_Component", "GH_ParamServerEventArgs", "GH_ParamHashFields", "GH_ComponentParamServer", "GH_ComponentServer", "GH_ComponentPaletteStyle", "GH_ConnectivityNode", "GH_ConnectivityDiagram", "GH_ConnectivityDisparity", "GH_Convert", "GH_Conversion", "GH_TimeKind", "GH_DisplayExpiredEventArgs", "GH_PreviewMode", "GH_PreviewFilter", "GH_PreviewMesh", "GH_Document", "GH_DocumentAssociations", "GH_DocumentContext", "GH_DocSettingsEventArgs", "GH_DocEnabledEventArgs", "GH_DocContextEventArgs", "GH_DocModifiedEventArgs", "GH_DocObjectEventArgs", "GH_DocUndoEventArgs", "GH_DocFilePathEventArgs", "GH_SelectionTopology", "GH_ClipboardType", "GH_DocumentIO", "GH_DocumentObject", "GH_DocumentProperties", "GH_Revision", "GH_SearchHit", "GH_RelevantObjectFilter", "GH_DocumentServer", "IGH_DocumentOwner", "GH_SolutionEventArgs", "GH_SolutionMode", "GH_SolutionSpan", "GH_ProcessStep", "GH_SelectionState", "GH_Arrange", "GH_Filter", "GH_DocumentSettings", "GH_UndoOperation", "GH_DocumentTreeNode", "GH_DocumentTree", "GH_GuidTable", "GH_DocumentEventServer", "IGH_EventConsumer", "GH_CustomEventServer", "GH_Exposure", "GH_ExternalFileType", "GH_ExternalFile", "GH_LineParserAction", "GH_LineParser", "GH_FileSystemEventServer", "GH_FileWatcherEvents", "GH_FileWatcher", "GH_FontServer", "GH_Format", "GH_GHALoadingEventArgs", "GH_GHXHarvester", "GH_GuidConflictSolution", "GH_IconDisplayMode", "IGH_InitCodeAware", "IGH_InstanceDescription", "GH_InstanceDescription", "IGH_InstanceGuidDependent", "GH_PluginFolderType", "GH_AssemblyFolderInfo", "GH_ListUtil", "GH_LoadingDemand", "GH_LoadingMechanism", "GH_LoadingAttribute", "GH_LoadingException", "GH_MarkovOutcome", "GH_MarkovPattern", "GH_MarkovChain", "GH_MathUtil", "GH_BitmapChannel", "GH_MemoryBitmap", "GH_ObjectChangedEventArgs", "GH_ObjectEventType", "GH_ObjectType", "IGH_ObjectProxy", "GH_GraphProxy", "GH_ObjectSpecies", "GH_ParamWireDisplay", "GH_ParamData", "GH_ParamAccess", "GH_ParamKind", "GH_PrincipalState", "GH_DataMapping", "IGH_Param", "IGH_ParamWithPostProcess", "GH_ParameterContext", "IGH_ContextualParameter", "IGH_ContextualParameter2", "GH_Param", "GH_NoiseTable", "GH_PersistentGeometryParam", "GH_GetterResult", "GH_PersistentParam", "GH_PingDocumentEventArgs", "GH_PreviewBoundary", "GH_PreviewExpiredEventArgs", "IGH_PreviewArgs", "GH_PreviewArgs", "GH_PreviewWireArgs", "GH_PreviewMeshArgs", "IGH_PreviewObject", "IGH_PreviewData", "IGH_PreviewMeshData", "GH_RenderArgs", "IGH_RenderAwareData", "GH_PreviewUtil", "GH_Process", "GH_ProcessForm", "GH_ProfilerMode", "GH_DocumentRank", "IGH_ProxyParameter", "GH_RelevantObjectData", "GH_RuntimeMessage", "GH_ScriptComponentUtilities", "IGH_ScriptInstance", "GH_ScriptInstance", "GH_SettingsType", "GH_SettingsServer", "GH_SolutionExpiredEventArgs", "GH_State", "GH_StateServer", "IGH_StateAwareObject", "IGH_DebugDescription", "GH_DebugDescriptionWriter", "GH_StateTagLayoutDirection", "GH_StateTagList", "IGH_StateTag", "GH_StateTag", "GH_MatchLevel", "GH_MatchWeight", "GH_StringMatcher", "IGH_DataAccess", "IGH_TaskCapableComponent", "GH_TaskCapableComponent", "GH_TypeLib", "IGH_UpgradeObject", "GH_UpgradeUtil", "GH_UserObject", "IGH_ValueProxy", "GH_ValueProxy", "GH_VarParamSide", "GH_VarParamEventArgs", "IGH_VarParamComponent", "GH_ParameterSide", "IGH_VariableParameterComponent", "GH_WireTopology", "GH_WireTopologyDiagram", "IGH_ZuiAction", "GH_ZuiAction", "IGH_UserPromptAware", "IGH_DocumentObject", "IRcpAwareObject", "MatchingMode", "EnableAutoSaveChangedEventHandler", "SaveOnDocumentUnloadChangedEventHandler", "SaveOnObjectAddedChangedEventHandler", "SaveOnObjectRemovedChangedEventHandler", "SaveOnWireEventChangedEventHandler", "SaveOnObjectChangeChangedEventHandler", "SaveOnDataFlatteningChangedEventHandler", "AutoSaveFileFormatChangedEventHandler", "ParameterNickNameChangedEventHandler", "ParameterSourcesChangedEventHandler", "ParameterChangedEventHandler", "NullParamAttributes", "IGH_SyncObject", "GHAFileLoadedEventHandler", "SettingsChangedEventHandler", "EnabledChangedEventHandler", "ContextChangedEventHandler", "ModifiedChangedEventHandler", "ObjectsAddedEventHandler", "ObjectsDeletedEventHandler", "UndoStateChangedEventHandler", "FilePathChangedEventHandler", "GH_ActiveObjectFilter", "DefaultPreviewColourChangedEventHandler", "DefaultSelectedPreviewColourChangedEventHandler", "SolutionStartEventHandler", "SolutionEndEventHandler", "EnableSolutionsChangedEventHandler", "GH_ScheduleDelegate", "GH_UndoUtil", "ColourEventHandler", "DocumentAddedEventHandler", "DocumentRemovedEventHandler", "FileEvent", "FileChanged", "FileChangedSimple", "ScriptFamilyChangedEventHandler", "StandardFamilyChangedEventHandler", "ConsoleFamilyChangedEventHandler", "SolutionExpiredEventHandler", "DisplayExpiredEventHandler", "PreviewExpiredEventHandler", "ObjectChangedEventHandler", "AttributesChangedEventHandler", "PingDocumentEventHandler"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import GUI
from Grasshopper.GUI import Alignment
from Grasshopper.GUI import Base
from Grasshopper.GUI import Canvas
from Grasshopper.GUI import RemotePanel
from Grasshopper.GUI import Ribbon
from Grasshopper.Kernel import Data
from Grasshopper.Kernel import Expressions
from Grasshopper.Kernel import Graphs
from Grasshopper.Kernel import Special
from Grasshopper.Kernel import Types
from Grasshopper.Kernel import Undo
from Rhino import Commands
from Rhino import Display
from Rhino import DocObjects
from Rhino import Geometry
from Rhino import Render
from Rhino import Runtime
from System import Collections
from System import Drawing
from System import Globalization
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Drawing import Drawing2D
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import Rhino
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_PatternMatching(object):
    """    """
    @overload
    @staticmethod
    def Contains(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def EndsWith(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def Equals(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(mode: MatchingMode, value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def MatchRegex(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def MatchWildcards(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def StartsWith(value: str, pattern: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...

class GH_PersistentReferenceParam(GH_PersistentParam):
    """    GH_PersistentReferenceParam[T]
    """
    @overload
    def ClearData() -> None: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_SolutionPhase(enum.Enum):
    Blank = 0
    Collecting = 1
    Collected = 2
    Computing = 3
    Computed = 4
    Failed = 10

class GH_RuntimeMessageLevel(enum.Enum):
    Blank = 0
    Warning = 10
    Error = 20
    Remark = 255

class IGH_ActiveObject:
    """Base interface for all objects on the canvas that participate in solutions

    """
    @overload
    def AddRuntimeMessage(self, Type: GH_RuntimeMessageLevel, Message: str) -> None: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def ClearRuntimeMessages() -> None: ...
    @overload
    def CollectData() -> None: ...
    @overload
    def ComputeData() -> None: ...
    @overload
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> System.TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @overload
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Generic.IList: ...
    @overload
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @MutableNickName.setter
    def MutableNickName(self, value: System.Void): ...
    @Phase.setter
    def Phase(self, value: System.Void): ...

class GH_ActiveObject(GH_DocumentObject):
    """Basic implementation of IGH_ActiveObject interface. Derive from this class rather than implementing IGH_ActiveObject to make your life easier.

    """
    @overload
    def AddRuntimeMessage(self, level: GH_RuntimeMessageLevel, text: str) -> None: ...
    @overload
    def AppendAdditionalMenuItems(self, menu: Forms.ToolStripDropDown) -> None: ...
    @overload
    def AppendMenuItems(self, menu: Forms.ToolStripDropDown) -> bool: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def ClearRuntimeMessages() -> None: ...
    @overload
    def CollectData() -> None: ...
    @overload
    def ComputeData() -> None: ...
    @overload
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def IconCapableUI(self) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> System.TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Generic.IList: ...
    @overload
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @MutableNickName.setter
    def MutableNickName(self, value: System.Void): ...
    @Phase.setter
    def Phase(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_Alias(object):
    """Represents a single alias|target combo.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Alias): ...
    @overload
    def __init__(self, alias: str, target: System.Guid): ...
    @overload
    @staticmethod
    def AliasToString(aliases: Generic.IEnumerable) -> str: ...
    @overload
    def CompareTo(self, other: GH_Alias) -> int: ...
    @property
    def Alias(self) -> str: ...
    @property
    def Target(self) -> System.Guid: ...
    @Alias.setter
    def Alias(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @overload
    @staticmethod
    def StringToAlias(text: str) -> System.System.Array[str]: ...

class GH_LibraryLicense(enum.Enum):
    unset = 0
    expired = 1
    alpha = 2
    beta = 3
    free = 4
    opensource = 5
    trial = 6
    commercial = 7
    educational = 8
    developer = 9
    reseller = 10
    other = 11

class GH_AssemblyInfo(object):
    """Implement this interface once (and once only) in a GHA project if you wish to add additional information about your library to Grasshopper. Note you must supply an empty constructor.

    """
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def AssemblyDescription(self) -> str: ...
    @property
    def AssemblyIcon(self) -> Drawing.Bitmap: ...
    @property
    def AssemblyLicense(self) -> GH_LibraryLicense: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...
    @property
    def AuthorContact(self) -> str: ...
    @property
    def AuthorName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsCoreLibrary(self) -> bool: ...
    @property
    def License(self) -> GH_LibraryLicense: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...

class GH_AssemblyInfoStub(GH_AssemblyInfo):
    """Provides basic properties for a GHA assembly that does not expose a type that derives from GH_AssemblyInfo. This type is created automatically when a GH_AssemblyInfo type is not found in an assembly.

    """
    def __init__(self, assembly: Reflection.Assembly): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...

class GH_LoadingInstruction(enum.Enum):
    Proceed = 0
    Abort = 1

class GH_AssemblyPriority(object):
    """Derive from this class if you wish to perform additional steps before any of your components are loaded. Any class in your project which inherits from GH_AssemblyPriority and which has an empty constructor will be instantiated prior to any GH_Component or IGH_DocumentObject classes.

    """
    @overload
    def PriorityLoad() -> GH_LoadingInstruction: ...

class GH_PickBox(enum.Enum):
    Window = 0
    Crossing = 1

class IGH_Attributes:
    """Base interface for all Attributes. Attributes are the visual portion of GH_DocumentObjects. They handle display, mouse events, layout, context menus etc. etc. You should consider inheriting from GH_Attributes or some other abstract class instead of implementing this interface from scratch.

    """
    @overload
    def AppendToAttributeTree(self, attributes: Generic.List) -> None: ...
    @overload
    def ExpireLayout() -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> Drawing.PointF: ...
    @property
    def InstanceGuid(self) -> System.Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> Drawing.PointF: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> Drawing.PointF: ...
    @property
    def Selected(self) -> bool: ...
    @overload
    def InvalidateCanvas(self, canvas: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: Drawing.PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: Drawing.PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: Drawing.RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def NewInstanceGuid() -> None: ...
    @overload
    def NewInstanceGuid(self, newID: System.Guid) -> None: ...
    @overload
    def PerformLayout() -> None: ...
    @overload
    def RenderToCanvas(self, canvas: Canvas.GH_Canvas, channel: Canvas.GH_CanvasChannel) -> None: ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Pivot.setter
    def Pivot(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...

class GH_Attributes(object):
    """Derive from this class rather than implementing IGH_Attributes from scratch.

    GH_Attributes[T]
    """
    @overload
    def AppendToAttributeTree(self, attributes: Generic.List) -> None: ...
    @overload
    def ExpireLayout() -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> Drawing.PointF: ...
    @property
    def InstanceGuid(self) -> System.Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> Drawing.PointF: ...
    @property
    def Owner(self) -> T: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> Drawing.PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def InvalidateCanvas(self, canvas: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: Drawing.PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: Drawing.PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: Drawing.RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def IsTooltipRegion(self, point: Drawing.PointF) -> bool: ...
    @overload
    def NewInstanceGuid() -> None: ...
    @overload
    def NewInstanceGuid(self, newId: System.Guid) -> None: ...
    @overload
    def PerformLayout() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RenderToCanvas(self, canvas: Canvas.GH_Canvas, channel: Canvas.GH_CanvasChannel) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: Canvas.GH_Canvas, e: Forms.KeyEventArgs) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: Canvas.GH_Canvas, e: Forms.KeyEventArgs) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: Canvas.GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> Canvas.GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Pivot.setter
    def Pivot(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @overload
    def SetupTooltip(self, point: Drawing.PointF, e: GUI.GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    @staticmethod
    def SolvePathBoxPick(path: Drawing2D.GraphicsPath, box: Drawing.RectangleF, fuzz: System.Single, mode: GH_PickBox) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_AttributesChangedEventArgs(System.EventArgs):
    """Event arguments passed during AttributesChanged events.

    """
    def __init__(self): ...

class IGH_Author:
    """Provides of collection of basic author details.

    """
    @property
    def Address(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def Website(self) -> str: ...

class GH_Author(object):
    """Maintains author information such as name, company, copyright, address etc.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_Author): ...
    @overload
    def Clear() -> None: ...
    @property
    def Address(self) -> str: ...
    @property
    def AddressReadonly(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def CompanyReadonly(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def CopyrightReadonly(self) -> str: ...
    @property
    def EMail(self) -> str: ...
    @property
    def EMailReadonly(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameReadonly(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PhoneReadonly(self) -> str: ...
    @property
    def Website(self) -> str: ...
    @property
    def WebsiteReadonly(self) -> str: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @Company.setter
    def Company(self, value: System.Void): ...
    @Copyright.setter
    def Copyright(self, value: System.Void): ...
    @EMail.setter
    def EMail(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Phone.setter
    def Phone(self, value: System.Void): ...
    @Website.setter
    def Website(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class IGH_ParamNameConstructor:
    """    """
    @overload
    def Current() -> str: ...
    @overload
    def Next() -> str: ...
    @overload
    def Reset() -> None: ...

class GH_StringPattern(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, char_pool: str): ...
    @overload
    def __init__(self, char_pool: str, depth: int): ...
    @overload
    def Current() -> str: ...
    @property
    def FormatMask(self) -> str: ...
    @property
    def StackDepth(self) -> int: ...
    @overload
    def Next() -> str: ...
    @overload
    def Reset() -> None: ...
    @FormatMask.setter
    def FormatMask(self, value: System.Void): ...
    @StackDepth.setter
    def StackDepth(self, value: System.Void): ...
    @overload
    def SetCharPool(self, char_pool: str) -> None: ...
    @overload
    def SetCharPool(self, char_pool: Generic.IEnumerable) -> None: ...

class GH_IncrementalParamNameConstructor(object):
    """    """
    def __init__(self, format_mask: str, start_index: int): ...
    @overload
    def Current() -> str: ...
    @property
    def FormatMask(self) -> str: ...
    @overload
    def Next() -> str: ...
    @overload
    def Reset() -> None: ...
    @FormatMask.setter
    def FormatMask(self, value: System.Void): ...

class GH_AutoSaveTrigger(enum.Enum):
    undefined = 0
    doc_unload = 1
    object_added = 2
    object_removed = 3
    wire_event = 4
    data_matching_event = 5
    data_modification_event = 6
    object_generic = 7

class GH_AutoSaveSettings(object):
    """Provides access to all AutoSave event flags.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AutosaveFilter(trigger: GH_AutoSaveTrigger) -> bool: ...
    @property
    def EnableAutoSave(self) -> bool: ...
    @property
    def SaveOnDataFlattening(self) -> bool: ...
    @property
    def SaveOnDocumentUnload(self) -> bool: ...
    @property
    def SaveOnObjectAdded(self) -> bool: ...
    @property
    def SaveOnObjectChange(self) -> bool: ...
    @property
    def SaveOnObjectRemoved(self) -> bool: ...
    @property
    def SaveOnWireEvent(self) -> bool: ...
    @EnableAutoSave.setter
    def EnableAutoSave(self, value: System.Void): ...
    @SaveOnDataFlattening.setter
    def SaveOnDataFlattening(self, value: System.Void): ...
    @SaveOnDocumentUnload.setter
    def SaveOnDocumentUnload(self, value: System.Void): ...
    @SaveOnObjectAdded.setter
    def SaveOnObjectAdded(self, value: System.Void): ...
    @SaveOnObjectChange.setter
    def SaveOnObjectChange(self, value: System.Void): ...
    @SaveOnObjectRemoved.setter
    def SaveOnObjectRemoved(self, value: System.Void): ...
    @SaveOnWireEvent.setter
    def SaveOnWireEvent(self, value: System.Void): ...
    @property
    def EnableAutoSaveChanged(self): ...
    @property
    def SaveOnDocumentUnloadChanged(self): ...
    @property
    def SaveOnObjectAddedChanged(self): ...
    @property
    def SaveOnObjectRemovedChanged(self): ...
    @property
    def SaveOnWireEventChanged(self): ...
    @property
    def SaveOnObjectChangeChanged(self): ...
    @property
    def SaveOnDataFlatteningChanged(self): ...
    @property
    def AutoSaveFileFormatChanged(self): ...

class IGH_BakeAwareData:
    """Implement this interface in your IGH_Goo data type if you want to be included in baking operations.

    """
    @overload
    def BakeGeometry(self, doc: Rhino.RhinoDoc, att: DocObjects.ObjectAttributes) -> (bool, System.Guid): ...

class IGH_BakeAwareObject:
    """Implement this interface on your IGH_ActiveObject if you want to participate in the Bake GUI.

    """
    @overload
    def BakeGeometry(self, doc: Rhino.RhinoDoc, obj_ids: Generic.List) -> None: ...
    @overload
    def BakeGeometry(self, doc: Rhino.RhinoDoc, att: DocObjects.ObjectAttributes, obj_ids: Generic.List) -> None: ...
    @property
    def IsBakeCapable(self) -> bool: ...

class GH_BakeUtility(object):
    """A utility class for baking. We heavily recommend you use this for any baking, as it handles invalid objects correctly.

    """
    def __init__(self, document: GH_Document): ...
    @overload
    def BakeObject(self, obj: object, att: DocObjects.ObjectAttributes, doc: Rhino.RhinoDoc) -> bool: ...
    @overload
    def BakeObjects(self, objects: Collections.IEnumerable, att: DocObjects.ObjectAttributes, doc: Rhino.RhinoDoc) -> int: ...
    @property
    def BakedCount(self) -> int: ...
    @property
    def BakedIds(self) -> System.System.Array[System.Guid]: ...
    @property
    def InvalidCount(self) -> int: ...

class GH_CaseInsensitiveStringComparer(object):
    """Implements the IComparer(Of String) interface for non-case sensitive string comparisons.

    """
    def __init__(self): ...
    @overload
    def Compare(self, x: str, y: str) -> int: ...

class GH_DataComparison(enum.Enum):
    ShortestList = 0
    LongestList = 1
    CrossReference = 2

class IGH_Component:
    """Base interface for all GH_Component types. Do not implement this interface from scratch, inherit from GH_Component instead.

    """
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def IsValidMasterParameterIndex(self) -> bool: ...
    @property
    def MasterParameterIndex(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def RunCount(self) -> int: ...
    @DataComparison.setter
    def DataComparison(self, value: System.Void): ...
    @MasterParameterIndex.setter
    def MasterParameterIndex(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...

class IGH_ContextualComponent:
    """Base interface for contextual components. This makes accessing non-strongly-typed functionality easier.

    """
    @property
    def Archive(self) -> Serialization.GH_Archive: ...

class GH_Component(GH_ActiveObject):
    """Inherit from this class if you wish to create a custom component. Note that you
must
provide a public, empty constructor which calls the base class constructor.

    """
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AppendAdditionalMenuItems(self, menu: Forms.ToolStripDropDown) -> None: ...
    @overload
    def BakeGeometry(self, doc: Rhino.RhinoDoc, obj_ids: Generic.List) -> None: ...
    @overload
    def BakeGeometry(self, doc: Rhino.RhinoDoc, att: DocObjects.ObjectAttributes, obj_ids: Generic.List) -> None: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def ClearRuntimeMessages() -> None: ...
    @overload
    def CollectData() -> None: ...
    @overload
    def ComputeData() -> None: ...
    @overload
    def CreateAttributes() -> None: ...
    @overload
    def DependsOn(self, potentialSource: IGH_ActiveObject) -> bool: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def IsBakeCapable(self) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @property
    def IsValidPrincipalParameterIndex(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def PrincipalParameterIndex(self) -> int: ...
    @property
    def ProcessorTime(self) -> System.TimeSpan: ...
    @property
    def RunCount(self) -> int: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @overload
    def IsolateObject() -> None: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RegisterRemoteIDs(self, table: GH_GuidTable) -> None: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Generic.IList: ...
    @DataComparison.setter
    def DataComparison(self, value: System.Void): ...
    @Hidden.setter
    def Hidden(self, value: System.Void): ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @PrincipalParameterIndex.setter
    def PrincipalParameterIndex(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_ParamServerEventArgs(System.EventArgs):
    """Arguments used in events for the GH_ComponentParamServer type.

    """
    @property
    def OriginalArguments(self) -> GH_ObjectChangedEventArgs: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def ParameterIndex(self) -> int: ...
    @property
    def ParameterSide(self) -> GH_ParameterSide: ...
    @property
    def Server(self) -> GH_ComponentParamServer: ...

class GH_ParamHashFields(enum.Enum):
    None_ = 0
    Input = 1
    Output = 2
    InputAndOutput = 3
    InstanceId = 4
    NickName = 8
    Access = 16
    TypeId = 32
    PersistentData = 64
    Expression = 128
    TypeHint = 256
    Sources = 65536
    Recipients = 131072
    SourcesAndRecipients = 196608
    SerialData = 16777216
    All = 16974335

class GH_ComponentParamServer(object):
    """Wraps all members and functions needed for GH_Component to manage its input and output parameters.

    """
    @overload
    def AccessCount(self, access: GH_ParamAccess) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clear(self, isolate: bool) -> None: ...
    @overload
    @staticmethod
    def CreateDuplicate(original: IGH_Param) -> IGH_Param: ...
    @overload
    def EmitSyncObject() -> IGH_SyncObject: ...
    @overload
    def Find(self, id_: System.Guid) -> IGH_Param: ...
    @property
    def Input(self) -> Generic.List: ...
    @property
    def InputWidth(self) -> System.Single: ...
    @property
    def OnlyTreeAndListParameters(self) -> bool: ...
    @property
    def OnlyTreeParameters(self) -> bool: ...
    @property
    def Output(self) -> Generic.List: ...
    @property
    def OutputWidth(self) -> System.Single: ...
    @property
    def Owner(self) -> IGH_Component: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetEnumerator1() -> Collections.IEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, fields: GH_ParamHashFields) -> System.Guid: ...
    @overload
    def IndexOfInputParam(self, name: str) -> int: ...
    @overload
    def IndexOfInputParam(self, id_: System.Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, id_: System.Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, name: str) -> int: ...
    @overload
    @staticmethod
    def InventUniqueNickname(allowedChars: str, existingNames: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def InventUniqueNickname(allowedChars: str, existingNames: Generic.IEnumerable) -> str: ...
    @overload
    def IsInputParam(self, param: IGH_Param) -> bool: ...
    @overload
    def IsOutputParam(self, param: IGH_Param) -> bool: ...
    @overload
    def IsParam(self, param: IGH_Param) -> bool: ...
    @overload
    def OnParametersChanged() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ReadAllParameterData(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    @overload
    def RepairParamAssociations() -> None: ...
    @overload
    def RepairProxyParams(self, document: GH_Document) -> bool: ...
    @overload
    def SortInput(self, keys: System.System.Array[float]) -> None: ...
    @overload
    def SortInput(self, keys: System.System.Array[int]) -> None: ...
    @overload
    def SortInput(self, keys: System.System.Array[System.Single]) -> None: ...
    @overload
    def SortOutput(self, keys: System.System.Array[int]) -> None: ...
    @overload
    def SortOutput(self, keys: System.System.Array[System.Single]) -> None: ...
    @overload
    def SortOutput(self, keys: System.System.Array[float]) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> None: ...
    @overload
    def Sync(self, sync_data: object) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> (int): ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    def WriteAllParameterData(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    @staticmethod
    def WriteParamHashData(writer: IO.BinaryWriter, param: IGH_Param, fields: GH_ParamHashFields) -> None: ...
    @property
    def ParameterNickNameChanged(self): ...
    @property
    def ParameterSourcesChanged(self): ...
    @property
    def ParameterChanged(self): ...

class GH_ComponentServer(object):
    """Maintains proxies for all components, parameters and other object types as defined in all grasshopper assemblies.

    """
    def __init__(self): ...
    @overload
    def AddAlias(self, alias: str, target: System.Guid) -> None: ...
    @overload
    def AddCategoryIcon(self, fullCategoryName: str, icon: Drawing.Bitmap) -> None: ...
    @overload
    def AddCategoryShortName(self, fullCategoryName: str, categoryAbbreviation: str) -> None: ...
    @overload
    def AddCategorySymbolName(self, fullCategoryName: str, symbol: System.Char) -> None: ...
    @overload
    def AddProxy(self, proxy: IGH_ObjectProxy) -> bool: ...
    @overload
    def AddProxyLibraryInfo(self, assemblyInfo: GH_AssemblyInfo) -> bool: ...
    @overload
    def AliasTargets(self, alias: str) -> Generic.List: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ClearStaleUserObjects() -> None: ...
    @overload
    @staticmethod
    def CompareProxies(A: IGH_ObjectProxy, B: IGH_ObjectProxy) -> int: ...
    @overload
    @staticmethod
    def CopyFileToAppropriateFolder(filepath: str, moveOriginalToBin: bool) -> str: ...
    @overload
    def CreateComponentPalette(self, style: GH_ComponentPaletteStyle) -> Drawing.Bitmap: ...
    @overload
    def DestroyLoadingUI() -> None: ...
    @overload
    def EmitGraph(self, id_: System.Guid) -> Graphs.IGH_Graph: ...
    @overload
    def EmitObject(self, id_: System.Guid) -> IGH_DocumentObject: ...
    @overload
    def EmitObjectIcon(self, id_: System.Guid) -> Drawing.Bitmap: ...
    @overload
    def EmitObjectProxy(self, id_: System.Guid) -> IGH_ObjectProxy: ...
    @overload
    @staticmethod
    def ExternalFiles(testGrasshopperCollisions: bool, testExternalCollisions: bool) -> Generic.List: ...
    @overload
    def FindAssembly(self, libraryId: System.Guid) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, objectId: System.Guid) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, object_: IGH_DocumentObject) -> GH_AssemblyInfo: ...
    @overload
    def FindObjectByName(self, name: str, ignoreWhiteSpace: bool, ignoreCapitalisation: bool) -> IGH_ObjectProxy: ...
    @overload
    def FindObjects(self, libraryID: System.Guid) -> Generic.List: ...
    @overload
    def FindObjects(self, terms: System.System.Array[str], maximumResults: int) -> (int, System.Array[IGH_ObjectProxy], System.System.Array[float]): ...
    @overload
    def FindUpgrader(self, target: System.Guid) -> IGH_UpgradeObject: ...
    @property
    def Aliases(self) -> Generic.List: ...
    @property
    def AllAddOns(self) -> Generic.List: ...
    @property
    def CompleteRibbonLayout(self) -> Ribbon.GH_Layout: ...
    @property
    def DiscardedProxies(self) -> int: ...
    @property
    def GHA_AppDataDirectory(self) -> str: ...
    @property
    def GHA_Directories(self) -> Generic.List: ...
    @property
    def GHUser_AppDataDirectory(self) -> str: ...
    @property
    def GraphProxies(self) -> Generic.IList: ...
    @property
    def Libraries(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def LoadingExceptions(self) -> Generic.List: ...
    @property
    def NoLoadExtension(self) -> str: ...
    @property
    def ObjectProxies(self) -> Generic.IList: ...
    @property
    def ObjectProxyNames(self) -> Forms.AutoCompleteStringCollection: ...
    @property
    def TypeHints(self) -> Generic.IList: ...
    @property
    def Upgraders(self) -> Generic.IList: ...
    @overload
    def GetAlias(self, target: System.Guid) -> str: ...
    @overload
    def GetCategoryIcon(self, fullName: str) -> Drawing.Bitmap: ...
    @overload
    def GetCategoryShortName(self, fullName: str) -> str: ...
    @overload
    def GetCategorySymbolName(self, fullName: str) -> str: ...
    @overload
    def IsGraphCached(self, id_: System.Guid) -> bool: ...
    @overload
    def IsObjectCached(self, id_: System.Guid) -> bool: ...
    @overload
    def IsUpgrader(self, objs: Generic.IEnumerable) -> bool: ...
    @overload
    def LoadAliases() -> None: ...
    @overload
    def LoadExternalFiles(self, loadOneByOne: bool) -> bool: ...
    @overload
    @staticmethod
    def NewUserObject(obj: IGH_DocumentObject) -> bool: ...
    @overload
    def RemoveCachedGraph(self, id_: System.Guid) -> bool: ...
    @overload
    def RemoveCachedObject(self, userObjectFilePath: str) -> bool: ...
    @overload
    def RemoveCachedObject(self, id_: System.Guid) -> bool: ...
    @overload
    def SaveAliases() -> None: ...
    @overload
    def SetAlias(self, alias: str, target: System.Guid) -> None: ...
    @overload
    @staticmethod
    def UpdateRibbonUI() -> None: ...
    @property
    def GHAFileLoaded(self): ...

class GH_ComponentPaletteStyle(enum.Enum):
    Alphabetical = 0
    TabPanel = 1
    Hue = 2

class GH_ConnectivityNode(object):
    """Represents a single node in a Grasshopper connectivity diagram. A single node represents a single IGH_Param instance.

    """
    def __init__(self, other: GH_ConnectivityNode): ...
    @property
    def NodeID(self) -> System.Guid: ...
    @property
    def NodeIn(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def NodeOut(self) -> ObjectModel.ReadOnlyCollection: ...

class GH_ConnectivityDiagram(object):
    """Represents a complete connectivity diagram (topology) of a GH_Document. A connectivity diagram is basically an undirected network of all the wires in a document.

    """
    @overload
    def __init__(self, doc: GH_Document): ...
    @overload
    def __init__(self, other: GH_ConnectivityDiagram): ...
    @overload
    def ContainsID(self, id_: System.Guid) -> bool: ...
    @property
    def Node(self) -> GH_ConnectivityNode: ...
    @property
    def NodeCount(self) -> int: ...
    @property
    def Nodes(self) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetAllInputs(self, id_: System.Guid) -> Generic.List: ...
    @overload
    def GetAllOutputs(self, id_: System.Guid) -> Generic.List: ...

class GH_ConnectivityDisparity(object):
    """Maintains two connectivity diagrams, one of which is a subset of the other.

    """
    def __init__(self, topset: GH_ConnectivityDiagram, subset: GH_ConnectivityDiagram): ...
    @overload
    def ExternalInputs(self, id_: System.Guid) -> Generic.List: ...
    @overload
    def ExternalOutputs(self, id_: System.Guid) -> Generic.List: ...
    @property
    def SubNodes(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def SubSet(self) -> GH_ConnectivityDiagram: ...
    @property
    def TopNodes(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def TopSet(self) -> GH_ConnectivityDiagram: ...
    @overload
    def InternalInputs(self, id_: System.Guid) -> Generic.List: ...
    @overload
    def InternalOutputs(self, id_: System.Guid) -> Generic.List: ...

class GH_Convert(object):
    """Provides static converters for different data types inside Grasshopper. This class both has specific and generic converters.

    """
    @property
    def PureDateTicks(self) -> System.Int64: ...
    @property
    def PureTimeTicks(self) -> System.Int64: ...
    @overload
    @staticmethod
    def BackSolveExpression(exp: str, variable: str, target: float, minimum: float, maximum: float, steps: int) -> (bool, float, float): ...
    @overload
    @staticmethod
    def ByteArrayToCommonObject(data: System.System.Array[System.Byte]) -> T: ...
    @overload
    @staticmethod
    def CombineDateAndTime(date: System.DateTime, time: System.DateTime) -> System.DateTime: ...
    @overload
    @staticmethod
    def CommonObjectToByteArray(data: Runtime.CommonObject) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def CreateDateAndTime(dateTime: System.DateTime) -> System.DateTime: ...
    @overload
    @staticmethod
    def CreatePureDate(date: System.DateTime) -> System.DateTime: ...
    @overload
    @staticmethod
    def CreatePureTime(date: System.DateTime) -> System.DateTime: ...
    @overload
    @staticmethod
    def CreatePureTime(hours: int, minutes: int, seconds: int) -> System.DateTime: ...
    @overload
    @staticmethod
    def FileToHash(path: str) -> System.Guid: ...
    @overload
    @staticmethod
    def FindRhinoObjectByNameAndType(name: str, type_: DocObjects.ObjectType) -> DocObjects.RhinoObject: ...
    @overload
    @staticmethod
    def GeometryToObjRef(in_: Types.IGH_GeometricGoo) -> DocObjects.ObjRef: ...
    @property
    def CultureTable(self) -> Generic.SortedDictionary: ...
    @overload
    @staticmethod
    def GetBrepFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Brep): ...
    @overload
    @staticmethod
    def GetClippingPlaneFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Plane): ...
    @overload
    @staticmethod
    def GetCurveFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Curve): ...
    @overload
    @staticmethod
    def GetExtrusionFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Extrusion): ...
    @overload
    @staticmethod
    def GetMeshFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Mesh): ...
    @overload
    @staticmethod
    def GetPlaneFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Plane): ...
    @overload
    @staticmethod
    def GetPointFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Point3d): ...
    @overload
    @staticmethod
    def GetSubDFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.SubD): ...
    @overload
    @staticmethod
    def GetSurfaceFromDocument(doc: Rhino.RhinoDoc, id_: System.Guid) -> (bool, Geometry.Surface): ...
    @overload
    @staticmethod
    def GetTimeKind(time: System.DateTime) -> GH_TimeKind: ...
    @overload
    @staticmethod
    def GetTimeKind(A: System.DateTime, B: System.DateTime) -> GH_TimeKind: ...
    @overload
    @staticmethod
    def IsPureDate(potentialDate: System.DateTime) -> bool: ...
    @overload
    @staticmethod
    def IsPureTime(potentialTime: System.DateTime) -> bool: ...
    @overload
    @staticmethod
    def ObjRefToGeometry(in_: DocObjects.ObjRef) -> Types.IGH_GeometricGoo: ...
    @overload
    @staticmethod
    def ParseExpression(exp: str, recursive: bool) -> Expressions.GH_Variant: ...
    @overload
    @staticmethod
    def StringToDate(text: str) -> (bool, System.DateTime): ...
    @overload
    @staticmethod
    def StringToGuid(text: str) -> System.Guid: ...
    @overload
    @staticmethod
    def StringToTime(text: str) -> (bool, System.DateTime): ...
    @overload
    @staticmethod
    def To_GH_ClassPrefixTypeName(old_name: str) -> str: ...
    @overload
    @staticmethod
    def ToAnnotationBase_Primary(data: object) -> (bool, Geometry.AnnotationBase): ...
    @overload
    @staticmethod
    def ToAnnotationBase(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.AnnotationBase): ...
    @overload
    @staticmethod
    def ToAnnotationBase_Secondary(data: object) -> (bool, Geometry.AnnotationBase): ...
    @overload
    @staticmethod
    def ToArc_Primary(data: object) -> (bool, Geometry.Arc): ...
    @overload
    @staticmethod
    def ToArc(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Arc): ...
    @overload
    @staticmethod
    def ToArc_Secondary(data: object) -> (bool, Geometry.Arc): ...
    @overload
    @staticmethod
    def ToBoolean_Primary(data: object) -> (bool, bool): ...
    @overload
    @staticmethod
    def ToBoolean(data: object, conversion_level: GH_Conversion) -> (bool, bool): ...
    @overload
    @staticmethod
    def ToBoolean_Secondary(data: object) -> (bool, bool): ...
    @overload
    @staticmethod
    def ToBoundingBox_Primary(data: object) -> (bool, Geometry.BoundingBox): ...
    @overload
    @staticmethod
    def ToBox_Primary(data: object) -> (bool, Geometry.Box): ...
    @overload
    @staticmethod
    def ToBrep_Primary(data: object) -> (bool, Geometry.Brep): ...
    @overload
    @staticmethod
    def ToBrep(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Brep): ...
    @overload
    @staticmethod
    def ToBrep_Secondary(data: object) -> (bool, Geometry.Brep): ...
    @overload
    @staticmethod
    def ToCircle_Primary(data: object) -> (bool, Geometry.Circle): ...
    @overload
    @staticmethod
    def ToCircle(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Circle): ...
    @overload
    @staticmethod
    def ToCircle_Secondary(data: object) -> (bool, Geometry.Circle): ...
    @overload
    @staticmethod
    def ToColor_Primary(data: object) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ToColor(data: object, conversion_level: GH_Conversion) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ToColor_Secondary(data: object) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ToComplex_Primary(data: object) -> (bool, Types.Complex): ...
    @overload
    @staticmethod
    def ToComplex(data: object, conversion_level: GH_Conversion) -> (bool, Types.Complex): ...
    @overload
    @staticmethod
    def ToComplex_Secondary(data: object) -> (bool, Types.Complex): ...
    @overload
    @staticmethod
    def ToCoordinates(data: object) -> (bool, float, float, float, float): ...
    @overload
    @staticmethod
    def ToCulture_Primary(data: object) -> (bool, Globalization.CultureInfo): ...
    @overload
    @staticmethod
    def ToCulture(data: object, conversion_level: GH_Conversion) -> (bool, Globalization.CultureInfo): ...
    @overload
    @staticmethod
    def ToCulture_Secondary(data: object) -> (bool, Globalization.CultureInfo): ...
    @overload
    @staticmethod
    def ToCurve_Primary(data: object) -> (bool, Geometry.Curve): ...
    @overload
    @staticmethod
    def ToCurve(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Curve): ...
    @overload
    @staticmethod
    def ToCurve_Secondary(data: object) -> (bool, Geometry.Curve): ...
    @overload
    @staticmethod
    def ToDate_Primary(data: object) -> (bool, System.DateTime): ...
    @overload
    @staticmethod
    def ToDate(data: object, conversion_level: GH_Conversion) -> (bool, System.DateTime): ...
    @overload
    @staticmethod
    def ToDate_Secondary(data: object) -> (bool, System.DateTime): ...
    @overload
    @staticmethod
    def ToDimension_Primary(data: object) -> (bool, Geometry.Dimension): ...
    @overload
    @staticmethod
    def ToDimension(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Dimension): ...
    @overload
    @staticmethod
    def ToDimension_Secondary(data: object) -> (bool, Geometry.Dimension): ...
    @overload
    @staticmethod
    def ToDouble_Primary(data: object) -> (bool, float): ...
    @overload
    @staticmethod
    def ToDouble(data: object, conversion_level: GH_Conversion) -> (bool, float): ...
    @overload
    @staticmethod
    def ToDouble_Secondary(data: object) -> (bool, float): ...
    @overload
    @staticmethod
    def ToExtrusion_Primary(data: object) -> (bool, Geometry.Extrusion): ...
    @overload
    @staticmethod
    def ToExtrusion(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Extrusion): ...
    @overload
    @staticmethod
    def ToExtrusion_Secondary(data: object) -> (bool, Geometry.Extrusion): ...
    @overload
    @staticmethod
    def ToGeometricGoo(data: object) -> Types.IGH_GeometricGoo: ...
    @overload
    @staticmethod
    def ToGeometryBase(data: object) -> Geometry.GeometryBase: ...
    @overload
    @staticmethod
    def ToGHAngularDimension_Primary(data: object) -> (bool, Types.GH_AngularDimension): ...
    @overload
    @staticmethod
    def ToGHAngularDimension(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_AngularDimension): ...
    @overload
    @staticmethod
    def ToGHAngularDimension_Secondary(data: object) -> (bool, Types.GH_AngularDimension): ...
    @overload
    @staticmethod
    def ToGHAnnotationBase(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_AnnotationBase): ...
    @overload
    @staticmethod
    def ToGHArc_Primary(data: object) -> (bool, Types.GH_Arc): ...
    @overload
    @staticmethod
    def ToGHArc(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Arc): ...
    @overload
    @staticmethod
    def ToGHArc_Secondary(data: object) -> (bool, Types.GH_Arc): ...
    @overload
    @staticmethod
    def ToGHBoolean_Primary(data: object) -> (bool, Types.GH_Boolean): ...
    @overload
    @staticmethod
    def ToGHBoolean(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Boolean): ...
    @overload
    @staticmethod
    def ToGHBoolean_Secondary(data: object) -> (bool, Types.GH_Boolean): ...
    @overload
    @staticmethod
    def ToGHBox_Primary(data: object) -> (bool, Types.GH_Box): ...
    @overload
    @staticmethod
    def ToGHBox(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Box): ...
    @overload
    @staticmethod
    def ToGHBox_Secondary(data: object) -> (bool, Types.GH_Box): ...
    @overload
    @staticmethod
    def ToGHBrep_Primary(data: object) -> (bool, Types.GH_Brep): ...
    @overload
    @staticmethod
    def ToGHBrep(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Brep): ...
    @overload
    @staticmethod
    def ToGHBrep_Secondary(data: object) -> (bool, Types.GH_Brep): ...
    @overload
    @staticmethod
    def ToGHCentermark_Primary(data: object) -> (bool, Types.GH_Centermark): ...
    @overload
    @staticmethod
    def ToGHCentermark(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Centermark): ...
    @overload
    @staticmethod
    def ToGHCentermark_Secondary(data: object) -> (bool, Types.GH_Centermark): ...
    @overload
    @staticmethod
    def ToGHCircle_Primary(data: object) -> (bool, Types.GH_Circle): ...
    @overload
    @staticmethod
    def ToGHCircle(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Circle): ...
    @overload
    @staticmethod
    def ToGHCircle_Secondary(data: object) -> (bool, Types.GH_Circle): ...
    @overload
    @staticmethod
    def ToGHColour_Primary(data: object) -> (bool, Types.GH_Colour): ...
    @overload
    @staticmethod
    def ToGHColour(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Colour): ...
    @overload
    @staticmethod
    def ToGHColour_Secondary(data: object) -> (bool, Types.GH_Colour): ...
    @overload
    @staticmethod
    def ToGHComplexNumber_Primary(data: object) -> (bool, Types.GH_ComplexNumber): ...
    @overload
    @staticmethod
    def ToGHComplexNumber(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_ComplexNumber): ...
    @overload
    @staticmethod
    def ToGHComplexNumber_Secondary(data: object) -> (bool, Types.GH_ComplexNumber): ...
    @overload
    @staticmethod
    def ToGHCurve_Primary(data: object) -> (bool, Types.GH_Curve): ...
    @overload
    @staticmethod
    def ToGHCurve(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Curve): ...
    @overload
    @staticmethod
    def ToGHCurve_Secondary(data: object) -> (bool, Types.GH_Curve): ...
    @overload
    @staticmethod
    def ToGHDimension(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Dimension): ...
    @overload
    @staticmethod
    def ToGHExtrusion_Primary(data: object) -> (bool, Types.GH_Extrusion): ...
    @overload
    @staticmethod
    def ToGHExtrusion(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Extrusion): ...
    @overload
    @staticmethod
    def ToGHExtrusion_Secondary(data: object) -> (bool, Types.GH_Extrusion): ...
    @overload
    @staticmethod
    def ToGHGuid_Primary(data: object) -> (bool, Types.GH_Guid): ...
    @overload
    @staticmethod
    def ToGHGuid(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Guid): ...
    @overload
    @staticmethod
    def ToGHGuid_Secondary(data: object) -> (bool, Types.GH_Guid): ...
    @overload
    @staticmethod
    def ToGHHatch_Primary(data: object) -> (bool, Types.GH_Hatch): ...
    @overload
    @staticmethod
    def ToGHHatch(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Hatch): ...
    @overload
    @staticmethod
    def ToGHHatch_Secondary(data: object) -> (bool, Types.GH_Hatch): ...
    @overload
    @staticmethod
    def ToGHInstanceReference_Primary(data: object) -> (bool, Types.GH_InstanceReference): ...
    @overload
    @staticmethod
    def ToGHInstanceReference(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_InstanceReference): ...
    @overload
    @staticmethod
    def ToGHInstanceReference_Secondary(data: object) -> (bool, Types.GH_InstanceReference): ...
    @overload
    @staticmethod
    def ToGHInteger_Primary(data: object) -> (bool, Types.GH_Integer): ...
    @overload
    @staticmethod
    def ToGHInteger(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Integer): ...
    @overload
    @staticmethod
    def ToGHInteger_Secondary(data: object) -> (bool, Types.GH_Integer): ...
    @overload
    @staticmethod
    def ToGHInterval_Primary(data: object) -> (bool, Types.GH_Interval): ...
    @overload
    @staticmethod
    def ToGHInterval(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Interval): ...
    @overload
    @staticmethod
    def ToGHInterval_Secondary(data: object) -> (bool, Types.GH_Interval): ...
    @overload
    @staticmethod
    def ToGHInterval2D_Primary(data: object) -> (bool, Types.GH_Interval2D): ...
    @overload
    @staticmethod
    def ToGHInterval2D(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Interval2D): ...
    @overload
    @staticmethod
    def ToGHInterval2D_Secondary(data: object) -> (bool, Types.GH_Interval2D): ...
    @overload
    @staticmethod
    def ToGHLeader_Primary(data: object) -> (bool, Types.GH_Leader): ...
    @overload
    @staticmethod
    def ToGHLeader(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Leader): ...
    @overload
    @staticmethod
    def ToGHLeader_Secondary(data: object) -> (bool, Types.GH_Leader): ...
    @overload
    @staticmethod
    def ToGHLight_Primary(data: object) -> (bool, Types.GH_Light): ...
    @overload
    @staticmethod
    def ToGHLight(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Light): ...
    @overload
    @staticmethod
    def ToGHLight_Secondary(data: object) -> (bool, Types.GH_Light): ...
    @overload
    @staticmethod
    def ToGHLine_Primary(data: object) -> (bool, Types.GH_Line): ...
    @overload
    @staticmethod
    def ToGHLine(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Line): ...
    @overload
    @staticmethod
    def ToGHLine_Secondary(data: object) -> (bool, Types.GH_Line): ...
    @overload
    @staticmethod
    def ToGHLinearDimension_Primary(data: object) -> (bool, Types.GH_LinearDimension): ...
    @overload
    @staticmethod
    def ToGHLinearDimension(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_LinearDimension): ...
    @overload
    @staticmethod
    def ToGHLinearDimension_Secondary(data: object) -> (bool, Types.GH_LinearDimension): ...
    @overload
    @staticmethod
    def ToGHMatrix_Primary(data: object) -> (bool, Types.GH_Matrix): ...
    @overload
    @staticmethod
    def ToGHMatrix(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Matrix): ...
    @overload
    @staticmethod
    def ToGHMatrix_Secondary(data: object) -> (bool, Types.GH_Matrix): ...
    @overload
    @staticmethod
    def ToGHMesh_Primary(data: object) -> (bool, Types.GH_Mesh): ...
    @overload
    @staticmethod
    def ToGHMesh(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Mesh): ...
    @overload
    @staticmethod
    def ToGHMesh_Secondary(data: object) -> (bool, Types.GH_Mesh): ...
    @overload
    @staticmethod
    def ToGHMeshFace_Primary(data: object) -> (bool, Types.GH_MeshFace): ...
    @overload
    @staticmethod
    def ToGHMeshFace(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_MeshFace): ...
    @overload
    @staticmethod
    def ToGHMeshFace_Secondary(data: object) -> (bool, Types.GH_MeshFace): ...
    @overload
    @staticmethod
    def ToGHNumber_Primary(data: object) -> (bool, Types.GH_Number): ...
    @overload
    @staticmethod
    def ToGHNumber(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Number): ...
    @overload
    @staticmethod
    def ToGHNumber_Secondary(data: object) -> (bool, Types.GH_Number): ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension_Primary(data: object) -> (bool, Types.GH_OrdinateDimension): ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_OrdinateDimension): ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension_Secondary(data: object) -> (bool, Types.GH_OrdinateDimension): ...
    @overload
    @staticmethod
    def ToGHPlane_Primary(data: object) -> (bool, Types.GH_Plane): ...
    @overload
    @staticmethod
    def ToGHPlane(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Plane): ...
    @overload
    @staticmethod
    def ToGHPlane_Secondary(data: object) -> (bool, Types.GH_Plane): ...
    @overload
    @staticmethod
    def ToGHPoint_Primary(data: object) -> (bool, Types.GH_Point): ...
    @overload
    @staticmethod
    def ToGHPoint(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Point): ...
    @overload
    @staticmethod
    def ToGHPoint_Secondary(data: object) -> (bool, Types.GH_Point): ...
    @overload
    @staticmethod
    def ToGHPointCloud_Primary(data: object) -> (bool, Types.GH_PointCloud): ...
    @overload
    @staticmethod
    def ToGHPointCloud(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_PointCloud): ...
    @overload
    @staticmethod
    def ToGHPointCloud_Secondary(data: object) -> (bool, Types.GH_PointCloud): ...
    @overload
    @staticmethod
    def ToGHRadialDimension_Primary(data: object) -> (bool, Types.GH_RadialDimension): ...
    @overload
    @staticmethod
    def ToGHRadialDimension(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_RadialDimension): ...
    @overload
    @staticmethod
    def ToGHRadialDimension_Secondary(data: object) -> (bool, Types.GH_RadialDimension): ...
    @overload
    @staticmethod
    def ToGHRectangle_Primary(data: object) -> (bool, Types.GH_Rectangle): ...
    @overload
    @staticmethod
    def ToGHRectangle(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Rectangle): ...
    @overload
    @staticmethod
    def ToGHRectangle_Secondary(data: object) -> (bool, Types.GH_Rectangle): ...
    @overload
    @staticmethod
    def ToGHString_Primary(data: object) -> (bool, Types.GH_String): ...
    @overload
    @staticmethod
    def ToGHString(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_String): ...
    @overload
    @staticmethod
    def ToGHString_Secondary(data: object) -> (bool, Types.GH_String): ...
    @overload
    @staticmethod
    def ToGHSubD_Primary(data: object) -> (bool, Types.GH_SubD): ...
    @overload
    @staticmethod
    def ToGHSubD(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_SubD): ...
    @overload
    @staticmethod
    def ToGHSubD_Secondary(data: object) -> (bool, Types.GH_SubD): ...
    @overload
    @staticmethod
    def ToGHSurface_Primary(data: object) -> (bool, Types.GH_Surface): ...
    @overload
    @staticmethod
    def ToGHSurface(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Surface): ...
    @overload
    @staticmethod
    def ToGHSurface_Secondary(data: object) -> (bool, Types.GH_Surface): ...
    @overload
    @staticmethod
    def ToGHTextDot_Primary(data: object) -> (bool, Types.GH_TextDot): ...
    @overload
    @staticmethod
    def ToGHTextDot(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_TextDot): ...
    @overload
    @staticmethod
    def ToGHTextDot_Secondary(data: object) -> (bool, Types.GH_TextDot): ...
    @overload
    @staticmethod
    def ToGHTextEntity_Primary(data: object) -> (bool, Types.GH_TextEntity): ...
    @overload
    @staticmethod
    def ToGHTextEntity(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_TextEntity): ...
    @overload
    @staticmethod
    def ToGHTextEntity_Secondary(data: object) -> (bool, Types.GH_TextEntity): ...
    @overload
    @staticmethod
    def ToGHTime_Primary(data: object) -> (bool, Types.GH_Time): ...
    @overload
    @staticmethod
    def ToGHTime(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Time): ...
    @overload
    @staticmethod
    def ToGHTime_Secondary(data: object) -> (bool, Types.GH_Time): ...
    @overload
    @staticmethod
    def ToGHVector_Primary(data: object) -> (bool, Types.GH_Vector): ...
    @overload
    @staticmethod
    def ToGHVector(data: object, conversion_level: GH_Conversion) -> (bool, Types.GH_Vector): ...
    @overload
    @staticmethod
    def ToGHVector_Secondary(data: object) -> (bool, Types.GH_Vector): ...
    @overload
    @staticmethod
    def ToGoo(data: object) -> Types.IGH_Goo: ...
    @overload
    @staticmethod
    def ToGUID_Primary(data: object) -> (bool, System.Guid): ...
    @overload
    @staticmethod
    def ToGUID(data: object, conversion_level: GH_Conversion) -> (bool, System.Guid): ...
    @overload
    @staticmethod
    def ToGUID_Secondary(data: object) -> (bool, System.Guid): ...
    @overload
    @staticmethod
    def ToHatch_Primary(data: object) -> (bool, Geometry.Hatch): ...
    @overload
    @staticmethod
    def ToHatch(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Hatch): ...
    @overload
    @staticmethod
    def ToHatch_Secondary(data: object) -> (bool, Geometry.Hatch): ...
    @overload
    @staticmethod
    def ToInt32_Primary(data: object) -> (bool, int): ...
    @overload
    @staticmethod
    def ToInt32(data: object, conversion_level: GH_Conversion) -> (bool, int): ...
    @overload
    @staticmethod
    def ToInt32_Secondary(data: object) -> (bool, int): ...
    @overload
    @staticmethod
    def ToInterval_Primary(data: object) -> (bool, Geometry.Interval): ...
    @overload
    @staticmethod
    def ToInterval(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Interval): ...
    @overload
    @staticmethod
    def ToInterval_Secondary(data: object) -> (bool, Geometry.Interval): ...
    @overload
    @staticmethod
    def ToLeader_Primary(data: object) -> (bool, Geometry.Leader): ...
    @overload
    @staticmethod
    def ToLeader(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Leader): ...
    @overload
    @staticmethod
    def ToLeader_Secondary(data: object) -> (bool, Geometry.Leader): ...
    @overload
    @staticmethod
    def ToLight_Secondary(data: object) -> (bool, Geometry.Light): ...
    @overload
    @staticmethod
    def ToLine_Primary(data: object) -> (bool, Geometry.Line): ...
    @overload
    @staticmethod
    def ToLine(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Line): ...
    @overload
    @staticmethod
    def ToLine_Secondary(data: object) -> (bool, Geometry.Line): ...
    @overload
    @staticmethod
    def ToMatrix_Primary(data: object) -> (bool, Geometry.Matrix): ...
    @overload
    @staticmethod
    def ToMatrix(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Matrix): ...
    @overload
    @staticmethod
    def ToMatrix_Secondary(data: object) -> (bool, Geometry.Matrix): ...
    @overload
    @staticmethod
    def ToMesh_Primary(data: object) -> (bool, Geometry.Mesh): ...
    @overload
    @staticmethod
    def ToMesh(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Mesh): ...
    @overload
    @staticmethod
    def ToMesh_Secondary(data: object) -> (bool, Geometry.Mesh): ...
    @overload
    @staticmethod
    def ToNextPowerOfTen(num: float) -> float: ...
    @overload
    @staticmethod
    def ToPlane_Primary(data: object) -> (bool, Geometry.Plane): ...
    @overload
    @staticmethod
    def ToPlane(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Plane): ...
    @overload
    @staticmethod
    def ToPlane_Secondary(data: object) -> (bool, Geometry.Plane): ...
    @overload
    @staticmethod
    def ToPlural(singular: str) -> str: ...
    @overload
    @staticmethod
    def ToPoint(in_: Drawing.PointF) -> Drawing.Point: ...
    @overload
    @staticmethod
    def ToPoint3d_Primary(data: object) -> (bool, Geometry.Point3d): ...
    @overload
    @staticmethod
    def ToPoint3d(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Point3d): ...
    @overload
    @staticmethod
    def ToPoint3d_Secondary(data: object) -> (bool, Geometry.Point3d): ...
    @overload
    @staticmethod
    def ToPointCloud_Primary(data: object) -> (bool, Geometry.PointCloud): ...
    @overload
    @staticmethod
    def ToPointCloud(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.PointCloud): ...
    @overload
    @staticmethod
    def ToPointCloud_Secondary(data: object) -> (bool, Geometry.PointCloud): ...
    @overload
    @staticmethod
    def ToPointF(in_: Geometry.Point3d) -> Drawing.PointF: ...
    @overload
    @staticmethod
    def ToPrevPowerOfTen(num: float) -> float: ...
    @overload
    @staticmethod
    def ToRectangle(in_: Drawing.RectangleF) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def ToRectangle3d_Primary(data: object) -> (bool, Geometry.Rectangle3d): ...
    @overload
    @staticmethod
    def ToRectangle3d(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Rectangle3d): ...
    @overload
    @staticmethod
    def ToRectangle3d_Secondary(data: object) -> (bool, Geometry.Rectangle3d): ...
    @overload
    @staticmethod
    def ToSafeRhinoCommonObject(data: object) -> object: ...
    @overload
    @staticmethod
    def ToSHA_Hash(data: System.System.Array[System.Byte]) -> System.Guid: ...
    @overload
    @staticmethod
    def ToSHA_Hash(data: IO.Stream) -> System.Guid: ...
    @overload
    @staticmethod
    def ToSize(in_: Drawing.SizeF) -> Drawing.Size: ...
    @overload
    @staticmethod
    def ToString_Primary(data: object) -> (bool, str): ...
    @overload
    @staticmethod
    def ToString(data: object, conversion_level: GH_Conversion) -> (bool, str): ...
    @overload
    @staticmethod
    def ToString_Secondary(data: object) -> (bool, str): ...
    @overload
    @staticmethod
    def ToSubD_Primary(data: object) -> (bool, Geometry.SubD): ...
    @overload
    @staticmethod
    def ToSubD(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.SubD): ...
    @overload
    @staticmethod
    def ToSubD_Secondary(data: object) -> (bool, Geometry.SubD): ...
    @overload
    @staticmethod
    def ToSurface_Primary(data: object) -> (bool, Geometry.Surface): ...
    @overload
    @staticmethod
    def ToSurface(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Surface): ...
    @overload
    @staticmethod
    def ToSurface_Secondary(data: object) -> (bool, Geometry.Surface): ...
    @overload
    @staticmethod
    def ToTextDot_Primary(data: object) -> (bool, Geometry.TextDot): ...
    @overload
    @staticmethod
    def ToTextDot(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.TextDot): ...
    @overload
    @staticmethod
    def ToTextDot_Secondary(data: object) -> (bool, Geometry.TextDot): ...
    @overload
    @staticmethod
    def ToTextEntity_Primary(data: object) -> (bool, Geometry.TextEntity): ...
    @overload
    @staticmethod
    def ToTextEntity(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.TextEntity): ...
    @overload
    @staticmethod
    def ToTextEntity_Secondary(data: object) -> (bool, Geometry.TextEntity): ...
    @overload
    @staticmethod
    def ToUVInterval_Primary(data: object) -> (bool, Types.UVInterval): ...
    @overload
    @staticmethod
    def ToUVInterval(data: object, conversion_level: GH_Conversion) -> (bool, Types.UVInterval): ...
    @overload
    @staticmethod
    def ToUVInterval_Secondary(data: object) -> (bool, Types.UVInterval): ...
    @overload
    @staticmethod
    def ToVariableName(compound: str) -> str: ...
    @overload
    @staticmethod
    def ToVariant(value: object) -> Expressions.GH_Variant: ...
    @overload
    @staticmethod
    def ToVector3d_Primary(data: object) -> (bool, Geometry.Vector3d): ...
    @overload
    @staticmethod
    def ToVector3d(data: object, conversion_level: GH_Conversion) -> (bool, Geometry.Vector3d): ...
    @overload
    @staticmethod
    def ToVector3d_Secondary(data: object) -> (bool, Geometry.Vector3d): ...

class GH_Conversion(enum.Enum):
    Primary = 0
    Secondary = 1
    Both = 2

class GH_TimeKind(enum.Enum):
    Unset = 0
    Mixed = 1
    PureTime = 2
    PureDate = 3
    DateAndTime = 4

class GH_DisplayExpiredEventArgs(System.EventArgs):
    """Arguments for display events.

    """
    def __init__(self, eForceRedraw: bool): ...
    @property
    def ForceRedraw(self) -> bool: ...

class GH_PreviewMode(enum.Enum):
    Disabled = 0
    Wireframe = 1
    Shaded = 2

class GH_PreviewFilter(enum.Enum):
    None_ = 0
    Selected = 1

class GH_PreviewMesh(enum.Enum):
    None_ = 0
    LowQuality = 1
    HighQuality = 2
    Document = 3
    Custom = 4

class GH_Document(object):
    """Represents a single Grasshopper document.

    """
    def __init__(self): ...
    @property
    def IgnoredUnknowns(self) -> Generic.HashSet: ...
    @property
    def ScheduleInactive(self) -> int: ...
    @property
    def ScheduleRecursive(self) -> int: ...
    @overload
    def ActiveObjects() -> Generic.List: ...
    @overload
    def AddObject(self, docObject: IGH_DocumentObject, update: bool, index: int) -> bool: ...
    @overload
    def AlignObjects(self, align: Alignment.GH_Align, distribute: Alignment.GH_Distribute) -> None: ...
    @overload
    def AlignObjects(self, align: Alignment.GH_Align, distribute: Alignment.GH_Distribute, objs: Generic.List) -> None: ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @overload
    def ArrangeObject(self, obj: IGH_DocumentObject, motion: GH_Arrange) -> bool: ...
    @overload
    def ArrangeObjects(self, objs: Generic.IEnumerable, motion: GH_Arrange) -> bool: ...
    @overload
    def AssociateWithRhinoDocument() -> None: ...
    @overload
    def AutoLayoutComponents(self, limitToSelection: bool) -> None: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger) -> bool: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger, id_: System.Guid) -> bool: ...
    @overload
    @staticmethod
    def AutoSaveFileName(filename: str) -> str: ...
    @overload
    def BoundingBox(self, limitToSelection: bool) -> Drawing.RectangleF: ...
    @overload
    def BringSelectionToTop() -> None: ...
    @overload
    def ClearIgnoreList() -> None: ...
    @overload
    def ClearReferenceTable() -> None: ...
    @overload
    def CloseAllSubsidiaries() -> int: ...
    @overload
    def ClusterInputHooks() -> Special.System.Array[Special.GH_ClusterInputHook]: ...
    @overload
    def ClusterInstanceCount(self, id_: System.Guid) -> int: ...
    @overload
    def ClusterOutputHooks() -> Special.System.Array[Special.GH_ClusterOutputHook]: ...
    @overload
    def CompareTo(self, other: GH_Document) -> int: ...
    @overload
    def ConstructDocumentTree() -> GH_DocumentTree: ...
    @overload
    def ContainsClusterHooks() -> bool: ...
    @overload
    def ConvertFullNamesToNickNames() -> None: ...
    @overload
    def ConvertNickNamesToFullNames() -> None: ...
    @overload
    def CreateAutomaticClusterHooks() -> None: ...
    @overload
    def CreateConnectivityDiagram() -> GH_ConnectivityDiagram: ...
    @overload
    def CreateExpressionParser() -> Expressions.GH_ExpressionParser: ...
    @overload
    def DefineConstant(self, name: str, value: Expressions.GH_Variant) -> None: ...
    @overload
    def DeselectAll() -> None: ...
    @overload
    def DestroyAttributeCache() -> None: ...
    @overload
    def DestroyAutoSaveFiles() -> None: ...
    @overload
    def DestroyObjectTable() -> None: ...
    @overload
    def DestroyPreviewCaches() -> None: ...
    @overload
    def DestroyPreviewMeshes() -> None: ...
    @overload
    def DestroyProxySources() -> None: ...
    @overload
    def DisabledObjects() -> Generic.List: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def DuplicateDocument(doc: GH_Document) -> GH_Document: ...
    @overload
    def EnabledObjects() -> Generic.List: ...
    @overload
    def ExpandSelection(self, Upstream: bool, Downstream: bool, GrowSelection: bool) -> None: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution() -> None: ...
    @overload
    @staticmethod
    def FilterActive(in_: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterDisabled(in_: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterEnabled(in_: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterInactive(in_: Generic.List) -> Generic.List: ...
    @overload
    def FilterObjects(self, selectedObjects: GH_Filter, enabledObjects: GH_Filter, activeObjects: GH_Filter) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterObjects(in_: Generic.List, bSelectedObjects: GH_Filter, bEnabledObjects: GH_Filter, bActiveObjects: GH_Filter) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterSelected(in_: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def FilterUnselected(in_: Generic.List) -> Generic.List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: Generic.List) -> Generic.List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject) -> Generic.List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: Generic.List, filter_: GH_ActiveObjectFilter) -> Generic.List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject, filter_: GH_ActiveObjectFilter) -> Generic.List: ...
    @overload
    def FindAttribute(self, id_: System.Guid) -> IGH_Attributes: ...
    @overload
    def FindAttribute(self, pt: Drawing.PointF, topLevelOnly: bool) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: Drawing.PointF, bLimitToOutside: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: Drawing.PointF, bLimitToOutside: bool, bIncludeInputs: bool, bIncludeOutputs: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindClusters(self, filepath: str) -> Generic.List: ...
    @overload
    def FindClusters(self, id_: System.Guid) -> Generic.List: ...
    @overload
    def FindComponent(self, id_: System.Guid) -> IGH_Component: ...
    @overload
    def FindComponent(self, pt: Drawing.Point) -> IGH_Component: ...
    @overload
    def FindFloatingParameter(self, pt: Drawing.Point) -> IGH_Param: ...
    @overload
    def FindInputParameter(self, pt: Drawing.Point) -> IGH_Param: ...
    @overload
    def FindObject(self, id_: System.Guid, topLevelOnly: bool) -> IGH_DocumentObject: ...
    @overload
    def FindObject(self, pt: Drawing.PointF, radius: System.Single) -> IGH_DocumentObject: ...
    @overload
    def FindObject(self, id_: System.Guid, topLevelOnly: bool) -> T: ...
    @overload
    def FindObjects(self, keys: Generic.List, maxCount: int) -> Generic.List: ...
    @overload
    def FindOutputParameter(self, pt: Drawing.Point) -> IGH_Param: ...
    @overload
    def FindParameter(self, id_: System.Guid) -> IGH_Param: ...
    @overload
    def FindWireAt(self, point: Drawing.PointF, radius: System.Single) -> (bool, IGH_Param, IGH_Param): ...
    @overload
    def ForcePreview(self, previewOn: bool) -> None: ...
    @property
    def AbortRequested(self) -> bool: ...
    @property
    def ActiveDoc(self) -> bool: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def Attributes(self) -> Generic.IList: ...
    @property
    def Author(self) -> IGH_Author: ...
    @property
    def ConstantServer(self) -> Generic.SortedDictionary: ...
    @property
    def ContainsCustomPreviewObjects(self) -> bool: ...
    @property
    def ContainsCustomRenderObjects(self) -> bool: ...
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def CustomRenderObjects(self) -> Generic.IEnumerable: ...
    @property
    def DefaultPreviewColour(self) -> Drawing.Color: ...
    @property
    def DefaultSelectedPreviewColour(self) -> Drawing.Color: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def DocumentID(self) -> System.Guid: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def EnableSolutions(self) -> bool: ...
    @property
    def EventServer(self) -> GH_DocumentEventServer: ...
    @property
    def FileNameProxy(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def IgnoredCount(self) -> int: ...
    @property
    def IsFilePathDefined(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def ModifiedSubsidiaries(self) -> int: ...
    @property
    def Nested(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> Generic.IList: ...
    @property
    def ObjectSpan(self) -> System.TimeSpan: ...
    @property
    def Owner(self) -> IGH_DocumentOwner: ...
    @property
    def PreviewBoundary(self) -> GH_PreviewBoundary: ...
    @property
    def PreviewBoundingBox(self) -> Geometry.BoundingBox: ...
    @property
    def PreviewColour(self) -> Drawing.Color: ...
    @property
    def PreviewColourSelected(self) -> Drawing.Color: ...
    @property
    def PreviewCustomMeshParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def PreviewFilter(self) -> GH_PreviewFilter: ...
    @property
    def PreviewMeshType(self) -> GH_PreviewMesh: ...
    @property
    def PreviewMode(self) -> GH_PreviewMode: ...
    @property
    def Profiler(self) -> GH_ProfilerMode: ...
    @property
    def Properties(self) -> GH_DocumentProperties: ...
    @property
    def RaiseEvents(self) -> bool: ...
    @property
    def RemotePanelLayout(self) -> RemotePanel.RcpLayout: ...
    @property
    def RhinoDocument(self) -> Rhino.RhinoDoc: ...
    @property
    def RuntimeID(self) -> System.UInt64: ...
    @property
    def ScheduleDelay(self) -> int: ...
    @property
    def SelectedCount(self) -> int: ...
    @property
    def SelectionTopology(self) -> GH_SelectionTopology: ...
    @property
    def SolutionDepth(self) -> int: ...
    @property
    def SolutionHistory(self) -> Generic.List: ...
    @property
    def SolutionSpan(self) -> System.TimeSpan: ...
    @property
    def SolutionState(self) -> GH_ProcessStep: ...
    @property
    def StateServer(self) -> GH_StateServer: ...
    @property
    def Thumbnail(self) -> Drawing.Bitmap: ...
    @property
    def UndoServer(self) -> Undo.GH_UndoServer: ...
    @property
    def UndoUtil(self) -> GH_UndoUtil: ...
    @property
    def ValueTable(self) -> GH_SettingsServer: ...
    @overload
    def GetAllInstanceIDs(self, topLevelOnly: bool) -> Generic.SortedList: ...
    @overload
    def InactiveObjects() -> Generic.List: ...
    @overload
    def InvertSelection() -> None: ...
    @overload
    @staticmethod
    def IsEscapeKeyDown() -> bool: ...
    @overload
    def IsRenderMeshPipelineViewport(self, pipeline: Display.DisplayPipeline) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool, removeProxies: bool) -> bool: ...
    @overload
    def Modified() -> None: ...
    @overload
    def MutateAllIds() -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool) -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool, mode: GH_SolutionMode) -> None: ...
    @overload
    @staticmethod
    def NonBlankFilter(iObj: IGH_ActiveObject) -> bool: ...
    @overload
    @staticmethod
    def NullFilter(iObj: IGH_ActiveObject) -> bool: ...
    @overload
    def OnContextChanged() -> None: ...
    @overload
    def OnEnabledChanged() -> None: ...
    @overload
    def OnFilePathChanged(self, old: str, new: str) -> None: ...
    @overload
    def OnModifiedChanged() -> None: ...
    @overload
    def OnObjectAdded(self, doc_object: IGH_DocumentObject) -> None: ...
    @overload
    def OnObjectDeleted(self, doc_object: IGH_DocumentObject) -> None: ...
    @overload
    def OnObjectsAdded(self, doc_objects: Generic.IEnumerable) -> None: ...
    @overload
    def OnObjectsDeleted(self, doc_objects: Generic.IEnumerable) -> None: ...
    @overload
    def OnSettingsChanged(self, kind: GH_DocumentSettings) -> None: ...
    @overload
    def OnUndoStateChanged(self, op: GH_UndoOperation, rec: Undo.GH_UndoRecord) -> None: ...
    @overload
    def PreviewCurrentMeshParameters() -> Geometry.MeshingParameters: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Redo() -> bool: ...
    @overload
    def RelevantObjectAtPoint(self, pt: Drawing.PointF) -> GH_RelevantObjectData: ...
    @overload
    def RelevantObjectAtPoint(self, pt: Drawing.PointF, searchFilter: GH_RelevantObjectFilter) -> GH_RelevantObjectData: ...
    @overload
    def RemoveObject(self, attribute: IGH_Attributes, update: bool) -> bool: ...
    @overload
    def RemoveObject(self, docObject: IGH_DocumentObject, update: bool) -> bool: ...
    @overload
    def RemoveObjects(self, objectList: Generic.IEnumerable, update: bool) -> int: ...
    @overload
    def RemoveSelection(self, update: bool) -> None: ...
    @overload
    def RepairProxySources() -> bool: ...
    @overload
    def ReplaceProxySources() -> None: ...
    @overload
    def RequestAbortSolution() -> None: ...
    @overload
    def RunningAsCommand() -> Commands.Command: ...
    @overload
    def ScheduleSolution(self, delay: int) -> None: ...
    @overload
    def ScheduleSolution(self, delay: int, callback: GH_ScheduleDelegate) -> None: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData) -> GH_SelectionState: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData, bAdd: bool, bRemove: bool) -> GH_SelectionState: ...
    @overload
    def SelectAll() -> None: ...
    @overload
    def SelectedObjects() -> Generic.List: ...
    @ActiveDoc.setter
    def ActiveDoc(self, value: System.Void): ...
    @Context.setter
    def Context(self, value: System.Void): ...
    @DefaultPreviewColour.setter
    def DefaultPreviewColour(self, value: System.Void): ...
    @DefaultSelectedPreviewColour.setter
    def DefaultSelectedPreviewColour(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @EnableSolutions.setter
    def EnableSolutions(self, value: System.Void): ...
    @FilePath.setter
    def FilePath(self, value: System.Void): ...
    @IsModified.setter
    def IsModified(self, value: System.Void): ...
    @Nested.setter
    def Nested(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @PreviewBoundary.setter
    def PreviewBoundary(self, value: System.Void): ...
    @PreviewColour.setter
    def PreviewColour(self, value: System.Void): ...
    @PreviewColourSelected.setter
    def PreviewColourSelected(self, value: System.Void): ...
    @PreviewCustomMeshParameters.setter
    def PreviewCustomMeshParameters(self, value: System.Void): ...
    @PreviewFilter.setter
    def PreviewFilter(self, value: System.Void): ...
    @PreviewMeshType.setter
    def PreviewMeshType(self, value: System.Void): ...
    @PreviewMode.setter
    def PreviewMode(self, value: System.Void): ...
    @Profiler.setter
    def Profiler(self, value: System.Void): ...
    @RaiseEvents.setter
    def RaiseEvents(self, value: System.Void): ...
    @Thumbnail.setter
    def Thumbnail(self, value: System.Void): ...
    @overload
    def SetEnabledFlags(self, bEnable: bool) -> None: ...
    @overload
    def SetEnabledFlags(self, objects: Generic.List, bEnable: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, bPreview: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, objects: Generic.List, bPreview: bool) -> None: ...
    @overload
    def SetStatusBarEventHelper(self, message: GH_RuntimeMessage) -> None: ...
    @overload
    def ShowPreviewSettings() -> None: ...
    @overload
    def SolutionProgress() -> (int, int, int): ...
    @overload
    def ToggleEnabledFlags() -> None: ...
    @overload
    def ToggleEnabledFlags(self, objects: Generic.List) -> None: ...
    @overload
    def TogglePreviewFlags() -> None: ...
    @overload
    def TogglePreviewFlags(self, objects: Generic.List) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TranslateObjects(self, trXForm: Drawing.Size, bLimitToSelection: bool) -> None: ...
    @overload
    def Undo() -> bool: ...
    @overload
    def UnselectedObjects() -> Generic.List: ...
    @overload
    def UpdateAllSubsidiaries() -> int: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter, objList: Generic.IList) -> bool: ...
    @property
    def SettingsChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ContextChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def ObjectsAdded(self): ...
    @property
    def ObjectsDeleted(self): ...
    @property
    def UndoStateChanged(self): ...
    @property
    def FilePathChanged(self): ...
    @property
    def DefaultPreviewColourChanged(self): ...
    @property
    def DefaultSelectedPreviewColourChanged(self): ...
    @property
    def SolutionStart(self): ...
    @property
    def SolutionEnd(self): ...
    @property
    def EnableSolutionsChanged(self): ...

class GH_DocumentAssociations(object):
    """    """
    def __init__(self): ...
    @overload
    def Associate(self, rhinoFile: str, grasshopperFile: str) -> None: ...
    @overload
    def GetGrasshopperAssociations(self, rhinoFile: str) -> Generic.List: ...
    @overload
    def GetRhinoAssociations(self, grasshopperFile: str) -> Generic.List: ...

class GH_DocumentContext(enum.Enum):
    Unknown = 0
    None_ = 1
    Open = 2
    Close = 3
    Loaded = 4
    Unloaded = 5
    Lock = 6
    Unlock = 7

class GH_DocSettingsEventArgs(System.EventArgs):
    """These arguments are passed along with SettingsChanged events on GH_Document.

    """
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Kind(self) -> GH_DocumentSettings: ...

class GH_DocEnabledEventArgs(System.EventArgs):
    """These arguments are passed along with SettingsChanged events on GH_Document.

    """
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Enabled(self) -> bool: ...

class GH_DocContextEventArgs(System.EventArgs):
    """These arguments are passed along with SettingsChanged events on GH_Document.

    """
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def Document(self) -> GH_Document: ...

class GH_DocModifiedEventArgs(System.EventArgs):
    """These arguments are passed along with ModifiedChanged events on GH_Document.

    """
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Modified(self) -> bool: ...

class GH_DocObjectEventArgs(System.EventArgs):
    """These arguments are passed along with ObjectsAdded and ObjectsRemoved events on GH_Document.

    """
    @property
    def Attributes(self) -> Generic.List: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> ObjectModel.ReadOnlyCollection: ...

class GH_DocUndoEventArgs(System.EventArgs):
    """These arguments are passed along with UndoStateChanged events on GH_Document.

    """
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Operation(self) -> GH_UndoOperation: ...
    @property
    def Record(self) -> Undo.GH_UndoRecord: ...

class GH_DocFilePathEventArgs(System.EventArgs):
    """These arguments are passed along with FilePathChanged events on GH_Document.

    """
    def __init__(self, document: GH_Document, oldPath: str, newPath: str): ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def NewFilePath(self) -> str: ...
    @property
    def OldFilePath(self) -> str: ...

class GH_SelectionTopology(enum.Enum):
    None_ = 0
    Convex = 1
    Concave = 2

class GH_ClipboardType(enum.Enum):
    System = 0
    Local = 1
    Global = 2

class GH_DocumentIO(object):
    """Provides basic IO operations for GH_Documents.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, internal_doc: GH_Document): ...
    @overload
    def ClearClipboard(self, clipboard: GH_ClipboardType) -> None: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, guids: Generic.IEnumerable) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, limitToSelection: bool) -> bool: ...
    @property
    def DisableOverwriteProtection(self) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def IsDocument(self) -> bool: ...
    @property
    def LocalClipboardContent(self) -> str: ...
    @overload
    @staticmethod
    def GetDocumentIcon(filePath: str, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    @staticmethod
    def GetDocumentThumbnail(filePath: str) -> Drawing.Bitmap: ...
    @overload
    def Open() -> bool: ...
    @overload
    def Open(self, filePath: str) -> bool: ...
    @overload
    def OpenDocumentDialog(self, path: str, title: str) -> str: ...
    @overload
    def Paste(self, clipboard: GH_ClipboardType) -> bool: ...
    @overload
    def Save() -> bool: ...
    @overload
    def SaveAs() -> bool: ...
    @overload
    def SaveAsCopyDocumentDialog(self, path: str) -> str: ...
    @overload
    def SaveAsDocumentDialog(self, path: str) -> str: ...
    @overload
    def SaveBackup() -> bool: ...
    @overload
    def SaveDocumentDialog(self, path: str, title: str) -> str: ...
    @overload
    def SaveQuiet(self, path: str) -> bool: ...
    @DisableOverwriteProtection.setter
    def DisableOverwriteProtection(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @LocalClipboardContent.setter
    def LocalClipboardContent(self, value: System.Void): ...
    @overload
    @staticmethod
    def ShowOverwriteDialog(filename: str) -> int: ...
    @overload
    @staticmethod
    def ShowOverwriteDialog(filename: str, lastSave: System.DateTime, fileOnDisk: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def SubsidiaryDocumentSavePrompt(document: GH_Document) -> Forms.DialogResult: ...
    @overload
    @staticmethod
    def SubsidiaryDocumentSavePrompt(documentName: str, modified: bool, modifiedSubsidiaries: int) -> Forms.DialogResult: ...

class GH_DocumentObject(GH_InstanceDescription):
    """Standard implementation of IGH_DocumentObject.

    """
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AppendMenuItems(self, menu: Forms.ToolStripDropDown) -> bool: ...
    @overload
    def CreateAttributes() -> None: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def ComponentGuid(self) -> System.Guid: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Icon_24x24(self) -> Drawing.Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Drawing.Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def Obsolete(self) -> bool: ...
    @overload
    def IsolateObject() -> None: ...
    @overload
    @staticmethod
    def Menu_AppendColourPicker(menu: Forms.ToolStripDropDown, colour: Drawing.Color, colourChanged: ColourEventHandler) -> GUI.GH_ColourPicker: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: Forms.ToolStripDropDown, control: Forms.Control) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: Forms.ToolStripDropDown, control: Forms.Control, keydown: GUI.KeyDownEventHandler) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: Forms.ToolStripDropDown, control: Forms.Control, keydown: GUI.KeyDownEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendDigitScrollerItem(menu: Forms.ToolStripDropDown, min_: System.Decimal, max_: System.Decimal, value: System.Decimal, decimals: int) -> Base.GH_DigitScrollerBase: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler, icon: Drawing.Image) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler, enabled: bool) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler, icon: Drawing.Image, tag: object) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler, enabled: bool, checked: bool) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: Forms.ToolStrip, text: str, click: System.EventHandler, icon: Drawing.Image, enabled: bool, checked: bool) -> Forms.ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendSeparator(menu: Forms.ToolStrip) -> Forms.ToolStripSeparator: ...
    @overload
    @staticmethod
    def Menu_AppendTextItem(menu: Forms.ToolStripDropDown, text: str, keydown: GUI.KeyDownEventHandler, textchanged: GUI.TextChangedEventHandler, lockOnFocus: bool) -> Forms.ToolStripTextBox: ...
    @overload
    @staticmethod
    def Menu_AppendTextItem(menu: Forms.ToolStripDropDown, text: str, keydown: GUI.KeyDownEventHandler, textchanged: GUI.TextChangedEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> Forms.ToolStripTextBox: ...
    @overload
    @staticmethod
    def Menu_MoveItem(item: Forms.ToolStripItem, precedingItems: System.System.Array[str]) -> bool: ...
    @overload
    @staticmethod
    def Menu_MoveItem(item: Forms.ToolStripItem, insertBelow: bool, targets: System.System.Array[str]) -> bool: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def OnAttributesChanged() -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument() -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, record: Undo.GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> System.Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: Undo.IGH_UndoAction) -> System.Guid: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, value: System.Void): ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, value: System.Void): ...
    @overload
    def SetIconOverride(self, customIcon: Drawing.Bitmap) -> None: ...
    @overload
    def TriggerAutoSave() -> None: ...
    @overload
    def TriggerAutoSave(self, id_: System.Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id_: System.Guid) -> None: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_DocumentProperties(object):
    """    """
    def __init__(self): ...
    @overload
    def DisplayProperties() -> None: ...
    @property
    def CopyRight(self) -> str: ...
    @property
    def Date(self) -> System.DateTime: ...
    @property
    def DateTag(self) -> System.DateTime: ...
    @property
    def Description(self) -> str: ...
    @property
    def IconImageData(self) -> str: ...
    @property
    def KeepOpen(self) -> bool: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def Revisions(self) -> Generic.List: ...
    @property
    def ViewList(self) -> Generic.List: ...
    @property
    def ViewTarget(self) -> Drawing.Point: ...
    @property
    def ZoomFactor(self) -> System.Single: ...
    @overload
    def IconBitmap(self, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @CopyRight.setter
    def CopyRight(self, value: System.Void): ...
    @DateTag.setter
    def DateTag(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @IconImageData.setter
    def IconImageData(self, value: System.Void): ...
    @KeepOpen.setter
    def KeepOpen(self, value: System.Void): ...
    @ProjectFileName.setter
    def ProjectFileName(self, value: System.Void): ...
    @ViewTarget.setter
    def ViewTarget(self, value: System.Void): ...
    @ZoomFactor.setter
    def ZoomFactor(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_Revision(object):
    """    """
    def __init__(self): ...
    @property
    def Date(self) -> System.DateTime: ...
    @property
    def DateTag(self) -> System.DateTime: ...
    @property
    def Description(self) -> str: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @DateTag.setter
    def DateTag(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_SearchHit(object):
    """    """
    def __init__(self, obj: IGH_DocumentObject, weight: int): ...
    @overload
    def CompareTo(self, other: GH_SearchHit) -> int: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def Weight(self) -> int: ...

class GH_RelevantObjectFilter(enum.Enum):
    None_ = 0
    Groups = 1
    InputGrips = 2
    OutputGrips = 4
    Grips = 6
    Attributes = 8
    Wires = 1024
    All = 2147483647

class GH_DocumentServer(object):
    """Manages and maintains a collection of GH_Documents.

    """
    def __init__(self): ...
    @overload
    def AddDocument(self, document: GH_Document) -> None: ...
    @overload
    def AddDocument(self, document: GH_Document) -> (bool): ...
    @overload
    def AddDocument(self, filepath: str, makeActive: bool) -> GH_Document: ...
    @overload
    def AddNewDocument() -> GH_Document: ...
    @overload
    def Contains(self, doc: GH_Document) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def DocumentCount(self) -> int: ...
    @property
    def DocumentNames(self) -> Generic.List: ...
    @property
    def ModifiedDocumentCount(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetEnumerator_Generic() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, doc: GH_Document) -> int: ...
    @overload
    def IndexOf(self, filepath: str) -> int: ...
    @overload
    def IndexOfAutoSave(self, autoSavePath: str) -> int: ...
    @overload
    def NextAvailableDocument() -> GH_Document: ...
    @overload
    def PromoteDocument(self, document: GH_Document) -> None: ...
    @overload
    def RemoveAllDocuments() -> None: ...
    @overload
    def RemoveDocument(self, document: GH_Document) -> None: ...
    @overload
    def SafeRemoveDocument(self, document: GH_Document) -> bool: ...
    @property
    def DocumentAdded(self): ...
    @property
    def DocumentRemoved(self): ...

class IGH_DocumentOwner:
    """Implement this interface if you want to be the owner assigned to a document in the Grasshopper documentserver.

    """
    @overload
    def DocumentClosed(self, document: GH_Document) -> None: ...
    @overload
    def DocumentModified(self, document: GH_Document) -> None: ...
    @overload
    def OwnerDocument() -> GH_Document: ...

class GH_SolutionEventArgs(System.EventArgs):
    """Event arguments used for Document Solution events.

    """
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Duration(self) -> System.TimeSpan: ...
    @property
    def EndTime(self) -> System.DateTime: ...
    @property
    def StartTime(self) -> System.DateTime: ...

class GH_SolutionMode(enum.Enum):
    Default = 0
    CommandLine = 1
    Silent = 2

class GH_SolutionSpan(System.ValueType):
    """Represents the time interval for a GH_Document solution.

    """
    def __init__(self, t0: System.DateTime, t1: System.DateTime): ...
    @property
    def EndTime(self) -> System.DateTime: ...
    @property
    def StartTime(self) -> System.DateTime: ...

class GH_ProcessStep(enum.Enum):
    PreProcess = 0
    Process = 1
    PostProcess = 2
    Aborted = 3

class GH_SelectionState(enum.Enum):
    Changed = 0
    Unchanged = 1

class GH_Arrange(enum.Enum):
    MoveToFront = 0
    MoveForwards = 1
    MoveToBack = 2
    MoveBackwards = 3

class GH_Filter(enum.Enum):
    DontCare = 0
    Include = 1
    Exclude = 2

class GH_DocumentSettings(enum.Enum):
    Preview = 0
    Properties = 1

class GH_UndoOperation(enum.Enum):
    ClearUndoStack = 0
    ClearRedoStack = 1
    RecordAdded = 2
    RecordRemoved = 3
    Undo = 4
    Redo = 5

class GH_DocumentTreeNode(object):
    """Represents a single node in a document tree.

    """
    def __init__(self, node: GH_Document): ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def SubNodes(self) -> Generic.List: ...

class GH_DocumentTree(object):
    """Represents a hierarchical tree of documents that are subsidiary to one another.

    """
    def __init__(self, root: GH_Document): ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @property
    def FlatCollection(self) -> Generic.IEnumerable: ...
    @property
    def Root(self) -> GH_DocumentTreeNode: ...
    @property
    def RootDocument(self) -> GH_Document: ...

class GH_GuidTable(object):
    """Maintains a quick-access collection of Guids and IGH_ActiveObject references.

    """
    def __init__(self): ...
    @overload
    def Add(self, id_: System.Guid, obj: IGH_ActiveObject) -> None: ...
    @overload
    def AllObjects() -> Generic.List: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, id_: System.Guid) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def Objects(self, id_: System.Guid) -> Generic.List: ...

class GH_DocumentEventServer(object):
    """RhinoCommon only event server.

    """
    def __init__(self, document: GH_Document): ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @overload
    def ClearGuidTable() -> None: ...
    @overload
    def CreateGuidTable() -> None: ...
    @overload
    def EnsureGuidTable() -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTableRefCount(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class IGH_EventConsumer:
    """Implement this interface if you want to inter-operate with a GH_EventServer.

    """
    @overload
    def IsRelevantEvent(self, obj: DocObjects.RhinoObject) -> bool: ...
    @overload
    def PartialExpiration(self, server: GH_CustomEventServer) -> None: ...
    @overload
    def TotalExpiration(self, server: GH_CustomEventServer) -> None: ...

class GH_CustomEventServer(object):
    """RhinoCommon only event server.

    """
    def __init__(self, consumer: IGH_EventConsumer): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTable(self) -> Generic.SortedDictionary: ...
    @property
    def GuidTableCount(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class GH_Exposure(enum.Enum):
    primary = 2
    secondary = 4
    tertiary = 8
    quarternary = 16
    quinary = 32
    senary = 64
    septenary = 128
    octonary = 256
    last = 256
    dropdown = 65536
    obscure = 65536
    hidden = -1

class GH_ExternalFileType(enum.Enum):
    Unknown = 0
    Assembly = 1
    UserObject = 2
    Cluster = 3

class GH_ExternalFile(object):
    """Represents information about external files to be loaded.

    """
    def __init__(self, path: str): ...
    @property
    def FileHash(self) -> System.Guid: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def FileSize(self) -> System.Int64: ...
    @property
    def FileType(self) -> GH_ExternalFileType: ...
    @overload
    def IsIdenticalTo(self, other: GH_ExternalFile) -> bool: ...

class GH_LineParserAction(enum.Enum):
    Include = 0
    Ignore = 1
    Abort = 2

class GH_LineParser(object):
    """Provides basic functionality for the custom ReadFile component script parsing.

    """
    @overload
    def ParseLine(self, line: str) -> (object, GH_LineParserAction): ...

class GH_FileSystemEventServer(object):
    """Provides a easy-to-use way to keep tabs on files.

    """
    @overload
    @staticmethod
    def AddWatcher(owner: object, path: str, callback: FileEvent) -> None: ...
    @property
    def AllPaths(self) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def RemoveWatcher(owner: object) -> None: ...
    @overload
    @staticmethod
    def RemoveWatcher(owner: object, path: str) -> None: ...

class GH_FileWatcherEvents(enum.Enum):
    None_ = 0
    Changed = 1
    Renamed = 2
    Created = 4
    Deleted = 8
    All = 15

class GH_FileWatcher(object):
    """Provides easy mechanisms to monitor changes to the local File System.

    """
    @overload
    @staticmethod
    def CreateDirectoryWatcher(folderPath: str, filter_: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateDirectoryWatcher(folderPath: str, filter_: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Active(self) -> bool: ...
    @property
    def Buffer(self) -> System.TimeSpan: ...
    @property
    def InvokeOnDefaultThread(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @Active.setter
    def Active(self, value: System.Void): ...
    @Buffer.setter
    def Buffer(self, value: System.Void): ...
    @InvokeOnDefaultThread.setter
    def InvokeOnDefaultThread(self, value: System.Void): ...
    @overload
    def SetCustomUIThread(self, target: Forms.Control) -> None: ...
    @overload
    def SetCustomUIThread(self, target: Forms.Form) -> None: ...

class GH_FontServer(object):
    """Maintains a collection of standard fonts and mays to measure them.

    """
    @overload
    @staticmethod
    def FontToString(font: Drawing.Font) -> str: ...
    @property
    def Console(self) -> Drawing.Font: ...
    @property
    def ConsoleAdjusted(self) -> Drawing.Font: ...
    @property
    def ConsoleSmall(self) -> Drawing.Font: ...
    @property
    def ConsoleSmallAdjusted(self) -> Drawing.Font: ...
    @property
    def FamilyConsole(self) -> Drawing.FontFamily: ...
    @property
    def FamilyScript(self) -> Drawing.FontFamily: ...
    @property
    def FamilyStandard(self) -> Drawing.FontFamily: ...
    @property
    def Large(self) -> Drawing.Font: ...
    @property
    def LargeAdjusted(self) -> Drawing.Font: ...
    @property
    def Script(self) -> Drawing.Font: ...
    @property
    def ScriptSmall(self) -> Drawing.Font: ...
    @property
    def Small(self) -> Drawing.Font: ...
    @property
    def Standard(self) -> Drawing.Font: ...
    @property
    def StandardAdjusted(self) -> Drawing.Font: ...
    @property
    def StandardBold(self) -> Drawing.Font: ...
    @property
    def StandardItalic(self) -> Drawing.Font: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Drawing.Font) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Drawing.Font, iLayout: Drawing.SizeF) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Drawing.Font, maxwidth: System.Single) -> Drawing.Size: ...
    @overload
    @staticmethod
    def NewFont(font: Drawing.Font, style: Drawing.FontStyle) -> Drawing.Font: ...
    @overload
    @staticmethod
    def NewFont(font: Drawing.Font, size: System.Single) -> Drawing.Font: ...
    @overload
    @staticmethod
    def NewFont(family: Drawing.FontFamily, size: System.Single) -> Drawing.Font: ...
    @overload
    @staticmethod
    def NewFont(font: Drawing.Font, size: System.Single, style: Drawing.FontStyle) -> Drawing.Font: ...
    @overload
    @staticmethod
    def NewFont(family: str, size: System.Single, style: Drawing.FontStyle) -> Drawing.Font: ...
    @overload
    @staticmethod
    def NewFont(family: Drawing.FontFamily, size: System.Single, style: Drawing.FontStyle) -> Drawing.Font: ...
    @FamilyConsole.setter
    def FamilyConsole(self, value: System.Void): ...
    @FamilyScript.setter
    def FamilyScript(self, value: System.Void): ...
    @FamilyStandard.setter
    def FamilyStandard(self, value: System.Void): ...
    @overload
    @staticmethod
    def StringToFont(text: str) -> Drawing.Font: ...
    @overload
    @staticmethod
    def StringWidth(text: str, font: Drawing.Font) -> int: ...
    @overload
    @staticmethod
    def StringWidth(text: Generic.IEnumerable, font: Drawing.Font) -> int: ...
    @property
    def ScriptFamilyChanged(self): ...
    @property
    def StandardFamilyChanged(self): ...
    @property
    def ConsoleFamilyChanged(self): ...

class GH_Format(object):
    """Provides standard Grasshopper formatting functions.

    """
    @overload
    @staticmethod
    def DefaultCulture() -> System.IFormatProvider: ...
    @overload
    @staticmethod
    def FormatAngularDimension(data: Types.GH_AngularDimension) -> str: ...
    @overload
    @staticmethod
    def FormatAnnotationValidity(val: Geometry.AnnotationBase, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatArc(data: Types.GH_Arc) -> str: ...
    @overload
    @staticmethod
    def FormatArc(data: Geometry.Arc) -> str: ...
    @overload
    @staticmethod
    def FormatArcValidity(val: Geometry.Arc, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBoolean(data: bool) -> str: ...
    @overload
    @staticmethod
    def FormatBoolean(data: Types.GH_Boolean) -> str: ...
    @overload
    @staticmethod
    def FormatBoundingBoxValidity(val: Geometry.BoundingBox, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBox(data: Geometry.Box) -> str: ...
    @overload
    @staticmethod
    def FormatBox(data: Types.GH_Box) -> str: ...
    @overload
    @staticmethod
    def FormatBoxValidity(val: Geometry.Box, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBrep(data: Geometry.Brep) -> str: ...
    @overload
    @staticmethod
    def FormatBrep(data: Types.GH_Brep) -> str: ...
    @overload
    @staticmethod
    def FormatBrepValidity(val: Geometry.Brep, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatCentermark(data: Types.GH_Centermark) -> str: ...
    @overload
    @staticmethod
    def FormatCircle(data: Types.GH_Circle) -> str: ...
    @overload
    @staticmethod
    def FormatCircle(data: Geometry.Circle) -> str: ...
    @overload
    @staticmethod
    def FormatCircleValidity(val: Geometry.Circle, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatColour(data: Drawing.Color) -> str: ...
    @overload
    @staticmethod
    def FormatColour(data: Types.GH_Colour) -> str: ...
    @overload
    @staticmethod
    def FormatComplexNumber(data: Types.GH_ComplexNumber) -> str: ...
    @overload
    @staticmethod
    def FormatComplexNumber(num: Types.Complex) -> str: ...
    @overload
    @staticmethod
    def FormatComplexValidity(val: Types.Complex, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatCurve(data: Types.GH_Curve) -> str: ...
    @overload
    @staticmethod
    def FormatCurve(data: Geometry.Curve, prefix: str, name: str) -> str: ...
    @overload
    @staticmethod
    def FormatCurveValidity(val: Geometry.Curve, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatDate(data: System.DateTime) -> str: ...
    @overload
    @staticmethod
    def FormatDate(data: Types.GH_Time) -> str: ...
    @overload
    @staticmethod
    def FormatDetailView(data: Types.GH_DetailView) -> str: ...
    @overload
    @staticmethod
    def FormatDetailViewValidity(val: Geometry.DetailView, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatDimension(data: Types.GH_Dimension) -> str: ...
    @overload
    @staticmethod
    def FormatDouble(data: float) -> str: ...
    @overload
    @staticmethod
    def FormatDouble(data: Types.GH_Number) -> str: ...
    @overload
    @staticmethod
    def FormatDoubleValidity(val: float, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusion(data: Geometry.Extrusion) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusion(data: Types.GH_Extrusion) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusionValidity(val: Geometry.Extrusion, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatFilePath(path: str, maxLength: int) -> str: ...
    @overload
    @staticmethod
    def FormatFilePath(path: str, maxWidth: int, font: Drawing.Font) -> str: ...
    @overload
    @staticmethod
    def FormatGeometry(data: Types.IGH_GeometricGoo) -> str: ...
    @overload
    @staticmethod
    def FormatHatch(data: Types.GH_Hatch) -> str: ...
    @overload
    @staticmethod
    def FormatHatchValidity(val: Geometry.Hatch, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatInstanceReference(data: Types.GH_InstanceReference) -> str: ...
    @overload
    @staticmethod
    def FormatInstanceReferenceValidity(val: Geometry.InstanceReferenceGeometry, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatInteger(data: int) -> str: ...
    @overload
    @staticmethod
    def FormatInteger(data: Types.GH_Integer) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: Types.GH_Interval2D) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: Types.GH_Interval) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: Geometry.Interval) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(t0: float, t1: float) -> str: ...
    @overload
    @staticmethod
    def FormatIntervalValidity(val: Geometry.Interval, identifier: str, testSingleton: bool, testDecreasing: bool) -> str: ...
    @overload
    @staticmethod
    def FormatKeys(keys: Forms.Keys) -> str: ...
    @overload
    @staticmethod
    def FormatLeader(data: Types.GH_Leader) -> str: ...
    @overload
    @staticmethod
    def FormatLightValidity(val: Geometry.Light, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatLine(data: Types.GH_Line) -> str: ...
    @overload
    @staticmethod
    def FormatLine(data: Geometry.Line) -> str: ...
    @overload
    @staticmethod
    def FormatLinearDimension(data: Types.GH_LinearDimension) -> str: ...
    @overload
    @staticmethod
    def FormatLineValidity(val: Geometry.Line, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatMatrix(data: Types.GH_Matrix) -> str: ...
    @overload
    @staticmethod
    def FormatMatrix(data: Geometry.Matrix) -> str: ...
    @overload
    @staticmethod
    def FormatMesh(data: Types.GH_Mesh) -> str: ...
    @overload
    @staticmethod
    def FormatMesh(data: Geometry.Mesh, sPrefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatMeshFace(data: Types.GH_MeshFace) -> str: ...
    @overload
    @staticmethod
    def FormatMeshFaceValidity(val: Geometry.MeshFace, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatMeshValidity(val: Geometry.Mesh, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatOrdinateDimension(data: Types.GH_OrdinateDimension) -> str: ...
    @overload
    @staticmethod
    def FormatPlane(data: Geometry.Plane) -> str: ...
    @overload
    @staticmethod
    def FormatPlane(data: Types.GH_Plane) -> str: ...
    @overload
    @staticmethod
    def FormatPlaneValidity(val: Geometry.Plane, identifier: str, testUnitAxes: bool) -> str: ...
    @overload
    @staticmethod
    def FormatPoint(data: Geometry.Point3d) -> str: ...
    @overload
    @staticmethod
    def FormatPoint(data: Types.GH_Point) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: Types.GH_PointCloud) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: Geometry.PointCloud) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: Geometry.PointCloud, prefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloudValidity(val: Geometry.PointCloud, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatPointValidity(val: Geometry.Point3d, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatRadialDimension(data: Types.GH_RadialDimension) -> str: ...
    @overload
    @staticmethod
    def FormatRectangleValidity(val: Geometry.Rectangle3d, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatSingle(data: System.Single) -> str: ...
    @overload
    @staticmethod
    def FormatSubD(data: Geometry.SubD) -> str: ...
    @overload
    @staticmethod
    def FormatSubD(data: Types.GH_SubD) -> str: ...
    @overload
    @staticmethod
    def FormatSubDValidity(val: Geometry.SubD, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatSurface(data: Types.GH_Surface) -> str: ...
    @overload
    @staticmethod
    def FormatSurface(data: Geometry.Brep) -> str: ...
    @overload
    @staticmethod
    def FormatSurfaceValidity(val: Geometry.Surface, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatTextDot(data: Types.GH_TextDot) -> str: ...
    @overload
    @staticmethod
    def FormatTextDotValidity(val: Geometry.TextDot, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: Types.GH_TextEntity) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: Geometry.TextEntity) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: Geometry.TextEntity, prefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatTransformValidity(val: Geometry.Transform, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatVector(data: Geometry.Vector3d) -> str: ...
    @overload
    @staticmethod
    def FormatVector(data: Types.GH_Vector) -> str: ...
    @overload
    @staticmethod
    def FormatVectorValidity(val: Geometry.Vector3d, identifier: str, testZero: bool, testUnit: bool) -> str: ...
    @overload
    @staticmethod
    def RhinoUnitName() -> str: ...
    @overload
    @staticmethod
    def RhinoUnitName(unitSystem: Rhino.UnitSystem) -> str: ...
    @overload
    @staticmethod
    def RhinoUnitSymbol() -> str: ...
    @overload
    @staticmethod
    def RhinoUnitSymbol(unitSystem: Rhino.UnitSystem) -> str: ...
    @overload
    @staticmethod
    def TreatAsCollection(obj: object) -> bool: ...

class GH_GHALoadingEventArgs(System.EventArgs):
    """Event arguments used in the GH_GHALoaded event on GH_ComponentServer.

    """
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Name(self) -> str: ...

class GH_GHXHarvester(object):
    """Provides static methods for harvesting data from GHX and GH files.

    """
    @overload
    @staticmethod
    def HarvestBoundingBoxes(file: str) -> Generic.List: ...
    @overload
    @staticmethod
    def HarvestBoundingBoxes(archive: Serialization.GH_Archive) -> Generic.List: ...
    @overload
    @staticmethod
    def HarvestBoundingBoxes(node: Serialization.GH_IReader) -> Generic.List: ...
    @overload
    @staticmethod
    def HarvestPivots(file: str) -> Generic.List: ...
    @overload
    @staticmethod
    def HarvestPivots(archive: Serialization.GH_Archive) -> Generic.List: ...
    @overload
    @staticmethod
    def HarvestPivots(node: Serialization.GH_IReader) -> Generic.List: ...

class GH_GuidConflictSolution(enum.Enum):
    Unset = 0
    Replace = 1
    ReplaceAll = 2
    Skip = 3
    SkipAll = 4

class GH_IconDisplayMode(enum.Enum):
    application = 0
    icon = 1
    name = 2

class IGH_InitCodeAware:
    """Implement this interface in your IGH_DocumentObject class if you want to handle initialization codes from Canvas Search boxes.

    """
    @overload
    def SetInitCode(self, code: str) -> None: ...

class IGH_InstanceDescription:
    """Base interface for all objects that participate in the Grasshopper GUI.

    """
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> System.Guid: ...
    @property
    def Keywords(self) -> Generic.IEnumerable: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def NewInstanceGuid() -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: System.Guid) -> None: ...
    @Category.setter
    def Category(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @NickName.setter
    def NickName(self, value: System.Void): ...
    @SubCategory.setter
    def SubCategory(self, value: System.Void): ...

class GH_InstanceDescription(object):
    """Base implementation of IGH_InstanceDescription. Consider deriving from this class rather than implementing IGH_InstanceDescription from scratch.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_InstanceDescription): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str, subCategory: str): ...
    @overload
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> System.Guid: ...
    @property
    def Keywords(self) -> Generic.IEnumerable: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def NewInstanceGuid() -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: System.Guid) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def ReadFull(self, reader: Serialization.GH_IReader) -> bool: ...
    @Category.setter
    def Category(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @NickName.setter
    def NickName(self, value: System.Void): ...
    @SubCategory.setter
    def SubCategory(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    def WriteFull(self, writer: Serialization.GH_IWriter) -> bool: ...

class IGH_InstanceGuidDependent:
    """Implement this interface in your IGH_DocumentObject class if you want to be informed when the InstanceGuids of objects in the document are mutated.

    """
    @overload
    def InstanceGuidsChanged(self, map_: Generic.SortedDictionary) -> None: ...

class GH_PluginFolderType(enum.Enum):
    Core = 0
    Default = 1
    RhiFolder = 2
    UserFolder = 3

class GH_AssemblyFolderInfo(System.ValueType):
    """Represents a folder from which GHA files are loaded.

    """
    def __init__(self, folder: str, type_: GH_PluginFolderType): ...
    @property
    def Folder(self) -> str: ...
    @property
    def Type(self) -> GH_PluginFolderType: ...
    @property
    def SearchOption(self) -> IO.SearchOption: ...
    @overload
    def ToString() -> str: ...

class GH_ListUtil(object):
    """Provides utilities for dealing with list of Data from input parameters.

    """
    @overload
    @staticmethod
    def CountNonNullRefs(L: Generic.List) -> int: ...
    @overload
    @staticmethod
    def CountNullRefs(L: Generic.List) -> int: ...
    @overload
    @staticmethod
    def EnsureNonNullCount(L: Generic.List, N: int) -> bool: ...
    @overload
    @staticmethod
    def FirstNonNullItem(L: Generic.List) -> int: ...
    @overload
    @staticmethod
    def RemoveNullRefs(L: Generic.List) -> Generic.List: ...

class GH_LoadingDemand(enum.Enum):
    Default = 0
    ForceCOFF = 1
    ForceDirect = 2
    None_ = -1

class GH_LoadingMechanism(enum.Enum):
    COFF = 1
    Direct = 2
    Unknown = -1

class GH_LoadingAttribute(System.Attribute):
    """Assembly loading behaviour attribute.

    """
    def __init__(self, demand: GH_LoadingDemand): ...

class GH_LoadingException(object):
    """Maintains information about exceptions that occured during Add-On loading.

    """
    @overload
    def __init__(self, name: str, message: str): ...
    @overload
    def __init__(self, name: str, ex: System.Exception): ...
    @overload
    def __init__(self, name: str, message: str, type_: str): ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> str: ...

class GH_MarkovOutcome(object):
    """Represents a single Markov chain outcome.

    """
    @overload
    def __init__(self, newId: System.Guid): ...
    @overload
    def __init__(self, other: GH_MarkovOutcome): ...
    @overload
    def __init__(self, newId: System.Guid, newValence: System.Int64): ...
    @overload
    def DecreaseValence() -> None: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def Valence(self) -> System.Int64: ...
    @overload
    def IncreaseValence() -> None: ...
    @Valence.setter
    def Valence(self, value: System.Void): ...

class GH_MarkovPattern(object):
    """Represents a Markov chain pattern and associated outcomes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pat: System.System.Array[System.Guid]): ...
    @overload
    def __init__(self, other: GH_MarkovPattern): ...
    @overload
    def AppendOutcome(self, id_: System.Guid) -> None: ...
    @overload
    def AppendOutcome(self, outcome: GH_MarkovOutcome) -> None: ...
    @overload
    def CompareTo(self, other: GH_MarkovPattern) -> int: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def MaximumValence(self) -> System.Int64: ...
    @property
    def Outcomes(self) -> Generic.List: ...
    @property
    def Pattern(self) -> System.System.Array[System.Guid]: ...
    @overload
    def RemoveInsignificantOutcomes() -> None: ...
    @overload
    def Simplify() -> None: ...

class GH_MarkovChain(object):
    """Represents a database with multi-depth markov chains.

    """
    def __init__(self): ...
    @overload
    def AppendPattern(self, pattern: GH_MarkovPattern) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Description() -> str: ...
    @overload
    def ExtendHistory(self, new_id: System.Guid) -> None: ...
    @overload
    def FindPattern(self, id_: System.Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: System.Guid, id2: System.Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: System.Guid, id2: System.Guid, id3: System.Guid) -> GH_MarkovPattern: ...
    @property
    def Level1(self) -> Generic.List: ...
    @property
    def Level2(self) -> Generic.List: ...
    @property
    def Level3(self) -> Generic.List: ...
    @property
    def PatternCount(self) -> int: ...
    @overload
    def ReadFromDisc() -> None: ...
    @overload
    def ReduceDataset() -> None: ...
    @overload
    def SuggestEvents() -> System.System.Array[System.Guid]: ...
    @overload
    def WriteToDisc() -> None: ...

class GH_MathUtil(object):
    """    """
    @overload
    @staticmethod
    def WrapInteger(X: int, upper: int) -> int: ...
    @overload
    @staticmethod
    def WrapInteger(number: int, lower: int, upper: int) -> int: ...

class GH_BitmapChannel(enum.Enum):
    A = 1
    R = 2
    G = 4
    B = 8
    RGB = 14
    ARGB = 15

class GH_MemoryBitmap(object):
    """Utility class for ultra-fast bitmap sampling and filters.

    """
    @overload
    def __init__(self, bitmap: Drawing.Bitmap): ...
    @overload
    def __init__(self, bitmap: Drawing.Bitmap, wrap: Drawing2D.WrapMode): ...
    @overload
    def A(self, x: int, y: int) -> System.Byte: ...
    @overload
    def B(self, x: int, y: int) -> System.Byte: ...
    @overload
    def Colour(self, x: int, y: int) -> Drawing.Color: ...
    @overload
    def Colour(self, x: int, y: int, col: Drawing.Color) -> None: ...
    @overload
    def CopyChannel(self, source: GH_BitmapChannel, target: GH_BitmapChannel) -> None: ...
    @overload
    def Filter_AlphaEdges(self, padding: Forms.Padding, alpha_override: System.Byte) -> None: ...
    @overload
    def Filter_Blur() -> None: ...
    @overload
    def Filter_Blur(self, N: int) -> None: ...
    @overload
    def Filter_Blur(self, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_Blur(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_BlurAlpha(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_Contrast(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    @overload
    def Filter_DitherPattern(self, colour: Drawing.Color) -> None: ...
    @overload
    def Filter_DropShadow(self, offset: Drawing.Size, blur: int, darkness: float) -> None: ...
    @overload
    def Filter_Dullify() -> None: ...
    @overload
    def Filter_Equalize(self, channel: GH_BitmapChannel, value: System.Byte) -> None: ...
    @overload
    def Filter_GreyScale() -> None: ...
    @overload
    def Filter_GreyScale(self, amount: float) -> None: ...
    @overload
    def Filter_HueScale() -> None: ...
    @overload
    def Filter_Invert(self, channel: GH_BitmapChannel) -> None: ...
    @overload
    def Filter_LumScale() -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float, anchor: System.Byte) -> None: ...
    @overload
    def Filter_SatScale() -> None: ...
    @overload
    def Filter_Shift(self, channel: GH_BitmapChannel, amount: System.Byte) -> None: ...
    @overload
    def Filter_SpectrumScale() -> None: ...
    @overload
    def Filter_Tint(self, tint: Drawing.Color, lum_factor: float, sat_factor: float) -> None: ...
    @overload
    def G(self, x: int, y: int) -> System.Byte: ...
    @property
    def HasAlphaChannel(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def SizeOf(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @overload
    def OpaqueArea() -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def PadBitmap(bmp: Drawing.Image, padding: Forms.Padding, padding_color: Drawing.Color) -> Drawing.Bitmap: ...
    @overload
    def R(self, x: int, y: int) -> System.Byte: ...
    @overload
    def Release(self, includeChanges: bool) -> None: ...
    @overload
    def Sample(self, x: float, y: float) -> (bool, Drawing.Color): ...
    @overload
    def Sample(self, x: int, y: int) -> (bool, Drawing.Color): ...
    @overload
    @staticmethod
    def ShrinkBitmap(image: Drawing.Bitmap) -> Drawing.Bitmap: ...

class GH_ObjectChangedEventArgs(System.EventArgs):
    """Event arguments passed during ObjectChanged events.

    """
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType, eTag: object): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str, eTag: object): ...
    @property
    def CustomType(self) -> str: ...
    @property
    def Sender(self) -> IGH_DocumentObject: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Type(self) -> GH_ObjectEventType: ...

class GH_ObjectEventType(enum.Enum):
    Unset = 0
    NickName = 1
    NickNameAccepted = 2
    Icon = 3
    IconDisplayMode = 4
    Layout = 5
    Sources = 6
    Selected = 7
    Enabled = 8
    Preview = 9
    PersistentData = 10
    DataMatching = 11
    DataMapping = 12
    Options = 13
    Custom = 2147483647

class GH_ObjectType(enum.Enum):
    None_ = 0
    CompiledObject = 1
    UserObject = 2

class IGH_ObjectProxy:
    """Provides proxy data for all Grasshopper components and parameters.

    """
    @overload
    def CreateInstance() -> IGH_DocumentObject: ...
    @overload
    def DuplicateProxy() -> IGH_ObjectProxy: ...
    @property
    def Desc(self) -> IGH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> System.Guid: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Kind(self) -> GH_ObjectType: ...
    @property
    def LibraryGuid(self) -> System.Guid: ...
    @property
    def Location(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def SDKCompliant(self) -> bool: ...
    @property
    def Type(self) -> System.Type: ...
    @Exposure.setter
    def Exposure(self, value: System.Void): ...

class GH_GraphProxy(object):
    """    """
    def __init__(self, nGraph: Graphs.IGH_Graph, T: System.Type): ...
    @overload
    def CompareTo(self, other: GH_GraphProxy) -> int: ...
    @property
    def Description(self) -> str: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def Icon(self) -> Drawing.Image: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...

class GH_ObjectSpecies(enum.Enum):
    none = 0
    doc_object = 1
    parameter = 16
    component = 32
    group = 64
    wire = 128
    grip_in = 256
    grip_out = 512
    grip = 768
    balloon = 1024
    any_ = 4294967295

class GH_ParamWireDisplay(enum.Enum):
    default = 0
    faint = 1
    hidden = 2

class GH_ParamData(enum.Enum):
    unknown = 0
    void = 1
    local = 2
    remote = 3

class GH_ParamAccess(enum.Enum):
    item = 0
    list_ = 1
    tree = 2

class GH_ParamKind(enum.Enum):
    unknown = 0
    floating = 1
    input_ = 2
    output = 3

class GH_PrincipalState(enum.Enum):
    CannotBePrincipal = 0
    IsPrincipal = 1
    IsNotPrincipal = 2

class GH_DataMapping(enum.Enum):
    None_ = 0
    Flatten = 1
    Graft = 2

class IGH_Param:
    """Base interface for all Parameter types in Grasshopper. Do not implement this interface from scratch, derive from GH_Param or GH_PersistentParam instead.

    """
    @overload
    def AddSource(self, source: IGH_Param) -> None: ...
    @overload
    def AddSource(self, source: IGH_Param, index: int) -> None: ...
    @overload
    def AddVolatileData(self, path: Data.GH_Path, index: int, data: object) -> bool: ...
    @overload
    def AddVolatileDataList(self, path: Data.GH_Path, list_: Collections.IEnumerable) -> bool: ...
    @overload
    def AddVolatileDataTree(self, tree: Data.IGH_Structure) -> bool: ...
    @overload
    def ClearProxySources() -> None: ...
    @overload
    def CreateProxySources() -> None: ...
    @property
    def Access(self) -> GH_ParamAccess: ...
    @property
    def DataMapping(self) -> GH_DataMapping: ...
    @property
    def DataType(self) -> GH_ParamData: ...
    @property
    def HasProxySources(self) -> bool: ...
    @property
    def Kind(self) -> GH_ParamKind: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def ProxySourceCount(self) -> int: ...
    @property
    def Recipients(self) -> Generic.IList: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SourceCount(self) -> int: ...
    @property
    def Sources(self) -> Generic.IList: ...
    @property
    def StateTags(self) -> GH_StateTagList: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def VolatileData(self) -> Data.IGH_Structure: ...
    @property
    def VolatileDataCount(self) -> int: ...
    @property
    def WireDisplay(self) -> GH_ParamWireDisplay: ...
    @overload
    def RelinkProxySources(self, document: GH_Document) -> bool: ...
    @overload
    def RemoveAllSources() -> None: ...
    @overload
    def RemoveEffects() -> None: ...
    @overload
    def RemoveSource(self, source: IGH_Param) -> None: ...
    @overload
    def RemoveSource(self, source_id: System.Guid) -> None: ...
    @overload
    def ReplaceSource(self, old_source: IGH_Param, new_source: IGH_Param) -> None: ...
    @overload
    def ReplaceSource(self, old_source_id: System.Guid, new_source: IGH_Param) -> None: ...
    @Access.setter
    def Access(self, value: System.Void): ...
    @DataMapping.setter
    def DataMapping(self, value: System.Void): ...
    @Optional.setter
    def Optional(self, value: System.Void): ...
    @Reverse.setter
    def Reverse(self, value: System.Void): ...
    @Simplify.setter
    def Simplify(self, value: System.Void): ...
    @WireDisplay.setter
    def WireDisplay(self, value: System.Void): ...

class IGH_ParamWithPostProcess:
    """Utility interface for GH_Param(Of T)

    """
    @overload
    def PostProcessData() -> None: ...

class GH_ParameterContext(object):
    """Data passed to IGH_ContextualParameter.AutoAssignContextualData to help define a context state of Rhino/Grasshopper

    """
    def __init__(self, name: str, rhDoc: Rhino.RhinoDoc, runmode: Commands.RunMode): ...
    @property
    def IsScripted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RhinoDoc(self) -> Rhino.RhinoDoc: ...
    @property
    def SolveIndex(self) -> int: ...
    @SolveIndex.setter
    def SolveIndex(self, value: System.Void): ...

class IGH_ContextualParameter:
    """Base interface for contextual parameters. This makes accessing non-strongly-typed functionality easier.

    """
    @overload
    def AssignContextualData(self, data: Collections.IEnumerable) -> None: ...
    @overload
    def AutoAssignContextualData(self, context: GH_ParameterContext) -> bool: ...
    @property
    def AtLeast(self) -> int: ...
    @property
    def AtMost(self) -> int: ...
    @property
    def ContextualData(self) -> Generic.IEnumerable: ...
    @property
    def Immediate(self) -> bool: ...
    @property
    def Prompt(self) -> str: ...

class IGH_ContextualParameter2:
    """Version 2 of Base interface for contextual parameters. This makes accessing non-strongly-typed functionality easier.

    """
    @overload
    def ClearContextualData() -> None: ...

class GH_Param(GH_ActiveObject):
    """Base implementation of IGH_Param. Derive from this class rather than implementing IGH_Param from scratch. If your parameter can store persistent data, derive from GH_PersistentParam(Of T) instead.

    GH_Param[T]
    """
    @overload
    def AddSource(self, source: IGH_Param) -> None: ...
    @overload
    def AddSource(self, source: IGH_Param, index: int) -> None: ...
    @overload
    def AddVolatileData(self, path: Data.GH_Path, index: int, data: object) -> bool: ...
    @overload
    def AddVolatileData(self, path: Data.GH_Path, index: int, data: T) -> bool: ...
    @overload
    def AddVolatileDataList(self, path: Data.GH_Path, list_: Generic.List) -> bool: ...
    @overload
    def AddVolatileDataList(self, path: Data.GH_Path, list_: Collections.IEnumerable) -> bool: ...
    @overload
    def AddVolatileDataTree(self, tree: Data.IGH_Structure) -> bool: ...
    @overload
    def AddVolatileDataTree(self, tree: Data.GH_Structure) -> bool: ...
    @overload
    def AppendAdditionalMenuItems(self, menu: Forms.ToolStripDropDown) -> None: ...
    @overload
    def ClearData() -> None: ...
    @overload
    def ClearProxySources() -> None: ...
    @overload
    def CollectData() -> None: ...
    @overload
    def ComputeData() -> None: ...
    @overload
    def CreateAttributes() -> None: ...
    @overload
    def CreateProxySources() -> None: ...
    @overload
    def DependsOn(self, potential_source: IGH_ActiveObject) -> bool: ...
    @overload
    def ExpireOwner() -> None: ...
    @overload
    def ExpireSolutionTopLevel(self, recompute: bool) -> None: ...
    @property
    def Access(self) -> GH_ParamAccess: ...
    @property
    def DataMapping(self) -> GH_DataMapping: ...
    @property
    def DataType(self) -> GH_ParamData: ...
    @property
    def HasProxySources(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def IsPrincipal(self) -> GH_PrincipalState: ...
    @property
    def Kind(self) -> GH_ParamKind: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def ProcessorTime(self) -> System.TimeSpan: ...
    @property
    def ProxySourceCount(self) -> int: ...
    @property
    def Recipients(self) -> Generic.IList: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SourceCount(self) -> int: ...
    @property
    def Sources(self) -> Generic.IList: ...
    @property
    def StateTags(self) -> GH_StateTagList: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def VolatileData(self) -> Data.IGH_Structure: ...
    @property
    def VolatileDataCount(self) -> int: ...
    @property
    def WireDisplay(self) -> GH_ParamWireDisplay: ...
    @overload
    def IsolateObject() -> None: ...
    @overload
    def PostProcessData() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RelinkProxySources(self, document: GH_Document) -> bool: ...
    @overload
    def RemoveAllSources() -> None: ...
    @overload
    def RemoveEffects() -> None: ...
    @overload
    def RemoveSource(self, source_id: System.Guid) -> None: ...
    @overload
    def RemoveSource(self, source: IGH_Param) -> None: ...
    @overload
    def ReplaceSource(self, old_source: IGH_Param, new_source: IGH_Param) -> None: ...
    @overload
    def ReplaceSource(self, old_source_id: System.Guid, new_source: IGH_Param) -> None: ...
    @Access.setter
    def Access(self, value: System.Void): ...
    @DataMapping.setter
    def DataMapping(self, value: System.Void): ...
    @Optional.setter
    def Optional(self, value: System.Void): ...
    @Reverse.setter
    def Reverse(self, value: System.Void): ...
    @Simplify.setter
    def Simplify(self, value: System.Void): ...
    @WireDisplay.setter
    def WireDisplay(self, value: System.Void): ...
    @overload
    def SetPrincipal(self, set_: bool, recordUndo: bool, recompute: bool) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_NoiseTable(object):
    """    """
    @overload
    @staticmethod
    def Permutation(N: int) -> int: ...
    @overload
    @staticmethod
    def Sample(N: int) -> float: ...

class GH_PersistentGeometryParam(GH_PersistentParam):
    """Derives from GH_PersistentParam(Of T), but adds some useful functions for dealing with geometric data types.

    GH_PersistentGeometryParam[T]
    """
    @overload
    def ClearData() -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @overload
    def RegisterRemoteIDs(self, table: GH_GuidTable) -> None: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_GetterResult(enum.Enum):
    accept = 0
    success = 1
    cancel = 2

class GH_PersistentParam(GH_Param):
    """Implementation of GH_Param(Of T) that supports persistent data.

    GH_PersistentParam[T]
    """
    @overload
    def AppendAdditionalMenuItems(self, menu: Forms.ToolStripDropDown) -> None: ...
    @property
    def DataType(self) -> GH_ParamData: ...
    @property
    def PersistentData(self) -> Data.GH_Structure: ...
    @property
    def PersistentDataCount(self) -> int: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Script_AddPersistentData(self, data: Generic.List) -> None: ...
    @overload
    def Script_ClearPersistentData() -> None: ...
    @overload
    def SetPersistentData(self, items: Data.GH_Structure) -> None: ...
    @overload
    def SetPersistentData(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def SetPersistentData(self, item: T) -> None: ...
    @overload
    def SetPersistentData(self, values: System.System.Array[object]) -> None: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_PingDocumentEventArgs(System.EventArgs):
    """Event arguments passed during PingDocument events.

    """
    def __init__(self): ...
    @property
    def Document(self) -> GH_Document: ...
    @Document.setter
    def Document(self, value: System.Void): ...

class GH_PreviewBoundary(object):
    """A closed boundary for filtering previewed objects.

    """
    def __init__(self, points: Drawing.System.Array[Drawing.PointF]): ...
    @property
    def Boundary(self) -> Drawing.Region: ...
    @property
    def Limits(self) -> Drawing.RectangleF: ...
    @property
    def Points(self) -> Drawing.System.Array[Drawing.PointF]: ...
    @overload
    def IsVisible(self, obj: IGH_DocumentObject) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_PreviewExpiredEventArgs(System.EventArgs):
    """Arguments for preview events.

    """
    def __init__(self, eForceRedraw: bool): ...
    @property
    def ForceRedraw(self) -> bool: ...

class IGH_PreviewArgs:
    """Preview display arguments for IGH_PreviewObjects.

    """
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> Display.DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> Display.DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> Display.DisplayMaterial: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...
    @property
    def WireColour(self) -> Drawing.Color: ...
    @property
    def WireColour_Selected(self) -> Drawing.Color: ...

class GH_PreviewArgs(object):
    """This class is passed to Objects that implement IGH_PreviewObject during drawing operations.

    """
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> Display.DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> Display.DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> Display.DisplayMaterial: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...
    @property
    def WireColour(self) -> Drawing.Color: ...
    @property
    def WireColour_Selected(self) -> Drawing.Color: ...

class GH_PreviewWireArgs(object):
    """This class is passed to objects that implement IGH_PreviewData during wire drawing operations.

    """
    def __init__(self, vp: Display.RhinoViewport, pl: Display.DisplayPipeline, col: Drawing.Color, thickness: int): ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def Pipeline(self) -> Display.DisplayPipeline: ...
    @property
    def Thickness(self) -> int: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...

class GH_PreviewMeshArgs(object):
    """This class is passed to objects that implement IGH_PreviewData during mesh drawing operations.

    """
    def __init__(self, vp: Display.RhinoViewport, pl: Display.DisplayPipeline, mat: Display.DisplayMaterial, meshParams: Geometry.MeshingParameters): ...
    @property
    def Material(self) -> Display.DisplayMaterial: ...
    @property
    def MeshingParameters(self) -> Geometry.MeshingParameters: ...
    @property
    def Pipeline(self) -> Display.DisplayPipeline: ...
    @property
    def Viewport(self) -> Display.RhinoViewport: ...

class IGH_PreviewObject:
    """All IGH_DocumentObjects that wish to participate in Viewport redraws must implement this interface.

    """
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @Hidden.setter
    def Hidden(self, value: System.Void): ...

class IGH_PreviewData:
    """All IGH_Goo types that wish to participate in Viewport redraws must implement this interface.

    """
    @overload
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...

class IGH_PreviewMeshData:
    """Implement this interface if your data deals with preview meshes.

    """
    @overload
    def DestroyPreviewMeshes() -> None: ...
    @overload
    def GetPreviewMeshes() -> Geometry.System.Array[Geometry.Mesh]: ...

class GH_RenderArgs(object):
    """This class is passed to objects that implement IGH_RenderAwareData or IGH_RenderAwareObject during render queue operations.

    """
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, vp: DocObjects.ViewportInfo, geometry: Render.RenderPrimitiveList, id_: System.Guid, materialCache: Generic.Dictionary): ...
    @overload
    def __init__(self, doc: Rhino.RhinoDoc, vp: DocObjects.ViewportInfo, geometry: Render.RenderPrimitiveList, id_: System.Guid, matNormal: Render.RenderMaterial, matSelected: Render.RenderMaterial): ...
    @property
    def Document(self) -> Rhino.RhinoDoc: ...
    @property
    def Geomety(self) -> Render.RenderPrimitiveList: ...
    @property
    def MaterialCache(self) -> Generic.Dictionary: ...
    @property
    def MaterialNormal(self) -> Render.RenderMaterial: ...
    @property
    def MaterialSelected(self) -> Render.RenderMaterial: ...
    @property
    def ModelTransform(self) -> Geometry.Transform: ...
    @property
    def PluginId(self) -> System.Guid: ...
    @property
    def Viewport(self) -> DocObjects.ViewportInfo: ...
    @property
    def ViewportName(self) -> str: ...
    @overload
    def PopModelTransform() -> Geometry.Transform: ...
    @overload
    def PushModelTransform(self, transform: Geometry.Transform) -> None: ...

class IGH_RenderAwareData:
    """Implement this interface in your IGH_Goo type if it may have render geometry.

    """
    @overload
    def AppendRenderGeometry(self, args: GH_RenderArgs, material: Render.RenderMaterial) -> None: ...

class GH_PreviewUtil(object):
    """This class exposes functionality that makes it easy to draw temporary geometry in Rhino viewports.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enable: bool): ...
    @overload
    def AddBox(self, box: Geometry.Box) -> None: ...
    @overload
    def AddBrep(self, brep: Geometry.Brep) -> None: ...
    @overload
    def AddCurve(self, curve: Geometry.Curve) -> None: ...
    @overload
    def AddLine(self, line: Geometry.Line) -> None: ...
    @overload
    def AddMesh(self, mesh: Geometry.Mesh) -> None: ...
    @overload
    def AddPlane(self, plane: Geometry.Plane) -> None: ...
    @overload
    def AddPoint(self, point: Geometry.Point3d) -> None: ...
    @overload
    def AddVector(self, vector: Geometry.Line) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def WireColour(self) -> Drawing.Color: ...
    @overload
    def Redraw() -> None: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @WireColour.setter
    def WireColour(self, value: System.Void): ...

class GH_Process(object):
    """Provides static (Shared) access to several basic Win Process properties.

    """
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HandleCount(self) -> int: ...
    @property
    def HasExited(self) -> bool: ...
    @property
    def MaxWorkingSet(self) -> System.Int64: ...
    @property
    def Name(self) -> str: ...
    @property
    def PeakPrivateBytes(self) -> System.Int64: ...
    @property
    def PrivateBytes(self) -> System.Int64: ...
    @property
    def WorkingSet(self) -> System.Int64: ...

class GH_ProcessForm(Forms.Form):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def FormatBytes(B: System.Int64) -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class GH_ProfilerMode(enum.Enum):
    None_ = 0
    Processor = 1
    Memory = 2

class GH_DocumentRank(enum.Enum):
    Unset = 0
    TopLevel = 1
    Subsidiary = 2

class IGH_ProxyParameter:
    """    """
    @property
    def ProxyGuid(self) -> System.Guid: ...

class GH_RelevantObjectData(object):
    """Contains information about relevant objects at a specific canvas location.

    """
    def __init__(self, pt: Drawing.PointF): ...
    @overload
    def CreateBalloonData(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def CreateGripData(self, obj: IGH_DocumentObject, is_input: bool) -> None: ...
    @overload
    def CreateGroupData(self, group: Special.GH_Group) -> None: ...
    @overload
    def CreateObjectData(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def CreateWireData() -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Group(self) -> Special.GH_Group: ...
    @property
    def IsTopLevelObject(self) -> bool: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def ObjectType(self) -> GH_ObjectSpecies: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def Point(self) -> Drawing.PointF: ...
    @property
    def TopLevelObject(self) -> IGH_DocumentObject: ...

class GH_RuntimeMessage(object):
    """Contains all fields that together define a RuntimeMessage. Runtime Messages are created and recorded by document objects during Grasshopper solutions.

    """
    def __init__(self, nMessage: str, nType: GH_RuntimeMessageLevel, nSource: str): ...
    @property
    def Event(self) -> System.DateTime: ...
    @property
    def HasSource(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> GH_RuntimeMessageLevel: ...

class GH_ScriptComponentUtilities(object):
    """    """
    @overload
    @staticmethod
    def FindAllNameSpaces(asm: Reflection.Assembly) -> Generic.List: ...
    @overload
    @staticmethod
    def FindTopLevelNameSpaces(asm: Reflection.Assembly) -> Generic.List: ...
    @overload
    @staticmethod
    def ReflectType_CS(obj: object) -> str: ...
    @overload
    @staticmethod
    def ReflectType_CS(obj: object, method_name: str) -> str: ...
    @overload
    @staticmethod
    def ReflectType_VB(obj: object) -> str: ...
    @overload
    @staticmethod
    def ReflectType_VB(obj: object, method_name: str) -> str: ...

class IGH_ScriptInstance:
    """    """
    @overload
    def AfterRunScript() -> None: ...
    @overload
    def BeforeRunScript() -> None: ...
    @overload
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: object, iteration: int, inputs: Generic.List, DA: IGH_DataAccess) -> None: ...

class GH_ScriptInstance(object):
    """    """
    @overload
    def AfterRunScript() -> None: ...
    @overload
    def BeforeRunScript() -> None: ...
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @property
    def ClippingBox(self) -> Geometry.BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @overload
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: object, iteration: int, inputs: Generic.List, DA: IGH_DataAccess) -> None: ...
    @Hidden.setter
    def Hidden(self, value: System.Void): ...

class GH_SettingsType(enum.Enum):
    _null = 0
    _boolean = 1
    _byte = 2
    _integer = 3
    _double = 4
    _string = 6
    _date = 7
    _color = 8
    _point = 9
    _size = 10
    _rectangle = 11
    _unknown = -1

class GH_SettingsServer(object):
    """A single instance of this class is maintained at module level under the accessor "Settings".

    """
    @overload
    def __init__(self, databaseName: str): ...
    @overload
    def __init__(self, databaseName: str, loadSettings: bool): ...
    @overload
    def Clear() -> None: ...
    @overload
    def ConstainsEntry(self, name: str) -> bool: ...
    @overload
    def DeleteValue(self, key: str) -> None: ...
    @overload
    def EntryNames() -> Generic.List: ...
    @overload
    def EntryType(self, name: str) -> GH_SettingsType: ...
    @property
    def Count(self) -> int: ...
    @property
    def DatabaseName(self) -> str: ...
    @overload
    def GetValue(self, key: str, default: bool) -> bool: ...
    @overload
    def GetValue(self, key: str, default: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def GetValue(self, key: str, default: Drawing.Point) -> Drawing.Point: ...
    @overload
    def GetValue(self, key: str, default: Drawing.Size) -> Drawing.Size: ...
    @overload
    def GetValue(self, key: str, default: Drawing.Color) -> Drawing.Color: ...
    @overload
    def GetValue(self, key: str, default: System.DateTime) -> System.DateTime: ...
    @overload
    def GetValue(self, key: str, default: float) -> float: ...
    @overload
    def GetValue(self, key: str, default: int) -> int: ...
    @overload
    def GetValue(self, key: str, default: System.Byte) -> System.Byte: ...
    @overload
    def GetValue(self, key: str, default: str) -> str: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def SetValue(self, key: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: Drawing.Color) -> None: ...
    @overload
    def SetValue(self, key: str, value: Drawing.Size) -> None: ...
    @overload
    def SetValue(self, key: str, value: Drawing.Point) -> None: ...
    @overload
    def SetValue(self, key: str, value: System.DateTime) -> None: ...
    @overload
    def SetValue(self, key: str, value: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: float) -> None: ...
    @overload
    def SetValue(self, key: str, value: int) -> None: ...
    @overload
    def SetValue(self, key: str, value: System.Byte) -> None: ...
    @overload
    def SetValue(self, key: str, value: bool) -> None: ...
    @overload
    def SetValue(self, key: str, value: Drawing.Rectangle) -> None: ...
    @overload
    def ShowSettingsBrowser(self, parent: Forms.IWin32Window) -> None: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    def WritePersistentSettings() -> None: ...

class GH_SolutionExpiredEventArgs(System.EventArgs):
    """Arguments for solution events.

    """
    def __init__(self, eRecompute: bool): ...
    @property
    def Recompute(self) -> bool: ...

class GH_State(object):
    """Represents a single recorded document state. A state contains values for an arbitrary set of objects inside the document.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_State): ...
    @overload
    def AddStateObject(self, obj: IGH_StateAwareObject, obj_id: System.Guid) -> None: ...
    @overload
    def ClearStates() -> None: ...
    @overload
    def CreateStateFromDocument(self, doc: GH_Document) -> int: ...
    @property
    def Data(self) -> str: ...
    @property
    def Data(self) -> str: ...
    @property
    def LastModified(self) -> System.DateTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def StateCount(self) -> int: ...
    @property
    def StateData(self) -> Generic.SortedList: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemoveStateObject(self, obj_id: System.Guid) -> None: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_StateServer(Generic.List):
    """Maintains all the recorded states for this document.

    """
    def __init__(self, owner: GH_Document): ...
    @property
    def Names(self) -> Generic.List: ...
    @property
    def Owner(self) -> GH_Document: ...
    @overload
    def NewStateFromDocument() -> GH_State: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemoveState(self, index: int) -> bool: ...
    @overload
    def RestoreState(self, name: str) -> (bool, int, int): ...
    @overload
    def RestoreState(self, index: int) -> (bool, int, int): ...
    @overload
    def RestoreState(self, index: int, recompute: bool) -> (bool, int, int): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class IGH_StateAwareObject:
    """Implement this interface if you want to be included in state saving/loading.

    """
    @overload
    def LoadState(self, state: str) -> None: ...
    @overload
    def SaveState() -> str: ...

class IGH_DebugDescription:
    """Implement this interface to participate in Debug Logging.

    """
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...

class GH_DebugDescriptionWriter(object):
    """Writer object used to create debug logs.

    """
    def __init__(self): ...
    @overload
    def CloseBlock() -> None: ...
    @overload
    def CreateBlock(self, name: str) -> None: ...
    @overload
    def CreateLog() -> str: ...
    @property
    def Depth(self) -> int: ...
    @overload
    def WriteLine() -> None: ...
    @overload
    def WriteLine(self, line: str) -> None: ...
    @overload
    def WriteLine(self, line: str, args: System.System.Array[object]) -> None: ...
    @overload
    def WriteLogToFile(self, path: str) -> bool: ...

class GH_StateTagLayoutDirection(enum.Enum):
    Left = 0
    Right = 1

class GH_StateTagList(Generic.List):
    """Maintains a collection of IGH_StateTag objects.

    """
    def __init__(self): ...
    @property
    def BoundingBox(self) -> Drawing.Rectangle: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def IsTtipPoint(self, canvas_coordinate: Drawing.PointF) -> bool: ...
    @overload
    def Layout(self, box: Drawing.Rectangle, direction: GH_StateTagLayoutDirection) -> None: ...
    @overload
    def RenderStateTags(self, G: Drawing.Graphics) -> None: ...
    @overload
    def TooltipSetup(self, canvasPoint: Drawing.PointF, e: GUI.GH_TooltipDisplayEventArgs) -> None: ...

class IGH_StateTag:
    """A StateTag is a visual feedback mechanism that reflects a certain local setting of an Object.

    """
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Drawing.Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    @overload
    def Render(self, graphics: Drawing.Graphics) -> None: ...
    @Stage.setter
    def Stage(self, value: System.Void): ...
    @StateDescription.setter
    def StateDescription(self, value: System.Void): ...

class GH_StateTag(object):
    """Abstract implementation of the IGH_StateTag interface. Derive from this class rather than implementing IGH_StateTag.

    """
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Drawing.Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    @overload
    def Render(self, graphics: Drawing.Graphics) -> None: ...
    @Stage.setter
    def Stage(self, value: System.Void): ...
    @StateDescription.setter
    def StateDescription(self, value: System.Void): ...

class GH_MatchLevel(enum.Enum):
    None_ = 0
    Exact = 1
    Start = 2
    WordExact = 4
    WordStart = 8
    Contains = 16
    AllClean = 31
    Fuzzy = 32
    All = 63

class GH_MatchWeight(enum.Enum):
    Fuzzy = 10
    Contains = 10
    WordExact = 100
    Start = 100
    WordStart = 100
    Exact = 100

class GH_StringMatcher(object):
    """Utility class for finding matches in a database of Strings.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def ComputeWeight(value: str, key: str, comp: System.StringComparison) -> int: ...
    @overload
    @staticmethod
    def ComputeWeight(value: str, key: str, level: GH_MatchLevel, comp: System.StringComparison) -> int: ...
    @overload
    @staticmethod
    def LevenshteinDistance(A: str, B: str) -> int: ...

class IGH_DataAccess:
    """Provides access to component parameters, in order to retrieve and assign data during solutions.

    """
    @overload
    def AbortComponentSolution() -> None: ...
    @overload
    def BlitData(self, paramIndex: int, tree: Data.GH_Structure, overwrite: bool) -> bool: ...
    @overload
    def DisableGapLogic() -> None: ...
    @overload
    def DisableGapLogic(self, paramIndex: int) -> None: ...
    @property
    def Iteration(self) -> int: ...
    @overload
    def GetData(self, name: str) -> (bool, T): ...
    @overload
    def GetData(self, index: int) -> (bool, T): ...
    @overload
    def GetDataList(self, name: str, list_: Generic.List) -> bool: ...
    @overload
    def GetDataList(self, index: int, list_: Generic.List) -> bool: ...
    @overload
    def GetDataTree(self, index: int) -> (bool, Data.GH_Structure): ...
    @overload
    def GetDataTree(self, name: str) -> (bool, Data.GH_Structure): ...
    @overload
    def IncrementIteration() -> None: ...
    @overload
    def ParameterTargetIndex(self, paramIndex: int) -> int: ...
    @overload
    def ParameterTargetPath(self, paramIndex: int) -> Data.GH_Path: ...
    @overload
    def SetData(self, paramIndex: int, data: object) -> bool: ...
    @overload
    def SetData(self, paramName: str, data: object) -> bool: ...
    @overload
    def SetData(self, paramIndex: int, data: object, itemIndexOverride: int) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: Collections.IEnumerable) -> bool: ...
    @overload
    def SetDataList(self, paramName: str, data: Collections.IEnumerable) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: Collections.IEnumerable, listIndexOverride: int) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: Data.IGH_DataTree) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: Data.IGH_Structure) -> bool: ...
    @overload
    def Util_CountNonNullRefs(self, L: Generic.List) -> int: ...
    @overload
    def Util_CountNullRefs(self, L: Generic.List) -> int: ...
    @overload
    def Util_EnsureNonNullCount(self, L: Generic.List, N: int) -> bool: ...
    @overload
    def Util_FirstNonNullItem(self, L: Generic.List) -> int: ...
    @overload
    def Util_RemoveNullRefs(self, L: Generic.List) -> Generic.List: ...

class IGH_TaskCapableComponent:
    """GH_Component that can choose to support the use of Tasks to compute solutions When UseTasks returns true, the component has it's SolveInstance enumeration called twice. The first pass (InPreSolve=True) is intended solely for collecting data and starting calculation tasks. The second pass (InPreSolve=False) takes results or the tasks and sets the output.

    """
    @property
    def InPreSolve(self) -> bool: ...
    @property
    def UseTasks(self) -> bool: ...
    @overload
    def RequestTaskCancellation() -> None: ...
    @InPreSolve.setter
    def InPreSolve(self, value: System.Void): ...
    @UseTasks.setter
    def UseTasks(self, value: System.Void): ...

class GH_TaskCapableComponent(GH_Component):
    """Abstract implementation of IGH_TaskCapableComponent. Inherit from this class instead of implementing IGH_TaskCapableComponent directly.

    GH_TaskCapableComponent[T]
    """
    @overload
    def AppendAdditionalMenuItems(self, menu: Forms.ToolStripDropDown) -> None: ...
    @property
    def InPreSolve(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def UseTasks(self) -> bool: ...
    @overload
    def OnUseTasksClicked(self, sender: object, e: System.EventArgs) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RequestTaskCancellation() -> None: ...
    @InPreSolve.setter
    def InPreSolve(self, value: System.Void): ...
    @UseTasks.setter
    def UseTasks(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def PingDocument(self): ...

class GH_TypeLib(object):
    """Utility module that caches a number of oft-used types and type-ids for quick access. Do not change any of the values in this module or you'll wreck casting and conversion logic.

    """
    @property
    def t_bool(self) -> System.Type: ...
    @property
    def t_byte(self) -> System.Type: ...
    @property
    def t_int16(self) -> System.Type: ...
    @property
    def t_int32(self) -> System.Type: ...
    @property
    def t_int64(self) -> System.Type: ...
    @property
    def t_uint16(self) -> System.Type: ...
    @property
    def t_uint32(self) -> System.Type: ...
    @property
    def t_uint64(self) -> System.Type: ...
    @property
    def t_time(self) -> System.Type: ...
    @property
    def t_single(self) -> System.Type: ...
    @property
    def t_double(self) -> System.Type: ...
    @property
    def t_decimal(self) -> System.Type: ...
    @property
    def t_guid(self) -> System.Type: ...
    @property
    def t_char(self) -> System.Type: ...
    @property
    def t_string(self) -> System.Type: ...
    @property
    def t_color(self) -> System.Type: ...
    @property
    def t_size(self) -> System.Type: ...
    @property
    def t_sizef(self) -> System.Type: ...
    @property
    def t_point(self) -> System.Type: ...
    @property
    def t_pointf(self) -> System.Type: ...
    @property
    def t_rectangle(self) -> System.Type: ...
    @property
    def t_rectanglef(self) -> System.Type: ...
    @property
    def t_object(self) -> System.Type: ...
    @property
    def id_bool(self) -> System.Guid: ...
    @property
    def id_byte(self) -> System.Guid: ...
    @property
    def id_int16(self) -> System.Guid: ...
    @property
    def id_int32(self) -> System.Guid: ...
    @property
    def id_int64(self) -> System.Guid: ...
    @property
    def id_uint16(self) -> System.Guid: ...
    @property
    def id_uint32(self) -> System.Guid: ...
    @property
    def id_uint64(self) -> System.Guid: ...
    @property
    def id_time(self) -> System.Guid: ...
    @property
    def id_single(self) -> System.Guid: ...
    @property
    def id_double(self) -> System.Guid: ...
    @property
    def id_decimal(self) -> System.Guid: ...
    @property
    def id_guid(self) -> System.Guid: ...
    @property
    def id_char(self) -> System.Guid: ...
    @property
    def id_string(self) -> System.Guid: ...
    @property
    def id_color(self) -> System.Guid: ...
    @property
    def id_size(self) -> System.Guid: ...
    @property
    def id_sizef(self) -> System.Guid: ...
    @property
    def id_point(self) -> System.Guid: ...
    @property
    def id_pointf(self) -> System.Guid: ...
    @property
    def id_rectangle(self) -> System.Guid: ...
    @property
    def id_rectanglef(self) -> System.Guid: ...
    @property
    def id_object(self) -> System.Guid: ...
    @property
    def t_gh_goo(self) -> System.Type: ...
    @property
    def t_gh_objwrapper(self) -> System.Type: ...
    @property
    def t_gh_bool(self) -> System.Type: ...
    @property
    def t_gh_int(self) -> System.Type: ...
    @property
    def t_gh_number(self) -> System.Type: ...
    @property
    def t_gh_complex(self) -> System.Type: ...
    @property
    def t_gh_complexnumber(self) -> System.Type: ...
    @property
    def t_gh_guid(self) -> System.Type: ...
    @property
    def t_gh_matrix(self) -> System.Type: ...
    @property
    def t_gh_transform(self) -> System.Type: ...
    @property
    def t_gh_string(self) -> System.Type: ...
    @property
    def t_gh_colour(self) -> System.Type: ...
    @property
    def t_gh_time(self) -> System.Type: ...
    @property
    def t_gh_path(self) -> System.Type: ...
    @property
    def t_gh_structpath(self) -> System.Type: ...
    @property
    def t_gh_material(self) -> System.Type: ...
    @property
    def t_gh_interval2D(self) -> System.Type: ...
    @property
    def t_gh_uvinterval(self) -> System.Type: ...
    @property
    def t_gh_interval(self) -> System.Type: ...
    @property
    def t_gh_vector(self) -> System.Type: ...
    @property
    def t_gh_point(self) -> System.Type: ...
    @property
    def t_gh_plane(self) -> System.Type: ...
    @property
    def t_gh_arc(self) -> System.Type: ...
    @property
    def t_gh_line(self) -> System.Type: ...
    @property
    def t_gh_curve(self) -> System.Type: ...
    @property
    def t_gh_circle(self) -> System.Type: ...
    @property
    def t_gh_rectangle(self) -> System.Type: ...
    @property
    def t_gh_box(self) -> System.Type: ...
    @property
    def t_gh_brep(self) -> System.Type: ...
    @property
    def t_gh_subd(self) -> System.Type: ...
    @property
    def t_gh_surface(self) -> System.Type: ...
    @property
    def t_gh_extrusion(self) -> System.Type: ...
    @property
    def t_gh_mesh(self) -> System.Type: ...
    @property
    def t_gh_meshface(self) -> System.Type: ...
    @property
    def t_gh_pointcloud(self) -> System.Type: ...
    @property
    def t_gh_hatch(self) -> System.Type: ...
    @property
    def t_gh_textdot(self) -> System.Type: ...
    @property
    def t_gh_annotationbase(self) -> System.Type: ...
    @property
    def t_gh_textentity(self) -> System.Type: ...
    @property
    def t_gh_leader(self) -> System.Type: ...
    @property
    def t_gh_dimension(self) -> System.Type: ...
    @property
    def t_gh_lineardimension(self) -> System.Type: ...
    @property
    def t_gh_ordinatedimension(self) -> System.Type: ...
    @property
    def t_gh_radialdimension(self) -> System.Type: ...
    @property
    def t_gh_angulardimension(self) -> System.Type: ...
    @property
    def t_gh_centermark(self) -> System.Type: ...
    @property
    def t_gh_instancereference(self) -> System.Type: ...
    @property
    def t_gh_detailview(self) -> System.Type: ...
    @property
    def t_gh_light(self) -> System.Type: ...
    @property
    def t_gh_modelobject(self) -> System.Type: ...
    @property
    def id_gh_goo(self) -> System.Guid: ...
    @property
    def id_gh_objwrapper(self) -> System.Guid: ...
    @property
    def id_gh_bool(self) -> System.Guid: ...
    @property
    def id_gh_int(self) -> System.Guid: ...
    @property
    def id_gh_number(self) -> System.Guid: ...
    @property
    def id_gh_complex(self) -> System.Guid: ...
    @property
    def id_gh_complexnumber(self) -> System.Guid: ...
    @property
    def id_gh_guid(self) -> System.Guid: ...
    @property
    def id_gh_matrix(self) -> System.Guid: ...
    @property
    def id_gh_transform(self) -> System.Guid: ...
    @property
    def id_gh_string(self) -> System.Guid: ...
    @property
    def id_gh_colour(self) -> System.Guid: ...
    @property
    def id_gh_time(self) -> System.Guid: ...
    @property
    def id_gh_path(self) -> System.Guid: ...
    @property
    def id_gh_structpath(self) -> System.Guid: ...
    @property
    def id_gh_material(self) -> System.Guid: ...
    @property
    def id_gh_interval2D(self) -> System.Guid: ...
    @property
    def id_gh_uvinterval(self) -> System.Guid: ...
    @property
    def id_gh_interval(self) -> System.Guid: ...
    @property
    def id_gh_vector(self) -> System.Guid: ...
    @property
    def id_gh_point(self) -> System.Guid: ...
    @property
    def id_gh_plane(self) -> System.Guid: ...
    @property
    def id_gh_arc(self) -> System.Guid: ...
    @property
    def id_gh_line(self) -> System.Guid: ...
    @property
    def id_gh_curve(self) -> System.Guid: ...
    @property
    def id_gh_circle(self) -> System.Guid: ...
    @property
    def id_gh_rectangle(self) -> System.Guid: ...
    @property
    def id_gh_box(self) -> System.Guid: ...
    @property
    def id_gh_brep(self) -> System.Guid: ...
    @property
    def id_gh_subd(self) -> System.Guid: ...
    @property
    def id_gh_surface(self) -> System.Guid: ...
    @property
    def id_gh_extrusion(self) -> System.Guid: ...
    @property
    def id_gh_mesh(self) -> System.Guid: ...
    @property
    def id_gh_meshface(self) -> System.Guid: ...
    @property
    def id_gh_pointcloud(self) -> System.Guid: ...
    @property
    def id_gh_hatch(self) -> System.Guid: ...
    @property
    def id_gh_textentity(self) -> System.Guid: ...
    @property
    def id_gh_textdot(self) -> System.Guid: ...
    @property
    def id_gh_leader(self) -> System.Guid: ...
    @property
    def id_gh_dimension(self) -> System.Guid: ...
    @property
    def id_gh_lineardimension(self) -> System.Guid: ...
    @property
    def id_gh_ordinatedimension(self) -> System.Guid: ...
    @property
    def id_gh_radialdimension(self) -> System.Guid: ...
    @property
    def id_gh_angulardimension(self) -> System.Guid: ...
    @property
    def id_gh_centermark(self) -> System.Guid: ...
    @property
    def id_gh_instancereference(self) -> System.Guid: ...
    @property
    def id_gh_detailview(self) -> System.Guid: ...
    @property
    def id_gh_light(self) -> System.Guid: ...
    @property
    def id_gh_modelobject(self) -> System.Guid: ...
    @property
    def t_rc_plane(self) -> System.Type: ...
    @property
    def t_rc_point3d(self) -> System.Type: ...
    @property
    def t_rc_point3f(self) -> System.Type: ...
    @property
    def t_rc_vector3d(self) -> System.Type: ...
    @property
    def t_rc_vector3f(self) -> System.Type: ...
    @property
    def t_rc_transform(self) -> System.Type: ...
    @property
    def t_rc_interval(self) -> System.Type: ...
    @property
    def t_rc_matrix(self) -> System.Type: ...
    @property
    def t_rc_line(self) -> System.Type: ...
    @property
    def t_rc_rectangle(self) -> System.Type: ...
    @property
    def t_rc_arc(self) -> System.Type: ...
    @property
    def t_rc_circle(self) -> System.Type: ...
    @property
    def t_rc_ellipse(self) -> System.Type: ...
    @property
    def t_rc_polyline(self) -> System.Type: ...
    @property
    def t_rc_box(self) -> System.Type: ...
    @property
    def t_rc_boundingbox(self) -> System.Type: ...
    @property
    def t_rc_sphere(self) -> System.Type: ...
    @property
    def t_rc_cone(self) -> System.Type: ...
    @property
    def t_rc_cylinder(self) -> System.Type: ...
    @property
    def t_rc_torus(self) -> System.Type: ...
    @property
    def t_rc_curve(self) -> System.Type: ...
    @property
    def t_rc_linecurve(self) -> System.Type: ...
    @property
    def t_rc_polylinecurve(self) -> System.Type: ...
    @property
    def t_rc_arccurve(self) -> System.Type: ...
    @property
    def t_rc_nurbscurve(self) -> System.Type: ...
    @property
    def t_rc_polycurve(self) -> System.Type: ...
    @property
    def t_rc_surface(self) -> System.Type: ...
    @property
    def t_rc_sumsurface(self) -> System.Type: ...
    @property
    def t_rc_revsurface(self) -> System.Type: ...
    @property
    def t_rc_nurbssurface(self) -> System.Type: ...
    @property
    def t_rc_planesurface(self) -> System.Type: ...
    @property
    def t_rc_brep(self) -> System.Type: ...
    @property
    def t_rc_brepface(self) -> System.Type: ...
    @property
    def t_rc_brepedge(self) -> System.Type: ...
    @property
    def t_rc_subd(self) -> System.Type: ...
    @property
    def t_rc_extrusion(self) -> System.Type: ...
    @property
    def t_rc_mesh(self) -> System.Type: ...
    @property
    def t_rc_meshface(self) -> System.Type: ...
    @property
    def t_rc_point(self) -> System.Type: ...
    @property
    def t_rc_pointcloud(self) -> System.Type: ...
    @property
    def t_rc_hatch(self) -> System.Type: ...
    @property
    def t_rc_textdot(self) -> System.Type: ...
    @property
    def t_rc_annotationbase(self) -> System.Type: ...
    @property
    def t_rc_textentity(self) -> System.Type: ...
    @property
    def t_rc_leader(self) -> System.Type: ...
    @property
    def t_rc_dimension(self) -> System.Type: ...
    @property
    def t_rc_lineardimension(self) -> System.Type: ...
    @property
    def t_rc_ordinatedimension(self) -> System.Type: ...
    @property
    def t_rc_radialdimension(self) -> System.Type: ...
    @property
    def t_rc_angulardimension(self) -> System.Type: ...
    @property
    def t_rc_centermark(self) -> System.Type: ...
    @property
    def t_rc_instancereference(self) -> System.Type: ...
    @property
    def t_rc_detailview(self) -> System.Type: ...
    @property
    def t_rc_light(self) -> System.Type: ...
    @property
    def id_rc_plane(self) -> System.Guid: ...
    @property
    def id_rc_point3d(self) -> System.Guid: ...
    @property
    def id_rc_point3f(self) -> System.Guid: ...
    @property
    def id_rc_vector3d(self) -> System.Guid: ...
    @property
    def id_rc_vector3f(self) -> System.Guid: ...
    @property
    def id_rc_transform(self) -> System.Guid: ...
    @property
    def id_rc_interval(self) -> System.Guid: ...
    @property
    def id_rc_matrix(self) -> System.Guid: ...
    @property
    def id_rc_line(self) -> System.Guid: ...
    @property
    def id_rc_rectangle(self) -> System.Guid: ...
    @property
    def id_rc_arc(self) -> System.Guid: ...
    @property
    def id_rc_circle(self) -> System.Guid: ...
    @property
    def id_rc_ellipse(self) -> System.Guid: ...
    @property
    def id_rc_polyline(self) -> System.Guid: ...
    @property
    def id_rc_box(self) -> System.Guid: ...
    @property
    def id_rc_boundingbox(self) -> System.Guid: ...
    @property
    def id_rc_sphere(self) -> System.Guid: ...
    @property
    def id_rc_cone(self) -> System.Guid: ...
    @property
    def id_rc_cylinder(self) -> System.Guid: ...
    @property
    def id_rc_torus(self) -> System.Guid: ...
    @property
    def id_rc_curve(self) -> System.Guid: ...
    @property
    def id_rc_linecurve(self) -> System.Guid: ...
    @property
    def id_rc_polylinecurve(self) -> System.Guid: ...
    @property
    def id_rc_arccurve(self) -> System.Guid: ...
    @property
    def id_rc_nurbscurve(self) -> System.Guid: ...
    @property
    def id_rc_polycurve(self) -> System.Guid: ...
    @property
    def id_rc_surface(self) -> System.Guid: ...
    @property
    def id_rc_sumsurface(self) -> System.Guid: ...
    @property
    def id_rc_revsurface(self) -> System.Guid: ...
    @property
    def id_rc_nurbssurface(self) -> System.Guid: ...
    @property
    def id_rc_planesurface(self) -> System.Guid: ...
    @property
    def id_rc_extrusion(self) -> System.Guid: ...
    @property
    def id_rc_brep(self) -> System.Guid: ...
    @property
    def id_rc_brepface(self) -> System.Guid: ...
    @property
    def id_rc_brepedge(self) -> System.Guid: ...
    @property
    def id_rc_subd(self) -> System.Guid: ...
    @property
    def id_rc_mesh(self) -> System.Guid: ...
    @property
    def id_rc_meshface(self) -> System.Guid: ...
    @property
    def id_rc_point(self) -> System.Guid: ...
    @property
    def id_rc_pointcloud(self) -> System.Guid: ...
    @property
    def id_rc_hatch(self) -> System.Guid: ...
    @property
    def id_rc_textentity(self) -> System.Guid: ...
    @property
    def id_rc_textdot(self) -> System.Guid: ...
    @property
    def id_rc_leader(self) -> System.Guid: ...
    @property
    def id_rc_dimension(self) -> System.Guid: ...
    @property
    def id_rc_lineardimension(self) -> System.Guid: ...
    @property
    def id_rc_ordinatedimension(self) -> System.Guid: ...
    @property
    def id_rc_radialdimension(self) -> System.Guid: ...
    @property
    def id_rc_angulardimension(self) -> System.Guid: ...
    @property
    def id_rc_centermark(self) -> System.Guid: ...
    @property
    def id_rc_instancereference(self) -> System.Guid: ...
    @property
    def id_rc_light(self) -> System.Guid: ...
    @property
    def id_rc_detailview(self) -> System.Guid: ...

class IGH_UpgradeObject:
    """Create a class with an empty constructor that implements this interface if you want to provide an upgrade mechanism.

    """
    @property
    def UpgradeFrom(self) -> System.Guid: ...
    @property
    def UpgradeTo(self) -> System.Guid: ...
    @property
    def Version(self) -> System.DateTime: ...
    @overload
    def Upgrade(self, target: IGH_DocumentObject, document: GH_Document) -> IGH_DocumentObject: ...

class GH_UpgradeUtil(object):
    """Exposes several utility functions for migrating parameters and wires between components useful while upgrading components.

    """
    def __init__(self): ...
    @overload
    @staticmethod
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component, index0: System.System.Array[int], index1: System.System.Array[int]) -> bool: ...
    @overload
    @staticmethod
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component, index0: System.System.Array[int], index1: System.System.Array[int]) -> bool: ...
    @overload
    @staticmethod
    def MigrateRecipients(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateRecipients(recipients: Generic.IEnumerable, target: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateSources(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateSources(sources: Generic.IEnumerable, target: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def ReplaceInputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    @overload
    @staticmethod
    def ReplaceOutputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: System.Guid) -> IGH_Component: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: System.Guid, migrateParameters: bool) -> IGH_Component: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component, migrateParameters: bool) -> bool: ...

class GH_UserObject(object):
    """Represents a custom user object. A User Object is an existing IGH_DocumentObject with overridden icon, instance description and exposure.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_file: str): ...
    @overload
    def Clear() -> None: ...
    @overload
    def CreateDefaultPath(self, avoid_conflict: bool) -> None: ...
    @property
    def BaseGuid(self) -> System.Guid: ...
    @property
    def Data(self) -> System.System.Array[System.Byte]: ...
    @property
    def Description(self) -> GH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> System.Guid: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Path(self) -> str: ...
    @overload
    def InstantiateObject() -> IGH_DocumentObject: ...
    @overload
    def ReadFromFile() -> None: ...
    @overload
    def SaveToFile() -> bool: ...
    @BaseGuid.setter
    def BaseGuid(self, value: System.Void): ...
    @Data.setter
    def Data(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Exposure.setter
    def Exposure(self, value: System.Void): ...
    @Guid.setter
    def Guid(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @overload
    def SetDataFromObject(self, obj: IGH_DocumentObject) -> None: ...

class IGH_ValueProxy:
    """    """
    @overload
    def Duplicate() -> IGH_ValueProxy: ...
    @overload
    def FromString(self, in_: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ProxyName(self) -> str: ...
    @property
    def ProxyType(self) -> System.Type: ...
    @property
    def ProxyValue(self) -> object: ...
    @property
    def UserString(self) -> str: ...
    @overload
    def MutateString(self, in_: str) -> str: ...
    @UserString.setter
    def UserString(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class GH_ValueProxy(object):
    """Represents the abstract base implementation of the IGH_ValueProxy interface.

    GH_ValueProxy[T]
    """
    @overload
    def Duplicate() -> IGH_ValueProxy: ...
    @overload
    def Duplicate_T() -> GH_ValueProxy: ...
    @overload
    def FromString(self, in_: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ProxyName(self) -> str: ...
    @property
    def ProxyType(self) -> System.Type: ...
    @property
    def ProxyValue(self) -> object: ...
    @property
    def UserString(self) -> str: ...
    @property
    def Value(self) -> T: ...
    @overload
    def MutateString(self, in_: str) -> str: ...
    @UserString.setter
    def UserString(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class GH_VarParamSide(enum.Enum):
    Input = 0
    Output = 1

class GH_VarParamEventArgs(System.EventArgs):
    """Arguments used in Variable Parameter events.

    """
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide): ...
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide, n_index: int): ...
    @property
    def Index(self) -> int: ...
    @property
    def Param(self) -> IGH_Param: ...
    @property
    def Side(self) -> GH_VarParamSide: ...

class IGH_VarParamComponent:
    """This interface is obsolete, please use the IGH_VariableParameterComponent interface instead.

    """
    @overload
    def ConstructVariable(self, e: GH_VarParamEventArgs) -> IGH_Param: ...
    @property
    def IsInputVariable(self) -> bool: ...
    @property
    def IsOutputVariable(self) -> bool: ...
    @overload
    def IsVariableParam(self, e: GH_VarParamEventArgs) -> bool: ...
    @overload
    def ManagerConstructed(self, side: GH_VarParamSide, manager: GUI.GH_VariableParameterManager) -> None: ...
    @overload
    def ParametersModified(self, side: GH_VarParamSide) -> None: ...

class GH_ParameterSide(enum.Enum):
    Input = 0
    Output = 1

class IGH_VariableParameterComponent:
    """Implement this interface in your component if you want to enable variable parameter UI.

    """
    @overload
    def CanInsertParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def CanRemoveParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def CreateParameter(self, side: GH_ParameterSide, index: int) -> IGH_Param: ...
    @overload
    def DestroyParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def VariableParameterMaintenance() -> None: ...

class GH_WireTopology(object):
    """Represents the topological data for a single connector wire.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_id: System.Guid, target_id: System.Guid): ...
    @overload
    def __init__(self, source: IGH_Param, target: IGH_Param): ...
    @overload
    def __init__(self, target: IGH_Param, index: int): ...
    @overload
    def __init__(self, source_id: System.Guid, target_id: System.Guid, source_index: int): ...
    @overload
    def DestroyConnection(self, doc: GH_Document) -> None: ...
    @overload
    def EnsureConnection(self, doc: GH_Document) -> None: ...
    @property
    def SourceIndex(self) -> int: ...
    @property
    def SourceParameterID(self) -> System.Guid: ...
    @property
    def TargetParameterID(self) -> System.Guid: ...
    @property
    def ValidIndex(self) -> bool: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_WireTopologyDiagram(Generic.List):
    """Represents any number of topological wires.

    """
    def __init__(self): ...
    @overload
    def Add(self, wire: GH_WireTopology, filter_duplicates: bool) -> None: ...
    @overload
    def AppendDiagram(self, doc: GH_Document) -> None: ...
    @overload
    def AppendDiagram(self, objs: Generic.IEnumerable) -> None: ...
    @overload
    def AppendDiagram(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def DestroyConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    @overload
    def EnsureConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class IGH_ZuiAction:
    """Represents a single action which is only visible on screen above a certain zoom level.

    """
    @property
    def Name(self) -> str: ...
    @overload
    def Perform() -> None: ...

class GH_ZuiAction(object):
    """Basic implementation of IGH_ZuiAction.

    """
    @property
    def Name(self) -> str: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def IsTooltipRegion(self, canvasPoint: Drawing.PointF) -> bool: ...
    @overload
    def Perform() -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: Drawing.PointF, e: GUI.GH_TooltipDisplayEventArgs) -> None: ...

class IGH_UserPromptAware:
    """Implement this interface in your IGH_Param if you want to allow users to set data either through the menu or by double clicking.

    """
    @overload
    def PromptMenuMultipleItems() -> Forms.ToolStripMenuItem: ...
    @overload
    def PromptMenuSingleItem() -> Forms.ToolStripMenuItem: ...
    @overload
    def PromptMultipleItems() -> Data.IGH_Structure: ...
    @overload
    def PromptSingleItem() -> Types.IGH_Goo: ...

class IGH_DocumentObject:
    """Base interface for objects that want to play on the Canvas. Do not implement this interface from scratch. Either inherit from GH_DocumentObject or one of the other partially finished types such as GH_ActiveObject, GH_Param(Of T) or GH_Component.

    """
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AppendMenuItems(self, menu: Forms.ToolStripDropDown) -> bool: ...
    @overload
    def CreateAttributes() -> None: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def ComponentGuid(self) -> System.Guid: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Icon_24x24(self) -> Drawing.Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Drawing.Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def Obsolete(self) -> bool: ...
    @overload
    def IsolateObject() -> None: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def OnAttributesChanged() -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument() -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def RecordUndoEvent(self, record: Undo.GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> System.Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: Undo.IGH_UndoAction) -> System.Guid: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, value: System.Void): ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, value: System.Void): ...
    @overload
    def TriggerAutoSave() -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id_: System.Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id_: System.Guid) -> None: ...
    @property
    def SolutionExpired(self): ...
    @property
    def DisplayExpired(self): ...
    @property
    def PreviewExpired(self): ...
    @property
    def ObjectChanged(self): ...
    @property
    def AttributesChanged(self): ...
    @property
    def PingDocument(self): ...

class IRcpAwareObject:
    """Implement this interface in a parameter or component if you want to be publishable on the remote control panel.

    """
    @overload
    def PublishRcpItem() -> RemotePanel.IRcpItem: ...

class MatchingMode(enum.Enum):
    Equals = 0
    Wildcards = 1
    Regex = 2
    Contains = 3
    StartsWith = 4
    EndsWith = 5

class EnableAutoSaveChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnDocumentUnloadChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnObjectAddedChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnObjectRemovedChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnWireEventChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnObjectChangeChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SaveOnDataFlatteningChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class AutoSaveFileFormatChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class ParameterNickNameChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...

class ParameterSourcesChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...

class ParameterChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...

class NullParamAttributes(GH_Attributes):
    """    """
    def __init__(self, param: IGH_Param): ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class IGH_SyncObject:
    """Synch object for tracking long term changes to the parameter server.

    """

class GHAFileLoadedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GHALoadingEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_GHALoadingEventArgs) -> None: ...

class SettingsChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocSettingsEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocSettingsEventArgs) -> None: ...

class EnabledChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocEnabledEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocEnabledEventArgs) -> None: ...

class ContextChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocContextEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocContextEventArgs) -> None: ...

class ModifiedChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocModifiedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocModifiedEventArgs) -> None: ...

class ObjectsAddedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocObjectEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocObjectEventArgs) -> None: ...

class ObjectsDeletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocObjectEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocObjectEventArgs) -> None: ...

class UndoStateChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocUndoEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocUndoEventArgs) -> None: ...

class FilePathChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocFilePathEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocFilePathEventArgs) -> None: ...

class GH_ActiveObjectFilter(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, iObj: IGH_ActiveObject, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, iObj: IGH_ActiveObject) -> bool: ...

class DefaultPreviewColourChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, colour: Drawing.Color, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, colour: Drawing.Color) -> None: ...

class DefaultSelectedPreviewColourChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, colour: Drawing.Color, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, colour: Drawing.Color) -> None: ...

class SolutionStartEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SolutionEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_SolutionEventArgs) -> None: ...

class SolutionEndEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SolutionEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_SolutionEventArgs) -> None: ...

class EnableSolutionsChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, state: bool, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, state: bool) -> None: ...

class GH_ScheduleDelegate(System.MulticastDelegate):
    """Callback signature for Scheduled Solutions.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, doc: GH_Document, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, doc: GH_Document) -> None: ...

class GH_UndoUtil(object):
    """This class is emitted by the Undo property of a GH_Document instance.

    """
    @overload
    def CreateAddObjectEvent(self, name: str, objs: Generic.IEnumerable) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, objs: Generic.IEnumerable) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreatePersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> Undo.GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, objs: Generic.IEnumerable) -> Undo.GH_UndoRecord: ...
    @overload
    def CreatePreviewEvent(self, name: str, obj: IGH_ActiveObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, objs: Generic.IEnumerable) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, param: IGH_Param) -> Undo.GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, params: Generic.IEnumerable) -> Undo.GH_UndoRecord: ...
    @overload
    def MergeRecords(self, count: int) -> bool: ...
    @overload
    def RecordAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordAddObjectEvent(self, name: str, objs: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def RecordAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> System.Guid: ...
    @overload
    def RecordEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> System.Guid: ...
    @overload
    def RecordEvent(self, record: Undo.GH_UndoRecord) -> System.Guid: ...
    @overload
    def RecordEvent(self, name: str, action: Undo.IGH_UndoAction) -> System.Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Undo.System.Array[Undo.IGH_UndoAction]) -> System.Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def RecordGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, objs: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordPersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> System.Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, objs: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordPreviewEvent(self, name: str, obj: IGH_ActiveObject) -> System.Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, objs: Generic.IEnumerable) -> System.Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> System.Guid: ...
    @overload
    def RecordRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> System.Guid: ...
    @overload
    def RecordReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> System.Guid: ...
    @overload
    def RecordWireEvent(self, name: str, param: IGH_Param) -> System.Guid: ...
    @overload
    def RecordWireEvent(self, name: str, params: Generic.IEnumerable) -> System.Guid: ...

class ColourEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GUI.GH_ColourPicker, e: Base.GH_ColourPickerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GUI.GH_ColourPicker, e: Base.GH_ColourPickerEventArgs) -> None: ...

class DocumentAddedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...

class DocumentRemovedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...

class FileEvent(System.MulticastDelegate):
    """This delegate is called when changes to a certain file occur.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, path: str, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, path: str) -> None: ...

class FileChanged(System.MulticastDelegate):
    """Delegate method for file change callbacks.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_FileWatcher, filename: str, change: IO.WatcherChangeTypes, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_FileWatcher, filename: str, change: IO.WatcherChangeTypes) -> None: ...

class FileChangedSimple(System.MulticastDelegate):
    """Delegate method for file change callbacks.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, filename: str, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, filename: str) -> None: ...

class ScriptFamilyChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class StandardFamilyChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class ConsoleFamilyChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class SolutionExpiredEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs) -> None: ...

class DisplayExpiredEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs) -> None: ...

class PreviewExpiredEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs) -> None: ...

class ObjectChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs) -> None: ...

class AttributesChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs) -> None: ...

class PingDocumentEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs) -> None: ...

# endregion
