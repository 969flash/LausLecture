"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IGH_EquationFragment", "GH_EquationFragment", "GH_TextFragment", "GH_SequenceFragment"]
# endregion

# region: Imports
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class IGH_EquationFragment:
    """    """
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> Drawing.PointF: ...
    @property
    def Size(self) -> Drawing.SizeF: ...
    @overload
    def Layout(self, font: Drawing.Font) -> bool: ...
    @overload
    def Position(self, location: Drawing.PointF) -> bool: ...
    @overload
    def Render(self, graphics: Drawing.Graphics, font: Drawing.Font, colour: Drawing.Color) -> None: ...
    @Pivot.setter
    def Pivot(self, value: System.Void): ...
    @overload
    def ToExpression() -> str: ...

class GH_EquationFragment(object):
    """Base implementation of IGH_EquationFragment.

    """
    @property
    def Bounds(self) -> Drawing.RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> Drawing.PointF: ...
    @property
    def Size(self) -> Drawing.SizeF: ...
    @overload
    def Layout(self, font: Drawing.Font) -> bool: ...
    @overload
    def Position(self, location: Drawing.PointF) -> bool: ...
    @overload
    def Render(self, graphics: Drawing.Graphics, font: Drawing.Font, colour: Drawing.Color) -> None: ...
    @Pivot.setter
    def Pivot(self, value: System.Void): ...
    @overload
    def ToExpression() -> str: ...

class GH_TextFragment(GH_EquationFragment):
    """Represents a single piece of text in an equation.

    """
    def __init__(self): ...
    @property
    def Description(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Layout(self, font: Drawing.Font) -> bool: ...
    @overload
    def Position(self, location: Drawing.PointF) -> bool: ...
    @overload
    def Render(self, graphics: Drawing.Graphics, font: Drawing.Font, colour: Drawing.Color) -> None: ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToExpression() -> str: ...

class GH_SequenceFragment(GH_EquationFragment):
    """Represents a linear sequence of fragments.

    """
    def __init__(self): ...
    @property
    def Description(self) -> str: ...
    @property
    def Fragments(self) -> Generic.List: ...
    @property
    def Name(self) -> str: ...
    @overload
    def Layout(self, font: Drawing.Font) -> bool: ...
    @overload
    def Position(self, location: Drawing.PointF) -> bool: ...
    @overload
    def Render(self, graphics: Drawing.Graphics, font: Drawing.Font, colour: Drawing.Color) -> None: ...
    @overload
    def ToExpression() -> str: ...

# endregion
