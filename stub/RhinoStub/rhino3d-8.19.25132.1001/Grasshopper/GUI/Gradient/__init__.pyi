"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_GradientChangedEventArgs", "GH_GripSide", "GH_GripType", "GH_Grip", "GH_Gradient", "GradientChangedEventHandler", "SelectionChangedEventHandler"]
# endregion

# region: Imports
from GH_IO import Serialization
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_GradientChangedEventArgs(System.EventArgs):
    """Arguments for te GradientChanged event.

    """
    def __init__(self, gradient: GH_Gradient, intermediate: bool): ...
    @property
    def Gradient(self) -> GH_Gradient: ...
    @property
    def Intermediate(self) -> bool: ...

class GH_GripSide(enum.Enum):
    Both = 0
    Left = 1
    Right = 2

class GH_GripType(enum.Enum):
    Continuous = 0
    Discontinuous = 1

class GH_Grip(object):
    """Represents a grip in a gradient. A grip defines both where and how the colour of a gradient changes.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Grip): ...
    @overload
    def __init__(self, parameter: float, colour: Drawing.Color): ...
    @overload
    def __init__(self, parameter: float, colourLeft: Drawing.Color, colourRight: Drawing.Color): ...
    @overload
    @staticmethod
    def Blend(A: Drawing.Color, B: Drawing.Color, t: float) -> Drawing.Color: ...
    @overload
    def CompareTo(self, other: GH_Grip) -> int: ...
    @property
    def ColourLeft(self) -> Drawing.Color: ...
    @property
    def ColourRight(self) -> Drawing.Color: ...
    @property
    def GripId(self) -> System.Guid: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Parameter(self) -> float: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Type(self) -> GH_GripType: ...
    @overload
    def MutateId() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @ColourLeft.setter
    def ColourLeft(self, value: System.Void): ...
    @ColourRight.setter
    def ColourRight(self, value: System.Void): ...
    @Parameter.setter
    def Parameter(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...

class GH_Gradient(object):
    """Represents a colour gradient defined by a succession of grips.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Gradient): ...
    @overload
    def __init__(self, parameters: Generic.IEnumerable, colours: Generic.IEnumerable): ...
    @overload
    def AddGrip(self, grip: GH_Grip) -> None: ...
    @overload
    def AddGrip(self, t: float) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c: Drawing.Color) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c0: Drawing.Color, c1: Drawing.Color) -> GH_Grip: ...
    @overload
    def ColourAt(self, t: float) -> Drawing.Color: ...
    @overload
    @staticmethod
    def DeleteGripRegion(destination: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def DisplayGradientEditor() -> None: ...
    @overload
    def DisplayGripColourPicker(self, grip: GH_Grip) -> None: ...
    @overload
    @staticmethod
    def EarthlyBrown() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Forest() -> GH_Gradient: ...
    @property
    def Grip(self) -> GH_Grip: ...
    @property
    def GripCount(self) -> int: ...
    @property
    def Linear(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def SelectedGrip(self) -> GH_Grip: ...
    @overload
    @staticmethod
    def GreyScale() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Heat() -> GH_Gradient: ...
    @overload
    def MouseDown(self, dest: Drawing.RectangleF, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseDragAbort() -> bool: ...
    @overload
    def MouseMove(self, dest: Drawing.RectangleF, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseUp(self, dest: Drawing.RectangleF, pt: Drawing.PointF, deselect: bool) -> bool: ...
    @overload
    def NearestGrip(self, t: float) -> int: ...
    @overload
    def NearestGrip(self, t: float, side: GH_GripSide) -> int: ...
    @overload
    def NearestGrip(self, dest: Drawing.RectangleF, pt: Drawing.PointF, maxRadius: float) -> int: ...
    @overload
    @staticmethod
    def NewGripRegion(destination: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def NormalizeGrips() -> None: ...
    @overload
    def OnGradientChanged() -> None: ...
    @overload
    def OnGradientChangedIntermediate() -> None: ...
    @overload
    def OnSelectionChanged() -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @overload
    def RemoveGrip(self, grip: GH_Grip) -> None: ...
    @overload
    def RemoveGrip(self, index: int) -> None: ...
    @overload
    def Render_Background(self, g: Drawing.Graphics, dest: Drawing.RectangleF) -> None: ...
    @overload
    def Render_Gradient(self, g: Drawing.Graphics, dest: Drawing.RectangleF) -> None: ...
    @overload
    def Render_Grips(self, g: Drawing.Graphics, dest: Drawing.RectangleF) -> None: ...
    @Grip.setter
    def Grip(self, value: System.Void): ...
    @Linear.setter
    def Linear(self, value: System.Void): ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @SelectedGrip.setter
    def SelectedGrip(self, value: System.Void): ...
    @overload
    @staticmethod
    def SoGay() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Spectrum() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Traffic() -> GH_Gradient: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @overload
    @staticmethod
    def Zebra() -> GH_Gradient: ...
    @property
    def GradientChanged(self): ...
    @property
    def SelectionChanged(self): ...

class GradientChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GradientChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_GradientChangedEventArgs) -> None: ...

class SelectionChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GradientChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_GradientChangedEventArgs) -> None: ...

# endregion
