"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_Distribute", "GH_Align", "GH_Solver"]
# endregion

# region: Imports
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_Distribute(enum.Enum):
    None_ = 0
    Vertical = 1
    Horizontal = 2

class GH_Align(enum.Enum):
    None_ = 0
    Left = 1
    Right = 2
    Top = 3
    Bottom = 4
    Vertical = 5
    Horizontal = 6

class GH_Solver(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, boxes: Generic.IEnumerable): ...
    @overload
    def AddBox(self, box: Drawing.RectangleF) -> None: ...
    @overload
    @staticmethod
    def Align_Bottom(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Align_Horizontal(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Align_Left(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Align_Right(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Align_Top(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Align_Vertical(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    def CreateAutoRegion() -> None: ...
    @overload
    @staticmethod
    def Distribute_Horizontal(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @overload
    @staticmethod
    def Distribute_Vertical(region: Drawing.RectangleF, boxes: Generic.List) -> Generic.List: ...
    @property
    def Region(self) -> Drawing.RectangleF: ...
    @overload
    def Inflate(self, x: System.Single, y: System.Single) -> None: ...
    @Region.setter
    def Region(self, value: System.Void): ...
    @overload
    def Solve(self, align: GH_Align, distribute: GH_Distribute) -> Generic.List: ...

# endregion
