"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GH_ColourCube", "GH_ColourSpace", "GH_ColourPickerEventArgs", "GH_ColourPickerBase", "GH_DigitAlign", "GH_DigitScrollerEventArgs", "GH_DigitNumber", "GH_DigitScrollerBase", "GH_ScrollBarVerticalBase", "GH_SliderAccuracy", "GH_SliderRailDisplay", "GH_SliderGripDisplay", "GH_SliderTickDisplay", "GH_SliderEventArgs", "SliderSnapRange", "GH_SliderBase", "GH_TextBoxInputBase", "InvalidatedEventHandler", "ColorChangedEventHandler", "ValueChangedEventHandler", "GH_MouseAction", "DrawSliderChannel", "TextInputHandler"]
# endregion

# region: Imports
from Grasshopper import GUI
from Grasshopper.GUI import Gradient
from Rhino import Geometry
from System import Drawing
from System.Collections import Generic
from System.Drawing import Drawing2D
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_ColourCube(object):
    """Maintains a collection of graphical shapes and coordinates that specify important features of the Colour Space Cube graphics.

    """
    def __init__(self, box: Drawing.Rectangle, space: GH_ColourSpace, color: Geometry.Point4d): ...
    @overload
    def Average(self, A: Drawing.Color, B: Drawing.Color) -> Drawing.Color: ...
    @overload
    def Average(self, A: Drawing.Color, B: Drawing.Color, C: Drawing.Color, D: Drawing.Color) -> Drawing.Color: ...
    @overload
    def Blend(self, A: Drawing.Color, B: Drawing.Color, t: float) -> Drawing.Color: ...
    @overload
    def ColorAtRail(self, pt: Drawing.PointF) -> Geometry.Point4d: ...
    @overload
    def ColorAtSlice(self, pt: Drawing.PointF) -> Geometry.Point4d: ...
    @property
    def BackFace(self) -> Drawing2D.GraphicsPath: ...
    @property
    def BottomFace(self) -> Drawing2D.GraphicsPath: ...
    @property
    def C0(self) -> Drawing.Point: ...
    @property
    def C1(self) -> Drawing.Point: ...
    @property
    def C2(self) -> Drawing.Point: ...
    @property
    def C3(self) -> Drawing.Point: ...
    @property
    def C4(self) -> Drawing.Point: ...
    @property
    def C5(self) -> Drawing.Point: ...
    @property
    def C6(self) -> Drawing.Point: ...
    @property
    def C7(self) -> Drawing.Point: ...
    @property
    def Grip(self) -> Drawing.Rectangle: ...
    @property
    def LeftFace(self) -> Drawing2D.GraphicsPath: ...
    @property
    def Pivot(self) -> Drawing.Point: ...
    @property
    def S0(self) -> Drawing.Point: ...
    @property
    def S1(self) -> Drawing.Point: ...
    @property
    def S2(self) -> Drawing.Point: ...
    @property
    def S3(self) -> Drawing.Point: ...
    @property
    def S4(self) -> Drawing.Point: ...
    @property
    def Shadow(self) -> Drawing2D.GraphicsPath: ...
    @property
    def Silhouette(self) -> Drawing2D.GraphicsPath: ...
    @property
    def Slice(self) -> Drawing.Rectangle: ...
    @overload
    def RenderAll(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderBackEdges(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderBackFaces(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderDropShadow(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderEdgeShadows(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderForeEdges(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderGrip(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderPivot(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderSilhouetteEdges(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderSlice(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderSliceDropShadow(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderSliceEdgeShadows(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderSliceSilhouetteEdges(self, G: Drawing.Graphics) -> None: ...

class GH_ColourSpace(enum.Enum):
    None_ = 0
    RGB = 1
    HSV = 2

class GH_ColourPickerEventArgs(System.EventArgs):
    """Arguments passed via GH_SliderBase.ValueChanged events.

    """
    @property
    def Colour(self) -> Drawing.Color: ...
    @property
    def ColourPicker(self) -> GH_ColourPickerBase: ...
    @property
    def Intermediate(self) -> bool: ...
    @property
    def Original(self) -> Drawing.Color: ...

class GH_ColourPickerBase(object):
    """Provides Colour picker GUI not tied to a control-handle.

    """
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColour(self) -> Drawing.Color: ...
    @property
    def BaseColour(self) -> Drawing.Color: ...
    @property
    def BaseColourBox(self) -> Drawing.Rectangle: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ChannelBox0(self) -> Drawing.Rectangle: ...
    @property
    def ChannelBox1(self) -> Drawing.Rectangle: ...
    @property
    def ChannelBox2(self) -> Drawing.Rectangle: ...
    @property
    def ChannelBox3(self) -> Drawing.Rectangle: ...
    @property
    def ColourCubeBox(self) -> Drawing.Rectangle: ...
    @property
    def ColourSpace(self) -> GH_ColourSpace: ...
    @property
    def Cube(self) -> GH_ColourCube: ...
    @property
    def DesiredHeight(self) -> int: ...
    @property
    def DrawAlphaSlider(self) -> bool: ...
    @property
    def DrawBackground(self) -> bool: ...
    @property
    def DrawChannelSliders(self) -> bool: ...
    @property
    def DropperPreviewBox(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def HSVSpaceBox(self) -> Drawing.Rectangle: ...
    @property
    def IsTextInput(self) -> bool: ...
    @property
    def Padding(self) -> Forms.Padding: ...
    @property
    def PickColour(self) -> Drawing.Color: ...
    @property
    def PickColourBox(self) -> Drawing.Rectangle: ...
    @property
    def RGBSpaceBox(self) -> Drawing.Rectangle: ...
    @property
    def SRCSpaceBox(self) -> Drawing.Rectangle: ...
    @overload
    def Invalidate() -> None: ...
    @overload
    def MouseClick(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseDoubleClick(self, args: Forms.MouseEventArgs, pt: Drawing.PointF, owner: Forms.Control, transform: Drawing2D.Matrix) -> bool: ...
    @overload
    def MouseDown(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseMove(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseUp(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def OnColorChanged(self, intermediate: bool) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RespondToEnter() -> GUI.GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape() -> GUI.GH_ToolstripItemKeyHandlerResult: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColour.setter
    def BackColour(self, value: System.Void): ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @DrawAlphaSlider.setter
    def DrawAlphaSlider(self, value: System.Void): ...
    @DrawBackground.setter
    def DrawBackground(self, value: System.Void): ...
    @DrawChannelSliders.setter
    def DrawChannelSliders(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @overload
    def SetUiScaling(self, factor: System.Single) -> None: ...
    @overload
    def SetupColourPicker(self, col0: Drawing.Color, col1: Geometry.Point4d, space: GH_ColourSpace) -> None: ...
    @overload
    def SetupColourPicker(self, col0: Drawing.Color, col1: Drawing.Color, space: GH_ColourSpace) -> None: ...
    @property
    def Invalidated(self): ...
    @property
    def ColorChanged(self): ...

class GH_DigitAlign(enum.Enum):
    Justify = 0
    Left = 1
    Center = 2
    Right = 3

class GH_DigitScrollerEventArgs(System.EventArgs):
    """Arguments passed via GH_digitScrollerBase.ValueChanged events.

    """
    @property
    def Intermediate(self) -> bool: ...
    @property
    def Scroller(self) -> GH_DigitScrollerBase: ...
    @property
    def Value(self) -> System.Decimal: ...

class GH_DigitNumber(object):
    """Maintains and provides functionality for evaluating and modifying numbers as used in the GH_DigitScrollerBase control.

    """
    @overload
    def __init__(self, decimalPlaces: int): ...
    @overload
    def __init__(self, other: GH_DigitNumber): ...
    @overload
    def __init__(self, decimalPlaces: int, radixPosition: int): ...
    @overload
    def AssignOffset(self, index: int, offset: System.Decimal) -> bool: ...
    @property
    def DigitCount(self) -> int: ...
    @property
    def Epsilon(self) -> System.Decimal: ...
    @property
    def IsPrimaryDigitSignificant(self) -> bool: ...
    @property
    def IsSecondaryDigitSignificant(self) -> bool: ...
    @property
    def Maximum(self) -> System.Decimal: ...
    @property
    def Minimum(self) -> System.Decimal: ...
    @property
    def Offset(self) -> System.Decimal: ...
    @property
    def PrimaryDigits(self) -> Generic.IList: ...
    @property
    def PrimaryPositive(self) -> bool: ...
    @property
    def Radix(self) -> int: ...
    @property
    def RadixIndex(self) -> int: ...
    @property
    def SecondaryDigits(self) -> Generic.IList: ...
    @property
    def SecondaryPositive(self) -> bool: ...
    @property
    def Value(self) -> System.Decimal: ...
    @overload
    def LimitValue() -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Round() -> None: ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @PrimaryPositive.setter
    def PrimaryPositive(self, value: System.Void): ...
    @Radix.setter
    def Radix(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class GH_DigitScrollerBase(GH_TextBoxInputBase):
    """Provides Numeric digit scrolling GUI not tied to a control-handle.

    """
    def __init__(self): ...
    @property
    def AllowRadixDrag(self) -> bool: ...
    @property
    def AllowTextInput(self) -> bool: ...
    @property
    def AmplifyMotion(self) -> bool: ...
    @property
    def BackgroundGradient(self) -> Gradient.GH_Gradient: ...
    @property
    def BottomColour(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def DigitAlign(self) -> GH_DigitAlign: ...
    @property
    def Digits(self) -> int: ...
    @property
    def DrawBackground(self) -> bool: ...
    @property
    def DrawBorder(self) -> bool: ...
    @property
    def DrawShadows(self) -> bool: ...
    @property
    def EdgeColour(self) -> Drawing.Color: ...
    @property
    def Epsilon(self) -> System.Decimal: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def MaximumValue(self) -> System.Decimal: ...
    @property
    def MinimumValue(self) -> System.Decimal: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PrefixBox(self) -> Drawing.Rectangle: ...
    @property
    def Radix(self) -> int: ...
    @property
    def RadixBox(self) -> Drawing.Rectangle: ...
    @property
    def RailColour(self) -> Drawing.Color: ...
    @property
    def RaiseEvents(self) -> bool: ...
    @property
    def ScrollBoxes(self) -> Generic.List: ...
    @property
    def ShadowColour(self) -> Drawing.Color: ...
    @property
    def ShadowSize(self) -> Forms.Padding: ...
    @property
    def SignBox(self) -> Drawing.Rectangle: ...
    @property
    def Suffix(self) -> str: ...
    @property
    def SuffixBox(self) -> Drawing.Rectangle: ...
    @property
    def TextColour(self) -> Drawing.Color: ...
    @property
    def TopColour(self) -> Drawing.Color: ...
    @property
    def Value(self) -> System.Decimal: ...
    @overload
    def MouseDown(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> GH_MouseAction: ...
    @overload
    def MouseMove(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseUp(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def OnInvalidated() -> None: ...
    @overload
    def OnValueChanged(self, intermediate: bool) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics) -> None: ...
    @AllowRadixDrag.setter
    def AllowRadixDrag(self, value: System.Void): ...
    @AllowTextInput.setter
    def AllowTextInput(self, value: System.Void): ...
    @AmplifyMotion.setter
    def AmplifyMotion(self, value: System.Void): ...
    @BackgroundGradient.setter
    def BackgroundGradient(self, value: System.Void): ...
    @BottomColour.setter
    def BottomColour(self, value: System.Void): ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: System.Void): ...
    @DigitAlign.setter
    def DigitAlign(self, value: System.Void): ...
    @Digits.setter
    def Digits(self, value: System.Void): ...
    @DrawBackground.setter
    def DrawBackground(self, value: System.Void): ...
    @DrawBorder.setter
    def DrawBorder(self, value: System.Void): ...
    @DrawShadows.setter
    def DrawShadows(self, value: System.Void): ...
    @EdgeColour.setter
    def EdgeColour(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @MaximumValue.setter
    def MaximumValue(self, value: System.Void): ...
    @MinimumValue.setter
    def MinimumValue(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @Radix.setter
    def Radix(self, value: System.Void): ...
    @RailColour.setter
    def RailColour(self, value: System.Void): ...
    @RaiseEvents.setter
    def RaiseEvents(self, value: System.Void): ...
    @ShadowColour.setter
    def ShadowColour(self, value: System.Void): ...
    @ShadowSize.setter
    def ShadowSize(self, value: System.Void): ...
    @Suffix.setter
    def Suffix(self, value: System.Void): ...
    @TextColour.setter
    def TextColour(self, value: System.Void): ...
    @TopColour.setter
    def TopColour(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def SetupScroller(self, minimum: System.Decimal, maximum: System.Decimal, value: System.Decimal) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, limitToBoundary: bool, transform: Drawing2D.Matrix) -> None: ...
    @property
    def Invalidated(self): ...
    @property
    def ValueChanged(self): ...

class GH_ScrollBarVerticalBase(object):
    """Provides basic vertical scroll bar logic.

    """
    def __init__(self): ...
    @overload
    def BeginDrag(self, region: Drawing.RectangleF, start: float) -> None: ...
    @overload
    def ContinueDrag(self, position: float) -> bool: ...
    @property
    def Content(self) -> int: ...
    @property
    def ContentOffset(self) -> float: ...
    @property
    def Display(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def OffsetNormalised(self) -> float: ...
    @overload
    def ScrollBar(self, rail: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def ScrollBar(self, rail: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @Display.setter
    def Display(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @OffsetNormalised.setter
    def OffsetNormalised(self, value: System.Void): ...

class GH_SliderAccuracy(enum.Enum):
    Float = 0
    Integer = 1
    Even = 2
    Odd = 3

class GH_SliderRailDisplay(enum.Enum):
    None_ = 0
    Simple = 1
    Etched = 2
    Filled = 3

class GH_SliderGripDisplay(enum.Enum):
    None_ = 0
    Numeric = 1
    Shape = 2
    ShapeAndText = 3

class GH_SliderTickDisplay(enum.Enum):
    None_ = 0
    Simple = 1
    Etched = 2

class GH_SliderEventArgs(System.EventArgs):
    """Arguments passed via GH_SliderBase.ValueChanged events.

    """
    @property
    def Intermediate(self) -> bool: ...
    @property
    def Slider(self) -> GH_SliderBase: ...
    @property
    def Value(self) -> System.Decimal: ...

class SliderSnapRange(System.ValueType):
    """Represents a snap range on a slider.

    """
    @overload
    def __init__(self, value: System.Decimal): ...
    @overload
    def __init__(self, value0: System.Decimal, value1: System.Decimal): ...
    @overload
    def CanMerge(self, other: SliderSnapRange) -> bool: ...
    @overload
    def CompareTo(self, other: SliderSnapRange) -> int: ...
    @overload
    def DistanceTo(self, value: System.Decimal) -> System.Decimal: ...
    @property
    def IsSingleton(self) -> bool: ...
    @property
    def Max(self) -> System.Decimal: ...
    @property
    def Min(self) -> System.Decimal: ...
    @overload
    def Merge(self, other: SliderSnapRange) -> SliderSnapRange: ...
    @overload
    def SnapValue(self, value: System.Decimal) -> System.Decimal: ...

class GH_SliderBase(GH_TextBoxInputBase):
    """Provides Numeric slider GUI not tied to a control-handle.

    """
    def __init__(self): ...
    @overload
    def FixDomain() -> None: ...
    @overload
    def FixValue() -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ControlBackColour(self) -> Drawing.Color: ...
    @property
    def ControlEdgeColour(self) -> Drawing.Color: ...
    @property
    def ControlShadowColour(self) -> Drawing.Color: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def DrawControlBackground(self) -> bool: ...
    @property
    def DrawControlBorder(self) -> bool: ...
    @property
    def DrawControlShadows(self) -> bool: ...
    @property
    def Epsilon(self) -> System.Decimal: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def FormatMask(self) -> str: ...
    @property
    def Grip(self) -> Drawing.RectangleF: ...
    @property
    def GripBottomColour(self) -> Drawing.Color: ...
    @property
    def GripDisplay(self) -> GH_SliderGripDisplay: ...
    @property
    def GripEdgeColour(self) -> Drawing.Color: ...
    @property
    def GripText(self) -> str: ...
    @property
    def GripTextPure(self) -> str: ...
    @property
    def GripTopColour(self) -> Drawing.Color: ...
    @property
    def GripWidth(self) -> int: ...
    @property
    def Maximum(self) -> System.Decimal: ...
    @property
    def Minimum(self) -> System.Decimal: ...
    @property
    def NormalizedValue(self) -> float: ...
    @property
    def Padding(self) -> Forms.Padding: ...
    @property
    def Rail(self) -> Drawing.Rectangle: ...
    @property
    def RailBrightColour(self) -> Drawing.Color: ...
    @property
    def RailDarkColour(self) -> Drawing.Color: ...
    @property
    def RailDisplay(self) -> GH_SliderRailDisplay: ...
    @property
    def RailEmptyColour(self) -> Drawing.Color: ...
    @property
    def RailFullColour(self) -> Drawing.Color: ...
    @property
    def RaiseEvents(self) -> bool: ...
    @property
    def RenderDelegate_Background(self) -> DrawSliderChannel: ...
    @property
    def RenderDelegate_Border(self) -> DrawSliderChannel: ...
    @property
    def RenderDelegate_Grip(self) -> DrawSliderChannel: ...
    @property
    def RenderDelegate_Rail(self) -> DrawSliderChannel: ...
    @property
    def RenderDelegate_Ticks(self) -> DrawSliderChannel: ...
    @property
    def ShadowSize(self) -> Forms.Padding: ...
    @property
    def SnapDistance(self) -> System.Decimal: ...
    @property
    def TextColour(self) -> Drawing.Color: ...
    @property
    def TextInputHandlerDelegate(self) -> TextInputHandler: ...
    @property
    def TickCount(self) -> int: ...
    @property
    def TickDisplay(self) -> GH_SliderTickDisplay: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Ticks(self) -> Generic.List: ...
    @property
    def Type(self) -> GH_SliderAccuracy: ...
    @property
    def Value(self) -> System.Decimal: ...
    @property
    def ValueF(self) -> System.Single: ...
    @overload
    def KeyDown(self, args: Forms.KeyEventArgs) -> bool: ...
    @overload
    def MouseDown(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseMove(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def MouseUp(self, args: Forms.MouseEventArgs, pt: Drawing.PointF) -> bool: ...
    @overload
    def OnValueChanged(self, intermediate: bool) -> None: ...
    @overload
    @staticmethod
    def ProcessNumber(val: System.Decimal, accuracy: GH_SliderAccuracy, digits: int) -> System.Decimal: ...
    @overload
    def Render(self, G: Drawing.Graphics) -> None: ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @ControlBackColour.setter
    def ControlBackColour(self, value: System.Void): ...
    @ControlEdgeColour.setter
    def ControlEdgeColour(self, value: System.Void): ...
    @ControlShadowColour.setter
    def ControlShadowColour(self, value: System.Void): ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: System.Void): ...
    @DrawControlBackground.setter
    def DrawControlBackground(self, value: System.Void): ...
    @DrawControlBorder.setter
    def DrawControlBorder(self, value: System.Void): ...
    @DrawControlShadows.setter
    def DrawControlShadows(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @FormatMask.setter
    def FormatMask(self, value: System.Void): ...
    @GripBottomColour.setter
    def GripBottomColour(self, value: System.Void): ...
    @GripDisplay.setter
    def GripDisplay(self, value: System.Void): ...
    @GripEdgeColour.setter
    def GripEdgeColour(self, value: System.Void): ...
    @GripTopColour.setter
    def GripTopColour(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @NormalizedValue.setter
    def NormalizedValue(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RailBrightColour.setter
    def RailBrightColour(self, value: System.Void): ...
    @RailDarkColour.setter
    def RailDarkColour(self, value: System.Void): ...
    @RailDisplay.setter
    def RailDisplay(self, value: System.Void): ...
    @RailEmptyColour.setter
    def RailEmptyColour(self, value: System.Void): ...
    @RailFullColour.setter
    def RailFullColour(self, value: System.Void): ...
    @RaiseEvents.setter
    def RaiseEvents(self, value: System.Void): ...
    @RenderDelegate_Background.setter
    def RenderDelegate_Background(self, value: System.Void): ...
    @RenderDelegate_Border.setter
    def RenderDelegate_Border(self, value: System.Void): ...
    @RenderDelegate_Grip.setter
    def RenderDelegate_Grip(self, value: System.Void): ...
    @RenderDelegate_Rail.setter
    def RenderDelegate_Rail(self, value: System.Void): ...
    @RenderDelegate_Ticks.setter
    def RenderDelegate_Ticks(self, value: System.Void): ...
    @ShadowSize.setter
    def ShadowSize(self, value: System.Void): ...
    @SnapDistance.setter
    def SnapDistance(self, value: System.Void): ...
    @TextColour.setter
    def TextColour(self, value: System.Void): ...
    @TextInputHandlerDelegate.setter
    def TextInputHandlerDelegate(self, value: System.Void): ...
    @TickCount.setter
    def TickCount(self, value: System.Void): ...
    @TickDisplay.setter
    def TickDisplay(self, value: System.Void): ...
    @TickFrequency.setter
    def TickFrequency(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @ValueF.setter
    def ValueF(self, value: System.Void): ...
    @overload
    def SetSnapRanges(self, ranges: Generic.IEnumerable) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, limitToBoundary: bool, transform: Drawing2D.Matrix) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, limitToBoundary: bool, transform: Drawing2D.Matrix, content: str) -> None: ...
    @property
    def ValueChanged(self): ...

class GH_TextBoxInputBase(object):
    """    """
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def IsTextInput(self) -> bool: ...
    @overload
    def HideTextInputBox() -> None: ...
    @overload
    def RespondToEnter() -> GUI.GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape() -> GUI.GH_ToolstripItemKeyHandlerResult: ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, content: str, selectContent: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, content: str, selectContent: bool, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Forms.Control, content: str, selectContent: bool, limitToBoundary: bool, transform: Drawing2D.Matrix) -> None: ...

class InvalidatedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: System.EventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: System.EventArgs) -> None: ...

class ColorChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ColourPickerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_ColourPickerEventArgs) -> None: ...

class InvalidatedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: System.EventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: System.EventArgs) -> None: ...

class ValueChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DigitScrollerEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_DigitScrollerEventArgs) -> None: ...

class GH_MouseAction(enum.Enum):
    None_ = 0
    SignDown = 1
    DigitDown = 2
    DigitDrag = 3
    RadixDown = 4
    RadixDrag = 5

class DrawSliderChannel(System.MulticastDelegate):
    """This delegate is used to intervene in the slider drawing process.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, slider: GH_SliderBase, G: Drawing.Graphics, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, slider: GH_SliderBase, G: Drawing.Graphics) -> None: ...

class ValueChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SliderEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_SliderEventArgs) -> None: ...

class TextInputHandler(System.MulticastDelegate):
    """Delegate used during Text Input handling.

    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, slider: GH_SliderBase, text: str, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, slider: GH_SliderBase, text: str) -> None: ...

# endregion
