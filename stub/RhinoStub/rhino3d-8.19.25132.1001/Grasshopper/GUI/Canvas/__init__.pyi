"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Interaction", "TagArtists", "GH_BorderTopology", "GH_Border", "GH_ResizeBorder", "GH_Canvas", "GH_CanvasDocumentChangedEventArgs", "GH_CanvasMode", "GH_ObjectResponse", "IGH_ResponsiveObject", "GH_CanvasNavigation", "IGH_CanvasValidator", "GH_CanvasValidator", "GH_CanvasDropTargetValidator", "GH_CanvasWireValidator", "GH_CanvasViewportChangedEventArgs", "GH_CanvasWidgetListEventArgs", "GH_Orientation", "GH_Capsule", "GH_CapsuleRenderEngine", "GH_DocDiagramPainter", "GH_DragDropFileAction", "GH_FilePanel", "GH_NamedViewType", "GH_NamedView", "GH_NavigationPaneDialog", "GH_CanvasChannel", "GH_WireType", "GH_WireDirection", "GH_Painter", "GH_Palette", "GH_PaletteStyle", "GH_Skin", "GH_PopupSearchDialog", "IGH_TooltipAwareObject", "GH_Viewport", "GH_NamedViewEditor", "ViewportChangedEventHandler", "ModifiersChangedEventHandler", "WidgetListCreatedEventHandler", "DocumentObjectMouseDownEventHandler", "DocumentChangedEventHandler", "Document_SettingsChangedEventHandler", "Document_ModifiedChangedEventHandler", "Document_ObjectsAddedEventHandler", "DocumentObjectsDeletedEventHandler", "Document_ObjectsDeletedEventHandler", "NavigationSettingsChangedEventHandler", "CanvasPaintBeginEventHandler", "CanvasPaintBackgroundEventHandler", "CanvasPrePaintGroupsEventHandler", "CanvasPostPaintGroupsEventHandler", "CanvasPrePaintWiresEventHandler", "CanvasPostPaintWiresEventHandler", "CanvasPrePaintObjectsEventHandler", "CanvasPostPaintObjectsEventHandler", "CanvasPrePaintOverlayEventHandler", "CanvasPostPaintOverlayEventHandler", "CanvasPrePaintWidgetsEventHandler", "CanvasPostPaintWidgetsEventHandler", "CanvasPaintEndEventHandler", "GH_ImageSettings", "SmoothFrameEventHandler", "GH_DisplayMatrix", "NamedViewChangedEventHandler"]
# endregion

# region: Imports
from GH_IO import Serialization
from Grasshopper import GUI
from Grasshopper import Kernel
from Grasshopper.GUI import Widgets
from Grasshopper.GUI.Canvas import Interaction
from Grasshopper.GUI.Canvas import TagArtists
from Grasshopper.Kernel import Data
from System import Drawing
from System.Collections import Generic
from System.Drawing import Drawing2D
from System.Runtime import CompilerServices
from System.Windows import Forms
from typing import overload
import enum
import GH_Util
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class GH_BorderTopology(enum.Enum):
    TopRight = 0
    TopLeft = 1
    BottomLeft = 2
    BottomRight = 3
    Top = 4
    Left = 5
    Bottom = 6
    Right = 7
    None_ = -2
    All = -1

class GH_Border(object):
    """Represents a resizing border of a Grasshopper canvas object.

    """
    def __init__(self, rectangle: Drawing.RectangleF, topology: GH_BorderTopology): ...
    @overload
    def Contains(self, pt: Drawing.PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateBorders(box: Drawing.RectangleF, borderSize: int) -> Generic.List: ...
    @overload
    @staticmethod
    def CreateBorders(box: Drawing.RectangleF, padding: Forms.Padding) -> Generic.List: ...
    @overload
    @staticmethod
    def CreateBorders(box: Drawing.RectangleF, borderWidth: int, borderHeight: int) -> Generic.List: ...
    @overload
    @staticmethod
    def CreateBorders(box: Drawing.RectangleF, borderLeft: int, borderRight: int, borderTop: int, borderBottom: int) -> Generic.List: ...
    @property
    def Region(self) -> Drawing.RectangleF: ...
    @property
    def Size_Cursor(self) -> Forms.Cursor: ...
    @property
    def Topology(self) -> GH_BorderTopology: ...

class GH_ResizeBorder(GH_Border):
    """
    """
    @overload
    def __init__(self, borders: GH_Border): ...
    @overload
    def __init__(self, region: Drawing.RectangleF, topology: GH_BorderTopology): ...
    @property
    def Anchor(self) -> Drawing.PointF: ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @overload
    def Setup(self, att: Kernel.IGH_Attributes, MouseCursor: Drawing.PointF) -> None: ...
    @overload
    def Setup(self, att: Kernel.IGH_Attributes, MouseCursor: Drawing.PointF, MinSize: Drawing.SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: Drawing.RectangleF, ShapePivot: Drawing.PointF, MouseCursor: Drawing.PointF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: Drawing.RectangleF, ShapePivot: Drawing.PointF, MouseCursor: Drawing.PointF, MinSize: Drawing.SizeF) -> None: ...
    @overload
    def Setup(self, att: Kernel.IGH_Attributes, MouseCursor: Drawing.PointF, MinSize: Drawing.SizeF, MaxSize: Drawing.SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: Drawing.RectangleF, ShapePivot: Drawing.PointF, MouseCursor: Drawing.PointF, MinSize: Drawing.SizeF, MaxSize: Drawing.SizeF) -> None: ...
    @overload
    def Solve(self, nCursor: Drawing.PointF) -> (Drawing.RectangleF, Drawing.PointF): ...

class GH_Canvas(Forms.Control):
    """The GH_Canvas is the control that handles all mouse and paint events for a single loaded document.

    """
    def __init__(self): ...
    @property
    def ThumbnailWidth(self) -> int: ...
    @property
    def ThumbnailHeight(self) -> int: ...
    @property
    def ScheduleInactive(self) -> int: ...
    @overload
    def AddTagArtist(self, artist: TagArtists.IGH_TagArtist) -> None: ...
    @overload
    def AddValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def AutoSaveDocument(self, trigger: Kernel.GH_AutoSaveTrigger) -> None: ...
    @overload
    def CanvasOldSchoolMenu() -> Forms.ToolStripDropDownMenu: ...
    @overload
    def CreateMRUPanels() -> None: ...
    @overload
    def CreatePreview(self, size: Drawing.Size) -> Drawing.Bitmap: ...
    @overload
    def DestroyMRUPanels() -> None: ...
    @overload
    def GenerateHiResImage(self, rec: Drawing.Rectangle, settings: GH_ImageSettings) -> (Generic.List, Drawing.Size): ...
    @overload
    def GenerateHiResImageTile(self, vp: GH_Viewport, bg: Drawing.Color) -> Drawing.Bitmap: ...
    @property
    def ActiveInteraction(self) -> Interaction.IGH_MouseInteraction: ...
    @property
    def ActiveObject(self) -> Kernel.IGH_DocumentObject: ...
    @property
    def ActiveWidget(self) -> Widgets.IGH_Widget: ...
    @property
    def CursorCanvasPosition(self) -> Drawing.PointF: ...
    @property
    def CursorControlPosition(self) -> Drawing.Point: ...
    @property
    def DisplayVoronoiWarning(self) -> bool: ...
    @property
    def Document(self) -> Kernel.GH_Document: ...
    @property
    def DrawingMode(self) -> GH_CanvasMode: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def HasControlWithFocus(self) -> bool: ...
    @property
    def IsActiveInteraction(self) -> bool: ...
    @property
    def IsActiveObject(self) -> bool: ...
    @property
    def IsActiveWidget(self) -> bool: ...
    @property
    def IsDocument(self) -> bool: ...
    @property
    def MarkovSuggestions(self) -> Generic.List: ...
    @property
    def ModifiersEnabled(self) -> bool: ...
    @property
    def NavigationPanDown(self) -> Forms.Keys: ...
    @property
    def NavigationPanLeft(self) -> Forms.Keys: ...
    @property
    def NavigationPanPixels(self) -> int: ...
    @property
    def NavigationPanRight(self) -> Forms.Keys: ...
    @property
    def NavigationPanUp(self) -> Forms.Keys: ...
    @property
    def NavigationZoomFactor(self) -> float: ...
    @property
    def NavigationZoomIn(self) -> Forms.Keys: ...
    @property
    def NavigationZoomOut(self) -> Forms.Keys: ...
    @property
    def Painter(self) -> GH_Painter: ...
    @property
    def Painting(self) -> bool: ...
    @property
    def RecordPreviewBoundary(self) -> bool: ...
    @property
    def TagArtistIDs(self) -> Generic.List: ...
    @property
    def ThumbnailSize(self) -> Drawing.Size: ...
    @property
    def TooltipDelay(self) -> int: ...
    @property
    def Validator(self) -> IGH_CanvasValidator: ...
    @property
    def ValidGraphics(self) -> bool: ...
    @property
    def Viewport(self) -> GH_Viewport: ...
    @property
    def Widgets(self) -> Generic.List: ...
    @property
    def ZoomFadeHigh(self) -> int: ...
    @property
    def ZoomFadeLow(self) -> int: ...
    @property
    def ZoomFadeMedium(self) -> int: ...
    @overload
    def GetCanvasScreenBuffer(self, modeOverride: GH_CanvasMode) -> Drawing.Bitmap: ...
    @overload
    def GetGraphicsObject(self, setupDisplayTransform: bool) -> Drawing.Graphics: ...
    @overload
    def HideMRUPanels() -> None: ...
    @overload
    def InstantiateNewObject(self, id_: System.Guid, at: Drawing.PointF, update: bool) -> bool: ...
    @overload
    def InstantiateNewObject(self, id_: System.Guid, init_code: str, at: Drawing.PointF, update: bool) -> bool: ...
    @overload
    def Navigate(self, navigation: GH_CanvasNavigation) -> None: ...
    @overload
    def OnViewportChanged() -> None: ...
    @overload
    def ReevaluateMarkovSuggestions() -> None: ...
    @overload
    def RemoveAllTagArtists() -> None: ...
    @overload
    def RemoveTagArtist(self, artist: TagArtists.IGH_TagArtist) -> int: ...
    @overload
    def RemoveTagArtist(self, artistId: System.Guid) -> int: ...
    @overload
    def RemoveValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def ScheduleRegen(self, delay: int) -> None: ...
    @ActiveInteraction.setter
    def ActiveInteraction(self, value: System.Void): ...
    @ActiveObject.setter
    def ActiveObject(self, value: System.Void): ...
    @ActiveWidget.setter
    def ActiveWidget(self, value: System.Void): ...
    @DisplayVoronoiWarning.setter
    def DisplayVoronoiWarning(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @ModifiersEnabled.setter
    def ModifiersEnabled(self, value: System.Void): ...
    @NavigationPanDown.setter
    def NavigationPanDown(self, value: System.Void): ...
    @NavigationPanLeft.setter
    def NavigationPanLeft(self, value: System.Void): ...
    @NavigationPanPixels.setter
    def NavigationPanPixels(self, value: System.Void): ...
    @NavigationPanRight.setter
    def NavigationPanRight(self, value: System.Void): ...
    @NavigationPanUp.setter
    def NavigationPanUp(self, value: System.Void): ...
    @NavigationZoomFactor.setter
    def NavigationZoomFactor(self, value: System.Void): ...
    @NavigationZoomIn.setter
    def NavigationZoomIn(self, value: System.Void): ...
    @NavigationZoomOut.setter
    def NavigationZoomOut(self, value: System.Void): ...
    @RecordPreviewBoundary.setter
    def RecordPreviewBoundary(self, value: System.Void): ...
    @ValidGraphics.setter
    def ValidGraphics(self, value: System.Void): ...
    @overload
    def SetSmartTextRenderingHint() -> None: ...
    @overload
    def ShowComponentSearchBox() -> bool: ...
    @overload
    def ShowComponentSearchBox(self, at: Drawing.Point) -> bool: ...
    @overload
    def ShowMRUPanels() -> None: ...
    @overload
    def ShowNavigationPane() -> None: ...
    @overload
    def ShowSearchDialog(self, centerOnCursor: bool) -> None: ...
    @overload
    def StartAutoPan() -> None: ...
    @overload
    def StopAutoPan() -> None: ...
    @overload
    def UpdateDocumentPreview() -> None: ...
    @property
    def ViewportChanged(self): ...
    @property
    def ModifiersChanged(self): ...
    @property
    def WidgetListCreated(self): ...
    @property
    def DocumentObjectMouseDown(self): ...
    @property
    def DocumentChanged(self): ...
    @property
    def Document_SettingsChanged(self): ...
    @property
    def Document_ModifiedChanged(self): ...
    @property
    def Document_ObjectsAdded(self): ...
    @property
    def DocumentObjectsDeleted(self): ...
    @property
    def Document_ObjectsDeleted(self): ...
    @property
    def NavigationSettingsChanged(self): ...
    @property
    def CanvasPaintBegin(self): ...
    @property
    def CanvasPaintBackground(self): ...
    @property
    def CanvasPrePaintGroups(self): ...
    @property
    def CanvasPostPaintGroups(self): ...
    @property
    def CanvasPrePaintWires(self): ...
    @property
    def CanvasPostPaintWires(self): ...
    @property
    def CanvasPrePaintObjects(self): ...
    @property
    def CanvasPostPaintObjects(self): ...
    @property
    def CanvasPrePaintOverlay(self): ...
    @property
    def CanvasPostPaintOverlay(self): ...
    @property
    def CanvasPrePaintWidgets(self): ...
    @property
    def CanvasPostPaintWidgets(self): ...
    @property
    def CanvasPaintEnd(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class GH_CanvasDocumentChangedEventArgs(System.EventArgs):
    """These arguments are used in the DocumentChanged event on GH_Canvas.

    """
    def __init__(self, newDoc: Kernel.GH_Document, oldDoc: Kernel.GH_Document): ...
    @property
    def NewDocument(self) -> Kernel.GH_Document: ...
    @property
    def OldDocument(self) -> Kernel.GH_Document: ...

class GH_CanvasMode(enum.Enum):
    Control = 0
    Thumbnail = 1
    Export = 2

class GH_ObjectResponse(enum.Enum):
    Ignore = 0
    Capture = 1
    Release = 2
    Handled = 3

class IGH_ResponsiveObject:
    """If you wish to participate in Canvas UI events, you must implement this interface.

    """
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: Forms.KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: Forms.KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GUI.GH_CanvasMouseEvent) -> GH_ObjectResponse: ...

class GH_CanvasNavigation(enum.Enum):
    None_ = 0
    PanLeft = 1
    PanRight = 2
    PanUp = 3
    PanDown = 4
    ZoomIn = 5
    ZoomOut = 6

class IGH_CanvasValidator:
    """'Interface used for limiting a collection of typical actions on the canvas. Do not implement this interface directly if you can help it, instead inherit from GH_CanvasValidator.

    """
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id_: System.Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id_: System.Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id_: System.Guid, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object_: Kernel.IGH_DocumentObject, dragFromPoint: Drawing.PointF) -> bool: ...
    @overload
    def CanNavigateCanvas() -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...

class GH_CanvasValidator(object):
    """Abstract implementation of IGH_CanvasValidator. Inherit from this class rather than implementing IGH_CanvasValidator from scratch.

    """
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id_: System.Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id_: System.Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id_: System.Guid, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object_: Kernel.IGH_DocumentObject, dragFromPoint: Drawing.PointF) -> bool: ...
    @overload
    def CanNavigateCanvas() -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...

class GH_CanvasDropTargetValidator(GH_CanvasValidator):
    """Utility validator for restricting component creation.

    """
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id_: System.Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id_: System.Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id_: System.Guid, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanDeleteObject(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def CanDragObject(self, object_: Kernel.IGH_DocumentObject, dragFromPoint: Drawing.PointF) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: Drawing.PointF) -> bool: ...
    @property
    def DropDelegate(self) -> System.Action: ...
    @property
    def DropID(self) -> System.Guid: ...
    @property
    def DropRegion(self) -> Drawing.RectangleF: ...
    @property
    def DropText(self) -> str: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @DropDelegate.setter
    def DropDelegate(self, value: System.Void): ...
    @DropID.setter
    def DropID(self, value: System.Void): ...
    @DropRegion.setter
    def DropRegion(self, value: System.Void): ...
    @DropText.setter
    def DropText(self, value: System.Void): ...

class GH_CanvasWireValidator(GH_CanvasValidator):
    """Utility validator for restricting wire creation.

    """
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id_: System.Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id_: System.Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id_: System.Guid, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object_: Kernel.IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: Kernel.IGH_Param, target: Kernel.IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object_: Kernel.IGH_DocumentObject, dragFromPoint: Drawing.PointF) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: Drawing.PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: Drawing.PointF) -> bool: ...
    @property
    def WireDelegate(self) -> System.Action: ...
    @property
    def WireMotionText(self) -> str: ...
    @property
    def WireSource(self) -> System.Guid: ...
    @property
    def WireSourceText(self) -> str: ...
    @property
    def WireTarget(self) -> System.Guid: ...
    @property
    def WireTargetText(self) -> str: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @WireDelegate.setter
    def WireDelegate(self, value: System.Void): ...
    @WireMotionText.setter
    def WireMotionText(self, value: System.Void): ...
    @WireSource.setter
    def WireSource(self, value: System.Void): ...
    @WireSourceText.setter
    def WireSourceText(self, value: System.Void): ...
    @WireTarget.setter
    def WireTarget(self, value: System.Void): ...
    @WireTargetText.setter
    def WireTargetText(self, value: System.Void): ...

class GH_CanvasViewportChangedEventArgs(System.EventArgs):
    """These arguments are used in the ViewportChanged event on GH_Canvas.

    """
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Viewport(self) -> GH_Viewport: ...

class GH_CanvasWidgetListEventArgs(System.EventArgs):
    """The event arguments are used in the WidgetListCreated event.

    """
    @overload
    def AddWidget(self, widget: Widgets.IGH_Widget) -> None: ...

class GH_Orientation(enum.Enum):
    horizontal_center = 0
    horizontal_near = 1
    horizontal_far = 2
    vertical_center = 10
    vertical_near = 11
    vertical_far = 12

class GH_Capsule(object):
    """Class used to draw standard Grasshopper interface boxes.

    """
    @property
    def DefaultHighlight(self) -> int: ...
    @property
    def DefaultRadius(self) -> int: ...
    @overload
    def AddInputGrip(self, P: Drawing.PointF) -> None: ...
    @overload
    def AddInputGrip(self, Y: System.Single) -> None: ...
    @overload
    def AddInputGrip(self, P: Drawing.Point) -> None: ...
    @overload
    def AddInputGrip(self, X: System.Single, Y: System.Single) -> None: ...
    @overload
    def AddOutputGrip(self, Y: System.Single) -> None: ...
    @overload
    def AddOutputGrip(self, P: Drawing.Point) -> None: ...
    @overload
    def AddOutputGrip(self, P: Drawing.PointF) -> None: ...
    @overload
    def AddOutputGrip(self, X: System.Single, Y: System.Single) -> None: ...
    @overload
    def Contains(self, pt: Drawing.PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.Rectangle, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.RectangleF, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.Rectangle, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.Rectangle, palette: GH_Palette, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.RectangleF, palette: GH_Palette, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Drawing.RectangleF, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.RectangleF, textbox: Drawing.RectangleF, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation, radii: System.System.Array[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Drawing.Rectangle, textbox: Drawing.Rectangle, palette: GH_Palette, text: str, font: Drawing.Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Box(self) -> Drawing.Rectangle: ...
    @property
    def Box_Content(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Highlight(self) -> int: ...
    @property
    def HighlightShape(self) -> Drawing2D.GraphicsPath: ...
    @property
    def InputGrips(self) -> Generic.List: ...
    @property
    def JaggedLeft(self) -> bool: ...
    @property
    def JaggedRight(self) -> bool: ...
    @property
    def MaxRadius(self) -> int: ...
    @property
    def OutlineShape(self) -> Drawing2D.GraphicsPath: ...
    @property
    def OutputGrips(self) -> Generic.List: ...
    @property
    def Palette(self) -> GH_Palette: ...
    @property
    def Radius(self) -> int: ...
    @property
    def RenderEngine(self) -> GH_CapsuleRenderEngine: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextOrientation(self) -> GH_Orientation: ...
    @overload
    def Render(self, G: Drawing.Graphics, colour: Drawing.Color) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, icon: Drawing.Image, colour: Drawing.Color) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, icon: Drawing.Image, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, selected: bool, locked: bool, hidden: bool) -> None: ...
    @overload
    def Render(self, G: Drawing.Graphics, icon: Drawing.Image, selected: bool, locked: bool, hidden: bool) -> None: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Palette.setter
    def Palette(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextOrientation.setter
    def TextOrientation(self, value: System.Void): ...
    @overload
    def SetJaggedEdges(self, left: bool, right: bool) -> None: ...

class GH_CapsuleRenderEngine(object):
    """Provides basic Render methods for capsule display. You typically don't need this class, just use the Render() overloads on GH_Capsule directly.

    """
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Drawing.Rectangle, radius: int, size: int) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Drawing.Rectangle, R0: int, R1: int, size: int) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Drawing.Rectangle, radius: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Drawing.Rectangle, R0: int, R1: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateJaggedRectangle(rec: Drawing.RectangleF, R0: System.Single, R1: System.Single, R2: System.Single, R3: System.Single, jaggedLeft: bool, jaggedRight: bool) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Drawing.RectangleF, radius: System.Single) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Drawing.Rectangle, radius: int) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Drawing.RectangleF, R0: System.Single, R1: System.Single, R2: System.Single, R3: System.Single) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Drawing.Rectangle, R0: int, R1: int, R2: int, R3: int) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def GetImpliedPalette(obj: Kernel.IGH_ActiveObject) -> GH_Palette: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, attributes: Kernel.IGH_Attributes) -> GH_PaletteStyle: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, selected: bool, locked: bool, hidden: bool) -> GH_PaletteStyle: ...
    @overload
    def RenderAlphaFill(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderBackground_Alternative(self, G: Drawing.Graphics, colourOverride: Drawing.Color, drawAlphaGrid: bool) -> None: ...
    @overload
    def RenderBackground(self, G: Drawing.Graphics, zoom: System.Single, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderBoundaryDots(self, G: Drawing.Graphics, count: int, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderGrips_Alternative(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderGrips(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderHighlight(self, G: Drawing.Graphics) -> None: ...
    @overload
    def RenderIcon(self, G: Drawing.Graphics, icon: Drawing.Image, offsetX: int, offsetY: int) -> None: ...
    @overload
    def RenderIcon(self, G: Drawing.Graphics, icon: Drawing.Image, box: Drawing.RectangleF, offsetX: int, offsetY: int) -> None: ...
    @overload
    @staticmethod
    def RenderInputGrip(G: Drawing.Graphics, zoom: System.Single, loc: Drawing.PointF, full: bool) -> None: ...
    @overload
    def RenderMessage(self, G: Drawing.Graphics, message: str, style: GH_PaletteStyle) -> Drawing.Rectangle: ...
    @overload
    def RenderOutlines(self, G: Drawing.Graphics, zoom: System.Single, style: GH_PaletteStyle) -> None: ...
    @overload
    @staticmethod
    def RenderOutputGrip(G: Drawing.Graphics, zoom: System.Single, loc: Drawing.PointF, full: bool) -> None: ...
    @overload
    def RenderText(self, G: Drawing.Graphics, colour: Drawing.Color) -> None: ...

class GH_DocDiagramPainter(object):
    """This class paints diagrammatic images of a collection of objects.

    """
    def __init__(self): ...
    @property
    def BoundingBox(self) -> Drawing.RectangleF: ...
    @property
    def DrawingBox(self) -> Drawing.Rectangle: ...
    @property
    def IgnoreSelectedStates(self) -> bool: ...
    @property
    def Image(self) -> Drawing.Bitmap: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Zoom(self) -> System.Single: ...
    @overload
    def MapPoint(self, pt: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def MapPoint(self, pt: Drawing.Point) -> Drawing.Point: ...
    @overload
    def MapRectangle(self, rec: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def MapX(self, x: System.Single) -> System.Single: ...
    @overload
    def MapX(self, x: int) -> int: ...
    @overload
    def MapY(self, y: int) -> int: ...
    @overload
    def MapY(self, y: System.Single) -> System.Single: ...
    @overload
    def PaintDiagram(self, objs: Generic.IEnumerable, approx_size: int, inflate: int) -> bool: ...
    @overload
    def PaintDiagram(self, objs: Generic.IEnumerable, mapWidth: int, mapHeight: int, inflate: int) -> bool: ...
    @IgnoreSelectedStates.setter
    def IgnoreSelectedStates(self, value: System.Void): ...
    @overload
    def UnmapPoint(self, pt: Drawing.Point) -> Drawing.Point: ...
    @overload
    def UnmapRectangle(self, rec: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def UnmapX(self, x: int) -> int: ...
    @overload
    def UnmapY(self, y: int) -> int: ...

class GH_DragDropFileAction(enum.Enum):
    None_ = 0
    Open = 1
    Examine = 2
    Insert = 3
    Group = 4
    Cluster = 5

class GH_FilePanel(object):
    """A panel on the canvas that allows for recent files to be loaded.

    """
    @property
    def PanelPadding(self) -> int: ...
    @property
    def PanelWidth(self) -> int: ...
    @property
    def PanelHeight(self) -> int: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ClientBounds(self) -> Drawing.Rectangle: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def DisplayDate(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Hover(self) -> bool: ...
    @property
    def ImageBounds(self) -> Drawing.Rectangle: ...
    @property
    def IsAnimating(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def TargetDate(self) -> System.DateTime: ...
    @property
    def TargetFile(self) -> str: ...
    @property
    def TargetThumbnail(self) -> Drawing.Bitmap: ...
    @property
    def TextBounds(self) -> Drawing.Rectangle: ...
    @overload
    def MouseEnter() -> None: ...
    @overload
    def MouseLeave() -> None: ...
    @overload
    @staticmethod
    def NewPanel(targetFile: str, targetDate: System.DateTime) -> GH_FilePanel: ...
    @overload
    def RenderPanel(self, graphics: Drawing.Graphics) -> None: ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @Hover.setter
    def Hover(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @TargetDate.setter
    def TargetDate(self, value: System.Void): ...
    @TargetFile.setter
    def TargetFile(self, value: System.Void): ...
    @TargetThumbnail.setter
    def TargetThumbnail(self, value: System.Void): ...
    @overload
    def SetNewLocation(self, point: Drawing.Point, start: int, duration: int) -> None: ...
    @overload
    def TargetFileChanged(self, watcher: GUI.GH_AsynchFileData) -> None: ...

class GH_NamedViewType(enum.Enum):
    target = 0
    center = 1

class GH_NamedView(object):
    """Named views are used both to store named views but also to allow smooth programmatic canvas navigation.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, view_box: Drawing.Rectangle, target_box: Drawing.RectangleF): ...
    @overload
    def __init__(self, view: GH_Viewport, region: Drawing.Rectangle, target: Drawing.PointF): ...
    @overload
    def __init__(self, view: GH_Viewport, point: Drawing.Point, target: Drawing.PointF): ...
    @overload
    def __init__(self, view_name: str, view_point: Drawing.PointF, view_zoom: System.Single, view_type: GH_NamedViewType): ...
    @property
    def Name(self) -> str: ...
    @property
    def Point(self) -> Drawing.PointF: ...
    @property
    def Type(self) -> GH_NamedViewType: ...
    @property
    def Zoom(self) -> System.Single: ...
    @overload
    def LoadFromViewport(self, vp: GH_Viewport, view_type: GH_NamedViewType) -> None: ...
    @overload
    def Read(self, reader: Serialization.GH_IReader) -> bool: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Point.setter
    def Point(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @overload
    def SetToViewport(self, vp: GH_Viewport) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas, length: int) -> None: ...
    @overload
    def Write(self, writer: Serialization.GH_IWriter) -> bool: ...
    @property
    def SmoothFrame(self): ...

class GH_NavigationPaneDialog(Forms.Form):
    """    """
    def __init__(self): ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Pane(self) -> GH_DocDiagramPainter: ...
    @Canvas.setter
    def Canvas(self, value: System.Void): ...
    @Pane.setter
    def Pane(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class GH_CanvasChannel(enum.Enum):
    First = 0
    Groups = 0
    Wires = 10
    Objects = 20
    Overlay = 30
    Last = 30

class GH_WireType(enum.Enum):
    dynamic = 0
    wireless = 1
    generic = 2
    faint = 3
    null = 4
    item = 5
    list_ = 6
    tree = 7
    dynamicAlternative1 = 8

class GH_WireDirection(enum.Enum):
    left = 0
    right = 1

class GH_Painter(object):
    """This class performs most of the drawing operations required for Grasshopper Canvas controls.

    """
    def __init__(self, owner: GH_Canvas): ...
    @overload
    @staticmethod
    def ConnectionPath(pointA: Drawing.PointF, pointB: Drawing.PointF, directionA: GH_WireDirection, directionB: GH_WireDirection) -> Drawing2D.GraphicsPath: ...
    @overload
    @staticmethod
    def ConnectionPathBezier(source: Drawing.PointF, target: Drawing.PointF) -> GH_Util.BezierF: ...
    @overload
    def ConnectionVisible(self, a: Drawing.PointF, b: Drawing.PointF) -> bool: ...
    @overload
    @staticmethod
    def DetermineWireType(target: Data.IGH_Structure) -> GH_WireType: ...
    @overload
    def DrawBackground(self, viewport: GH_Viewport) -> None: ...
    @overload
    def DrawConnection(self, pointA: Drawing.PointF, pointB: Drawing.PointF, directionA: GH_WireDirection, directionB: GH_WireDirection, selectedA: bool, selectedB: bool, type_: GH_WireType) -> None: ...
    @overload
    def DrawMiddleGround(self, doc: Kernel.GH_Document, channel: GH_CanvasChannel) -> None: ...
    @overload
    def DrawNoDocumentMessage() -> None: ...
    @overload
    def DrawNULLBuffer() -> None: ...
    @overload
    def DrawPivots(self, doc: Kernel.GH_Document) -> None: ...
    @overload
    def DrawRecipientLinks(self, doc: Kernel.GH_Document) -> None: ...
    @overload
    def DrawStateFlags(self, doc: Kernel.GH_Document) -> None: ...
    @overload
    def GenerateWirePen_Fill(self, a: Drawing.PointF, b: Drawing.PointF, asel: bool, bsel: bool, empty: bool) -> Drawing.Brush: ...

class GH_Palette(enum.Enum):
    Normal = 0
    Hidden = 1
    Locked = 2
    Warning = 3
    Error = 4
    White = 5
    Grey = 6
    Black = 7
    Brown = 8
    Pink = 9
    Blue = 10
    Transparent = 11

class GH_PaletteStyle(object):
    """Contains all the colours for a single capsule palette.

    """
    @overload
    def __init__(self, fill: Drawing.Color): ...
    @overload
    def __init__(self, fill: Drawing.Color, edge: Drawing.Color): ...
    @overload
    def __init__(self, fill: Drawing.Color, edge: Drawing.Color, text: Drawing.Color): ...
    @property
    def m_fill(self) -> Drawing.Color: ...
    @property
    def m_edge(self) -> Drawing.Color: ...
    @property
    def m_text(self) -> Drawing.Color: ...
    @overload
    def CreateBrush(self, rec: Drawing.RectangleF, zoom: System.Single) -> Drawing.Brush: ...
    @property
    def Edge(self) -> Drawing.Color: ...
    @property
    def Fill(self) -> Drawing.Color: ...
    @property
    def Text(self) -> Drawing.Color: ...
    @Edge.setter
    def Edge(self, value: System.Void): ...
    @Fill.setter
    def Fill(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class GH_Skin(object):
    """Provides static access to typical Palletes and other GUI colours.

    """
    @property
    def canvas_mono(self) -> bool: ...
    @property
    def canvas_mono_color(self) -> Drawing.Color: ...
    @property
    def canvas_back(self) -> Drawing.Color: ...
    @property
    def canvas_edge(self) -> Drawing.Color: ...
    @property
    def canvas_grid(self) -> Drawing.Color: ...
    @property
    def canvas_shade(self) -> Drawing.Color: ...
    @property
    def canvas_grid_col(self) -> int: ...
    @property
    def canvas_grid_row(self) -> int: ...
    @property
    def canvas_shade_size(self) -> int: ...
    @property
    def wire_default(self) -> Drawing.Color: ...
    @property
    def wire_empty(self) -> Drawing.Color: ...
    @property
    def wire_selected_a(self) -> Drawing.Color: ...
    @property
    def wire_selected_b(self) -> Drawing.Color: ...
    @property
    def group_back(self) -> Drawing.Color: ...
    @property
    def panel_back(self) -> Drawing.Color: ...
    @property
    def zui_fill(self) -> Drawing.Color: ...
    @property
    def zui_edge(self) -> Drawing.Color: ...
    @property
    def zui_fill_highlight(self) -> Drawing.Color: ...
    @property
    def zui_edge_highlight(self) -> Drawing.Color: ...
    @property
    def palette_black_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_black_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_grey_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_grey_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_white_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_white_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_blue_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_blue_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_brown_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_brown_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_pink_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_pink_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_trans_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_trans_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_normal_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_normal_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_hidden_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_hidden_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_locked_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_locked_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_warning_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_warning_selected(self) -> GH_PaletteStyle: ...
    @property
    def palette_error_standard(self) -> GH_PaletteStyle: ...
    @property
    def palette_error_selected(self) -> GH_PaletteStyle: ...
    @overload
    @staticmethod
    def LoadSkin() -> None: ...
    @overload
    @staticmethod
    def SaveSkin() -> None: ...

class GH_PopupSearchDialog(Forms.Form):
    """    """
    def __init__(self): ...
    @overload
    def ClearMessage() -> None: ...
    @property
    def BasePoint(self) -> Drawing.Point: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @BasePoint.setter
    def BasePoint(self, value: System.Void): ...
    @Canvas.setter
    def Canvas(self, value: System.Void): ...
    @overload
    def SetDefaultMessage() -> None: ...
    @overload
    def SetMessage(self, msg: str) -> None: ...
    @overload
    def SetNoResultsMessage() -> None: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class IGH_TooltipAwareObject:
    """Implement this interface if you want your object to participate in Grasshopper Canvas tooltips.

    """
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def IsTooltipRegion(self, canvasPoint: Drawing.PointF) -> bool: ...
    @overload
    def SetupTooltip(self, canvasPoint: Drawing.PointF, e: GUI.GH_TooltipDisplayEventArgs) -> None: ...

class GH_Viewport(object):
    """Provides functionality for panning and zooming in a GH_Canvas environment.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, target: Drawing.Point): ...
    @overload
    def __init__(self, viewport: GH_Viewport): ...
    @overload
    def __init__(self, target: Drawing.Point, zoom: System.Single): ...
    @property
    def ZoomDefault(self) -> System.Single: ...
    @property
    def ZoomDefaultLower(self) -> System.Single: ...
    @property
    def ZoomDefaultUpper(self) -> System.Single: ...
    @property
    def ZoomMinimum(self) -> System.Single: ...
    @property
    def ZoomMaximum(self) -> System.Single: ...
    @overload
    def ApplyProjection(self, G: Drawing.Graphics) -> None: ...
    @overload
    def ComputeProjection() -> None: ...
    @overload
    def DollyZoom(self, e: GUI.GH_CanvasMouseEvent) -> bool: ...
    @overload
    def Duplicate() -> GH_Viewport: ...
    @overload
    def Focus(self, pt: Drawing.Point) -> None: ...
    @overload
    def Focus(self, attribute: Kernel.IGH_Attributes) -> None: ...
    @overload
    def Focus(self, attributes: Generic.List) -> None: ...
    @overload
    def Focus(self, pt: Drawing.PointF) -> None: ...
    @property
    def ControlMidPoint(self) -> Drawing.PointF: ...
    @property
    def Diagonal(self) -> System.Single: ...
    @property
    def Height(self) -> int: ...
    @property
    def MidPoint(self) -> Drawing.PointF: ...
    @property
    def ScreenPort(self) -> Drawing.Rectangle: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Target(self) -> Drawing.Point: ...
    @property
    def TargetRatio(self) -> Drawing.SizeF: ...
    @property
    def Tx(self) -> int: ...
    @property
    def Ty(self) -> int: ...
    @property
    def VisibleRegion(self) -> Drawing.RectangleF: ...
    @property
    def Width(self) -> int: ...
    @property
    def Zoom(self) -> System.Single: ...
    @property
    def ZoomInverse(self) -> System.Single: ...
    @overload
    def IsVisible(self, margin: System.Single) -> (bool, Drawing.RectangleF): ...
    @overload
    def IsVisible(self, margin: System.Single) -> (bool, Drawing.PointF): ...
    @overload
    def LimitUnit(self, guide_value: System.Single, no_less_than: System.Single, no_more_than: System.Single) -> System.Single: ...
    @overload
    def Project() -> (Drawing.PointF): ...
    @overload
    def ProjectPoint(self, pt: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def ProjectRectangle(self, rec: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def ProjectX(self, x: System.Single) -> System.Single: ...
    @overload
    def ProjectY(self, y: System.Single) -> System.Single: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @MidPoint.setter
    def MidPoint(self, value: System.Void): ...
    @overload
    def Set(self, other: GH_Viewport) -> None: ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @TargetRatio.setter
    def TargetRatio(self, value: System.Void): ...
    @Tx.setter
    def Tx(self, value: System.Void): ...
    @Ty.setter
    def Ty(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @overload
    def SolveUnit(self, desired: System.Single, no_less_than: System.Single, no_more_than: System.Single) -> System.Single: ...
    @overload
    def Unproject() -> (Drawing.PointF): ...
    @overload
    def UnprojectPoint(self, pt: Drawing.PointF) -> Drawing.PointF: ...
    @overload
    def UnprojectRectangle(self, rec: Drawing.RectangleF) -> Drawing.RectangleF: ...
    @overload
    def UnprojectX(self, x: System.Single) -> System.Single: ...
    @overload
    def UnprojectY(self, y: System.Single) -> System.Single: ...
    @overload
    def XFormMatrix(self, projection: GH_DisplayMatrix) -> Drawing2D.Matrix: ...

class GH_NamedViewEditor(Forms.Form):
    """    """
    def __init__(self): ...
    @overload
    def LoadNamedView(self, view: GH_NamedView) -> None: ...
    @overload
    def OnNamedViewChanged() -> None: ...
    @property
    def NamedViewChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ViewportChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs) -> None: ...

class ModifiersChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: System.EventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: System.EventArgs) -> None: ...

class WidgetListCreatedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasWidgetListEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasWidgetListEventArgs) -> None: ...

class DocumentObjectMouseDownEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GUI.GH_CanvasObjectMouseDownEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GUI.GH_CanvasObjectMouseDownEventArgs) -> None: ...

class DocumentChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs) -> None: ...

class Document_SettingsChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocSettingsEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocSettingsEventArgs) -> None: ...

class Document_ModifiedChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocModifiedEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocModifiedEventArgs) -> None: ...

class Document_ObjectsAddedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs) -> None: ...

class DocumentObjectsDeletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs) -> None: ...

class Document_ObjectsDeletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: Kernel.GH_Document, e: Kernel.GH_DocObjectEventArgs) -> None: ...

class NavigationSettingsChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class CanvasPaintBeginEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPaintBackgroundEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPrePaintGroupsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPostPaintGroupsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPrePaintWiresEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPostPaintWiresEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPrePaintObjectsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPostPaintObjectsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPrePaintOverlayEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPostPaintOverlayEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPrePaintWidgetsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPostPaintWidgetsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class CanvasPaintEndEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...

class GH_ImageSettings(object):
    """Settings class for high-resolution image output.

    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, folder: str, filename: str, extension: str): ...
    @property
    def BackColour(self) -> Drawing.Color: ...
    @property
    def Extension(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Folder(self) -> str: ...
    @property
    def TileSize(self) -> Drawing.Size: ...
    @property
    def Zoom(self) -> System.Single: ...
    @BackColour.setter
    def BackColour(self, value: System.Void): ...
    @Extension.setter
    def Extension(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Folder.setter
    def Folder(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...

class SmoothFrameEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedView, canvas: GH_Canvas, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_NamedView, canvas: GH_Canvas) -> None: ...

class GH_DisplayMatrix(enum.Enum):
    CanvasToControl = 0
    ControlToCanvas = 1

class NamedViewChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView) -> None: ...

# endregion
