"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IGH_ListItem", "GH_SimpleListItem", "GH_FormattedListItem", "GH_StringList", "RenderItem"]
# endregion

# region: Imports
from System import Collections
from System import Drawing
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Grasshopper, Version=8.19.25132.1001

class IGH_ListItem:
    """Represents a single entry in a StringList

    """
    @overload
    def ComputeSize(self, layoutWidth: int) -> Drawing.Size: ...
    @property
    def BoundingBox(self) -> Drawing.Rectangle: ...
    @overload
    def RenderItem(self, G: Drawing.Graphics, destination: Drawing.Rectangle) -> None: ...
    @BoundingBox.setter
    def BoundingBox(self, value: System.Void): ...

class GH_SimpleListItem(object):
    """Base implementation of IGH_StringListItem

    """
    def __init__(self): ...
    @overload
    def ComputeSize(self, layoutWidth: int) -> Drawing.Size: ...
    @property
    def Alignment(self) -> Drawing.StringAlignment: ...
    @property
    def BoundingBox(self) -> Drawing.Rectangle: ...
    @property
    def Colour(self) -> Drawing.Color: ...
    @property
    def Text(self) -> str: ...
    @overload
    def RenderItem(self, G: Drawing.Graphics, destination: Drawing.Rectangle) -> None: ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @BoundingBox.setter
    def BoundingBox(self, value: System.Void): ...
    @Colour.setter
    def Colour(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class GH_FormattedListItem(GH_SimpleListItem):
    """Advanced implementation of IGH_ListItem

    """
    def __init__(self): ...
    @overload
    def ComputeSize(self, layoutWidth: int) -> Drawing.Size: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Type(self) -> int: ...
    @property
    def Wrap(self) -> bool: ...
    @overload
    def RenderItem(self, G: Drawing.Graphics, destination: Drawing.Rectangle) -> None: ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...

class GH_StringList(object):
    """Represents a collection of String List Items.

    GH_StringList[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initial_capacity: int): ...
    @overload
    def AppendItem(self, item: T) -> None: ...
    @overload
    def AppendItems(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def BuildCache(self, layoutBox: Drawing.Rectangle) -> None: ...
    @overload
    def ClearItems() -> None: ...
    @property
    def BoundingBox(self) -> Drawing.Rectangle: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsCached(self) -> bool: ...
    @property
    def ListItem(self) -> T: ...
    @property
    def StackAlignment(self) -> Drawing.StringAlignment: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetEnumerator1() -> Collections.IEnumerator: ...
    @overload
    def RenderItems(self, graphics: Drawing.Graphics, destination: Drawing.Rectangle, scrollRatio: float) -> None: ...
    @overload
    def RenderItems(self, graphics: Drawing.Graphics, destination: Drawing.Rectangle, scrollRatio: float, delegatePreRenderItem: RenderItem, delegatePostRenderItem: RenderItem) -> None: ...
    @overload
    def RenderScrollBar(self, G: Drawing.Graphics, destination: Drawing.Rectangle, scrollRatio: float) -> (Drawing.Rectangle): ...
    @overload
    def RenderScrollBar(self, G: Drawing.Graphics, destination: Drawing.Rectangle, scrollRatio: float, scrollColor: Drawing.Color) -> (Drawing.Rectangle): ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @StackAlignment.setter
    def StackAlignment(self, value: System.Void): ...

class RenderItem(System.MulticastDelegate):
    """Delegate function that will be called during item rendering.

    RenderItem[T]
    """
    def __init__(self, TargetObject: object, TargetMethod: System.IntPtr): ...
    @overload
    def BeginInvoke(self, item: T, destination: Drawing.Rectangle, DelegateCallback: System.AsyncCallback, DelegateAsyncState: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, item: T, destination: Drawing.Rectangle) -> None: ...

# endregion
