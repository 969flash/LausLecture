"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CodeCompiler", "CodeDomProvider", "CodeGenerator", "CodeGeneratorOptions", "CodeParser", "CompilerError", "CompilerErrorCollection", "CompilerInfo", "CompilerParameters", "CompilerResults", "Executor", "GeneratorSupport", "ICodeCompiler", "ICodeGenerator", "ICodeParser", "LanguageOptions", "TempFileCollection"]
# endregion

# region: Imports
from System import CodeDom
from System import Collections
from System import ComponentModel
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["GeneratedCodeAttribute", "IndentedTextWriter"]
# endregion

# region: Imports
from System import IO
from System import Text
from System import Threading
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class GeneratedCodeAttribute(System.Attribute):
    """    """
    def __init__(self, tool: str, version: str): ...
    @property
    def Tool(self) -> str: ...
    @property
    def Version(self) -> str: ...

class IndentedTextWriter(IO.TextWriter):
    """    """
    @overload
    def __init__(self, writer: IO.TextWriter): ...
    @overload
    def __init__(self, writer: IO.TextWriter, tabString: str): ...
    @property
    def DefaultTabString(self) -> str: ...
    @overload
    def Close() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def Indent(self) -> int: ...
    @property
    def InnerWriter(self) -> IO.TextWriter: ...
    @property
    def NewLine(self) -> str: ...
    @Indent.setter
    def Indent(self, value: System.Void): ...
    @NewLine.setter
    def NewLine(self, value: System.Void): ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, value: bool) -> None: ...
    @overload
    def Write(self, s: str) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char]) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, value: System.Single) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, value: object) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object) -> None: ...
    @overload
    def Write(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def WriteAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteLine() -> None: ...
    @overload
    def WriteLine(self, value: System.Int64) -> None: ...
    @overload
    def WriteLine(self, s: str) -> None: ...
    @overload
    def WriteLine(self, value: bool) -> None: ...
    @overload
    def WriteLine(self, value: System.Char) -> None: ...
    @overload
    def WriteLine(self, value: object) -> None: ...
    @overload
    def WriteLine(self, value: float) -> None: ...
    @overload
    def WriteLine(self, value: System.UInt32) -> None: ...
    @overload
    def WriteLine(self, value: System.Single) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, buffer: System.System.Array[System.Char]) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def WriteLine(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteLineAsync() -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteLineNoTabs(self, s: str) -> None: ...
    @overload
    def WriteLineNoTabsAsync(self, s: str) -> Tasks.Task: ...

# endregion

# region: System.CodeDom, Version=7.0.0.0

class CodeCompiler(CodeGenerator):
    """    """

class CodeDomProvider(ComponentModel.Component):
    """    """
    @overload
    def CompileAssemblyFromDom(self, options: CompilerParameters, compilationUnits: CodeDom.System.Array[CodeDom.CodeCompileUnit]) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromFile(self, options: CompilerParameters, fileNames: System.System.Array[str]) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromSource(self, options: CompilerParameters, sources: System.System.Array[str]) -> CompilerResults: ...
    @overload
    def CreateEscapedIdentifier(self, value: str) -> str: ...
    @overload
    def CreateGenerator(self, output: IO.TextWriter) -> ICodeGenerator: ...
    @overload
    def CreateGenerator(self, fileName: str) -> ICodeGenerator: ...
    @overload
    @staticmethod
    def CreateProvider(language: str) -> CodeDomProvider: ...
    @overload
    @staticmethod
    def CreateProvider(language: str, providerOptions: Generic.IDictionary) -> CodeDomProvider: ...
    @overload
    def CreateValidIdentifier(self, value: str) -> str: ...
    @overload
    def GenerateCodeFromCompileUnit(self, compileUnit: CodeDom.CodeCompileUnit, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromExpression(self, expression: CodeDom.CodeExpression, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromMember(self, member: CodeDom.CodeTypeMember, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromNamespace(self, codeNamespace: CodeDom.CodeNamespace, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromStatement(self, statement: CodeDom.CodeStatement, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromType(self, codeType: CodeDom.CodeTypeDeclaration, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @property
    def FileExtension(self) -> str: ...
    @property
    def LanguageOptions(self) -> LanguageOptions: ...
    @overload
    @staticmethod
    def GetAllCompilerInfo() -> System.Array[CompilerInfo]: ...
    @overload
    @staticmethod
    def GetCompilerInfo(language: str) -> CompilerInfo: ...
    @overload
    def GetConverter(self, type_: System.Type) -> ComponentModel.TypeConverter: ...
    @overload
    @staticmethod
    def GetLanguageFromExtension(extension: str) -> str: ...
    @overload
    def GetTypeOutput(self, type_: CodeDom.CodeTypeReference) -> str: ...
    @overload
    @staticmethod
    def IsDefinedExtension(extension: str) -> bool: ...
    @overload
    @staticmethod
    def IsDefinedLanguage(language: str) -> bool: ...
    @overload
    def IsValidIdentifier(self, value: str) -> bool: ...
    @overload
    def Parse(self, codeStream: IO.TextReader) -> CodeDom.CodeCompileUnit: ...
    @overload
    def Supports(self, generatorSupport: GeneratorSupport) -> bool: ...
    @property
    def Disposed(self): ...

class CodeGenerator(object):
    """    """
    @overload
    def GenerateCodeFromMember(self, member: CodeDom.CodeTypeMember, writer: IO.TextWriter, options: CodeGeneratorOptions) -> None: ...
    @overload
    @staticmethod
    def IsValidLanguageIndependentIdentifier(value: str) -> bool: ...
    @overload
    @staticmethod
    def ValidateIdentifiers(e: CodeDom.CodeObject) -> None: ...

class CodeGeneratorOptions(object):
    """    """
    def __init__(self): ...
    @property
    def BlankLinesBetweenMembers(self) -> bool: ...
    @property
    def BracingStyle(self) -> str: ...
    @property
    def ElseOnClosing(self) -> bool: ...
    @property
    def IndentString(self) -> str: ...
    @property
    def Item(self) -> object: ...
    @property
    def VerbatimOrder(self) -> bool: ...
    @BlankLinesBetweenMembers.setter
    def BlankLinesBetweenMembers(self, value: System.Void): ...
    @BracingStyle.setter
    def BracingStyle(self, value: System.Void): ...
    @ElseOnClosing.setter
    def ElseOnClosing(self, value: System.Void): ...
    @IndentString.setter
    def IndentString(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @VerbatimOrder.setter
    def VerbatimOrder(self, value: System.Void): ...

class CodeParser(object):
    """    """
    @overload
    def Parse(self, codeStream: IO.TextReader) -> CodeDom.CodeCompileUnit: ...

class CompilerError(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str, line: int, column: int, errorNumber: str, errorText: str): ...
    @property
    def Column(self) -> int: ...
    @property
    def ErrorNumber(self) -> str: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def IsWarning(self) -> bool: ...
    @property
    def Line(self) -> int: ...
    @Column.setter
    def Column(self, value: System.Void): ...
    @ErrorNumber.setter
    def ErrorNumber(self, value: System.Void): ...
    @ErrorText.setter
    def ErrorText(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @IsWarning.setter
    def IsWarning(self, value: System.Void): ...
    @Line.setter
    def Line(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class CompilerErrorCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CompilerErrorCollection): ...
    @overload
    def __init__(self, value: System.Array[CompilerError]): ...
    @overload
    def Add(self, value: CompilerError) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CompilerError]) -> None: ...
    @overload
    def AddRange(self, value: CompilerErrorCollection) -> None: ...
    @overload
    def Contains(self, value: CompilerError) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CompilerError], index: int) -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def Item(self) -> CompilerError: ...
    @overload
    def IndexOf(self, value: CompilerError) -> int: ...
    @overload
    def Insert(self, index: int, value: CompilerError) -> None: ...
    @overload
    def Remove(self, value: CompilerError) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CompilerInfo(object):
    """    """
    @overload
    def CreateDefaultCompilerParameters() -> CompilerParameters: ...
    @overload
    def CreateProvider() -> CodeDomProvider: ...
    @overload
    def CreateProvider(self, providerOptions: Generic.IDictionary) -> CodeDomProvider: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def CodeDomProviderType(self) -> System.Type: ...
    @property
    def IsCodeDomProviderTypeValid(self) -> bool: ...
    @overload
    def GetExtensions() -> System.System.Array[str]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLanguages() -> System.System.Array[str]: ...

class CompilerParameters(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assemblyNames: System.System.Array[str]): ...
    @overload
    def __init__(self, assemblyNames: System.System.Array[str], outputName: str): ...
    @overload
    def __init__(self, assemblyNames: System.System.Array[str], outputName: str, includeDebugInformation: bool): ...
    @property
    def CompilerOptions(self) -> str: ...
    @property
    def CoreAssemblyFileName(self) -> str: ...
    @property
    def EmbeddedResources(self) -> Specialized.StringCollection: ...
    @property
    def GenerateExecutable(self) -> bool: ...
    @property
    def GenerateInMemory(self) -> bool: ...
    @property
    def IncludeDebugInformation(self) -> bool: ...
    @property
    def LinkedResources(self) -> Specialized.StringCollection: ...
    @property
    def MainClass(self) -> str: ...
    @property
    def OutputAssembly(self) -> str: ...
    @property
    def ReferencedAssemblies(self) -> Specialized.StringCollection: ...
    @property
    def TempFiles(self) -> TempFileCollection: ...
    @property
    def TreatWarningsAsErrors(self) -> bool: ...
    @property
    def UserToken(self) -> System.IntPtr: ...
    @property
    def WarningLevel(self) -> int: ...
    @property
    def Win32Resource(self) -> str: ...
    @CompilerOptions.setter
    def CompilerOptions(self, value: System.Void): ...
    @CoreAssemblyFileName.setter
    def CoreAssemblyFileName(self, value: System.Void): ...
    @GenerateExecutable.setter
    def GenerateExecutable(self, value: System.Void): ...
    @GenerateInMemory.setter
    def GenerateInMemory(self, value: System.Void): ...
    @IncludeDebugInformation.setter
    def IncludeDebugInformation(self, value: System.Void): ...
    @MainClass.setter
    def MainClass(self, value: System.Void): ...
    @OutputAssembly.setter
    def OutputAssembly(self, value: System.Void): ...
    @TempFiles.setter
    def TempFiles(self, value: System.Void): ...
    @TreatWarningsAsErrors.setter
    def TreatWarningsAsErrors(self, value: System.Void): ...
    @UserToken.setter
    def UserToken(self, value: System.Void): ...
    @WarningLevel.setter
    def WarningLevel(self, value: System.Void): ...
    @Win32Resource.setter
    def Win32Resource(self, value: System.Void): ...

class CompilerResults(object):
    """    """
    def __init__(self, tempFiles: TempFileCollection): ...
    @property
    def CompiledAssembly(self) -> Reflection.Assembly: ...
    @property
    def Errors(self) -> CompilerErrorCollection: ...
    @property
    def NativeCompilerReturnValue(self) -> int: ...
    @property
    def Output(self) -> Specialized.StringCollection: ...
    @property
    def PathToAssembly(self) -> str: ...
    @property
    def TempFiles(self) -> TempFileCollection: ...
    @CompiledAssembly.setter
    def CompiledAssembly(self, value: System.Void): ...
    @NativeCompilerReturnValue.setter
    def NativeCompilerReturnValue(self, value: System.Void): ...
    @PathToAssembly.setter
    def PathToAssembly(self, value: System.Void): ...
    @TempFiles.setter
    def TempFiles(self, value: System.Void): ...

class Executor(object):
    """    """
    @overload
    @staticmethod
    def ExecWait(cmd: str, tempFiles: TempFileCollection) -> None: ...
    @overload
    @staticmethod
    def ExecWaitWithCapture(cmd: str, tempFiles: TempFileCollection) -> (int, str, str): ...
    @overload
    @staticmethod
    def ExecWaitWithCapture(userToken: System.IntPtr, cmd: str, tempFiles: TempFileCollection) -> (int, str, str): ...
    @overload
    @staticmethod
    def ExecWaitWithCapture(cmd: str, currentDir: str, tempFiles: TempFileCollection) -> (int, str, str): ...
    @overload
    @staticmethod
    def ExecWaitWithCapture(userToken: System.IntPtr, cmd: str, currentDir: str, tempFiles: TempFileCollection) -> (int, str, str): ...

class GeneratorSupport(enum.Enum):
    ArraysOfArrays = 1
    EntryPointMethod = 2
    GotoStatements = 4
    MultidimensionalArrays = 8
    StaticConstructors = 16
    TryCatchStatements = 32
    ReturnTypeAttributes = 64
    DeclareValueTypes = 128
    DeclareEnums = 256
    DeclareDelegates = 512
    DeclareInterfaces = 1024
    DeclareEvents = 2048
    AssemblyAttributes = 4096
    ParameterAttributes = 8192
    ReferenceParameters = 16384
    ChainedConstructorArguments = 32768
    NestedTypes = 65536
    MultipleInterfaceMembers = 131072
    PublicStaticMembers = 262144
    ComplexExpressions = 524288
    Win32Resources = 1048576
    Resources = 2097152
    PartialTypes = 4194304
    GenericTypeReference = 8388608
    GenericTypeDeclaration = 16777216
    DeclareIndexerProperties = 33554432

class ICodeCompiler:
    """    """
    @overload
    def CompileAssemblyFromDom(self, options: CompilerParameters, compilationUnit: CodeDom.CodeCompileUnit) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromDomBatch(self, options: CompilerParameters, compilationUnits: CodeDom.System.Array[CodeDom.CodeCompileUnit]) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromFile(self, options: CompilerParameters, fileName: str) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromFileBatch(self, options: CompilerParameters, fileNames: System.System.Array[str]) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromSource(self, options: CompilerParameters, source: str) -> CompilerResults: ...
    @overload
    def CompileAssemblyFromSourceBatch(self, options: CompilerParameters, sources: System.System.Array[str]) -> CompilerResults: ...

class ICodeGenerator:
    """    """
    @overload
    def CreateEscapedIdentifier(self, value: str) -> str: ...
    @overload
    def CreateValidIdentifier(self, value: str) -> str: ...
    @overload
    def GenerateCodeFromCompileUnit(self, e: CodeDom.CodeCompileUnit, w: IO.TextWriter, o: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromExpression(self, e: CodeDom.CodeExpression, w: IO.TextWriter, o: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromNamespace(self, e: CodeDom.CodeNamespace, w: IO.TextWriter, o: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromStatement(self, e: CodeDom.CodeStatement, w: IO.TextWriter, o: CodeGeneratorOptions) -> None: ...
    @overload
    def GenerateCodeFromType(self, e: CodeDom.CodeTypeDeclaration, w: IO.TextWriter, o: CodeGeneratorOptions) -> None: ...
    @overload
    def GetTypeOutput(self, type_: CodeDom.CodeTypeReference) -> str: ...
    @overload
    def IsValidIdentifier(self, value: str) -> bool: ...
    @overload
    def Supports(self, supports: GeneratorSupport) -> bool: ...
    @overload
    def ValidateIdentifier(self, value: str) -> None: ...

class ICodeParser:
    """    """
    @overload
    def Parse(self, codeStream: IO.TextReader) -> CodeDom.CodeCompileUnit: ...

class LanguageOptions(enum.Enum):
    None_ = 0
    CaseInsensitive = 1

class TempFileCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tempDir: str): ...
    @overload
    def __init__(self, tempDir: str, keepFiles: bool): ...
    @overload
    def AddExtension(self, fileExtension: str) -> str: ...
    @overload
    def AddExtension(self, fileExtension: str, keepFile: bool) -> str: ...
    @overload
    def AddFile(self, fileName: str, keepFile: bool) -> None: ...
    @overload
    def CopyTo(self, fileNames: System.System.Array[str], start: int) -> None: ...
    @overload
    def Delete() -> None: ...
    @property
    def BasePath(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def KeepFiles(self) -> bool: ...
    @property
    def TempDir(self) -> str: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @KeepFiles.setter
    def KeepFiles(self, value: System.Void): ...

# endregion
