"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Compiler", "CodeArgumentReferenceExpression", "CodeArrayCreateExpression", "CodeArrayIndexerExpression", "CodeAssignStatement", "CodeAttachEventStatement", "CodeAttributeArgument", "CodeAttributeArgumentCollection", "CodeAttributeDeclaration", "CodeAttributeDeclarationCollection", "CodeBaseReferenceExpression", "CodeBinaryOperatorExpression", "CodeBinaryOperatorType", "CodeCastExpression", "CodeCatchClause", "CodeCatchClauseCollection", "CodeChecksumPragma", "CodeComment", "CodeCommentStatement", "CodeCommentStatementCollection", "CodeCompileUnit", "CodeConditionStatement", "CodeConstructor", "CodeDefaultValueExpression", "CodeDelegateCreateExpression", "CodeDelegateInvokeExpression", "CodeDirectionExpression", "CodeDirective", "CodeDirectiveCollection", "CodeEntryPointMethod", "CodeEventReferenceExpression", "CodeExpression", "CodeExpressionCollection", "CodeExpressionStatement", "CodeFieldReferenceExpression", "CodeGotoStatement", "CodeIndexerExpression", "CodeIterationStatement", "CodeLabeledStatement", "CodeLinePragma", "CodeMemberEvent", "CodeMemberField", "CodeMemberMethod", "CodeMemberProperty", "CodeMethodInvokeExpression", "CodeMethodReferenceExpression", "CodeMethodReturnStatement", "CodeNamespace", "CodeNamespaceCollection", "CodeNamespaceImport", "CodeNamespaceImportCollection", "CodeObject", "CodeObjectCreateExpression", "CodeParameterDeclarationExpression", "CodeParameterDeclarationExpressionCollection", "CodePrimitiveExpression", "CodePropertyReferenceExpression", "CodePropertySetValueReferenceExpression", "CodeRegionDirective", "CodeRegionMode", "CodeRemoveEventStatement", "CodeSnippetCompileUnit", "CodeSnippetExpression", "CodeSnippetStatement", "CodeSnippetTypeMember", "CodeStatement", "CodeStatementCollection", "CodeThisReferenceExpression", "CodeThrowExceptionStatement", "CodeTryCatchFinallyStatement", "CodeTypeConstructor", "CodeTypeDeclaration", "CodeTypeDeclarationCollection", "CodeTypeDelegate", "CodeTypeMember", "CodeTypeMemberCollection", "CodeTypeOfExpression", "CodeTypeParameter", "CodeTypeParameterCollection", "CodeTypeReferenceOptions", "CodeTypeReference", "CodeTypeReferenceCollection", "CodeTypeReferenceExpression", "CodeVariableDeclarationStatement", "CodeVariableReferenceExpression", "FieldDirection", "MemberAttributes"]
# endregion

# region: Imports
from System import Collections
from System import Reflection
from System.Collections import Specialized
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Compiler"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.CodeDom, Version=7.0.0.0

class CodeArgumentReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parameterName: str): ...
    @property
    def ParameterName(self) -> str: ...
    @ParameterName.setter
    def ParameterName(self, value: System.Void): ...

class CodeArrayCreateExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, createType: CodeTypeReference, initializers: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, createType: str, initializers: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, createType: System.Type, initializers: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, createType: CodeTypeReference, size: int): ...
    @overload
    def __init__(self, createType: str, size: int): ...
    @overload
    def __init__(self, createType: System.Type, size: int): ...
    @overload
    def __init__(self, createType: CodeTypeReference, size: CodeExpression): ...
    @overload
    def __init__(self, createType: str, size: CodeExpression): ...
    @overload
    def __init__(self, createType: System.Type, size: CodeExpression): ...
    @property
    def CreateType(self) -> CodeTypeReference: ...
    @property
    def Initializers(self) -> CodeExpressionCollection: ...
    @property
    def Size(self) -> int: ...
    @property
    def SizeExpression(self) -> CodeExpression: ...
    @CreateType.setter
    def CreateType(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @SizeExpression.setter
    def SizeExpression(self, value: System.Void): ...

class CodeArrayIndexerExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, indices: System.Array[CodeExpression]): ...
    @property
    def Indices(self) -> CodeExpressionCollection: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeAssignStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, left: CodeExpression, right: CodeExpression): ...
    @property
    def Left(self) -> CodeExpression: ...
    @property
    def Right(self) -> CodeExpression: ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Right.setter
    def Right(self, value: System.Void): ...

class CodeAttachEventStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventRef: CodeEventReferenceExpression, listener: CodeExpression): ...
    @overload
    def __init__(self, targetObject: CodeExpression, eventName: str, listener: CodeExpression): ...
    @property
    def Event(self) -> CodeEventReferenceExpression: ...
    @property
    def Listener(self) -> CodeExpression: ...
    @Event.setter
    def Event(self, value: System.Void): ...
    @Listener.setter
    def Listener(self, value: System.Void): ...

class CodeAttributeArgument(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeExpression): ...
    @overload
    def __init__(self, name: str, value: CodeExpression): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> CodeExpression: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class CodeAttributeArgumentCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeAttributeArgumentCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeAttributeArgument]): ...
    @overload
    def Add(self, value: CodeAttributeArgument) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeAttributeArgument]) -> None: ...
    @overload
    def AddRange(self, value: CodeAttributeArgumentCollection) -> None: ...
    @overload
    def Contains(self, value: CodeAttributeArgument) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeAttributeArgument], index: int) -> None: ...
    @property
    def Item(self) -> CodeAttributeArgument: ...
    @overload
    def IndexOf(self, value: CodeAttributeArgument) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeAttributeArgument) -> None: ...
    @overload
    def Remove(self, value: CodeAttributeArgument) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeAttributeDeclaration(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, attributeType: CodeTypeReference): ...
    @overload
    def __init__(self, name: str, arguments: System.Array[CodeAttributeArgument]): ...
    @overload
    def __init__(self, attributeType: CodeTypeReference, arguments: System.Array[CodeAttributeArgument]): ...
    @property
    def Arguments(self) -> CodeAttributeArgumentCollection: ...
    @property
    def AttributeType(self) -> CodeTypeReference: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class CodeAttributeDeclarationCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeAttributeDeclarationCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeAttributeDeclaration]): ...
    @overload
    def Add(self, value: CodeAttributeDeclaration) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeAttributeDeclaration]) -> None: ...
    @overload
    def AddRange(self, value: CodeAttributeDeclarationCollection) -> None: ...
    @overload
    def Contains(self, value: CodeAttributeDeclaration) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeAttributeDeclaration], index: int) -> None: ...
    @property
    def Item(self) -> CodeAttributeDeclaration: ...
    @overload
    def IndexOf(self, value: CodeAttributeDeclaration) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeAttributeDeclaration) -> None: ...
    @overload
    def Remove(self, value: CodeAttributeDeclaration) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeBaseReferenceExpression(CodeExpression):
    """    """
    def __init__(self): ...

class CodeBinaryOperatorExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, left: CodeExpression, op: CodeBinaryOperatorType, right: CodeExpression): ...
    @property
    def Left(self) -> CodeExpression: ...
    @property
    def Operator(self) -> CodeBinaryOperatorType: ...
    @property
    def Right(self) -> CodeExpression: ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Operator.setter
    def Operator(self, value: System.Void): ...
    @Right.setter
    def Right(self, value: System.Void): ...

class CodeBinaryOperatorType(enum.Enum):
    Add = 0
    Subtract = 1
    Multiply = 2
    Divide = 3
    Modulus = 4
    Assign = 5
    IdentityInequality = 6
    IdentityEquality = 7
    ValueEquality = 8
    BitwiseOr = 9
    BitwiseAnd = 10
    BooleanOr = 11
    BooleanAnd = 12
    LessThan = 13
    LessThanOrEqual = 14
    GreaterThan = 15
    GreaterThanOrEqual = 16

class CodeCastExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetType: CodeTypeReference, expression: CodeExpression): ...
    @overload
    def __init__(self, targetType: str, expression: CodeExpression): ...
    @overload
    def __init__(self, targetType: System.Type, expression: CodeExpression): ...
    @property
    def Expression(self) -> CodeExpression: ...
    @property
    def TargetType(self) -> CodeTypeReference: ...
    @Expression.setter
    def Expression(self, value: System.Void): ...
    @TargetType.setter
    def TargetType(self, value: System.Void): ...

class CodeCatchClause(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, localName: str): ...
    @overload
    def __init__(self, localName: str, catchExceptionType: CodeTypeReference): ...
    @overload
    def __init__(self, localName: str, catchExceptionType: CodeTypeReference, statements: System.Array[CodeStatement]): ...
    @property
    def CatchExceptionType(self) -> CodeTypeReference: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Statements(self) -> CodeStatementCollection: ...
    @CatchExceptionType.setter
    def CatchExceptionType(self, value: System.Void): ...
    @LocalName.setter
    def LocalName(self, value: System.Void): ...

class CodeCatchClauseCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeCatchClauseCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeCatchClause]): ...
    @overload
    def Add(self, value: CodeCatchClause) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeCatchClause]) -> None: ...
    @overload
    def AddRange(self, value: CodeCatchClauseCollection) -> None: ...
    @overload
    def Contains(self, value: CodeCatchClause) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeCatchClause], index: int) -> None: ...
    @property
    def Item(self) -> CodeCatchClause: ...
    @overload
    def IndexOf(self, value: CodeCatchClause) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeCatchClause) -> None: ...
    @overload
    def Remove(self, value: CodeCatchClause) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeChecksumPragma(CodeDirective):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str, checksumAlgorithmId: System.Guid, checksumData: System.System.Array[System.Byte]): ...
    @property
    def ChecksumAlgorithmId(self) -> System.Guid: ...
    @property
    def ChecksumData(self) -> System.System.Array[System.Byte]: ...
    @property
    def FileName(self) -> str: ...
    @ChecksumAlgorithmId.setter
    def ChecksumAlgorithmId(self, value: System.Void): ...
    @ChecksumData.setter
    def ChecksumData(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...

class CodeComment(CodeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, docComment: bool): ...
    @property
    def DocComment(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @DocComment.setter
    def DocComment(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...

class CodeCommentStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comment: CodeComment): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, docComment: bool): ...
    @property
    def Comment(self) -> CodeComment: ...
    @Comment.setter
    def Comment(self, value: System.Void): ...

class CodeCommentStatementCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeCommentStatementCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeCommentStatement]): ...
    @overload
    def Add(self, value: CodeCommentStatement) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeCommentStatement]) -> None: ...
    @overload
    def AddRange(self, value: CodeCommentStatementCollection) -> None: ...
    @overload
    def Contains(self, value: CodeCommentStatement) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeCommentStatement], index: int) -> None: ...
    @property
    def Item(self) -> CodeCommentStatement: ...
    @overload
    def IndexOf(self, value: CodeCommentStatement) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeCommentStatement) -> None: ...
    @overload
    def Remove(self, value: CodeCommentStatement) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeCompileUnit(CodeObject):
    """    """
    def __init__(self): ...
    @property
    def AssemblyCustomAttributes(self) -> CodeAttributeDeclarationCollection: ...
    @property
    def EndDirectives(self) -> CodeDirectiveCollection: ...
    @property
    def Namespaces(self) -> CodeNamespaceCollection: ...
    @property
    def ReferencedAssemblies(self) -> Specialized.StringCollection: ...
    @property
    def StartDirectives(self) -> CodeDirectiveCollection: ...

class CodeConditionStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, condition: CodeExpression, trueStatements: System.Array[CodeStatement]): ...
    @overload
    def __init__(self, condition: CodeExpression, trueStatements: System.Array[CodeStatement], falseStatements: System.Array[CodeStatement]): ...
    @property
    def Condition(self) -> CodeExpression: ...
    @property
    def FalseStatements(self) -> CodeStatementCollection: ...
    @property
    def TrueStatements(self) -> CodeStatementCollection: ...
    @Condition.setter
    def Condition(self, value: System.Void): ...

class CodeConstructor(CodeMemberMethod):
    """    """
    def __init__(self): ...
    @property
    def BaseConstructorArgs(self) -> CodeExpressionCollection: ...
    @property
    def ChainedConstructorArgs(self) -> CodeExpressionCollection: ...
    @property
    def PopulateParameters(self): ...
    @property
    def PopulateStatements(self): ...
    @property
    def PopulateImplementationTypes(self): ...

class CodeDefaultValueExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference): ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeDelegateCreateExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, delegateType: CodeTypeReference, targetObject: CodeExpression, methodName: str): ...
    @property
    def DelegateType(self) -> CodeTypeReference: ...
    @property
    def MethodName(self) -> str: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @DelegateType.setter
    def DelegateType(self, value: System.Void): ...
    @MethodName.setter
    def MethodName(self, value: System.Void): ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeDelegateInvokeExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression): ...
    @overload
    def __init__(self, targetObject: CodeExpression, parameters: System.Array[CodeExpression]): ...
    @property
    def Parameters(self) -> CodeExpressionCollection: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeDirectionExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, direction: FieldDirection, expression: CodeExpression): ...
    @property
    def Direction(self) -> FieldDirection: ...
    @property
    def Expression(self) -> CodeExpression: ...
    @Direction.setter
    def Direction(self, value: System.Void): ...
    @Expression.setter
    def Expression(self, value: System.Void): ...

class CodeDirective(CodeObject):
    """    """
    def __init__(self): ...

class CodeDirectiveCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeDirectiveCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeDirective]): ...
    @overload
    def Add(self, value: CodeDirective) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeDirective]) -> None: ...
    @overload
    def AddRange(self, value: CodeDirectiveCollection) -> None: ...
    @overload
    def Contains(self, value: CodeDirective) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeDirective], index: int) -> None: ...
    @property
    def Item(self) -> CodeDirective: ...
    @overload
    def IndexOf(self, value: CodeDirective) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeDirective) -> None: ...
    @overload
    def Remove(self, value: CodeDirective) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeEntryPointMethod(CodeMemberMethod):
    """    """
    def __init__(self): ...
    @property
    def PopulateParameters(self): ...
    @property
    def PopulateStatements(self): ...
    @property
    def PopulateImplementationTypes(self): ...

class CodeEventReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, eventName: str): ...
    @property
    def EventName(self) -> str: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @EventName.setter
    def EventName(self, value: System.Void): ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeExpression(CodeObject):
    """    """
    def __init__(self): ...

class CodeExpressionCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeExpressionCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeExpression]): ...
    @overload
    def Add(self, value: CodeExpression) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeExpression]) -> None: ...
    @overload
    def AddRange(self, value: CodeExpressionCollection) -> None: ...
    @overload
    def Contains(self, value: CodeExpression) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeExpression], index: int) -> None: ...
    @property
    def Item(self) -> CodeExpression: ...
    @overload
    def IndexOf(self, value: CodeExpression) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeExpression) -> None: ...
    @overload
    def Remove(self, value: CodeExpression) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeExpressionStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, expression: CodeExpression): ...
    @property
    def Expression(self) -> CodeExpression: ...
    @Expression.setter
    def Expression(self, value: System.Void): ...

class CodeFieldReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, fieldName: str): ...
    @property
    def FieldName(self) -> str: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @FieldName.setter
    def FieldName(self, value: System.Void): ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeGotoStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, label: str): ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: System.Void): ...

class CodeIndexerExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, indices: System.Array[CodeExpression]): ...
    @property
    def Indices(self) -> CodeExpressionCollection: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeIterationStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initStatement: CodeStatement, testExpression: CodeExpression, incrementStatement: CodeStatement, statements: System.Array[CodeStatement]): ...
    @property
    def IncrementStatement(self) -> CodeStatement: ...
    @property
    def InitStatement(self) -> CodeStatement: ...
    @property
    def Statements(self) -> CodeStatementCollection: ...
    @property
    def TestExpression(self) -> CodeExpression: ...
    @IncrementStatement.setter
    def IncrementStatement(self, value: System.Void): ...
    @InitStatement.setter
    def InitStatement(self, value: System.Void): ...
    @TestExpression.setter
    def TestExpression(self, value: System.Void): ...

class CodeLabeledStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, label: str): ...
    @overload
    def __init__(self, label: str, statement: CodeStatement): ...
    @property
    def Label(self) -> str: ...
    @property
    def Statement(self) -> CodeStatement: ...
    @Label.setter
    def Label(self, value: System.Void): ...
    @Statement.setter
    def Statement(self, value: System.Void): ...

class CodeLinePragma(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str, lineNumber: int): ...
    @property
    def FileName(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @LineNumber.setter
    def LineNumber(self, value: System.Void): ...

class CodeMemberEvent(CodeTypeMember):
    """    """
    def __init__(self): ...
    @property
    def ImplementationTypes(self) -> CodeTypeReferenceCollection: ...
    @property
    def PrivateImplementationType(self) -> CodeTypeReference: ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @PrivateImplementationType.setter
    def PrivateImplementationType(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeMemberField(CodeTypeMember):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference, name: str): ...
    @overload
    def __init__(self, type_: str, name: str): ...
    @overload
    def __init__(self, type_: System.Type, name: str): ...
    @property
    def InitExpression(self) -> CodeExpression: ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @InitExpression.setter
    def InitExpression(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeMemberMethod(CodeTypeMember):
    """    """
    def __init__(self): ...
    @property
    def ImplementationTypes(self) -> CodeTypeReferenceCollection: ...
    @property
    def Parameters(self) -> CodeParameterDeclarationExpressionCollection: ...
    @property
    def PrivateImplementationType(self) -> CodeTypeReference: ...
    @property
    def ReturnType(self) -> CodeTypeReference: ...
    @property
    def ReturnTypeCustomAttributes(self) -> CodeAttributeDeclarationCollection: ...
    @property
    def Statements(self) -> CodeStatementCollection: ...
    @property
    def TypeParameters(self) -> CodeTypeParameterCollection: ...
    @PrivateImplementationType.setter
    def PrivateImplementationType(self, value: System.Void): ...
    @ReturnType.setter
    def ReturnType(self, value: System.Void): ...
    @property
    def PopulateParameters(self): ...
    @property
    def PopulateStatements(self): ...
    @property
    def PopulateImplementationTypes(self): ...

class CodeMemberProperty(CodeTypeMember):
    """    """
    def __init__(self): ...
    @property
    def GetStatements(self) -> CodeStatementCollection: ...
    @property
    def HasGet(self) -> bool: ...
    @property
    def HasSet(self) -> bool: ...
    @property
    def ImplementationTypes(self) -> CodeTypeReferenceCollection: ...
    @property
    def Parameters(self) -> CodeParameterDeclarationExpressionCollection: ...
    @property
    def PrivateImplementationType(self) -> CodeTypeReference: ...
    @property
    def SetStatements(self) -> CodeStatementCollection: ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @HasGet.setter
    def HasGet(self, value: System.Void): ...
    @HasSet.setter
    def HasSet(self, value: System.Void): ...
    @PrivateImplementationType.setter
    def PrivateImplementationType(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeMethodInvokeExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, method: CodeMethodReferenceExpression, parameters: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, targetObject: CodeExpression, methodName: str, parameters: System.Array[CodeExpression]): ...
    @property
    def Method(self) -> CodeMethodReferenceExpression: ...
    @property
    def Parameters(self) -> CodeExpressionCollection: ...
    @Method.setter
    def Method(self, value: System.Void): ...

class CodeMethodReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, methodName: str): ...
    @overload
    def __init__(self, targetObject: CodeExpression, methodName: str, typeParameters: System.Array[CodeTypeReference]): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @property
    def TypeArguments(self) -> CodeTypeReferenceCollection: ...
    @MethodName.setter
    def MethodName(self, value: System.Void): ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodeMethodReturnStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, expression: CodeExpression): ...
    @property
    def Expression(self) -> CodeExpression: ...
    @Expression.setter
    def Expression(self, value: System.Void): ...

class CodeNamespace(CodeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Comments(self) -> CodeCommentStatementCollection: ...
    @property
    def Imports(self) -> CodeNamespaceImportCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Types(self) -> CodeTypeDeclarationCollection: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @property
    def PopulateComments(self): ...
    @property
    def PopulateImports(self): ...
    @property
    def PopulateTypes(self): ...

class CodeNamespaceCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeNamespaceCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeNamespace]): ...
    @overload
    def Add(self, value: CodeNamespace) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeNamespace]) -> None: ...
    @overload
    def AddRange(self, value: CodeNamespaceCollection) -> None: ...
    @overload
    def Contains(self, value: CodeNamespace) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeNamespace], index: int) -> None: ...
    @property
    def Item(self) -> CodeNamespace: ...
    @overload
    def IndexOf(self, value: CodeNamespace) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeNamespace) -> None: ...
    @overload
    def Remove(self, value: CodeNamespace) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeNamespaceImport(CodeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nameSpace: str): ...
    @property
    def LinePragma(self) -> CodeLinePragma: ...
    @property
    def Namespace(self) -> str: ...
    @LinePragma.setter
    def LinePragma(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...

class CodeNamespaceImportCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: CodeNamespaceImport) -> None: ...
    @overload
    def AddRange(self, value: System.Array[CodeNamespaceImport]) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CodeNamespaceImport: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeObject(object):
    """    """
    def __init__(self): ...
    @property
    def UserData(self) -> Collections.IDictionary: ...

class CodeObjectCreateExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, createType: CodeTypeReference, parameters: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, createType: str, parameters: System.Array[CodeExpression]): ...
    @overload
    def __init__(self, createType: System.Type, parameters: System.Array[CodeExpression]): ...
    @property
    def CreateType(self) -> CodeTypeReference: ...
    @property
    def Parameters(self) -> CodeExpressionCollection: ...
    @CreateType.setter
    def CreateType(self, value: System.Void): ...

class CodeParameterDeclarationExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference, name: str): ...
    @overload
    def __init__(self, type_: str, name: str): ...
    @overload
    def __init__(self, type_: System.Type, name: str): ...
    @property
    def CustomAttributes(self) -> CodeAttributeDeclarationCollection: ...
    @property
    def Direction(self) -> FieldDirection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @CustomAttributes.setter
    def CustomAttributes(self, value: System.Void): ...
    @Direction.setter
    def Direction(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeParameterDeclarationExpressionCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeParameterDeclarationExpressionCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeParameterDeclarationExpression]): ...
    @overload
    def Add(self, value: CodeParameterDeclarationExpression) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeParameterDeclarationExpression]) -> None: ...
    @overload
    def AddRange(self, value: CodeParameterDeclarationExpressionCollection) -> None: ...
    @overload
    def Contains(self, value: CodeParameterDeclarationExpression) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeParameterDeclarationExpression], index: int) -> None: ...
    @property
    def Item(self) -> CodeParameterDeclarationExpression: ...
    @overload
    def IndexOf(self, value: CodeParameterDeclarationExpression) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeParameterDeclarationExpression) -> None: ...
    @overload
    def Remove(self, value: CodeParameterDeclarationExpression) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodePrimitiveExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: object): ...
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class CodePropertyReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetObject: CodeExpression, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def TargetObject(self) -> CodeExpression: ...
    @PropertyName.setter
    def PropertyName(self, value: System.Void): ...
    @TargetObject.setter
    def TargetObject(self, value: System.Void): ...

class CodePropertySetValueReferenceExpression(CodeExpression):
    """    """
    def __init__(self): ...

class CodeRegionDirective(CodeDirective):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regionMode: CodeRegionMode, regionText: str): ...
    @property
    def RegionMode(self) -> CodeRegionMode: ...
    @property
    def RegionText(self) -> str: ...
    @RegionMode.setter
    def RegionMode(self, value: System.Void): ...
    @RegionText.setter
    def RegionText(self, value: System.Void): ...

class CodeRegionMode(enum.Enum):
    None_ = 0
    Start = 1
    End = 2

class CodeRemoveEventStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventRef: CodeEventReferenceExpression, listener: CodeExpression): ...
    @overload
    def __init__(self, targetObject: CodeExpression, eventName: str, listener: CodeExpression): ...
    @property
    def Event(self) -> CodeEventReferenceExpression: ...
    @property
    def Listener(self) -> CodeExpression: ...
    @Event.setter
    def Event(self, value: System.Void): ...
    @Listener.setter
    def Listener(self, value: System.Void): ...

class CodeSnippetCompileUnit(CodeCompileUnit):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @property
    def LinePragma(self) -> CodeLinePragma: ...
    @property
    def Value(self) -> str: ...
    @LinePragma.setter
    def LinePragma(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class CodeSnippetExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class CodeSnippetStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class CodeSnippetTypeMember(CodeTypeMember):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: System.Void): ...

class CodeStatement(CodeObject):
    """    """
    def __init__(self): ...
    @property
    def EndDirectives(self) -> CodeDirectiveCollection: ...
    @property
    def LinePragma(self) -> CodeLinePragma: ...
    @property
    def StartDirectives(self) -> CodeDirectiveCollection: ...
    @LinePragma.setter
    def LinePragma(self, value: System.Void): ...

class CodeStatementCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeStatementCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeStatement]): ...
    @overload
    def Add(self, value: CodeStatement) -> int: ...
    @overload
    def Add(self, value: CodeExpression) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeStatement]) -> None: ...
    @overload
    def AddRange(self, value: CodeStatementCollection) -> None: ...
    @overload
    def Contains(self, value: CodeStatement) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeStatement], index: int) -> None: ...
    @property
    def Item(self) -> CodeStatement: ...
    @overload
    def IndexOf(self, value: CodeStatement) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeStatement) -> None: ...
    @overload
    def Remove(self, value: CodeStatement) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeThisReferenceExpression(CodeExpression):
    """    """
    def __init__(self): ...

class CodeThrowExceptionStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, toThrow: CodeExpression): ...
    @property
    def ToThrow(self) -> CodeExpression: ...
    @ToThrow.setter
    def ToThrow(self, value: System.Void): ...

class CodeTryCatchFinallyStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tryStatements: System.Array[CodeStatement], catchClauses: System.Array[CodeCatchClause]): ...
    @overload
    def __init__(self, tryStatements: System.Array[CodeStatement], catchClauses: System.Array[CodeCatchClause], finallyStatements: System.Array[CodeStatement]): ...
    @property
    def CatchClauses(self) -> CodeCatchClauseCollection: ...
    @property
    def FinallyStatements(self) -> CodeStatementCollection: ...
    @property
    def TryStatements(self) -> CodeStatementCollection: ...

class CodeTypeConstructor(CodeMemberMethod):
    """    """
    def __init__(self): ...
    @property
    def PopulateParameters(self): ...
    @property
    def PopulateStatements(self): ...
    @property
    def PopulateImplementationTypes(self): ...

class CodeTypeDeclaration(CodeTypeMember):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def BaseTypes(self) -> CodeTypeReferenceCollection: ...
    @property
    def IsClass(self) -> bool: ...
    @property
    def IsEnum(self) -> bool: ...
    @property
    def IsInterface(self) -> bool: ...
    @property
    def IsPartial(self) -> bool: ...
    @property
    def IsStruct(self) -> bool: ...
    @property
    def Members(self) -> CodeTypeMemberCollection: ...
    @property
    def TypeAttributes(self) -> Reflection.TypeAttributes: ...
    @property
    def TypeParameters(self) -> CodeTypeParameterCollection: ...
    @IsClass.setter
    def IsClass(self, value: System.Void): ...
    @IsEnum.setter
    def IsEnum(self, value: System.Void): ...
    @IsInterface.setter
    def IsInterface(self, value: System.Void): ...
    @IsPartial.setter
    def IsPartial(self, value: System.Void): ...
    @IsStruct.setter
    def IsStruct(self, value: System.Void): ...
    @TypeAttributes.setter
    def TypeAttributes(self, value: System.Void): ...
    @property
    def PopulateBaseTypes(self): ...
    @property
    def PopulateMembers(self): ...

class CodeTypeDeclarationCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeTypeDeclarationCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeTypeDeclaration]): ...
    @overload
    def Add(self, value: CodeTypeDeclaration) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeTypeDeclaration]) -> None: ...
    @overload
    def AddRange(self, value: CodeTypeDeclarationCollection) -> None: ...
    @overload
    def Contains(self, value: CodeTypeDeclaration) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeTypeDeclaration], index: int) -> None: ...
    @property
    def Item(self) -> CodeTypeDeclaration: ...
    @overload
    def IndexOf(self, value: CodeTypeDeclaration) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeTypeDeclaration) -> None: ...
    @overload
    def Remove(self, value: CodeTypeDeclaration) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeTypeDelegate(CodeTypeDeclaration):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Parameters(self) -> CodeParameterDeclarationExpressionCollection: ...
    @property
    def ReturnType(self) -> CodeTypeReference: ...
    @ReturnType.setter
    def ReturnType(self, value: System.Void): ...
    @property
    def PopulateBaseTypes(self): ...
    @property
    def PopulateMembers(self): ...

class CodeTypeMember(CodeObject):
    """    """
    def __init__(self): ...
    @property
    def Attributes(self) -> MemberAttributes: ...
    @property
    def Comments(self) -> CodeCommentStatementCollection: ...
    @property
    def CustomAttributes(self) -> CodeAttributeDeclarationCollection: ...
    @property
    def EndDirectives(self) -> CodeDirectiveCollection: ...
    @property
    def LinePragma(self) -> CodeLinePragma: ...
    @property
    def Name(self) -> str: ...
    @property
    def StartDirectives(self) -> CodeDirectiveCollection: ...
    @Attributes.setter
    def Attributes(self, value: System.Void): ...
    @CustomAttributes.setter
    def CustomAttributes(self, value: System.Void): ...
    @LinePragma.setter
    def LinePragma(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class CodeTypeMemberCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeTypeMemberCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeTypeMember]): ...
    @overload
    def Add(self, value: CodeTypeMember) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CodeTypeMember]) -> None: ...
    @overload
    def AddRange(self, value: CodeTypeMemberCollection) -> None: ...
    @overload
    def Contains(self, value: CodeTypeMember) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeTypeMember], index: int) -> None: ...
    @property
    def Item(self) -> CodeTypeMember: ...
    @overload
    def IndexOf(self, value: CodeTypeMember) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeTypeMember) -> None: ...
    @overload
    def Remove(self, value: CodeTypeMember) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeTypeOfExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference): ...
    @overload
    def __init__(self, type_: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeTypeParameter(CodeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Constraints(self) -> CodeTypeReferenceCollection: ...
    @property
    def CustomAttributes(self) -> CodeAttributeDeclarationCollection: ...
    @property
    def HasConstructorConstraint(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @HasConstructorConstraint.setter
    def HasConstructorConstraint(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class CodeTypeParameterCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeTypeParameterCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeTypeParameter]): ...
    @overload
    def Add(self, value: CodeTypeParameter) -> int: ...
    @overload
    def Add(self, value: str) -> None: ...
    @overload
    def AddRange(self, value: System.Array[CodeTypeParameter]) -> None: ...
    @overload
    def AddRange(self, value: CodeTypeParameterCollection) -> None: ...
    @overload
    def Contains(self, value: CodeTypeParameter) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeTypeParameter], index: int) -> None: ...
    @property
    def Item(self) -> CodeTypeParameter: ...
    @overload
    def IndexOf(self, value: CodeTypeParameter) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeTypeParameter) -> None: ...
    @overload
    def Remove(self, value: CodeTypeParameter) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeTypeReferenceOptions(enum.Enum):
    GlobalReference = 1
    GenericTypeParameter = 2

class CodeTypeReference(CodeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeParameter: CodeTypeParameter): ...
    @overload
    def __init__(self, type_: System.Type, codeTypeReferenceOption: CodeTypeReferenceOptions): ...
    @overload
    def __init__(self, typeName: str, codeTypeReferenceOption: CodeTypeReferenceOptions): ...
    @overload
    def __init__(self, typeName: str, typeArguments: System.Array[CodeTypeReference]): ...
    @overload
    def __init__(self, baseType: str, rank: int): ...
    @overload
    def __init__(self, arrayType: CodeTypeReference, rank: int): ...
    @property
    def ArrayElementType(self) -> CodeTypeReference: ...
    @property
    def ArrayRank(self) -> int: ...
    @property
    def BaseType(self) -> str: ...
    @property
    def Options(self) -> CodeTypeReferenceOptions: ...
    @property
    def TypeArguments(self) -> CodeTypeReferenceCollection: ...
    @ArrayElementType.setter
    def ArrayElementType(self, value: System.Void): ...
    @ArrayRank.setter
    def ArrayRank(self, value: System.Void): ...
    @BaseType.setter
    def BaseType(self, value: System.Void): ...
    @Options.setter
    def Options(self, value: System.Void): ...

class CodeTypeReferenceCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CodeTypeReferenceCollection): ...
    @overload
    def __init__(self, value: System.Array[CodeTypeReference]): ...
    @overload
    def Add(self, value: CodeTypeReference) -> int: ...
    @overload
    def Add(self, value: str) -> None: ...
    @overload
    def Add(self, value: System.Type) -> None: ...
    @overload
    def AddRange(self, value: System.Array[CodeTypeReference]) -> None: ...
    @overload
    def AddRange(self, value: CodeTypeReferenceCollection) -> None: ...
    @overload
    def Contains(self, value: CodeTypeReference) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CodeTypeReference], index: int) -> None: ...
    @property
    def Item(self) -> CodeTypeReference: ...
    @overload
    def IndexOf(self, value: CodeTypeReference) -> int: ...
    @overload
    def Insert(self, index: int, value: CodeTypeReference) -> None: ...
    @overload
    def Remove(self, value: CodeTypeReference) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CodeTypeReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference): ...
    @overload
    def __init__(self, type_: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeVariableDeclarationStatement(CodeStatement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: CodeTypeReference, name: str): ...
    @overload
    def __init__(self, type_: str, name: str): ...
    @overload
    def __init__(self, type_: System.Type, name: str): ...
    @overload
    def __init__(self, type_: CodeTypeReference, name: str, initExpression: CodeExpression): ...
    @overload
    def __init__(self, type_: str, name: str, initExpression: CodeExpression): ...
    @overload
    def __init__(self, type_: System.Type, name: str, initExpression: CodeExpression): ...
    @property
    def InitExpression(self) -> CodeExpression: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> CodeTypeReference: ...
    @InitExpression.setter
    def InitExpression(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class CodeVariableReferenceExpression(CodeExpression):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, variableName: str): ...
    @property
    def VariableName(self) -> str: ...
    @VariableName.setter
    def VariableName(self, value: System.Void): ...

class FieldDirection(enum.Enum):
    In = 0
    Out = 1
    Ref = 2

class MemberAttributes(enum.Enum):
    Abstract = 1
    Final = 2
    Static = 3
    Override = 4
    Const = 5
    ScopeMask = 15
    New = 16
    VTableMask = 240
    Overloaded = 256
    Assembly = 4096
    FamilyAndAssembly = 8192
    Family = 12288
    FamilyOrAssembly = 16384
    Private = 20480
    Public = 24576
    AccessMask = 61440

# endregion
