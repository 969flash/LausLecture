"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GeneratedXmlSerializers"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Json", "DataContracts", "DataContractResolver", "DataContractSerializer", "DataContractSerializerExtensions", "DataContractSerializerSettings", "ExportOptions", "ExtensionDataObject", "IExtensibleDataObject", "XmlObjectSerializer", "XmlSerializableServices", "XPathQueryGenerator", "XsdDataContractExporter", "DateTimeFormat", "EmitTypeInformation", "JsonFormatGeneratorStatics"]
# endregion

# region: Imports
from System import Globalization
from System import IO
from System import Reflection
from System import Text
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Xml import Schema
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Formatters", "SerializationEventHandler", "Formatter", "FormatterConverter", "FormatterServices", "IFormatter", "ISerializationSurrogate", "ISurrogateSelector", "ObjectIDGenerator", "ObjectManager", "TypeLoadExceptionHolder", "SerializationBinder", "SerializationObjectManager", "SurrogateSelector"]
# endregion

# region: Imports
from System import Reflection
from System.Runtime import CompilerServices
from System.Runtime.Serialization import Formatters
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CollectionDataContractAttribute", "ContractNamespaceAttribute", "DataContractAttribute", "DataMemberAttribute", "EnumMemberAttribute", "IgnoreDataMemberAttribute", "InvalidDataContractException", "ISerializationSurrogateProvider2", "ISerializationSurrogateProvider", "KnownTypeAttribute"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["DeserializationToken", "IDeserializationCallback", "IFormatterConverter", "IObjectReference", "ISafeSerializationData", "ISerializable", "OnDeserializedAttribute", "OnDeserializingAttribute", "OnSerializedAttribute", "OnSerializingAttribute", "OptionalFieldAttribute", "SafeSerializationEventArgs", "SerializationException", "SerializationInfo", "SerializationEntry", "SerializationInfoEnumerator", "StreamingContext", "StreamingContextStates"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class DeserializationToken(System.ValueType):
    """    """
    @overload
    def Dispose() -> None: ...

class IDeserializationCallback:
    """    """
    @overload
    def OnDeserialization(self, sender: object) -> None: ...

class IFormatterConverter:
    """    """
    @overload
    def Convert(self, value: object, type_: System.Type) -> object: ...
    @overload
    def Convert(self, value: object, typeCode: System.TypeCode) -> object: ...
    @overload
    def ToBoolean(self, value: object) -> bool: ...
    @overload
    def ToByte(self, value: object) -> System.Byte: ...
    @overload
    def ToChar(self, value: object) -> System.Char: ...
    @overload
    def ToDateTime(self, value: object) -> System.DateTime: ...
    @overload
    def ToDecimal(self, value: object) -> System.Decimal: ...
    @overload
    def ToDouble(self, value: object) -> float: ...
    @overload
    def ToInt16(self, value: object) -> System.Int16: ...
    @overload
    def ToInt32(self, value: object) -> int: ...
    @overload
    def ToInt64(self, value: object) -> System.Int64: ...
    @overload
    def ToSByte(self, value: object) -> System.SByte: ...
    @overload
    def ToSingle(self, value: object) -> System.Single: ...
    @overload
    def ToString(self, value: object) -> str: ...
    @overload
    def ToUInt16(self, value: object) -> System.UInt16: ...
    @overload
    def ToUInt32(self, value: object) -> System.UInt32: ...
    @overload
    def ToUInt64(self, value: object) -> System.UInt64: ...

class IObjectReference:
    """    """
    @overload
    def GetRealObject(self, context: StreamingContext) -> object: ...

class ISafeSerializationData:
    """    """
    @overload
    def CompleteDeserialization(self, deserialized: object) -> None: ...

class ISerializable:
    """    """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...

class OnDeserializedAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OnDeserializingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OnSerializedAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OnSerializingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OptionalFieldAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def VersionAdded(self) -> int: ...
    @VersionAdded.setter
    def VersionAdded(self, value: System.Void): ...

class SafeSerializationEventArgs(System.EventArgs):
    """    """
    @overload
    def AddSerializedState(self, serializedState: ISafeSerializationData) -> None: ...
    @property
    def StreamingContext(self) -> StreamingContext: ...

class SerializationException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SerializationInfo(object):
    """    """
    @overload
    def __init__(self, type_: System.Type, converter: IFormatterConverter): ...
    @overload
    def __init__(self, type_: System.Type, converter: IFormatterConverter, requireSameTokenInPartialTrust: bool): ...
    @overload
    def AddValue(self, name: str, value: System.DateTime) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Int16) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Byte) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.SByte) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Char) -> None: ...
    @overload
    def AddValue(self, name: str, value: bool) -> None: ...
    @overload
    def AddValue(self, name: str, value: object) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.UInt16) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.UInt32) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.UInt64) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Single) -> None: ...
    @overload
    def AddValue(self, name: str, value: float) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Decimal) -> None: ...
    @overload
    def AddValue(self, name: str, value: System.Int64) -> None: ...
    @overload
    def AddValue(self, name: str, value: int) -> None: ...
    @overload
    def AddValue(self, name: str, value: object, type_: System.Type) -> None: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def DeserializationInProgress(self) -> bool: ...
    @property
    def FullTypeName(self) -> str: ...
    @property
    def IsAssemblyNameSetExplicit(self) -> bool: ...
    @property
    def IsFullTypeNameSetExplicit(self) -> bool: ...
    @property
    def MemberCount(self) -> int: ...
    @property
    def ObjectType(self) -> System.Type: ...
    @overload
    def GetBoolean(self, name: str) -> bool: ...
    @overload
    def GetByte(self, name: str) -> System.Byte: ...
    @overload
    def GetChar(self, name: str) -> System.Char: ...
    @overload
    def GetDateTime(self, name: str) -> System.DateTime: ...
    @overload
    def GetDecimal(self, name: str) -> System.Decimal: ...
    @overload
    def GetDouble(self, name: str) -> float: ...
    @overload
    def GetEnumerator() -> SerializationInfoEnumerator: ...
    @overload
    def GetInt16(self, name: str) -> System.Int16: ...
    @overload
    def GetInt32(self, name: str) -> int: ...
    @overload
    def GetInt64(self, name: str) -> System.Int64: ...
    @overload
    def GetSByte(self, name: str) -> System.SByte: ...
    @overload
    def GetSingle(self, name: str) -> System.Single: ...
    @overload
    def GetString(self, name: str) -> str: ...
    @overload
    def GetUInt16(self, name: str) -> System.UInt16: ...
    @overload
    def GetUInt32(self, name: str) -> System.UInt32: ...
    @overload
    def GetUInt64(self, name: str) -> System.UInt64: ...
    @overload
    def GetValue(self, name: str, type_: System.Type) -> object: ...
    @AssemblyName.setter
    def AssemblyName(self, value: System.Void): ...
    @FullTypeName.setter
    def FullTypeName(self, value: System.Void): ...
    @overload
    def SetType(self, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def StartDeserialization() -> DeserializationToken: ...
    @overload
    @staticmethod
    def ThrowIfDeserializationInProgress() -> None: ...
    @overload
    @staticmethod
    def ThrowIfDeserializationInProgress(switchSuffix: str) -> (int): ...
    @overload
    def UpdateValue(self, name: str, value: object, type_: System.Type) -> None: ...

class SerializationEntry(System.ValueType):
    """    """
    @property
    def Name(self) -> str: ...
    @property
    def ObjectType(self) -> System.Type: ...
    @property
    def Value(self) -> object: ...

class SerializationInfoEnumerator(object):
    """    """
    @property
    def Current(self) -> SerializationEntry: ...
    @property
    def Name(self) -> str: ...
    @property
    def ObjectType(self) -> System.Type: ...
    @property
    def Value(self) -> object: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class StreamingContext(System.ValueType):
    """    """
    @overload
    def __init__(self, state: StreamingContextStates): ...
    @overload
    def __init__(self, state: StreamingContextStates, additional: object): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Context(self) -> object: ...
    @property
    def State(self) -> StreamingContextStates: ...
    @overload
    def GetHashCode() -> int: ...

class StreamingContextStates(enum.Enum):
    CrossProcess = 1
    CrossMachine = 2
    File = 4
    Persistence = 8
    Remoting = 16
    Other = 32
    Clone = 64
    CrossAppDomain = 128
    All = 255

# endregion

# region: System.Runtime.Serialization.Primitives, Version=7.0.0.0

class CollectionDataContractAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def IsItemNameSetExplicitly(self) -> bool: ...
    @property
    def IsKeyNameSetExplicitly(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def IsValueNameSetExplicitly(self) -> bool: ...
    @property
    def ItemName(self) -> str: ...
    @property
    def KeyName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ValueName(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: System.Void): ...
    @ItemName.setter
    def ItemName(self, value: System.Void): ...
    @KeyName.setter
    def KeyName(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ValueName.setter
    def ValueName(self, value: System.Void): ...

class ContractNamespaceAttribute(System.Attribute):
    """    """
    def __init__(self, contractNamespace: str): ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def ContractNamespace(self) -> str: ...
    @ClrNamespace.setter
    def ClrNamespace(self, value: System.Void): ...

class DataContractAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...

class DataMemberAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def EmitDefaultValue(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @EmitDefaultValue.setter
    def EmitDefaultValue(self, value: System.Void): ...
    @IsRequired.setter
    def IsRequired(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...

class EnumMemberAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def IsValueSetExplicitly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class IgnoreDataMemberAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class InvalidDataContractException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ISerializationSurrogateProvider2:
    """    """
    @overload
    def GetCustomDataToExport(self, memberInfo: Reflection.MemberInfo, dataContractType: System.Type) -> object: ...
    @overload
    def GetCustomDataToExport(self, runtimeType: System.Type, dataContractType: System.Type) -> object: ...
    @overload
    def GetKnownCustomDataTypes(self, customDataTypes: ObjectModel.Collection) -> None: ...
    @overload
    def GetReferencedTypeOnImport(self, typeName: str, typeNamespace: str, customData: object) -> System.Type: ...

class ISerializationSurrogateProvider:
    """    """
    @overload
    def GetDeserializedObject(self, obj: object, targetType: System.Type) -> object: ...
    @overload
    def GetObjectToSerialize(self, obj: object, targetType: System.Type) -> object: ...
    @overload
    def GetSurrogateType(self, type_: System.Type) -> System.Type: ...

class KnownTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, methodName: str): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...

# endregion

# region: System.Runtime.Serialization.Formatters, Version=7.0.0.0

class SerializationEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, context: StreamingContext, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, context: StreamingContext) -> None: ...

class Formatter(object):
    """    """
    @property
    def Binder(self) -> SerializationBinder: ...
    @property
    def Context(self) -> StreamingContext: ...
    @property
    def SurrogateSelector(self) -> ISurrogateSelector: ...
    @Binder.setter
    def Binder(self, value: System.Void): ...
    @Context.setter
    def Context(self, value: System.Void): ...
    @SurrogateSelector.setter
    def SurrogateSelector(self, value: System.Void): ...

class FormatterConverter(object):
    """    """
    def __init__(self): ...
    @overload
    def Convert(self, value: object, type_: System.Type) -> object: ...
    @overload
    def Convert(self, value: object, typeCode: System.TypeCode) -> object: ...
    @overload
    def ToBoolean(self, value: object) -> bool: ...
    @overload
    def ToByte(self, value: object) -> System.Byte: ...
    @overload
    def ToChar(self, value: object) -> System.Char: ...
    @overload
    def ToDateTime(self, value: object) -> System.DateTime: ...
    @overload
    def ToDecimal(self, value: object) -> System.Decimal: ...
    @overload
    def ToDouble(self, value: object) -> float: ...
    @overload
    def ToInt16(self, value: object) -> System.Int16: ...
    @overload
    def ToInt32(self, value: object) -> int: ...
    @overload
    def ToInt64(self, value: object) -> System.Int64: ...
    @overload
    def ToSByte(self, value: object) -> System.SByte: ...
    @overload
    def ToSingle(self, value: object) -> System.Single: ...
    @overload
    def ToString(self, value: object) -> str: ...
    @overload
    def ToUInt16(self, value: object) -> System.UInt16: ...
    @overload
    def ToUInt32(self, value: object) -> System.UInt32: ...
    @overload
    def ToUInt64(self, value: object) -> System.UInt64: ...

class FormatterServices(object):
    """    """
    @overload
    @staticmethod
    def CheckTypeSecurity(t: System.Type, securityLevel: Formatters.TypeFilterLevel) -> None: ...
    @overload
    @staticmethod
    def GetObjectData(obj: object, members: Reflection.System.Array[Reflection.MemberInfo]) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def GetSafeUninitializedObject(type_: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetSerializableMembers(type_: System.Type) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    @staticmethod
    def GetSerializableMembers(type_: System.Type, context: StreamingContext) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    @staticmethod
    def GetSurrogateForCyclicalReference(innerSurrogate: ISerializationSurrogate) -> ISerializationSurrogate: ...
    @overload
    @staticmethod
    def GetTypeFromAssembly(assem: Reflection.Assembly, name: str) -> System.Type: ...
    @overload
    @staticmethod
    def GetUninitializedObject(type_: System.Type) -> object: ...
    @overload
    @staticmethod
    def PopulateObjectMembers(obj: object, members: Reflection.System.Array[Reflection.MemberInfo], data: System.System.Array[object]) -> object: ...

class IFormatter:
    """    """
    @property
    def Binder(self) -> SerializationBinder: ...
    @property
    def Context(self) -> StreamingContext: ...
    @property
    def SurrogateSelector(self) -> ISurrogateSelector: ...
    @Binder.setter
    def Binder(self, value: System.Void): ...
    @Context.setter
    def Context(self, value: System.Void): ...
    @SurrogateSelector.setter
    def SurrogateSelector(self, value: System.Void): ...

class ISerializationSurrogate:
    """    """
    @overload
    def GetObjectData(self, obj: object, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def SetObjectData(self, obj: object, info: SerializationInfo, context: StreamingContext, selector: ISurrogateSelector) -> object: ...

class ISurrogateSelector:
    """    """
    @overload
    def ChainSelector(self, selector: ISurrogateSelector) -> None: ...
    @overload
    def GetNextSelector() -> ISurrogateSelector: ...
    @overload
    def GetSurrogate(self, type_: System.Type, context: StreamingContext) -> (ISerializationSurrogate, ISurrogateSelector): ...

class ObjectIDGenerator(object):
    """    """
    def __init__(self): ...
    @overload
    def GetId(self, obj: object) -> (System.Int64, bool): ...
    @overload
    def HasId(self, obj: object) -> (System.Int64, bool): ...

class ObjectManager(object):
    """    """
    def __init__(self, selector: ISurrogateSelector, context: StreamingContext): ...
    @overload
    def DoFixups() -> None: ...
    @overload
    def GetObject(self, objectID: System.Int64) -> object: ...
    @overload
    def RaiseDeserializationEvent() -> None: ...
    @overload
    def RaiseOnDeserializingEvent(self, obj: object) -> None: ...
    @overload
    def RecordArrayElementFixup(self, arrayToBeFixed: System.Int64, index: int, objectRequired: System.Int64) -> None: ...
    @overload
    def RecordArrayElementFixup(self, arrayToBeFixed: System.Int64, indices: System.System.Array[int], objectRequired: System.Int64) -> None: ...
    @overload
    def RecordDelayedFixup(self, objectToBeFixed: System.Int64, memberName: str, objectRequired: System.Int64) -> None: ...
    @overload
    def RecordFixup(self, objectToBeFixed: System.Int64, member: Reflection.MemberInfo, objectRequired: System.Int64) -> None: ...
    @overload
    def RegisterObject(self, obj: object, objectID: System.Int64) -> None: ...
    @overload
    def RegisterObject(self, obj: object, objectID: System.Int64, info: SerializationInfo) -> None: ...
    @overload
    def RegisterObject(self, obj: object, objectID: System.Int64, info: SerializationInfo, idOfContainingObj: System.Int64, member: Reflection.MemberInfo) -> None: ...
    @overload
    def RegisterObject(self, obj: object, objectID: System.Int64, info: SerializationInfo, idOfContainingObj: System.Int64, member: Reflection.MemberInfo, arrayIndex: System.System.Array[int]) -> None: ...

class TypeLoadExceptionHolder(object):
    """    """

class SerializationBinder(object):
    """    """
    @overload
    def BindToName(self, serializedType: System.Type) -> (str, str): ...
    @overload
    def BindToType(self, assemblyName: str, typeName: str) -> System.Type: ...

class SerializationObjectManager(object):
    """    """
    def __init__(self, context: StreamingContext): ...
    @overload
    def RaiseOnSerializedEvent() -> None: ...
    @overload
    def RegisterObject(self, obj: object) -> None: ...

class SurrogateSelector(object):
    """    """
    def __init__(self): ...
    @overload
    def AddSurrogate(self, type_: System.Type, context: StreamingContext, surrogate: ISerializationSurrogate) -> None: ...
    @overload
    def ChainSelector(self, selector: ISurrogateSelector) -> None: ...
    @overload
    def GetNextSelector() -> ISurrogateSelector: ...
    @overload
    def GetSurrogate(self, type_: System.Type, context: StreamingContext) -> (ISerializationSurrogate, ISurrogateSelector): ...
    @overload
    def RemoveSurrogate(self, type_: System.Type, context: StreamingContext) -> None: ...

# endregion

# region: System.Private.DataContractSerialization, Version=7.0.0.0

class DataContractResolver(object):
    """    """
    @overload
    def ResolveName(self, typeName: str, typeNamespace: str, declaredType: System.Type, knownTypeResolver: DataContractResolver) -> System.Type: ...
    @overload
    def TryResolveType(self, type_: System.Type, declaredType: System.Type, knownTypeResolver: DataContractResolver) -> (bool, Xml.XmlDictionaryString, Xml.XmlDictionaryString): ...

class DataContractSerializer(XmlObjectSerializer):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, type_: System.Type, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, type_: System.Type, settings: DataContractSerializerSettings): ...
    @overload
    def __init__(self, type_: System.Type, rootName: str, rootNamespace: str): ...
    @overload
    def __init__(self, type_: System.Type, rootName: Xml.XmlDictionaryString, rootNamespace: Xml.XmlDictionaryString): ...
    @overload
    def __init__(self, type_: System.Type, rootName: str, rootNamespace: str, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, type_: System.Type, rootName: Xml.XmlDictionaryString, rootNamespace: Xml.XmlDictionaryString, knownTypes: Generic.IEnumerable): ...
    @property
    def DataContractResolver(self) -> DataContractResolver: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def PreserveObjectReferences(self) -> bool: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @overload
    def IsStartObject(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: Xml.XmlDictionaryReader) -> bool: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader, verifyObjectName: bool) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader, verifyObjectName: bool) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader, verifyObjectName: bool, dataContractResolver: DataContractResolver) -> object: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlDictionaryWriter, graph: object, dataContractResolver: DataContractResolver) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...

class DataContractSerializerExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetSerializationSurrogateProvider(serializer: DataContractSerializer) -> ISerializationSurrogateProvider: ...
    @overload
    @staticmethod
    def SetSerializationSurrogateProvider(serializer: DataContractSerializer, provider: ISerializationSurrogateProvider) -> None: ...

class DataContractSerializerSettings(object):
    """    """
    def __init__(self): ...
    @property
    def DataContractResolver(self) -> DataContractResolver: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> Generic.IEnumerable: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def PreserveObjectReferences(self) -> bool: ...
    @property
    def RootName(self) -> Xml.XmlDictionaryString: ...
    @property
    def RootNamespace(self) -> Xml.XmlDictionaryString: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @DataContractResolver.setter
    def DataContractResolver(self, value: System.Void): ...
    @IgnoreExtensionDataObject.setter
    def IgnoreExtensionDataObject(self, value: System.Void): ...
    @KnownTypes.setter
    def KnownTypes(self, value: System.Void): ...
    @MaxItemsInObjectGraph.setter
    def MaxItemsInObjectGraph(self, value: System.Void): ...
    @PreserveObjectReferences.setter
    def PreserveObjectReferences(self, value: System.Void): ...
    @RootName.setter
    def RootName(self, value: System.Void): ...
    @RootNamespace.setter
    def RootNamespace(self, value: System.Void): ...
    @SerializeReadOnlyTypes.setter
    def SerializeReadOnlyTypes(self, value: System.Void): ...

class ExportOptions(object):
    """    """
    def __init__(self): ...
    @property
    def DataContractSurrogate(self) -> ISerializationSurrogateProvider: ...
    @property
    def KnownTypes(self) -> ObjectModel.Collection: ...
    @DataContractSurrogate.setter
    def DataContractSurrogate(self, value: System.Void): ...

class ExtensionDataObject(object):
    """    """

class IExtensibleDataObject:
    """    """
    @property
    def ExtensionData(self) -> ExtensionDataObject: ...
    @ExtensionData.setter
    def ExtensionData(self, value: System.Void): ...

class XmlObjectSerializer(object):
    """    """
    @overload
    def IsStartObject(self, reader: Xml.XmlDictionaryReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader) -> object: ...
    @overload
    def ReadObject(self, stream: IO.Stream) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader, verifyObjectName: bool) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader, verifyObjectName: bool) -> object: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteObject(self, stream: IO.Stream, graph: object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...

class XmlSerializableServices(object):
    """    """
    @overload
    @staticmethod
    def AddDefaultSchema(schemas: Schema.XmlSchemaSet, typeQName: Xml.XmlQualifiedName) -> None: ...
    @overload
    @staticmethod
    def ReadNodes(xmlReader: Xml.XmlReader) -> Xml.System.Array[Xml.XmlNode]: ...
    @overload
    @staticmethod
    def WriteNodes(xmlWriter: Xml.XmlWriter, nodes: Xml.System.Array[Xml.XmlNode]) -> None: ...

class XPathQueryGenerator(object):
    """    """
    @overload
    @staticmethod
    def CreateFromDataContractSerializer(type_: System.Type, pathToMember: Reflection.System.Array[Reflection.MemberInfo]) -> (str, Xml.XmlNamespaceManager): ...
    @overload
    @staticmethod
    def CreateFromDataContractSerializer(type_: System.Type, pathToMember: Reflection.System.Array[Reflection.MemberInfo], rootElementXpath: Text.StringBuilder) -> (str, Xml.XmlNamespaceManager): ...

class XsdDataContractExporter(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, schemas: Schema.XmlSchemaSet): ...
    @overload
    def CanExport(self, assemblies: Generic.ICollection) -> bool: ...
    @overload
    def CanExport(self, types: Generic.ICollection) -> bool: ...
    @overload
    def CanExport(self, type_: System.Type) -> bool: ...
    @overload
    def Export(self, assemblies: Generic.ICollection) -> None: ...
    @overload
    def Export(self, types: Generic.ICollection) -> None: ...
    @overload
    def Export(self, type_: System.Type) -> None: ...
    @property
    def Options(self) -> ExportOptions: ...
    @property
    def Schemas(self) -> Schema.XmlSchemaSet: ...
    @overload
    def GetRootElementName(self, type_: System.Type) -> Xml.XmlQualifiedName: ...
    @overload
    def GetSchemaType(self, type_: System.Type) -> Schema.XmlSchemaType: ...
    @overload
    def GetSchemaTypeName(self, type_: System.Type) -> Xml.XmlQualifiedName: ...
    @Options.setter
    def Options(self, value: System.Void): ...

class DateTimeFormat(object):
    """    """
    @overload
    def __init__(self, formatString: str): ...
    @overload
    def __init__(self, formatString: str, formatProvider: System.IFormatProvider): ...
    @property
    def DateTimeStyles(self) -> Globalization.DateTimeStyles: ...
    @property
    def FormatProvider(self) -> System.IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @DateTimeStyles.setter
    def DateTimeStyles(self, value: System.Void): ...

class EmitTypeInformation(enum.Enum):
    AsNeeded = 0
    Always = 1
    Never = 2

class JsonFormatGeneratorStatics(object):
    """    """
    @property
    def BoxPointer(self) -> Reflection.MethodInfo: ...
    @property
    def CollectionItemNameProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def ExtensionDataObjectCtor(self) -> Reflection.ConstructorInfo: ...
    @property
    def ExtensionDataProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def GetCurrentMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetItemContractMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetJsonDataContractMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetJsonMemberIndexMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetJsonMemberNameMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetRevisedItemContractMethod(self) -> Reflection.MethodInfo: ...
    @property
    def GetUninitializedObjectMethod(self) -> Reflection.MethodInfo: ...
    @property
    def IsStartElementMethod0(self) -> Reflection.MethodInfo: ...
    @property
    def IsStartElementMethod2(self) -> Reflection.MethodInfo: ...
    @property
    def LocalNameProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def MoveNextMethod(self) -> Reflection.MethodInfo: ...
    @property
    def MoveToContentMethod(self) -> Reflection.MethodInfo: ...
    @property
    def NamespaceProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def NodeTypeProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def OnDeserializationMethod(self) -> Reflection.MethodInfo: ...
    @property
    def ParseEnumMethod(self) -> Reflection.MethodInfo: ...
    @property
    def ReadJsonValueMethod(self) -> Reflection.MethodInfo: ...
    @property
    def SerializationExceptionCtor(self) -> Reflection.ConstructorInfo: ...
    @property
    def SerInfoCtorArgs(self) -> System.System.Array[System.Type]: ...
    @property
    def ThrowDuplicateMemberExceptionMethod(self) -> Reflection.MethodInfo: ...
    @property
    def ThrowMissingRequiredMembersMethod(self) -> Reflection.MethodInfo: ...
    @property
    def TypeHandleProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def UnboxPointer(self) -> Reflection.MethodInfo: ...
    @property
    def UseSimpleDictionaryFormatReadProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def UseSimpleDictionaryFormatWriteProperty(self) -> Reflection.PropertyInfo: ...
    @property
    def WriteAttributeStringMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteEndElementMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteJsonISerializableMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteJsonNameWithMappingMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteJsonValueMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteStartElementMethod(self) -> Reflection.MethodInfo: ...
    @property
    def WriteStartElementStringMethod(self) -> Reflection.MethodInfo: ...

# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class GeneratedXmlSerializers(object):
    """    """
    def __init__(self): ...
    @property
    def IsInitialized(self) -> bool: ...
    @overload
    @staticmethod
    def GetGeneratedSerializers() -> Generic.Dictionary: ...

# endregion
