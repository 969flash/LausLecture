"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["DataContractJsonSerializer", "DataContractJsonSerializerExtensions", "DataContractJsonSerializerSettings", "IXmlJsonReaderInitializer", "IXmlJsonWriterInitializer", "JsonReaderWriterFactory"]
# endregion

# region: Imports
from System import IO
from System import Text
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import System
# endregion

# region: System.Private.DataContractSerialization, Version=7.0.0.0

class DataContractJsonSerializer(Serialization.XmlObjectSerializer):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, type_: System.Type, rootName: str): ...
    @overload
    def __init__(self, type_: System.Type, rootName: Xml.XmlDictionaryString): ...
    @overload
    def __init__(self, type_: System.Type, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, type_: System.Type, settings: DataContractJsonSerializerSettings): ...
    @overload
    def __init__(self, type_: System.Type, rootName: str, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, type_: System.Type, rootName: Xml.XmlDictionaryString, knownTypes: Generic.IEnumerable): ...
    @property
    def DateTimeFormat(self) -> Serialization.DateTimeFormat: ...
    @property
    def EmitTypeInformation(self) -> Serialization.EmitTypeInformation: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @property
    def UseSimpleDictionaryFormat(self) -> bool: ...
    @overload
    def GetSerializationSurrogateProvider() -> Serialization.ISerializationSurrogateProvider: ...
    @overload
    def IsStartObject(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: Xml.XmlDictionaryReader) -> bool: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader) -> object: ...
    @overload
    def ReadObject(self, stream: IO.Stream) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlDictionaryReader, verifyObjectName: bool) -> object: ...
    @overload
    def ReadObject(self, reader: Xml.XmlReader, verifyObjectName: bool) -> object: ...
    @overload
    def SetSerializationSurrogateProvider(self, provider: Serialization.ISerializationSurrogateProvider) -> None: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteObject(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteObject(self, stream: IO.Stream, graph: object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlWriter, graph: object) -> None: ...
    @overload
    def WriteStartObject(self, writer: Xml.XmlDictionaryWriter, graph: object) -> None: ...

class DataContractJsonSerializerExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetSerializationSurrogateProvider(serializer: DataContractJsonSerializer) -> Serialization.ISerializationSurrogateProvider: ...
    @overload
    @staticmethod
    def SetSerializationSurrogateProvider(serializer: DataContractJsonSerializer, provider: Serialization.ISerializationSurrogateProvider) -> None: ...

class DataContractJsonSerializerSettings(object):
    """    """
    def __init__(self): ...
    @property
    def DateTimeFormat(self) -> Serialization.DateTimeFormat: ...
    @property
    def EmitTypeInformation(self) -> Serialization.EmitTypeInformation: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> Generic.IEnumerable: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def RootName(self) -> str: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @property
    def UseSimpleDictionaryFormat(self) -> bool: ...
    @DateTimeFormat.setter
    def DateTimeFormat(self, value: System.Void): ...
    @EmitTypeInformation.setter
    def EmitTypeInformation(self, value: System.Void): ...
    @IgnoreExtensionDataObject.setter
    def IgnoreExtensionDataObject(self, value: System.Void): ...
    @KnownTypes.setter
    def KnownTypes(self, value: System.Void): ...
    @MaxItemsInObjectGraph.setter
    def MaxItemsInObjectGraph(self, value: System.Void): ...
    @RootName.setter
    def RootName(self, value: System.Void): ...
    @SerializeReadOnlyTypes.setter
    def SerializeReadOnlyTypes(self, value: System.Void): ...
    @UseSimpleDictionaryFormat.setter
    def UseSimpleDictionaryFormat(self, value: System.Void): ...

class IXmlJsonReaderInitializer:
    """    """
    @overload
    def SetInput(self, stream: IO.Stream, encoding: Text.Encoding, quotas: Xml.XmlDictionaryReaderQuotas, onClose: Xml.OnXmlDictionaryReaderClose) -> None: ...
    @overload
    def SetInput(self, buffer: System.System.Array[System.Byte], offset: int, count: int, encoding: Text.Encoding, quotas: Xml.XmlDictionaryReaderQuotas, onClose: Xml.OnXmlDictionaryReaderClose) -> None: ...

class IXmlJsonWriterInitializer:
    """    """
    @overload
    def SetOutput(self, stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool) -> None: ...

class JsonReaderWriterFactory(object):
    """    """
    @overload
    @staticmethod
    def CreateJsonReader(stream: IO.Stream, quotas: Xml.XmlDictionaryReaderQuotas) -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateJsonReader(buffer: System.System.Array[System.Byte], quotas: Xml.XmlDictionaryReaderQuotas) -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateJsonReader(stream: IO.Stream, encoding: Text.Encoding, quotas: Xml.XmlDictionaryReaderQuotas, onClose: Xml.OnXmlDictionaryReaderClose) -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateJsonReader(buffer: System.System.Array[System.Byte], offset: int, count: int, quotas: Xml.XmlDictionaryReaderQuotas) -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateJsonReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encoding: Text.Encoding, quotas: Xml.XmlDictionaryReaderQuotas, onClose: Xml.OnXmlDictionaryReaderClose) -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateJsonWriter(stream: IO.Stream) -> Xml.XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateJsonWriter(stream: IO.Stream, encoding: Text.Encoding) -> Xml.XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateJsonWriter(stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool) -> Xml.XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateJsonWriter(stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool, indent: bool) -> Xml.XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateJsonWriter(stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool, indent: bool, indentChars: str) -> Xml.XmlDictionaryWriter: ...

# endregion
