"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IRuntimeVariables", "RuntimeOps", "ReadOnlyCollectionBuilder", "RuleCache", "CallSite", "CallSiteBinder", "CallSiteOps", "CallSiteHelpers", "DynamicAttribute", "DebugInfoGenerator", "Closure"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["IsPinned", "IsBoxed", "IsByValue", "IsCopyConstructed", "IsExplicitlyDereferenced", "IsImplicitlyDereferenced", "IsJitIntrinsic", "IsLong", "IsSignUnspecifiedByte", "IsUdtReturn", "HasCopySemanticsAttribute", "ScopelessEnumAttribute", "NativeCppClassAttribute", "CppInlineNamespaceAttribute", "RequiredAttributeAttribute", "CompilerMarshalOverride"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["IDispatchConstantAttribute", "IUnknownConstantAttribute"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["RuntimeFeature", "RuntimeHelpers", "TryCode", "CleanupCode", "AccessedThroughPropertyAttribute", "AsyncIteratorMethodBuilder", "AsyncIteratorStateMachineAttribute", "AsyncMethodBuilderAttribute", "AsyncStateMachineAttribute", "AsyncTaskMethodBuilder", "AsyncValueTaskMethodBuilder", "AsyncVoidMethodBuilder", "CallerArgumentExpressionAttribute", "CallerFilePathAttribute", "CallerLineNumberAttribute", "CallerMemberNameAttribute", "CallConvCdecl", "CallConvFastcall", "CallConvStdcall", "CallConvSuppressGCTransition", "CallConvThiscall", "CallConvMemberFunction", "CompilationRelaxations", "CompilationRelaxationsAttribute", "CompilerFeatureRequiredAttribute", "CompilerGeneratedAttribute", "CompilerGlobalScopeAttribute", "ConditionalWeakTable", "CreateValueCallback", "ConfiguredAsyncDisposable", "ConfiguredCancelableAsyncEnumerable", "Enumerator", "ConfiguredValueTaskAwaitable", "ConfiguredValueTaskAwaiter", "ContractHelper", "CreateNewOnMetadataUpdateAttribute", "CustomConstantAttribute", "DateTimeConstantAttribute", "DecimalConstantAttribute", "DefaultDependencyAttribute", "DependencyAttribute", "DisableRuntimeMarshallingAttribute", "DiscardableAttribute", "EnumeratorCancellationAttribute", "ExtensionAttribute", "FixedAddressValueTypeAttribute", "FixedBufferAttribute", "FormattableStringFactory", "IAsyncStateMachine", "ICastable", "IndexerNameAttribute", "INotifyCompletion", "ICriticalNotifyCompletion", "InternalsVisibleToAttribute", "IsByRefLikeAttribute", "IsConst", "IsExternalInit", "IsReadOnlyAttribute", "IsVolatile", "InterpolatedStringHandlerAttribute", "InterpolatedStringHandlerArgumentAttribute", "IteratorStateMachineAttribute", "ITuple", "LoadHint", "MethodCodeType", "MethodImplAttribute", "MethodImplOptions", "ModuleInitializerAttribute", "MetadataUpdateOriginalTypeAttribute", "ReferenceAssemblyAttribute", "PoolingAsyncValueTaskMethodBuilder", "PreserveBaseOverridesAttribute", "RequiredMemberAttribute", "RuntimeCompatibilityAttribute", "RuntimeWrappedException", "SkipLocalsInitAttribute", "SpecialNameAttribute", "StateMachineAttribute", "StringFreezingAttribute", "StrongBox", "IStrongBox", "SwitchExpressionException", "TaskAwaiter", "ConfiguredTaskAwaitable", "ConfiguredTaskAwaiter", "TupleElementNamesAttribute", "TypeForwardedFromAttribute", "TypeForwardedToAttribute", "Unsafe", "UnsafeValueTypeAttribute", "ValueTaskAwaiter", "YieldAwaitable", "YieldAwaiter"]
# endregion

# region: Imports
from System import Threading
from System.Collections import Generic
from System.Diagnostics import Contracts
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class RuntimeFeature(object):
    """    """
    @property
    def PortablePdb(self) -> str: ...
    @property
    def DefaultImplementationsOfInterfaces(self) -> str: ...
    @property
    def UnmanagedSignatureCallingConvention(self) -> str: ...
    @property
    def CovariantReturnsOfClasses(self) -> str: ...
    @property
    def ByRefFields(self) -> str: ...
    @property
    def VirtualStaticsInInterfaces(self) -> str: ...
    @property
    def NumericIntPtr(self) -> str: ...
    @property
    def IsDynamicCodeCompiled(self) -> bool: ...
    @property
    def IsDynamicCodeSupported(self) -> bool: ...
    @overload
    @staticmethod
    def IsSupported(feature: str) -> bool: ...

class RuntimeHelpers(object):
    """    """
    @overload
    @staticmethod
    def AllocateTypeAssociatedMemory(type_: System.Type, size: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def CreateSpan(fldHandle: System.RuntimeFieldHandle) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def EnsureSufficientExecutionStack() -> None: ...
    @overload
    @staticmethod
    def Equals(o1: object, o2: object) -> bool: ...
    @property
    def OffsetToStringData(self) -> int: ...
    @overload
    @staticmethod
    def GetHashCode(o: object) -> int: ...
    @overload
    @staticmethod
    def GetObjectValue(obj: object) -> object: ...
    @overload
    @staticmethod
    def GetSubArray(array: System.Array[T], range_: System.Range) -> System.Array[T]: ...
    @overload
    @staticmethod
    def GetUninitializedObject(type_: System.Type) -> object: ...
    @overload
    @staticmethod
    def InitializeArray(array: System.Array, fldHandle: System.RuntimeFieldHandle) -> None: ...
    @overload
    @staticmethod
    def IsReferenceOrContainsReferences() -> bool: ...
    @overload
    @staticmethod
    def PrepareDelegate(d: System.Delegate) -> None: ...
    @overload
    @staticmethod
    def PrepareMethod(method: System.RuntimeMethodHandle) -> None: ...
    @overload
    @staticmethod
    def PrepareMethod(method: System.RuntimeMethodHandle, instantiation: System.System.Array[System.RuntimeTypeHandle]) -> None: ...
    @overload
    @staticmethod
    def RunClassConstructor(type_: System.RuntimeTypeHandle) -> None: ...
    @overload
    @staticmethod
    def RunModuleConstructor(module: System.ModuleHandle) -> None: ...
    @overload
    @staticmethod
    def TryEnsureSufficientExecutionStack() -> bool: ...

class TryCode(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, userData: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, userData: object) -> None: ...

class CleanupCode(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, userData: object, exceptionThrown: bool, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, userData: object, exceptionThrown: bool) -> None: ...

class AccessedThroughPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...

class AsyncIteratorMethodBuilder(System.ValueType):
    """    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def Complete() -> None: ...
    @overload
    @staticmethod
    def Create() -> AsyncIteratorMethodBuilder: ...
    @overload
    def MoveNext() -> (TStateMachine): ...

class AsyncIteratorStateMachineAttribute(StateMachineAttribute):
    """    """
    def __init__(self, stateMachineType: System.Type): ...

class AsyncMethodBuilderAttribute(System.Attribute):
    """    """
    def __init__(self, builderType: System.Type): ...
    @property
    def BuilderType(self) -> System.Type: ...

class AsyncStateMachineAttribute(StateMachineAttribute):
    """    """
    def __init__(self, stateMachineType: System.Type): ...

class AsyncTaskMethodBuilder(System.ValueType):
    """    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> AsyncTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.Task: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult() -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class AsyncTaskMethodBuilder(System.ValueType):
    """    AsyncTaskMethodBuilder[TResult]
    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> AsyncTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.Task: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult(self, result: TResult) -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class AsyncValueTaskMethodBuilder(System.ValueType):
    """    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> AsyncValueTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.ValueTask: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult() -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class AsyncValueTaskMethodBuilder(System.ValueType):
    """    AsyncValueTaskMethodBuilder[TResult]
    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> AsyncValueTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.ValueTask: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult(self, result: TResult) -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class AsyncVoidMethodBuilder(System.ValueType):
    """    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> AsyncVoidMethodBuilder: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult() -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class CallerArgumentExpressionAttribute(System.Attribute):
    """    """
    def __init__(self, parameterName: str): ...
    @property
    def ParameterName(self) -> str: ...

class CallerFilePathAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CallerLineNumberAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CallerMemberNameAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CallConvCdecl(object):
    """    """
    def __init__(self): ...

class CallConvFastcall(object):
    """    """
    def __init__(self): ...

class CallConvStdcall(object):
    """    """
    def __init__(self): ...

class CallConvSuppressGCTransition(object):
    """    """
    def __init__(self): ...

class CallConvThiscall(object):
    """    """
    def __init__(self): ...

class CallConvMemberFunction(object):
    """    """
    def __init__(self): ...

class CompilationRelaxations(enum.Enum):
    NoStringInterning = 8

class CompilationRelaxationsAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, relaxations: int): ...
    @overload
    def __init__(self, relaxations: CompilationRelaxations): ...
    @property
    def CompilationRelaxations(self) -> int: ...

class CompilerFeatureRequiredAttribute(System.Attribute):
    """    """
    def __init__(self, featureName: str): ...
    @property
    def RefStructs(self) -> str: ...
    @property
    def RequiredMembers(self) -> str: ...
    @property
    def FeatureName(self) -> str: ...
    @property
    def IsOptional(self) -> bool: ...
    @IsOptional.setter
    def IsOptional(self, value: System.Void): ...

class CompilerGeneratedAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CompilerGlobalScopeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ConditionalWeakTable(object):
    """    ConditionalWeakTable[TKey, TValue]
    """
    def __init__(self): ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def AddOrUpdate(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def GetOrCreateValue(self, key: TKey) -> TValue: ...
    @overload
    def GetValue(self, key: TKey, createValueCallback: CreateValueCallback) -> TValue: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def TryAdd(self, key: TKey, value: TValue) -> bool: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class CreateValueCallback(System.MulticastDelegate):
    """    CreateValueCallback[TKey, TValue]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, key: TKey, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> TValue: ...
    @overload
    def Invoke(self, key: TKey) -> TValue: ...

class ConfiguredAsyncDisposable(System.ValueType):
    """    """
    @overload
    def DisposeAsync() -> ConfiguredValueTaskAwaitable: ...

class ConfiguredCancelableAsyncEnumerable(System.ValueType):
    """    ConfiguredCancelableAsyncEnumerable[T]
    """
    @overload
    def ConfigureAwait(self, continueOnCapturedContext: bool) -> ConfiguredCancelableAsyncEnumerable: ...
    @overload
    def GetAsyncEnumerator() -> Enumerator: ...
    @overload
    def WithCancellation(self, cancellationToken: Threading.CancellationToken) -> ConfiguredCancelableAsyncEnumerable: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def DisposeAsync() -> ConfiguredValueTaskAwaitable: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNextAsync() -> ConfiguredValueTaskAwaitable: ...

class ConfiguredValueTaskAwaitable(System.ValueType):
    """    """
    @overload
    def GetAwaiter() -> ConfiguredValueTaskAwaiter: ...

class ConfiguredValueTaskAwaiter(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> None: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class ConfiguredValueTaskAwaitable(System.ValueType):
    """    ConfiguredValueTaskAwaitable[TResult]
    """
    @overload
    def GetAwaiter() -> ConfiguredValueTaskAwaiter: ...

class ConfiguredValueTaskAwaiter(System.ValueType):
    """    ConfiguredValueTaskAwaiter[TResult]
    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> TResult: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class ContractHelper(object):
    """    """
    @overload
    @staticmethod
    def RaiseContractFailedEvent(failureKind: Contracts.ContractFailureKind, userMessage: str, conditionText: str, innerException: System.Exception) -> str: ...
    @overload
    @staticmethod
    def TriggerFailure(kind: Contracts.ContractFailureKind, displayMessage: str, userMessage: str, conditionText: str, innerException: System.Exception) -> None: ...

class CreateNewOnMetadataUpdateAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CustomConstantAttribute(System.Attribute):
    """    """
    @property
    def Value(self) -> object: ...

class DateTimeConstantAttribute(CustomConstantAttribute):
    """    """
    def __init__(self, ticks: System.Int64): ...
    @property
    def Value(self) -> object: ...

class DecimalConstantAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, scale: System.Byte, sign: System.Byte, hi: System.UInt32, mid: System.UInt32, low: System.UInt32): ...
    @overload
    def __init__(self, scale: System.Byte, sign: System.Byte, hi: int, mid: int, low: int): ...
    @property
    def Value(self) -> System.Decimal: ...

class DefaultDependencyAttribute(System.Attribute):
    """    """
    def __init__(self, loadHintArgument: LoadHint): ...
    @property
    def LoadHint(self) -> LoadHint: ...

class DependencyAttribute(System.Attribute):
    """    """
    def __init__(self, dependentAssemblyArgument: str, loadHintArgument: LoadHint): ...
    @property
    def DependentAssembly(self) -> str: ...
    @property
    def LoadHint(self) -> LoadHint: ...

class DisableRuntimeMarshallingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DiscardableAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class EnumeratorCancellationAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ExtensionAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class FixedAddressValueTypeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class FixedBufferAttribute(System.Attribute):
    """    """
    def __init__(self, elementType: System.Type, length: int): ...
    @property
    def ElementType(self) -> System.Type: ...
    @property
    def Length(self) -> int: ...

class FormattableStringFactory(object):
    """    """
    @overload
    @staticmethod
    def Create(format_: str, arguments: System.System.Array[object]) -> System.FormattableString: ...

class IAsyncStateMachine:
    """    """
    @overload
    def MoveNext() -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...

class ICastable:
    """    """
    @overload
    def GetImplType(self, interfaceType: System.RuntimeTypeHandle) -> System.RuntimeTypeHandle: ...
    @overload
    def IsInstanceOfInterface(self, interfaceType: System.RuntimeTypeHandle) -> (bool, System.Exception): ...

class IndexerNameAttribute(System.Attribute):
    """    """
    def __init__(self, indexerName: str): ...

class INotifyCompletion:
    """    """
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...

class ICriticalNotifyCompletion:
    """    """
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class InternalsVisibleToAttribute(System.Attribute):
    """    """
    def __init__(self, assemblyName: str): ...
    @property
    def AllInternalsVisible(self) -> bool: ...
    @property
    def AssemblyName(self) -> str: ...
    @AllInternalsVisible.setter
    def AllInternalsVisible(self, value: System.Void): ...

class IsByRefLikeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class IsConst(object):
    """    """

class IsExternalInit(object):
    """    """

class IsReadOnlyAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class IsVolatile(object):
    """    """

class InterpolatedStringHandlerAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class InterpolatedStringHandlerArgumentAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, argument: str): ...
    @overload
    def __init__(self, arguments: System.System.Array[str]): ...
    @property
    def Arguments(self) -> System.System.Array[str]: ...

class IteratorStateMachineAttribute(StateMachineAttribute):
    """    """
    def __init__(self, stateMachineType: System.Type): ...

class ITuple:
    """    """
    @property
    def Item(self) -> object: ...
    @property
    def Length(self) -> int: ...

class LoadHint(enum.Enum):
    Default = 0
    Always = 1
    Sometimes = 2

class MethodCodeType(enum.Enum):
    IL = 0
    Native = 1
    OPTIL = 2
    Runtime = 3

class MethodImplAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: System.Int16): ...
    @overload
    def __init__(self, methodImplOptions: MethodImplOptions): ...
    @property
    def MethodCodeType(self) -> MethodCodeType: ...
    @property
    def Value(self) -> MethodImplOptions: ...

class MethodImplOptions(enum.Enum):
    Unmanaged = 4
    NoInlining = 8
    ForwardRef = 16
    Synchronized = 32
    NoOptimization = 64
    PreserveSig = 128
    AggressiveInlining = 256
    AggressiveOptimization = 512
    InternalCall = 4096

class ModuleInitializerAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class MetadataUpdateOriginalTypeAttribute(System.Attribute):
    """    """
    def __init__(self, originalType: System.Type): ...
    @property
    def OriginalType(self) -> System.Type: ...

class ReferenceAssemblyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...

class PoolingAsyncValueTaskMethodBuilder(System.ValueType):
    """    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> PoolingAsyncValueTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.ValueTask: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult() -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class PoolingAsyncValueTaskMethodBuilder(System.ValueType):
    """    PoolingAsyncValueTaskMethodBuilder[TResult]
    """
    @overload
    def AwaitOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    def AwaitUnsafeOnCompleted() -> (TAwaiter, TStateMachine): ...
    @overload
    @staticmethod
    def Create() -> PoolingAsyncValueTaskMethodBuilder: ...
    @property
    def Task(self) -> Tasks.ValueTask: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetResult(self, result: TResult) -> None: ...
    @overload
    def SetStateMachine(self, stateMachine: IAsyncStateMachine) -> None: ...
    @overload
    def Start() -> (TStateMachine): ...

class PreserveBaseOverridesAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class RequiredMemberAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class RuntimeCompatibilityAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def WrapNonExceptionThrows(self) -> bool: ...
    @WrapNonExceptionThrows.setter
    def WrapNonExceptionThrows(self, value: System.Void): ...

class RuntimeWrappedException(System.Exception):
    """    """
    def __init__(self, thrownObject: object): ...
    @property
    def WrappedException(self) -> object: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class SkipLocalsInitAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class SpecialNameAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class StateMachineAttribute(System.Attribute):
    """    """
    def __init__(self, stateMachineType: System.Type): ...
    @property
    def StateMachineType(self) -> System.Type: ...

class StringFreezingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class StrongBox(object):
    """    StrongBox[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: T): ...
    @property
    def Value(self) -> T: ...

class IStrongBox:
    """    """
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class SwitchExpressionException(System.InvalidOperationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, unmatchedValue: object): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Message(self) -> str: ...
    @property
    def UnmatchedValue(self) -> object: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class TaskAwaiter(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> None: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class TaskAwaiter(System.ValueType):
    """    TaskAwaiter[TResult]
    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> TResult: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class ConfiguredTaskAwaitable(System.ValueType):
    """    """
    @overload
    def GetAwaiter() -> ConfiguredTaskAwaiter: ...

class ConfiguredTaskAwaiter(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> None: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class ConfiguredTaskAwaitable(System.ValueType):
    """    ConfiguredTaskAwaitable[TResult]
    """
    @overload
    def GetAwaiter() -> ConfiguredTaskAwaiter: ...

class ConfiguredTaskAwaiter(System.ValueType):
    """    ConfiguredTaskAwaiter[TResult]
    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> TResult: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class TupleElementNamesAttribute(System.Attribute):
    """    """
    def __init__(self, transformNames: System.System.Array[str]): ...
    @property
    def TransformNames(self) -> Generic.IList: ...

class TypeForwardedFromAttribute(System.Attribute):
    """    """
    def __init__(self, assemblyFullName: str): ...
    @property
    def AssemblyFullName(self) -> str: ...

class TypeForwardedToAttribute(System.Attribute):
    """    """
    def __init__(self, destination: System.Type): ...
    @property
    def Destination(self) -> System.Type: ...

class Unsafe(object):
    """    """
    @overload
    @staticmethod
    def Add(elementOffset: int) -> (T, T): ...
    @overload
    @staticmethod
    def Add(elementOffset: System.IntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def Add(source: System.Void, elementOffset: int) -> System.Void: ...
    @overload
    @staticmethod
    def Add(elementOffset: System.UIntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def AddByteOffset(byteOffset: System.IntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def AddByteOffset(byteOffset: System.UIntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def AreSame() -> (bool, T, T): ...
    @overload
    @staticmethod
    def As(o: object) -> T: ...
    @overload
    @staticmethod
    def As() -> (TTo, TFrom): ...
    @overload
    @staticmethod
    def AsPointer() -> (System.Void, T): ...
    @overload
    @staticmethod
    def AsRef() -> (T, T): ...
    @overload
    @staticmethod
    def AsRef(source: System.Void) -> T: ...
    @overload
    @staticmethod
    def ByteOffset() -> (System.IntPtr, T, T): ...
    @overload
    @staticmethod
    def Copy(destination: System.Void) -> (T): ...
    @overload
    @staticmethod
    def Copy(source: System.Void) -> (T): ...
    @overload
    @staticmethod
    def CopyBlock(destination: System.Void, source: System.Void, byteCount: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def CopyBlock(byteCount: System.UInt32) -> (System.Byte, System.Byte): ...
    @overload
    @staticmethod
    def CopyBlockUnaligned(destination: System.Void, source: System.Void, byteCount: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def CopyBlockUnaligned(byteCount: System.UInt32) -> (System.Byte, System.Byte): ...
    @overload
    @staticmethod
    def InitBlock(value: System.Byte, byteCount: System.UInt32) -> (System.Byte): ...
    @overload
    @staticmethod
    def InitBlock(startAddress: System.Void, value: System.Byte, byteCount: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def InitBlockUnaligned(value: System.Byte, byteCount: System.UInt32) -> (System.Byte): ...
    @overload
    @staticmethod
    def InitBlockUnaligned(startAddress: System.Void, value: System.Byte, byteCount: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def IsAddressGreaterThan() -> (bool, T, T): ...
    @overload
    @staticmethod
    def IsAddressLessThan() -> (bool, T, T): ...
    @overload
    @staticmethod
    def IsNullRef() -> (bool, T): ...
    @overload
    @staticmethod
    def NullRef() -> T: ...
    @overload
    @staticmethod
    def Read(source: System.Void) -> T: ...
    @overload
    @staticmethod
    def ReadUnaligned() -> (T, System.Byte): ...
    @overload
    @staticmethod
    def ReadUnaligned(source: System.Void) -> T: ...
    @overload
    @staticmethod
    def SizeOf() -> int: ...
    @overload
    @staticmethod
    def SkipInit() -> (T): ...
    @overload
    @staticmethod
    def Subtract(elementOffset: int) -> (T, T): ...
    @overload
    @staticmethod
    def Subtract(source: System.Void, elementOffset: int) -> System.Void: ...
    @overload
    @staticmethod
    def Subtract(elementOffset: System.UIntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def Subtract(elementOffset: System.IntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def SubtractByteOffset(byteOffset: System.IntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def SubtractByteOffset(byteOffset: System.UIntPtr) -> (T, T): ...
    @overload
    @staticmethod
    def Unbox(box: object) -> T: ...
    @overload
    @staticmethod
    def Write(destination: System.Void, value: T) -> None: ...
    @overload
    @staticmethod
    def WriteUnaligned(destination: System.Void, value: T) -> None: ...
    @overload
    @staticmethod
    def WriteUnaligned(value: T) -> (System.Byte): ...

class UnsafeValueTypeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ValueTaskAwaiter(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> None: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class ValueTaskAwaiter(System.ValueType):
    """    ValueTaskAwaiter[TResult]
    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> TResult: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

class YieldAwaitable(System.ValueType):
    """    """
    @overload
    def GetAwaiter() -> YieldAwaiter: ...

class YieldAwaiter(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @overload
    def GetResult() -> None: ...
    @overload
    def OnCompleted(self, continuation: System.Action) -> None: ...
    @overload
    def UnsafeOnCompleted(self, continuation: System.Action) -> None: ...

# endregion

# region: System.Runtime.InteropServices, Version=7.0.0.0

class IDispatchConstantAttribute(CustomConstantAttribute):
    """    """
    def __init__(self): ...
    @property
    def Value(self) -> object: ...

class IUnknownConstantAttribute(CustomConstantAttribute):
    """    """
    def __init__(self): ...
    @property
    def Value(self) -> object: ...

# endregion

# region: System.Runtime.CompilerServices.VisualC, Version=7.0.0.0

class IsPinned(object):
    """    """

class IsBoxed(object):
    """    """

class IsByValue(object):
    """    """

class IsCopyConstructed(object):
    """    """

class IsExplicitlyDereferenced(object):
    """    """

class IsImplicitlyDereferenced(object):
    """    """

class IsJitIntrinsic(object):
    """    """

class IsLong(object):
    """    """

class IsSignUnspecifiedByte(object):
    """    """

class IsUdtReturn(object):
    """    """

class HasCopySemanticsAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ScopelessEnumAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class NativeCppClassAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CppInlineNamespaceAttribute(System.Attribute):
    """    """
    def __init__(self, dottedName: str): ...

class RequiredAttributeAttribute(System.Attribute):
    """    """
    def __init__(self, requiredContract: System.Type): ...
    @property
    def RequiredContract(self) -> System.Type: ...

class CompilerMarshalOverride(object):
    """    """

# endregion

# region: System.Linq.Expressions, Version=7.0.0.0

class IRuntimeVariables:
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class RuntimeOps(object):
    """    """

class ReadOnlyCollectionBuilder(object):
    """    ReadOnlyCollectionBuilder[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, collection: Generic.IEnumerable): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Reverse() -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def ToArray() -> System.Array[T]: ...
    @overload
    def ToReadOnlyCollection() -> ObjectModel.ReadOnlyCollection: ...

class RuleCache(object):
    """    RuleCache[T]
    """

class CallSite(object):
    """    """
    @overload
    @staticmethod
    def Create(delegateType: System.Type, binder: CallSiteBinder) -> CallSite: ...
    @property
    def Binder(self) -> CallSiteBinder: ...

class CallSite(CallSite):
    """    CallSite[T]
    """
    @property
    def Target(self) -> T: ...
    @overload
    @staticmethod
    def Create(binder: CallSiteBinder) -> CallSite: ...
    @property
    def Update(self) -> T: ...

class CallSiteBinder(object):
    """    """
    @overload
    def Bind(self, args: System.System.Array[object], parameters: ObjectModel.ReadOnlyCollection, returnLabel: Expressions.LabelTarget) -> Expressions.Expression: ...
    @overload
    def BindDelegate(self, site: CallSite, args: System.System.Array[object]) -> T: ...
    @property
    def UpdateLabel(self) -> Expressions.LabelTarget: ...

class CallSiteOps(object):
    """    """

class CallSiteHelpers(object):
    """    """
    @overload
    @staticmethod
    def IsInternalFrame(mb: Reflection.MethodBase) -> bool: ...

class DynamicAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, transformFlags: System.System.Array[bool]): ...
    @property
    def TransformFlags(self) -> Generic.IList: ...

class DebugInfoGenerator(object):
    """    """
    @overload
    def MarkSequencePoint(self, method: Expressions.LambdaExpression, ilOffset: int, sequencePoint: Expressions.DebugInfoExpression) -> None: ...

class Closure(object):
    """    """
    def __init__(self, constants: System.System.Array[object], locals_: System.System.Array[object]): ...
    @property
    def Constants(self) -> System.System.Array[object]: ...
    @property
    def Locals(self) -> System.System.Array[object]: ...

# endregion
