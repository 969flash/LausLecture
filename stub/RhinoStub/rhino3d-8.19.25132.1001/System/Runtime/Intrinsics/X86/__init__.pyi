"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["X86Base", "X64", "FloatComparisonMode", "Aes", "Avx", "Avx2", "AvxVnni", "Bmi1", "Bmi2", "Fma", "Lzcnt", "Pclmulqdq", "Popcnt", "Sse", "Sse2", "Sse3", "Sse41", "Sse42", "Ssse3", "X86Serialize"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Runtime import Intrinsics
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class X86Base(object):
    """    """
    @overload
    @staticmethod
    def CpuId(functionId: int, subFunctionId: int) -> System.ValueTuple: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def Pause() -> None: ...

class X64(object):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class FloatComparisonMode(enum.Enum):
    OrderedEqualNonSignaling = 0
    OrderedLessThanSignaling = 1
    OrderedLessThanOrEqualSignaling = 2
    UnorderedNonSignaling = 3
    UnorderedNotEqualNonSignaling = 4
    UnorderedNotLessThanSignaling = 5
    UnorderedNotLessThanOrEqualSignaling = 6
    OrderedNonSignaling = 7
    UnorderedEqualNonSignaling = 8
    UnorderedNotGreaterThanOrEqualSignaling = 9
    UnorderedNotGreaterThanSignaling = 10
    OrderedFalseNonSignaling = 11
    OrderedNotEqualNonSignaling = 12
    OrderedGreaterThanOrEqualSignaling = 13
    OrderedGreaterThanSignaling = 14
    UnorderedTrueNonSignaling = 15
    OrderedEqualSignaling = 16
    OrderedLessThanNonSignaling = 17
    OrderedLessThanOrEqualNonSignaling = 18
    UnorderedSignaling = 19
    UnorderedNotEqualSignaling = 20
    UnorderedNotLessThanNonSignaling = 21
    UnorderedNotLessThanOrEqualNonSignaling = 22
    OrderedSignaling = 23
    UnorderedEqualSignaling = 24
    UnorderedNotGreaterThanOrEqualNonSignaling = 25
    UnorderedNotGreaterThanNonSignaling = 26
    OrderedFalseSignaling = 27
    OrderedNotEqualSignaling = 28
    OrderedGreaterThanOrEqualNonSignaling = 29
    OrderedGreaterThanNonSignaling = 30
    UnorderedTrueSignaling = 31

class Aes(Sse2):
    """    """
    @overload
    @staticmethod
    def Decrypt(value: Intrinsics.Vector128, roundKey: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def DecryptLast(value: Intrinsics.Vector128, roundKey: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Encrypt(value: Intrinsics.Vector128, roundKey: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def EncryptLast(value: Intrinsics.Vector128, roundKey: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def InverseMixColumns(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def KeygenAssist(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Avx(Sse42):
    """    """
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Double) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Single) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Single) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Double) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Ceiling(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Ceiling(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Compare(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mode: FloatComparisonMode) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Compare(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mode: FloatComparisonMode) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Compare(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mode: FloatComparisonMode) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Compare(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mode: FloatComparisonMode) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareLessThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareLessThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotGreaterThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotGreaterThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotLessThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotLessThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotLessThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareNotLessThanOrEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareOrdered(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareOrdered(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mode: FloatComparisonMode) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mode: FloatComparisonMode) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareUnordered(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareUnordered(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector256) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32WithTruncation(value: Intrinsics.Vector256) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Single(value: Intrinsics.Vector256) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector256Double(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Double(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32WithTruncation(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Single(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Divide(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Divide(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def DotProduct(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def DuplicateEvenIndexed(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def DuplicateEvenIndexed(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def DuplicateOddIndexed(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Floor(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Floor(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Double) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Single) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadDquVector256(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Single) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadVector256(address: System.Double) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Single, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Double, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Single, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Double, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Double, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Single, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Double, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Single, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector256) -> int: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector256) -> int: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Permute(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Permute(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PermuteVar(left: Intrinsics.Vector128, control: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PermuteVar(left: Intrinsics.Vector128, control: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PermuteVar(left: Intrinsics.Vector256, control: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PermuteVar(left: Intrinsics.Vector256, control: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Reciprocal(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ReciprocalSqrt(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundCurrentDirection(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundCurrentDirection(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToNearestInteger(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToNearestInteger(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinity(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinity(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinity(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinity(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToZero(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def RoundToZero(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Sqrt(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Sqrt(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Store(address: System.SByte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Int64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Single, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Double, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Int32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Int16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Byte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Byte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.SByte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Double, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Single, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Single, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt64, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int32, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int16, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.SByte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Double, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Byte, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> bool: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Avx2(Avx):
    """    """
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Average(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Average(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(source: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector128(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(source: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastScalarToVector256(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def BroadcastVector128ToVector256(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToInt32(value: Intrinsics.Vector256) -> int: ...
    @overload
    @staticmethod
    def ConvertToUInt32(value: Intrinsics.Vector256) -> System.UInt32: ...
    @overload
    @staticmethod
    def ConvertToVector256Int16(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int16(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int16(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int16(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ConvertToVector256Int64(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ExtractVector128(value: Intrinsics.Vector256, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.UInt32, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Int64, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.UInt64, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Single, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Double, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.UInt64, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.UInt32, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Int64, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Int32, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Single, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Double, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Int32, index: Intrinsics.Vector128, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Int32, index: Intrinsics.Vector256, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.UInt32, index: Intrinsics.Vector256, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector128(source: Intrinsics.Vector128, baseAddress: System.Single, index: Intrinsics.Vector256, mask: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Int64, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Int32, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.UInt64, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.UInt64, index: Intrinsics.Vector128, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Single, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Int64, index: Intrinsics.Vector128, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.UInt32, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Double, index: Intrinsics.Vector128, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherMaskVector256(source: Intrinsics.Vector256, baseAddress: System.Double, index: Intrinsics.Vector256, mask: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.UInt32, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Int32, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.UInt32, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Int64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.UInt64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Single, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Int32, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.UInt32, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Int64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Single, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Double, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Int32, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Single, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.Double, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector128(baseAddress: System.UInt64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Int64, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.UInt64, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Double, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Single, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.UInt64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Int64, index: Intrinsics.Vector128, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.UInt32, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Int32, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def GatherVector256(baseAddress: System.Double, index: Intrinsics.Vector256, scale: System.Byte) -> Intrinsics.Vector256: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalAddSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def HorizontalSubtractSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def InsertVector128(value: Intrinsics.Vector256, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.UInt16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.Int32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.UInt32) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.Int64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.UInt64) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.SByte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedVector256NonTemporal(address: System.Int16) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.UInt64, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Int64, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.UInt64, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Int32, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Int64, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.Int32, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.UInt32, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MaskLoad(address: System.UInt32, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Int64, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.UInt64, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Int32, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.UInt64, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.UInt32, mask: Intrinsics.Vector256, source: Intrinsics.Vector256) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Int32, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.UInt32, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def MaskStore(address: System.Int64, mask: Intrinsics.Vector128, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector256) -> int: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector256) -> int: ...
    @overload
    @staticmethod
    def MultipleSumAbsoluteDifferences(left: Intrinsics.Vector256, right: Intrinsics.Vector256, mask: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddAdjacent(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddAdjacent(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyHighRoundScale(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PackSignedSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PackSignedSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PackUnsignedSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PackUnsignedSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute2x128(left: Intrinsics.Vector256, right: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute4x64(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute4x64(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Permute4x64(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PermuteVar8x32(left: Intrinsics.Vector256, control: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PermuteVar8x32(left: Intrinsics.Vector256, control: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def PermuteVar8x32(left: Intrinsics.Vector256, control: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmeticVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmeticVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector256, count: Intrinsics.Vector128) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector256, numBytes: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogicalVariable(value: Intrinsics.Vector256, count: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, mask: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShuffleHigh(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShuffleHigh(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShuffleLow(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def ShuffleLow(value: Intrinsics.Vector256, control: System.Byte) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def SumAbsoluteDifferences(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class AvxVnni(Avx2):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAdd(addend: Intrinsics.Vector128, left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAdd(addend: Intrinsics.Vector128, left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAdd(addend: Intrinsics.Vector256, left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAdd(addend: Intrinsics.Vector256, left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAddSaturate(addend: Intrinsics.Vector128, left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAddSaturate(addend: Intrinsics.Vector128, left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAddSaturate(addend: Intrinsics.Vector256, left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyWideningAndAddSaturate(addend: Intrinsics.Vector256, left: Intrinsics.Vector256, right: Intrinsics.Vector256) -> Intrinsics.Vector256: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Bmi1(X86Base):
    """    """
    @overload
    @staticmethod
    def AndNot(left: System.UInt32, right: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def BitFieldExtract(value: System.UInt32, control: System.UInt16) -> System.UInt32: ...
    @overload
    @staticmethod
    def BitFieldExtract(value: System.UInt32, start: System.Byte, length: System.Byte) -> System.UInt32: ...
    @overload
    @staticmethod
    def ExtractLowestSetBit(value: System.UInt32) -> System.UInt32: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def GetMaskUpToLowestSetBit(value: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def ResetLowestSetBit(value: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.UInt32) -> System.UInt32: ...

class X64(X64):
    """    """
    @overload
    @staticmethod
    def AndNot(left: System.UInt64, right: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def BitFieldExtract(value: System.UInt64, control: System.UInt16) -> System.UInt64: ...
    @overload
    @staticmethod
    def BitFieldExtract(value: System.UInt64, start: System.Byte, length: System.Byte) -> System.UInt64: ...
    @overload
    @staticmethod
    def ExtractLowestSetBit(value: System.UInt64) -> System.UInt64: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def GetMaskUpToLowestSetBit(value: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def ResetLowestSetBit(value: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.UInt64) -> System.UInt64: ...

class Bmi2(X86Base):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def MultiplyNoFlags(left: System.UInt32, right: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def MultiplyNoFlags(left: System.UInt32, right: System.UInt32, low: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def ParallelBitDeposit(value: System.UInt32, mask: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def ParallelBitExtract(value: System.UInt32, mask: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def ZeroHighBits(value: System.UInt32, index: System.UInt32) -> System.UInt32: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def MultiplyNoFlags(left: System.UInt64, right: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def MultiplyNoFlags(left: System.UInt64, right: System.UInt64, low: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def ParallelBitDeposit(value: System.UInt64, mask: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def ParallelBitExtract(value: System.UInt64, mask: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def ZeroHighBits(value: System.UInt64, index: System.UInt64) -> System.UInt64: ...

class Fma(Avx):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def MultiplyAdd(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAdd(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAdd(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAdd(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddNegated(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddNegated(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddNegated(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddNegated(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddNegatedScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddNegatedScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddSubtract(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddSubtract(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplyAddSubtract(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddSubtract(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtract(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtract(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtract(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtract(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtractAdd(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtractAdd(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractAdd(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtractAdd(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractNegated(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractNegated(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractNegated(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtractNegated(a: Intrinsics.Vector256, b: Intrinsics.Vector256, c: Intrinsics.Vector256) -> Intrinsics.Vector256: ...
    @overload
    @staticmethod
    def MultiplySubtractNegatedScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractNegatedScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplySubtractScalar(a: Intrinsics.Vector128, b: Intrinsics.Vector128, c: Intrinsics.Vector128) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Lzcnt(X86Base):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: System.UInt32) -> System.UInt32: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: System.UInt64) -> System.UInt64: ...

class Pclmulqdq(Sse2):
    """    """
    @overload
    @staticmethod
    def CarrylessMultiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CarrylessMultiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Popcnt(Sse42):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def PopCount(value: System.UInt32) -> System.UInt32: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def PopCount(value: System.UInt64) -> System.UInt64: ...

class Sse(X86Base):
    """    """
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareOrdered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarOrdered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarOrderedEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnordered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareUnordered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Single(upper: Intrinsics.Vector128, value: int) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt32(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def ConvertToInt32WithTruncation(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def Divide(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def DivideScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadHigh(lower: Intrinsics.Vector128, address: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadLow(upper: Intrinsics.Vector128, address: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Single) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaxScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MinScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveHighToLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveLowToHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def MoveScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Prefetch0(address: System.Void) -> None: ...
    @overload
    @staticmethod
    def Prefetch1(address: System.Void) -> None: ...
    @overload
    @staticmethod
    def Prefetch2(address: System.Void) -> None: ...
    @overload
    @staticmethod
    def PrefetchNonTemporal(address: System.Void) -> None: ...
    @overload
    @staticmethod
    def Reciprocal(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ReciprocalScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ReciprocalScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ReciprocalSqrt(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ReciprocalSqrtScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ReciprocalSqrtScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Sqrt(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SqrtScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SqrtScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Store(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreFence() -> None: ...
    @overload
    @staticmethod
    def StoreHigh(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreLow(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.Single, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @overload
    @staticmethod
    def ConvertScalarToVector128Single(upper: Intrinsics.Vector128, value: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt64(value: Intrinsics.Vector128) -> System.Int64: ...
    @overload
    @staticmethod
    def ConvertToInt64WithTruncation(value: Intrinsics.Vector128) -> System.Int64: ...
    @property
    def IsSupported(self) -> bool: ...

class Sse2(Sse):
    """    """
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Add(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def And(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Average(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Average(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareNotLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareOrdered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarNotLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarOrdered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarOrderedEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarOrderedNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnordered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedGreaterThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedLessThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedLessThanOrEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareScalarUnorderedNotEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def CompareUnordered(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Double(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Double(upper: Intrinsics.Vector128, value: int) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Int32(value: int) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Single(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128UInt32(value: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt32(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def ConvertToInt32(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def ConvertToInt32WithTruncation(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def ConvertToUInt32(value: Intrinsics.Vector128) -> System.UInt32: ...
    @overload
    @staticmethod
    def ConvertToVector128Double(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Double(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32WithTruncation(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32WithTruncation(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Single(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Single(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Divide(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def DivideScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.UInt16: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.Int16, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.UInt16, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadFence() -> None: ...
    @overload
    @staticmethod
    def LoadHigh(lower: Intrinsics.Vector128, address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadLow(upper: Intrinsics.Vector128, address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadScalarVector128(address: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadVector128(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaskMove(source: Intrinsics.Vector128, mask: Intrinsics.Vector128, address: System.SByte) -> None: ...
    @overload
    @staticmethod
    def MaskMove(source: Intrinsics.Vector128, mask: Intrinsics.Vector128, address: System.Byte) -> None: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MaxScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MemoryFence() -> None: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MinScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def MoveMask(value: Intrinsics.Vector128) -> int: ...
    @overload
    @staticmethod
    def MoveScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddAdjacent(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Or(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PackSignedSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PackSignedSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PackUnsignedSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftLeftLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Intrinsics.Vector128, count: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical128BitLane(value: Intrinsics.Vector128, numBytes: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShuffleHigh(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShuffleHigh(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShuffleLow(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ShuffleLow(value: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Sqrt(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SqrtScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SqrtScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Store(address: System.Int16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Int64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Byte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.Int32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.SByte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Store(address: System.UInt64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.SByte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Int32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Byte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(address: System.UInt64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Int16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.Byte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.SByte, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(address: System.UInt16, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreHigh(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreLow(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreNonTemporal(address: System.Int32, value: int) -> None: ...
    @overload
    @staticmethod
    def StoreNonTemporal(address: System.UInt32, value: System.UInt32) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.Int32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.Double, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.UInt32, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.UInt64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def StoreScalar(address: System.Int64, source: Intrinsics.Vector128) -> None: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Subtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SubtractScalar(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def SumAbsoluteDifferences(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackHigh(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def UnpackLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @overload
    @staticmethod
    def ConvertScalarToVector128Double(upper: Intrinsics.Vector128, value: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128Int64(value: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertScalarToVector128UInt64(value: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt64(value: Intrinsics.Vector128) -> System.Int64: ...
    @overload
    @staticmethod
    def ConvertToInt64(value: Intrinsics.Vector128) -> System.Int64: ...
    @overload
    @staticmethod
    def ConvertToInt64WithTruncation(value: Intrinsics.Vector128) -> System.Int64: ...
    @overload
    @staticmethod
    def ConvertToUInt64(value: Intrinsics.Vector128) -> System.UInt64: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def StoreNonTemporal(address: System.Int64, value: System.Int64) -> None: ...
    @overload
    @staticmethod
    def StoreNonTemporal(address: System.UInt64, value: System.UInt64) -> None: ...

class Sse3(Sse2):
    """    """
    @overload
    @staticmethod
    def AddSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AddSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAndDuplicateToVector128(address: System.Double) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadDquVector128(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveAndDuplicate(source: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveHighAndDuplicate(source: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MoveLowAndDuplicate(source: Intrinsics.Vector128) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class Sse41(Ssse3):
    """    """
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Blend(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def BlendVariable(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Ceiling(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Ceiling(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CeilingScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CeilingScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CeilingScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CeilingScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def CompareEqual(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int16(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int16(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int16(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int16(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int32(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def ConvertToVector128Int64(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def DotProduct(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def DotProduct(left: Intrinsics.Vector128, right: Intrinsics.Vector128, control: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.Byte: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> int: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.UInt32: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.Single: ...
    @overload
    @staticmethod
    def Floor(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Floor(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def FloorScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def FloorScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def FloorScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def FloorScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.SByte, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: int, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.Byte, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: Intrinsics.Vector128, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.UInt32, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.SByte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.Int64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.UInt32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.Int32) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.UInt16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.Int16) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedVector128NonTemporal(address: System.UInt64) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Max(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Min(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MinHorizontal(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultipleSumAbsoluteDifferences(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyLow(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def PackUnsignedSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirection(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirection(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirectionScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirectionScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirectionScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundCurrentDirectionScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestInteger(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestInteger(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestIntegerScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestIntegerScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestIntegerScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNearestIntegerScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinity(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinity(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinityScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinityScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinityScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToNegativeInfinityScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinity(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinity(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinityScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinityScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinityScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToPositiveInfinityScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZero(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZero(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZeroScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZeroScalar(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZeroScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def RoundToZeroScalar(upper: Intrinsics.Vector128, value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestNotZAndNotC(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...
    @overload
    @staticmethod
    def TestZ(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> bool: ...

class X64(X64):
    """    """
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.Int64: ...
    @overload
    @staticmethod
    def Extract(value: Intrinsics.Vector128, index: System.Byte) -> System.UInt64: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.Int64, index: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Insert(value: Intrinsics.Vector128, data: System.UInt64, index: System.Byte) -> Intrinsics.Vector128: ...

class Sse42(Sse41):
    """    """
    @overload
    @staticmethod
    def CompareGreaterThan(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Crc32(crc: System.UInt32, data: System.Byte) -> System.UInt32: ...
    @overload
    @staticmethod
    def Crc32(crc: System.UInt32, data: System.UInt16) -> System.UInt32: ...
    @overload
    @staticmethod
    def Crc32(crc: System.UInt32, data: System.UInt32) -> System.UInt32: ...
    @property
    def IsSupported(self) -> bool: ...

class X64(X64):
    """    """
    @overload
    @staticmethod
    def Crc32(crc: System.UInt64, data: System.UInt64) -> System.UInt64: ...
    @property
    def IsSupported(self) -> bool: ...

class Ssse3(Sse3):
    """    """
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Abs(value: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def AlignRight(left: Intrinsics.Vector128, right: Intrinsics.Vector128, mask: System.Byte) -> Intrinsics.Vector128: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalAdd(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalAddSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalSubtract(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def HorizontalSubtractSaturate(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyAddAdjacent(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def MultiplyHighRoundScale(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Shuffle(value: Intrinsics.Vector128, mask: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...
    @overload
    @staticmethod
    def Sign(left: Intrinsics.Vector128, right: Intrinsics.Vector128) -> Intrinsics.Vector128: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

class X86Serialize(X86Base):
    """    """
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def Serialize() -> None: ...

class X64(X64):
    """    """
    @property
    def IsSupported(self) -> bool: ...

# endregion
