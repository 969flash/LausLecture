"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Arm", "X86", "Vector128", "Vector256", "Vector64"]
# endregion

# region: Imports
from System import Numerics
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Vector128(object):
    """    """
    @overload
    @staticmethod
    def Abs(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Add(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AndNot(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def As(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsByte(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsDouble(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsInt16(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsInt32(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsInt64(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsNInt(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsNUInt(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsSByte(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsSingle(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsUInt16(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsUInt32(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsUInt64(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def AsVector(value: Vector128) -> Numerics.Vector: ...
    @overload
    @staticmethod
    def AsVector128(value: Numerics.Vector4) -> Vector128: ...
    @overload
    @staticmethod
    def AsVector128(value: Numerics.Vector) -> Vector128: ...
    @overload
    @staticmethod
    def AsVector128(value: Numerics.Vector2) -> Vector128: ...
    @overload
    @staticmethod
    def AsVector128(value: Numerics.Vector3) -> Vector128: ...
    @overload
    @staticmethod
    def AsVector2(value: Vector128) -> Numerics.Vector2: ...
    @overload
    @staticmethod
    def AsVector3(value: Vector128) -> Numerics.Vector3: ...
    @overload
    @staticmethod
    def AsVector4(value: Vector128) -> Numerics.Vector4: ...
    @overload
    @staticmethod
    def BitwiseAnd(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def BitwiseOr(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector128, left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt32(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToInt64(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToUInt32(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ConvertToUInt64(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector128, destination: System.Array[T]) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector128, destination: System.Span) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector128, destination: System.Array[T], startIndex: int) -> None: ...
    @overload
    @staticmethod
    def Create(value: System.UInt16) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.UInt32) -> Vector128: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T]) -> Vector128: ...
    @overload
    @staticmethod
    def Create(values: System.ReadOnlySpan) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.SByte) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.UInt64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.UIntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.Single) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.Int64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.IntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.Byte) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: float) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: T) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: int) -> Vector128: ...
    @overload
    @staticmethod
    def Create(value: System.Int16) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt64, e1: System.UInt64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(lower: Vector64, upper: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.Int64, e1: System.Int64) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: float, e1: float) -> Vector128: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T], index: int) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.Single, e1: System.Single, e2: System.Single, e3: System.Single) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: int, e1: int, e2: int, e3: int) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt32, e1: System.UInt32, e2: System.UInt32, e3: System.UInt32) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt16, e1: System.UInt16, e2: System.UInt16, e3: System.UInt16, e4: System.UInt16, e5: System.UInt16, e6: System.UInt16, e7: System.UInt16) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.Int16, e1: System.Int16, e2: System.Int16, e3: System.Int16, e4: System.Int16, e5: System.Int16, e6: System.Int16, e7: System.Int16) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.SByte, e1: System.SByte, e2: System.SByte, e3: System.SByte, e4: System.SByte, e5: System.SByte, e6: System.SByte, e7: System.SByte, e8: System.SByte, e9: System.SByte, e10: System.SByte, e11: System.SByte, e12: System.SByte, e13: System.SByte, e14: System.SByte, e15: System.SByte) -> Vector128: ...
    @overload
    @staticmethod
    def Create(e0: System.Byte, e1: System.Byte, e2: System.Byte, e3: System.Byte, e4: System.Byte, e5: System.Byte, e6: System.Byte, e7: System.Byte, e8: System.Byte, e9: System.Byte, e10: System.Byte, e11: System.Byte, e12: System.Byte, e13: System.Byte, e14: System.Byte, e15: System.Byte) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt64) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt32) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt16) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Single) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.SByte) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.IntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UIntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: int) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int16) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: float) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Byte) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int64) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt16) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Single) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.SByte) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UIntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.IntPtr) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Int16) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: int) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: float) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Byte) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt32) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Int64) -> Vector128: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt64) -> Vector128: ...
    @overload
    @staticmethod
    def Divide(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Dot(left: Vector128, right: Vector128) -> T: ...
    @overload
    @staticmethod
    def Equals(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def EqualsAll(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def EqualsAny(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def ExtractMostSignificantBits(vector: Vector128) -> System.UInt32: ...
    @overload
    @staticmethod
    def Floor(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Floor(vector: Vector128) -> Vector128: ...
    @property
    def IsHardwareAccelerated(self) -> bool: ...
    @overload
    @staticmethod
    def GetElement(vector: Vector128, index: int) -> T: ...
    @overload
    @staticmethod
    def GetLower(vector: Vector128) -> Vector64: ...
    @overload
    @staticmethod
    def GetUpper(vector: Vector128) -> Vector64: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def GreaterThanAll(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanAny(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAll(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAny(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def LessThan(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def LessThanAll(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def LessThanAny(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def LessThanOrEqualAll(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqualAny(left: Vector128, right: Vector128) -> bool: ...
    @overload
    @staticmethod
    def Load(source: T) -> Vector128: ...
    @overload
    @staticmethod
    def LoadAligned(source: T) -> Vector128: ...
    @overload
    @staticmethod
    def LoadAlignedNonTemporal(source: T) -> Vector128: ...
    @overload
    @staticmethod
    def LoadUnsafe() -> (Vector128, T): ...
    @overload
    @staticmethod
    def LoadUnsafe(elementOffset: System.UIntPtr) -> (Vector128, T): ...
    @overload
    @staticmethod
    def Max(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Min(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: Vector128, right: T) -> Vector128: ...
    @overload
    @staticmethod
    def Multiply(left: T, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector128, upper: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Negate(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def OnesComplement(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector128, shiftCount: int) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector128, indices: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Sqrt(vector: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Store(source: Vector128, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(source: Vector128, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(source: Vector128, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector128) -> (T): ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector128, elementOffset: System.UIntPtr) -> (T): ...
    @overload
    @staticmethod
    def Subtract(left: Vector128, right: Vector128) -> Vector128: ...
    @overload
    @staticmethod
    def Sum(vector: Vector128) -> T: ...
    @overload
    @staticmethod
    def ToScalar(vector: Vector128) -> T: ...
    @overload
    @staticmethod
    def ToVector256(vector: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def ToVector256Unsafe(vector: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def TryCopyTo(vector: Vector128, destination: System.Span) -> bool: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector128) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def WithElement(vector: Vector128, index: int, value: T) -> Vector128: ...
    @overload
    @staticmethod
    def WithLower(vector: Vector128, value: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def WithUpper(vector: Vector128, value: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def Xor(left: Vector128, right: Vector128) -> Vector128: ...

class Vector128(System.ValueType):
    """    Vector128[T]
    """
    @overload
    def Equals(self, other: Vector128) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllBitsSet(self) -> Vector128: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def Zero(self) -> Vector128: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Vector256(object):
    """    """
    @overload
    @staticmethod
    def Abs(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Add(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AndNot(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def As(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsByte(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsDouble(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsInt16(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsInt32(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsInt64(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsNInt(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsNUInt(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsSByte(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsSingle(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsUInt16(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsUInt32(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsUInt64(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def AsVector(value: Vector256) -> Numerics.Vector: ...
    @overload
    @staticmethod
    def AsVector256(value: Numerics.Vector) -> Vector256: ...
    @overload
    @staticmethod
    def BitwiseAnd(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def BitwiseOr(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector256, left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToInt32(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToInt64(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToUInt32(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ConvertToUInt64(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector256, destination: System.Span) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector256, destination: System.Array[T]) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector256, destination: System.Array[T], startIndex: int) -> None: ...
    @overload
    @staticmethod
    def Create(value: System.SByte) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.UInt64) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.UInt32) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.UInt16) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.Single) -> Vector256: ...
    @overload
    @staticmethod
    def Create(values: System.ReadOnlySpan) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.UIntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T]) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.Int64) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: int) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.Int16) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: float) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.Byte) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: T) -> Vector256: ...
    @overload
    @staticmethod
    def Create(value: System.IntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T], index: int) -> Vector256: ...
    @overload
    @staticmethod
    def Create(lower: Vector128, upper: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt64, e1: System.UInt64, e2: System.UInt64, e3: System.UInt64) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: float, e1: float, e2: float, e3: float) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.Int64, e1: System.Int64, e2: System.Int64, e3: System.Int64) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.Single, e1: System.Single, e2: System.Single, e3: System.Single, e4: System.Single, e5: System.Single, e6: System.Single, e7: System.Single) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt32, e1: System.UInt32, e2: System.UInt32, e3: System.UInt32, e4: System.UInt32, e5: System.UInt32, e6: System.UInt32, e7: System.UInt32) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: int, e1: int, e2: int, e3: int, e4: int, e5: int, e6: int, e7: int) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.Int16, e1: System.Int16, e2: System.Int16, e3: System.Int16, e4: System.Int16, e5: System.Int16, e6: System.Int16, e7: System.Int16, e8: System.Int16, e9: System.Int16, e10: System.Int16, e11: System.Int16, e12: System.Int16, e13: System.Int16, e14: System.Int16, e15: System.Int16) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt16, e1: System.UInt16, e2: System.UInt16, e3: System.UInt16, e4: System.UInt16, e5: System.UInt16, e6: System.UInt16, e7: System.UInt16, e8: System.UInt16, e9: System.UInt16, e10: System.UInt16, e11: System.UInt16, e12: System.UInt16, e13: System.UInt16, e14: System.UInt16, e15: System.UInt16) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.Byte, e1: System.Byte, e2: System.Byte, e3: System.Byte, e4: System.Byte, e5: System.Byte, e6: System.Byte, e7: System.Byte, e8: System.Byte, e9: System.Byte, e10: System.Byte, e11: System.Byte, e12: System.Byte, e13: System.Byte, e14: System.Byte, e15: System.Byte, e16: System.Byte, e17: System.Byte, e18: System.Byte, e19: System.Byte, e20: System.Byte, e21: System.Byte, e22: System.Byte, e23: System.Byte, e24: System.Byte, e25: System.Byte, e26: System.Byte, e27: System.Byte, e28: System.Byte, e29: System.Byte, e30: System.Byte, e31: System.Byte) -> Vector256: ...
    @overload
    @staticmethod
    def Create(e0: System.SByte, e1: System.SByte, e2: System.SByte, e3: System.SByte, e4: System.SByte, e5: System.SByte, e6: System.SByte, e7: System.SByte, e8: System.SByte, e9: System.SByte, e10: System.SByte, e11: System.SByte, e12: System.SByte, e13: System.SByte, e14: System.SByte, e15: System.SByte, e16: System.SByte, e17: System.SByte, e18: System.SByte, e19: System.SByte, e20: System.SByte, e21: System.SByte, e22: System.SByte, e23: System.SByte, e24: System.SByte, e25: System.SByte, e26: System.SByte, e27: System.SByte, e28: System.SByte, e29: System.SByte, e30: System.SByte, e31: System.SByte) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt64) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt32) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt16) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Single) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UIntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.IntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.SByte) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: int) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int16) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: float) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Byte) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int64) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UIntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt16) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt32) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Single) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.SByte) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.IntPtr) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Byte) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: int) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Int16) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: float) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt64) -> Vector256: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Int64) -> Vector256: ...
    @overload
    @staticmethod
    def Divide(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Dot(left: Vector256, right: Vector256) -> T: ...
    @overload
    @staticmethod
    def Equals(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def EqualsAll(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def EqualsAny(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def ExtractMostSignificantBits(vector: Vector256) -> System.UInt32: ...
    @overload
    @staticmethod
    def Floor(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Floor(vector: Vector256) -> Vector256: ...
    @property
    def IsHardwareAccelerated(self) -> bool: ...
    @overload
    @staticmethod
    def GetElement(vector: Vector256, index: int) -> T: ...
    @overload
    @staticmethod
    def GetLower(vector: Vector256) -> Vector128: ...
    @overload
    @staticmethod
    def GetUpper(vector: Vector256) -> Vector128: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def GreaterThanAll(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanAny(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAll(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAny(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def LessThan(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def LessThanAll(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def LessThanAny(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def LessThanOrEqualAll(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqualAny(left: Vector256, right: Vector256) -> bool: ...
    @overload
    @staticmethod
    def Load(source: T) -> Vector256: ...
    @overload
    @staticmethod
    def LoadAligned(source: T) -> Vector256: ...
    @overload
    @staticmethod
    def LoadAlignedNonTemporal(source: T) -> Vector256: ...
    @overload
    @staticmethod
    def LoadUnsafe() -> (Vector256, T): ...
    @overload
    @staticmethod
    def LoadUnsafe(elementOffset: System.UIntPtr) -> (Vector256, T): ...
    @overload
    @staticmethod
    def Max(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Min(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: Vector256, right: T) -> Vector256: ...
    @overload
    @staticmethod
    def Multiply(left: T, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector256, upper: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Negate(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def OnesComplement(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector256, shiftCount: int) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector256, indices: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Sqrt(vector: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Store(source: Vector256, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(source: Vector256, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(source: Vector256, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector256) -> (T): ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector256, elementOffset: System.UIntPtr) -> (T): ...
    @overload
    @staticmethod
    def Subtract(left: Vector256, right: Vector256) -> Vector256: ...
    @overload
    @staticmethod
    def Sum(vector: Vector256) -> T: ...
    @overload
    @staticmethod
    def ToScalar(vector: Vector256) -> T: ...
    @overload
    @staticmethod
    def TryCopyTo(vector: Vector256, destination: System.Span) -> bool: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector256) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def WithElement(vector: Vector256, index: int, value: T) -> Vector256: ...
    @overload
    @staticmethod
    def WithLower(vector: Vector256, value: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def WithUpper(vector: Vector256, value: Vector128) -> Vector256: ...
    @overload
    @staticmethod
    def Xor(left: Vector256, right: Vector256) -> Vector256: ...

class Vector256(System.ValueType):
    """    Vector256[T]
    """
    @overload
    def Equals(self, other: Vector256) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllBitsSet(self) -> Vector256: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def Zero(self) -> Vector256: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Vector64(object):
    """    """
    @overload
    @staticmethod
    def Abs(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Add(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AndNot(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def As(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsByte(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsDouble(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsInt16(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsInt32(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsInt64(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsNInt(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsNUInt(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsSByte(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsSingle(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsUInt16(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsUInt32(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def AsUInt64(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def BitwiseAnd(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def BitwiseOr(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Ceiling(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector64, left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToDouble(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToInt32(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToInt64(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToSingle(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToUInt32(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ConvertToUInt64(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector64, destination: System.Array[T]) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector64, destination: System.Span) -> None: ...
    @overload
    @staticmethod
    def CopyTo(vector: Vector64, destination: System.Array[T], startIndex: int) -> None: ...
    @overload
    @staticmethod
    def Create(value: System.UInt32) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.Single) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.UInt64) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.UInt16) -> Vector64: ...
    @overload
    @staticmethod
    def Create(values: System.ReadOnlySpan) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.SByte) -> Vector64: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T]) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.UIntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.Int64) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: int) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.Int16) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: float) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.Byte) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: T) -> Vector64: ...
    @overload
    @staticmethod
    def Create(value: System.IntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt32, e1: System.UInt32) -> Vector64: ...
    @overload
    @staticmethod
    def Create(values: System.Array[T], index: int) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.Single, e1: System.Single) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: int, e1: int) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.UInt16, e1: System.UInt16, e2: System.UInt16, e3: System.UInt16) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.Int16, e1: System.Int16, e2: System.Int16, e3: System.Int16) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.Byte, e1: System.Byte, e2: System.Byte, e3: System.Byte, e4: System.Byte, e5: System.Byte, e6: System.Byte, e7: System.Byte) -> Vector64: ...
    @overload
    @staticmethod
    def Create(e0: System.SByte, e1: System.SByte, e2: System.SByte, e3: System.SByte, e4: System.SByte, e5: System.SByte, e6: System.SByte, e7: System.SByte) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt64) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt32) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UInt16) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Single) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.SByte) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.UIntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: int) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int64) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Int16) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: float) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.Byte) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalar(value: System.IntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.SByte) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt16) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Single) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UIntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.UInt32) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: int) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Int16) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.Byte) -> Vector64: ...
    @overload
    @staticmethod
    def CreateScalarUnsafe(value: System.IntPtr) -> Vector64: ...
    @overload
    @staticmethod
    def Divide(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Dot(left: Vector64, right: Vector64) -> T: ...
    @overload
    @staticmethod
    def Equals(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def EqualsAll(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def EqualsAny(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def ExtractMostSignificantBits(vector: Vector64) -> System.UInt32: ...
    @overload
    @staticmethod
    def Floor(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Floor(vector: Vector64) -> Vector64: ...
    @property
    def IsHardwareAccelerated(self) -> bool: ...
    @overload
    @staticmethod
    def GetElement(vector: Vector64, index: int) -> T: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def GreaterThanAll(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanAny(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAll(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAny(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def LessThan(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def LessThanAll(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def LessThanAny(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def LessThanOrEqualAll(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqualAny(left: Vector64, right: Vector64) -> bool: ...
    @overload
    @staticmethod
    def Load(source: T) -> Vector64: ...
    @overload
    @staticmethod
    def LoadAligned(source: T) -> Vector64: ...
    @overload
    @staticmethod
    def LoadAlignedNonTemporal(source: T) -> Vector64: ...
    @overload
    @staticmethod
    def LoadUnsafe() -> (Vector64, T): ...
    @overload
    @staticmethod
    def LoadUnsafe(elementOffset: System.UIntPtr) -> (Vector64, T): ...
    @overload
    @staticmethod
    def Max(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Min(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Multiply(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Multiply(left: Vector64, right: T) -> Vector64: ...
    @overload
    @staticmethod
    def Multiply(left: T, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Narrow(lower: Vector64, upper: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Negate(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def OnesComplement(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftLeft(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def ShiftRightLogical(vector: Vector64, shiftCount: int) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Shuffle(vector: Vector64, indices: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Sqrt(vector: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Store(source: Vector64, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAligned(source: Vector64, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreAlignedNonTemporal(source: Vector64, destination: T) -> None: ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector64) -> (T): ...
    @overload
    @staticmethod
    def StoreUnsafe(source: Vector64, elementOffset: System.UIntPtr) -> (T): ...
    @overload
    @staticmethod
    def Subtract(left: Vector64, right: Vector64) -> Vector64: ...
    @overload
    @staticmethod
    def Sum(vector: Vector64) -> T: ...
    @overload
    @staticmethod
    def ToScalar(vector: Vector64) -> T: ...
    @overload
    @staticmethod
    def ToVector128(vector: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def ToVector128Unsafe(vector: Vector64) -> Vector128: ...
    @overload
    @staticmethod
    def TryCopyTo(vector: Vector64, destination: System.Span) -> bool: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Widen(source: Vector64) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def WithElement(vector: Vector64, index: int, value: T) -> Vector64: ...
    @overload
    @staticmethod
    def Xor(left: Vector64, right: Vector64) -> Vector64: ...

class Vector64(System.ValueType):
    """    Vector64[T]
    """
    @overload
    def Equals(self, other: Vector64) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllBitsSet(self) -> Vector64: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def Zero(self) -> Vector64: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

# endregion
