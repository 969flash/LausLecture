"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AssemblyLoadContext", "ContextualReflectionScope", "AssemblyDependencyResolver"]
# endregion

# region: Imports
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class AssemblyLoadContext(object):
    """    """
    def __init__(self, name: str, isCollectible: bool): ...
    @overload
    def EnterContextualReflection() -> ContextualReflectionScope: ...
    @overload
    @staticmethod
    def EnterContextualReflection(activating: Reflection.Assembly) -> ContextualReflectionScope: ...
    @property
    def All(self) -> Generic.IEnumerable: ...
    @property
    def Assemblies(self) -> Generic.IEnumerable: ...
    @property
    def CurrentContextualReflectionContext(self) -> AssemblyLoadContext: ...
    @property
    def Default(self) -> AssemblyLoadContext: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    @staticmethod
    def GetAssemblyName(assemblyPath: str) -> Reflection.AssemblyName: ...
    @overload
    @staticmethod
    def GetLoadContext(assembly: Reflection.Assembly) -> AssemblyLoadContext: ...
    @overload
    def LoadFromAssemblyName(self, assemblyName: Reflection.AssemblyName) -> Reflection.Assembly: ...
    @overload
    def LoadFromAssemblyPath(self, assemblyPath: str) -> Reflection.Assembly: ...
    @overload
    def LoadFromNativeImagePath(self, nativeImagePath: str, assemblyPath: str) -> Reflection.Assembly: ...
    @overload
    def LoadFromStream(self, assembly: IO.Stream) -> Reflection.Assembly: ...
    @overload
    def LoadFromStream(self, assembly: IO.Stream, assemblySymbols: IO.Stream) -> Reflection.Assembly: ...
    @overload
    def SetProfileOptimizationRoot(self, directoryPath: str) -> None: ...
    @overload
    def StartProfileOptimization(self, profile: str) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Unload() -> None: ...
    @property
    def ResolvingUnmanagedDll(self): ...
    @property
    def Resolving(self): ...
    @property
    def Unloading(self): ...

class ContextualReflectionScope(System.ValueType):
    """    """
    @overload
    def Dispose() -> None: ...

class AssemblyDependencyResolver(object):
    """    """
    def __init__(self, componentAssemblyPath: str): ...
    @overload
    def ResolveAssemblyToPath(self, assemblyName: Reflection.AssemblyName) -> str: ...
    @overload
    def ResolveUnmanagedDllToPath(self, unmanagedDllName: str) -> str: ...

# endregion
