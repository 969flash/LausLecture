"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ADVF", "DATADIR", "DVASPECT", "FORMATETC", "IAdviseSink", "IDataObject", "IEnumFORMATETC", "IEnumSTATDATA", "STATDATA", "STGMEDIUM", "TYMED"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["BIND_OPTS", "IBindCtx", "IConnectionPoint", "IConnectionPointContainer", "IEnumConnectionPoints", "CONNECTDATA", "IEnumConnections", "IEnumMoniker", "IEnumString", "IEnumVARIANT", "FILETIME", "IMoniker", "IPersistFile", "IRunningObjectTable", "STATSTG", "IStream", "DESCKIND", "BINDPTR", "ITypeComp", "TYPEKIND", "TYPEFLAGS", "IMPLTYPEFLAGS", "TYPEATTR", "FUNCDESC", "IDLFLAG", "IDLDESC", "PARAMFLAG", "PARAMDESC", "TYPEDESC", "ELEMDESC", "DESCUNION", "VARKIND", "VARDESC", "DISPPARAMS", "EXCEPINFO", "FUNCKIND", "INVOKEKIND", "CALLCONV", "FUNCFLAGS", "VARFLAGS", "ITypeInfo", "ITypeInfo2", "SYSKIND", "LIBFLAGS", "TYPELIBATTR", "ITypeLib", "ITypeLib2"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class BIND_OPTS(System.ValueType):
    """    """
    @property
    def cbStruct(self) -> int: ...
    @property
    def grfFlags(self) -> int: ...
    @property
    def grfMode(self) -> int: ...
    @property
    def dwTickCountDeadline(self) -> int: ...

class IBindCtx:
    """    """
    @overload
    def EnumObjectParam() -> (IEnumString): ...
    @overload
    def GetBindOptions() -> (BIND_OPTS): ...
    @overload
    def GetObjectParam(self, pszKey: str) -> (object): ...
    @overload
    def GetRunningObjectTable() -> (IRunningObjectTable): ...
    @overload
    def RegisterObjectBound(self, punk: object) -> None: ...
    @overload
    def RegisterObjectParam(self, pszKey: str, punk: object) -> None: ...
    @overload
    def ReleaseBoundObjects() -> None: ...
    @overload
    def RevokeObjectBound(self, punk: object) -> None: ...
    @overload
    def RevokeObjectParam(self, pszKey: str) -> int: ...
    @overload
    def SetBindOptions() -> (BIND_OPTS): ...

class IConnectionPoint:
    """    """
    @overload
    def Advise(self, pUnkSink: object) -> (int): ...
    @overload
    def EnumConnections() -> (IEnumConnections): ...
    @overload
    def GetConnectionInterface() -> (System.Guid): ...
    @overload
    def GetConnectionPointContainer() -> (IConnectionPointContainer): ...
    @overload
    def Unadvise(self, dwCookie: int) -> None: ...

class IConnectionPointContainer:
    """    """
    @overload
    def EnumConnectionPoints() -> (IEnumConnectionPoints): ...
    @overload
    def FindConnectionPoint() -> (System.Guid, IConnectionPoint): ...

class IEnumConnectionPoints:
    """    """
    @overload
    def Clone() -> (IEnumConnectionPoints): ...
    @overload
    def Next(self, celt: int, pceltFetched: System.IntPtr) -> (int, System.Array[IConnectionPoint]): ...
    @overload
    def Reset() -> None: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class CONNECTDATA(System.ValueType):
    """    """
    @property
    def pUnk(self) -> object: ...
    @property
    def dwCookie(self) -> int: ...

class IEnumConnections:
    """    """
    @overload
    def Clone() -> (IEnumConnections): ...
    @overload
    def Next(self, celt: int, pceltFetched: System.IntPtr) -> (int, System.Array[CONNECTDATA]): ...
    @overload
    def Reset() -> None: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class IEnumMoniker:
    """    """
    @overload
    def Clone() -> (IEnumMoniker): ...
    @overload
    def Next(self, celt: int, pceltFetched: System.IntPtr) -> (int, System.Array[IMoniker]): ...
    @overload
    def Reset() -> None: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class IEnumString:
    """    """
    @overload
    def Clone() -> (IEnumString): ...
    @overload
    def Next(self, celt: int, pceltFetched: System.IntPtr) -> (int, System.System.Array[str]): ...
    @overload
    def Reset() -> None: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class IEnumVARIANT:
    """    """
    @overload
    def Clone() -> IEnumVARIANT: ...
    @overload
    def Next(self, celt: int, pceltFetched: System.IntPtr) -> (int, System.System.Array[object]): ...
    @overload
    def Reset() -> int: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class FILETIME(System.ValueType):
    """    """
    @property
    def dwLowDateTime(self) -> int: ...
    @property
    def dwHighDateTime(self) -> int: ...

class IMoniker:
    """    """
    @overload
    def BindToObject(self, pbc: IBindCtx, pmkToLeft: IMoniker) -> (System.Guid, object): ...
    @overload
    def BindToStorage(self, pbc: IBindCtx, pmkToLeft: IMoniker) -> (System.Guid, object): ...
    @overload
    def CommonPrefixWith(self, pmkOther: IMoniker) -> (IMoniker): ...
    @overload
    def ComposeWith(self, pmkRight: IMoniker, fOnlyIfNotGeneric: bool) -> (IMoniker): ...
    @overload
    def Enum(self, fForward: bool) -> (IEnumMoniker): ...
    @overload
    def GetClassID() -> (System.Guid): ...
    @overload
    def GetDisplayName(self, pbc: IBindCtx, pmkToLeft: IMoniker) -> (str): ...
    @overload
    def GetSizeMax() -> (System.Int64): ...
    @overload
    def GetTimeOfLastChange(self, pbc: IBindCtx, pmkToLeft: IMoniker) -> (FILETIME): ...
    @overload
    def Hash() -> (int): ...
    @overload
    def Inverse() -> (IMoniker): ...
    @overload
    def IsDirty() -> int: ...
    @overload
    def IsEqual(self, pmkOtherMoniker: IMoniker) -> int: ...
    @overload
    def IsRunning(self, pbc: IBindCtx, pmkToLeft: IMoniker, pmkNewlyRunning: IMoniker) -> int: ...
    @overload
    def IsSystemMoniker() -> (int, int): ...
    @overload
    def Load(self, pStm: IStream) -> None: ...
    @overload
    def ParseDisplayName(self, pbc: IBindCtx, pmkToLeft: IMoniker, pszDisplayName: str) -> (int, IMoniker): ...
    @overload
    def Reduce(self, pbc: IBindCtx, dwReduceHowFar: int) -> (IMoniker, IMoniker): ...
    @overload
    def RelativePathTo(self, pmkOther: IMoniker) -> (IMoniker): ...
    @overload
    def Save(self, pStm: IStream, fClearDirty: bool) -> None: ...

class IPersistFile:
    """    """
    @overload
    def GetClassID() -> (System.Guid): ...
    @overload
    def GetCurFile() -> (str): ...
    @overload
    def IsDirty() -> int: ...
    @overload
    def Load(self, pszFileName: str, dwMode: int) -> None: ...
    @overload
    def Save(self, pszFileName: str, fRemember: bool) -> None: ...
    @overload
    def SaveCompleted(self, pszFileName: str) -> None: ...

class IRunningObjectTable:
    """    """
    @overload
    def EnumRunning() -> (IEnumMoniker): ...
    @overload
    def GetObject(self, pmkObjectName: IMoniker) -> (int, object): ...
    @overload
    def GetTimeOfLastChange(self, pmkObjectName: IMoniker) -> (int, FILETIME): ...
    @overload
    def IsRunning(self, pmkObjectName: IMoniker) -> int: ...
    @overload
    def NoteChangeTime(self, dwRegister: int) -> (FILETIME): ...
    @overload
    def Register(self, grfFlags: int, punkObject: object, pmkObjectName: IMoniker) -> int: ...
    @overload
    def Revoke(self, dwRegister: int) -> None: ...

class STATSTG(System.ValueType):
    """    """
    @property
    def pwcsName(self) -> str: ...
    @property
    def type_(self) -> int: ...
    @property
    def cbSize(self) -> System.Int64: ...
    @property
    def mtime(self) -> FILETIME: ...
    @property
    def ctime(self) -> FILETIME: ...
    @property
    def atime(self) -> FILETIME: ...
    @property
    def grfMode(self) -> int: ...
    @property
    def grfLocksSupported(self) -> int: ...
    @property
    def clsid(self) -> System.Guid: ...
    @property
    def grfStateBits(self) -> int: ...
    @property
    def reserved(self) -> int: ...

class IStream:
    """    """
    @overload
    def Clone() -> (IStream): ...
    @overload
    def Commit(self, grfCommitFlags: int) -> None: ...
    @overload
    def CopyTo(self, pstm: IStream, cb: System.Int64, pcbRead: System.IntPtr, pcbWritten: System.IntPtr) -> None: ...
    @overload
    def LockRegion(self, libOffset: System.Int64, cb: System.Int64, dwLockType: int) -> None: ...
    @overload
    def Read(self, cb: int, pcbRead: System.IntPtr) -> (System.System.Array[System.Byte]): ...
    @overload
    def Revert() -> None: ...
    @overload
    def Seek(self, dlibMove: System.Int64, dwOrigin: int, plibNewPosition: System.IntPtr) -> None: ...
    @overload
    def SetSize(self, libNewSize: System.Int64) -> None: ...
    @overload
    def Stat(self, grfStatFlag: int) -> (STATSTG): ...
    @overload
    def UnlockRegion(self, libOffset: System.Int64, cb: System.Int64, dwLockType: int) -> None: ...
    @overload
    def Write(self, pv: System.System.Array[System.Byte], cb: int, pcbWritten: System.IntPtr) -> None: ...

class DESCKIND(enum.Enum):
    DESCKIND_NONE = 0
    DESCKIND_FUNCDESC = 1
    DESCKIND_VARDESC = 2
    DESCKIND_TYPECOMP = 3
    DESCKIND_IMPLICITAPPOBJ = 4
    DESCKIND_MAX = 5

class BINDPTR(System.ValueType):
    """    """
    @property
    def lpfuncdesc(self) -> System.IntPtr: ...
    @property
    def lpvardesc(self) -> System.IntPtr: ...
    @property
    def lptcomp(self) -> System.IntPtr: ...

class ITypeComp:
    """    """
    @overload
    def Bind(self, szName: str, lHashVal: int, wFlags: System.Int16) -> (ITypeInfo, DESCKIND, BINDPTR): ...
    @overload
    def BindType(self, szName: str, lHashVal: int) -> (ITypeInfo, ITypeComp): ...

class TYPEKIND(enum.Enum):
    TKIND_ENUM = 0
    TKIND_RECORD = 1
    TKIND_MODULE = 2
    TKIND_INTERFACE = 3
    TKIND_DISPATCH = 4
    TKIND_COCLASS = 5
    TKIND_ALIAS = 6
    TKIND_UNION = 7
    TKIND_MAX = 8

class TYPEFLAGS(enum.Enum):
    TYPEFLAG_FAPPOBJECT = 1
    TYPEFLAG_FCANCREATE = 2
    TYPEFLAG_FLICENSED = 4
    TYPEFLAG_FPREDECLID = 8
    TYPEFLAG_FHIDDEN = 16
    TYPEFLAG_FCONTROL = 32
    TYPEFLAG_FDUAL = 64
    TYPEFLAG_FNONEXTENSIBLE = 128
    TYPEFLAG_FOLEAUTOMATION = 256
    TYPEFLAG_FRESTRICTED = 512
    TYPEFLAG_FAGGREGATABLE = 1024
    TYPEFLAG_FREPLACEABLE = 2048
    TYPEFLAG_FDISPATCHABLE = 4096
    TYPEFLAG_FREVERSEBIND = 8192
    TYPEFLAG_FPROXY = 16384

class IMPLTYPEFLAGS(enum.Enum):
    IMPLTYPEFLAG_FDEFAULT = 1
    IMPLTYPEFLAG_FSOURCE = 2
    IMPLTYPEFLAG_FRESTRICTED = 4
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8

class TYPEATTR(System.ValueType):
    """    """
    @property
    def guid(self) -> System.Guid: ...
    @property
    def lcid(self) -> int: ...
    @property
    def dwReserved(self) -> int: ...
    @property
    def memidConstructor(self) -> int: ...
    @property
    def memidDestructor(self) -> int: ...
    @property
    def lpstrSchema(self) -> System.IntPtr: ...
    @property
    def cbSizeInstance(self) -> int: ...
    @property
    def typekind(self) -> TYPEKIND: ...
    @property
    def cFuncs(self) -> System.Int16: ...
    @property
    def cVars(self) -> System.Int16: ...
    @property
    def cImplTypes(self) -> System.Int16: ...
    @property
    def cbSizeVft(self) -> System.Int16: ...
    @property
    def cbAlignment(self) -> System.Int16: ...
    @property
    def wTypeFlags(self) -> TYPEFLAGS: ...
    @property
    def wMajorVerNum(self) -> System.Int16: ...
    @property
    def wMinorVerNum(self) -> System.Int16: ...
    @property
    def tdescAlias(self) -> TYPEDESC: ...
    @property
    def idldescType(self) -> IDLDESC: ...
    @property
    def MEMBER_ID_NIL(self) -> int: ...

class FUNCDESC(System.ValueType):
    """    """
    @property
    def memid(self) -> int: ...
    @property
    def lprgscode(self) -> System.IntPtr: ...
    @property
    def lprgelemdescParam(self) -> System.IntPtr: ...
    @property
    def funckind(self) -> FUNCKIND: ...
    @property
    def invkind(self) -> INVOKEKIND: ...
    @property
    def callconv(self) -> CALLCONV: ...
    @property
    def cParams(self) -> System.Int16: ...
    @property
    def cParamsOpt(self) -> System.Int16: ...
    @property
    def oVft(self) -> System.Int16: ...
    @property
    def cScodes(self) -> System.Int16: ...
    @property
    def elemdescFunc(self) -> ELEMDESC: ...
    @property
    def wFuncFlags(self) -> System.Int16: ...

class IDLFLAG(enum.Enum):
    IDLFLAG_NONE = 0
    IDLFLAG_FIN = 1
    IDLFLAG_FOUT = 2
    IDLFLAG_FLCID = 4
    IDLFLAG_FRETVAL = 8

class IDLDESC(System.ValueType):
    """    """
    @property
    def dwReserved(self) -> System.IntPtr: ...
    @property
    def wIDLFlags(self) -> IDLFLAG: ...

class PARAMFLAG(enum.Enum):
    PARAMFLAG_NONE = 0
    PARAMFLAG_FIN = 1
    PARAMFLAG_FOUT = 2
    PARAMFLAG_FLCID = 4
    PARAMFLAG_FRETVAL = 8
    PARAMFLAG_FOPT = 16
    PARAMFLAG_FHASDEFAULT = 32
    PARAMFLAG_FHASCUSTDATA = 64

class PARAMDESC(System.ValueType):
    """    """
    @property
    def lpVarValue(self) -> System.IntPtr: ...
    @property
    def wParamFlags(self) -> PARAMFLAG: ...

class TYPEDESC(System.ValueType):
    """    """
    @property
    def lpValue(self) -> System.IntPtr: ...
    @property
    def vt(self) -> System.Int16: ...

class ELEMDESC(System.ValueType):
    """    """
    @property
    def tdesc(self) -> TYPEDESC: ...
    @property
    def desc(self) -> DESCUNION: ...

class DESCUNION(System.ValueType):
    """    """
    @property
    def idldesc(self) -> IDLDESC: ...
    @property
    def paramdesc(self) -> PARAMDESC: ...

class VARKIND(enum.Enum):
    VAR_PERINSTANCE = 0
    VAR_STATIC = 1
    VAR_CONST = 2
    VAR_DISPATCH = 3

class VARDESC(System.ValueType):
    """    """
    @property
    def memid(self) -> int: ...
    @property
    def lpstrSchema(self) -> str: ...
    @property
    def desc(self) -> DESCUNION: ...
    @property
    def elemdescVar(self) -> ELEMDESC: ...
    @property
    def wVarFlags(self) -> System.Int16: ...
    @property
    def varkind(self) -> VARKIND: ...

class DESCUNION(System.ValueType):
    """    """
    @property
    def oInst(self) -> int: ...
    @property
    def lpvarValue(self) -> System.IntPtr: ...

class DISPPARAMS(System.ValueType):
    """    """
    @property
    def rgvarg(self) -> System.IntPtr: ...
    @property
    def rgdispidNamedArgs(self) -> System.IntPtr: ...
    @property
    def cArgs(self) -> int: ...
    @property
    def cNamedArgs(self) -> int: ...

class EXCEPINFO(System.ValueType):
    """    """
    @property
    def wCode(self) -> System.Int16: ...
    @property
    def wReserved(self) -> System.Int16: ...
    @property
    def bstrSource(self) -> str: ...
    @property
    def bstrDescription(self) -> str: ...
    @property
    def bstrHelpFile(self) -> str: ...
    @property
    def dwHelpContext(self) -> int: ...
    @property
    def pvReserved(self) -> System.IntPtr: ...
    @property
    def pfnDeferredFillIn(self) -> System.IntPtr: ...
    @property
    def scode(self) -> int: ...

class FUNCKIND(enum.Enum):
    FUNC_VIRTUAL = 0
    FUNC_PUREVIRTUAL = 1
    FUNC_NONVIRTUAL = 2
    FUNC_STATIC = 3
    FUNC_DISPATCH = 4

class INVOKEKIND(enum.Enum):
    INVOKE_FUNC = 1
    INVOKE_PROPERTYGET = 2
    INVOKE_PROPERTYPUT = 4
    INVOKE_PROPERTYPUTREF = 8

class CALLCONV(enum.Enum):
    CC_CDECL = 1
    CC_MSCPASCAL = 2
    CC_PASCAL = 2
    CC_MACPASCAL = 3
    CC_STDCALL = 4
    CC_RESERVED = 5
    CC_SYSCALL = 6
    CC_MPWCDECL = 7
    CC_MPWPASCAL = 8
    CC_MAX = 9

class FUNCFLAGS(enum.Enum):
    FUNCFLAG_FRESTRICTED = 1
    FUNCFLAG_FSOURCE = 2
    FUNCFLAG_FBINDABLE = 4
    FUNCFLAG_FREQUESTEDIT = 8
    FUNCFLAG_FDISPLAYBIND = 16
    FUNCFLAG_FDEFAULTBIND = 32
    FUNCFLAG_FHIDDEN = 64
    FUNCFLAG_FUSESGETLASTERROR = 128
    FUNCFLAG_FDEFAULTCOLLELEM = 256
    FUNCFLAG_FUIDEFAULT = 512
    FUNCFLAG_FNONBROWSABLE = 1024
    FUNCFLAG_FREPLACEABLE = 2048
    FUNCFLAG_FIMMEDIATEBIND = 4096

class VARFLAGS(enum.Enum):
    VARFLAG_FREADONLY = 1
    VARFLAG_FSOURCE = 2
    VARFLAG_FBINDABLE = 4
    VARFLAG_FREQUESTEDIT = 8
    VARFLAG_FDISPLAYBIND = 16
    VARFLAG_FDEFAULTBIND = 32
    VARFLAG_FHIDDEN = 64
    VARFLAG_FRESTRICTED = 128
    VARFLAG_FDEFAULTCOLLELEM = 256
    VARFLAG_FUIDEFAULT = 512
    VARFLAG_FNONBROWSABLE = 1024
    VARFLAG_FREPLACEABLE = 2048
    VARFLAG_FIMMEDIATEBIND = 4096

class ITypeInfo:
    """    """
    @overload
    def AddressOfMember(self, memid: int, invKind: INVOKEKIND) -> (System.IntPtr): ...
    @overload
    def CreateInstance(self, pUnkOuter: object) -> (System.Guid, object): ...
    @overload
    def GetContainingTypeLib() -> (ITypeLib, int): ...
    @overload
    def GetDllEntry(self, memid: int, invKind: INVOKEKIND, pBstrDllName: System.IntPtr, pBstrName: System.IntPtr, pwOrdinal: System.IntPtr) -> None: ...
    @overload
    def GetDocumentation(self, index: int) -> (str, str, int, str): ...
    @overload
    def GetFuncDesc(self, index: int) -> (System.IntPtr): ...
    @overload
    def GetIDsOfNames(self, rgszNames: System.System.Array[str], cNames: int) -> (System.System.Array[int]): ...
    @overload
    def GetImplTypeFlags(self, index: int) -> (IMPLTYPEFLAGS): ...
    @overload
    def GetMops(self, memid: int) -> (str): ...
    @overload
    def GetNames(self, memid: int, cMaxNames: int) -> (System.System.Array[str], int): ...
    @overload
    def GetRefTypeInfo(self, hRef: int) -> (ITypeInfo): ...
    @overload
    def GetRefTypeOfImplType(self, index: int) -> (int): ...
    @overload
    def GetTypeAttr() -> (System.IntPtr): ...
    @overload
    def GetTypeComp() -> (ITypeComp): ...
    @overload
    def GetVarDesc(self, index: int) -> (System.IntPtr): ...
    @overload
    def Invoke(self, pvInstance: object, memid: int, wFlags: System.Int16, pVarResult: System.IntPtr, pExcepInfo: System.IntPtr) -> (DISPPARAMS, int): ...
    @overload
    def ReleaseFuncDesc(self, pFuncDesc: System.IntPtr) -> None: ...
    @overload
    def ReleaseTypeAttr(self, pTypeAttr: System.IntPtr) -> None: ...
    @overload
    def ReleaseVarDesc(self, pVarDesc: System.IntPtr) -> None: ...

class ITypeInfo2:
    """    """
    @overload
    def AddressOfMember(self, memid: int, invKind: INVOKEKIND) -> (System.IntPtr): ...
    @overload
    def CreateInstance(self, pUnkOuter: object) -> (System.Guid, object): ...
    @overload
    def GetAllCustData(self, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetAllFuncCustData(self, index: int, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetAllImplTypeCustData(self, index: int, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetAllParamCustData(self, indexFunc: int, indexParam: int, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetAllVarCustData(self, index: int, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetContainingTypeLib() -> (ITypeLib, int): ...
    @overload
    def GetCustData() -> (System.Guid, object): ...
    @overload
    def GetDllEntry(self, memid: int, invKind: INVOKEKIND, pBstrDllName: System.IntPtr, pBstrName: System.IntPtr, pwOrdinal: System.IntPtr) -> None: ...
    @overload
    def GetDocumentation(self, index: int) -> (str, str, int, str): ...
    @overload
    def GetDocumentation2(self, memid: int) -> (str, int, str): ...
    @overload
    def GetFuncCustData(self, index: int) -> (System.Guid, object): ...
    @overload
    def GetFuncDesc(self, index: int) -> (System.IntPtr): ...
    @overload
    def GetFuncIndexOfMemId(self, memid: int, invKind: INVOKEKIND) -> (int): ...
    @overload
    def GetIDsOfNames(self, rgszNames: System.System.Array[str], cNames: int) -> (System.System.Array[int]): ...
    @overload
    def GetImplTypeCustData(self, index: int) -> (System.Guid, object): ...
    @overload
    def GetImplTypeFlags(self, index: int) -> (IMPLTYPEFLAGS): ...
    @overload
    def GetMops(self, memid: int) -> (str): ...
    @overload
    def GetNames(self, memid: int, cMaxNames: int) -> (System.System.Array[str], int): ...
    @overload
    def GetParamCustData(self, indexFunc: int, indexParam: int) -> (System.Guid, object): ...
    @overload
    def GetRefTypeInfo(self, hRef: int) -> (ITypeInfo): ...
    @overload
    def GetRefTypeOfImplType(self, index: int) -> (int): ...
    @overload
    def GetTypeAttr() -> (System.IntPtr): ...
    @overload
    def GetTypeComp() -> (ITypeComp): ...
    @overload
    def GetTypeFlags() -> (int): ...
    @overload
    def GetTypeKind() -> (TYPEKIND): ...
    @overload
    def GetVarCustData(self, index: int) -> (System.Guid, object): ...
    @overload
    def GetVarDesc(self, index: int) -> (System.IntPtr): ...
    @overload
    def GetVarIndexOfMemId(self, memid: int) -> (int): ...
    @overload
    def Invoke(self, pvInstance: object, memid: int, wFlags: System.Int16, pVarResult: System.IntPtr, pExcepInfo: System.IntPtr) -> (DISPPARAMS, int): ...
    @overload
    def ReleaseFuncDesc(self, pFuncDesc: System.IntPtr) -> None: ...
    @overload
    def ReleaseTypeAttr(self, pTypeAttr: System.IntPtr) -> None: ...
    @overload
    def ReleaseVarDesc(self, pVarDesc: System.IntPtr) -> None: ...

class SYSKIND(enum.Enum):
    SYS_WIN16 = 0
    SYS_WIN32 = 1
    SYS_MAC = 2
    SYS_WIN64 = 3

class LIBFLAGS(enum.Enum):
    LIBFLAG_FRESTRICTED = 1
    LIBFLAG_FCONTROL = 2
    LIBFLAG_FHIDDEN = 4
    LIBFLAG_FHASDISKIMAGE = 8

class TYPELIBATTR(System.ValueType):
    """    """
    @property
    def guid(self) -> System.Guid: ...
    @property
    def lcid(self) -> int: ...
    @property
    def syskind(self) -> SYSKIND: ...
    @property
    def wMajorVerNum(self) -> System.Int16: ...
    @property
    def wMinorVerNum(self) -> System.Int16: ...
    @property
    def wLibFlags(self) -> LIBFLAGS: ...

class ITypeLib:
    """    """
    @overload
    def FindName(self, szNameBuf: str, lHashVal: int) -> (System.Array[ITypeInfo], System.System.Array[int], System.Int16): ...
    @overload
    def GetDocumentation(self, index: int) -> (str, str, int, str): ...
    @overload
    def GetLibAttr() -> (System.IntPtr): ...
    @overload
    def GetTypeComp() -> (ITypeComp): ...
    @overload
    def GetTypeInfo(self, index: int) -> (ITypeInfo): ...
    @overload
    def GetTypeInfoCount() -> int: ...
    @overload
    def GetTypeInfoOfGuid() -> (System.Guid, ITypeInfo): ...
    @overload
    def GetTypeInfoType(self, index: int) -> (TYPEKIND): ...
    @overload
    def IsName(self, szNameBuf: str, lHashVal: int) -> bool: ...
    @overload
    def ReleaseTLibAttr(self, pTLibAttr: System.IntPtr) -> None: ...

class ITypeLib2:
    """    """
    @overload
    def FindName(self, szNameBuf: str, lHashVal: int) -> (System.Array[ITypeInfo], System.System.Array[int], System.Int16): ...
    @overload
    def GetAllCustData(self, pCustData: System.IntPtr) -> None: ...
    @overload
    def GetCustData() -> (System.Guid, object): ...
    @overload
    def GetDocumentation(self, index: int) -> (str, str, int, str): ...
    @overload
    def GetDocumentation2(self, index: int) -> (str, int, str): ...
    @overload
    def GetLibAttr() -> (System.IntPtr): ...
    @overload
    def GetLibStatistics(self, pcUniqueNames: System.IntPtr) -> (int): ...
    @overload
    def GetTypeComp() -> (ITypeComp): ...
    @overload
    def GetTypeInfo(self, index: int) -> (ITypeInfo): ...
    @overload
    def GetTypeInfoCount() -> int: ...
    @overload
    def GetTypeInfoOfGuid() -> (System.Guid, ITypeInfo): ...
    @overload
    def GetTypeInfoType(self, index: int) -> (TYPEKIND): ...
    @overload
    def IsName(self, szNameBuf: str, lHashVal: int) -> bool: ...
    @overload
    def ReleaseTLibAttr(self, pTLibAttr: System.IntPtr) -> None: ...

# endregion

# region: System.Runtime.InteropServices, Version=7.0.0.0

class ADVF(enum.Enum):
    ADVF_NODATA = 1
    ADVF_PRIMEFIRST = 2
    ADVF_ONLYONCE = 4
    ADVFCACHE_NOHANDLER = 8
    ADVFCACHE_FORCEBUILTIN = 16
    ADVFCACHE_ONSAVE = 32
    ADVF_DATAONSTOP = 64

class DATADIR(enum.Enum):
    DATADIR_GET = 1
    DATADIR_SET = 2

class DVASPECT(enum.Enum):
    DVASPECT_CONTENT = 1
    DVASPECT_THUMBNAIL = 2
    DVASPECT_ICON = 4
    DVASPECT_DOCPRINT = 8

class FORMATETC(System.ValueType):
    """    """
    @property
    def cfFormat(self) -> System.Int16: ...
    @property
    def ptd(self) -> System.IntPtr: ...
    @property
    def dwAspect(self) -> DVASPECT: ...
    @property
    def lindex(self) -> int: ...
    @property
    def tymed(self) -> TYMED: ...

class IAdviseSink:
    """    """
    @overload
    def OnClose() -> None: ...
    @overload
    def OnDataChange() -> (FORMATETC, STGMEDIUM): ...
    @overload
    def OnRename(self, moniker: IMoniker) -> None: ...
    @overload
    def OnSave() -> None: ...
    @overload
    def OnViewChange(self, aspect: int, index: int) -> None: ...

class IDataObject:
    """    """
    @overload
    def DAdvise(self, advf: ADVF, adviseSink: IAdviseSink) -> (int, FORMATETC, int): ...
    @overload
    def DUnadvise(self, connection: int) -> None: ...
    @overload
    def EnumDAdvise() -> (int, IEnumSTATDATA): ...
    @overload
    def EnumFormatEtc(self, direction: DATADIR) -> IEnumFORMATETC: ...
    @overload
    def GetCanonicalFormatEtc() -> (int, FORMATETC, FORMATETC): ...
    @overload
    def GetData() -> (FORMATETC, STGMEDIUM): ...
    @overload
    def GetDataHere() -> (FORMATETC, STGMEDIUM): ...
    @overload
    def QueryGetData() -> (int, FORMATETC): ...
    @overload
    def SetData(self, release: bool) -> (FORMATETC, STGMEDIUM): ...

class IEnumFORMATETC:
    """    """
    @overload
    def Clone() -> (IEnumFORMATETC): ...
    @overload
    def Next(self, celt: int) -> (int, System.Array[FORMATETC], System.System.Array[int]): ...
    @overload
    def Reset() -> int: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class IEnumSTATDATA:
    """    """
    @overload
    def Clone() -> (IEnumSTATDATA): ...
    @overload
    def Next(self, celt: int) -> (int, System.Array[STATDATA], System.System.Array[int]): ...
    @overload
    def Reset() -> int: ...
    @overload
    def Skip(self, celt: int) -> int: ...

class STATDATA(System.ValueType):
    """    """
    @property
    def formatetc(self) -> FORMATETC: ...
    @property
    def advf(self) -> ADVF: ...
    @property
    def advSink(self) -> IAdviseSink: ...
    @property
    def connection(self) -> int: ...

class STGMEDIUM(System.ValueType):
    """    """
    @property
    def tymed(self) -> TYMED: ...
    @property
    def unionmember(self) -> System.IntPtr: ...
    @property
    def pUnkForRelease(self) -> object: ...

class TYMED(enum.Enum):
    TYMED_NULL = 0
    TYMED_HGLOBAL = 1
    TYMED_FILE = 2
    TYMED_ISTREAM = 4
    TYMED_ISTORAGE = 8
    TYMED_GDI = 16
    TYMED_MFPICT = 32
    TYMED_ENHMF = 64

# endregion
