"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AnsiStringMarshaller", "ArrayMarshaller", "BStrStringMarshaller", "ContiguousCollectionMarshallerAttribute", "CustomMarshallerAttribute", "GenericPlaceholder", "MarshalMode", "MarshalUsingAttribute", "NativeMarshallingAttribute", "PointerArrayMarshaller", "ReadOnlySpanMarshaller", "UnmanagedToManagedOut", "SpanMarshaller", "Utf16StringMarshaller", "Utf8StringMarshaller"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class AnsiStringMarshaller(object):
    """    """
    @overload
    @staticmethod
    def ConvertToManaged(unmanaged: System.Byte) -> str: ...
    @overload
    @staticmethod
    def ConvertToUnmanaged(managed: str) -> System.Byte: ...
    @overload
    @staticmethod
    def Free(unmanaged: System.Byte) -> None: ...

class ArrayMarshaller(object):
    """    ArrayMarshaller[T, TUnmanagedElement]
    """
    @overload
    @staticmethod
    def AllocateContainerForManagedElements(unmanaged: TUnmanagedElement, numElements: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def AllocateContainerForUnmanagedElements(managed: System.Array[T]) -> (TUnmanagedElement, int): ...
    @overload
    @staticmethod
    def Free(unmanaged: TUnmanagedElement) -> None: ...
    @overload
    @staticmethod
    def GetManagedValuesDestination(managed: System.Array[T]) -> System.Span: ...
    @overload
    @staticmethod
    def GetManagedValuesSource(managed: System.Array[T]) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesDestination(unmanaged: TUnmanagedElement, numElements: int) -> System.Span: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesSource(unmanagedValue: TUnmanagedElement, numElements: int) -> System.ReadOnlySpan: ...

class BStrStringMarshaller(object):
    """    """
    @overload
    @staticmethod
    def ConvertToManaged(unmanaged: System.UInt16) -> str: ...
    @overload
    @staticmethod
    def ConvertToUnmanaged(managed: str) -> System.UInt16: ...
    @overload
    @staticmethod
    def Free(unmanaged: System.UInt16) -> None: ...

class ContiguousCollectionMarshallerAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class CustomMarshallerAttribute(System.Attribute):
    """    """
    def __init__(self, managedType: System.Type, marshalMode: MarshalMode, marshallerType: System.Type): ...
    @property
    def ManagedType(self) -> System.Type: ...
    @property
    def MarshallerType(self) -> System.Type: ...
    @property
    def MarshalMode(self) -> MarshalMode: ...

class GenericPlaceholder(System.ValueType):
    """    """

class MarshalMode(enum.Enum):
    Default = 0
    ManagedToUnmanagedIn = 1
    ManagedToUnmanagedRef = 2
    ManagedToUnmanagedOut = 3
    UnmanagedToManagedIn = 4
    UnmanagedToManagedRef = 5
    UnmanagedToManagedOut = 6
    ElementIn = 7
    ElementRef = 8
    ElementOut = 9

class MarshalUsingAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nativeType: System.Type): ...
    @property
    def ReturnsCountValue(self) -> str: ...
    @property
    def ConstantElementCount(self) -> int: ...
    @property
    def CountElementName(self) -> str: ...
    @property
    def ElementIndirectionDepth(self) -> int: ...
    @property
    def NativeType(self) -> System.Type: ...
    @ConstantElementCount.setter
    def ConstantElementCount(self, value: System.Void): ...
    @CountElementName.setter
    def CountElementName(self, value: System.Void): ...
    @ElementIndirectionDepth.setter
    def ElementIndirectionDepth(self, value: System.Void): ...

class NativeMarshallingAttribute(System.Attribute):
    """    """
    def __init__(self, nativeType: System.Type): ...
    @property
    def NativeType(self) -> System.Type: ...

class PointerArrayMarshaller(object):
    """    PointerArrayMarshaller[T, TUnmanagedElement]
    """
    @overload
    @staticmethod
    def AllocateContainerForManagedElements(unmanaged: TUnmanagedElement, numElements: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def AllocateContainerForUnmanagedElements(managed: System.Array[T]) -> (TUnmanagedElement, int): ...
    @overload
    @staticmethod
    def Free(unmanaged: TUnmanagedElement) -> None: ...
    @overload
    @staticmethod
    def GetManagedValuesDestination(managed: System.Array[T]) -> System.Span: ...
    @overload
    @staticmethod
    def GetManagedValuesSource(managed: System.Array[T]) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesDestination(unmanaged: TUnmanagedElement, numElements: int) -> System.Span: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesSource(unmanagedValue: TUnmanagedElement, numElements: int) -> System.ReadOnlySpan: ...

class ReadOnlySpanMarshaller(object):
    """    ReadOnlySpanMarshaller[T, TUnmanagedElement]
    """

class UnmanagedToManagedOut(object):
    """    UnmanagedToManagedOut[T, TUnmanagedElement]
    """
    @overload
    @staticmethod
    def AllocateContainerForUnmanagedElements(managed: System.ReadOnlySpan) -> (TUnmanagedElement, int): ...
    @overload
    @staticmethod
    def GetManagedValuesSource(managed: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesDestination(unmanaged: TUnmanagedElement, numElements: int) -> System.Span: ...

class SpanMarshaller(object):
    """    SpanMarshaller[T, TUnmanagedElement]
    """
    @overload
    @staticmethod
    def AllocateContainerForManagedElements(unmanaged: TUnmanagedElement, numElements: int) -> System.Span: ...
    @overload
    @staticmethod
    def AllocateContainerForUnmanagedElements(managed: System.Span) -> (TUnmanagedElement, int): ...
    @overload
    @staticmethod
    def Free(unmanaged: TUnmanagedElement) -> None: ...
    @overload
    @staticmethod
    def GetManagedValuesDestination(managed: System.Span) -> System.Span: ...
    @overload
    @staticmethod
    def GetManagedValuesSource(managed: System.Span) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesDestination(unmanaged: TUnmanagedElement, numElements: int) -> System.Span: ...
    @overload
    @staticmethod
    def GetUnmanagedValuesSource(unmanaged: TUnmanagedElement, numElements: int) -> System.ReadOnlySpan: ...

class Utf16StringMarshaller(object):
    """    """
    @overload
    @staticmethod
    def ConvertToManaged(unmanaged: System.UInt16) -> str: ...
    @overload
    @staticmethod
    def ConvertToUnmanaged(managed: str) -> System.UInt16: ...
    @overload
    @staticmethod
    def Free(unmanaged: System.UInt16) -> None: ...
    @overload
    @staticmethod
    def GetPinnableReference(str_: str) -> System.Char: ...

class Utf8StringMarshaller(object):
    """    """
    @overload
    @staticmethod
    def ConvertToManaged(unmanaged: System.Byte) -> str: ...
    @overload
    @staticmethod
    def ConvertToUnmanaged(managed: str) -> System.Byte: ...
    @overload
    @staticmethod
    def Free(unmanaged: System.Byte) -> None: ...

# endregion
