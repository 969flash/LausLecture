"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["SequenceMarshal"]
# endregion

# region: Imports
from System import Buffers
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["ComTypes", "AssemblyRegistrationFlags", "AutomationProxyAttribute", "ComAliasNameAttribute", "ComAwareEventInfo", "ComCompatibleVersionAttribute", "ComConversionLossAttribute", "ComRegisterFunctionAttribute", "ComUnregisterFunctionAttribute", "ExporterEventKind", "HandleCollector", "ImportedFromTypeLibAttribute", "ManagedToNativeComInteropStubAttribute", "PrimaryInteropAssemblyAttribute", "RegistrationClassContext", "RegistrationConnectionType", "RuntimeEnvironment", "TypeLibFuncAttribute", "TypeLibFuncFlags", "TypeLibImportClassAttribute", "TypeLibTypeAttribute", "TypeLibTypeFlags", "TypeLibVarAttribute", "TypeLibVarFlags", "TypeLibVersionAttribute"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ObjectiveC", "Marshalling", "ComTypes", "GCHandle", "Marshal", "MemoryMarshal", "NativeLibrary", "ComWrappers", "ComInterfaceDispatch", "ComInterfaceEntry", "ComEventsHelper", "Architecture", "ArrayWithOffset", "BestFitMappingAttribute", "BStrWrapper", "CallingConvention", "CharSet", "ClassInterfaceAttribute", "ClassInterfaceType", "CLong", "CoClassAttribute", "CollectionsMarshal", "ComDefaultInterfaceAttribute", "ComEventInterfaceAttribute", "COMException", "ComImportAttribute", "ComInterfaceType", "ComMemberType", "ComSourceInterfacesAttribute", "ComVisibleAttribute", "CreateComInterfaceFlags", "CreateObjectFlags", "CriticalHandle", "CULong", "CustomQueryInterfaceMode", "CustomQueryInterfaceResult", "DefaultCharSetAttribute", "DefaultDllImportSearchPathsAttribute", "DefaultParameterValueAttribute", "DispatchWrapper", "DispIdAttribute", "DllImportAttribute", "DllImportSearchPath", "ErrorWrapper", "ExternalException", "FieldOffsetAttribute", "GCHandleType", "GuidAttribute", "HandleRef", "ICustomAdapter", "ICustomFactory", "ICustomMarshaler", "ICustomQueryInterface", "IDynamicInterfaceCastable", "DynamicInterfaceCastableImplementationAttribute", "InAttribute", "InterfaceTypeAttribute", "InvalidComObjectException", "InvalidOleVariantTypeException", "LayoutKind", "LCIDConversionAttribute", "LibraryImportAttribute", "MarshalAsAttribute", "MarshalDirectiveException", "DllImportResolver", "NativeMemory", "NFloat", "OptionalAttribute", "OSPlatform", "OutAttribute", "PosixSignal", "PosixSignalContext", "PosixSignalRegistration", "PreserveSigAttribute", "ProgIdAttribute", "RuntimeInformation", "SafeArrayRankMismatchException", "SafeArrayTypeMismatchException", "SafeBuffer", "SafeHandle", "SEHException", "StringMarshalling", "StructLayoutAttribute", "SuppressGCTransitionAttribute", "TypeIdentifierAttribute", "UnknownWrapper", "UnmanagedCallConvAttribute", "UnmanagedCallersOnlyAttribute", "UnmanagedFunctionPointerAttribute", "UnmanagedType", "VarEnum", "VariantWrapper", "StandardOleMarshalObject"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Globalization
from System import Reflection
from System import Security
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import ConstrainedExecution
from System.Runtime.InteropServices import ComTypes
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class GCHandle(System.ValueType):
    """    """
    @overload
    def AddrOfPinnedObject() -> System.IntPtr: ...
    @overload
    @staticmethod
    def Alloc(value: object) -> GCHandle: ...
    @overload
    @staticmethod
    def Alloc(value: object, type_: GCHandleType) -> GCHandle: ...
    @overload
    def Equals(self, other: GCHandle) -> bool: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Free() -> None: ...
    @overload
    @staticmethod
    def FromIntPtr(value: System.IntPtr) -> GCHandle: ...
    @property
    def IsAllocated(self) -> bool: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @overload
    @staticmethod
    def ToIntPtr(value: GCHandle) -> System.IntPtr: ...

class Marshal(object):
    """    """
    @property
    def SystemDefaultCharSize(self) -> int: ...
    @property
    def SystemMaxDBCSCharSize(self) -> int: ...
    @overload
    @staticmethod
    def AddRef(pUnk: System.IntPtr) -> int: ...
    @overload
    @staticmethod
    def AllocCoTaskMem(cb: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def AllocHGlobal(cb: System.IntPtr) -> System.IntPtr: ...
    @overload
    @staticmethod
    def AllocHGlobal(cb: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def AreComObjectsAvailableForCleanup() -> bool: ...
    @overload
    @staticmethod
    def BindToMoniker(monikerName: str) -> object: ...
    @overload
    @staticmethod
    def ChangeWrapperHandleStrength(otp: object, fIsWeak: bool) -> None: ...
    @overload
    @staticmethod
    def CleanupUnusedObjectsInCurrentContext() -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.Single], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.Int64], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.IntPtr], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[float], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[int], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.Char], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.Int16], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.Int64], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.Byte], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.IntPtr], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[int], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.Byte], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.Char], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[System.Single], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.IntPtr, destination: System.System.Array[System.Int16], startIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.System.Array[float], startIndex: int, destination: System.IntPtr, length: int) -> None: ...
    @overload
    @staticmethod
    def CreateAggregatedObject(pOuter: System.IntPtr, o: object) -> System.IntPtr: ...
    @overload
    @staticmethod
    def CreateAggregatedObject(pOuter: System.IntPtr, o: T) -> System.IntPtr: ...
    @overload
    @staticmethod
    def CreateWrapperOfType(o: T) -> TWrapper: ...
    @overload
    @staticmethod
    def CreateWrapperOfType(o: object, t: System.Type) -> object: ...
    @overload
    @staticmethod
    def DestroyStructure(ptr: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def DestroyStructure(ptr: System.IntPtr, structuretype: System.Type) -> None: ...
    @overload
    @staticmethod
    def FinalReleaseComObject(o: object) -> int: ...
    @overload
    @staticmethod
    def FreeBSTR(ptr: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def FreeCoTaskMem(ptr: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def FreeHGlobal(hglobal: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def GenerateGuidForType(type_: System.Type) -> System.Guid: ...
    @overload
    @staticmethod
    def GenerateProgIdForType(type_: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetComInterfaceForObject(o: T) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetComInterfaceForObject(o: object, T: System.Type) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetComInterfaceForObject(o: object, T: System.Type, mode: CustomQueryInterfaceMode) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetComObjectData(obj: object, key: object) -> object: ...
    @overload
    @staticmethod
    def GetDelegateForFunctionPointer(ptr: System.IntPtr) -> TDelegate: ...
    @overload
    @staticmethod
    def GetDelegateForFunctionPointer(ptr: System.IntPtr, t: System.Type) -> System.Delegate: ...
    @overload
    @staticmethod
    def GetEndComSlot(t: System.Type) -> int: ...
    @overload
    @staticmethod
    def GetExceptionForHR(errorCode: int) -> System.Exception: ...
    @overload
    @staticmethod
    def GetExceptionForHR(errorCode: int, errorInfo: System.IntPtr) -> System.Exception: ...
    @overload
    @staticmethod
    def GetExceptionPointers() -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetFunctionPointerForDelegate(d: System.Delegate) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetFunctionPointerForDelegate(d: TDelegate) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetHINSTANCE(m: Reflection.Module) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetHRForException(e: System.Exception) -> int: ...
    @overload
    @staticmethod
    def GetHRForLastWin32Error() -> int: ...
    @overload
    @staticmethod
    def GetIDispatchForObject(o: object) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetIUnknownForObject(o: object) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetLastPInvokeError() -> int: ...
    @overload
    @staticmethod
    def GetLastPInvokeErrorMessage() -> str: ...
    @overload
    @staticmethod
    def GetLastSystemError() -> int: ...
    @overload
    @staticmethod
    def GetLastWin32Error() -> int: ...
    @overload
    @staticmethod
    def GetNativeVariantForObject(obj: T, pDstNativeVariant: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def GetNativeVariantForObject(obj: object, pDstNativeVariant: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def GetObjectForIUnknown(pUnk: System.IntPtr) -> object: ...
    @overload
    @staticmethod
    def GetObjectForNativeVariant(pSrcNativeVariant: System.IntPtr) -> object: ...
    @overload
    @staticmethod
    def GetObjectForNativeVariant(pSrcNativeVariant: System.IntPtr) -> T: ...
    @overload
    @staticmethod
    def GetObjectsForNativeVariants(aSrcNativeVariant: System.IntPtr, cVars: int) -> System.System.Array[object]: ...
    @overload
    @staticmethod
    def GetObjectsForNativeVariants(aSrcNativeVariant: System.IntPtr, cVars: int) -> System.Array[T]: ...
    @overload
    @staticmethod
    def GetPInvokeErrorMessage(error: int) -> str: ...
    @overload
    @staticmethod
    def GetStartComSlot(t: System.Type) -> int: ...
    @overload
    @staticmethod
    def GetTypedObjectForIUnknown(pUnk: System.IntPtr, t: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetTypeFromCLSID(clsid: System.Guid) -> System.Type: ...
    @overload
    @staticmethod
    def GetTypeInfoName(typeInfo: ComTypes.ITypeInfo) -> str: ...
    @overload
    @staticmethod
    def GetUniqueObjectForIUnknown(unknown: System.IntPtr) -> object: ...
    @overload
    @staticmethod
    def InitHandle(safeHandle: SafeHandle, handle: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def IsComObject(o: object) -> bool: ...
    @overload
    @staticmethod
    def IsTypeVisibleFromCom(t: System.Type) -> bool: ...
    @overload
    @staticmethod
    def OffsetOf(fieldName: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def OffsetOf(t: System.Type, fieldName: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def Prelink(m: Reflection.MethodInfo) -> None: ...
    @overload
    @staticmethod
    def PrelinkAll(c: System.Type) -> None: ...
    @overload
    @staticmethod
    def PtrToStringAnsi(ptr: System.IntPtr) -> str: ...
    @overload
    @staticmethod
    def PtrToStringAnsi(ptr: System.IntPtr, len_: int) -> str: ...
    @overload
    @staticmethod
    def PtrToStringAuto(ptr: System.IntPtr) -> str: ...
    @overload
    @staticmethod
    def PtrToStringAuto(ptr: System.IntPtr, len_: int) -> str: ...
    @overload
    @staticmethod
    def PtrToStringBSTR(ptr: System.IntPtr) -> str: ...
    @overload
    @staticmethod
    def PtrToStringUni(ptr: System.IntPtr) -> str: ...
    @overload
    @staticmethod
    def PtrToStringUni(ptr: System.IntPtr, len_: int) -> str: ...
    @overload
    @staticmethod
    def PtrToStringUTF8(ptr: System.IntPtr) -> str: ...
    @overload
    @staticmethod
    def PtrToStringUTF8(ptr: System.IntPtr, byteLen: int) -> str: ...
    @overload
    @staticmethod
    def PtrToStructure(ptr: System.IntPtr) -> T: ...
    @overload
    @staticmethod
    def PtrToStructure(ptr: System.IntPtr, structure: object) -> None: ...
    @overload
    @staticmethod
    def PtrToStructure(ptr: System.IntPtr, structure: T) -> None: ...
    @overload
    @staticmethod
    def PtrToStructure(ptr: System.IntPtr, structureType: System.Type) -> object: ...
    @overload
    @staticmethod
    def QueryInterface(pUnk: System.IntPtr) -> (int, System.Guid, System.IntPtr): ...
    @overload
    @staticmethod
    def ReadByte(ptr: System.IntPtr) -> System.Byte: ...
    @overload
    @staticmethod
    def ReadByte(ptr: System.IntPtr, ofs: int) -> System.Byte: ...
    @overload
    @staticmethod
    def ReadInt16(ptr: System.IntPtr) -> System.Int16: ...
    @overload
    @staticmethod
    def ReadInt16(ptr: System.IntPtr, ofs: int) -> System.Int16: ...
    @overload
    @staticmethod
    def ReadInt32(ptr: System.IntPtr) -> int: ...
    @overload
    @staticmethod
    def ReadInt32(ptr: System.IntPtr, ofs: int) -> int: ...
    @overload
    @staticmethod
    def ReadInt64(ptr: System.IntPtr) -> System.Int64: ...
    @overload
    @staticmethod
    def ReadInt64(ptr: System.IntPtr, ofs: int) -> System.Int64: ...
    @overload
    @staticmethod
    def ReadIntPtr(ptr: System.IntPtr) -> System.IntPtr: ...
    @overload
    @staticmethod
    def ReadIntPtr(ptr: System.IntPtr, ofs: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def ReAllocCoTaskMem(pv: System.IntPtr, cb: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def ReAllocHGlobal(pv: System.IntPtr, cb: System.IntPtr) -> System.IntPtr: ...
    @overload
    @staticmethod
    def Release(pUnk: System.IntPtr) -> int: ...
    @overload
    @staticmethod
    def ReleaseComObject(o: object) -> int: ...
    @overload
    @staticmethod
    def SecureStringToBSTR(s: Security.SecureString) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SecureStringToCoTaskMemAnsi(s: Security.SecureString) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SecureStringToCoTaskMemUnicode(s: Security.SecureString) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SecureStringToGlobalAllocAnsi(s: Security.SecureString) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SecureStringToGlobalAllocUnicode(s: Security.SecureString) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SetComObjectData(obj: object, key: object, data: object) -> bool: ...
    @overload
    @staticmethod
    def SetLastPInvokeError(error: int) -> None: ...
    @overload
    @staticmethod
    def SetLastSystemError(error: int) -> None: ...
    @overload
    @staticmethod
    def SizeOf() -> int: ...
    @overload
    @staticmethod
    def SizeOf(structure: T) -> int: ...
    @overload
    @staticmethod
    def SizeOf(t: System.Type) -> int: ...
    @overload
    @staticmethod
    def SizeOf(structure: object) -> int: ...
    @overload
    @staticmethod
    def StringToBSTR(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToCoTaskMemAnsi(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToCoTaskMemAuto(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToCoTaskMemUni(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToCoTaskMemUTF8(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToHGlobalAnsi(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToHGlobalAuto(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StringToHGlobalUni(s: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def StructureToPtr(structure: T, ptr: System.IntPtr, fDeleteOld: bool) -> None: ...
    @overload
    @staticmethod
    def StructureToPtr(structure: object, ptr: System.IntPtr, fDeleteOld: bool) -> None: ...
    @overload
    @staticmethod
    def ThrowExceptionForHR(errorCode: int) -> None: ...
    @overload
    @staticmethod
    def ThrowExceptionForHR(errorCode: int, errorInfo: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def UnsafeAddrOfPinnedArrayElement(arr: System.Array, index: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def UnsafeAddrOfPinnedArrayElement(arr: System.Array[T], index: int) -> System.IntPtr: ...
    @overload
    @staticmethod
    def WriteByte(ptr: System.IntPtr, val: System.Byte) -> None: ...
    @overload
    @staticmethod
    def WriteByte(ptr: System.IntPtr, ofs: int, val: System.Byte) -> None: ...
    @overload
    @staticmethod
    def WriteInt16(ptr: System.IntPtr, val: System.Int16) -> None: ...
    @overload
    @staticmethod
    def WriteInt16(ptr: System.IntPtr, val: System.Char) -> None: ...
    @overload
    @staticmethod
    def WriteInt16(ptr: System.IntPtr, ofs: int, val: System.Int16) -> None: ...
    @overload
    @staticmethod
    def WriteInt16(ptr: System.IntPtr, ofs: int, val: System.Char) -> None: ...
    @overload
    @staticmethod
    def WriteInt32(ptr: System.IntPtr, val: int) -> None: ...
    @overload
    @staticmethod
    def WriteInt32(ptr: System.IntPtr, ofs: int, val: int) -> None: ...
    @overload
    @staticmethod
    def WriteInt64(ptr: System.IntPtr, val: System.Int64) -> None: ...
    @overload
    @staticmethod
    def WriteInt64(ptr: System.IntPtr, ofs: int, val: System.Int64) -> None: ...
    @overload
    @staticmethod
    def WriteIntPtr(ptr: System.IntPtr, val: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def WriteIntPtr(ptr: System.IntPtr, ofs: int, val: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeBSTR(s: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeCoTaskMemAnsi(s: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeCoTaskMemUnicode(s: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeCoTaskMemUTF8(s: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeGlobalAllocAnsi(s: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def ZeroFreeGlobalAllocUnicode(s: System.IntPtr) -> None: ...

class MemoryMarshal(object):
    """    """
    @overload
    @staticmethod
    def AsBytes(span: System.Span) -> System.Span: ...
    @overload
    @staticmethod
    def AsBytes(span: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def AsMemory(memory: System.ReadOnlyMemory) -> System.Memory: ...
    @overload
    @staticmethod
    def AsRef(span: System.ReadOnlySpan) -> T: ...
    @overload
    @staticmethod
    def AsRef(span: System.Span) -> T: ...
    @overload
    @staticmethod
    def Cast(span: System.Span) -> System.Span: ...
    @overload
    @staticmethod
    def Cast(span: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def CreateFromPinnedArray(array: System.Array[T], start: int, length: int) -> System.Memory: ...
    @overload
    @staticmethod
    def CreateReadOnlySpan(length: int) -> (System.ReadOnlySpan, T): ...
    @overload
    @staticmethod
    def CreateReadOnlySpanFromNullTerminated(value: System.Char) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def CreateReadOnlySpanFromNullTerminated(value: System.Byte) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def CreateSpan(length: int) -> (System.Span, T): ...
    @overload
    @staticmethod
    def GetArrayDataReference(array: System.Array[T]) -> T: ...
    @overload
    @staticmethod
    def GetArrayDataReference(array: System.Array) -> System.Byte: ...
    @overload
    @staticmethod
    def GetReference(span: System.ReadOnlySpan) -> T: ...
    @overload
    @staticmethod
    def GetReference(span: System.Span) -> T: ...
    @overload
    @staticmethod
    def Read(source: System.ReadOnlySpan) -> T: ...
    @overload
    @staticmethod
    def ToEnumerable(memory: System.ReadOnlyMemory) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def TryGetArray(memory: System.ReadOnlyMemory) -> (bool, System.ArraySegment): ...
    @overload
    @staticmethod
    def TryGetMemoryManager(memory: System.ReadOnlyMemory) -> (bool, TManager): ...
    @overload
    @staticmethod
    def TryGetMemoryManager(memory: System.ReadOnlyMemory) -> (bool, TManager, int, int): ...
    @overload
    @staticmethod
    def TryGetString(memory: System.ReadOnlyMemory) -> (bool, str, int, int): ...
    @overload
    @staticmethod
    def TryRead(source: System.ReadOnlySpan) -> (bool, T): ...
    @overload
    @staticmethod
    def TryWrite(destination: System.Span) -> (bool, T): ...
    @overload
    @staticmethod
    def Write(destination: System.Span) -> (T): ...

class NativeLibrary(object):
    """    """
    @overload
    @staticmethod
    def Free(handle: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def GetExport(handle: System.IntPtr, name: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetMainProgramHandle() -> System.IntPtr: ...
    @overload
    @staticmethod
    def Load(libraryPath: str) -> System.IntPtr: ...
    @overload
    @staticmethod
    def Load(libraryName: str, assembly: Reflection.Assembly, searchPath: System.Nullable) -> System.IntPtr: ...
    @overload
    @staticmethod
    def SetDllImportResolver(assembly: Reflection.Assembly, resolver: DllImportResolver) -> None: ...
    @overload
    @staticmethod
    def TryGetExport(handle: System.IntPtr, name: str) -> (bool, System.IntPtr): ...
    @overload
    @staticmethod
    def TryLoad(libraryPath: str) -> (bool, System.IntPtr): ...
    @overload
    @staticmethod
    def TryLoad(libraryName: str, assembly: Reflection.Assembly, searchPath: System.Nullable) -> (bool, System.IntPtr): ...

class ComWrappers(object):
    """    """
    @overload
    def GetOrCreateComInterfaceForObject(self, instance: object, flags: CreateComInterfaceFlags) -> System.IntPtr: ...
    @overload
    def GetOrCreateObjectForComInstance(self, externalComObject: System.IntPtr, flags: CreateObjectFlags) -> object: ...
    @overload
    def GetOrRegisterObjectForComInstance(self, externalComObject: System.IntPtr, flags: CreateObjectFlags, wrapper: object) -> object: ...
    @overload
    def GetOrRegisterObjectForComInstance(self, externalComObject: System.IntPtr, flags: CreateObjectFlags, wrapper: object, inner: System.IntPtr) -> object: ...
    @overload
    @staticmethod
    def RegisterForMarshalling(instance: ComWrappers) -> None: ...
    @overload
    @staticmethod
    def RegisterForTrackerSupport(instance: ComWrappers) -> None: ...

class ComInterfaceDispatch(System.ValueType):
    """    """
    @property
    def Vtable(self) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetInstance(dispatchPtr: ComInterfaceDispatch) -> T: ...

class ComInterfaceEntry(System.ValueType):
    """    """
    @property
    def IID(self) -> System.Guid: ...
    @property
    def Vtable(self) -> System.IntPtr: ...

class ComEventsHelper(object):
    """    """
    @overload
    @staticmethod
    def Combine(rcw: object, iid: System.Guid, dispid: int, d: System.Delegate) -> None: ...
    @overload
    @staticmethod
    def Remove(rcw: object, iid: System.Guid, dispid: int, d: System.Delegate) -> System.Delegate: ...

class Architecture(enum.Enum):
    X86 = 0
    X64 = 1
    Arm = 2
    Arm64 = 3
    Wasm = 4
    S390x = 5
    LoongArch64 = 6
    Armv6 = 7
    Ppc64le = 8

class ArrayWithOffset(System.ValueType):
    """    """
    def __init__(self, array: object, offset: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: ArrayWithOffset) -> bool: ...
    @overload
    def GetArray() -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetOffset() -> int: ...

class BestFitMappingAttribute(System.Attribute):
    """    """
    def __init__(self, BestFitMapping: bool): ...
    @property
    def ThrowOnUnmappableChar(self) -> bool: ...
    @property
    def BestFitMapping(self) -> bool: ...

class BStrWrapper(object):
    """    """
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: object): ...
    @property
    def WrappedObject(self) -> str: ...

class CallingConvention(enum.Enum):
    Winapi = 1
    Cdecl = 2
    StdCall = 3
    ThisCall = 4
    FastCall = 5

class CharSet(enum.Enum):
    None_ = 1
    Ansi = 2
    Unicode = 3
    Auto = 4

class ClassInterfaceAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, classInterfaceType: ClassInterfaceType): ...
    @overload
    def __init__(self, classInterfaceType: System.Int16): ...
    @property
    def Value(self) -> ClassInterfaceType: ...

class ClassInterfaceType(enum.Enum):
    None_ = 0
    AutoDispatch = 1
    AutoDual = 2

class CLong(System.ValueType):
    """    """
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: System.IntPtr): ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, other: CLong) -> bool: ...
    @property
    def Value(self) -> System.IntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CoClassAttribute(System.Attribute):
    """    """
    def __init__(self, coClass: System.Type): ...
    @property
    def CoClass(self) -> System.Type: ...

class CollectionsMarshal(object):
    """    """
    @overload
    @staticmethod
    def AsSpan(list_: Generic.List) -> System.Span: ...
    @overload
    @staticmethod
    def GetValueRefOrAddDefault(dictionary: Generic.Dictionary, key: TKey) -> (TValue, bool): ...
    @overload
    @staticmethod
    def GetValueRefOrNullRef(dictionary: Generic.Dictionary, key: TKey) -> TValue: ...

class ComDefaultInterfaceAttribute(System.Attribute):
    """    """
    def __init__(self, defaultInterface: System.Type): ...
    @property
    def Value(self) -> System.Type: ...

class ComEventInterfaceAttribute(System.Attribute):
    """    """
    def __init__(self, SourceInterface: System.Type, EventProvider: System.Type): ...
    @property
    def EventProvider(self) -> System.Type: ...
    @property
    def SourceInterface(self) -> System.Type: ...

class COMException(ExternalException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def ToString() -> str: ...

class ComImportAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ComInterfaceType(enum.Enum):
    InterfaceIsDual = 0
    InterfaceIsIUnknown = 1
    InterfaceIsIDispatch = 2
    InterfaceIsIInspectable = 3

class ComMemberType(enum.Enum):
    Method = 0
    PropGet = 1
    PropSet = 2

class ComSourceInterfacesAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, sourceInterfaces: str): ...
    @overload
    def __init__(self, sourceInterface: System.Type): ...
    @overload
    def __init__(self, sourceInterface1: System.Type, sourceInterface2: System.Type): ...
    @overload
    def __init__(self, sourceInterface1: System.Type, sourceInterface2: System.Type, sourceInterface3: System.Type): ...
    @overload
    def __init__(self, sourceInterface1: System.Type, sourceInterface2: System.Type, sourceInterface3: System.Type, sourceInterface4: System.Type): ...
    @property
    def Value(self) -> str: ...

class ComVisibleAttribute(System.Attribute):
    """    """
    def __init__(self, visibility: bool): ...
    @property
    def Value(self) -> bool: ...

class CreateComInterfaceFlags(enum.Enum):
    None_ = 0
    CallerDefinedIUnknown = 1
    TrackerSupport = 2

class CreateObjectFlags(enum.Enum):
    None_ = 0
    TrackerObject = 1
    UniqueInstance = 2
    Aggregation = 4
    Unwrap = 8

class CriticalHandle(ConstrainedExecution.CriticalFinalizerObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def IsInvalid(self) -> bool: ...
    @overload
    def SetHandleAsInvalid() -> None: ...

class CULong(System.ValueType):
    """    """
    @overload
    def __init__(self, value: System.UInt32): ...
    @overload
    def __init__(self, value: System.UIntPtr): ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, other: CULong) -> bool: ...
    @property
    def Value(self) -> System.UIntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CustomQueryInterfaceMode(enum.Enum):
    Ignore = 0
    Allow = 1

class CustomQueryInterfaceResult(enum.Enum):
    Handled = 0
    NotHandled = 1
    Failed = 2

class DefaultCharSetAttribute(System.Attribute):
    """    """
    def __init__(self, charSet: CharSet): ...
    @property
    def CharSet(self) -> CharSet: ...

class DefaultDllImportSearchPathsAttribute(System.Attribute):
    """    """
    def __init__(self, paths: DllImportSearchPath): ...
    @property
    def Paths(self) -> DllImportSearchPath: ...

class DefaultParameterValueAttribute(System.Attribute):
    """    """
    def __init__(self, value: object): ...
    @property
    def Value(self) -> object: ...

class DispatchWrapper(object):
    """    """
    def __init__(self, obj: object): ...
    @property
    def WrappedObject(self) -> object: ...

class DispIdAttribute(System.Attribute):
    """    """
    def __init__(self, dispId: int): ...
    @property
    def Value(self) -> int: ...

class DllImportAttribute(System.Attribute):
    """    """
    def __init__(self, dllName: str): ...
    @property
    def EntryPoint(self) -> str: ...
    @property
    def CharSet(self) -> CharSet: ...
    @property
    def SetLastError(self) -> bool: ...
    @property
    def ExactSpelling(self) -> bool: ...
    @property
    def CallingConvention(self) -> CallingConvention: ...
    @property
    def BestFitMapping(self) -> bool: ...
    @property
    def PreserveSig(self) -> bool: ...
    @property
    def ThrowOnUnmappableChar(self) -> bool: ...
    @property
    def Value(self) -> str: ...

class DllImportSearchPath(enum.Enum):
    LegacyBehavior = 0
    AssemblyDirectory = 2
    UseDllDirectoryForDependencies = 256
    ApplicationDirectory = 512
    UserDirectories = 1024
    System32 = 2048
    SafeDirectories = 4096

class ErrorWrapper(object):
    """    """
    @overload
    def __init__(self, errorCode: int): ...
    @overload
    def __init__(self, errorCode: object): ...
    @overload
    def __init__(self, e: System.Exception): ...
    @property
    def ErrorCode(self) -> int: ...

class ExternalException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @property
    def ErrorCode(self) -> int: ...
    @overload
    def ToString() -> str: ...

class FieldOffsetAttribute(System.Attribute):
    """    """
    def __init__(self, offset: int): ...
    @property
    def Value(self) -> int: ...

class GCHandleType(enum.Enum):
    Weak = 0
    WeakTrackResurrection = 1
    Normal = 2
    Pinned = 3

class GuidAttribute(System.Attribute):
    """    """
    def __init__(self, guid: str): ...
    @property
    def Value(self) -> str: ...

class HandleRef(System.ValueType):
    """    """
    def __init__(self, wrapper: object, handle: System.IntPtr): ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def Wrapper(self) -> object: ...
    @overload
    @staticmethod
    def ToIntPtr(value: HandleRef) -> System.IntPtr: ...

class ICustomAdapter:
    """    """
    @overload
    def GetUnderlyingObject() -> object: ...

class ICustomFactory:
    """    """
    @overload
    def CreateInstance(self, serverType: System.Type) -> System.MarshalByRefObject: ...

class ICustomMarshaler:
    """    """
    @overload
    def CleanUpManagedData(self, ManagedObj: object) -> None: ...
    @overload
    def CleanUpNativeData(self, pNativeData: System.IntPtr) -> None: ...
    @overload
    def GetNativeDataSize() -> int: ...
    @overload
    def MarshalManagedToNative(self, ManagedObj: object) -> System.IntPtr: ...
    @overload
    def MarshalNativeToManaged(self, pNativeData: System.IntPtr) -> object: ...

class ICustomQueryInterface:
    """    """
    @overload
    def GetInterface() -> (CustomQueryInterfaceResult, System.Guid, System.IntPtr): ...

class IDynamicInterfaceCastable:
    """    """
    @overload
    def GetInterfaceImplementation(self, interfaceType: System.RuntimeTypeHandle) -> System.RuntimeTypeHandle: ...
    @overload
    def IsInterfaceImplemented(self, interfaceType: System.RuntimeTypeHandle, throwIfNotImplemented: bool) -> bool: ...

class DynamicInterfaceCastableImplementationAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class InAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class InterfaceTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, interfaceType: ComInterfaceType): ...
    @overload
    def __init__(self, interfaceType: System.Int16): ...
    @property
    def Value(self) -> ComInterfaceType: ...

class InvalidComObjectException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class InvalidOleVariantTypeException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class LayoutKind(enum.Enum):
    Sequential = 0
    Explicit = 2
    Auto = 3

class LCIDConversionAttribute(System.Attribute):
    """    """
    def __init__(self, lcid: int): ...
    @property
    def Value(self) -> int: ...

class LibraryImportAttribute(System.Attribute):
    """    """
    def __init__(self, libraryName: str): ...
    @property
    def EntryPoint(self) -> str: ...
    @property
    def LibraryName(self) -> str: ...
    @property
    def SetLastError(self) -> bool: ...
    @property
    def StringMarshalling(self) -> StringMarshalling: ...
    @property
    def StringMarshallingCustomType(self) -> System.Type: ...
    @EntryPoint.setter
    def EntryPoint(self, value: System.Void): ...
    @SetLastError.setter
    def SetLastError(self, value: System.Void): ...
    @StringMarshalling.setter
    def StringMarshalling(self, value: System.Void): ...
    @StringMarshallingCustomType.setter
    def StringMarshallingCustomType(self, value: System.Void): ...

class MarshalAsAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, unmanagedType: UnmanagedType): ...
    @overload
    def __init__(self, unmanagedType: System.Int16): ...
    @property
    def SafeArraySubType(self) -> VarEnum: ...
    @property
    def SafeArrayUserDefinedSubType(self) -> System.Type: ...
    @property
    def IidParameterIndex(self) -> int: ...
    @property
    def ArraySubType(self) -> UnmanagedType: ...
    @property
    def SizeParamIndex(self) -> System.Int16: ...
    @property
    def SizeConst(self) -> int: ...
    @property
    def MarshalType(self) -> str: ...
    @property
    def MarshalTypeRef(self) -> System.Type: ...
    @property
    def MarshalCookie(self) -> str: ...
    @property
    def Value(self) -> UnmanagedType: ...

class MarshalDirectiveException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class DllImportResolver(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, libraryName: str, assembly: Reflection.Assembly, searchPath: System.Nullable, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> System.IntPtr: ...
    @overload
    def Invoke(self, libraryName: str, assembly: Reflection.Assembly, searchPath: System.Nullable) -> System.IntPtr: ...

class NativeMemory(object):
    """    """
    @overload
    @staticmethod
    def AlignedAlloc(byteCount: System.UIntPtr, alignment: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def AlignedFree(ptr: System.Void) -> None: ...
    @overload
    @staticmethod
    def AlignedRealloc(ptr: System.Void, byteCount: System.UIntPtr, alignment: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def Alloc(byteCount: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def Alloc(elementCount: System.UIntPtr, elementSize: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def AllocZeroed(byteCount: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def AllocZeroed(elementCount: System.UIntPtr, elementSize: System.UIntPtr) -> System.Void: ...
    @overload
    @staticmethod
    def Clear(ptr: System.Void, byteCount: System.UIntPtr) -> None: ...
    @overload
    @staticmethod
    def Copy(source: System.Void, destination: System.Void, byteCount: System.UIntPtr) -> None: ...
    @overload
    @staticmethod
    def Fill(ptr: System.Void, byteCount: System.UIntPtr, value: System.Byte) -> None: ...
    @overload
    @staticmethod
    def Free(ptr: System.Void) -> None: ...
    @overload
    @staticmethod
    def Realloc(ptr: System.Void, byteCount: System.UIntPtr) -> System.Void: ...

class NFloat(System.ValueType):
    """    """
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    @staticmethod
    def Abs(value: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Acos(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Acosh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def AcosPi(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Asin(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Asinh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def AsinPi(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Atan(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Atan2(y: NFloat, x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Atan2Pi(y: NFloat, x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Atanh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def AtanPi(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def BitDecrement(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def BitIncrement(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Cbrt(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Ceiling(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Clamp(value: NFloat, min_: NFloat, max_: NFloat) -> NFloat: ...
    @overload
    def CompareTo(self, other: NFloat) -> int: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: NFloat, sign: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Cos(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Cosh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def CosPi(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> NFloat: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> NFloat: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> NFloat: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: NFloat) -> bool: ...
    @overload
    @staticmethod
    def Exp(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Exp10(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Exp10M1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Exp2(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Exp2M1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def ExpM1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Floor(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(left: NFloat, right: NFloat, addend: NFloat) -> NFloat: ...
    @property
    def E(self) -> NFloat: ...
    @property
    def Epsilon(self) -> NFloat: ...
    @property
    def MaxValue(self) -> NFloat: ...
    @property
    def MinValue(self) -> NFloat: ...
    @property
    def NaN(self) -> NFloat: ...
    @property
    def NegativeInfinity(self) -> NFloat: ...
    @property
    def NegativeZero(self) -> NFloat: ...
    @property
    def Pi(self) -> NFloat: ...
    @property
    def PositiveInfinity(self) -> NFloat: ...
    @property
    def Size(self) -> int: ...
    @property
    def Tau(self) -> NFloat: ...
    @property
    def Value(self) -> float: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Hypot(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Ieee754Remainder(left: NFloat, right: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def ILogB(x: NFloat) -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(value: NFloat) -> bool: ...
    @overload
    @staticmethod
    def Log(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Log(x: NFloat, newBase: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Log10(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Log10P1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Log2(value: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Log2P1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def LogP1(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Max(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MaxMagnitudeNumber(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MaxNumber(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Min(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MinMagnitude(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MinMagnitudeNumber(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def MinNumber(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: str) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: System.IFormatProvider) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> NFloat: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> NFloat: ...
    @overload
    @staticmethod
    def Pow(x: NFloat, y: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def RootN(x: NFloat, n: int) -> NFloat: ...
    @overload
    @staticmethod
    def Round(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Round(x: NFloat, digits: int) -> NFloat: ...
    @overload
    @staticmethod
    def Round(x: NFloat, mode: System.MidpointRounding) -> NFloat: ...
    @overload
    @staticmethod
    def Round(x: NFloat, digits: int, mode: System.MidpointRounding) -> NFloat: ...
    @overload
    @staticmethod
    def ScaleB(x: NFloat, n: int) -> NFloat: ...
    @overload
    @staticmethod
    def Sign(value: NFloat) -> int: ...
    @overload
    @staticmethod
    def Sin(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def SinCos(x: NFloat) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def SinCosPi(x: NFloat) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def SinPi(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Sqrt(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Tan(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def Tanh(x: NFloat) -> NFloat: ...
    @overload
    @staticmethod
    def TanPi(x: NFloat) -> NFloat: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: System.IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: System.IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Truncate(x: NFloat) -> NFloat: ...
    @overload
    def TryFormat(self, destination: System.Span, format_: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan) -> (bool, NFloat): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, NFloat): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: System.IFormatProvider) -> (bool, NFloat): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, NFloat): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, NFloat): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, NFloat): ...

class OptionalAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class OSPlatform(System.ValueType):
    """    """
    @overload
    @staticmethod
    def Create(osPlatform: str) -> OSPlatform: ...
    @overload
    def Equals(self, other: OSPlatform) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FreeBSD(self) -> OSPlatform: ...
    @property
    def Linux(self) -> OSPlatform: ...
    @property
    def OSX(self) -> OSPlatform: ...
    @property
    def Windows(self) -> OSPlatform: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class OutAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class PosixSignal(enum.Enum):
    SIGTSTP = -10
    SIGTTOU = -9
    SIGTTIN = -8
    SIGWINCH = -7
    SIGCONT = -6
    SIGCHLD = -5
    SIGTERM = -4
    SIGQUIT = -3
    SIGINT = -2
    SIGHUP = -1

class PosixSignalContext(object):
    """    """
    def __init__(self, signal: PosixSignal): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def Signal(self) -> PosixSignal: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...

class PosixSignalRegistration(object):
    """    """
    @overload
    @staticmethod
    def Create(signal: PosixSignal, handler: System.Action) -> PosixSignalRegistration: ...
    @overload
    def Dispose() -> None: ...

class PreserveSigAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ProgIdAttribute(System.Attribute):
    """    """
    def __init__(self, progId: str): ...
    @property
    def Value(self) -> str: ...

class RuntimeInformation(object):
    """    """
    @property
    def FrameworkDescription(self) -> str: ...
    @property
    def OSArchitecture(self) -> Architecture: ...
    @property
    def OSDescription(self) -> str: ...
    @property
    def ProcessArchitecture(self) -> Architecture: ...
    @property
    def RuntimeIdentifier(self) -> str: ...
    @overload
    @staticmethod
    def IsOSPlatform(osPlatform: OSPlatform) -> bool: ...

class SafeArrayRankMismatchException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class SafeArrayTypeMismatchException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class SafeBuffer(SafeHandles.SafeHandleZeroOrMinusOneIsInvalid):
    """    """
    @overload
    def AcquirePointer() -> (System.Byte): ...
    @property
    def ByteLength(self) -> System.UInt64: ...
    @overload
    def Initialize(self, numElements: System.UInt32) -> None: ...
    @overload
    def Initialize(self, numBytes: System.UInt64) -> None: ...
    @overload
    def Initialize(self, numElements: System.UInt32, sizeOfEachElement: System.UInt32) -> None: ...
    @overload
    def Read(self, byteOffset: System.UInt64) -> T: ...
    @overload
    def ReadArray(self, byteOffset: System.UInt64, array: System.Array[T], index: int, count: int) -> None: ...
    @overload
    def ReadSpan(self, byteOffset: System.UInt64, buffer: System.Span) -> None: ...
    @overload
    def ReleasePointer() -> None: ...
    @overload
    def Write(self, byteOffset: System.UInt64, value: T) -> None: ...
    @overload
    def WriteArray(self, byteOffset: System.UInt64, array: System.Array[T], index: int, count: int) -> None: ...
    @overload
    def WriteSpan(self, byteOffset: System.UInt64, data: System.ReadOnlySpan) -> None: ...

class SafeHandle(ConstrainedExecution.CriticalFinalizerObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def DangerousAddRef() -> (bool): ...
    @overload
    def DangerousGetHandle() -> System.IntPtr: ...
    @overload
    def DangerousRelease() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def IsInvalid(self) -> bool: ...
    @overload
    def SetHandleAsInvalid() -> None: ...

class SEHException(ExternalException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def CanResume() -> bool: ...

class StringMarshalling(enum.Enum):
    Custom = 0
    Utf8 = 1
    Utf16 = 2

class StructLayoutAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, layoutKind: LayoutKind): ...
    @overload
    def __init__(self, layoutKind: System.Int16): ...
    @property
    def Pack(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def CharSet(self) -> CharSet: ...
    @property
    def Value(self) -> LayoutKind: ...

class SuppressGCTransitionAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class TypeIdentifierAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, scope: str, identifier: str): ...
    @property
    def Identifier(self) -> str: ...
    @property
    def Scope(self) -> str: ...

class UnknownWrapper(object):
    """    """
    def __init__(self, obj: object): ...
    @property
    def WrappedObject(self) -> object: ...

class UnmanagedCallConvAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def CallConvs(self) -> System.System.Array[System.Type]: ...

class UnmanagedCallersOnlyAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def CallConvs(self) -> System.System.Array[System.Type]: ...
    @property
    def EntryPoint(self) -> str: ...

class UnmanagedFunctionPointerAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, callingConvention: CallingConvention): ...
    @property
    def BestFitMapping(self) -> bool: ...
    @property
    def SetLastError(self) -> bool: ...
    @property
    def ThrowOnUnmappableChar(self) -> bool: ...
    @property
    def CharSet(self) -> CharSet: ...
    @property
    def CallingConvention(self) -> CallingConvention: ...

class UnmanagedType(enum.Enum):
    Bool = 2
    I1 = 3
    U1 = 4
    I2 = 5
    U2 = 6
    I4 = 7
    U4 = 8
    I8 = 9
    U8 = 10
    R4 = 11
    R8 = 12
    Currency = 15
    BStr = 19
    LPStr = 20
    LPWStr = 21
    LPTStr = 22
    ByValTStr = 23
    IUnknown = 25
    IDispatch = 26
    Struct = 27
    Interface = 28
    SafeArray = 29
    ByValArray = 30
    SysInt = 31
    SysUInt = 32
    VBByRefStr = 34
    AnsiBStr = 35
    TBStr = 36
    VariantBool = 37
    FunctionPtr = 38
    AsAny = 40
    LPArray = 42
    LPStruct = 43
    CustomMarshaler = 44
    Error = 45
    IInspectable = 46
    HString = 47
    LPUTF8Str = 48

class VarEnum(enum.Enum):
    VT_EMPTY = 0
    VT_NULL = 1
    VT_I2 = 2
    VT_I4 = 3
    VT_R4 = 4
    VT_R8 = 5
    VT_CY = 6
    VT_DATE = 7
    VT_BSTR = 8
    VT_DISPATCH = 9
    VT_ERROR = 10
    VT_BOOL = 11
    VT_VARIANT = 12
    VT_UNKNOWN = 13
    VT_DECIMAL = 14
    VT_I1 = 16
    VT_UI1 = 17
    VT_UI2 = 18
    VT_UI4 = 19
    VT_I8 = 20
    VT_UI8 = 21
    VT_INT = 22
    VT_UINT = 23
    VT_VOID = 24
    VT_HRESULT = 25
    VT_PTR = 26
    VT_SAFEARRAY = 27
    VT_CARRAY = 28
    VT_USERDEFINED = 29
    VT_LPSTR = 30
    VT_LPWSTR = 31
    VT_RECORD = 36
    VT_FILETIME = 64
    VT_BLOB = 65
    VT_STREAM = 66
    VT_STORAGE = 67
    VT_STREAMED_OBJECT = 68
    VT_STORED_OBJECT = 69
    VT_BLOB_OBJECT = 70
    VT_CF = 71
    VT_CLSID = 72
    VT_VECTOR = 4096
    VT_ARRAY = 8192
    VT_BYREF = 16384

class VariantWrapper(object):
    """    """
    def __init__(self, obj: object): ...
    @property
    def WrappedObject(self) -> object: ...

class StandardOleMarshalObject(System.MarshalByRefObject):
    """    """

# endregion

# region: System.Runtime.InteropServices, Version=7.0.0.0

class AssemblyRegistrationFlags(enum.Enum):
    None_ = 0
    SetCodeBase = 1

class AutomationProxyAttribute(System.Attribute):
    """    """
    def __init__(self, val: bool): ...
    @property
    def Value(self) -> bool: ...

class ComAliasNameAttribute(System.Attribute):
    """    """
    def __init__(self, alias: str): ...
    @property
    def Value(self) -> str: ...

class ComAwareEventInfo(Reflection.EventInfo):
    """    """
    def __init__(self, type_: System.Type, eventName: str): ...
    @overload
    def AddEventHandler(self, target: object, handler: System.Delegate) -> None: ...
    @property
    def Attributes(self) -> Reflection.EventAttributes: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @overload
    def GetAddMethod(self, nonPublic: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetOtherMethods(self, nonPublic: bool) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetRaiseMethod(self, nonPublic: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetRemoveMethod(self, nonPublic: bool) -> Reflection.MethodInfo: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def RemoveEventHandler(self, target: object, handler: System.Delegate) -> None: ...

class ComCompatibleVersionAttribute(System.Attribute):
    """    """
    def __init__(self, major: int, minor: int, build: int, revision: int): ...
    @property
    def BuildNumber(self) -> int: ...
    @property
    def MajorVersion(self) -> int: ...
    @property
    def MinorVersion(self) -> int: ...
    @property
    def RevisionNumber(self) -> int: ...

class ComConversionLossAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ComRegisterFunctionAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ComUnregisterFunctionAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ExporterEventKind(enum.Enum):
    NOTIF_TYPECONVERTED = 0
    NOTIF_CONVERTWARNING = 1
    ERROR_REFTOINVALIDASSEMBLY = 2

class HandleCollector(object):
    """    """
    @overload
    def __init__(self, name: str, initialThreshold: int): ...
    @overload
    def __init__(self, name: str, initialThreshold: int, maximumThreshold: int): ...
    @overload
    def Add() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def InitialThreshold(self) -> int: ...
    @property
    def MaximumThreshold(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @overload
    def Remove() -> None: ...

class ImportedFromTypeLibAttribute(System.Attribute):
    """    """
    def __init__(self, tlbFile: str): ...
    @property
    def Value(self) -> str: ...

class ManagedToNativeComInteropStubAttribute(System.Attribute):
    """    """
    def __init__(self, classType: System.Type, methodName: str): ...
    @property
    def ClassType(self) -> System.Type: ...
    @property
    def MethodName(self) -> str: ...

class PrimaryInteropAssemblyAttribute(System.Attribute):
    """    """
    def __init__(self, major: int, minor: int): ...
    @property
    def MajorVersion(self) -> int: ...
    @property
    def MinorVersion(self) -> int: ...

class RegistrationClassContext(enum.Enum):
    InProcessServer = 1
    InProcessHandler = 2
    LocalServer = 4
    InProcessServer16 = 8
    RemoteServer = 16
    InProcessHandler16 = 32
    Reserved1 = 64
    Reserved2 = 128
    Reserved3 = 256
    Reserved4 = 512
    NoCodeDownload = 1024
    Reserved5 = 2048
    NoCustomMarshal = 4096
    EnableCodeDownload = 8192
    NoFailureLog = 16384
    DisableActivateAsActivator = 32768
    EnableActivateAsActivator = 65536
    FromDefaultContext = 131072

class RegistrationConnectionType(enum.Enum):
    SingleUse = 0
    MultipleUse = 1
    MultiSeparate = 2
    Suspended = 4
    Surrogate = 8

class RuntimeEnvironment(object):
    """    """
    @overload
    @staticmethod
    def FromGlobalAccessCache(a: Reflection.Assembly) -> bool: ...
    @property
    def SystemConfigurationFile(self) -> str: ...
    @overload
    @staticmethod
    def GetRuntimeDirectory() -> str: ...
    @overload
    @staticmethod
    def GetSystemVersion() -> str: ...

class TypeLibFuncAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, flags: TypeLibFuncFlags): ...
    @overload
    def __init__(self, flags: System.Int16): ...
    @property
    def Value(self) -> TypeLibFuncFlags: ...

class TypeLibFuncFlags(enum.Enum):
    FRestricted = 1
    FSource = 2
    FBindable = 4
    FRequestEdit = 8
    FDisplayBind = 16
    FDefaultBind = 32
    FHidden = 64
    FUsesGetLastError = 128
    FDefaultCollelem = 256
    FUiDefault = 512
    FNonBrowsable = 1024
    FReplaceable = 2048
    FImmediateBind = 4096

class TypeLibImportClassAttribute(System.Attribute):
    """    """
    def __init__(self, importClass: System.Type): ...
    @property
    def Value(self) -> str: ...

class TypeLibTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, flags: TypeLibTypeFlags): ...
    @overload
    def __init__(self, flags: System.Int16): ...
    @property
    def Value(self) -> TypeLibTypeFlags: ...

class TypeLibTypeFlags(enum.Enum):
    FAppObject = 1
    FCanCreate = 2
    FLicensed = 4
    FPreDeclId = 8
    FHidden = 16
    FControl = 32
    FDual = 64
    FNonExtensible = 128
    FOleAutomation = 256
    FRestricted = 512
    FAggregatable = 1024
    FReplaceable = 2048
    FDispatchable = 4096
    FReverseBind = 8192

class TypeLibVarAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, flags: TypeLibVarFlags): ...
    @overload
    def __init__(self, flags: System.Int16): ...
    @property
    def Value(self) -> TypeLibVarFlags: ...

class TypeLibVarFlags(enum.Enum):
    FReadOnly = 1
    FSource = 2
    FBindable = 4
    FRequestEdit = 8
    FDisplayBind = 16
    FDefaultBind = 32
    FHidden = 64
    FRestricted = 128
    FDefaultCollelem = 256
    FUiDefault = 512
    FNonBrowsable = 1024
    FReplaceable = 2048
    FImmediateBind = 4096

class TypeLibVersionAttribute(System.Attribute):
    """    """
    def __init__(self, major: int, minor: int): ...
    @property
    def MajorVersion(self) -> int: ...
    @property
    def MinorVersion(self) -> int: ...

# endregion

# region: System.Memory, Version=7.0.0.0

class SequenceMarshal(object):
    """    """
    @overload
    @staticmethod
    def TryGetArray(sequence: Buffers.ReadOnlySequence) -> (bool, System.ArraySegment): ...
    @overload
    @staticmethod
    def TryGetReadOnlyMemory(sequence: Buffers.ReadOnlySequence) -> (bool, System.ReadOnlyMemory): ...
    @overload
    @staticmethod
    def TryGetReadOnlySequenceSegment(sequence: Buffers.ReadOnlySequence) -> (bool, Buffers.ReadOnlySequenceSegment, int, Buffers.ReadOnlySequenceSegment, int): ...
    @overload
    @staticmethod
    def TryRead() -> (bool, Buffers.SequenceReader, T): ...

# endregion
