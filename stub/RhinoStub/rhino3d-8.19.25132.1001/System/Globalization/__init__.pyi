"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Calendar", "CalendarAlgorithmType", "CalendarWeekRule", "CharUnicodeInfo", "ChineseLunisolarCalendar", "CompareInfo", "CompareOptions", "CultureInfo", "CultureNotFoundException", "CultureTypes", "DateTimeFormatInfo", "DateTimeStyles", "DaylightTime", "DigitShapes", "EastAsianLunisolarCalendar", "GlobalizationExtensions", "GregorianCalendar", "GregorianCalendarTypes", "HebrewCalendar", "HijriCalendar", "IdnMapping", "ISOWeek", "JapaneseCalendar", "JapaneseLunisolarCalendar", "JulianCalendar", "KoreanCalendar", "KoreanLunisolarCalendar", "NumberFormatInfo", "NumberStyles", "PersianCalendar", "RegionInfo", "SortKey", "SortVersion", "StringInfo", "TaiwanCalendar", "TaiwanLunisolarCalendar", "TextElementEnumerator", "TextInfo", "ThaiBuddhistCalendar", "TimeSpanStyles", "UmAlQuraCalendar", "UnicodeCategory"]
# endregion

# region: Imports
from System import Reflection
from System import Text
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Calendar(object):
    """    """
    @property
    def CurrentEra(self) -> int: ...
    @overload
    def AddDays(self, time: System.DateTime, days: int) -> System.DateTime: ...
    @overload
    def AddHours(self, time: System.DateTime, hours: int) -> System.DateTime: ...
    @overload
    def AddMilliseconds(self, time: System.DateTime, milliseconds: float) -> System.DateTime: ...
    @overload
    def AddMinutes(self, time: System.DateTime, minutes: int) -> System.DateTime: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddSeconds(self, time: System.DateTime, seconds: int) -> System.DateTime: ...
    @overload
    def AddWeeks(self, time: System.DateTime, weeks: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @overload
    def Clone() -> object: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetHour(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMilliseconds(self, time: System.DateTime) -> float: ...
    @overload
    def GetMinute(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetSecond(self, time: System.DateTime) -> int: ...
    @overload
    def GetWeekOfYear(self, time: System.DateTime, rule: CalendarWeekRule, firstDayOfWeek: System.DayOfWeek) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int) -> bool: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @overload
    @staticmethod
    def ReadOnly(calendar: Calendar) -> Calendar: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int) -> System.DateTime: ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class CalendarAlgorithmType(enum.Enum):
    Unknown = 0
    SolarCalendar = 1
    LunarCalendar = 2
    LunisolarCalendar = 3

class CalendarWeekRule(enum.Enum):
    FirstDay = 0
    FirstFullWeek = 1
    FirstFourDayWeek = 2

class CharUnicodeInfo(object):
    """    """
    @overload
    @staticmethod
    def GetDecimalDigitValue(ch: System.Char) -> int: ...
    @overload
    @staticmethod
    def GetDecimalDigitValue(s: str, index: int) -> int: ...
    @overload
    @staticmethod
    def GetDigitValue(ch: System.Char) -> int: ...
    @overload
    @staticmethod
    def GetDigitValue(s: str, index: int) -> int: ...
    @overload
    @staticmethod
    def GetNumericValue(ch: System.Char) -> float: ...
    @overload
    @staticmethod
    def GetNumericValue(s: str, index: int) -> float: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(ch: System.Char) -> UnicodeCategory: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(codePoint: int) -> UnicodeCategory: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(s: str, index: int) -> UnicodeCategory: ...

class ChineseLunisolarCalendar(EastAsianLunisolarCalendar):
    """    """
    def __init__(self): ...
    @property
    def ChineseEra(self) -> int: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...

class CompareInfo(object):
    """    """
    @overload
    def Compare(self, string1: str, string2: str) -> int: ...
    @overload
    def Compare(self, string1: str, string2: str, options: CompareOptions) -> int: ...
    @overload
    def Compare(self, string1: System.ReadOnlySpan, string2: System.ReadOnlySpan, options: CompareOptions) -> int: ...
    @overload
    def Compare(self, string1: str, offset1: int, string2: str, offset2: int) -> int: ...
    @overload
    def Compare(self, string1: str, offset1: int, string2: str, offset2: int, options: CompareOptions) -> int: ...
    @overload
    def Compare(self, string1: str, offset1: int, length1: int, string2: str, offset2: int, length2: int) -> int: ...
    @overload
    def Compare(self, string1: str, offset1: int, length1: int, string2: str, offset2: int, length2: int, options: CompareOptions) -> int: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def LCID(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> SortVersion: ...
    @overload
    @staticmethod
    def GetCompareInfo(name: str) -> CompareInfo: ...
    @overload
    @staticmethod
    def GetCompareInfo(culture: int) -> CompareInfo: ...
    @overload
    @staticmethod
    def GetCompareInfo(name: str, assembly: Reflection.Assembly) -> CompareInfo: ...
    @overload
    @staticmethod
    def GetCompareInfo(culture: int, assembly: Reflection.Assembly) -> CompareInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, source: str, options: CompareOptions) -> int: ...
    @overload
    def GetHashCode(self, source: System.ReadOnlySpan, options: CompareOptions) -> int: ...
    @overload
    def GetSortKey(self, source: str) -> SortKey: ...
    @overload
    def GetSortKey(self, source: str, options: CompareOptions) -> SortKey: ...
    @overload
    def GetSortKey(self, source: System.ReadOnlySpan, destination: System.Span, options: CompareOptions) -> int: ...
    @overload
    def GetSortKeyLength(self, source: System.ReadOnlySpan, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: System.Char) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str) -> int: ...
    @overload
    def IndexOf(self, source: str, value: System.Char, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: System.Char, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, source: System.ReadOnlySpan, value: Text.Rune, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: System.ReadOnlySpan, value: System.ReadOnlySpan, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: System.Char, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, source: str, value: System.Char, startIndex: int, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str, startIndex: int, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, source: System.ReadOnlySpan, value: System.ReadOnlySpan, options: CompareOptions) -> (int, int): ...
    @overload
    def IndexOf(self, source: str, value: System.Char, startIndex: int, count: int, options: CompareOptions) -> int: ...
    @overload
    def IndexOf(self, source: str, value: str, startIndex: int, count: int, options: CompareOptions) -> int: ...
    @overload
    def IsPrefix(self, source: str, prefix: str) -> bool: ...
    @overload
    def IsPrefix(self, source: str, prefix: str, options: CompareOptions) -> bool: ...
    @overload
    def IsPrefix(self, source: System.ReadOnlySpan, prefix: System.ReadOnlySpan, options: CompareOptions) -> bool: ...
    @overload
    def IsPrefix(self, source: System.ReadOnlySpan, prefix: System.ReadOnlySpan, options: CompareOptions) -> (bool, int): ...
    @overload
    @staticmethod
    def IsSortable(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsSortable(text: str) -> bool: ...
    @overload
    @staticmethod
    def IsSortable(text: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def IsSortable(value: Text.Rune) -> bool: ...
    @overload
    def IsSuffix(self, source: str, suffix: str) -> bool: ...
    @overload
    def IsSuffix(self, source: System.ReadOnlySpan, suffix: System.ReadOnlySpan, options: CompareOptions) -> bool: ...
    @overload
    def IsSuffix(self, source: str, suffix: str, options: CompareOptions) -> bool: ...
    @overload
    def IsSuffix(self, source: System.ReadOnlySpan, suffix: System.ReadOnlySpan, options: CompareOptions) -> (bool, int): ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: str) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: str, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: str, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, source: System.ReadOnlySpan, value: Text.Rune, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: System.ReadOnlySpan, value: System.ReadOnlySpan, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: str, startIndex: int, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: System.ReadOnlySpan, value: System.ReadOnlySpan, options: CompareOptions) -> (int, int): ...
    @overload
    def LastIndexOf(self, source: str, value: str, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char, startIndex: int, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: str, startIndex: int, count: int, options: CompareOptions) -> int: ...
    @overload
    def LastIndexOf(self, source: str, value: System.Char, startIndex: int, count: int, options: CompareOptions) -> int: ...
    @overload
    def ToString() -> str: ...

class CompareOptions(enum.Enum):
    None_ = 0
    IgnoreCase = 1
    IgnoreNonSpace = 2
    IgnoreSymbols = 4
    IgnoreKanaType = 8
    IgnoreWidth = 16
    OrdinalIgnoreCase = 268435456
    StringSort = 536870912
    Ordinal = 1073741824

class CultureInfo(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, culture: int): ...
    @overload
    def __init__(self, name: str, useUserOverride: bool): ...
    @overload
    def __init__(self, culture: int, useUserOverride: bool): ...
    @overload
    def ClearCachedData() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    @staticmethod
    def CreateSpecificCulture(name: str) -> CultureInfo: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def Calendar(self) -> Calendar: ...
    @property
    def CompareInfo(self) -> CompareInfo: ...
    @property
    def CultureTypes(self) -> CultureTypes: ...
    @property
    def CurrentCulture(self) -> CultureInfo: ...
    @property
    def CurrentUICulture(self) -> CultureInfo: ...
    @property
    def DateTimeFormat(self) -> DateTimeFormatInfo: ...
    @property
    def DefaultThreadCurrentCulture(self) -> CultureInfo: ...
    @property
    def DefaultThreadCurrentUICulture(self) -> CultureInfo: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def IetfLanguageTag(self) -> str: ...
    @property
    def InstalledUICulture(self) -> CultureInfo: ...
    @property
    def InvariantCulture(self) -> CultureInfo: ...
    @property
    def IsNeutralCulture(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def KeyboardLayoutId(self) -> int: ...
    @property
    def LCID(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NativeName(self) -> str: ...
    @property
    def NumberFormat(self) -> NumberFormatInfo: ...
    @property
    def OptionalCalendars(self) -> System.Array[Calendar]: ...
    @property
    def Parent(self) -> CultureInfo: ...
    @property
    def TextInfo(self) -> TextInfo: ...
    @property
    def ThreeLetterISOLanguageName(self) -> str: ...
    @property
    def ThreeLetterWindowsLanguageName(self) -> str: ...
    @property
    def TwoLetterISOLanguageName(self) -> str: ...
    @property
    def UseUserOverride(self) -> bool: ...
    @overload
    def GetConsoleFallbackUICulture() -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultureInfo(name: str) -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultureInfo(culture: int) -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultureInfo(name: str, predefinedOnly: bool) -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultureInfo(name: str, altName: str) -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultureInfoByIetfLanguageTag(name: str) -> CultureInfo: ...
    @overload
    @staticmethod
    def GetCultures(types: CultureTypes) -> System.Array[CultureInfo]: ...
    @overload
    def GetFormat(self, formatType: System.Type) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def ReadOnly(ci: CultureInfo) -> CultureInfo: ...
    @CurrentCulture.setter
    def CurrentCulture(self, value: System.Void): ...
    @CurrentUICulture.setter
    def CurrentUICulture(self, value: System.Void): ...
    @DateTimeFormat.setter
    def DateTimeFormat(self, value: System.Void): ...
    @DefaultThreadCurrentCulture.setter
    def DefaultThreadCurrentCulture(self, value: System.Void): ...
    @DefaultThreadCurrentUICulture.setter
    def DefaultThreadCurrentUICulture(self, value: System.Void): ...
    @NumberFormat.setter
    def NumberFormat(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class CultureNotFoundException(System.ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, paramName: str, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, paramName: str, invalidCultureName: str, message: str): ...
    @overload
    def __init__(self, message: str, invalidCultureName: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, invalidCultureId: int, innerException: System.Exception): ...
    @overload
    def __init__(self, paramName: str, invalidCultureId: int, message: str): ...
    @property
    def InvalidCultureId(self) -> System.Nullable: ...
    @property
    def InvalidCultureName(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class CultureTypes(enum.Enum):
    NeutralCultures = 1
    SpecificCultures = 2
    InstalledWin32Cultures = 4
    AllCultures = 7
    UserCustomCulture = 8
    ReplacementCultures = 16
    WindowsOnlyCultures = 32
    FrameworkCultures = 64

class DateTimeFormatInfo(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def AbbreviatedDayNames(self) -> System.System.Array[str]: ...
    @property
    def AbbreviatedMonthGenitiveNames(self) -> System.System.Array[str]: ...
    @property
    def AbbreviatedMonthNames(self) -> System.System.Array[str]: ...
    @property
    def AMDesignator(self) -> str: ...
    @property
    def Calendar(self) -> Calendar: ...
    @property
    def CalendarWeekRule(self) -> CalendarWeekRule: ...
    @property
    def CurrentInfo(self) -> DateTimeFormatInfo: ...
    @property
    def DateSeparator(self) -> str: ...
    @property
    def DayNames(self) -> System.System.Array[str]: ...
    @property
    def FirstDayOfWeek(self) -> System.DayOfWeek: ...
    @property
    def FullDateTimePattern(self) -> str: ...
    @property
    def InvariantInfo(self) -> DateTimeFormatInfo: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LongDatePattern(self) -> str: ...
    @property
    def LongTimePattern(self) -> str: ...
    @property
    def MonthDayPattern(self) -> str: ...
    @property
    def MonthGenitiveNames(self) -> System.System.Array[str]: ...
    @property
    def MonthNames(self) -> System.System.Array[str]: ...
    @property
    def NativeCalendarName(self) -> str: ...
    @property
    def PMDesignator(self) -> str: ...
    @property
    def RFC1123Pattern(self) -> str: ...
    @property
    def ShortDatePattern(self) -> str: ...
    @property
    def ShortestDayNames(self) -> System.System.Array[str]: ...
    @property
    def ShortTimePattern(self) -> str: ...
    @property
    def SortableDateTimePattern(self) -> str: ...
    @property
    def TimeSeparator(self) -> str: ...
    @property
    def UniversalSortableDateTimePattern(self) -> str: ...
    @property
    def YearMonthPattern(self) -> str: ...
    @overload
    def GetAbbreviatedDayName(self, dayofweek: System.DayOfWeek) -> str: ...
    @overload
    def GetAbbreviatedEraName(self, era: int) -> str: ...
    @overload
    def GetAbbreviatedMonthName(self, month: int) -> str: ...
    @overload
    def GetAllDateTimePatterns() -> System.System.Array[str]: ...
    @overload
    def GetAllDateTimePatterns(self, format_: System.Char) -> System.System.Array[str]: ...
    @overload
    def GetDayName(self, dayofweek: System.DayOfWeek) -> str: ...
    @overload
    def GetEra(self, eraName: str) -> int: ...
    @overload
    def GetEraName(self, era: int) -> str: ...
    @overload
    def GetFormat(self, formatType: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetInstance(provider: System.IFormatProvider) -> DateTimeFormatInfo: ...
    @overload
    def GetMonthName(self, month: int) -> str: ...
    @overload
    def GetShortestDayName(self, dayOfWeek: System.DayOfWeek) -> str: ...
    @overload
    @staticmethod
    def ReadOnly(dtfi: DateTimeFormatInfo) -> DateTimeFormatInfo: ...
    @AbbreviatedDayNames.setter
    def AbbreviatedDayNames(self, value: System.Void): ...
    @AbbreviatedMonthGenitiveNames.setter
    def AbbreviatedMonthGenitiveNames(self, value: System.Void): ...
    @AbbreviatedMonthNames.setter
    def AbbreviatedMonthNames(self, value: System.Void): ...
    @AMDesignator.setter
    def AMDesignator(self, value: System.Void): ...
    @Calendar.setter
    def Calendar(self, value: System.Void): ...
    @CalendarWeekRule.setter
    def CalendarWeekRule(self, value: System.Void): ...
    @DateSeparator.setter
    def DateSeparator(self, value: System.Void): ...
    @DayNames.setter
    def DayNames(self, value: System.Void): ...
    @FirstDayOfWeek.setter
    def FirstDayOfWeek(self, value: System.Void): ...
    @FullDateTimePattern.setter
    def FullDateTimePattern(self, value: System.Void): ...
    @LongDatePattern.setter
    def LongDatePattern(self, value: System.Void): ...
    @LongTimePattern.setter
    def LongTimePattern(self, value: System.Void): ...
    @MonthDayPattern.setter
    def MonthDayPattern(self, value: System.Void): ...
    @MonthGenitiveNames.setter
    def MonthGenitiveNames(self, value: System.Void): ...
    @MonthNames.setter
    def MonthNames(self, value: System.Void): ...
    @PMDesignator.setter
    def PMDesignator(self, value: System.Void): ...
    @ShortDatePattern.setter
    def ShortDatePattern(self, value: System.Void): ...
    @ShortestDayNames.setter
    def ShortestDayNames(self, value: System.Void): ...
    @ShortTimePattern.setter
    def ShortTimePattern(self, value: System.Void): ...
    @TimeSeparator.setter
    def TimeSeparator(self, value: System.Void): ...
    @YearMonthPattern.setter
    def YearMonthPattern(self, value: System.Void): ...
    @overload
    def SetAllDateTimePatterns(self, patterns: System.System.Array[str], format_: System.Char) -> None: ...

class DateTimeStyles(enum.Enum):
    None_ = 0
    AllowLeadingWhite = 1
    AllowTrailingWhite = 2
    AllowInnerWhite = 4
    AllowWhiteSpaces = 7
    NoCurrentDateDefault = 8
    AdjustToUniversal = 16
    AssumeLocal = 32
    AssumeUniversal = 64
    RoundtripKind = 128

class DaylightTime(object):
    """    """
    def __init__(self, start: System.DateTime, end: System.DateTime, delta: System.TimeSpan): ...
    @property
    def Delta(self) -> System.TimeSpan: ...
    @property
    def End(self) -> System.DateTime: ...
    @property
    def Start(self) -> System.DateTime: ...

class DigitShapes(enum.Enum):
    Context = 0
    None_ = 1
    NativeNational = 2

class EastAsianLunisolarCalendar(Calendar):
    """    """
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetCelestialStem(self, sexagenaryYear: int) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetSexagenaryYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetTerrestrialBranch(self, sexagenaryYear: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class GlobalizationExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetStringComparer(compareInfo: CompareInfo, options: CompareOptions) -> System.StringComparer: ...

class GregorianCalendar(Calendar):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: GregorianCalendarTypes): ...
    @property
    def ADEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def CalendarType(self) -> GregorianCalendarTypes: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @CalendarType.setter
    def CalendarType(self, value: System.Void): ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class GregorianCalendarTypes(enum.Enum):
    Localized = 1
    USEnglish = 2
    MiddleEastFrench = 9
    Arabic = 10
    TransliteratedEnglish = 11
    TransliteratedFrench = 12

class HebrewCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def HebrewEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class HijriCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def HijriEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def HijriAdjustment(self) -> int: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @HijriAdjustment.setter
    def HijriAdjustment(self, value: System.Void): ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class IdnMapping(object):
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllowUnassigned(self) -> bool: ...
    @property
    def UseStd3AsciiRules(self) -> bool: ...
    @overload
    def GetAscii(self, unicode: str) -> str: ...
    @overload
    def GetAscii(self, unicode: str, index: int) -> str: ...
    @overload
    def GetAscii(self, unicode: str, index: int, count: int) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetUnicode(self, ascii_: str) -> str: ...
    @overload
    def GetUnicode(self, ascii_: str, index: int) -> str: ...
    @overload
    def GetUnicode(self, ascii_: str, index: int, count: int) -> str: ...
    @AllowUnassigned.setter
    def AllowUnassigned(self, value: System.Void): ...
    @UseStd3AsciiRules.setter
    def UseStd3AsciiRules(self, value: System.Void): ...

class ISOWeek(object):
    """    """
    @overload
    @staticmethod
    def GetWeekOfYear(date: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def GetWeeksInYear(year: int) -> int: ...
    @overload
    @staticmethod
    def GetYear(date: System.DateTime) -> int: ...
    @overload
    @staticmethod
    def GetYearEnd(year: int) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetYearStart(year: int) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(year: int, week: int, dayOfWeek: System.DayOfWeek) -> System.DateTime: ...

class JapaneseCalendar(Calendar):
    """    """
    def __init__(self): ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetWeekOfYear(self, time: System.DateTime, rule: CalendarWeekRule, firstDayOfWeek: System.DayOfWeek) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class JapaneseLunisolarCalendar(EastAsianLunisolarCalendar):
    """    """
    def __init__(self): ...
    @property
    def JapaneseEra(self) -> int: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...

class JulianCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def JulianEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class KoreanCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def KoreanEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetWeekOfYear(self, time: System.DateTime, rule: CalendarWeekRule, firstDayOfWeek: System.DayOfWeek) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class KoreanLunisolarCalendar(EastAsianLunisolarCalendar):
    """    """
    def __init__(self): ...
    @property
    def GregorianEra(self) -> int: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...

class NumberFormatInfo(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def CurrencyDecimalDigits(self) -> int: ...
    @property
    def CurrencyDecimalSeparator(self) -> str: ...
    @property
    def CurrencyGroupSeparator(self) -> str: ...
    @property
    def CurrencyGroupSizes(self) -> System.System.Array[int]: ...
    @property
    def CurrencyNegativePattern(self) -> int: ...
    @property
    def CurrencyPositivePattern(self) -> int: ...
    @property
    def CurrencySymbol(self) -> str: ...
    @property
    def CurrentInfo(self) -> NumberFormatInfo: ...
    @property
    def DigitSubstitution(self) -> DigitShapes: ...
    @property
    def InvariantInfo(self) -> NumberFormatInfo: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def NaNSymbol(self) -> str: ...
    @property
    def NativeDigits(self) -> System.System.Array[str]: ...
    @property
    def NegativeInfinitySymbol(self) -> str: ...
    @property
    def NegativeSign(self) -> str: ...
    @property
    def NumberDecimalDigits(self) -> int: ...
    @property
    def NumberDecimalSeparator(self) -> str: ...
    @property
    def NumberGroupSeparator(self) -> str: ...
    @property
    def NumberGroupSizes(self) -> System.System.Array[int]: ...
    @property
    def NumberNegativePattern(self) -> int: ...
    @property
    def PercentDecimalDigits(self) -> int: ...
    @property
    def PercentDecimalSeparator(self) -> str: ...
    @property
    def PercentGroupSeparator(self) -> str: ...
    @property
    def PercentGroupSizes(self) -> System.System.Array[int]: ...
    @property
    def PercentNegativePattern(self) -> int: ...
    @property
    def PercentPositivePattern(self) -> int: ...
    @property
    def PercentSymbol(self) -> str: ...
    @property
    def PerMilleSymbol(self) -> str: ...
    @property
    def PositiveInfinitySymbol(self) -> str: ...
    @property
    def PositiveSign(self) -> str: ...
    @overload
    def GetFormat(self, formatType: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetInstance(formatProvider: System.IFormatProvider) -> NumberFormatInfo: ...
    @overload
    @staticmethod
    def ReadOnly(nfi: NumberFormatInfo) -> NumberFormatInfo: ...
    @CurrencyDecimalDigits.setter
    def CurrencyDecimalDigits(self, value: System.Void): ...
    @CurrencyDecimalSeparator.setter
    def CurrencyDecimalSeparator(self, value: System.Void): ...
    @CurrencyGroupSeparator.setter
    def CurrencyGroupSeparator(self, value: System.Void): ...
    @CurrencyGroupSizes.setter
    def CurrencyGroupSizes(self, value: System.Void): ...
    @CurrencyNegativePattern.setter
    def CurrencyNegativePattern(self, value: System.Void): ...
    @CurrencyPositivePattern.setter
    def CurrencyPositivePattern(self, value: System.Void): ...
    @CurrencySymbol.setter
    def CurrencySymbol(self, value: System.Void): ...
    @DigitSubstitution.setter
    def DigitSubstitution(self, value: System.Void): ...
    @NaNSymbol.setter
    def NaNSymbol(self, value: System.Void): ...
    @NativeDigits.setter
    def NativeDigits(self, value: System.Void): ...
    @NegativeInfinitySymbol.setter
    def NegativeInfinitySymbol(self, value: System.Void): ...
    @NegativeSign.setter
    def NegativeSign(self, value: System.Void): ...
    @NumberDecimalDigits.setter
    def NumberDecimalDigits(self, value: System.Void): ...
    @NumberDecimalSeparator.setter
    def NumberDecimalSeparator(self, value: System.Void): ...
    @NumberGroupSeparator.setter
    def NumberGroupSeparator(self, value: System.Void): ...
    @NumberGroupSizes.setter
    def NumberGroupSizes(self, value: System.Void): ...
    @NumberNegativePattern.setter
    def NumberNegativePattern(self, value: System.Void): ...
    @PercentDecimalDigits.setter
    def PercentDecimalDigits(self, value: System.Void): ...
    @PercentDecimalSeparator.setter
    def PercentDecimalSeparator(self, value: System.Void): ...
    @PercentGroupSeparator.setter
    def PercentGroupSeparator(self, value: System.Void): ...
    @PercentGroupSizes.setter
    def PercentGroupSizes(self, value: System.Void): ...
    @PercentNegativePattern.setter
    def PercentNegativePattern(self, value: System.Void): ...
    @PercentPositivePattern.setter
    def PercentPositivePattern(self, value: System.Void): ...
    @PercentSymbol.setter
    def PercentSymbol(self, value: System.Void): ...
    @PerMilleSymbol.setter
    def PerMilleSymbol(self, value: System.Void): ...
    @PositiveInfinitySymbol.setter
    def PositiveInfinitySymbol(self, value: System.Void): ...
    @PositiveSign.setter
    def PositiveSign(self, value: System.Void): ...

class NumberStyles(enum.Enum):
    None_ = 0
    AllowLeadingWhite = 1
    AllowTrailingWhite = 2
    AllowLeadingSign = 4
    Integer = 7
    AllowTrailingSign = 8
    AllowParentheses = 16
    AllowDecimalPoint = 32
    AllowThousands = 64
    Number = 111
    AllowExponent = 128
    Float = 167
    AllowCurrencySymbol = 256
    Currency = 383
    Any = 511
    AllowHexSpecifier = 512
    HexNumber = 515

class PersianCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def PersianEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class RegionInfo(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, culture: int): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def CurrencyEnglishName(self) -> str: ...
    @property
    def CurrencyNativeName(self) -> str: ...
    @property
    def CurrencySymbol(self) -> str: ...
    @property
    def CurrentRegion(self) -> RegionInfo: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def GeoId(self) -> int: ...
    @property
    def IsMetric(self) -> bool: ...
    @property
    def ISOCurrencySymbol(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NativeName(self) -> str: ...
    @property
    def ThreeLetterISORegionName(self) -> str: ...
    @property
    def ThreeLetterWindowsRegionName(self) -> str: ...
    @property
    def TwoLetterISORegionName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class SortKey(object):
    """    """
    @overload
    @staticmethod
    def Compare(sortkey1: SortKey, sortkey2: SortKey) -> int: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def KeyData(self) -> System.System.Array[System.Byte]: ...
    @property
    def OriginalString(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class SortVersion(object):
    """    """
    def __init__(self, fullVersion: int, sortId: System.Guid): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SortVersion) -> bool: ...
    @property
    def FullVersion(self) -> int: ...
    @property
    def SortId(self) -> System.Guid: ...
    @overload
    def GetHashCode() -> int: ...

class StringInfo(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def LengthInTextElements(self) -> int: ...
    @property
    def String(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetNextTextElement(str_: str) -> str: ...
    @overload
    @staticmethod
    def GetNextTextElement(str_: str, index: int) -> str: ...
    @overload
    @staticmethod
    def GetNextTextElementLength(str_: str) -> int: ...
    @overload
    @staticmethod
    def GetNextTextElementLength(str_: System.ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def GetNextTextElementLength(str_: str, index: int) -> int: ...
    @overload
    @staticmethod
    def GetTextElementEnumerator(str_: str) -> TextElementEnumerator: ...
    @overload
    @staticmethod
    def GetTextElementEnumerator(str_: str, index: int) -> TextElementEnumerator: ...
    @overload
    @staticmethod
    def ParseCombiningCharacters(str_: str) -> System.System.Array[int]: ...
    @String.setter
    def String(self, value: System.Void): ...
    @overload
    def SubstringByTextElements(self, startingTextElement: int) -> str: ...
    @overload
    def SubstringByTextElements(self, startingTextElement: int, lengthInTextElements: int) -> str: ...

class TaiwanCalendar(Calendar):
    """    """
    def __init__(self): ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetWeekOfYear(self, time: System.DateTime, rule: CalendarWeekRule, firstDayOfWeek: System.DayOfWeek) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class TaiwanLunisolarCalendar(EastAsianLunisolarCalendar):
    """    """
    def __init__(self): ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...

class TextElementEnumerator(object):
    """    """
    @property
    def Current(self) -> object: ...
    @property
    def ElementIndex(self) -> int: ...
    @overload
    def GetTextElement() -> str: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class TextInfo(object):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ANSICodePage(self) -> int: ...
    @property
    def CultureName(self) -> str: ...
    @property
    def EBCDICCodePage(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsRightToLeft(self) -> bool: ...
    @property
    def LCID(self) -> int: ...
    @property
    def ListSeparator(self) -> str: ...
    @property
    def MacCodePage(self) -> int: ...
    @property
    def OEMCodePage(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def ReadOnly(textInfo: TextInfo) -> TextInfo: ...
    @ListSeparator.setter
    def ListSeparator(self, value: System.Void): ...
    @overload
    def ToLower(self, c: System.Char) -> System.Char: ...
    @overload
    def ToLower(self, str_: str) -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToTitleCase(self, str_: str) -> str: ...
    @overload
    def ToUpper(self, c: System.Char) -> System.Char: ...
    @overload
    def ToUpper(self, str_: str) -> str: ...

class ThaiBuddhistCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def ThaiBuddhistEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetWeekOfYear(self, time: System.DateTime, rule: CalendarWeekRule, firstDayOfWeek: System.DayOfWeek) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class TimeSpanStyles(enum.Enum):
    None_ = 0
    AssumeNegative = 1

class UmAlQuraCalendar(Calendar):
    """    """
    def __init__(self): ...
    @property
    def UmAlQuraEra(self) -> int: ...
    @overload
    def AddMonths(self, time: System.DateTime, months: int) -> System.DateTime: ...
    @overload
    def AddYears(self, time: System.DateTime, years: int) -> System.DateTime: ...
    @property
    def AlgorithmType(self) -> CalendarAlgorithmType: ...
    @property
    def Eras(self) -> System.System.Array[int]: ...
    @property
    def MaxSupportedDateTime(self) -> System.DateTime: ...
    @property
    def MinSupportedDateTime(self) -> System.DateTime: ...
    @property
    def TwoDigitYearMax(self) -> int: ...
    @overload
    def GetDayOfMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetDayOfWeek(self, time: System.DateTime) -> System.DayOfWeek: ...
    @overload
    def GetDayOfYear(self, time: System.DateTime) -> int: ...
    @overload
    def GetDaysInMonth(self, year: int, month: int, era: int) -> int: ...
    @overload
    def GetDaysInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetEra(self, time: System.DateTime) -> int: ...
    @overload
    def GetLeapMonth(self, year: int, era: int) -> int: ...
    @overload
    def GetMonth(self, time: System.DateTime) -> int: ...
    @overload
    def GetMonthsInYear(self, year: int, era: int) -> int: ...
    @overload
    def GetYear(self, time: System.DateTime) -> int: ...
    @overload
    def IsLeapDay(self, year: int, month: int, day: int, era: int) -> bool: ...
    @overload
    def IsLeapMonth(self, year: int, month: int, era: int) -> bool: ...
    @overload
    def IsLeapYear(self, year: int, era: int) -> bool: ...
    @TwoDigitYearMax.setter
    def TwoDigitYearMax(self, value: System.Void): ...
    @overload
    def ToDateTime(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, era: int) -> System.DateTime: ...
    @overload
    def ToFourDigitYear(self, year: int) -> int: ...

class UnicodeCategory(enum.Enum):
    UppercaseLetter = 0
    LowercaseLetter = 1
    TitlecaseLetter = 2
    ModifierLetter = 3
    OtherLetter = 4
    NonSpacingMark = 5
    SpacingCombiningMark = 6
    EnclosingMark = 7
    DecimalDigitNumber = 8
    LetterNumber = 9
    OtherNumber = 10
    SpaceSeparator = 11
    LineSeparator = 12
    ParagraphSeparator = 13
    Control = 14
    Format = 15
    Surrogate = 16
    PrivateUse = 17
    ConnectorPunctuation = 18
    DashPunctuation = 19
    OpenPunctuation = 20
    ClosePunctuation = 21
    InitialQuotePunctuation = 22
    FinalQuotePunctuation = 23
    OtherPunctuation = 24
    MathSymbol = 25
    CurrencySymbol = 26
    ModifierSymbol = 27
    OtherSymbol = 28
    OtherNotAssigned = 29

# endregion
