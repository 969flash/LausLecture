"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Asn1Tag", "AsnContentException", "AsnEncodingRules", "AsnDecoder", "AsnReader", "AsnReaderOptions", "AsnWriter", "Scope", "TagClass", "UniversalTagNumber"]
# endregion

# region: Imports
from System import Collections
from System import Numerics
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Formats.Asn1, Version=7.0.0.0

class Asn1Tag(System.ValueType):
    """    """
    @overload
    def __init__(self, universalTagNumber: UniversalTagNumber, isConstructed: bool): ...
    @overload
    def __init__(self, tagClass: TagClass, tagValue: int, isConstructed: bool): ...
    @property
    def Boolean(self) -> Asn1Tag: ...
    @property
    def Integer(self) -> Asn1Tag: ...
    @property
    def PrimitiveBitString(self) -> Asn1Tag: ...
    @property
    def ConstructedBitString(self) -> Asn1Tag: ...
    @property
    def PrimitiveOctetString(self) -> Asn1Tag: ...
    @property
    def ConstructedOctetString(self) -> Asn1Tag: ...
    @property
    def Null(self) -> Asn1Tag: ...
    @property
    def ObjectIdentifier(self) -> Asn1Tag: ...
    @property
    def Enumerated(self) -> Asn1Tag: ...
    @property
    def Sequence(self) -> Asn1Tag: ...
    @property
    def SetOf(self) -> Asn1Tag: ...
    @property
    def UtcTime(self) -> Asn1Tag: ...
    @property
    def GeneralizedTime(self) -> Asn1Tag: ...
    @overload
    def AsConstructed() -> Asn1Tag: ...
    @overload
    def AsPrimitive() -> Asn1Tag: ...
    @overload
    def CalculateEncodedSize() -> int: ...
    @overload
    @staticmethod
    def Decode(source: System.ReadOnlySpan) -> (Asn1Tag, int): ...
    @overload
    def Encode(self, destination: System.Span) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Asn1Tag) -> bool: ...
    @property
    def IsConstructed(self) -> bool: ...
    @property
    def TagClass(self) -> TagClass: ...
    @property
    def TagValue(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def HasSameClassAndValue(self, other: Asn1Tag) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryDecode(source: System.ReadOnlySpan) -> (bool, Asn1Tag, int): ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...

class AsnContentException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class AsnEncodingRules(enum.Enum):
    BER = 0
    CER = 1
    DER = 2

class AsnDecoder(object):
    """    """
    @overload
    @staticmethod
    def ReadBitString(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (System.System.Array[System.Byte], int, int): ...
    @overload
    @staticmethod
    def ReadBoolean(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, int): ...
    @overload
    @staticmethod
    def ReadCharacterString(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, encodingType: UniversalTagNumber, expectedTag: System.Nullable) -> (str, int): ...
    @overload
    @staticmethod
    def ReadEncodedValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules) -> (Asn1Tag, int, int, int): ...
    @overload
    @staticmethod
    def ReadEnumeratedBytes(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (System.ReadOnlySpan, int): ...
    @overload
    @staticmethod
    def ReadEnumeratedValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (TEnum, int): ...
    @overload
    @staticmethod
    def ReadEnumeratedValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, enumType: System.Type, expectedTag: System.Nullable) -> (System.Enum, int): ...
    @overload
    @staticmethod
    def ReadGeneralizedTime(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (System.DateTimeOffset, int): ...
    @overload
    @staticmethod
    def ReadInteger(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (Numerics.BigInteger, int): ...
    @overload
    @staticmethod
    def ReadIntegerBytes(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (System.ReadOnlySpan, int): ...
    @overload
    @staticmethod
    def ReadNamedBitList(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (Collections.BitArray, int): ...
    @overload
    @staticmethod
    def ReadNamedBitListValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (TFlagsEnum, int): ...
    @overload
    @staticmethod
    def ReadNamedBitListValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, flagsEnumType: System.Type, expectedTag: System.Nullable) -> (System.Enum, int): ...
    @overload
    @staticmethod
    def ReadNull(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (int): ...
    @overload
    @staticmethod
    def ReadObjectIdentifier(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (str, int): ...
    @overload
    @staticmethod
    def ReadOctetString(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (System.System.Array[System.Byte], int): ...
    @overload
    @staticmethod
    def ReadSequence(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (int, int, int): ...
    @overload
    @staticmethod
    def ReadSetOf(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, skipSortOrderValidation: bool, expectedTag: System.Nullable) -> (int, int, int): ...
    @overload
    @staticmethod
    def ReadUtcTime(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, twoDigitYearMax: int, expectedTag: System.Nullable) -> (System.DateTimeOffset, int): ...
    @overload
    @staticmethod
    def TryReadBitString(source: System.ReadOnlySpan, destination: System.Span, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, int, int, int): ...
    @overload
    @staticmethod
    def TryReadCharacterString(source: System.ReadOnlySpan, destination: System.Span, ruleSet: AsnEncodingRules, encodingType: UniversalTagNumber, expectedTag: System.Nullable) -> (bool, int, int): ...
    @overload
    @staticmethod
    def TryReadCharacterStringBytes(source: System.ReadOnlySpan, destination: System.Span, ruleSet: AsnEncodingRules, expectedTag: Asn1Tag) -> (bool, int, int): ...
    @overload
    @staticmethod
    def TryReadEncodedValue(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules) -> (bool, Asn1Tag, int, int, int): ...
    @overload
    @staticmethod
    def TryReadInt32(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, int, int): ...
    @overload
    @staticmethod
    def TryReadInt64(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, System.Int64, int): ...
    @overload
    @staticmethod
    def TryReadOctetString(source: System.ReadOnlySpan, destination: System.Span, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, int, int): ...
    @overload
    @staticmethod
    def TryReadPrimitiveBitString(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, int, System.ReadOnlySpan, int): ...
    @overload
    @staticmethod
    def TryReadPrimitiveCharacterStringBytes(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Asn1Tag) -> (bool, System.ReadOnlySpan, int): ...
    @overload
    @staticmethod
    def TryReadPrimitiveOctetString(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, System.ReadOnlySpan, int): ...
    @overload
    @staticmethod
    def TryReadUInt32(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, System.UInt32, int): ...
    @overload
    @staticmethod
    def TryReadUInt64(source: System.ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: System.Nullable) -> (bool, System.UInt64, int): ...

class AsnReader(object):
    """    """
    def __init__(self, data: System.ReadOnlyMemory, ruleSet: AsnEncodingRules, options: AsnReaderOptions): ...
    @property
    def HasData(self) -> bool: ...
    @property
    def RuleSet(self) -> AsnEncodingRules: ...
    @overload
    def PeekContentBytes() -> System.ReadOnlyMemory: ...
    @overload
    def PeekEncodedValue() -> System.ReadOnlyMemory: ...
    @overload
    def PeekTag() -> Asn1Tag: ...
    @overload
    def ReadBitString(self, expectedTag: System.Nullable) -> (System.System.Array[System.Byte], int): ...
    @overload
    def ReadBoolean(self, expectedTag: System.Nullable) -> bool: ...
    @overload
    def ReadCharacterString(self, encodingType: UniversalTagNumber, expectedTag: System.Nullable) -> str: ...
    @overload
    def ReadEncodedValue() -> System.ReadOnlyMemory: ...
    @overload
    def ReadEnumeratedBytes(self, expectedTag: System.Nullable) -> System.ReadOnlyMemory: ...
    @overload
    def ReadEnumeratedValue(self, expectedTag: System.Nullable) -> TEnum: ...
    @overload
    def ReadEnumeratedValue(self, enumType: System.Type, expectedTag: System.Nullable) -> System.Enum: ...
    @overload
    def ReadGeneralizedTime(self, expectedTag: System.Nullable) -> System.DateTimeOffset: ...
    @overload
    def ReadInteger(self, expectedTag: System.Nullable) -> Numerics.BigInteger: ...
    @overload
    def ReadIntegerBytes(self, expectedTag: System.Nullable) -> System.ReadOnlyMemory: ...
    @overload
    def ReadNamedBitList(self, expectedTag: System.Nullable) -> Collections.BitArray: ...
    @overload
    def ReadNamedBitListValue(self, expectedTag: System.Nullable) -> TFlagsEnum: ...
    @overload
    def ReadNamedBitListValue(self, flagsEnumType: System.Type, expectedTag: System.Nullable) -> System.Enum: ...
    @overload
    def ReadNull(self, expectedTag: System.Nullable) -> None: ...
    @overload
    def ReadObjectIdentifier(self, expectedTag: System.Nullable) -> str: ...
    @overload
    def ReadOctetString(self, expectedTag: System.Nullable) -> System.System.Array[System.Byte]: ...
    @overload
    def ReadSequence(self, expectedTag: System.Nullable) -> AsnReader: ...
    @overload
    def ReadSetOf(self, expectedTag: System.Nullable) -> AsnReader: ...
    @overload
    def ReadSetOf(self, skipSortOrderValidation: bool, expectedTag: System.Nullable) -> AsnReader: ...
    @overload
    def ReadUtcTime(self, expectedTag: System.Nullable) -> System.DateTimeOffset: ...
    @overload
    def ReadUtcTime(self, twoDigitYearMax: int, expectedTag: System.Nullable) -> System.DateTimeOffset: ...
    @overload
    def ThrowIfNotEmpty() -> None: ...
    @overload
    def TryReadBitString(self, destination: System.Span, expectedTag: System.Nullable) -> (bool, int, int): ...
    @overload
    def TryReadCharacterString(self, destination: System.Span, encodingType: UniversalTagNumber, expectedTag: System.Nullable) -> (bool, int): ...
    @overload
    def TryReadCharacterStringBytes(self, destination: System.Span, expectedTag: Asn1Tag) -> (bool, int): ...
    @overload
    def TryReadInt32(self, expectedTag: System.Nullable) -> (bool, int): ...
    @overload
    def TryReadInt64(self, expectedTag: System.Nullable) -> (bool, System.Int64): ...
    @overload
    def TryReadOctetString(self, destination: System.Span, expectedTag: System.Nullable) -> (bool, int): ...
    @overload
    def TryReadPrimitiveBitString(self, expectedTag: System.Nullable) -> (bool, int, System.ReadOnlyMemory): ...
    @overload
    def TryReadPrimitiveCharacterStringBytes(self, expectedTag: Asn1Tag) -> (bool, System.ReadOnlyMemory): ...
    @overload
    def TryReadPrimitiveOctetString(self, expectedTag: System.Nullable) -> (bool, System.ReadOnlyMemory): ...
    @overload
    def TryReadUInt32(self, expectedTag: System.Nullable) -> (bool, System.UInt32): ...
    @overload
    def TryReadUInt64(self, expectedTag: System.Nullable) -> (bool, System.UInt64): ...

class AsnReaderOptions(System.ValueType):
    """    """
    @property
    def SkipSetSortOrderVerification(self) -> bool: ...
    @property
    def UtcTimeTwoDigitYearMax(self) -> int: ...
    @SkipSetSortOrderVerification.setter
    def SkipSetSortOrderVerification(self, value: System.Void): ...
    @UtcTimeTwoDigitYearMax.setter
    def UtcTimeTwoDigitYearMax(self, value: System.Void): ...

class AsnWriter(object):
    """    """
    @overload
    def __init__(self, ruleSet: AsnEncodingRules): ...
    @overload
    def __init__(self, ruleSet: AsnEncodingRules, initialCapacity: int): ...
    @overload
    def CopyTo(self, destination: AsnWriter) -> None: ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @overload
    def Encode(self, destination: System.Span) -> int: ...
    @overload
    def EncodedValueEquals(self, other: System.ReadOnlySpan) -> bool: ...
    @overload
    def EncodedValueEquals(self, other: AsnWriter) -> bool: ...
    @property
    def RuleSet(self) -> AsnEncodingRules: ...
    @overload
    def GetEncodedLength() -> int: ...
    @overload
    def PopOctetString(self, tag: System.Nullable) -> None: ...
    @overload
    def PopSequence(self, tag: System.Nullable) -> None: ...
    @overload
    def PopSetOf(self, tag: System.Nullable) -> None: ...
    @overload
    def PushOctetString(self, tag: System.Nullable) -> Scope: ...
    @overload
    def PushSequence(self, tag: System.Nullable) -> Scope: ...
    @overload
    def PushSetOf(self, tag: System.Nullable) -> Scope: ...
    @overload
    def Reset() -> None: ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...
    @overload
    def WriteBitString(self, value: System.ReadOnlySpan, unusedBitCount: int, tag: System.Nullable) -> None: ...
    @overload
    def WriteBoolean(self, value: bool, tag: System.Nullable) -> None: ...
    @overload
    def WriteCharacterString(self, encodingType: UniversalTagNumber, str_: System.ReadOnlySpan, tag: System.Nullable) -> None: ...
    @overload
    def WriteCharacterString(self, encodingType: UniversalTagNumber, value: str, tag: System.Nullable) -> None: ...
    @overload
    def WriteEncodedValue(self, value: System.ReadOnlySpan) -> None: ...
    @overload
    def WriteEnumeratedValue(self, value: System.Enum, tag: System.Nullable) -> None: ...
    @overload
    def WriteEnumeratedValue(self, value: TEnum, tag: System.Nullable) -> None: ...
    @overload
    def WriteGeneralizedTime(self, value: System.DateTimeOffset, omitFractionalSeconds: bool, tag: System.Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: System.UInt64, tag: System.Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: System.Int64, tag: System.Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: System.ReadOnlySpan, tag: System.Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: Numerics.BigInteger, tag: System.Nullable) -> None: ...
    @overload
    def WriteIntegerUnsigned(self, value: System.ReadOnlySpan, tag: System.Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: Collections.BitArray, tag: System.Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: TEnum, tag: System.Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: System.Enum, tag: System.Nullable) -> None: ...
    @overload
    def WriteNull(self, tag: System.Nullable) -> None: ...
    @overload
    def WriteObjectIdentifier(self, oidValue: System.ReadOnlySpan, tag: System.Nullable) -> None: ...
    @overload
    def WriteObjectIdentifier(self, oidValue: str, tag: System.Nullable) -> None: ...
    @overload
    def WriteOctetString(self, value: System.ReadOnlySpan, tag: System.Nullable) -> None: ...
    @overload
    def WriteUtcTime(self, value: System.DateTimeOffset, tag: System.Nullable) -> None: ...
    @overload
    def WriteUtcTime(self, value: System.DateTimeOffset, twoDigitYearMax: int, tag: System.Nullable) -> None: ...

class Scope(System.ValueType):
    """    """
    @overload
    def Dispose() -> None: ...

class TagClass(enum.Enum):
    Universal = 0
    Application = 64
    ContextSpecific = 128
    Private = 192

class UniversalTagNumber(enum.Enum):
    EndOfContents = 0
    Boolean = 1
    Integer = 2
    BitString = 3
    OctetString = 4
    Null = 5
    ObjectIdentifier = 6
    ObjectDescriptor = 7
    External = 8
    InstanceOf = 8
    Real = 9
    Enumerated = 10
    Embedded = 11
    UTF8String = 12
    RelativeObjectIdentifier = 13
    Time = 14
    Sequence = 16
    SequenceOf = 16
    Set = 17
    SetOf = 17
    NumericString = 18
    PrintableString = 19
    TeletexString = 20
    T61String = 20
    VideotexString = 21
    IA5String = 22
    UtcTime = 23
    GeneralizedTime = 24
    GraphicString = 25
    VisibleString = 26
    ISO646String = 26
    GeneralString = 27
    UniversalString = 28
    UnrestrictedCharacterString = 29
    BMPString = 30
    Date = 31
    TimeOfDay = 32
    DateTime = 33
    Duration = 34
    ObjectIdentifierIRI = 35
    RelativeObjectIdentifierIRI = 36

# endregion
