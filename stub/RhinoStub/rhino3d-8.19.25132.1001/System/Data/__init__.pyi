"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["SqlTypes", "Common", "DataReaderExtensions", "UpdateStatus", "XmlReadMode", "XmlWriteMode", "AcceptRejectRule", "InternalDataCollectionBase", "CommandBehavior", "CommandType", "ConflictOption", "ConnectionState", "Constraint", "ConstraintCollection", "DataColumn", "DataColumnChangeEventArgs", "DataColumnChangeEventHandler", "DataColumnCollection", "DataException", "ConstraintException", "DeletedRowInaccessibleException", "DuplicateNameException", "InRowChangingEventException", "InvalidConstraintException", "MissingPrimaryKeyException", "NoNullAllowedException", "ReadOnlyException", "RowNotInTableException", "VersionNotFoundException", "DataRelation", "DataRelationCollection", "DataRow", "DataRowBuilder", "DataRowAction", "DataRowChangeEventArgs", "DataRowChangeEventHandler", "DataRowCollection", "DataRowComparer", "DataRowExtensions", "DataRowState", "DataRowVersion", "DataRowView", "SerializationFormat", "DataSet", "DataSetDateTime", "DataTable", "DataTableExtensions", "DataTableClearEventArgs", "DataTableClearEventHandler", "DataTableCollection", "DataTableNewRowEventArgs", "DataTableNewRowEventHandler", "DataTableReader", "DataView", "DataViewManager", "DataViewRowState", "DataViewSetting", "DataViewSettingCollection", "DBConcurrencyException", "DbType", "EnumerableRowCollection", "EnumerableRowCollectionExtensions", "FillErrorEventArgs", "FillErrorEventHandler", "ForeignKeyConstraint", "IColumnMapping", "IColumnMappingCollection", "IDataAdapter", "IDataParameter", "IDataParameterCollection", "IDataReader", "IDataRecord", "IDbCommand", "IDbConnection", "IDbDataAdapter", "IDbDataParameter", "IDbTransaction", "IsolationLevel", "ITableMapping", "ITableMappingCollection", "KeyRestrictionBehavior", "LoadOption", "MappingType", "MergeFailedEventArgs", "MergeFailedEventHandler", "MissingMappingAction", "MissingSchemaAction", "OrderedEnumerableRowCollection", "ParameterDirection", "PropertyCollection", "StatementCompletedEventArgs", "StatementCompletedEventHandler", "Rule", "SchemaSerializationMode", "SchemaType", "SqlDbType", "StateChangeEventArgs", "StateChangeEventHandler", "StatementType", "StrongTypingException", "TypedTableBase", "TypedTableBaseExtensions", "UniqueConstraint", "UpdateRowSource", "InvalidExpressionException", "EvaluateException", "SyntaxErrorException"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import IO
from System import Threading
from System import Xml
from System.Collections import Generic
from System.Data import Common
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Threading import Tasks
from System.Xml import Schema
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["SqlClient", "OracleClient", "OleDb", "Odbc", "Common"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.Data.Common, Version=7.0.0.0

class DataReaderExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetBoolean(reader: Common.DbDataReader, name: str) -> bool: ...
    @overload
    @staticmethod
    def GetByte(reader: Common.DbDataReader, name: str) -> System.Byte: ...
    @overload
    @staticmethod
    def GetBytes(reader: Common.DbDataReader, name: str, dataOffset: System.Int64, buffer: System.System.Array[System.Byte], bufferOffset: int, length: int) -> System.Int64: ...
    @overload
    @staticmethod
    def GetChar(reader: Common.DbDataReader, name: str) -> System.Char: ...
    @overload
    @staticmethod
    def GetChars(reader: Common.DbDataReader, name: str, dataOffset: System.Int64, buffer: System.System.Array[System.Char], bufferOffset: int, length: int) -> System.Int64: ...
    @overload
    @staticmethod
    def GetData(reader: Common.DbDataReader, name: str) -> Common.DbDataReader: ...
    @overload
    @staticmethod
    def GetDataTypeName(reader: Common.DbDataReader, name: str) -> str: ...
    @overload
    @staticmethod
    def GetDateTime(reader: Common.DbDataReader, name: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetDecimal(reader: Common.DbDataReader, name: str) -> System.Decimal: ...
    @overload
    @staticmethod
    def GetDouble(reader: Common.DbDataReader, name: str) -> float: ...
    @overload
    @staticmethod
    def GetFieldType(reader: Common.DbDataReader, name: str) -> System.Type: ...
    @overload
    @staticmethod
    def GetFieldValue(reader: Common.DbDataReader, name: str) -> T: ...
    @overload
    @staticmethod
    def GetFieldValueAsync(reader: Common.DbDataReader, name: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetFloat(reader: Common.DbDataReader, name: str) -> System.Single: ...
    @overload
    @staticmethod
    def GetGuid(reader: Common.DbDataReader, name: str) -> System.Guid: ...
    @overload
    @staticmethod
    def GetInt16(reader: Common.DbDataReader, name: str) -> System.Int16: ...
    @overload
    @staticmethod
    def GetInt32(reader: Common.DbDataReader, name: str) -> int: ...
    @overload
    @staticmethod
    def GetInt64(reader: Common.DbDataReader, name: str) -> System.Int64: ...
    @overload
    @staticmethod
    def GetProviderSpecificFieldType(reader: Common.DbDataReader, name: str) -> System.Type: ...
    @overload
    @staticmethod
    def GetProviderSpecificValue(reader: Common.DbDataReader, name: str) -> object: ...
    @overload
    @staticmethod
    def GetStream(reader: Common.DbDataReader, name: str) -> IO.Stream: ...
    @overload
    @staticmethod
    def GetString(reader: Common.DbDataReader, name: str) -> str: ...
    @overload
    @staticmethod
    def GetTextReader(reader: Common.DbDataReader, name: str) -> IO.TextReader: ...
    @overload
    @staticmethod
    def GetValue(reader: Common.DbDataReader, name: str) -> object: ...
    @overload
    @staticmethod
    def IsDBNull(reader: Common.DbDataReader, name: str) -> bool: ...
    @overload
    @staticmethod
    def IsDBNullAsync(reader: Common.DbDataReader, name: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class UpdateStatus(enum.Enum):
    Continue = 0
    ErrorsOccurred = 1
    SkipCurrentRow = 2
    SkipAllRemainingRows = 3

class XmlReadMode(enum.Enum):
    Auto = 0
    ReadSchema = 1
    IgnoreSchema = 2
    InferSchema = 3
    DiffGram = 4
    Fragment = 5
    InferTypedSchema = 6

class XmlWriteMode(enum.Enum):
    WriteSchema = 0
    IgnoreSchema = 1
    DiffGram = 2

class AcceptRejectRule(enum.Enum):
    None_ = 0
    Cascade = 1

class InternalDataCollectionBase(object):
    """    """
    def __init__(self): ...
    @overload
    def CopyTo(self, ar: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class CommandBehavior(enum.Enum):
    Default = 0
    SingleResult = 1
    SchemaOnly = 2
    KeyInfo = 4
    SingleRow = 8
    SequentialAccess = 16
    CloseConnection = 32

class CommandType(enum.Enum):
    Text = 1
    StoredProcedure = 4
    TableDirect = 512

class ConflictOption(enum.Enum):
    CompareAllSearchableValues = 1
    CompareRowVersion = 2
    OverwriteChanges = 3

class ConnectionState(enum.Enum):
    Closed = 0
    Open = 1
    Connecting = 2
    Executing = 4
    Fetching = 8
    Broken = 16

class Constraint(object):
    """    """
    @property
    def ConstraintName(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def Table(self) -> DataTable: ...
    @ConstraintName.setter
    def ConstraintName(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ConstraintCollection(InternalDataCollectionBase):
    """    """
    @overload
    def Add(self, constraint: Constraint) -> None: ...
    @overload
    def Add(self, name: str, columns: System.Array[DataColumn], primaryKey: bool) -> Constraint: ...
    @overload
    def Add(self, name: str, column: DataColumn, primaryKey: bool) -> Constraint: ...
    @overload
    def Add(self, name: str, primaryKeyColumn: DataColumn, foreignKeyColumn: DataColumn) -> Constraint: ...
    @overload
    def Add(self, name: str, primaryKeyColumns: System.Array[DataColumn], foreignKeyColumns: System.Array[DataColumn]) -> Constraint: ...
    @overload
    def AddRange(self, constraints: System.Array[Constraint]) -> None: ...
    @overload
    def CanRemove(self, constraint: Constraint) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[Constraint], index: int) -> None: ...
    @property
    def Item(self) -> Constraint: ...
    @property
    def Item(self) -> Constraint: ...
    @overload
    def IndexOf(self, constraintName: str) -> int: ...
    @overload
    def IndexOf(self, constraint: Constraint) -> int: ...
    @overload
    def Remove(self, constraint: Constraint) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @property
    def CollectionChanged(self): ...

class DataColumn(ComponentModel.MarshalByValueComponent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, columnName: str): ...
    @overload
    def __init__(self, columnName: str, dataType: System.Type): ...
    @overload
    def __init__(self, columnName: str, dataType: System.Type, expr: str): ...
    @overload
    def __init__(self, columnName: str, dataType: System.Type, expr: str, type_: MappingType): ...
    @property
    def AllowDBNull(self) -> bool: ...
    @property
    def AutoIncrement(self) -> bool: ...
    @property
    def AutoIncrementSeed(self) -> System.Int64: ...
    @property
    def AutoIncrementStep(self) -> System.Int64: ...
    @property
    def Caption(self) -> str: ...
    @property
    def ColumnMapping(self) -> MappingType: ...
    @property
    def ColumnName(self) -> str: ...
    @property
    def DataType(self) -> System.Type: ...
    @property
    def DateTimeMode(self) -> DataSetDateTime: ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def Expression(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Ordinal(self) -> int: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def Unique(self) -> bool: ...
    @AllowDBNull.setter
    def AllowDBNull(self, value: System.Void): ...
    @AutoIncrement.setter
    def AutoIncrement(self, value: System.Void): ...
    @AutoIncrementSeed.setter
    def AutoIncrementSeed(self, value: System.Void): ...
    @AutoIncrementStep.setter
    def AutoIncrementStep(self, value: System.Void): ...
    @Caption.setter
    def Caption(self, value: System.Void): ...
    @ColumnMapping.setter
    def ColumnMapping(self, value: System.Void): ...
    @ColumnName.setter
    def ColumnName(self, value: System.Void): ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @DateTimeMode.setter
    def DateTimeMode(self, value: System.Void): ...
    @DefaultValue.setter
    def DefaultValue(self, value: System.Void): ...
    @Expression.setter
    def Expression(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Unique.setter
    def Unique(self, value: System.Void): ...
    @overload
    def SetOrdinal(self, ordinal: int) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataColumnChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, row: DataRow, column: DataColumn, value: object): ...
    @property
    def Column(self) -> DataColumn: ...
    @property
    def ProposedValue(self) -> object: ...
    @property
    def Row(self) -> DataRow: ...
    @ProposedValue.setter
    def ProposedValue(self, value: System.Void): ...

class DataColumnChangeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataColumnChangeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataColumnChangeEventArgs) -> None: ...

class DataColumnCollection(InternalDataCollectionBase):
    """    """
    @overload
    def Add() -> DataColumn: ...
    @overload
    def Add(self, column: DataColumn) -> None: ...
    @overload
    def Add(self, columnName: str) -> DataColumn: ...
    @overload
    def Add(self, columnName: str, type_: System.Type) -> DataColumn: ...
    @overload
    def Add(self, columnName: str, type_: System.Type, expression: str) -> DataColumn: ...
    @overload
    def AddRange(self, columns: System.Array[DataColumn]) -> None: ...
    @overload
    def CanRemove(self, column: DataColumn) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataColumn], index: int) -> None: ...
    @property
    def Item(self) -> DataColumn: ...
    @property
    def Item(self) -> DataColumn: ...
    @overload
    def IndexOf(self, columnName: str) -> int: ...
    @overload
    def IndexOf(self, column: DataColumn) -> int: ...
    @overload
    def Remove(self, column: DataColumn) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @property
    def CollectionChanged(self): ...

class DataException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, s: str, innerException: System.Exception): ...

class ConstraintException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class DeletedRowInaccessibleException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class DuplicateNameException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class InRowChangingEventException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class InvalidConstraintException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class MissingPrimaryKeyException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class NoNullAllowedException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ReadOnlyException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RowNotInTableException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class VersionNotFoundException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class DataRelation(object):
    """    """
    @overload
    def __init__(self, relationName: str, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, relationName: str, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn]): ...
    @overload
    def __init__(self, relationName: str, parentColumn: DataColumn, childColumn: DataColumn, createConstraints: bool): ...
    @overload
    def __init__(self, relationName: str, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn], createConstraints: bool): ...
    @overload
    def __init__(self, relationName: str, parentTableName: str, childTableName: str, parentColumnNames: System.System.Array[str], childColumnNames: System.System.Array[str], nested: bool): ...
    @overload
    def __init__(self, relationName: str, parentTableName: str, parentTableNamespace: str, childTableName: str, childTableNamespace: str, parentColumnNames: System.System.Array[str], childColumnNames: System.System.Array[str], nested: bool): ...
    @property
    def ChildColumns(self) -> System.Array[DataColumn]: ...
    @property
    def ChildKeyConstraint(self) -> ForeignKeyConstraint: ...
    @property
    def ChildTable(self) -> DataTable: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def Nested(self) -> bool: ...
    @property
    def ParentColumns(self) -> System.Array[DataColumn]: ...
    @property
    def ParentKeyConstraint(self) -> UniqueConstraint: ...
    @property
    def ParentTable(self) -> DataTable: ...
    @property
    def RelationName(self) -> str: ...
    @Nested.setter
    def Nested(self, value: System.Void): ...
    @RelationName.setter
    def RelationName(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataRelationCollection(InternalDataCollectionBase):
    """    """
    @overload
    def Add(self, relation: DataRelation) -> None: ...
    @overload
    def Add(self, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn]) -> DataRelation: ...
    @overload
    def Add(self, parentColumn: DataColumn, childColumn: DataColumn) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn]) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumn: DataColumn, childColumn: DataColumn) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn], createConstraints: bool) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumn: DataColumn, childColumn: DataColumn, createConstraints: bool) -> DataRelation: ...
    @overload
    def AddRange(self, relations: System.Array[DataRelation]) -> None: ...
    @overload
    def CanRemove(self, relation: DataRelation) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataRelation], index: int) -> None: ...
    @property
    def Item(self) -> DataRelation: ...
    @property
    def Item(self) -> DataRelation: ...
    @overload
    def IndexOf(self, relationName: str) -> int: ...
    @overload
    def IndexOf(self, relation: DataRelation) -> int: ...
    @overload
    def Remove(self, relation: DataRelation) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @property
    def CollectionChanged(self): ...

class DataRow(object):
    """    """
    @overload
    def AcceptChanges() -> None: ...
    @overload
    def BeginEdit() -> None: ...
    @overload
    def CancelEdit() -> None: ...
    @overload
    def ClearErrors() -> None: ...
    @overload
    def Delete() -> None: ...
    @overload
    def EndEdit() -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def ItemArray(self) -> System.System.Array[object]: ...
    @property
    def RowError(self) -> str: ...
    @property
    def RowState(self) -> DataRowState: ...
    @property
    def Table(self) -> DataTable: ...
    @overload
    def GetChildRows(self, relation: DataRelation) -> System.Array[DataRow]: ...
    @overload
    def GetChildRows(self, relationName: str) -> System.Array[DataRow]: ...
    @overload
    def GetChildRows(self, relation: DataRelation, version: DataRowVersion) -> System.Array[DataRow]: ...
    @overload
    def GetChildRows(self, relationName: str, version: DataRowVersion) -> System.Array[DataRow]: ...
    @overload
    def GetColumnError(self, columnIndex: int) -> str: ...
    @overload
    def GetColumnError(self, columnName: str) -> str: ...
    @overload
    def GetColumnError(self, column: DataColumn) -> str: ...
    @overload
    def GetColumnsInError() -> System.Array[DataColumn]: ...
    @overload
    def GetParentRow(self, relationName: str) -> DataRow: ...
    @overload
    def GetParentRow(self, relation: DataRelation) -> DataRow: ...
    @overload
    def GetParentRow(self, relationName: str, version: DataRowVersion) -> DataRow: ...
    @overload
    def GetParentRow(self, relation: DataRelation, version: DataRowVersion) -> DataRow: ...
    @overload
    def GetParentRows(self, relationName: str) -> System.Array[DataRow]: ...
    @overload
    def GetParentRows(self, relation: DataRelation) -> System.Array[DataRow]: ...
    @overload
    def GetParentRows(self, relationName: str, version: DataRowVersion) -> System.Array[DataRow]: ...
    @overload
    def GetParentRows(self, relation: DataRelation, version: DataRowVersion) -> System.Array[DataRow]: ...
    @overload
    def HasVersion(self, version: DataRowVersion) -> bool: ...
    @overload
    def IsNull(self, column: DataColumn) -> bool: ...
    @overload
    def IsNull(self, columnName: str) -> bool: ...
    @overload
    def IsNull(self, columnIndex: int) -> bool: ...
    @overload
    def IsNull(self, column: DataColumn, version: DataRowVersion) -> bool: ...
    @overload
    def RejectChanges() -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @ItemArray.setter
    def ItemArray(self, value: System.Void): ...
    @RowError.setter
    def RowError(self, value: System.Void): ...
    @overload
    def SetAdded() -> None: ...
    @overload
    def SetColumnError(self, columnIndex: int, error: str) -> None: ...
    @overload
    def SetColumnError(self, columnName: str, error: str) -> None: ...
    @overload
    def SetColumnError(self, column: DataColumn, error: str) -> None: ...
    @overload
    def SetModified() -> None: ...
    @overload
    def SetParentRow(self, parentRow: DataRow) -> None: ...
    @overload
    def SetParentRow(self, parentRow: DataRow, relation: DataRelation) -> None: ...

class DataRowBuilder(object):
    """    """

class DataRowAction(enum.Enum):
    Nothing = 0
    Delete = 1
    Change = 2
    Rollback = 4
    Commit = 8
    Add = 16
    ChangeOriginal = 32
    ChangeCurrentAndOriginal = 64

class DataRowChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, row: DataRow, action: DataRowAction): ...
    @property
    def Action(self) -> DataRowAction: ...
    @property
    def Row(self) -> DataRow: ...

class DataRowChangeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataRowChangeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataRowChangeEventArgs) -> None: ...

class DataRowCollection(InternalDataCollectionBase):
    """    """
    @overload
    def Add(self, row: DataRow) -> None: ...
    @overload
    def Add(self, values: System.System.Array[object]) -> DataRow: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, keys: System.System.Array[object]) -> bool: ...
    @overload
    def Contains(self, key: object) -> bool: ...
    @overload
    def CopyTo(self, ar: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[DataRow], index: int) -> None: ...
    @overload
    def Find(self, key: object) -> DataRow: ...
    @overload
    def Find(self, keys: System.System.Array[object]) -> DataRow: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DataRow: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, row: DataRow) -> int: ...
    @overload
    def InsertAt(self, row: DataRow, pos: int) -> None: ...
    @overload
    def Remove(self, row: DataRow) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...

class DataRowComparer(object):
    """    """
    @property
    def Default(self) -> DataRowComparer: ...

class DataRowComparer(object):
    """    DataRowComparer[TRow]
    """
    @overload
    def Equals(self, leftRow: TRow, rightRow: TRow) -> bool: ...
    @property
    def Default(self) -> DataRowComparer: ...
    @overload
    def GetHashCode(self, row: TRow) -> int: ...

class DataRowExtensions(object):
    """    """
    @overload
    @staticmethod
    def Field(row: DataRow, columnName: str) -> T: ...
    @overload
    @staticmethod
    def Field(row: DataRow, column: DataColumn) -> T: ...
    @overload
    @staticmethod
    def Field(row: DataRow, columnIndex: int) -> T: ...
    @overload
    @staticmethod
    def Field(row: DataRow, columnIndex: int, version: DataRowVersion) -> T: ...
    @overload
    @staticmethod
    def Field(row: DataRow, columnName: str, version: DataRowVersion) -> T: ...
    @overload
    @staticmethod
    def Field(row: DataRow, column: DataColumn, version: DataRowVersion) -> T: ...
    @overload
    @staticmethod
    def SetField(row: DataRow, columnIndex: int, value: T) -> None: ...
    @overload
    @staticmethod
    def SetField(row: DataRow, columnName: str, value: T) -> None: ...
    @overload
    @staticmethod
    def SetField(row: DataRow, column: DataColumn, value: T) -> None: ...

class DataRowState(enum.Enum):
    Detached = 1
    Unchanged = 2
    Added = 4
    Deleted = 8
    Modified = 16

class DataRowVersion(enum.Enum):
    Original = 256
    Current = 512
    Proposed = 1024
    Default = 1536

class DataRowView(object):
    """    """
    @overload
    def BeginEdit() -> None: ...
    @overload
    def CancelEdit() -> None: ...
    @overload
    def CreateChildView(self, relationName: str) -> DataView: ...
    @overload
    def CreateChildView(self, relation: DataRelation) -> DataView: ...
    @overload
    def CreateChildView(self, relationName: str, followParent: bool) -> DataView: ...
    @overload
    def CreateChildView(self, relation: DataRelation, followParent: bool) -> DataView: ...
    @overload
    def Delete() -> None: ...
    @overload
    def EndEdit() -> None: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DataView(self) -> DataView: ...
    @property
    def IsEdit(self) -> bool: ...
    @property
    def IsNew(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Row(self) -> DataRow: ...
    @property
    def RowVersion(self) -> DataRowVersion: ...
    @overload
    def GetHashCode() -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @property
    def PropertyChanged(self): ...

class SerializationFormat(enum.Enum):
    Xml = 0
    Binary = 1

class DataSet(ComponentModel.MarshalByValueComponent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSetName: str): ...
    @overload
    def AcceptChanges() -> None: ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> DataSet: ...
    @overload
    def Copy() -> DataSet: ...
    @overload
    def CreateDataReader() -> DataTableReader: ...
    @overload
    def CreateDataReader(self, dataTables: System.Array[DataTable]) -> DataTableReader: ...
    @overload
    def EndInit() -> None: ...
    @property
    def CaseSensitive(self) -> bool: ...
    @property
    def DataSetName(self) -> str: ...
    @property
    def DefaultViewManager(self) -> DataViewManager: ...
    @property
    def EnforceConstraints(self) -> bool: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Locale(self) -> Globalization.CultureInfo: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def Relations(self) -> DataRelationCollection: ...
    @property
    def RemotingFormat(self) -> SerializationFormat: ...
    @property
    def SchemaSerializationMode(self) -> SchemaSerializationMode: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def Tables(self) -> DataTableCollection: ...
    @overload
    def GetChanges() -> DataSet: ...
    @overload
    def GetChanges(self, rowStates: DataRowState) -> DataSet: ...
    @overload
    @staticmethod
    def GetDataSetSchema(schemaSet: Schema.XmlSchemaSet) -> Schema.XmlSchemaComplexType: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetXml() -> str: ...
    @overload
    def GetXmlSchema() -> str: ...
    @overload
    def HasChanges() -> bool: ...
    @overload
    def HasChanges(self, rowStates: DataRowState) -> bool: ...
    @overload
    def InferXmlSchema(self, reader: Xml.XmlReader, nsArray: System.System.Array[str]) -> None: ...
    @overload
    def InferXmlSchema(self, stream: IO.Stream, nsArray: System.System.Array[str]) -> None: ...
    @overload
    def InferXmlSchema(self, reader: IO.TextReader, nsArray: System.System.Array[str]) -> None: ...
    @overload
    def InferXmlSchema(self, fileName: str, nsArray: System.System.Array[str]) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, tables: System.Array[DataTable]) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, tables: System.System.Array[str]) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, errorHandler: FillErrorEventHandler, tables: System.Array[DataTable]) -> None: ...
    @overload
    def Merge(self, table: DataTable) -> None: ...
    @overload
    def Merge(self, rows: System.Array[DataRow]) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet, preserveChanges: bool) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def Merge(self, rows: System.Array[DataRow], preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def ReadXml(self, reader: IO.TextReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, stream: IO.Stream) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: Xml.XmlReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: Xml.XmlReader, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, stream: IO.Stream, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: IO.TextReader, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXmlSchema(self, stream: IO.Stream) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: Xml.XmlReader) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: IO.TextReader) -> None: ...
    @overload
    def ReadXmlSchema(self, fileName: str) -> None: ...
    @overload
    def RejectChanges() -> None: ...
    @overload
    def Reset() -> None: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: System.Void): ...
    @DataSetName.setter
    def DataSetName(self, value: System.Void): ...
    @EnforceConstraints.setter
    def EnforceConstraints(self, value: System.Void): ...
    @Locale.setter
    def Locale(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @RemotingFormat.setter
    def RemotingFormat(self, value: System.Void): ...
    @SchemaSerializationMode.setter
    def SchemaSerializationMode(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @overload
    def WriteXml(self, stream: IO.Stream) -> None: ...
    @overload
    def WriteXml(self, fileName: str) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, stream: IO.Stream, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: IO.Stream) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: IO.TextWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str, multipleTargetConverter: System.Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: IO.TextWriter, multipleTargetConverter: System.Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: Xml.XmlWriter, multipleTargetConverter: System.Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: IO.Stream, multipleTargetConverter: System.Converter) -> None: ...
    @property
    def MergeFailed(self): ...
    @property
    def Initialized(self): ...
    @property
    def Disposed(self): ...

class DataSetDateTime(enum.Enum):
    Local = 1
    Unspecified = 2
    UnspecifiedLocal = 3
    Utc = 4

class DataTable(ComponentModel.MarshalByValueComponent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tableName: str): ...
    @overload
    def __init__(self, tableName: str, tableNamespace: str): ...
    @overload
    def AcceptChanges() -> None: ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def BeginLoadData() -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> DataTable: ...
    @overload
    def Compute(self, expression: str, filter_: str) -> object: ...
    @overload
    def Copy() -> DataTable: ...
    @overload
    def CreateDataReader() -> DataTableReader: ...
    @overload
    def EndInit() -> None: ...
    @overload
    def EndLoadData() -> None: ...
    @property
    def CaseSensitive(self) -> bool: ...
    @property
    def ChildRelations(self) -> DataRelationCollection: ...
    @property
    def Columns(self) -> DataColumnCollection: ...
    @property
    def Constraints(self) -> ConstraintCollection: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def DefaultView(self) -> DataView: ...
    @property
    def DisplayExpression(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Locale(self) -> Globalization.CultureInfo: ...
    @property
    def MinimumCapacity(self) -> int: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ParentRelations(self) -> DataRelationCollection: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PrimaryKey(self) -> System.Array[DataColumn]: ...
    @property
    def RemotingFormat(self) -> SerializationFormat: ...
    @property
    def Rows(self) -> DataRowCollection: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def TableName(self) -> str: ...
    @overload
    def GetChanges() -> DataTable: ...
    @overload
    def GetChanges(self, rowStates: DataRowState) -> DataTable: ...
    @overload
    @staticmethod
    def GetDataTableSchema(schemaSet: Schema.XmlSchemaSet) -> Schema.XmlSchemaComplexType: ...
    @overload
    def GetErrors() -> System.Array[DataRow]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ImportRow(self, row: DataRow) -> None: ...
    @overload
    def Load(self, reader: IDataReader) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, errorHandler: FillErrorEventHandler) -> None: ...
    @overload
    def LoadDataRow(self, values: System.System.Array[object], loadOption: LoadOption) -> DataRow: ...
    @overload
    def LoadDataRow(self, values: System.System.Array[object], fAcceptChanges: bool) -> DataRow: ...
    @overload
    def Merge(self, table: DataTable) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def NewRow() -> DataRow: ...
    @overload
    def ReadXml(self, reader: Xml.XmlReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, stream: IO.Stream) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: IO.TextReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str) -> XmlReadMode: ...
    @overload
    def ReadXmlSchema(self, fileName: str) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: IO.TextReader) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: Xml.XmlReader) -> None: ...
    @overload
    def ReadXmlSchema(self, stream: IO.Stream) -> None: ...
    @overload
    def RejectChanges() -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Select() -> System.Array[DataRow]: ...
    @overload
    def Select(self, filterExpression: str) -> System.Array[DataRow]: ...
    @overload
    def Select(self, filterExpression: str, sort: str) -> System.Array[DataRow]: ...
    @overload
    def Select(self, filterExpression: str, sort: str, recordStates: DataViewRowState) -> System.Array[DataRow]: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: System.Void): ...
    @DisplayExpression.setter
    def DisplayExpression(self, value: System.Void): ...
    @Locale.setter
    def Locale(self, value: System.Void): ...
    @MinimumCapacity.setter
    def MinimumCapacity(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @PrimaryKey.setter
    def PrimaryKey(self, value: System.Void): ...
    @RemotingFormat.setter
    def RemotingFormat(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @TableName.setter
    def TableName(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter) -> None: ...
    @overload
    def WriteXml(self, fileName: str) -> None: ...
    @overload
    def WriteXml(self, stream: IO.Stream) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, stream: IO.Stream, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, fileName: str, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, stream: IO.Stream, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, stream: IO.Stream, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: IO.TextWriter, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: IO.Stream) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: IO.TextWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: IO.Stream, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: IO.TextWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: Xml.XmlWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str, writeHierarchy: bool) -> None: ...
    @property
    def ColumnChanging(self): ...
    @property
    def ColumnChanged(self): ...
    @property
    def Initialized(self): ...
    @property
    def RowChanged(self): ...
    @property
    def RowChanging(self): ...
    @property
    def RowDeleting(self): ...
    @property
    def RowDeleted(self): ...
    @property
    def TableClearing(self): ...
    @property
    def TableCleared(self): ...
    @property
    def TableNewRow(self): ...
    @property
    def Disposed(self): ...

class DataTableExtensions(object):
    """    """
    @overload
    @staticmethod
    def AsDataView(table: DataTable) -> DataView: ...
    @overload
    @staticmethod
    def AsDataView(source: EnumerableRowCollection) -> DataView: ...
    @overload
    @staticmethod
    def AsEnumerable(source: DataTable) -> EnumerableRowCollection: ...
    @overload
    @staticmethod
    def CopyToDataTable(source: Generic.IEnumerable) -> DataTable: ...
    @overload
    @staticmethod
    def CopyToDataTable(source: Generic.IEnumerable, table: DataTable, options: LoadOption) -> None: ...
    @overload
    @staticmethod
    def CopyToDataTable(source: Generic.IEnumerable, table: DataTable, options: LoadOption, errorHandler: FillErrorEventHandler) -> None: ...

class DataTableClearEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataTable: DataTable): ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def TableName(self) -> str: ...
    @property
    def TableNamespace(self) -> str: ...

class DataTableClearEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataTableClearEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataTableClearEventArgs) -> None: ...

class DataTableCollection(InternalDataCollectionBase):
    """    """
    @overload
    def Add() -> DataTable: ...
    @overload
    def Add(self, table: DataTable) -> None: ...
    @overload
    def Add(self, name: str) -> DataTable: ...
    @overload
    def Add(self, name: str, tableNamespace: str) -> DataTable: ...
    @overload
    def AddRange(self, tables: System.Array[DataTable]) -> None: ...
    @overload
    def CanRemove(self, table: DataTable) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def Contains(self, name: str, tableNamespace: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataTable], index: int) -> None: ...
    @property
    def Item(self) -> DataTable: ...
    @property
    def Item(self) -> DataTable: ...
    @property
    def Item(self) -> DataTable: ...
    @overload
    def IndexOf(self, tableName: str) -> int: ...
    @overload
    def IndexOf(self, table: DataTable) -> int: ...
    @overload
    def IndexOf(self, tableName: str, tableNamespace: str) -> int: ...
    @overload
    def Remove(self, table: DataTable) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, name: str, tableNamespace: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @property
    def CollectionChanged(self): ...
    @property
    def CollectionChanging(self): ...

class DataTableNewRowEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataRow: DataRow): ...
    @property
    def Row(self) -> DataRow: ...

class DataTableNewRowEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataTableNewRowEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataTableNewRowEventArgs) -> None: ...

class DataTableReader(Common.DbDataReader):
    """    """
    @overload
    def __init__(self, dataTable: DataTable): ...
    @overload
    def __init__(self, dataTables: System.Array[DataTable]): ...
    @overload
    def Close() -> None: ...
    @property
    def Depth(self) -> int: ...
    @property
    def FieldCount(self) -> int: ...
    @property
    def HasRows(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def RecordsAffected(self) -> int: ...
    @overload
    def GetBoolean(self, ordinal: int) -> bool: ...
    @overload
    def GetByte(self, ordinal: int) -> System.Byte: ...
    @overload
    def GetBytes(self, ordinal: int, dataIndex: System.Int64, buffer: System.System.Array[System.Byte], bufferIndex: int, length: int) -> System.Int64: ...
    @overload
    def GetChar(self, ordinal: int) -> System.Char: ...
    @overload
    def GetChars(self, ordinal: int, dataIndex: System.Int64, buffer: System.System.Array[System.Char], bufferIndex: int, length: int) -> System.Int64: ...
    @overload
    def GetDataTypeName(self, ordinal: int) -> str: ...
    @overload
    def GetDateTime(self, ordinal: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, ordinal: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, ordinal: int) -> float: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetFieldType(self, ordinal: int) -> System.Type: ...
    @overload
    def GetFloat(self, ordinal: int) -> System.Single: ...
    @overload
    def GetGuid(self, ordinal: int) -> System.Guid: ...
    @overload
    def GetInt16(self, ordinal: int) -> System.Int16: ...
    @overload
    def GetInt32(self, ordinal: int) -> int: ...
    @overload
    def GetInt64(self, ordinal: int) -> System.Int64: ...
    @overload
    def GetName(self, ordinal: int) -> str: ...
    @overload
    def GetOrdinal(self, name: str) -> int: ...
    @overload
    def GetProviderSpecificFieldType(self, ordinal: int) -> System.Type: ...
    @overload
    def GetProviderSpecificValue(self, ordinal: int) -> object: ...
    @overload
    def GetProviderSpecificValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def GetSchemaTable() -> DataTable: ...
    @overload
    def GetString(self, ordinal: int) -> str: ...
    @overload
    def GetValue(self, ordinal: int) -> object: ...
    @overload
    def GetValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def IsDBNull(self, ordinal: int) -> bool: ...
    @overload
    def NextResult() -> bool: ...
    @overload
    def Read() -> bool: ...

class DataView(ComponentModel.MarshalByValueComponent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, table: DataTable): ...
    @overload
    def __init__(self, table: DataTable, RowFilter: str, Sort: str, RowState: DataViewRowState): ...
    @overload
    def AddNew() -> DataRowView: ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def EndInit() -> None: ...
    @overload
    def Equals(self, view: DataView) -> bool: ...
    @overload
    def Find(self, key: object) -> int: ...
    @overload
    def Find(self, key: System.System.Array[object]) -> int: ...
    @overload
    def FindRows(self, key: System.System.Array[object]) -> System.Array[DataRowView]: ...
    @overload
    def FindRows(self, key: object) -> System.Array[DataRowView]: ...
    @property
    def AllowDelete(self) -> bool: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def ApplyDefaultSort(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DataViewManager(self) -> DataViewManager: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Item(self) -> DataRowView: ...
    @property
    def RowFilter(self) -> str: ...
    @property
    def RowStateFilter(self) -> DataViewRowState: ...
    @property
    def Sort(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @AllowDelete.setter
    def AllowDelete(self, value: System.Void): ...
    @AllowEdit.setter
    def AllowEdit(self, value: System.Void): ...
    @AllowNew.setter
    def AllowNew(self, value: System.Void): ...
    @ApplyDefaultSort.setter
    def ApplyDefaultSort(self, value: System.Void): ...
    @RowFilter.setter
    def RowFilter(self, value: System.Void): ...
    @RowStateFilter.setter
    def RowStateFilter(self, value: System.Void): ...
    @Sort.setter
    def Sort(self, value: System.Void): ...
    @Table.setter
    def Table(self, value: System.Void): ...
    @overload
    def ToTable() -> DataTable: ...
    @overload
    def ToTable(self, tableName: str) -> DataTable: ...
    @overload
    def ToTable(self, distinct: bool, columnNames: System.System.Array[str]) -> DataTable: ...
    @overload
    def ToTable(self, tableName: str, distinct: bool, columnNames: System.System.Array[str]) -> DataTable: ...
    @property
    def ListChanged(self): ...
    @property
    def Initialized(self): ...
    @property
    def Disposed(self): ...

class DataViewManager(ComponentModel.MarshalByValueComponent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSet: DataSet): ...
    @overload
    def CreateDataView(self, table: DataTable) -> DataView: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def DataViewSettingCollectionString(self) -> str: ...
    @property
    def DataViewSettings(self) -> DataViewSettingCollection: ...
    @DataSet.setter
    def DataSet(self, value: System.Void): ...
    @DataViewSettingCollectionString.setter
    def DataViewSettingCollectionString(self, value: System.Void): ...
    @property
    def ListChanged(self): ...
    @property
    def Disposed(self): ...

class DataViewRowState(enum.Enum):
    None_ = 0
    Unchanged = 2
    Added = 4
    Deleted = 8
    ModifiedCurrent = 16
    CurrentRows = 22
    ModifiedOriginal = 32
    OriginalRows = 42

class DataViewSetting(object):
    """    """
    @property
    def ApplyDefaultSort(self) -> bool: ...
    @property
    def DataViewManager(self) -> DataViewManager: ...
    @property
    def RowFilter(self) -> str: ...
    @property
    def RowStateFilter(self) -> DataViewRowState: ...
    @property
    def Sort(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...
    @ApplyDefaultSort.setter
    def ApplyDefaultSort(self, value: System.Void): ...
    @RowFilter.setter
    def RowFilter(self, value: System.Void): ...
    @RowStateFilter.setter
    def RowStateFilter(self, value: System.Void): ...
    @Sort.setter
    def Sort(self, value: System.Void): ...

class DataViewSettingCollection(object):
    """    """
    @overload
    def CopyTo(self, ar: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, ar: System.Array[DataViewSetting], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> DataViewSetting: ...
    @property
    def Item(self) -> DataViewSetting: ...
    @property
    def Item(self) -> DataViewSetting: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DBConcurrencyException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, dataRows: System.Array[DataRow]): ...
    @overload
    def CopyToRows(self, array: System.Array[DataRow]) -> None: ...
    @overload
    def CopyToRows(self, array: System.Array[DataRow], arrayIndex: int) -> None: ...
    @property
    def Row(self) -> DataRow: ...
    @property
    def RowCount(self) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @Row.setter
    def Row(self, value: System.Void): ...

class DbType(enum.Enum):
    AnsiString = 0
    Binary = 1
    Byte = 2
    Boolean = 3
    Currency = 4
    Date = 5
    DateTime = 6
    Decimal = 7
    Double = 8
    Guid = 9
    Int16 = 10
    Int32 = 11
    Int64 = 12
    Object = 13
    SByte = 14
    Single = 15
    String = 16
    Time = 17
    UInt16 = 18
    UInt32 = 19
    UInt64 = 20
    VarNumeric = 21
    AnsiStringFixedLength = 22
    StringFixedLength = 23
    Xml = 25
    DateTime2 = 26
    DateTimeOffset = 27

class EnumerableRowCollection(object):
    """    """

class EnumerableRowCollection(EnumerableRowCollection):
    """    EnumerableRowCollection[TRow]
    """
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class EnumerableRowCollectionExtensions(object):
    """    """
    @overload
    @staticmethod
    def Cast(source: EnumerableRowCollection) -> EnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderBy(source: EnumerableRowCollection, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderBy(source: EnumerableRowCollection, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderByDescending(source: EnumerableRowCollection, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderByDescending(source: EnumerableRowCollection, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def Select(source: EnumerableRowCollection, selector: System.Func) -> EnumerableRowCollection: ...
    @overload
    @staticmethod
    def ThenBy(source: OrderedEnumerableRowCollection, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def ThenBy(source: OrderedEnumerableRowCollection, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def ThenByDescending(source: OrderedEnumerableRowCollection, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def ThenByDescending(source: OrderedEnumerableRowCollection, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def Where(source: EnumerableRowCollection, predicate: System.Func) -> EnumerableRowCollection: ...

class FillErrorEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataTable: DataTable, values: System.System.Array[object]): ...
    @property
    def Continue(self) -> bool: ...
    @property
    def DataTable(self) -> DataTable: ...
    @property
    def Errors(self) -> System.Exception: ...
    @property
    def Values(self) -> System.System.Array[object]: ...
    @Continue.setter
    def Continue(self, value: System.Void): ...
    @Errors.setter
    def Errors(self, value: System.Void): ...

class FillErrorEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: FillErrorEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: FillErrorEventArgs) -> None: ...

class ForeignKeyConstraint(Constraint):
    """    """
    @overload
    def __init__(self, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn]): ...
    @overload
    def __init__(self, constraintName: str, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, constraintName: str, parentColumns: System.Array[DataColumn], childColumns: System.Array[DataColumn]): ...
    @overload
    def __init__(self, constraintName: str, parentTableName: str, parentColumnNames: System.System.Array[str], childColumnNames: System.System.Array[str], acceptRejectRule: AcceptRejectRule, deleteRule: Rule, updateRule: Rule): ...
    @overload
    def __init__(self, constraintName: str, parentTableName: str, parentTableNamespace: str, parentColumnNames: System.System.Array[str], childColumnNames: System.System.Array[str], acceptRejectRule: AcceptRejectRule, deleteRule: Rule, updateRule: Rule): ...
    @overload
    def Equals(self, key: object) -> bool: ...
    @property
    def AcceptRejectRule(self) -> AcceptRejectRule: ...
    @property
    def Columns(self) -> System.Array[DataColumn]: ...
    @property
    def DeleteRule(self) -> Rule: ...
    @property
    def RelatedColumns(self) -> System.Array[DataColumn]: ...
    @property
    def RelatedTable(self) -> DataTable: ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def UpdateRule(self) -> Rule: ...
    @overload
    def GetHashCode() -> int: ...
    @AcceptRejectRule.setter
    def AcceptRejectRule(self, value: System.Void): ...
    @DeleteRule.setter
    def DeleteRule(self, value: System.Void): ...
    @UpdateRule.setter
    def UpdateRule(self, value: System.Void): ...

class IColumnMapping:
    """    """
    @property
    def DataSetColumn(self) -> str: ...
    @property
    def SourceColumn(self) -> str: ...
    @DataSetColumn.setter
    def DataSetColumn(self, value: System.Void): ...
    @SourceColumn.setter
    def SourceColumn(self, value: System.Void): ...

class IColumnMappingCollection:
    """    """
    @overload
    def Add(self, sourceColumnName: str, dataSetColumnName: str) -> IColumnMapping: ...
    @overload
    def Contains(self, sourceColumnName: str) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetByDataSetColumn(self, dataSetColumnName: str) -> IColumnMapping: ...
    @overload
    def IndexOf(self, sourceColumnName: str) -> int: ...
    @overload
    def RemoveAt(self, sourceColumnName: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class IDataAdapter:
    """    """
    @overload
    def Fill(self, dataSet: DataSet) -> int: ...
    @overload
    def FillSchema(self, dataSet: DataSet, schemaType: SchemaType) -> System.Array[DataTable]: ...
    @property
    def MissingMappingAction(self) -> MissingMappingAction: ...
    @property
    def MissingSchemaAction(self) -> MissingSchemaAction: ...
    @property
    def TableMappings(self) -> ITableMappingCollection: ...
    @overload
    def GetFillParameters() -> System.Array[IDataParameter]: ...
    @MissingMappingAction.setter
    def MissingMappingAction(self, value: System.Void): ...
    @MissingSchemaAction.setter
    def MissingSchemaAction(self, value: System.Void): ...
    @overload
    def Update(self, dataSet: DataSet) -> int: ...

class IDataParameter:
    """    """
    @property
    def DbType(self) -> DbType: ...
    @property
    def Direction(self) -> ParameterDirection: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def SourceColumn(self) -> str: ...
    @property
    def SourceVersion(self) -> DataRowVersion: ...
    @property
    def Value(self) -> object: ...
    @DbType.setter
    def DbType(self, value: System.Void): ...
    @Direction.setter
    def Direction(self, value: System.Void): ...
    @ParameterName.setter
    def ParameterName(self, value: System.Void): ...
    @SourceColumn.setter
    def SourceColumn(self, value: System.Void): ...
    @SourceVersion.setter
    def SourceVersion(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class IDataParameterCollection:
    """    """
    @overload
    def Contains(self, parameterName: str) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def IndexOf(self, parameterName: str) -> int: ...
    @overload
    def RemoveAt(self, parameterName: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class IDataReader:
    """    """
    @overload
    def Close() -> None: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def RecordsAffected(self) -> int: ...
    @overload
    def GetSchemaTable() -> DataTable: ...
    @overload
    def NextResult() -> bool: ...
    @overload
    def Read() -> bool: ...

class IDataRecord:
    """    """
    @property
    def FieldCount(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetBoolean(self, i: int) -> bool: ...
    @overload
    def GetByte(self, i: int) -> System.Byte: ...
    @overload
    def GetBytes(self, i: int, fieldOffset: System.Int64, buffer: System.System.Array[System.Byte], bufferoffset: int, length: int) -> System.Int64: ...
    @overload
    def GetChar(self, i: int) -> System.Char: ...
    @overload
    def GetChars(self, i: int, fieldoffset: System.Int64, buffer: System.System.Array[System.Char], bufferoffset: int, length: int) -> System.Int64: ...
    @overload
    def GetData(self, i: int) -> IDataReader: ...
    @overload
    def GetDataTypeName(self, i: int) -> str: ...
    @overload
    def GetDateTime(self, i: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, i: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, i: int) -> float: ...
    @overload
    def GetFieldType(self, i: int) -> System.Type: ...
    @overload
    def GetFloat(self, i: int) -> System.Single: ...
    @overload
    def GetGuid(self, i: int) -> System.Guid: ...
    @overload
    def GetInt16(self, i: int) -> System.Int16: ...
    @overload
    def GetInt32(self, i: int) -> int: ...
    @overload
    def GetInt64(self, i: int) -> System.Int64: ...
    @overload
    def GetName(self, i: int) -> str: ...
    @overload
    def GetOrdinal(self, name: str) -> int: ...
    @overload
    def GetString(self, i: int) -> str: ...
    @overload
    def GetValue(self, i: int) -> object: ...
    @overload
    def GetValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def IsDBNull(self, i: int) -> bool: ...

class IDbCommand:
    """    """
    @overload
    def Cancel() -> None: ...
    @overload
    def CreateParameter() -> IDbDataParameter: ...
    @overload
    def ExecuteNonQuery() -> int: ...
    @overload
    def ExecuteReader() -> IDataReader: ...
    @overload
    def ExecuteReader(self, behavior: CommandBehavior) -> IDataReader: ...
    @overload
    def ExecuteScalar() -> object: ...
    @property
    def CommandText(self) -> str: ...
    @property
    def CommandTimeout(self) -> int: ...
    @property
    def CommandType(self) -> CommandType: ...
    @property
    def Connection(self) -> IDbConnection: ...
    @property
    def Parameters(self) -> IDataParameterCollection: ...
    @property
    def Transaction(self) -> IDbTransaction: ...
    @property
    def UpdatedRowSource(self) -> UpdateRowSource: ...
    @overload
    def Prepare() -> None: ...
    @CommandText.setter
    def CommandText(self, value: System.Void): ...
    @CommandTimeout.setter
    def CommandTimeout(self, value: System.Void): ...
    @CommandType.setter
    def CommandType(self, value: System.Void): ...
    @Connection.setter
    def Connection(self, value: System.Void): ...
    @Transaction.setter
    def Transaction(self, value: System.Void): ...
    @UpdatedRowSource.setter
    def UpdatedRowSource(self, value: System.Void): ...

class IDbConnection:
    """    """
    @overload
    def BeginTransaction() -> IDbTransaction: ...
    @overload
    def BeginTransaction(self, il: IsolationLevel) -> IDbTransaction: ...
    @overload
    def ChangeDatabase(self, databaseName: str) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def CreateCommand() -> IDbCommand: ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def ConnectionTimeout(self) -> int: ...
    @property
    def Database(self) -> str: ...
    @property
    def State(self) -> ConnectionState: ...
    @overload
    def Open() -> None: ...
    @ConnectionString.setter
    def ConnectionString(self, value: System.Void): ...

class IDbDataAdapter:
    """    """
    @property
    def DeleteCommand(self) -> IDbCommand: ...
    @property
    def InsertCommand(self) -> IDbCommand: ...
    @property
    def SelectCommand(self) -> IDbCommand: ...
    @property
    def UpdateCommand(self) -> IDbCommand: ...
    @DeleteCommand.setter
    def DeleteCommand(self, value: System.Void): ...
    @InsertCommand.setter
    def InsertCommand(self, value: System.Void): ...
    @SelectCommand.setter
    def SelectCommand(self, value: System.Void): ...
    @UpdateCommand.setter
    def UpdateCommand(self, value: System.Void): ...

class IDbDataParameter:
    """    """
    @property
    def Precision(self) -> System.Byte: ...
    @property
    def Scale(self) -> System.Byte: ...
    @property
    def Size(self) -> int: ...
    @Precision.setter
    def Precision(self, value: System.Void): ...
    @Scale.setter
    def Scale(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...

class IDbTransaction:
    """    """
    @overload
    def Commit() -> None: ...
    @property
    def Connection(self) -> IDbConnection: ...
    @property
    def IsolationLevel(self) -> IsolationLevel: ...
    @overload
    def Rollback() -> None: ...

class IsolationLevel(enum.Enum):
    Chaos = 16
    ReadUncommitted = 256
    ReadCommitted = 4096
    RepeatableRead = 65536
    Serializable = 1048576
    Snapshot = 16777216
    Unspecified = -1

class ITableMapping:
    """    """
    @property
    def ColumnMappings(self) -> IColumnMappingCollection: ...
    @property
    def DataSetTable(self) -> str: ...
    @property
    def SourceTable(self) -> str: ...
    @DataSetTable.setter
    def DataSetTable(self, value: System.Void): ...
    @SourceTable.setter
    def SourceTable(self, value: System.Void): ...

class ITableMappingCollection:
    """    """
    @overload
    def Add(self, sourceTableName: str, dataSetTableName: str) -> ITableMapping: ...
    @overload
    def Contains(self, sourceTableName: str) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetByDataSetTable(self, dataSetTableName: str) -> ITableMapping: ...
    @overload
    def IndexOf(self, sourceTableName: str) -> int: ...
    @overload
    def RemoveAt(self, sourceTableName: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class KeyRestrictionBehavior(enum.Enum):
    AllowOnly = 0
    PreventUsage = 1

class LoadOption(enum.Enum):
    OverwriteChanges = 1
    PreserveChanges = 2
    Upsert = 3

class MappingType(enum.Enum):
    Element = 1
    Attribute = 2
    SimpleContent = 3
    Hidden = 4

class MergeFailedEventArgs(System.EventArgs):
    """    """
    def __init__(self, table: DataTable, conflict: str): ...
    @property
    def Conflict(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...

class MergeFailedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: MergeFailedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: MergeFailedEventArgs) -> None: ...

class MissingMappingAction(enum.Enum):
    Passthrough = 1
    Ignore = 2
    Error = 3

class MissingSchemaAction(enum.Enum):
    Add = 1
    Ignore = 2
    Error = 3
    AddWithKey = 4

class OrderedEnumerableRowCollection(EnumerableRowCollection):
    """    OrderedEnumerableRowCollection[TRow]
    """

class ParameterDirection(enum.Enum):
    Input = 1
    Output = 2
    InputOutput = 3
    ReturnValue = 6

class PropertyCollection(Collections.Hashtable):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...

class StatementCompletedEventArgs(System.EventArgs):
    """    """
    def __init__(self, recordCount: int): ...
    @property
    def RecordCount(self) -> int: ...

class StatementCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: StatementCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: StatementCompletedEventArgs) -> None: ...

class Rule(enum.Enum):
    None_ = 0
    Cascade = 1
    SetNull = 2
    SetDefault = 3

class SchemaSerializationMode(enum.Enum):
    IncludeSchema = 1
    ExcludeSchema = 2

class SchemaType(enum.Enum):
    Source = 1
    Mapped = 2

class SqlDbType(enum.Enum):
    BigInt = 0
    Binary = 1
    Bit = 2
    Char = 3
    DateTime = 4
    Decimal = 5
    Float = 6
    Image = 7
    Int = 8
    Money = 9
    NChar = 10
    NText = 11
    NVarChar = 12
    Real = 13
    UniqueIdentifier = 14
    SmallDateTime = 15
    SmallInt = 16
    SmallMoney = 17
    Text = 18
    Timestamp = 19
    TinyInt = 20
    VarBinary = 21
    VarChar = 22
    Variant = 23
    Xml = 25
    Udt = 29
    Structured = 30
    Date = 31
    Time = 32
    DateTime2 = 33
    DateTimeOffset = 34

class StateChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, originalState: ConnectionState, currentState: ConnectionState): ...
    @property
    def CurrentState(self) -> ConnectionState: ...
    @property
    def OriginalState(self) -> ConnectionState: ...

class StateChangeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: StateChangeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: StateChangeEventArgs) -> None: ...

class StatementType(enum.Enum):
    Select = 0
    Insert = 1
    Update = 2
    Delete = 3
    Batch = 4

class StrongTypingException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, s: str, innerException: System.Exception): ...

class TypedTableBase(DataTable):
    """    TypedTableBase[T]
    """
    @overload
    def Cast() -> EnumerableRowCollection: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @property
    def ColumnChanging(self): ...
    @property
    def ColumnChanged(self): ...
    @property
    def Initialized(self): ...
    @property
    def RowChanged(self): ...
    @property
    def RowChanging(self): ...
    @property
    def RowDeleting(self): ...
    @property
    def RowDeleted(self): ...
    @property
    def TableClearing(self): ...
    @property
    def TableCleared(self): ...
    @property
    def TableNewRow(self): ...
    @property
    def Disposed(self): ...

class TypedTableBaseExtensions(object):
    """    """
    @overload
    @staticmethod
    def AsEnumerable(source: TypedTableBase) -> EnumerableRowCollection: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: TypedTableBase, index: int) -> TRow: ...
    @overload
    @staticmethod
    def OrderBy(source: TypedTableBase, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderBy(source: TypedTableBase, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderByDescending(source: TypedTableBase, keySelector: System.Func) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def OrderByDescending(source: TypedTableBase, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    @staticmethod
    def Select(source: TypedTableBase, selector: System.Func) -> EnumerableRowCollection: ...
    @overload
    @staticmethod
    def Where(source: TypedTableBase, predicate: System.Func) -> EnumerableRowCollection: ...

class UniqueConstraint(Constraint):
    """    """
    @overload
    def __init__(self, column: DataColumn): ...
    @overload
    def __init__(self, columns: System.Array[DataColumn]): ...
    @overload
    def __init__(self, name: str, column: DataColumn): ...
    @overload
    def __init__(self, name: str, columns: System.Array[DataColumn]): ...
    @overload
    def __init__(self, column: DataColumn, isPrimaryKey: bool): ...
    @overload
    def __init__(self, columns: System.Array[DataColumn], isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, columnNames: System.System.Array[str], isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, column: DataColumn, isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, columns: System.Array[DataColumn], isPrimaryKey: bool): ...
    @overload
    def Equals(self, key2: object) -> bool: ...
    @property
    def Columns(self) -> System.Array[DataColumn]: ...
    @property
    def IsPrimaryKey(self) -> bool: ...
    @property
    def Table(self) -> DataTable: ...
    @overload
    def GetHashCode() -> int: ...

class UpdateRowSource(enum.Enum):
    None_ = 0
    OutputParameters = 1
    FirstReturnedRecord = 2
    Both = 3

class InvalidExpressionException(DataException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EvaluateException(InvalidExpressionException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SyntaxErrorException(InvalidExpressionException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

# endregion
