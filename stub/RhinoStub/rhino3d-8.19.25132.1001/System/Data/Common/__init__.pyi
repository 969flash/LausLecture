"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CatalogLocation", "DataAdapter", "DataColumnMapping", "DataColumnMappingCollection", "DataTableMapping", "DataTableMappingCollection", "DbBatch", "DbBatchCommand", "DbBatchCommandCollection", "DbColumn", "DbCommand", "DbCommandBuilder", "DbConnection", "DbConnectionStringBuilder", "DbDataAdapter", "DbDataReader", "DbDataReaderExtensions", "DbDataRecord", "DbDataSource", "DbDataSourceEnumerator", "DbEnumerator", "DbException", "DbMetaDataCollectionNames", "DbMetaDataColumnNames", "DbParameter", "DbParameterCollection", "DbProviderFactory", "DbProviderFactories", "DbProviderSpecificTypePropertyAttribute", "DbTransaction", "GroupByBehavior", "IDbColumnSchemaGenerator", "IdentifierCase", "RowUpdatedEventArgs", "RowUpdatingEventArgs", "SchemaTableColumn", "SchemaTableOptionalColumn", "SupportedJoinOperators"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Data
from System import IO
from System import Text
from System import Threading
from System import Transactions
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = []
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: System.Security.Permissions, Version=7.0.0.0

# endregion

# region: System.Data.Common, Version=7.0.0.0

class CatalogLocation(enum.Enum):
    Start = 1
    End = 2

class DataAdapter(ComponentModel.Component):
    """    """
    @overload
    def Fill(self, dataSet: Data.DataSet) -> int: ...
    @overload
    def FillSchema(self, dataSet: Data.DataSet, schemaType: Data.SchemaType) -> Data.System.Array[Data.DataTable]: ...
    @property
    def AcceptChangesDuringFill(self) -> bool: ...
    @property
    def AcceptChangesDuringUpdate(self) -> bool: ...
    @property
    def ContinueUpdateOnError(self) -> bool: ...
    @property
    def FillLoadOption(self) -> Data.LoadOption: ...
    @property
    def MissingMappingAction(self) -> Data.MissingMappingAction: ...
    @property
    def MissingSchemaAction(self) -> Data.MissingSchemaAction: ...
    @property
    def ReturnProviderSpecificTypes(self) -> bool: ...
    @property
    def TableMappings(self) -> DataTableMappingCollection: ...
    @overload
    def GetFillParameters() -> Data.System.Array[Data.IDataParameter]: ...
    @overload
    def ResetFillLoadOption() -> None: ...
    @AcceptChangesDuringFill.setter
    def AcceptChangesDuringFill(self, value: System.Void): ...
    @AcceptChangesDuringUpdate.setter
    def AcceptChangesDuringUpdate(self, value: System.Void): ...
    @ContinueUpdateOnError.setter
    def ContinueUpdateOnError(self, value: System.Void): ...
    @FillLoadOption.setter
    def FillLoadOption(self, value: System.Void): ...
    @MissingMappingAction.setter
    def MissingMappingAction(self, value: System.Void): ...
    @MissingSchemaAction.setter
    def MissingSchemaAction(self, value: System.Void): ...
    @ReturnProviderSpecificTypes.setter
    def ReturnProviderSpecificTypes(self, value: System.Void): ...
    @overload
    def ShouldSerializeAcceptChangesDuringFill() -> bool: ...
    @overload
    def ShouldSerializeFillLoadOption() -> bool: ...
    @overload
    def Update(self, dataSet: Data.DataSet) -> int: ...
    @property
    def FillError(self): ...
    @property
    def Disposed(self): ...

class DataColumnMapping(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sourceColumn: str, dataSetColumn: str): ...
    @property
    def DataSetColumn(self) -> str: ...
    @property
    def SourceColumn(self) -> str: ...
    @overload
    def GetDataColumnBySchemaAction(self, dataTable: Data.DataTable, dataType: System.Type, schemaAction: Data.MissingSchemaAction) -> Data.DataColumn: ...
    @overload
    @staticmethod
    def GetDataColumnBySchemaAction(sourceColumn: str, dataSetColumn: str, dataTable: Data.DataTable, dataType: System.Type, schemaAction: Data.MissingSchemaAction) -> Data.DataColumn: ...
    @DataSetColumn.setter
    def DataSetColumn(self, value: System.Void): ...
    @SourceColumn.setter
    def SourceColumn(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataColumnMappingCollection(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: object) -> int: ...
    @overload
    def Add(self, sourceColumn: str, dataSetColumn: str) -> DataColumnMapping: ...
    @overload
    def AddRange(self, values: System.Array) -> None: ...
    @overload
    def AddRange(self, values: System.Array[DataColumnMapping]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataColumnMapping], index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DataColumnMapping: ...
    @property
    def Item(self) -> DataColumnMapping: ...
    @overload
    def GetByDataSetColumn(self, value: str) -> DataColumnMapping: ...
    @overload
    @staticmethod
    def GetColumnMappingBySchemaAction(columnMappings: DataColumnMappingCollection, sourceColumn: str, mappingAction: Data.MissingMappingAction) -> DataColumnMapping: ...
    @overload
    @staticmethod
    def GetDataColumn(columnMappings: DataColumnMappingCollection, sourceColumn: str, dataType: System.Type, dataTable: Data.DataTable, mappingAction: Data.MissingMappingAction, schemaAction: Data.MissingSchemaAction) -> Data.DataColumn: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, sourceColumn: str) -> int: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def IndexOfDataSetColumn(self, dataSetColumn: str) -> int: ...
    @overload
    def Insert(self, index: int, value: object) -> None: ...
    @overload
    def Insert(self, index: int, value: DataColumnMapping) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def Remove(self, value: DataColumnMapping) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveAt(self, sourceColumn: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DataTableMapping(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sourceTable: str, dataSetTable: str): ...
    @overload
    def __init__(self, sourceTable: str, dataSetTable: str, columnMappings: System.Array[DataColumnMapping]): ...
    @property
    def ColumnMappings(self) -> DataColumnMappingCollection: ...
    @property
    def DataSetTable(self) -> str: ...
    @property
    def SourceTable(self) -> str: ...
    @overload
    def GetColumnMappingBySchemaAction(self, sourceColumn: str, mappingAction: Data.MissingMappingAction) -> DataColumnMapping: ...
    @overload
    def GetDataColumn(self, sourceColumn: str, dataType: System.Type, dataTable: Data.DataTable, mappingAction: Data.MissingMappingAction, schemaAction: Data.MissingSchemaAction) -> Data.DataColumn: ...
    @overload
    def GetDataTableBySchemaAction(self, dataSet: Data.DataSet, schemaAction: Data.MissingSchemaAction) -> Data.DataTable: ...
    @DataSetTable.setter
    def DataSetTable(self, value: System.Void): ...
    @SourceTable.setter
    def SourceTable(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataTableMappingCollection(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: object) -> int: ...
    @overload
    def Add(self, sourceTable: str, dataSetTable: str) -> DataTableMapping: ...
    @overload
    def AddRange(self, values: System.Array[DataTableMapping]) -> None: ...
    @overload
    def AddRange(self, values: System.Array) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[DataTableMapping], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DataTableMapping: ...
    @property
    def Item(self) -> DataTableMapping: ...
    @overload
    def GetByDataSetTable(self, dataSetTable: str) -> DataTableMapping: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    @staticmethod
    def GetTableMappingBySchemaAction(tableMappings: DataTableMappingCollection, sourceTable: str, dataSetTable: str, mappingAction: Data.MissingMappingAction) -> DataTableMapping: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def IndexOf(self, sourceTable: str) -> int: ...
    @overload
    def IndexOfDataSetTable(self, dataSetTable: str) -> int: ...
    @overload
    def Insert(self, index: int, value: object) -> None: ...
    @overload
    def Insert(self, index: int, value: DataTableMapping) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def Remove(self, value: DataTableMapping) -> None: ...
    @overload
    def RemoveAt(self, sourceTable: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DbBatch(object):
    """    """
    @overload
    def Cancel() -> None: ...
    @overload
    def CreateBatchCommand() -> DbBatchCommand: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def ExecuteNonQuery() -> int: ...
    @overload
    def ExecuteNonQueryAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteReader(self, behavior: Data.CommandBehavior) -> DbDataReader: ...
    @overload
    def ExecuteReaderAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteReaderAsync(self, behavior: Data.CommandBehavior, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteScalar() -> object: ...
    @overload
    def ExecuteScalarAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BatchCommands(self) -> DbBatchCommandCollection: ...
    @property
    def Connection(self) -> DbConnection: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def Transaction(self) -> DbTransaction: ...
    @overload
    def Prepare() -> None: ...
    @overload
    def PrepareAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @Connection.setter
    def Connection(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @Transaction.setter
    def Transaction(self, value: System.Void): ...

class DbBatchCommand(object):
    """    """
    @property
    def CommandText(self) -> str: ...
    @property
    def CommandType(self) -> Data.CommandType: ...
    @property
    def Parameters(self) -> DbParameterCollection: ...
    @property
    def RecordsAffected(self) -> int: ...
    @CommandText.setter
    def CommandText(self, value: System.Void): ...
    @CommandType.setter
    def CommandType(self, value: System.Void): ...

class DbBatchCommandCollection(object):
    """    """
    @overload
    def Add(self, item: DbBatchCommand) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: DbBatchCommand) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DbBatchCommand], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> DbBatchCommand: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: DbBatchCommand) -> int: ...
    @overload
    def Insert(self, index: int, item: DbBatchCommand) -> None: ...
    @overload
    def Remove(self, item: DbBatchCommand) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DbColumn(object):
    """    """
    @property
    def AllowDBNull(self) -> System.Nullable: ...
    @property
    def BaseCatalogName(self) -> str: ...
    @property
    def BaseColumnName(self) -> str: ...
    @property
    def BaseSchemaName(self) -> str: ...
    @property
    def BaseServerName(self) -> str: ...
    @property
    def BaseTableName(self) -> str: ...
    @property
    def ColumnName(self) -> str: ...
    @property
    def ColumnOrdinal(self) -> System.Nullable: ...
    @property
    def ColumnSize(self) -> System.Nullable: ...
    @property
    def DataType(self) -> System.Type: ...
    @property
    def DataTypeName(self) -> str: ...
    @property
    def IsAliased(self) -> System.Nullable: ...
    @property
    def IsAutoIncrement(self) -> System.Nullable: ...
    @property
    def IsExpression(self) -> System.Nullable: ...
    @property
    def IsHidden(self) -> System.Nullable: ...
    @property
    def IsIdentity(self) -> System.Nullable: ...
    @property
    def IsKey(self) -> System.Nullable: ...
    @property
    def IsLong(self) -> System.Nullable: ...
    @property
    def IsReadOnly(self) -> System.Nullable: ...
    @property
    def IsUnique(self) -> System.Nullable: ...
    @property
    def Item(self) -> object: ...
    @property
    def NumericPrecision(self) -> System.Nullable: ...
    @property
    def NumericScale(self) -> System.Nullable: ...
    @property
    def UdtAssemblyQualifiedName(self) -> str: ...

class DbCommand(ComponentModel.Component):
    """    """
    @overload
    def Cancel() -> None: ...
    @overload
    def CreateParameter() -> DbParameter: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def ExecuteNonQuery() -> int: ...
    @overload
    def ExecuteNonQueryAsync() -> Tasks.Task: ...
    @overload
    def ExecuteNonQueryAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteReader() -> DbDataReader: ...
    @overload
    def ExecuteReader(self, behavior: Data.CommandBehavior) -> DbDataReader: ...
    @overload
    def ExecuteReaderAsync() -> Tasks.Task: ...
    @overload
    def ExecuteReaderAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteReaderAsync(self, behavior: Data.CommandBehavior) -> Tasks.Task: ...
    @overload
    def ExecuteReaderAsync(self, behavior: Data.CommandBehavior, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ExecuteScalar() -> object: ...
    @overload
    def ExecuteScalarAsync() -> Tasks.Task: ...
    @overload
    def ExecuteScalarAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CommandText(self) -> str: ...
    @property
    def CommandTimeout(self) -> int: ...
    @property
    def CommandType(self) -> Data.CommandType: ...
    @property
    def Connection(self) -> DbConnection: ...
    @property
    def DesignTimeVisible(self) -> bool: ...
    @property
    def Parameters(self) -> DbParameterCollection: ...
    @property
    def Transaction(self) -> DbTransaction: ...
    @property
    def UpdatedRowSource(self) -> Data.UpdateRowSource: ...
    @overload
    def Prepare() -> None: ...
    @overload
    def PrepareAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @CommandText.setter
    def CommandText(self, value: System.Void): ...
    @CommandTimeout.setter
    def CommandTimeout(self, value: System.Void): ...
    @CommandType.setter
    def CommandType(self, value: System.Void): ...
    @Connection.setter
    def Connection(self, value: System.Void): ...
    @DesignTimeVisible.setter
    def DesignTimeVisible(self, value: System.Void): ...
    @Transaction.setter
    def Transaction(self, value: System.Void): ...
    @UpdatedRowSource.setter
    def UpdatedRowSource(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class DbCommandBuilder(ComponentModel.Component):
    """    """
    @property
    def CatalogLocation(self) -> CatalogLocation: ...
    @property
    def CatalogSeparator(self) -> str: ...
    @property
    def ConflictOption(self) -> Data.ConflictOption: ...
    @property
    def DataAdapter(self) -> DbDataAdapter: ...
    @property
    def QuotePrefix(self) -> str: ...
    @property
    def QuoteSuffix(self) -> str: ...
    @property
    def SchemaSeparator(self) -> str: ...
    @property
    def SetAllValues(self) -> bool: ...
    @overload
    def GetDeleteCommand() -> DbCommand: ...
    @overload
    def GetDeleteCommand(self, useColumnsForParameterNames: bool) -> DbCommand: ...
    @overload
    def GetInsertCommand() -> DbCommand: ...
    @overload
    def GetInsertCommand(self, useColumnsForParameterNames: bool) -> DbCommand: ...
    @overload
    def GetUpdateCommand() -> DbCommand: ...
    @overload
    def GetUpdateCommand(self, useColumnsForParameterNames: bool) -> DbCommand: ...
    @overload
    def QuoteIdentifier(self, unquotedIdentifier: str) -> str: ...
    @overload
    def RefreshSchema() -> None: ...
    @CatalogLocation.setter
    def CatalogLocation(self, value: System.Void): ...
    @CatalogSeparator.setter
    def CatalogSeparator(self, value: System.Void): ...
    @ConflictOption.setter
    def ConflictOption(self, value: System.Void): ...
    @DataAdapter.setter
    def DataAdapter(self, value: System.Void): ...
    @QuotePrefix.setter
    def QuotePrefix(self, value: System.Void): ...
    @QuoteSuffix.setter
    def QuoteSuffix(self, value: System.Void): ...
    @SchemaSeparator.setter
    def SchemaSeparator(self, value: System.Void): ...
    @SetAllValues.setter
    def SetAllValues(self, value: System.Void): ...
    @overload
    def UnquoteIdentifier(self, quotedIdentifier: str) -> str: ...
    @property
    def Disposed(self): ...

class DbConnection(ComponentModel.Component):
    """    """
    @overload
    def BeginTransaction() -> DbTransaction: ...
    @overload
    def BeginTransaction(self, isolationLevel: Data.IsolationLevel) -> DbTransaction: ...
    @overload
    def BeginTransactionAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def BeginTransactionAsync(self, isolationLevel: Data.IsolationLevel, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ChangeDatabase(self, databaseName: str) -> None: ...
    @overload
    def ChangeDatabaseAsync(self, databaseName: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Close() -> None: ...
    @overload
    def CloseAsync() -> Tasks.Task: ...
    @overload
    def CreateBatch() -> DbBatch: ...
    @overload
    def CreateCommand() -> DbCommand: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EnlistTransaction(self, transaction: Transactions.Transaction) -> None: ...
    @property
    def CanCreateBatch(self) -> bool: ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def ConnectionTimeout(self) -> int: ...
    @property
    def Database(self) -> str: ...
    @property
    def DataSource(self) -> str: ...
    @property
    def ServerVersion(self) -> str: ...
    @property
    def State(self) -> Data.ConnectionState: ...
    @overload
    def GetSchema() -> Data.DataTable: ...
    @overload
    def GetSchema(self, collectionName: str) -> Data.DataTable: ...
    @overload
    def GetSchema(self, collectionName: str, restrictionValues: System.System.Array[str]) -> Data.DataTable: ...
    @overload
    def GetSchemaAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetSchemaAsync(self, collectionName: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetSchemaAsync(self, collectionName: str, restrictionValues: System.System.Array[str], cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Open() -> None: ...
    @overload
    def OpenAsync() -> Tasks.Task: ...
    @overload
    def OpenAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @ConnectionString.setter
    def ConnectionString(self, value: System.Void): ...
    @property
    def StateChange(self): ...
    @property
    def Disposed(self): ...

class DbConnectionStringBuilder(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, useOdbcRules: bool): ...
    @overload
    def Add(self, keyword: str, value: object) -> None: ...
    @overload
    @staticmethod
    def AppendKeyValuePair(builder: Text.StringBuilder, keyword: str, value: str) -> None: ...
    @overload
    @staticmethod
    def AppendKeyValuePair(builder: Text.StringBuilder, keyword: str, value: str, useOdbcRules: bool) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, keyword: str) -> bool: ...
    @overload
    def EquivalentTo(self, connectionStringBuilder: DbConnectionStringBuilder) -> bool: ...
    @property
    def BrowsableConnectionString(self) -> bool: ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def Remove(self, keyword: str) -> bool: ...
    @BrowsableConnectionString.setter
    def BrowsableConnectionString(self, value: System.Void): ...
    @ConnectionString.setter
    def ConnectionString(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def ShouldSerialize(self, keyword: str) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryGetValue(self, keyword: str) -> (bool, object): ...

class DbDataAdapter(DataAdapter):
    """    """
    @property
    def DefaultSourceTableName(self) -> str: ...
    @overload
    def Fill(self, dataTable: Data.DataTable) -> int: ...
    @overload
    def Fill(self, dataSet: Data.DataSet) -> int: ...
    @overload
    def Fill(self, dataSet: Data.DataSet, srcTable: str) -> int: ...
    @overload
    def Fill(self, startRecord: int, maxRecords: int, dataTables: Data.System.Array[Data.DataTable]) -> int: ...
    @overload
    def Fill(self, dataSet: Data.DataSet, startRecord: int, maxRecords: int, srcTable: str) -> int: ...
    @overload
    def FillSchema(self, dataTable: Data.DataTable, schemaType: Data.SchemaType) -> Data.DataTable: ...
    @overload
    def FillSchema(self, dataSet: Data.DataSet, schemaType: Data.SchemaType) -> Data.System.Array[Data.DataTable]: ...
    @overload
    def FillSchema(self, dataSet: Data.DataSet, schemaType: Data.SchemaType, srcTable: str) -> Data.System.Array[Data.DataTable]: ...
    @property
    def DeleteCommand(self) -> DbCommand: ...
    @property
    def InsertCommand(self) -> DbCommand: ...
    @property
    def SelectCommand(self) -> DbCommand: ...
    @property
    def UpdateBatchSize(self) -> int: ...
    @property
    def UpdateCommand(self) -> DbCommand: ...
    @overload
    def GetFillParameters() -> Data.System.Array[Data.IDataParameter]: ...
    @DeleteCommand.setter
    def DeleteCommand(self, value: System.Void): ...
    @InsertCommand.setter
    def InsertCommand(self, value: System.Void): ...
    @SelectCommand.setter
    def SelectCommand(self, value: System.Void): ...
    @UpdateBatchSize.setter
    def UpdateBatchSize(self, value: System.Void): ...
    @UpdateCommand.setter
    def UpdateCommand(self, value: System.Void): ...
    @overload
    def Update(self, dataSet: Data.DataSet) -> int: ...
    @overload
    def Update(self, dataTable: Data.DataTable) -> int: ...
    @overload
    def Update(self, dataRows: Data.System.Array[Data.DataRow]) -> int: ...
    @overload
    def Update(self, dataSet: Data.DataSet, srcTable: str) -> int: ...
    @property
    def FillError(self): ...
    @property
    def Disposed(self): ...

class DbDataReader(System.MarshalByRefObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CloseAsync() -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @property
    def Depth(self) -> int: ...
    @property
    def FieldCount(self) -> int: ...
    @property
    def HasRows(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def RecordsAffected(self) -> int: ...
    @property
    def VisibleFieldCount(self) -> int: ...
    @overload
    def GetBoolean(self, ordinal: int) -> bool: ...
    @overload
    def GetByte(self, ordinal: int) -> System.Byte: ...
    @overload
    def GetBytes(self, ordinal: int, dataOffset: System.Int64, buffer: System.System.Array[System.Byte], bufferOffset: int, length: int) -> System.Int64: ...
    @overload
    def GetChar(self, ordinal: int) -> System.Char: ...
    @overload
    def GetChars(self, ordinal: int, dataOffset: System.Int64, buffer: System.System.Array[System.Char], bufferOffset: int, length: int) -> System.Int64: ...
    @overload
    def GetColumnSchemaAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetData(self, ordinal: int) -> DbDataReader: ...
    @overload
    def GetDataTypeName(self, ordinal: int) -> str: ...
    @overload
    def GetDateTime(self, ordinal: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, ordinal: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, ordinal: int) -> float: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetFieldType(self, ordinal: int) -> System.Type: ...
    @overload
    def GetFieldValue(self, ordinal: int) -> T: ...
    @overload
    def GetFieldValueAsync(self, ordinal: int) -> Tasks.Task: ...
    @overload
    def GetFieldValueAsync(self, ordinal: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetFloat(self, ordinal: int) -> System.Single: ...
    @overload
    def GetGuid(self, ordinal: int) -> System.Guid: ...
    @overload
    def GetInt16(self, ordinal: int) -> System.Int16: ...
    @overload
    def GetInt32(self, ordinal: int) -> int: ...
    @overload
    def GetInt64(self, ordinal: int) -> System.Int64: ...
    @overload
    def GetName(self, ordinal: int) -> str: ...
    @overload
    def GetOrdinal(self, name: str) -> int: ...
    @overload
    def GetProviderSpecificFieldType(self, ordinal: int) -> System.Type: ...
    @overload
    def GetProviderSpecificValue(self, ordinal: int) -> object: ...
    @overload
    def GetProviderSpecificValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def GetSchemaTable() -> Data.DataTable: ...
    @overload
    def GetSchemaTableAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetStream(self, ordinal: int) -> IO.Stream: ...
    @overload
    def GetString(self, ordinal: int) -> str: ...
    @overload
    def GetTextReader(self, ordinal: int) -> IO.TextReader: ...
    @overload
    def GetValue(self, ordinal: int) -> object: ...
    @overload
    def GetValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def IsDBNull(self, ordinal: int) -> bool: ...
    @overload
    def IsDBNullAsync(self, ordinal: int) -> Tasks.Task: ...
    @overload
    def IsDBNullAsync(self, ordinal: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def NextResult() -> bool: ...
    @overload
    def NextResultAsync() -> Tasks.Task: ...
    @overload
    def NextResultAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Read() -> bool: ...
    @overload
    def ReadAsync() -> Tasks.Task: ...
    @overload
    def ReadAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class DbDataReaderExtensions(object):
    """    """
    @overload
    @staticmethod
    def CanGetColumnSchema(reader: DbDataReader) -> bool: ...
    @overload
    @staticmethod
    def GetColumnSchema(reader: DbDataReader) -> ObjectModel.ReadOnlyCollection: ...

class DbDataRecord(object):
    """    """
    @property
    def FieldCount(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetBoolean(self, i: int) -> bool: ...
    @overload
    def GetByte(self, i: int) -> System.Byte: ...
    @overload
    def GetBytes(self, i: int, dataIndex: System.Int64, buffer: System.System.Array[System.Byte], bufferIndex: int, length: int) -> System.Int64: ...
    @overload
    def GetChar(self, i: int) -> System.Char: ...
    @overload
    def GetChars(self, i: int, dataIndex: System.Int64, buffer: System.System.Array[System.Char], bufferIndex: int, length: int) -> System.Int64: ...
    @overload
    def GetData(self, i: int) -> Data.IDataReader: ...
    @overload
    def GetDataTypeName(self, i: int) -> str: ...
    @overload
    def GetDateTime(self, i: int) -> System.DateTime: ...
    @overload
    def GetDecimal(self, i: int) -> System.Decimal: ...
    @overload
    def GetDouble(self, i: int) -> float: ...
    @overload
    def GetFieldType(self, i: int) -> System.Type: ...
    @overload
    def GetFloat(self, i: int) -> System.Single: ...
    @overload
    def GetGuid(self, i: int) -> System.Guid: ...
    @overload
    def GetInt16(self, i: int) -> System.Int16: ...
    @overload
    def GetInt32(self, i: int) -> int: ...
    @overload
    def GetInt64(self, i: int) -> System.Int64: ...
    @overload
    def GetName(self, i: int) -> str: ...
    @overload
    def GetOrdinal(self, name: str) -> int: ...
    @overload
    def GetString(self, i: int) -> str: ...
    @overload
    def GetValue(self, i: int) -> object: ...
    @overload
    def GetValues(self, values: System.System.Array[object]) -> int: ...
    @overload
    def IsDBNull(self, i: int) -> bool: ...

class DbDataSource(object):
    """    """
    @overload
    def CreateBatch() -> DbBatch: ...
    @overload
    def CreateCommand(self, commandText: str) -> DbCommand: ...
    @overload
    def CreateConnection() -> DbConnection: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @property
    def ConnectionString(self) -> str: ...
    @overload
    def OpenConnection() -> DbConnection: ...
    @overload
    def OpenConnectionAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...

class DbDataSourceEnumerator(object):
    """    """
    @overload
    def GetDataSources() -> Data.DataTable: ...

class DbEnumerator(object):
    """    """
    @overload
    def __init__(self, reader: Data.IDataReader): ...
    @overload
    def __init__(self, reader: DbDataReader): ...
    @overload
    def __init__(self, reader: Data.IDataReader, closeReader: bool): ...
    @overload
    def __init__(self, reader: DbDataReader, closeReader: bool): ...
    @property
    def Current(self) -> object: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class DbException(InteropServices.ExternalException):
    """    """
    @property
    def BatchCommand(self) -> DbBatchCommand: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def SqlState(self) -> str: ...

class DbMetaDataCollectionNames(object):
    """    """
    @property
    def MetaDataCollections(self) -> str: ...
    @property
    def DataSourceInformation(self) -> str: ...
    @property
    def DataTypes(self) -> str: ...
    @property
    def Restrictions(self) -> str: ...
    @property
    def ReservedWords(self) -> str: ...

class DbMetaDataColumnNames(object):
    """    """
    @property
    def CollectionName(self) -> str: ...
    @property
    def ColumnSize(self) -> str: ...
    @property
    def CompositeIdentifierSeparatorPattern(self) -> str: ...
    @property
    def CreateFormat(self) -> str: ...
    @property
    def CreateParameters(self) -> str: ...
    @property
    def DataSourceProductName(self) -> str: ...
    @property
    def DataSourceProductVersion(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def DataSourceProductVersionNormalized(self) -> str: ...
    @property
    def GroupByBehavior(self) -> str: ...
    @property
    def IdentifierCase(self) -> str: ...
    @property
    def IdentifierPattern(self) -> str: ...
    @property
    def IsAutoIncrementable(self) -> str: ...
    @property
    def IsBestMatch(self) -> str: ...
    @property
    def IsCaseSensitive(self) -> str: ...
    @property
    def IsConcurrencyType(self) -> str: ...
    @property
    def IsFixedLength(self) -> str: ...
    @property
    def IsFixedPrecisionScale(self) -> str: ...
    @property
    def IsLiteralSupported(self) -> str: ...
    @property
    def IsLong(self) -> str: ...
    @property
    def IsNullable(self) -> str: ...
    @property
    def IsSearchable(self) -> str: ...
    @property
    def IsSearchableWithLike(self) -> str: ...
    @property
    def IsUnsigned(self) -> str: ...
    @property
    def LiteralPrefix(self) -> str: ...
    @property
    def LiteralSuffix(self) -> str: ...
    @property
    def MaximumScale(self) -> str: ...
    @property
    def MinimumScale(self) -> str: ...
    @property
    def NumberOfIdentifierParts(self) -> str: ...
    @property
    def NumberOfRestrictions(self) -> str: ...
    @property
    def OrderByColumnsInSelect(self) -> str: ...
    @property
    def ParameterMarkerFormat(self) -> str: ...
    @property
    def ParameterMarkerPattern(self) -> str: ...
    @property
    def ParameterNameMaxLength(self) -> str: ...
    @property
    def ParameterNamePattern(self) -> str: ...
    @property
    def ProviderDbType(self) -> str: ...
    @property
    def QuotedIdentifierCase(self) -> str: ...
    @property
    def QuotedIdentifierPattern(self) -> str: ...
    @property
    def ReservedWord(self) -> str: ...
    @property
    def StatementSeparatorPattern(self) -> str: ...
    @property
    def StringLiteralPattern(self) -> str: ...
    @property
    def SupportedJoinOperators(self) -> str: ...
    @property
    def TypeName(self) -> str: ...

class DbParameter(System.MarshalByRefObject):
    """    """
    @property
    def DbType(self) -> Data.DbType: ...
    @property
    def Direction(self) -> Data.ParameterDirection: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def Precision(self) -> System.Byte: ...
    @property
    def Scale(self) -> System.Byte: ...
    @property
    def Size(self) -> int: ...
    @property
    def SourceColumn(self) -> str: ...
    @property
    def SourceColumnNullMapping(self) -> bool: ...
    @property
    def SourceVersion(self) -> Data.DataRowVersion: ...
    @property
    def Value(self) -> object: ...
    @overload
    def ResetDbType() -> None: ...
    @DbType.setter
    def DbType(self, value: System.Void): ...
    @Direction.setter
    def Direction(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...
    @ParameterName.setter
    def ParameterName(self, value: System.Void): ...
    @Precision.setter
    def Precision(self, value: System.Void): ...
    @Scale.setter
    def Scale(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @SourceColumn.setter
    def SourceColumn(self, value: System.Void): ...
    @SourceColumnNullMapping.setter
    def SourceColumnNullMapping(self, value: System.Void): ...
    @SourceVersion.setter
    def SourceVersion(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class DbParameterCollection(System.MarshalByRefObject):
    """    """
    @overload
    def Add(self, value: object) -> int: ...
    @overload
    def AddRange(self, values: System.Array) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> DbParameter: ...
    @property
    def Item(self) -> DbParameter: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, parameterName: str) -> int: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def Insert(self, index: int, value: object) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveAt(self, parameterName: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DbProviderFactory(object):
    """    """
    @overload
    def CreateBatch() -> DbBatch: ...
    @overload
    def CreateBatchCommand() -> DbBatchCommand: ...
    @overload
    def CreateCommand() -> DbCommand: ...
    @overload
    def CreateCommandBuilder() -> DbCommandBuilder: ...
    @overload
    def CreateConnection() -> DbConnection: ...
    @overload
    def CreateConnectionStringBuilder() -> DbConnectionStringBuilder: ...
    @overload
    def CreateDataAdapter() -> DbDataAdapter: ...
    @overload
    def CreateDataSource(self, connectionString: str) -> DbDataSource: ...
    @overload
    def CreateDataSourceEnumerator() -> DbDataSourceEnumerator: ...
    @overload
    def CreateParameter() -> DbParameter: ...
    @property
    def CanCreateBatch(self) -> bool: ...
    @property
    def CanCreateCommandBuilder(self) -> bool: ...
    @property
    def CanCreateDataAdapter(self) -> bool: ...
    @property
    def CanCreateDataSourceEnumerator(self) -> bool: ...

class DbProviderFactories(object):
    """    """
    @overload
    @staticmethod
    def GetFactory(providerInvariantName: str) -> DbProviderFactory: ...
    @overload
    @staticmethod
    def GetFactory(providerRow: Data.DataRow) -> DbProviderFactory: ...
    @overload
    @staticmethod
    def GetFactory(connection: DbConnection) -> DbProviderFactory: ...
    @overload
    @staticmethod
    def GetFactoryClasses() -> Data.DataTable: ...
    @overload
    @staticmethod
    def GetProviderInvariantNames() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def RegisterFactory(providerInvariantName: str, factoryTypeAssemblyQualifiedName: str) -> None: ...
    @overload
    @staticmethod
    def RegisterFactory(providerInvariantName: str, providerFactoryClass: System.Type) -> None: ...
    @overload
    @staticmethod
    def RegisterFactory(providerInvariantName: str, factory: DbProviderFactory) -> None: ...
    @overload
    @staticmethod
    def TryGetFactory(providerInvariantName: str) -> (bool, DbProviderFactory): ...
    @overload
    @staticmethod
    def UnregisterFactory(providerInvariantName: str) -> bool: ...

class DbProviderSpecificTypePropertyAttribute(System.Attribute):
    """    """
    def __init__(self, isProviderSpecificTypeProperty: bool): ...
    @property
    def IsProviderSpecificTypeProperty(self) -> bool: ...

class DbTransaction(System.MarshalByRefObject):
    """    """
    @overload
    def Commit() -> None: ...
    @overload
    def CommitAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @property
    def Connection(self) -> DbConnection: ...
    @property
    def IsolationLevel(self) -> Data.IsolationLevel: ...
    @property
    def SupportsSavepoints(self) -> bool: ...
    @overload
    def Release(self, savepointName: str) -> None: ...
    @overload
    def ReleaseAsync(self, savepointName: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Rollback() -> None: ...
    @overload
    def Rollback(self, savepointName: str) -> None: ...
    @overload
    def RollbackAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def RollbackAsync(self, savepointName: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Save(self, savepointName: str) -> None: ...
    @overload
    def SaveAsync(self, savepointName: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class GroupByBehavior(enum.Enum):
    Unknown = 0
    NotSupported = 1
    Unrelated = 2
    MustContainAll = 3
    ExactMatch = 4

class IDbColumnSchemaGenerator:
    """    """
    @overload
    def GetColumnSchema() -> ObjectModel.ReadOnlyCollection: ...

class IdentifierCase(enum.Enum):
    Unknown = 0
    Insensitive = 1
    Sensitive = 2

class RowUpdatedEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataRow: Data.DataRow, command: Data.IDbCommand, statementType: Data.StatementType, tableMapping: DataTableMapping): ...
    @overload
    def CopyToRows(self, array: Data.System.Array[Data.DataRow]) -> None: ...
    @overload
    def CopyToRows(self, array: Data.System.Array[Data.DataRow], arrayIndex: int) -> None: ...
    @property
    def Command(self) -> Data.IDbCommand: ...
    @property
    def Errors(self) -> System.Exception: ...
    @property
    def RecordsAffected(self) -> int: ...
    @property
    def Row(self) -> Data.DataRow: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def StatementType(self) -> Data.StatementType: ...
    @property
    def Status(self) -> Data.UpdateStatus: ...
    @property
    def TableMapping(self) -> DataTableMapping: ...
    @Errors.setter
    def Errors(self, value: System.Void): ...
    @Status.setter
    def Status(self, value: System.Void): ...

class RowUpdatingEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataRow: Data.DataRow, command: Data.IDbCommand, statementType: Data.StatementType, tableMapping: DataTableMapping): ...
    @property
    def Command(self) -> Data.IDbCommand: ...
    @property
    def Errors(self) -> System.Exception: ...
    @property
    def Row(self) -> Data.DataRow: ...
    @property
    def StatementType(self) -> Data.StatementType: ...
    @property
    def Status(self) -> Data.UpdateStatus: ...
    @property
    def TableMapping(self) -> DataTableMapping: ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @Errors.setter
    def Errors(self, value: System.Void): ...
    @Status.setter
    def Status(self, value: System.Void): ...

class SchemaTableColumn(object):
    """    """
    @property
    def ColumnName(self) -> str: ...
    @property
    def ColumnOrdinal(self) -> str: ...
    @property
    def ColumnSize(self) -> str: ...
    @property
    def NumericPrecision(self) -> str: ...
    @property
    def NumericScale(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def ProviderType(self) -> str: ...
    @property
    def NonVersionedProviderType(self) -> str: ...
    @property
    def IsLong(self) -> str: ...
    @property
    def AllowDBNull(self) -> str: ...
    @property
    def IsAliased(self) -> str: ...
    @property
    def IsExpression(self) -> str: ...
    @property
    def IsKey(self) -> str: ...
    @property
    def IsUnique(self) -> str: ...
    @property
    def BaseSchemaName(self) -> str: ...
    @property
    def BaseTableName(self) -> str: ...
    @property
    def BaseColumnName(self) -> str: ...

class SchemaTableOptionalColumn(object):
    """    """
    @property
    def ProviderSpecificDataType(self) -> str: ...
    @property
    def IsAutoIncrement(self) -> str: ...
    @property
    def IsHidden(self) -> str: ...
    @property
    def IsReadOnly(self) -> str: ...
    @property
    def IsRowVersion(self) -> str: ...
    @property
    def BaseServerName(self) -> str: ...
    @property
    def BaseCatalogName(self) -> str: ...
    @property
    def AutoIncrementSeed(self) -> str: ...
    @property
    def AutoIncrementStep(self) -> str: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Expression(self) -> str: ...
    @property
    def BaseTableNamespace(self) -> str: ...
    @property
    def BaseColumnNamespace(self) -> str: ...
    @property
    def ColumnMapping(self) -> str: ...

class SupportedJoinOperators(enum.Enum):
    None_ = 0
    Inner = 1
    LeftOuter = 2
    RightOuter = 4
    FullOuter = 8

# endregion
