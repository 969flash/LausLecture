"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["TextFormat", "CimType", "ComparisonSettings", "ManagementBaseObject", "ManagementClass", "ManagementDateTimeConverter", "ManagementEventArgs", "ObjectReadyEventArgs", "CompletedEventArgs", "ObjectPutEventArgs", "ProgressEventArgs", "EventArrivedEventArgs", "StoppedEventArgs", "EventArrivedEventHandler", "StoppedEventHandler", "ManagementEventWatcher", "ManagementStatus", "ManagementException", "ManagementNamedValueCollection", "ManagementObject", "ManagementObjectCollection", "ManagementObjectSearcher", "ObjectReadyEventHandler", "CompletedEventHandler", "ProgressEventHandler", "ObjectPutEventHandler", "ManagementOperationObserver", "AuthenticationLevel", "ImpersonationLevel", "PutType", "ManagementOptions", "EnumerationOptions", "EventWatcherOptions", "ObjectGetOptions", "PutOptions", "DeleteOptions", "InvokeMethodOptions", "ConnectionOptions", "ManagementPath", "ManagementQuery", "ObjectQuery", "EventQuery", "WqlObjectQuery", "SelectQuery", "RelatedObjectQuery", "RelationshipQuery", "WqlEventQuery", "ManagementScope", "MethodData", "MethodDataCollection", "PropertyData", "PropertyDataCollection", "QualifierData", "QualifierDataCollection", "CodeLanguage", "ManagementObjectEnumerator", "MethodDataEnumerator", "PropertyDataEnumerator", "QualifierDataEnumerator"]
# endregion

# region: Imports
from System import CodeDom
from System import ComponentModel
from System import Security
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Management, Version=4.0.0.0

class TextFormat(enum.Enum):
    Mof = 0
    CimDtd20 = 1
    WmiDtd20 = 2

class CimType(enum.Enum):
    None_ = 0
    SInt16 = 2
    SInt32 = 3
    Real32 = 4
    Real64 = 5
    String = 8
    Boolean = 11
    Object = 13
    SInt8 = 16
    UInt8 = 17
    UInt16 = 18
    UInt32 = 19
    SInt64 = 20
    UInt64 = 21
    DateTime = 101
    Reference = 102
    Char16 = 103

class ComparisonSettings(enum.Enum):
    IncludeAll = 0
    IgnoreQualifiers = 1
    IgnoreObjectSource = 2
    IgnoreDefaultValues = 4
    IgnoreClass = 8
    IgnoreCase = 16
    IgnoreFlavor = 32

class ManagementBaseObject(ComponentModel.Component):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def CompareTo(self, otherObject: ManagementBaseObject, settings: ComparisonSettings) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ClassPath(self) -> ManagementPath: ...
    @property
    def Item(self) -> object: ...
    @property
    def Properties(self) -> PropertyDataCollection: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...
    @property
    def SystemProperties(self) -> PropertyDataCollection: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetPropertyQualifierValue(self, propertyName: str, qualifierName: str) -> object: ...
    @overload
    def GetPropertyValue(self, propertyName: str) -> object: ...
    @overload
    def GetQualifierValue(self, qualifierName: str) -> object: ...
    @overload
    def GetText(self, format_: TextFormat) -> str: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetPropertyQualifierValue(self, propertyName: str, qualifierName: str, qualifierValue: object) -> None: ...
    @overload
    def SetPropertyValue(self, propertyName: str, propertyValue: object) -> None: ...
    @overload
    def SetQualifierValue(self, qualifierName: str, qualifierValue: object) -> None: ...
    @property
    def Disposed(self): ...

class ManagementClass(ManagementObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, path: str, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: str, path: str, options: ObjectGetOptions): ...
    @overload
    def Clone() -> object: ...
    @overload
    def CreateInstance() -> ManagementObject: ...
    @overload
    def Derive(self, newClassName: str) -> ManagementClass: ...
    @property
    def Derivation(self) -> Specialized.StringCollection: ...
    @property
    def Methods(self) -> MethodDataCollection: ...
    @property
    def Path(self) -> ManagementPath: ...
    @overload
    def GetInstances() -> ManagementObjectCollection: ...
    @overload
    def GetInstances(self, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetInstances(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetInstances(self, watcher: ManagementOperationObserver, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelatedClasses() -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelatedClasses(self, relatedClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver, relatedClass: str) -> None: ...
    @overload
    def GetRelatedClasses(self, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelationshipClasses() -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, relationshipClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver, relationshipClass: str) -> None: ...
    @overload
    def GetRelationshipClasses(self, relationshipClass: str, relationshipQualifier: str, thisRole: str, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver, relationshipClass: str, relationshipQualifier: str, thisRole: str, options: EnumerationOptions) -> None: ...
    @overload
    def GetStronglyTypedClassCode(self, includeSystemClassInClassDef: bool, systemPropertyClass: bool) -> CodeDom.CodeTypeDeclaration: ...
    @overload
    def GetStronglyTypedClassCode(self, lang: CodeLanguage, filePath: str, classNamespace: str) -> bool: ...
    @overload
    def GetSubclasses() -> ManagementObjectCollection: ...
    @overload
    def GetSubclasses(self, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetSubclasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetSubclasses(self, watcher: ManagementOperationObserver, options: EnumerationOptions) -> None: ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class ManagementDateTimeConverter(object):
    """    """
    @overload
    @staticmethod
    def ToDateTime(dmtfDate: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDmtfDateTime(date: System.DateTime) -> str: ...
    @overload
    @staticmethod
    def ToDmtfTimeInterval(timespan: System.TimeSpan) -> str: ...
    @overload
    @staticmethod
    def ToTimeSpan(dmtfTimespan: str) -> System.TimeSpan: ...

class ManagementEventArgs(System.EventArgs):
    """    """
    @property
    def Context(self) -> object: ...

class ObjectReadyEventArgs(ManagementEventArgs):
    """    """
    @property
    def NewObject(self) -> ManagementBaseObject: ...

class CompletedEventArgs(ManagementEventArgs):
    """    """
    @property
    def Status(self) -> ManagementStatus: ...
    @property
    def StatusObject(self) -> ManagementBaseObject: ...

class ObjectPutEventArgs(ManagementEventArgs):
    """    """
    @property
    def Path(self) -> ManagementPath: ...

class ProgressEventArgs(ManagementEventArgs):
    """    """
    @property
    def Current(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def UpperBound(self) -> int: ...

class EventArrivedEventArgs(ManagementEventArgs):
    """    """
    @property
    def NewEvent(self) -> ManagementBaseObject: ...

class StoppedEventArgs(ManagementEventArgs):
    """    """
    @property
    def Status(self) -> ManagementStatus: ...

class EventArrivedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArrivedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: EventArrivedEventArgs) -> None: ...

class StoppedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: StoppedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: StoppedEventArgs) -> None: ...

class ManagementEventWatcher(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: EventQuery): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, scope: ManagementScope, query: EventQuery): ...
    @overload
    def __init__(self, scope: str, query: str): ...
    @overload
    def __init__(self, scope: str, query: str, options: EventWatcherOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, query: EventQuery, options: EventWatcherOptions): ...
    @property
    def Options(self) -> EventWatcherOptions: ...
    @property
    def Query(self) -> EventQuery: ...
    @property
    def Scope(self) -> ManagementScope: ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @Query.setter
    def Query(self, value: System.Void): ...
    @Scope.setter
    def Scope(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Stop() -> None: ...
    @overload
    def WaitForNextEvent() -> ManagementBaseObject: ...
    @property
    def EventArrived(self): ...
    @property
    def Stopped(self): ...
    @property
    def Disposed(self): ...

class ManagementStatus(enum.Enum):
    NoError = 0
    False_ = 1
    ResetToDefault = 262146
    Different = 262147
    Timedout = 262148
    NoMoreData = 262149
    OperationCanceled = 262150
    Pending = 262151
    DuplicateObjects = 262152
    PartialResults = 262160
    Failed = -2147217407
    NotFound = -2147217406
    AccessDenied = -2147217405
    ProviderFailure = -2147217404
    TypeMismatch = -2147217403
    OutOfMemory = -2147217402
    InvalidContext = -2147217401
    InvalidParameter = -2147217400
    NotAvailable = -2147217399
    CriticalError = -2147217398
    InvalidStream = -2147217397
    NotSupported = -2147217396
    InvalidSuperclass = -2147217395
    InvalidNamespace = -2147217394
    InvalidObject = -2147217393
    InvalidClass = -2147217392
    ProviderNotFound = -2147217391
    InvalidProviderRegistration = -2147217390
    ProviderLoadFailure = -2147217389
    InitializationFailure = -2147217388
    TransportFailure = -2147217387
    InvalidOperation = -2147217386
    InvalidQuery = -2147217385
    InvalidQueryType = -2147217384
    AlreadyExists = -2147217383
    OverrideNotAllowed = -2147217382
    PropagatedQualifier = -2147217381
    PropagatedProperty = -2147217380
    Unexpected = -2147217379
    IllegalOperation = -2147217378
    CannotBeKey = -2147217377
    IncompleteClass = -2147217376
    InvalidSyntax = -2147217375
    NondecoratedObject = -2147217374
    ReadOnly = -2147217373
    ProviderNotCapable = -2147217372
    ClassHasChildren = -2147217371
    ClassHasInstances = -2147217370
    QueryNotImplemented = -2147217369
    IllegalNull = -2147217368
    InvalidQualifierType = -2147217367
    InvalidPropertyType = -2147217366
    ValueOutOfRange = -2147217365
    CannotBeSingleton = -2147217364
    InvalidCimType = -2147217363
    InvalidMethod = -2147217362
    InvalidMethodParameters = -2147217361
    SystemProperty = -2147217360
    InvalidProperty = -2147217359
    CallCanceled = -2147217358
    ShuttingDown = -2147217357
    PropagatedMethod = -2147217356
    UnsupportedParameter = -2147217355
    MissingParameterID = -2147217354
    InvalidParameterID = -2147217353
    NonconsecutiveParameterIDs = -2147217352
    ParameterIDOnRetval = -2147217351
    InvalidObjectPath = -2147217350
    OutOfDiskSpace = -2147217349
    BufferTooSmall = -2147217348
    UnsupportedPutExtension = -2147217347
    UnknownObjectType = -2147217346
    UnknownPacketType = -2147217345
    MarshalVersionMismatch = -2147217344
    MarshalInvalidSignature = -2147217343
    InvalidQualifier = -2147217342
    InvalidDuplicateParameter = -2147217341
    TooMuchData = -2147217340
    ServerTooBusy = -2147217339
    InvalidFlavor = -2147217338
    CircularReference = -2147217337
    UnsupportedClassUpdate = -2147217336
    CannotChangeKeyInheritance = -2147217335
    CannotChangeIndexInheritance = -2147217328
    TooManyProperties = -2147217327
    UpdateTypeMismatch = -2147217326
    UpdateOverrideNotAllowed = -2147217325
    UpdatePropagatedMethod = -2147217324
    MethodNotImplemented = -2147217323
    MethodDisabled = -2147217322
    RefresherBusy = -2147217321
    UnparsableQuery = -2147217320
    NotEventClass = -2147217319
    MissingGroupWithin = -2147217318
    MissingAggregationList = -2147217317
    PropertyNotAnObject = -2147217316
    AggregatingByObject = -2147217315
    UninterpretableProviderQuery = -2147217313
    BackupRestoreWinmgmtRunning = -2147217312
    QueueOverflow = -2147217311
    PrivilegeNotHeld = -2147217310
    InvalidOperator = -2147217309
    LocalCredentials = -2147217308
    CannotBeAbstract = -2147217307
    AmendedObject = -2147217306
    ClientTooSlow = -2147217305
    RegistrationTooBroad = -2147213311
    RegistrationTooPrecise = -2147213310

class ManagementException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def ErrorCode(self) -> ManagementStatus: ...
    @property
    def ErrorInformation(self) -> ManagementBaseObject: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ManagementNamedValueCollection(Specialized.NameObjectCollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, name: str, value: object) -> None: ...
    @overload
    def Clone() -> ManagementNamedValueCollection: ...
    @property
    def Item(self) -> object: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAll() -> None: ...

class ManagementObject(ManagementBaseObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, path: str, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scopeString: str, pathString: str, options: ObjectGetOptions): ...
    @overload
    def Clone() -> object: ...
    @overload
    def CopyTo(self, path: ManagementPath) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: str) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: str, options: PutOptions) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: ManagementPath, options: PutOptions) -> ManagementPath: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: ManagementPath) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: str) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: ManagementPath, options: PutOptions) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: str, options: PutOptions) -> None: ...
    @overload
    def Delete() -> None: ...
    @overload
    def Delete(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def Delete(self, options: DeleteOptions) -> None: ...
    @overload
    def Delete(self, watcher: ManagementOperationObserver, options: DeleteOptions) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Get() -> None: ...
    @property
    def ClassPath(self) -> ManagementPath: ...
    @property
    def Options(self) -> ObjectGetOptions: ...
    @property
    def Path(self) -> ManagementPath: ...
    @overload
    def Get(self, watcher: ManagementOperationObserver) -> None: ...
    @property
    def Scope(self) -> ManagementScope: ...
    @overload
    def GetMethodParameters(self, methodName: str) -> ManagementBaseObject: ...
    @overload
    def GetRelated() -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, relatedClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver, relatedClass: str) -> None: ...
    @overload
    def GetRelated(self, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelationships() -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelationships(self, relationshipClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver, relationshipClass: str) -> None: ...
    @overload
    def GetRelationships(self, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> None: ...
    @overload
    def InvokeMethod(self, methodName: str, args: System.System.Array[object]) -> object: ...
    @overload
    def InvokeMethod(self, watcher: ManagementOperationObserver, methodName: str, args: System.System.Array[object]) -> None: ...
    @overload
    def InvokeMethod(self, methodName: str, inParameters: ManagementBaseObject, options: InvokeMethodOptions) -> ManagementBaseObject: ...
    @overload
    def InvokeMethod(self, watcher: ManagementOperationObserver, methodName: str, inParameters: ManagementBaseObject, options: InvokeMethodOptions) -> None: ...
    @overload
    def Put() -> ManagementPath: ...
    @overload
    def Put(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def Put(self, options: PutOptions) -> ManagementPath: ...
    @overload
    def Put(self, watcher: ManagementOperationObserver, options: PutOptions) -> None: ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @Scope.setter
    def Scope(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class ManagementObjectCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, objectCollection: System.Array[ManagementBaseObject], index: int) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> ManagementObjectEnumerator: ...

class ManagementObjectSearcher(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryString: str): ...
    @overload
    def __init__(self, query: ObjectQuery): ...
    @overload
    def __init__(self, scope: str, queryString: str): ...
    @overload
    def __init__(self, scope: ManagementScope, query: ObjectQuery): ...
    @overload
    def __init__(self, scope: str, queryString: str, options: EnumerationOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, query: ObjectQuery, options: EnumerationOptions): ...
    @overload
    def Get() -> ManagementObjectCollection: ...
    @property
    def Options(self) -> EnumerationOptions: ...
    @property
    def Query(self) -> ObjectQuery: ...
    @overload
    def Get(self, watcher: ManagementOperationObserver) -> None: ...
    @property
    def Scope(self) -> ManagementScope: ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @Query.setter
    def Query(self, value: System.Void): ...
    @Scope.setter
    def Scope(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class ObjectReadyEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ObjectReadyEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ObjectReadyEventArgs) -> None: ...

class CompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: CompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: CompletedEventArgs) -> None: ...

class ProgressEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ProgressEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ProgressEventArgs) -> None: ...

class ObjectPutEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ObjectPutEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ObjectPutEventArgs) -> None: ...

class ManagementOperationObserver(object):
    """    """
    def __init__(self): ...
    @overload
    def Cancel() -> None: ...
    @property
    def ObjectReady(self): ...
    @property
    def Completed(self): ...
    @property
    def Progress(self): ...
    @property
    def ObjectPut(self): ...

class AuthenticationLevel(enum.Enum):
    Default = 0
    None_ = 1
    Connect = 2
    Call = 3
    Packet = 4
    PacketIntegrity = 5
    PacketPrivacy = 6
    Unchanged = -1

class ImpersonationLevel(enum.Enum):
    Default = 0
    Anonymous = 1
    Identify = 2
    Impersonate = 3
    Delegate = 4

class PutType(enum.Enum):
    None_ = 0
    UpdateOnly = 1
    CreateOnly = 2
    UpdateOrCreate = 3

class ManagementOptions(object):
    """    """
    @property
    def InfiniteTimeout(self) -> System.TimeSpan: ...
    @overload
    def Clone() -> object: ...
    @property
    def Context(self) -> ManagementNamedValueCollection: ...
    @property
    def Timeout(self) -> System.TimeSpan: ...
    @Context.setter
    def Context(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...

class EnumerationOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan, blockSize: int, rewindable: bool, returnImmediatley: bool, useAmendedQualifiers: bool, ensureLocatable: bool, prototypeOnly: bool, directRead: bool, enumerateDeep: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def DirectRead(self) -> bool: ...
    @property
    def EnsureLocatable(self) -> bool: ...
    @property
    def EnumerateDeep(self) -> bool: ...
    @property
    def PrototypeOnly(self) -> bool: ...
    @property
    def ReturnImmediately(self) -> bool: ...
    @property
    def Rewindable(self) -> bool: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @BlockSize.setter
    def BlockSize(self, value: System.Void): ...
    @DirectRead.setter
    def DirectRead(self, value: System.Void): ...
    @EnsureLocatable.setter
    def EnsureLocatable(self, value: System.Void): ...
    @EnumerateDeep.setter
    def EnumerateDeep(self, value: System.Void): ...
    @PrototypeOnly.setter
    def PrototypeOnly(self, value: System.Void): ...
    @ReturnImmediately.setter
    def ReturnImmediately(self, value: System.Void): ...
    @Rewindable.setter
    def Rewindable(self, value: System.Void): ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: System.Void): ...

class EventWatcherOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan, blockSize: int): ...
    @overload
    def Clone() -> object: ...
    @property
    def BlockSize(self) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: System.Void): ...

class ObjectGetOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan, useAmendedQualifiers: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: System.Void): ...

class PutOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan, useAmendedQualifiers: bool, putType: PutType): ...
    @overload
    def Clone() -> object: ...
    @property
    def Type(self) -> PutType: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: System.Void): ...

class DeleteOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan): ...
    @overload
    def Clone() -> object: ...

class InvokeMethodOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: System.TimeSpan): ...
    @overload
    def Clone() -> object: ...

class ConnectionOptions(ManagementOptions):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, locale: str, username: str, password: str, authority: str, impersonation: ImpersonationLevel, authentication: AuthenticationLevel, enablePrivileges: bool, context: ManagementNamedValueCollection, timeout: System.TimeSpan): ...
    @overload
    def __init__(self, locale: str, username: str, password: Security.SecureString, authority: str, impersonation: ImpersonationLevel, authentication: AuthenticationLevel, enablePrivileges: bool, context: ManagementNamedValueCollection, timeout: System.TimeSpan): ...
    @overload
    def Clone() -> object: ...
    @property
    def Authentication(self) -> AuthenticationLevel: ...
    @property
    def Authority(self) -> str: ...
    @property
    def EnablePrivileges(self) -> bool: ...
    @property
    def Impersonation(self) -> ImpersonationLevel: ...
    @property
    def Locale(self) -> str: ...
    @property
    def Username(self) -> str: ...
    @Authentication.setter
    def Authentication(self, value: System.Void): ...
    @Authority.setter
    def Authority(self, value: System.Void): ...
    @EnablePrivileges.setter
    def EnablePrivileges(self, value: System.Void): ...
    @Impersonation.setter
    def Impersonation(self, value: System.Void): ...
    @Locale.setter
    def Locale(self, value: System.Void): ...
    @Password.setter
    def Password(self, value: System.Void): ...
    @SecurePassword.setter
    def SecurePassword(self, value: System.Void): ...
    @Username.setter
    def Username(self, value: System.Void): ...

class ManagementPath(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def Clone() -> ManagementPath: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def DefaultPath(self) -> ManagementPath: ...
    @property
    def IsClass(self) -> bool: ...
    @property
    def IsInstance(self) -> bool: ...
    @property
    def IsSingleton(self) -> bool: ...
    @property
    def NamespacePath(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def RelativePath(self) -> str: ...
    @property
    def Server(self) -> str: ...
    @ClassName.setter
    def ClassName(self, value: System.Void): ...
    @DefaultPath.setter
    def DefaultPath(self, value: System.Void): ...
    @NamespacePath.setter
    def NamespacePath(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @RelativePath.setter
    def RelativePath(self, value: System.Void): ...
    @Server.setter
    def Server(self, value: System.Void): ...
    @overload
    def SetAsClass() -> None: ...
    @overload
    def SetAsSingleton() -> None: ...
    @overload
    def ToString() -> str: ...

class ManagementQuery(object):
    """    """
    @overload
    def Clone() -> object: ...
    @property
    def QueryLanguage(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @QueryLanguage.setter
    def QueryLanguage(self, value: System.Void): ...
    @QueryString.setter
    def QueryString(self, value: System.Void): ...

class ObjectQuery(ManagementQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, language: str, query: str): ...
    @overload
    def Clone() -> object: ...

class EventQuery(ManagementQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, language: str, query: str): ...
    @overload
    def Clone() -> object: ...

class WqlObjectQuery(ObjectQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def QueryLanguage(self) -> str: ...

class SelectQuery(WqlObjectQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrClassName: str): ...
    @overload
    def __init__(self, className: str, condition: str): ...
    @overload
    def __init__(self, isSchemaQuery: bool, condition: str): ...
    @overload
    def __init__(self, className: str, condition: str, selectedProperties: System.System.Array[str]): ...
    @overload
    def Clone() -> object: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def Condition(self) -> str: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def SelectedProperties(self) -> Specialized.StringCollection: ...
    @ClassName.setter
    def ClassName(self, value: System.Void): ...
    @Condition.setter
    def Condition(self, value: System.Void): ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: System.Void): ...
    @QueryString.setter
    def QueryString(self, value: System.Void): ...
    @SelectedProperties.setter
    def SelectedProperties(self, value: System.Void): ...

class RelatedObjectQuery(WqlObjectQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrSourceObject: str): ...
    @overload
    def __init__(self, sourceObject: str, relatedClass: str): ...
    @overload
    def __init__(self, sourceObject: str, relatedClass: str, relationshipClass: str, relatedQualifier: str, relationshipQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool): ...
    @overload
    def __init__(self, isSchemaQuery: bool, sourceObject: str, relatedClass: str, relationshipClass: str, relatedQualifier: str, relationshipQualifier: str, relatedRole: str, thisRole: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def ClassDefinitionsOnly(self) -> bool: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def RelatedClass(self) -> str: ...
    @property
    def RelatedQualifier(self) -> str: ...
    @property
    def RelatedRole(self) -> str: ...
    @property
    def RelationshipClass(self) -> str: ...
    @property
    def RelationshipQualifier(self) -> str: ...
    @property
    def SourceObject(self) -> str: ...
    @property
    def ThisRole(self) -> str: ...
    @ClassDefinitionsOnly.setter
    def ClassDefinitionsOnly(self, value: System.Void): ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: System.Void): ...
    @RelatedClass.setter
    def RelatedClass(self, value: System.Void): ...
    @RelatedQualifier.setter
    def RelatedQualifier(self, value: System.Void): ...
    @RelatedRole.setter
    def RelatedRole(self, value: System.Void): ...
    @RelationshipClass.setter
    def RelationshipClass(self, value: System.Void): ...
    @RelationshipQualifier.setter
    def RelationshipQualifier(self, value: System.Void): ...
    @SourceObject.setter
    def SourceObject(self, value: System.Void): ...
    @ThisRole.setter
    def ThisRole(self, value: System.Void): ...

class RelationshipQuery(WqlObjectQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrSourceObject: str): ...
    @overload
    def __init__(self, sourceObject: str, relationshipClass: str): ...
    @overload
    def __init__(self, sourceObject: str, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool): ...
    @overload
    def __init__(self, isSchemaQuery: bool, sourceObject: str, relationshipClass: str, relationshipQualifier: str, thisRole: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def ClassDefinitionsOnly(self) -> bool: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def RelationshipClass(self) -> str: ...
    @property
    def RelationshipQualifier(self) -> str: ...
    @property
    def SourceObject(self) -> str: ...
    @property
    def ThisRole(self) -> str: ...
    @ClassDefinitionsOnly.setter
    def ClassDefinitionsOnly(self, value: System.Void): ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: System.Void): ...
    @RelationshipClass.setter
    def RelationshipClass(self, value: System.Void): ...
    @RelationshipQualifier.setter
    def RelationshipQualifier(self, value: System.Void): ...
    @SourceObject.setter
    def SourceObject(self, value: System.Void): ...
    @ThisRole.setter
    def ThisRole(self, value: System.Void): ...

class WqlEventQuery(EventQuery):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrEventClassName: str): ...
    @overload
    def __init__(self, eventClassName: str, condition: str): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: System.TimeSpan): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: System.TimeSpan, condition: str): ...
    @overload
    def __init__(self, eventClassName: str, condition: str, groupWithinInterval: System.TimeSpan): ...
    @overload
    def __init__(self, eventClassName: str, condition: str, groupWithinInterval: System.TimeSpan, groupByPropertyList: System.System.Array[str]): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: System.TimeSpan, condition: str, groupWithinInterval: System.TimeSpan, groupByPropertyList: System.System.Array[str], havingCondition: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def Condition(self) -> str: ...
    @property
    def EventClassName(self) -> str: ...
    @property
    def GroupByPropertyList(self) -> Specialized.StringCollection: ...
    @property
    def GroupWithinInterval(self) -> System.TimeSpan: ...
    @property
    def HavingCondition(self) -> str: ...
    @property
    def QueryLanguage(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def WithinInterval(self) -> System.TimeSpan: ...
    @Condition.setter
    def Condition(self, value: System.Void): ...
    @EventClassName.setter
    def EventClassName(self, value: System.Void): ...
    @GroupByPropertyList.setter
    def GroupByPropertyList(self, value: System.Void): ...
    @GroupWithinInterval.setter
    def GroupWithinInterval(self, value: System.Void): ...
    @HavingCondition.setter
    def HavingCondition(self, value: System.Void): ...
    @QueryString.setter
    def QueryString(self, value: System.Void): ...
    @WithinInterval.setter
    def WithinInterval(self, value: System.Void): ...

class ManagementScope(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, options: ConnectionOptions): ...
    @overload
    def __init__(self, path: ManagementPath, options: ConnectionOptions): ...
    @overload
    def Clone() -> ManagementScope: ...
    @overload
    def Connect() -> None: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def Options(self) -> ConnectionOptions: ...
    @property
    def Path(self) -> ManagementPath: ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...

class MethodData(object):
    """    """
    @property
    def InParameters(self) -> ManagementBaseObject: ...
    @property
    def Name(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @property
    def OutParameters(self) -> ManagementBaseObject: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...

class MethodDataCollection(object):
    """    """
    @overload
    def Add(self, methodName: str) -> None: ...
    @overload
    def Add(self, methodName: str, inParameters: ManagementBaseObject, outParameters: ManagementBaseObject) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, methodArray: System.Array[MethodData], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> MethodData: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> MethodDataEnumerator: ...
    @overload
    def Remove(self, methodName: str) -> None: ...

class PropertyData(object):
    """    """
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...
    @property
    def Type(self) -> CimType: ...
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class PropertyDataCollection(object):
    """    """
    @overload
    def Add(self, propertyName: str, propertyValue: object) -> None: ...
    @overload
    def Add(self, propertyName: str, propertyValue: object, propertyType: CimType) -> None: ...
    @overload
    def Add(self, propertyName: str, propertyType: CimType, isArray: bool) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, propertyArray: System.Array[PropertyData], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> PropertyData: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> PropertyDataEnumerator: ...
    @overload
    def Remove(self, propertyName: str) -> None: ...

class QualifierData(object):
    """    """
    @property
    def IsAmended(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsOverridable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropagatesToInstance(self) -> bool: ...
    @property
    def PropagatesToSubclass(self) -> bool: ...
    @property
    def Value(self) -> object: ...
    @IsAmended.setter
    def IsAmended(self, value: System.Void): ...
    @IsOverridable.setter
    def IsOverridable(self, value: System.Void): ...
    @PropagatesToInstance.setter
    def PropagatesToInstance(self, value: System.Void): ...
    @PropagatesToSubclass.setter
    def PropagatesToSubclass(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class QualifierDataCollection(object):
    """    """
    @overload
    def Add(self, qualifierName: str, qualifierValue: object) -> None: ...
    @overload
    def Add(self, qualifierName: str, qualifierValue: object, isAmended: bool, propagatesToInstance: bool, propagatesToSubclass: bool, isOverridable: bool) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, qualifierArray: System.Array[QualifierData], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> QualifierData: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> QualifierDataEnumerator: ...
    @overload
    def Remove(self, qualifierName: str) -> None: ...

class CodeLanguage(enum.Enum):
    CSharp = 0
    JScript = 1
    VB = 2
    VJSharp = 3
    Mcpp = 4

class ManagementObjectEnumerator(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> ManagementBaseObject: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class MethodDataEnumerator(object):
    """    """
    @property
    def Current(self) -> MethodData: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class PropertyDataEnumerator(object):
    """    """
    @property
    def Current(self) -> PropertyData: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class QualifierDataEnumerator(object):
    """    """
    @property
    def Current(self) -> QualifierData: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

# endregion
