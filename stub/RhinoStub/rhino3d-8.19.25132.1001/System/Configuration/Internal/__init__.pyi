"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["DelegatingConfigHost", "IConfigErrorInfo", "IConfigSystem", "IConfigurationManagerHelper", "IConfigurationManagerInternal", "IInternalConfigClientHost", "IInternalConfigConfigurationFactory", "IInternalConfigHost", "IInternalConfigRecord", "IInternalConfigRoot", "IInternalConfigSettingsFactory", "IInternalConfigSystem", "InternalConfigEventArgs", "InternalConfigEventHandler", "StreamChangeCallback"]
# endregion

# region: Imports
from System import Configuration
from System import IO
from System import Security
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Configuration.ConfigurationManager, Version=7.0.0.0

class DelegatingConfigHost(object):
    """    """
    @overload
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> object: ...
    @overload
    def CreateDeprecatedConfigContext(self, configPath: str) -> object: ...
    @overload
    def DecryptSection(self, encryptedXml: str, protectionProvider: Configuration.ProtectedConfigurationProvider, protectedConfigSection: Configuration.ProtectedConfigurationSection) -> str: ...
    @overload
    def DeleteStream(self, streamName: str) -> None: ...
    @overload
    def EncryptSection(self, clearTextXml: str, protectionProvider: Configuration.ProtectedConfigurationProvider, protectedConfigSection: Configuration.ProtectedConfigurationSection) -> str: ...
    @property
    def HasLocalConfig(self) -> bool: ...
    @property
    def HasRoamingConfig(self) -> bool: ...
    @property
    def IsAppConfigHttp(self) -> bool: ...
    @property
    def IsRemote(self) -> bool: ...
    @property
    def SupportsChangeNotifications(self) -> bool: ...
    @property
    def SupportsLocation(self) -> bool: ...
    @property
    def SupportsPath(self) -> bool: ...
    @property
    def SupportsRefresh(self) -> bool: ...
    @overload
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    @overload
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    @overload
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    @overload
    def GetRestrictedPermissions(self, configRecord: IInternalConfigRecord) -> (Security.PermissionSet, bool): ...
    @overload
    def GetStreamName(self, configPath: str) -> str: ...
    @overload
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    @overload
    def GetStreamVersion(self, streamName: str) -> object: ...
    @overload
    def Impersonate() -> System.IDisposable: ...
    @overload
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: System.System.Array[object]) -> None: ...
    @overload
    def InitForConfiguration(self, configRoot: IInternalConfigRoot, hostInitConfigurationParams: System.System.Array[object]) -> (str, str, str): ...
    @overload
    def IsAboveApplication(self, configPath: str) -> bool: ...
    @overload
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    @overload
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: Configuration.ConfigurationAllowDefinition, allowExeDefinition: Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    @overload
    def IsFile(self, streamName: str) -> bool: ...
    @overload
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    @overload
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    @overload
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    @overload
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    @overload
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> IO.Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str) -> (IO.Stream, object): ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, assertPermissions: bool) -> (IO.Stream, object): ...
    @overload
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    @overload
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    @overload
    def RefreshConfigPaths() -> None: ...
    @overload
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    @overload
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> object: ...
    @overload
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    @overload
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: Configuration.ConfigurationAllowDefinition, allowExeDefinition: Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: object) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: object, assertPermissions: bool) -> None: ...

class IConfigErrorInfo:
    """    """
    @property
    def Filename(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...

class IConfigSystem:
    """    """
    @property
    def Host(self) -> IInternalConfigHost: ...
    @property
    def Root(self) -> IInternalConfigRoot: ...
    @overload
    def Init(self, typeConfigHost: System.Type, hostInitParams: System.System.Array[object]) -> None: ...

class IConfigurationManagerHelper:
    """    """
    @overload
    def EnsureNetConfigLoaded() -> None: ...

class IConfigurationManagerInternal:
    """    """
    @property
    def ApplicationConfigUri(self) -> str: ...
    @property
    def ExeLocalConfigDirectory(self) -> str: ...
    @property
    def ExeLocalConfigPath(self) -> str: ...
    @property
    def ExeProductName(self) -> str: ...
    @property
    def ExeProductVersion(self) -> str: ...
    @property
    def ExeRoamingConfigDirectory(self) -> str: ...
    @property
    def ExeRoamingConfigPath(self) -> str: ...
    @property
    def MachineConfigPath(self) -> str: ...
    @property
    def SetConfigurationSystemInProgress(self) -> bool: ...
    @property
    def SupportsUserConfig(self) -> bool: ...
    @property
    def UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    """    """
    @overload
    def GetExeConfigPath() -> str: ...
    @overload
    def GetLocalUserConfigPath() -> str: ...
    @overload
    def GetRoamingUserConfigPath() -> str: ...
    @overload
    def IsExeConfig(self, configPath: str) -> bool: ...
    @overload
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    @overload
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...

class IInternalConfigConfigurationFactory:
    """    """
    @overload
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: System.System.Array[object]) -> Configuration.Configuration: ...
    @overload
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    """    """
    @overload
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> object: ...
    @overload
    def CreateDeprecatedConfigContext(self, configPath: str) -> object: ...
    @overload
    def DecryptSection(self, encryptedXml: str, protectionProvider: Configuration.ProtectedConfigurationProvider, protectedConfigSection: Configuration.ProtectedConfigurationSection) -> str: ...
    @overload
    def DeleteStream(self, streamName: str) -> None: ...
    @overload
    def EncryptSection(self, clearTextXml: str, protectionProvider: Configuration.ProtectedConfigurationProvider, protectedConfigSection: Configuration.ProtectedConfigurationSection) -> str: ...
    @property
    def IsRemote(self) -> bool: ...
    @property
    def SupportsChangeNotifications(self) -> bool: ...
    @property
    def SupportsLocation(self) -> bool: ...
    @property
    def SupportsPath(self) -> bool: ...
    @property
    def SupportsRefresh(self) -> bool: ...
    @overload
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    @overload
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    @overload
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    @overload
    def GetRestrictedPermissions(self, configRecord: IInternalConfigRecord) -> (Security.PermissionSet, bool): ...
    @overload
    def GetStreamName(self, configPath: str) -> str: ...
    @overload
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    @overload
    def GetStreamVersion(self, streamName: str) -> object: ...
    @overload
    def Impersonate() -> System.IDisposable: ...
    @overload
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: System.System.Array[object]) -> None: ...
    @overload
    def InitForConfiguration(self, configRoot: IInternalConfigRoot, hostInitConfigurationParams: System.System.Array[object]) -> (str, str, str): ...
    @overload
    def IsAboveApplication(self, configPath: str) -> bool: ...
    @overload
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    @overload
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: Configuration.ConfigurationAllowDefinition, allowExeDefinition: Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    @overload
    def IsFile(self, streamName: str) -> bool: ...
    @overload
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    @overload
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    @overload
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    @overload
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    @overload
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> IO.Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str) -> (IO.Stream, object): ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, assertPermissions: bool) -> (IO.Stream, object): ...
    @overload
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    @overload
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    @overload
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    @overload
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> object: ...
    @overload
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    @overload
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: Configuration.ConfigurationAllowDefinition, allowExeDefinition: Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: object) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: object, assertPermissions: bool) -> None: ...

class IInternalConfigRecord:
    """    """
    @property
    def ConfigPath(self) -> str: ...
    @property
    def HasInitErrors(self) -> bool: ...
    @property
    def StreamName(self) -> str: ...
    @overload
    def GetLkgSection(self, configKey: str) -> object: ...
    @overload
    def GetSection(self, configKey: str) -> object: ...
    @overload
    def RefreshSection(self, configKey: str) -> None: ...
    @overload
    def Remove() -> None: ...
    @overload
    def ThrowIfInitErrors() -> None: ...

class IInternalConfigRoot:
    """    """
    @property
    def IsDesignTime(self) -> bool: ...
    @overload
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    @overload
    def GetSection(self, section: str, configPath: str) -> object: ...
    @overload
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    @overload
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    @overload
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    @overload
    def RemoveConfig(self, configPath: str) -> None: ...
    @property
    def ConfigChanged(self): ...
    @property
    def ConfigRemoved(self): ...

class IInternalConfigSettingsFactory:
    """    """
    @overload
    def CompleteInit() -> None: ...
    @overload
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...

class IInternalConfigSystem:
    """    """
    @property
    def SupportsUserConfig(self) -> bool: ...
    @overload
    def GetSection(self, configKey: str) -> object: ...
    @overload
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigEventArgs(System.EventArgs):
    """    """
    def __init__(self, configPath: str): ...
    @property
    def ConfigPath(self) -> str: ...
    @ConfigPath.setter
    def ConfigPath(self, value: System.Void): ...

class InternalConfigEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: InternalConfigEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: InternalConfigEventArgs) -> None: ...

class StreamChangeCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, streamName: str) -> None: ...

# endregion
