"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Provider", "Internal", "DictionarySectionHandler", "DpapiProtectedConfigurationProvider", "IConfigurationSystem", "IdnElement", "IPersistComponentSettings", "ApplicationSettingsBase", "ApplicationScopedSettingAttribute", "ApplicationSettingsGroup", "AppSettingsReader", "AppSettingsSection", "CallbackValidator", "CallbackValidatorAttribute", "ClientSettingsSection", "CommaDelimitedStringCollectionConverter", "Configuration", "ConfigurationAllowDefinition", "ConfigurationAllowExeDefinition", "ConfigurationCollectionAttribute", "ConfigurationConverterBase", "ConfigurationElement", "ConfigurationElementCollection", "ConfigurationElementCollectionType", "ConfigurationElementProperty", "ConfigurationErrorsException", "ConfigurationException", "ConfigurationFileMap", "ConfigurationLocation", "ConfigurationLocationCollection", "ConfigurationLockCollection", "ConfigurationManager", "ConfigurationProperty", "ConfigurationPropertyAttribute", "ConfigurationPropertyCollection", "ConfigurationPropertyOptions", "ConfigurationSaveMode", "ConfigurationSection", "ConfigurationSectionCollection", "ConfigurationSectionGroup", "ConfigurationSectionGroupCollection", "ConfigurationSettings", "ConfigurationUserLevel", "ConfigurationValidatorAttribute", "ConfigurationValidatorBase", "ConfigXmlDocument", "ConnectionStringSettings", "ConnectionStringSettingsCollection", "ConnectionStringsSection", "ContextInformation", "DefaultSection", "DefaultSettingValueAttribute", "DefaultValidator", "ElementInformation", "ExeConfigurationFileMap", "ExeContext", "GenericEnumConverter", "IApplicationSettingsProvider", "IConfigurationSectionHandler", "IgnoreSection", "IgnoreSectionHandler", "InfiniteIntConverter", "InfiniteTimeSpanConverter", "IntegerValidator", "IntegerValidatorAttribute", "IriParsingElement", "ISettingsProviderService", "KeyValueConfigurationCollection", "KeyValueConfigurationElement", "LocalFileSettingsProvider", "LongValidator", "LongValidatorAttribute", "NameValueConfigurationCollection", "NameValueConfigurationElement", "NameValueFileSectionHandler", "NameValueSectionHandler", "OverrideMode", "PositiveTimeSpanValidator", "PositiveTimeSpanValidatorAttribute", "PropertyInformation", "PropertyInformationCollection", "PropertyValueOrigin", "ProtectedConfiguration", "ProtectedConfigurationProvider", "ProtectedConfigurationProviderCollection", "ProtectedConfigurationSection", "ProtectedProviderSettings", "ProviderSettings", "ProviderSettingsCollection", "RegexStringValidator", "RegexStringValidatorAttribute", "RsaProtectedConfigurationProvider", "SchemeSettingElement", "SchemeSettingElementCollection", "SectionInformation", "SettingAttribute", "SettingChangingEventArgs", "SettingChangingEventHandler", "SettingElement", "SettingElementCollection", "SettingsAttributeDictionary", "SettingsBase", "SettingsContext", "SettingsDescriptionAttribute", "SettingsGroupDescriptionAttribute", "SettingsGroupNameAttribute", "SettingsLoadedEventArgs", "SettingsLoadedEventHandler", "SettingsManageability", "SettingsManageabilityAttribute", "SettingsPropertyCollection", "SettingsPropertyIsReadOnlyException", "SettingsPropertyNotFoundException", "SettingsPropertyValueCollection", "SettingsPropertyWrongTypeException", "SettingsProvider", "SettingsProviderAttribute", "SettingsProviderCollection", "SettingsSavingEventHandler", "SettingsSerializeAsAttribute", "SettingValueElement", "SingleTagSectionHandler", "SpecialSetting", "SpecialSettingAttribute", "CommaDelimitedStringCollection", "StringValidator", "StringValidatorAttribute", "SubclassTypeValidator", "SubclassTypeValidatorAttribute", "TimeSpanMinutesConverter", "TimeSpanMinutesOrInfiniteConverter", "TimeSpanSecondsConverter", "TimeSpanSecondsOrInfiniteConverter", "TimeSpanValidator", "TimeSpanValidatorAttribute", "TypeNameConverter", "UriSection", "UserScopedSettingAttribute", "UserSettingsGroup", "ValidatorCallback", "WhiteSpaceTrimStringConverter", "SettingsProperty", "SettingsPropertyValue", "SettingsSerializeAs", "NoSettingsVersionUpgradeAttribute"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import Xml
from System.Collections import Specialized
from System.Configuration import Provider
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Runtime import Versioning
from System.Security import Cryptography
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = []
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Assemblies"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.Security.Permissions, Version=7.0.0.0

# endregion

# region: System.Configuration.ConfigurationManager, Version=7.0.0.0

class DictionarySectionHandler(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parent: object, context: object, section: Xml.XmlNode) -> object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    """    """
    def __init__(self): ...
    @overload
    def Decrypt(self, encryptedNode: Xml.XmlNode) -> Xml.XmlNode: ...
    @overload
    def Encrypt(self, node: Xml.XmlNode) -> Xml.XmlNode: ...
    @property
    def UseMachineProtection(self) -> bool: ...
    @overload
    def Initialize(self, name: str, configurationValues: Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    """    """
    @overload
    def GetConfig(self, configKey: str) -> object: ...
    @overload
    def Init() -> None: ...

class IdnElement(ConfigurationElement):
    """    """
    def __init__(self): ...
    @property
    def Enabled(self) -> System.UriIdnScope: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class IPersistComponentSettings:
    """    """
    @property
    def SaveSettings(self) -> bool: ...
    @property
    def SettingsKey(self) -> str: ...
    @overload
    def LoadComponentSettings() -> None: ...
    @overload
    def ResetComponentSettings() -> None: ...
    @overload
    def SaveComponentSettings() -> None: ...
    @SaveSettings.setter
    def SaveSettings(self, value: System.Void): ...
    @SettingsKey.setter
    def SettingsKey(self, value: System.Void): ...

class ApplicationSettingsBase(SettingsBase):
    """    """
    @property
    def Context(self) -> SettingsContext: ...
    @property
    def Item(self) -> object: ...
    @property
    def Properties(self) -> SettingsPropertyCollection: ...
    @property
    def PropertyValues(self) -> SettingsPropertyValueCollection: ...
    @property
    def Providers(self) -> SettingsProviderCollection: ...
    @property
    def SettingsKey(self) -> str: ...
    @overload
    def GetPreviousVersion(self, propertyName: str) -> object: ...
    @overload
    def Reload() -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Save() -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @SettingsKey.setter
    def SettingsKey(self, value: System.Void): ...
    @overload
    def Upgrade() -> None: ...
    @property
    def PropertyChanged(self): ...
    @property
    def SettingChanging(self): ...
    @property
    def SettingsLoaded(self): ...
    @property
    def SettingsSaving(self): ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    """    """
    def __init__(self): ...

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    """    """
    def __init__(self): ...

class AppSettingsReader(object):
    """    """
    def __init__(self): ...
    @overload
    def GetValue(self, key: str, type_: System.Type) -> object: ...

class AppSettingsSection(ConfigurationSection):
    """    """
    def __init__(self): ...
    @property
    def File(self) -> str: ...
    @property
    def Settings(self) -> KeyValueConfigurationCollection: ...
    @File.setter
    def File(self, value: System.Void): ...

class CallbackValidator(ConfigurationValidatorBase):
    """    """
    def __init__(self, type_: System.Type, callback: ValidatorCallback): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def CallbackMethodName(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @CallbackMethodName.setter
    def CallbackMethodName(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class ClientSettingsSection(ConfigurationSection):
    """    """
    def __init__(self): ...
    @property
    def Settings(self) -> SettingElementCollection: ...

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class Configuration(object):
    """    """
    @property
    def AppSettings(self) -> AppSettingsSection: ...
    @property
    def AssemblyStringTransformer(self) -> System.Func: ...
    @property
    def ConnectionStrings(self) -> ConnectionStringsSection: ...
    @property
    def EvaluationContext(self) -> ContextInformation: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def HasFile(self) -> bool: ...
    @property
    def Locations(self) -> ConfigurationLocationCollection: ...
    @property
    def NamespaceDeclared(self) -> bool: ...
    @property
    def RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @property
    def Sections(self) -> ConfigurationSectionCollection: ...
    @property
    def TargetFramework(self) -> Versioning.FrameworkName: ...
    @property
    def TypeStringTransformer(self) -> System.Func: ...
    @overload
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    @overload
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @overload
    def Save() -> None: ...
    @overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @overload
    def SaveAs(self, filename: str) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @AssemblyStringTransformer.setter
    def AssemblyStringTransformer(self, value: System.Void): ...
    @NamespaceDeclared.setter
    def NamespaceDeclared(self, value: System.Void): ...
    @TargetFramework.setter
    def TargetFramework(self, value: System.Void): ...
    @TypeStringTransformer.setter
    def TypeStringTransformer(self, value: System.Void): ...

class ConfigurationAllowDefinition(enum.Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(enum.Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    """    """
    def __init__(self, itemType: System.Type): ...
    @property
    def AddItemName(self) -> str: ...
    @property
    def ClearItemsName(self) -> str: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def ItemType(self) -> System.Type: ...
    @property
    def RemoveItemName(self) -> str: ...
    @AddItemName.setter
    def AddItemName(self, value: System.Void): ...
    @ClearItemsName.setter
    def ClearItemsName(self, value: System.Void): ...
    @CollectionType.setter
    def CollectionType(self, value: System.Void): ...
    @RemoveItemName.setter
    def RemoveItemName(self, value: System.Void): ...

class ConfigurationConverterBase(ComponentModel.TypeConverter):
    """    """
    @overload
    def CanConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, type_: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, type_: System.Type) -> bool: ...

class ConfigurationElement(object):
    """    """
    @overload
    def Equals(self, compareTo: object) -> bool: ...
    @property
    def CurrentConfiguration(self) -> Configuration: ...
    @property
    def ElementInformation(self) -> ElementInformation: ...
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    @property
    def LockAttributes(self) -> ConfigurationLockCollection: ...
    @property
    def LockElements(self) -> ConfigurationLockCollection: ...
    @property
    def LockItem(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsReadOnly() -> bool: ...
    @LockItem.setter
    def LockItem(self, value: System.Void): ...

class ConfigurationElementCollection(ConfigurationElement):
    """    """
    @overload
    def CopyTo(self, array: System.Array[ConfigurationElement], index: int) -> None: ...
    @overload
    def Equals(self, compareTo: object) -> bool: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def Count(self) -> int: ...
    @property
    def EmitClear(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsReadOnly() -> bool: ...
    @EmitClear.setter
    def EmitClear(self, value: System.Void): ...

class ConfigurationElementCollectionType(enum.Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty(object):
    """    """
    def __init__(self, validator: ConfigurationValidatorBase): ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, node: Xml.XmlNode): ...
    @overload
    def __init__(self, message: str, reader: Xml.XmlReader): ...
    @overload
    def __init__(self, message: str, filename: str, line: int): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, node: Xml.XmlNode): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, reader: Xml.XmlReader): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int): ...
    @property
    def Errors(self) -> Collections.ICollection: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Line(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @overload
    @staticmethod
    def GetFilename(node: Xml.XmlNode) -> str: ...
    @overload
    @staticmethod
    def GetFilename(reader: Xml.XmlReader) -> str: ...
    @overload
    @staticmethod
    def GetLineNumber(reader: Xml.XmlReader) -> int: ...
    @overload
    @staticmethod
    def GetLineNumber(node: Xml.XmlNode) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ConfigurationException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, node: Xml.XmlNode): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, node: Xml.XmlNode): ...
    @overload
    def __init__(self, message: str, filename: str, line: int): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int): ...
    @property
    def BareMessage(self) -> str: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Line(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ConfigurationFileMap(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, machineConfigFilename: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def MachineConfigFilename(self) -> str: ...
    @MachineConfigFilename.setter
    def MachineConfigFilename(self, value: System.Void): ...

class ConfigurationLocation(object):
    """    """
    @property
    def Path(self) -> str: ...
    @overload
    def OpenConfiguration() -> Configuration: ...

class ConfigurationLocationCollection(Collections.ReadOnlyCollectionBase):
    """    """
    @property
    def Item(self) -> ConfigurationLocation: ...

class ConfigurationLockCollection(object):
    """    """
    @overload
    def Add(self, name: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[str], index: int) -> None: ...
    @property
    def AttributeList(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def HasParentElements(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IsReadOnly(self, name: str) -> bool: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationManager(object):
    """    """
    @property
    def AppSettings(self) -> Specialized.NameValueCollection: ...
    @property
    def ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    @overload
    @staticmethod
    def GetSection(sectionName: str) -> object: ...
    @overload
    @staticmethod
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @overload
    @staticmethod
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @overload
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @overload
    @staticmethod
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @overload
    @staticmethod
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...
    @overload
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @overload
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...

class ConfigurationProperty(object):
    """    """
    @overload
    def __init__(self, name: str, type_: System.Type): ...
    @overload
    def __init__(self, name: str, type_: System.Type, defaultValue: object): ...
    @overload
    def __init__(self, name: str, type_: System.Type, defaultValue: object, options: ConfigurationPropertyOptions): ...
    @overload
    def __init__(self, name: str, type_: System.Type, defaultValue: object, typeConverter: ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions): ...
    @overload
    def __init__(self, name: str, type_: System.Type, defaultValue: object, typeConverter: ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions, description: str): ...
    @property
    def Converter(self) -> ComponentModel.TypeConverter: ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsAssemblyStringTransformationRequired(self) -> bool: ...
    @property
    def IsDefaultCollection(self) -> bool: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def IsTypeStringTransformationRequired(self) -> bool: ...
    @property
    def IsVersionCheckRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def IsDefaultCollection(self) -> bool: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ConfigurationPropertyOptions: ...
    @DefaultValue.setter
    def DefaultValue(self, value: System.Void): ...
    @IsDefaultCollection.setter
    def IsDefaultCollection(self, value: System.Void): ...
    @IsKey.setter
    def IsKey(self, value: System.Void): ...
    @IsRequired.setter
    def IsRequired(self, value: System.Void): ...
    @Options.setter
    def Options(self, value: System.Void): ...

class ConfigurationPropertyCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, property_: ConfigurationProperty) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[ConfigurationProperty], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> ConfigurationProperty: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, name: str) -> bool: ...

class ConfigurationPropertyOptions(enum.Enum):
    None_ = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(enum.Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSection(ConfigurationElement):
    """    """
    @property
    def SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(Specialized.NameObjectCollectionBase):
    """    """
    @overload
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, array: System.Array[ConfigurationSection], index: int) -> None: ...
    @property
    def Item(self) -> ConfigurationSection: ...
    @property
    def Item(self) -> ConfigurationSection: ...
    @overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @overload
    def Get(self, name: str) -> ConfigurationSection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetKey(self, index: int) -> str: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup(object):
    """    """
    def __init__(self): ...
    @overload
    def ForceDeclaration() -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...
    @property
    def IsDeclarationRequired(self) -> bool: ...
    @property
    def IsDeclared(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SectionGroupName(self) -> str: ...
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @property
    def Sections(self) -> ConfigurationSectionCollection: ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class ConfigurationSectionGroupCollection(Specialized.NameObjectCollectionBase):
    """    """
    @overload
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, array: System.Array[ConfigurationSectionGroup], index: int) -> None: ...
    @property
    def Item(self) -> ConfigurationSectionGroup: ...
    @property
    def Item(self) -> ConfigurationSectionGroup: ...
    @overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetKey(self, index: int) -> str: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings(object):
    """    """
    @property
    def AppSettings(self) -> Specialized.NameValueCollection: ...

class ConfigurationUserLevel(enum.Enum):
    None_ = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    """    """
    def __init__(self, validator: System.Type): ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @property
    def ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase(object):
    """    """
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class ConfigXmlDocument(Xml.XmlDocument):
    """    """
    def __init__(self): ...
    @overload
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> Xml.XmlAttribute: ...
    @overload
    def CreateCDataSection(self, data: str) -> Xml.XmlCDataSection: ...
    @overload
    def CreateComment(self, data: str) -> Xml.XmlComment: ...
    @overload
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> Xml.XmlElement: ...
    @overload
    def CreateSignificantWhitespace(self, data: str) -> Xml.XmlSignificantWhitespace: ...
    @overload
    def CreateTextNode(self, text: str) -> Xml.XmlText: ...
    @overload
    def CreateWhitespace(self, data: str) -> Xml.XmlWhitespace: ...
    @property
    def Filename(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @overload
    def Load(self, filename: str) -> None: ...
    @overload
    def LoadSingleElement(self, filename: str, sourceReader: Xml.XmlTextReader) -> None: ...
    @property
    def NodeInserting(self): ...
    @property
    def NodeInserted(self): ...
    @property
    def NodeRemoving(self): ...
    @property
    def NodeRemoved(self): ...
    @property
    def NodeChanging(self): ...
    @property
    def NodeChanged(self): ...

class ConnectionStringSettings(ConfigurationElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, connectionString: str): ...
    @overload
    def __init__(self, name: str, connectionString: str, providerName: str): ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProviderName(self) -> str: ...
    @ConnectionString.setter
    def ConnectionString(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @ProviderName.setter
    def ProviderName(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Item(self) -> ConnectionStringSettings: ...
    @property
    def Item(self) -> ConnectionStringSettings: ...
    @overload
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ConnectionStringsSection(ConfigurationSection):
    """    """
    def __init__(self): ...
    @property
    def ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation(object):
    """    """
    @property
    def HostingContext(self) -> object: ...
    @property
    def IsMachineLevel(self) -> bool: ...
    @overload
    def GetSection(self, sectionName: str) -> object: ...

class DefaultSection(ConfigurationSection):
    """    """
    def __init__(self): ...

class DefaultSettingValueAttribute(System.Attribute):
    """    """
    def __init__(self, value: str): ...
    @property
    def Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    """    """
    def __init__(self): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class ElementInformation(object):
    """    """
    @property
    def Errors(self) -> Collections.ICollection: ...
    @property
    def IsCollection(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsPresent(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Properties(self) -> PropertyInformationCollection: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...

class ExeConfigurationFileMap(ConfigurationFileMap):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, machineConfigFileName: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def ExeConfigFilename(self) -> str: ...
    @property
    def LocalUserConfigFilename(self) -> str: ...
    @property
    def RoamingUserConfigFilename(self) -> str: ...
    @ExeConfigFilename.setter
    def ExeConfigFilename(self, value: System.Void): ...
    @LocalUserConfigFilename.setter
    def LocalUserConfigFilename(self, value: System.Void): ...
    @RoamingUserConfigFilename.setter
    def RoamingUserConfigFilename(self, value: System.Void): ...

class ExeContext(object):
    """    """
    @property
    def ExePath(self) -> str: ...
    @property
    def UserLevel(self) -> ConfigurationUserLevel: ...

class GenericEnumConverter(ConfigurationConverterBase):
    """    """
    def __init__(self, typeEnum: System.Type): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class IApplicationSettingsProvider:
    """    """
    @overload
    def GetPreviousVersion(self, context: SettingsContext, property_: SettingsProperty) -> SettingsPropertyValue: ...
    @overload
    def Reset(self, context: SettingsContext) -> None: ...
    @overload
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    """    """
    @overload
    def Create(self, parent: object, configContext: object, section: Xml.XmlNode) -> object: ...

class IgnoreSection(ConfigurationSection):
    """    """
    def __init__(self): ...

class IgnoreSectionHandler(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parent: object, configContext: object, section: Xml.XmlNode) -> object: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class IntegerValidator(ConfigurationValidatorBase):
    """    """
    @overload
    def __init__(self, minValue: int, maxValue: int): ...
    @overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...

class IriParsingElement(ConfigurationElement):
    """    """
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class ISettingsProviderService:
    """    """
    @overload
    def GetSettingsProvider(self, property_: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def AllKeys(self) -> System.System.Array[str]: ...
    @property
    def Item(self) -> KeyValueConfigurationElement: ...
    @overload
    def Remove(self, key: str) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    """    """
    def __init__(self, key: str, value: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class LocalFileSettingsProvider(SettingsProvider):
    """    """
    def __init__(self): ...
    @property
    def ApplicationName(self) -> str: ...
    @overload
    def GetPreviousVersion(self, context: SettingsContext, property_: SettingsProperty) -> SettingsPropertyValue: ...
    @overload
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    @overload
    def Initialize(self, name: str, values: Specialized.NameValueCollection) -> None: ...
    @overload
    def Reset(self, context: SettingsContext) -> None: ...
    @ApplicationName.setter
    def ApplicationName(self, value: System.Void): ...
    @overload
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    @overload
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class LongValidator(ConfigurationValidatorBase):
    """    """
    @overload
    def __init__(self, minValue: System.Int64, maxValue: System.Int64): ...
    @overload
    def __init__(self, minValue: System.Int64, maxValue: System.Int64, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: System.Int64, maxValue: System.Int64, rangeIsExclusive: bool, resolution: System.Int64): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> System.Int64: ...
    @property
    def MinValue(self) -> System.Int64: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: System.Void): ...
    @MaxValue.setter
    def MaxValue(self, value: System.Void): ...
    @MinValue.setter
    def MinValue(self, value: System.Void): ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def AllKeys(self) -> System.System.Array[str]: ...
    @property
    def Item(self) -> NameValueConfigurationElement: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class NameValueConfigurationElement(ConfigurationElement):
    """    """
    def __init__(self, name: str, value: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class NameValueFileSectionHandler(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parent: object, configContext: object, section: Xml.XmlNode) -> object: ...

class NameValueSectionHandler(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parent: object, context: object, section: Xml.XmlNode) -> object: ...

class OverrideMode(enum.Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    """    """
    def __init__(self): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PropertyInformation(object):
    """    """
    @property
    def Converter(self) -> ComponentModel.TypeConverter: ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...
    @property
    def Value(self) -> object: ...
    @property
    def ValueOrigin(self) -> PropertyValueOrigin: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class PropertyInformationCollection(Specialized.NameObjectCollectionBase):
    """    """
    @overload
    def CopyTo(self, array: System.Array[PropertyInformation], index: int) -> None: ...
    @property
    def Item(self) -> PropertyInformation: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class PropertyValueOrigin(enum.Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration(object):
    """    """
    @property
    def RsaProviderName(self) -> str: ...
    @property
    def DataProtectionProviderName(self) -> str: ...
    @property
    def ProtectedDataSectionName(self) -> str: ...
    @property
    def DefaultProvider(self) -> str: ...
    @property
    def Providers(self) -> ProtectedConfigurationProviderCollection: ...

class ProtectedConfigurationProvider(Provider.ProviderBase):
    """    """
    @overload
    def Decrypt(self, encryptedNode: Xml.XmlNode) -> Xml.XmlNode: ...
    @overload
    def Encrypt(self, node: Xml.XmlNode) -> Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(Provider.ProviderCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, provider: Provider.ProviderBase) -> None: ...
    @property
    def Item(self) -> ProtectedConfigurationProvider: ...

class ProtectedConfigurationSection(ConfigurationSection):
    """    """
    def __init__(self): ...
    @property
    def DefaultProvider(self) -> str: ...
    @property
    def Providers(self) -> ProviderSettingsCollection: ...
    @DefaultProvider.setter
    def DefaultProvider(self, value: System.Void): ...

class ProtectedProviderSettings(ConfigurationElement):
    """    """
    def __init__(self): ...
    @property
    def Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, type_: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> Specialized.NameValueCollection: ...
    @property
    def Type(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, provider: ProviderSettings) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def Item(self) -> ProviderSettings: ...
    @property
    def Item(self) -> ProviderSettings: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class RegexStringValidator(ConfigurationValidatorBase):
    """    """
    def __init__(self, regex: str): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self, regex: str): ...
    @property
    def Regex(self) -> str: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    """    """
    def __init__(self): ...
    @overload
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    @overload
    def Decrypt(self, encryptedNode: Xml.XmlNode) -> Xml.XmlNode: ...
    @overload
    def DeleteKey() -> None: ...
    @overload
    def Encrypt(self, node: Xml.XmlNode) -> Xml.XmlNode: ...
    @overload
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    @property
    def CspProviderName(self) -> str: ...
    @property
    def KeyContainerName(self) -> str: ...
    @property
    def RsaPublicKey(self) -> Cryptography.RSAParameters: ...
    @property
    def UseFIPS(self) -> bool: ...
    @property
    def UseMachineContainer(self) -> bool: ...
    @property
    def UseOAEP(self) -> bool: ...
    @overload
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...

class SchemeSettingElement(ConfigurationElement):
    """    """
    def __init__(self): ...
    @property
    def GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...
    @property
    def Name(self) -> str: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def Item(self) -> SchemeSettingElement: ...
    @property
    def Item(self) -> SchemeSettingElement: ...
    @overload
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SectionInformation(object):
    """    """
    @overload
    def ForceDeclaration() -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...
    @property
    def AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    @property
    def AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    @property
    def AllowLocation(self) -> bool: ...
    @property
    def AllowOverride(self) -> bool: ...
    @property
    def ConfigSource(self) -> str: ...
    @property
    def ForceSave(self) -> bool: ...
    @property
    def InheritInChildApplications(self) -> bool: ...
    @property
    def IsDeclarationRequired(self) -> bool: ...
    @property
    def IsDeclared(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def OverrideMode(self) -> OverrideMode: ...
    @property
    def OverrideModeDefault(self) -> OverrideMode: ...
    @property
    def OverrideModeEffective(self) -> OverrideMode: ...
    @property
    def ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    @property
    def RequirePermission(self) -> bool: ...
    @property
    def RestartOnExternalChanges(self) -> bool: ...
    @property
    def SectionName(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @overload
    def GetParentSection() -> ConfigurationSection: ...
    @overload
    def GetRawXml() -> str: ...
    @overload
    def ProtectSection(self, protectionProvider: str) -> None: ...
    @overload
    def RevertToParent() -> None: ...
    @AllowDefinition.setter
    def AllowDefinition(self, value: System.Void): ...
    @AllowExeDefinition.setter
    def AllowExeDefinition(self, value: System.Void): ...
    @AllowLocation.setter
    def AllowLocation(self, value: System.Void): ...
    @AllowOverride.setter
    def AllowOverride(self, value: System.Void): ...
    @ConfigSource.setter
    def ConfigSource(self, value: System.Void): ...
    @ForceSave.setter
    def ForceSave(self, value: System.Void): ...
    @InheritInChildApplications.setter
    def InheritInChildApplications(self, value: System.Void): ...
    @OverrideMode.setter
    def OverrideMode(self, value: System.Void): ...
    @OverrideModeDefault.setter
    def OverrideModeDefault(self, value: System.Void): ...
    @RequirePermission.setter
    def RequirePermission(self, value: System.Void): ...
    @RestartOnExternalChanges.setter
    def RestartOnExternalChanges(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def SetRawXml(self, rawXml: str) -> None: ...
    @overload
    def UnprotectSection() -> None: ...

class SettingAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class SettingChangingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, settingName: str, settingClass: str, settingKey: str, newValue: object, cancel: bool): ...
    @property
    def NewValue(self) -> object: ...
    @property
    def SettingClass(self) -> str: ...
    @property
    def SettingKey(self) -> str: ...
    @property
    def SettingName(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SettingChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SettingChangingEventArgs) -> None: ...

class SettingElement(ConfigurationElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, serializeAs: SettingsSerializeAs): ...
    @overload
    def Equals(self, settings: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SerializeAs(self) -> SettingsSerializeAs: ...
    @property
    def Value(self) -> SettingValueElement: ...
    @overload
    def GetHashCode() -> int: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @SerializeAs.setter
    def SerializeAs(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class SettingElementCollection(ConfigurationElementCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, element: SettingElement) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @overload
    def Get(self, elementKey: str) -> SettingElement: ...
    @overload
    def Remove(self, element: SettingElement) -> None: ...

class SettingsAttributeDictionary(Collections.Hashtable):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: SettingsAttributeDictionary): ...

class SettingsBase(object):
    """    """
    @property
    def Context(self) -> SettingsContext: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Properties(self) -> SettingsPropertyCollection: ...
    @property
    def PropertyValues(self) -> SettingsPropertyValueCollection: ...
    @property
    def Providers(self) -> SettingsProviderCollection: ...
    @overload
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    @overload
    def Save() -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...

class SettingsContext(Collections.Hashtable):
    """    """
    def __init__(self): ...

class SettingsDescriptionAttribute(System.Attribute):
    """    """
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    """    """
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    """    """
    def __init__(self, groupName: str): ...
    @property
    def GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    """    """
    def __init__(self, provider: SettingsProvider): ...
    @property
    def Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SettingsLoadedEventArgs) -> None: ...

class SettingsManageability(enum.Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    """    """
    def __init__(self, manageability: SettingsManageability): ...
    @property
    def Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, property_: SettingsProperty) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> SettingsProperty: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def SetReadOnly() -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SettingsPropertyNotFoundException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SettingsPropertyValueCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, property_: SettingsPropertyValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> SettingsPropertyValue: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def SetReadOnly() -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SettingsProvider(Provider.ProviderBase):
    """    """
    @property
    def ApplicationName(self) -> str: ...
    @overload
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    @ApplicationName.setter
    def ApplicationName(self, value: System.Void): ...
    @overload
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, providerTypeName: str): ...
    @overload
    def __init__(self, providerType: System.Type): ...
    @property
    def ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(Provider.ProviderCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, provider: Provider.ProviderBase) -> None: ...
    @property
    def Item(self) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentModel.CancelEventArgs) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    """    """
    def __init__(self, serializeAs: SettingsSerializeAs): ...
    @property
    def SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, settingValue: object) -> bool: ...
    @property
    def ValueXml(self) -> Xml.XmlNode: ...
    @overload
    def GetHashCode() -> int: ...
    @ValueXml.setter
    def ValueXml(self, value: System.Void): ...

class SingleTagSectionHandler(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parent: object, context: object, section: Xml.XmlNode) -> object: ...

class SpecialSetting(enum.Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    """    """
    def __init__(self, specialSetting: SpecialSetting): ...
    @property
    def SpecialSetting(self) -> SpecialSetting: ...

class CommaDelimitedStringCollection(Specialized.StringCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: str) -> None: ...
    @overload
    def AddRange(self, range_: System.System.Array[str]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> CommaDelimitedStringCollection: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @overload
    def Insert(self, index: int, value: str) -> None: ...
    @overload
    def Remove(self, value: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetReadOnly() -> None: ...
    @overload
    def ToString() -> str: ...

class StringValidator(ConfigurationValidatorBase):
    """    """
    @overload
    def __init__(self, minLength: int): ...
    @overload
    def __init__(self, minLength: int, maxLength: int): ...
    @overload
    def __init__(self, minLength: int, maxLength: int, invalidCharacters: str): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def InvalidCharacters(self) -> str: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinLength(self) -> int: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @InvalidCharacters.setter
    def InvalidCharacters(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @MinLength.setter
    def MinLength(self, value: System.Void): ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    """    """
    def __init__(self, baseClass: System.Type): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self, baseClass: System.Type): ...
    @property
    def BaseClass(self) -> System.Type: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    """    """
    @overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan): ...
    @overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool, resolutionInSeconds: System.Int64): ...
    @overload
    def CanValidate(self, type_: System.Type) -> bool: ...
    @overload
    def Validate(self, value: object) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    """    """
    def __init__(self): ...
    @property
    def TimeSpanMinValue(self) -> str: ...
    @property
    def TimeSpanMaxValue(self) -> str: ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> System.TimeSpan: ...
    @property
    def MaxValueString(self) -> str: ...
    @property
    def MinValue(self) -> System.TimeSpan: ...
    @property
    def MinValueString(self) -> str: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: System.Void): ...
    @MaxValueString.setter
    def MaxValueString(self, value: System.Void): ...
    @MinValueString.setter
    def MinValueString(self, value: System.Void): ...

class TypeNameConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class UriSection(ConfigurationSection):
    """    """
    def __init__(self): ...
    @property
    def Idn(self) -> IdnElement: ...
    @property
    def IriParsing(self) -> IriParsingElement: ...
    @property
    def SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UserScopedSettingAttribute(SettingAttribute):
    """    """
    def __init__(self): ...

class UserSettingsGroup(ConfigurationSectionGroup):
    """    """
    def __init__(self): ...

class ValidatorCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, value: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, value: object) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, data: object) -> object: ...
    @overload
    def ConvertTo(self, ctx: ComponentModel.ITypeDescriptorContext, ci: Globalization.CultureInfo, value: object, type_: System.Type) -> object: ...

class SettingsProperty(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, propertyToCopy: SettingsProperty): ...
    @overload
    def __init__(self, name: str, propertyType: System.Type, provider: SettingsProvider, isReadOnly: bool, defaultValue: object, serializeAs: SettingsSerializeAs, attributes: SettingsAttributeDictionary, throwOnErrorDeserializing: bool, throwOnErrorSerializing: bool): ...
    @property
    def Attributes(self) -> SettingsAttributeDictionary: ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @property
    def Provider(self) -> SettingsProvider: ...
    @property
    def SerializeAs(self) -> SettingsSerializeAs: ...
    @property
    def ThrowOnErrorDeserializing(self) -> bool: ...
    @property
    def ThrowOnErrorSerializing(self) -> bool: ...
    @DefaultValue.setter
    def DefaultValue(self, value: System.Void): ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PropertyType.setter
    def PropertyType(self, value: System.Void): ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @SerializeAs.setter
    def SerializeAs(self, value: System.Void): ...
    @ThrowOnErrorDeserializing.setter
    def ThrowOnErrorDeserializing(self, value: System.Void): ...
    @ThrowOnErrorSerializing.setter
    def ThrowOnErrorSerializing(self, value: System.Void): ...

class SettingsPropertyValue(object):
    """    """
    def __init__(self, property_: SettingsProperty): ...
    @property
    def Deserialized(self) -> bool: ...
    @property
    def IsDirty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Property(self) -> SettingsProperty: ...
    @property
    def PropertyValue(self) -> object: ...
    @property
    def SerializedValue(self) -> object: ...
    @property
    def UsingDefaultValue(self) -> bool: ...
    @Deserialized.setter
    def Deserialized(self, value: System.Void): ...
    @IsDirty.setter
    def IsDirty(self, value: System.Void): ...
    @PropertyValue.setter
    def PropertyValue(self, value: System.Void): ...
    @SerializedValue.setter
    def SerializedValue(self, value: System.Void): ...

class SettingsSerializeAs(enum.Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

# endregion
