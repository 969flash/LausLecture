"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Evidence", "EvidenceBase"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["AllMembershipCondition", "ApplicationDirectory", "ApplicationDirectoryMembershipCondition", "ApplicationTrust", "ApplicationTrustCollection", "ApplicationTrustEnumerator", "ApplicationVersionMatch", "CodeConnectAccess", "CodeGroup", "GacMembershipCondition", "Hash", "HashMembershipCondition", "IMembershipCondition", "NetCodeGroup", "PolicyException", "PolicyLevel", "PolicyStatement", "PolicyStatementAttribute", "PublisherMembershipCondition", "SiteMembershipCondition", "TrustManagerContext", "TrustManagerUIContext", "UrlMembershipCondition", "ZoneMembershipCondition"]
# endregion

# region: Imports
from System import Collections
from System import Reflection
from System import Security
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Cryptography
from System.Security.Cryptography import X509Certificates
from typing import overload
import enum
import System
# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class AllMembershipCondition(object):
    """    """
    def __init__(self): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class ApplicationDirectory(EvidenceBase):
    """    """
    def __init__(self, name: str): ...
    @overload
    def Copy() -> object: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Directory(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ApplicationDirectoryMembershipCondition(object):
    """    """
    def __init__(self): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class ApplicationTrust(EvidenceBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, identity: System.ApplicationIdentity): ...
    @overload
    def __init__(self, defaultGrantSet: Security.PermissionSet, fullTrustAssemblies: Generic.IEnumerable): ...
    @overload
    def FromXml(self, element: Security.SecurityElement) -> None: ...
    @property
    def ApplicationIdentity(self) -> System.ApplicationIdentity: ...
    @property
    def DefaultGrantSet(self) -> PolicyStatement: ...
    @property
    def ExtraInfo(self) -> object: ...
    @property
    def FullTrustAssemblies(self) -> Generic.IList: ...
    @property
    def IsApplicationTrustedToRun(self) -> bool: ...
    @property
    def Persist(self) -> bool: ...
    @ApplicationIdentity.setter
    def ApplicationIdentity(self, value: System.Void): ...
    @DefaultGrantSet.setter
    def DefaultGrantSet(self, value: System.Void): ...
    @ExtraInfo.setter
    def ExtraInfo(self, value: System.Void): ...
    @IsApplicationTrustedToRun.setter
    def IsApplicationTrustedToRun(self, value: System.Void): ...
    @Persist.setter
    def Persist(self, value: System.Void): ...
    @overload
    def ToXml() -> Security.SecurityElement: ...

class ApplicationTrustCollection(object):
    """    """
    @overload
    def Add(self, trust: ApplicationTrust) -> int: ...
    @overload
    def AddRange(self, trusts: ApplicationTrustCollection) -> None: ...
    @overload
    def AddRange(self, trusts: System.Array[ApplicationTrust]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, array: System.Array[ApplicationTrust], index: int) -> None: ...
    @overload
    def Find(self, applicationIdentity: System.ApplicationIdentity, versionMatch: ApplicationVersionMatch) -> ApplicationTrustCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> ApplicationTrust: ...
    @property
    def Item(self) -> ApplicationTrust: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> ApplicationTrustEnumerator: ...
    @overload
    def Remove(self, trust: ApplicationTrust) -> None: ...
    @overload
    def Remove(self, applicationIdentity: System.ApplicationIdentity, versionMatch: ApplicationVersionMatch) -> None: ...
    @overload
    def RemoveRange(self, trusts: System.Array[ApplicationTrust]) -> None: ...
    @overload
    def RemoveRange(self, trusts: ApplicationTrustCollection) -> None: ...

class ApplicationTrustEnumerator(object):
    """    """
    @property
    def Current(self) -> ApplicationTrust: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ApplicationVersionMatch(enum.Enum):
    MatchExactVersion = 0
    MatchAllVersions = 1

class CodeConnectAccess(object):
    """    """
    def __init__(self, allowScheme: str, allowPort: int): ...
    @property
    def AnyScheme(self) -> str: ...
    @property
    def DefaultPort(self) -> int: ...
    @property
    def OriginPort(self) -> int: ...
    @property
    def OriginScheme(self) -> str: ...
    @overload
    @staticmethod
    def CreateAnySchemeAccess(allowPort: int) -> CodeConnectAccess: ...
    @overload
    @staticmethod
    def CreateOriginSchemeAccess(allowPort: int) -> CodeConnectAccess: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Port(self) -> int: ...
    @property
    def Scheme(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class CodeGroup(object):
    """    """
    @overload
    def AddChild(self, group: CodeGroup) -> None: ...
    @overload
    def Copy() -> CodeGroup: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, cg: CodeGroup, compareChildren: bool) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def AttributeString(self) -> str: ...
    @property
    def Children(self) -> Collections.IList: ...
    @property
    def Description(self) -> str: ...
    @property
    def MembershipCondition(self) -> IMembershipCondition: ...
    @property
    def MergeLogic(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PermissionSetName(self) -> str: ...
    @property
    def PolicyStatement(self) -> PolicyStatement: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def RemoveChild(self, group: CodeGroup) -> None: ...
    @overload
    def Resolve(self, evidence: Evidence) -> PolicyStatement: ...
    @overload
    def ResolveMatchingCodeGroups(self, evidence: Evidence) -> CodeGroup: ...
    @Children.setter
    def Children(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @MembershipCondition.setter
    def MembershipCondition(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @PolicyStatement.setter
    def PolicyStatement(self, value: System.Void): ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class GacMembershipCondition(object):
    """    """
    def __init__(self): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class Hash(EvidenceBase):
    """    """
    def __init__(self, assembly: Reflection.Assembly): ...
    @overload
    @staticmethod
    def CreateMD5(md5: System.System.Array[System.Byte]) -> Hash: ...
    @overload
    @staticmethod
    def CreateSHA1(sha1: System.System.Array[System.Byte]) -> Hash: ...
    @overload
    @staticmethod
    def CreateSHA256(sha256: System.System.Array[System.Byte]) -> Hash: ...
    @overload
    def GenerateHash(self, hashAlg: Cryptography.HashAlgorithm) -> System.System.Array[System.Byte]: ...
    @property
    def MD5(self) -> System.System.Array[System.Byte]: ...
    @property
    def SHA1(self) -> System.System.Array[System.Byte]: ...
    @property
    def SHA256(self) -> System.System.Array[System.Byte]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class HashMembershipCondition(object):
    """    """
    def __init__(self, hashAlg: Cryptography.HashAlgorithm, value: System.System.Array[System.Byte]): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def HashAlgorithm(self) -> Cryptography.HashAlgorithm: ...
    @property
    def HashValue(self) -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashCode() -> int: ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: System.Void): ...
    @HashValue.setter
    def HashValue(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class IMembershipCondition:
    """    """
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ToString() -> str: ...

class NetCodeGroup(CodeGroup):
    """    """
    def __init__(self, membershipCondition: IMembershipCondition): ...
    @property
    def AbsentOriginScheme(self) -> str: ...
    @property
    def AnyOtherOriginScheme(self) -> str: ...
    @overload
    def AddConnectAccess(self, originScheme: str, connectAccess: CodeConnectAccess) -> None: ...
    @overload
    def Copy() -> CodeGroup: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def AttributeString(self) -> str: ...
    @property
    def MergeLogic(self) -> str: ...
    @property
    def PermissionSetName(self) -> str: ...
    @overload
    def GetConnectAccessRules() -> Collections.System.Array[Collections.DictionaryEntry]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ResetConnectAccess() -> None: ...
    @overload
    def Resolve(self, evidence: Evidence) -> PolicyStatement: ...
    @overload
    def ResolveMatchingCodeGroups(self, evidence: Evidence) -> CodeGroup: ...

class PolicyException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, exception: System.Exception): ...

class PolicyLevel(object):
    """    """
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @property
    def FullTrustAssemblies(self) -> Collections.IList: ...
    @property
    def Label(self) -> str: ...
    @property
    def NamedPermissionSets(self) -> Collections.IList: ...
    @property
    def RootCodeGroup(self) -> CodeGroup: ...
    @property
    def StoreLocation(self) -> str: ...
    @property
    def Type(self) -> Security.PolicyLevelType: ...
    @overload
    def Recover() -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Resolve(self, evidence: Evidence) -> PolicyStatement: ...
    @overload
    def ResolveMatchingCodeGroups(self, evidence: Evidence) -> CodeGroup: ...
    @RootCodeGroup.setter
    def RootCodeGroup(self, value: System.Void): ...
    @overload
    def ToXml() -> Security.SecurityElement: ...

class PolicyStatement(object):
    """    """
    @overload
    def __init__(self, permSet: Security.PermissionSet): ...
    @overload
    def __init__(self, permSet: Security.PermissionSet, attributes: PolicyStatementAttribute): ...
    @overload
    def Copy() -> PolicyStatement: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, et: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, et: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def Attributes(self) -> PolicyStatementAttribute: ...
    @property
    def AttributeString(self) -> str: ...
    @property
    def PermissionSet(self) -> Security.PermissionSet: ...
    @overload
    def GetHashCode() -> int: ...
    @Attributes.setter
    def Attributes(self, value: System.Void): ...
    @PermissionSet.setter
    def PermissionSet(self, value: System.Void): ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class PolicyStatementAttribute(enum.Enum):
    Nothing = 0
    Exclusive = 1
    LevelFinal = 2
    All = 3

class PublisherMembershipCondition(object):
    """    """
    def __init__(self, certificate: X509Certificates.X509Certificate): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate: ...
    @overload
    def GetHashCode() -> int: ...
    @Certificate.setter
    def Certificate(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class SiteMembershipCondition(object):
    """    """
    def __init__(self, site: str): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def Site(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class TrustManagerContext(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uiContext: TrustManagerUIContext): ...
    @property
    def IgnorePersistedDecision(self) -> bool: ...
    @property
    def KeepAlive(self) -> bool: ...
    @property
    def NoPrompt(self) -> bool: ...
    @property
    def Persist(self) -> bool: ...
    @property
    def PreviousApplicationIdentity(self) -> System.ApplicationIdentity: ...
    @property
    def UIContext(self) -> TrustManagerUIContext: ...
    @IgnorePersistedDecision.setter
    def IgnorePersistedDecision(self, value: System.Void): ...
    @KeepAlive.setter
    def KeepAlive(self, value: System.Void): ...
    @NoPrompt.setter
    def NoPrompt(self, value: System.Void): ...
    @Persist.setter
    def Persist(self, value: System.Void): ...
    @PreviousApplicationIdentity.setter
    def PreviousApplicationIdentity(self, value: System.Void): ...
    @UIContext.setter
    def UIContext(self, value: System.Void): ...

class TrustManagerUIContext(enum.Enum):
    Install = 0
    Upgrade = 1
    Run = 2

class UrlMembershipCondition(object):
    """    """
    def __init__(self, url: str): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def Url(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @Url.setter
    def Url(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

class ZoneMembershipCondition(object):
    """    """
    def __init__(self, zone: Security.SecurityZone): ...
    @overload
    def Check(self, evidence: Evidence) -> bool: ...
    @overload
    def Copy() -> IMembershipCondition: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FromXml(self, e: Security.SecurityElement) -> None: ...
    @overload
    def FromXml(self, e: Security.SecurityElement, level: PolicyLevel) -> None: ...
    @property
    def SecurityZone(self) -> Security.SecurityZone: ...
    @overload
    def GetHashCode() -> int: ...
    @SecurityZone.setter
    def SecurityZone(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToXml() -> Security.SecurityElement: ...
    @overload
    def ToXml(self, level: PolicyLevel) -> Security.SecurityElement: ...

# endregion

# region: System.Security.AccessControl, Version=7.0.0.0

class Evidence(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, evidence: Evidence): ...
    @overload
    def __init__(self, hostEvidence: System.System.Array[object], assemblyEvidence: System.System.Array[object]): ...
    @overload
    def __init__(self, hostEvidence: System.Array[EvidenceBase], assemblyEvidence: System.Array[EvidenceBase]): ...
    @overload
    def AddAssemblyEvidence(self, evidence: T) -> None: ...
    @overload
    def AddHostEvidence(self, evidence: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clone() -> Evidence: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetAssemblyEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetAssemblyEvidence() -> T: ...
    @overload
    def GetHostEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetHostEvidence() -> T: ...
    @overload
    def Merge(self, evidence: Evidence) -> None: ...
    @overload
    def RemoveType(self, t: System.Type) -> None: ...
    @Locked.setter
    def Locked(self, value: System.Void): ...

class EvidenceBase(object):
    """    """
    @overload
    def Clone() -> EvidenceBase: ...

# endregion
