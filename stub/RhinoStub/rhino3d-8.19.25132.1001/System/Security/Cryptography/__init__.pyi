"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["X509Certificates", "Aes", "AesCcm", "AesGcm", "AsnEncodedData", "AsnEncodedDataCollection", "AsnEncodedDataEnumerator", "AsymmetricAlgorithm", "AsymmetricKeyExchangeDeformatter", "AsymmetricKeyExchangeFormatter", "AsymmetricSignatureDeformatter", "AsymmetricSignatureFormatter", "FromBase64TransformMode", "ToBase64Transform", "FromBase64Transform", "ChaCha20Poly1305", "CipherMode", "CngAlgorithm", "CngAlgorithmGroup", "CngExportPolicies", "CngKeyBlobFormat", "CngKeyCreationOptions", "CngKeyCreationParameters", "CngKeyHandleOpenOptions", "CngKeyOpenOptions", "CngKeyUsages", "CngProperty", "CngPropertyCollection", "CngPropertyOptions", "CngProvider", "CngUIPolicy", "CngUIProtectionLevels", "CryptographicOperations", "CryptographicUnexpectedOperationException", "CryptoConfig", "CryptoStream", "CryptoStreamMode", "CspParameters", "CspProviderFlags", "DeriveBytes", "DES", "DSA", "DSAParameters", "DSASignatureDeformatter", "DSASignatureFormat", "DSASignatureFormatter", "ECAlgorithm", "ECCurve", "ECCurveType", "NamedCurves", "ECDiffieHellman", "ECDiffieHellmanKeyDerivationFunction", "ECDiffieHellmanPublicKey", "ECDsa", "ECKeyXmlFormat", "ECParameters", "ECPoint", "HashAlgorithm", "HashAlgorithmName", "HKDF", "HMAC", "HMACMD5", "HMACSHA1", "HMACSHA256", "HMACSHA384", "HMACSHA512", "ICryptoTransform", "ICspAsymmetricAlgorithm", "IncrementalHash", "KeyedHashAlgorithm", "KeyNumber", "KeySizes", "MaskGenerationMethod", "MD5", "Oid", "OidCollection", "OidEnumerator", "OidGroup", "PaddingMode", "PasswordDeriveBytes", "PbeEncryptionAlgorithm", "PbeParameters", "PemEncoding", "PemFields", "PKCS1MaskGenerationMethod", "RandomNumberGenerator", "RC2", "Rfc2898DeriveBytes", "RSA", "RSAEncryptionPadding", "RSAEncryptionPaddingMode", "RSAOAEPKeyExchangeDeformatter", "RSAOAEPKeyExchangeFormatter", "RSAParameters", "RSAPKCS1KeyExchangeDeformatter", "RSAPKCS1KeyExchangeFormatter", "RSAPKCS1SignatureDeformatter", "RSAPKCS1SignatureFormatter", "RSASignaturePadding", "RSASignaturePaddingMode", "SHA1", "SHA256", "SHA384", "SHA512", "SignatureDescription", "SymmetricAlgorithm", "TripleDES", "DSACng", "ECDiffieHellmanCng", "ECDsaCng", "RSACng", "AesCng", "CngKey", "CspKeyContainerInfo", "DSACryptoServiceProvider", "ECDiffieHellmanCngPublicKey", "DSAOpenSsl", "ECDiffieHellmanOpenSsl", "ECDsaOpenSsl", "RSAOpenSsl", "SafeEvpPKeyHandle", "RSACryptoServiceProvider", "TripleDESCng"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import IO
from System import Security
from System import Threading
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["DataProtectionScope", "ProtectedData"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["X509Certificates"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml", "Pkcs", "CryptographicAttributeObject", "CryptographicAttributeObjectCollection", "CryptographicAttributeObjectEnumerator"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CryptographicException"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class CryptographicException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, hr: int): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, format_: str, insert: str): ...

# endregion

# region: System.Security.Cryptography.Pkcs, Version=7.0.0.0

class CryptographicAttributeObject(object):
    """    """
    @overload
    def __init__(self, oid: Oid): ...
    @overload
    def __init__(self, oid: Oid, values: AsnEncodedDataCollection): ...
    @property
    def Oid(self) -> Oid: ...
    @property
    def Values(self) -> AsnEncodedDataCollection: ...

class CryptographicAttributeObjectCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attribute: CryptographicAttributeObject): ...
    @overload
    def Add(self, asnEncodedData: AsnEncodedData) -> int: ...
    @overload
    def Add(self, attribute: CryptographicAttributeObject) -> int: ...
    @overload
    def CopyTo(self, array: System.Array[CryptographicAttributeObject], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> CryptographicAttributeObject: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> CryptographicAttributeObjectEnumerator: ...
    @overload
    def Remove(self, attribute: CryptographicAttributeObject) -> None: ...

class CryptographicAttributeObjectEnumerator(object):
    """    """
    @property
    def Current(self) -> CryptographicAttributeObject: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

# endregion

# region: System.Security.Cryptography.ProtectedData, Version=7.0.0.0

class DataProtectionScope(enum.Enum):
    CurrentUser = 0
    LocalMachine = 1

class ProtectedData(object):
    """    """
    @overload
    @staticmethod
    def Protect(userData: System.System.Array[System.Byte], optionalEntropy: System.System.Array[System.Byte], scope: DataProtectionScope) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Unprotect(encryptedData: System.System.Array[System.Byte], optionalEntropy: System.System.Array[System.Byte], scope: DataProtectionScope) -> System.System.Array[System.Byte]: ...

# endregion

# region: System.Security.Cryptography, Version=7.0.0.0

class Aes(SymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> Aes: ...

class AesCcm(object):
    """    """
    @overload
    def __init__(self, key: System.ReadOnlySpan): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def Decrypt(self, nonce: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decrypt(self, nonce: System.ReadOnlySpan, ciphertext: System.ReadOnlySpan, tag: System.ReadOnlySpan, plaintext: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Encrypt(self, nonce: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Encrypt(self, nonce: System.ReadOnlySpan, plaintext: System.ReadOnlySpan, ciphertext: System.Span, tag: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def NonceByteSizes(self) -> KeySizes: ...
    @property
    def TagByteSizes(self) -> KeySizes: ...

class AesGcm(object):
    """    """
    @overload
    def __init__(self, key: System.ReadOnlySpan): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def Decrypt(self, nonce: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decrypt(self, nonce: System.ReadOnlySpan, ciphertext: System.ReadOnlySpan, tag: System.ReadOnlySpan, plaintext: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Encrypt(self, nonce: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Encrypt(self, nonce: System.ReadOnlySpan, plaintext: System.ReadOnlySpan, ciphertext: System.Span, tag: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def NonceByteSizes(self) -> KeySizes: ...
    @property
    def TagByteSizes(self) -> KeySizes: ...

class AsnEncodedData(object):
    """    """
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan): ...
    @overload
    def __init__(self, asnEncodedData: AsnEncodedData): ...
    @overload
    def __init__(self, oid: Oid, rawData: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, oid: str, rawData: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, oid: Oid, rawData: System.ReadOnlySpan): ...
    @overload
    def __init__(self, oid: str, rawData: System.ReadOnlySpan): ...
    @overload
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @overload
    def Format(self, multiLine: bool) -> str: ...
    @property
    def Oid(self) -> Oid: ...
    @property
    def RawData(self) -> System.System.Array[System.Byte]: ...
    @Oid.setter
    def Oid(self, value: System.Void): ...
    @RawData.setter
    def RawData(self, value: System.Void): ...

class AsnEncodedDataCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, asnEncodedData: AsnEncodedData): ...
    @overload
    def Add(self, asnEncodedData: AsnEncodedData) -> int: ...
    @overload
    def CopyTo(self, array: System.Array[AsnEncodedData], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> AsnEncodedData: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> AsnEncodedDataEnumerator: ...
    @overload
    def Remove(self, asnEncodedData: AsnEncodedData) -> None: ...

class AsnEncodedDataEnumerator(object):
    """    """
    @property
    def Current(self) -> AsnEncodedData: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class AsymmetricAlgorithm(object):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKeyPem(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> str: ...
    @overload
    def ExportPkcs8PrivateKey() -> System.System.Array[System.Byte]: ...
    @overload
    def ExportPkcs8PrivateKeyPem() -> str: ...
    @overload
    def ExportSubjectPublicKeyInfo() -> System.System.Array[System.Byte]: ...
    @overload
    def ExportSubjectPublicKeyInfoPem() -> str: ...
    @overload
    def FromXmlString(self, xmlString: str) -> None: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, password: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, passwordBytes: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromPem(self, input_: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportSubjectPublicKeyInfo(self, source: System.ReadOnlySpan) -> (int): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @overload
    def ToXmlString(self, includePrivateParameters: bool) -> str: ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKeyPem(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKeyPem(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportSubjectPublicKeyInfoPem(self, destination: System.Span) -> (bool, int): ...

class AsymmetricKeyExchangeDeformatter(object):
    """    """
    @overload
    def DecryptKeyExchange(self, rgb: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @Parameters.setter
    def Parameters(self, value: System.Void): ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class AsymmetricKeyExchangeFormatter(object):
    """    """
    @overload
    def CreateKeyExchange(self, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateKeyExchange(self, data: System.System.Array[System.Byte], symAlgType: System.Type) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class AsymmetricSignatureDeformatter(object):
    """    """
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...
    @overload
    def VerifySignature(self, hash_: HashAlgorithm, rgbSignature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class AsymmetricSignatureFormatter(object):
    """    """
    @overload
    def CreateSignature(self, hash_: HashAlgorithm) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class FromBase64TransformMode(enum.Enum):
    IgnoreWhiteSpaces = 0
    DoNotIgnoreWhiteSpaces = 1

class ToBase64Transform(object):
    """    """
    def __init__(self): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CanReuseTransform(self) -> bool: ...
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @property
    def InputBlockSize(self) -> int: ...
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def TransformBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int, outputBuffer: System.System.Array[System.Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int) -> System.System.Array[System.Byte]: ...

class FromBase64Transform(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, whitespaces: FromBase64TransformMode): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CanReuseTransform(self) -> bool: ...
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @property
    def InputBlockSize(self) -> int: ...
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def TransformBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int, outputBuffer: System.System.Array[System.Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int) -> System.System.Array[System.Byte]: ...

class ChaCha20Poly1305(object):
    """    """
    @overload
    def __init__(self, key: System.ReadOnlySpan): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def Decrypt(self, nonce: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decrypt(self, nonce: System.ReadOnlySpan, ciphertext: System.ReadOnlySpan, tag: System.ReadOnlySpan, plaintext: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Encrypt(self, nonce: System.System.Array[System.Byte], plaintext: System.System.Array[System.Byte], ciphertext: System.System.Array[System.Byte], tag: System.System.Array[System.Byte], associatedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Encrypt(self, nonce: System.ReadOnlySpan, plaintext: System.ReadOnlySpan, ciphertext: System.Span, tag: System.Span, associatedData: System.ReadOnlySpan) -> None: ...
    @property
    def IsSupported(self) -> bool: ...

class CipherMode(enum.Enum):
    CBC = 1
    ECB = 2
    OFB = 3
    CFB = 4
    CTS = 5

class CngAlgorithm(object):
    """    """
    def __init__(self, algorithm: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CngAlgorithm) -> bool: ...
    @property
    def Algorithm(self) -> str: ...
    @property
    def ECDiffieHellman(self) -> CngAlgorithm: ...
    @property
    def ECDiffieHellmanP256(self) -> CngAlgorithm: ...
    @property
    def ECDiffieHellmanP384(self) -> CngAlgorithm: ...
    @property
    def ECDiffieHellmanP521(self) -> CngAlgorithm: ...
    @property
    def ECDsa(self) -> CngAlgorithm: ...
    @property
    def ECDsaP256(self) -> CngAlgorithm: ...
    @property
    def ECDsaP384(self) -> CngAlgorithm: ...
    @property
    def ECDsaP521(self) -> CngAlgorithm: ...
    @property
    def MD5(self) -> CngAlgorithm: ...
    @property
    def Rsa(self) -> CngAlgorithm: ...
    @property
    def Sha1(self) -> CngAlgorithm: ...
    @property
    def Sha256(self) -> CngAlgorithm: ...
    @property
    def Sha384(self) -> CngAlgorithm: ...
    @property
    def Sha512(self) -> CngAlgorithm: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CngAlgorithmGroup(object):
    """    """
    def __init__(self, algorithmGroup: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CngAlgorithmGroup) -> bool: ...
    @property
    def AlgorithmGroup(self) -> str: ...
    @property
    def DiffieHellman(self) -> CngAlgorithmGroup: ...
    @property
    def Dsa(self) -> CngAlgorithmGroup: ...
    @property
    def ECDiffieHellman(self) -> CngAlgorithmGroup: ...
    @property
    def ECDsa(self) -> CngAlgorithmGroup: ...
    @property
    def Rsa(self) -> CngAlgorithmGroup: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CngExportPolicies(enum.Enum):
    None_ = 0
    AllowExport = 1
    AllowPlaintextExport = 2
    AllowArchiving = 4
    AllowPlaintextArchiving = 8

class CngKeyBlobFormat(object):
    """    """
    def __init__(self, format_: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CngKeyBlobFormat) -> bool: ...
    @property
    def EccFullPrivateBlob(self) -> CngKeyBlobFormat: ...
    @property
    def EccFullPublicBlob(self) -> CngKeyBlobFormat: ...
    @property
    def EccPrivateBlob(self) -> CngKeyBlobFormat: ...
    @property
    def EccPublicBlob(self) -> CngKeyBlobFormat: ...
    @property
    def Format(self) -> str: ...
    @property
    def GenericPrivateBlob(self) -> CngKeyBlobFormat: ...
    @property
    def GenericPublicBlob(self) -> CngKeyBlobFormat: ...
    @property
    def OpaqueTransportBlob(self) -> CngKeyBlobFormat: ...
    @property
    def Pkcs8PrivateBlob(self) -> CngKeyBlobFormat: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CngKeyCreationOptions(enum.Enum):
    None_ = 0
    MachineKey = 32
    OverwriteExistingKey = 128

class CngKeyCreationParameters(object):
    """    """
    def __init__(self): ...
    @property
    def ExportPolicy(self) -> System.Nullable: ...
    @property
    def KeyCreationOptions(self) -> CngKeyCreationOptions: ...
    @property
    def KeyUsage(self) -> System.Nullable: ...
    @property
    def Parameters(self) -> CngPropertyCollection: ...
    @property
    def ParentWindowHandle(self) -> System.IntPtr: ...
    @property
    def Provider(self) -> CngProvider: ...
    @property
    def UIPolicy(self) -> CngUIPolicy: ...
    @ExportPolicy.setter
    def ExportPolicy(self, value: System.Void): ...
    @KeyCreationOptions.setter
    def KeyCreationOptions(self, value: System.Void): ...
    @KeyUsage.setter
    def KeyUsage(self, value: System.Void): ...
    @ParentWindowHandle.setter
    def ParentWindowHandle(self, value: System.Void): ...
    @Provider.setter
    def Provider(self, value: System.Void): ...
    @UIPolicy.setter
    def UIPolicy(self, value: System.Void): ...

class CngKeyHandleOpenOptions(enum.Enum):
    None_ = 0
    EphemeralKey = 1

class CngKeyOpenOptions(enum.Enum):
    None_ = 0
    UserKey = 0
    MachineKey = 32
    Silent = 64

class CngKeyUsages(enum.Enum):
    None_ = 0
    Decryption = 1
    Signing = 2
    KeyAgreement = 4
    AllUsages = 16777215

class CngProperty(System.ValueType):
    """    """
    def __init__(self, name: str, value: System.System.Array[System.Byte], options: CngPropertyOptions): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CngProperty) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> CngPropertyOptions: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetValue() -> System.System.Array[System.Byte]: ...

class CngPropertyCollection(ObjectModel.Collection):
    """    """
    def __init__(self): ...

class CngPropertyOptions(enum.Enum):
    None_ = 0
    CustomProperty = 1073741824
    Persist = -2147483648

class CngProvider(object):
    """    """
    def __init__(self, provider: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CngProvider) -> bool: ...
    @property
    def MicrosoftPlatformCryptoProvider(self) -> CngProvider: ...
    @property
    def MicrosoftSmartCardKeyStorageProvider(self) -> CngProvider: ...
    @property
    def MicrosoftSoftwareKeyStorageProvider(self) -> CngProvider: ...
    @property
    def Provider(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CngUIPolicy(object):
    """    """
    @overload
    def __init__(self, protectionLevel: CngUIProtectionLevels): ...
    @overload
    def __init__(self, protectionLevel: CngUIProtectionLevels, friendlyName: str): ...
    @overload
    def __init__(self, protectionLevel: CngUIProtectionLevels, friendlyName: str, description: str): ...
    @overload
    def __init__(self, protectionLevel: CngUIProtectionLevels, friendlyName: str, description: str, useContext: str): ...
    @overload
    def __init__(self, protectionLevel: CngUIProtectionLevels, friendlyName: str, description: str, useContext: str, creationTitle: str): ...
    @property
    def CreationTitle(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def ProtectionLevel(self) -> CngUIProtectionLevels: ...
    @property
    def UseContext(self) -> str: ...

class CngUIProtectionLevels(enum.Enum):
    None_ = 0
    ProtectKey = 1
    ForceHighProtection = 2

class CryptographicOperations(object):
    """    """
    @overload
    @staticmethod
    def FixedTimeEquals(left: System.ReadOnlySpan, right: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def ZeroMemory(buffer: System.Span) -> None: ...

class CryptographicUnexpectedOperationException(CryptographicException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, format_: str, insert: str): ...

class CryptoConfig(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def AddAlgorithm(algorithm: System.Type, names: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def AddOID(oid: str, names: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def CreateFromName(name: str) -> object: ...
    @overload
    @staticmethod
    def CreateFromName(name: str, args: System.System.Array[object]) -> object: ...
    @property
    def AllowOnlyFipsAlgorithms(self) -> bool: ...
    @overload
    @staticmethod
    def MapNameToOID(name: str) -> str: ...

class CryptoStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream, transform: ICryptoTransform, mode: CryptoStreamMode): ...
    @overload
    def __init__(self, stream: IO.Stream, transform: ICryptoTransform, mode: CryptoStreamMode, leaveOpen: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, destination: IO.Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: IO.Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def FlushFinalBlock() -> None: ...
    @overload
    def FlushFinalBlockAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def HasFlushedFinalBlock(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class CryptoStreamMode(enum.Enum):
    Read = 0
    Write = 1

class CspParameters(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dwTypeIn: int): ...
    @overload
    def __init__(self, dwTypeIn: int, strProviderNameIn: str): ...
    @overload
    def __init__(self, dwTypeIn: int, strProviderNameIn: str, strContainerNameIn: str): ...
    @property
    def ProviderType(self) -> int: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def KeyContainerName(self) -> str: ...
    @property
    def KeyNumber(self) -> int: ...
    @property
    def Flags(self) -> CspProviderFlags: ...
    @property
    def KeyPassword(self) -> Security.SecureString: ...
    @property
    def ParentWindowHandle(self) -> System.IntPtr: ...
    @Flags.setter
    def Flags(self, value: System.Void): ...
    @KeyPassword.setter
    def KeyPassword(self, value: System.Void): ...
    @ParentWindowHandle.setter
    def ParentWindowHandle(self, value: System.Void): ...

class CspProviderFlags(enum.Enum):
    NoFlags = 0
    UseMachineKeyStore = 1
    UseDefaultKeyContainer = 2
    UseNonExportableKey = 4
    UseExistingKey = 8
    UseArchivableKey = 16
    UseUserProtectedKey = 32
    NoPrompt = 64
    CreateEphemeralKey = 128

class DeriveBytes(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def GetBytes(self, cb: int) -> System.System.Array[System.Byte]: ...
    @overload
    def Reset() -> None: ...

class DES(SymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> DES: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def IsSemiWeakKey(rgbKey: System.System.Array[System.Byte]) -> bool: ...
    @overload
    @staticmethod
    def IsWeakKey(rgbKey: System.System.Array[System.Byte]) -> bool: ...
    @Key.setter
    def Key(self, value: System.Void): ...

class DSA(AsymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> DSA: ...
    @overload
    @staticmethod
    def Create(keySizeInBits: int) -> DSA: ...
    @overload
    @staticmethod
    def Create(parameters: DSAParameters) -> DSA: ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte], signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> DSAParameters: ...
    @overload
    def FromXmlString(self, xmlString: str) -> None: ...
    @overload
    def GetMaxSignatureSize(self, signatureFormat: DSASignatureFormat) -> int: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, passwordBytes: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, password: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromPem(self, input_: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportParameters(self, parameters: DSAParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportSubjectPublicKeyInfo(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def SignData(self, data: IO.Stream, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: IO.Stream, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def ToXmlString(self, includePrivateParameters: bool) -> str: ...
    @overload
    def TryCreateSignature(self, hash_: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    def TryCreateSignature(self, hash_: System.ReadOnlySpan, destination: System.Span, signatureFormat: DSASignatureFormat) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TrySignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName) -> (bool, int): ...
    @overload
    def TrySignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> (bool, int): ...
    @overload
    def VerifyData(self, data: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifySignature(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan) -> bool: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifySignature(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte], signatureFormat: DSASignatureFormat) -> bool: ...

class DSAParameters(System.ValueType):
    """    """
    @property
    def P(self) -> System.System.Array[System.Byte]: ...
    @property
    def Q(self) -> System.System.Array[System.Byte]: ...
    @property
    def G(self) -> System.System.Array[System.Byte]: ...
    @property
    def Y(self) -> System.System.Array[System.Byte]: ...
    @property
    def J(self) -> System.System.Array[System.Byte]: ...
    @property
    def X(self) -> System.System.Array[System.Byte]: ...
    @property
    def Seed(self) -> System.System.Array[System.Byte]: ...
    @property
    def Counter(self) -> int: ...

class DSASignatureDeformatter(AsymmetricSignatureDeformatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class DSASignatureFormat(enum.Enum):
    IeeeP1363FixedFieldConcatenation = 0
    Rfc3279DerSequence = 1

class DSASignatureFormatter(AsymmetricSignatureFormatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class ECAlgorithm(AsymmetricAlgorithm):
    """    """
    @overload
    def ExportECPrivateKey() -> System.System.Array[System.Byte]: ...
    @overload
    def ExportECPrivateKeyPem() -> str: ...
    @overload
    def ExportExplicitParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def GenerateKey(self, curve: ECCurve) -> None: ...
    @overload
    def ImportECPrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, passwordBytes: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, password: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromPem(self, input_: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportParameters(self, parameters: ECParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportSubjectPublicKeyInfo(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def TryExportECPrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportECPrivateKeyPem(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...

class ECCurve(System.ValueType):
    """    """
    @property
    def A(self) -> System.System.Array[System.Byte]: ...
    @property
    def B(self) -> System.System.Array[System.Byte]: ...
    @property
    def G(self) -> ECPoint: ...
    @property
    def Order(self) -> System.System.Array[System.Byte]: ...
    @property
    def Cofactor(self) -> System.System.Array[System.Byte]: ...
    @property
    def Seed(self) -> System.System.Array[System.Byte]: ...
    @property
    def CurveType(self) -> ECCurveType: ...
    @property
    def Hash(self) -> System.Nullable: ...
    @property
    def Polynomial(self) -> System.System.Array[System.Byte]: ...
    @property
    def Prime(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def CreateFromFriendlyName(oidFriendlyName: str) -> ECCurve: ...
    @overload
    @staticmethod
    def CreateFromOid(curveOid: Oid) -> ECCurve: ...
    @overload
    @staticmethod
    def CreateFromValue(oidValue: str) -> ECCurve: ...
    @property
    def IsCharacteristic2(self) -> bool: ...
    @property
    def IsExplicit(self) -> bool: ...
    @property
    def IsNamed(self) -> bool: ...
    @property
    def IsPrime(self) -> bool: ...
    @property
    def Oid(self) -> Oid: ...
    @overload
    def Validate() -> None: ...

class ECCurveType(enum.Enum):
    Implicit = 0
    PrimeShortWeierstrass = 1
    PrimeTwistedEdwards = 2
    PrimeMontgomery = 3
    Characteristic2 = 4
    Named = 5

class NamedCurves(object):
    """    """
    @property
    def brainpoolP160r1(self) -> ECCurve: ...
    @property
    def brainpoolP160t1(self) -> ECCurve: ...
    @property
    def brainpoolP192r1(self) -> ECCurve: ...
    @property
    def brainpoolP192t1(self) -> ECCurve: ...
    @property
    def brainpoolP224r1(self) -> ECCurve: ...
    @property
    def brainpoolP224t1(self) -> ECCurve: ...
    @property
    def brainpoolP256r1(self) -> ECCurve: ...
    @property
    def brainpoolP256t1(self) -> ECCurve: ...
    @property
    def brainpoolP320r1(self) -> ECCurve: ...
    @property
    def brainpoolP320t1(self) -> ECCurve: ...
    @property
    def brainpoolP384r1(self) -> ECCurve: ...
    @property
    def brainpoolP384t1(self) -> ECCurve: ...
    @property
    def brainpoolP512r1(self) -> ECCurve: ...
    @property
    def brainpoolP512t1(self) -> ECCurve: ...
    @property
    def nistP256(self) -> ECCurve: ...
    @property
    def nistP384(self) -> ECCurve: ...
    @property
    def nistP521(self) -> ECCurve: ...

class ECDiffieHellman(ECAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> ECDiffieHellman: ...
    @overload
    @staticmethod
    def Create(curve: ECCurve) -> ECDiffieHellman: ...
    @overload
    @staticmethod
    def Create(parameters: ECParameters) -> ECDiffieHellman: ...
    @overload
    def DeriveKeyFromHash(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyFromHash(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName, secretPrepend: System.System.Array[System.Byte], secretAppend: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyFromHmac(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName, hmacKey: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyFromHmac(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName, hmacKey: System.System.Array[System.Byte], secretPrepend: System.System.Array[System.Byte], secretAppend: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyMaterial(self, otherPartyPublicKey: ECDiffieHellmanPublicKey) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyTls(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, prfLabel: System.System.Array[System.Byte], prfSeed: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def FromXmlString(self, xmlString: str) -> None: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def PublicKey(self) -> ECDiffieHellmanPublicKey: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @overload
    def ToXmlString(self, includePrivateParameters: bool) -> str: ...

class ECDiffieHellmanKeyDerivationFunction(enum.Enum):
    Hash = 0
    Hmac = 1
    Tls = 2

class ECDiffieHellmanPublicKey(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def ExportExplicitParameters() -> ECParameters: ...
    @overload
    def ExportParameters() -> ECParameters: ...
    @overload
    def ExportSubjectPublicKeyInfo() -> System.System.Array[System.Byte]: ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...

class ECDsa(ECAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> ECDsa: ...
    @overload
    @staticmethod
    def Create(curve: ECCurve) -> ECDsa: ...
    @overload
    @staticmethod
    def Create(parameters: ECParameters) -> ECDsa: ...
    @overload
    def FromXmlString(self, xmlString: str) -> None: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @overload
    def GetMaxSignatureSize(self, signatureFormat: DSASignatureFormat) -> int: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: IO.Stream, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName) -> int: ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: IO.Stream, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> int: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int, hashAlgorithm: HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte], signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan, signatureFormat: DSASignatureFormat) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan, destination: System.Span, signatureFormat: DSASignatureFormat) -> int: ...
    @overload
    def ToXmlString(self, includePrivateParameters: bool) -> str: ...
    @overload
    def TrySignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName) -> (bool, int): ...
    @overload
    def TrySignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> (bool, int): ...
    @overload
    def TrySignHash(self, hash_: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    def TrySignHash(self, hash_: System.ReadOnlySpan, destination: System.Span, signatureFormat: DSASignatureFormat) -> (bool, int): ...
    @overload
    def VerifyData(self, data: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan, signatureFormat: DSASignatureFormat) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], signatureFormat: DSASignatureFormat) -> bool: ...

class ECKeyXmlFormat(enum.Enum):
    Rfc4050 = 0

class ECParameters(System.ValueType):
    """    """
    @property
    def Q(self) -> ECPoint: ...
    @property
    def D(self) -> System.System.Array[System.Byte]: ...
    @property
    def Curve(self) -> ECCurve: ...
    @overload
    def Validate() -> None: ...

class ECPoint(System.ValueType):
    """    """
    @property
    def X(self) -> System.System.Array[System.Byte]: ...
    @property
    def Y(self) -> System.System.Array[System.Byte]: ...

class HashAlgorithm(object):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def ComputeHash(self, inputStream: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    def ComputeHash(self, buffer: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def ComputeHash(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ComputeHashAsync(self, inputStream: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CanReuseTransform(self) -> bool: ...
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @property
    def Hash(self) -> System.System.Array[System.Byte]: ...
    @property
    def HashSize(self) -> int: ...
    @property
    def InputBlockSize(self) -> int: ...
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def Initialize() -> None: ...
    @overload
    def TransformBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int, outputBuffer: System.System.Array[System.Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int) -> System.System.Array[System.Byte]: ...
    @overload
    def TryComputeHash(self, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class HashAlgorithmName(System.ValueType):
    """    """
    def __init__(self, name: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: HashAlgorithmName) -> bool: ...
    @overload
    @staticmethod
    def FromOid(oidValue: str) -> HashAlgorithmName: ...
    @property
    def MD5(self) -> HashAlgorithmName: ...
    @property
    def Name(self) -> str: ...
    @property
    def SHA1(self) -> HashAlgorithmName: ...
    @property
    def SHA256(self) -> HashAlgorithmName: ...
    @property
    def SHA384(self) -> HashAlgorithmName: ...
    @property
    def SHA512(self) -> HashAlgorithmName: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryFromOid(oidValue: str) -> (bool, HashAlgorithmName): ...

class HKDF(object):
    """    """
    @overload
    @staticmethod
    def DeriveKey(hashAlgorithmName: HashAlgorithmName, ikm: System.System.Array[System.Byte], outputLength: int, salt: System.System.Array[System.Byte], info: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def DeriveKey(hashAlgorithmName: HashAlgorithmName, ikm: System.ReadOnlySpan, output: System.Span, salt: System.ReadOnlySpan, info: System.ReadOnlySpan) -> None: ...
    @overload
    @staticmethod
    def Expand(hashAlgorithmName: HashAlgorithmName, prk: System.System.Array[System.Byte], outputLength: int, info: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Expand(hashAlgorithmName: HashAlgorithmName, prk: System.ReadOnlySpan, output: System.Span, info: System.ReadOnlySpan) -> None: ...
    @overload
    @staticmethod
    def Extract(hashAlgorithmName: HashAlgorithmName, ikm: System.System.Array[System.Byte], salt: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Extract(hashAlgorithmName: HashAlgorithmName, ikm: System.ReadOnlySpan, salt: System.ReadOnlySpan, prk: System.Span) -> int: ...

class HMAC(KeyedHashAlgorithm):
    """    """
    @property
    def HashName(self) -> str: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    def Initialize() -> None: ...
    @HashName.setter
    def HashName(self, value: System.Void): ...
    @Key.setter
    def Key(self, value: System.Void): ...

class HMACMD5(HMAC):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.System.Array[System.Byte], source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Initialize() -> None: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @overload
    @staticmethod
    def TryHashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class HMACSHA1(HMAC):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte], useManagedSha1: bool): ...
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.System.Array[System.Byte], source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Initialize() -> None: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @overload
    @staticmethod
    def TryHashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class HMACSHA256(HMAC):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.System.Array[System.Byte], source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Initialize() -> None: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @overload
    @staticmethod
    def TryHashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class HMACSHA384(HMAC):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @property
    def ProduceLegacyHmacValues(self) -> bool: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.System.Array[System.Byte], source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Initialize() -> None: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @ProduceLegacyHmacValues.setter
    def ProduceLegacyHmacValues(self, value: System.Void): ...
    @overload
    @staticmethod
    def TryHashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class HMACSHA512(HMAC):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @property
    def ProduceLegacyHmacValues(self) -> bool: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.System.Array[System.Byte], source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.System.Array[System.Byte], source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(key: System.ReadOnlyMemory, source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Initialize() -> None: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @ProduceLegacyHmacValues.setter
    def ProduceLegacyHmacValues(self, value: System.Void): ...
    @overload
    @staticmethod
    def TryHashData(key: System.ReadOnlySpan, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class ICryptoTransform:
    """    """
    @property
    def CanReuseTransform(self) -> bool: ...
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @property
    def InputBlockSize(self) -> int: ...
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def TransformBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int, outputBuffer: System.System.Array[System.Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: System.System.Array[System.Byte], inputOffset: int, inputCount: int) -> System.System.Array[System.Byte]: ...

class ICspAsymmetricAlgorithm:
    """    """
    @overload
    def ExportCspBlob(self, includePrivateParameters: bool) -> System.System.Array[System.Byte]: ...
    @property
    def CspKeyContainerInfo(self) -> CspKeyContainerInfo: ...
    @overload
    def ImportCspBlob(self, rawData: System.System.Array[System.Byte]) -> None: ...

class IncrementalHash(object):
    """    """
    @overload
    def AppendData(self, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def AppendData(self, data: System.ReadOnlySpan) -> None: ...
    @overload
    def AppendData(self, data: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    @staticmethod
    def CreateHash(hashAlgorithm: HashAlgorithmName) -> IncrementalHash: ...
    @overload
    @staticmethod
    def CreateHMAC(hashAlgorithm: HashAlgorithmName, key: System.ReadOnlySpan) -> IncrementalHash: ...
    @overload
    @staticmethod
    def CreateHMAC(hashAlgorithm: HashAlgorithmName, key: System.System.Array[System.Byte]) -> IncrementalHash: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AlgorithmName(self) -> HashAlgorithmName: ...
    @property
    def HashLengthInBytes(self) -> int: ...
    @overload
    def GetCurrentHash() -> System.System.Array[System.Byte]: ...
    @overload
    def GetCurrentHash(self, destination: System.Span) -> int: ...
    @overload
    def GetHashAndReset() -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashAndReset(self, destination: System.Span) -> int: ...
    @overload
    def TryGetCurrentHash(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryGetHashAndReset(self, destination: System.Span) -> (bool, int): ...

class KeyedHashAlgorithm(HashAlgorithm):
    """    """
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @Key.setter
    def Key(self, value: System.Void): ...

class KeyNumber(enum.Enum):
    Exchange = 1
    Signature = 2

class KeySizes(object):
    """    """
    def __init__(self, minSize: int, maxSize: int, skipSize: int): ...
    @property
    def MaxSize(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def SkipSize(self) -> int: ...

class MaskGenerationMethod(object):
    """    """
    @overload
    def GenerateMask(self, rgbSeed: System.System.Array[System.Byte], cbReturn: int) -> System.System.Array[System.Byte]: ...

class MD5(HashAlgorithm):
    """    """
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @overload
    @staticmethod
    def Create() -> MD5: ...
    @overload
    @staticmethod
    def HashData(source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def TryHashData(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class Oid(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, oid: str): ...
    @overload
    def __init__(self, oid: Oid): ...
    @overload
    def __init__(self, value: str, friendlyName: str): ...
    @overload
    @staticmethod
    def FromFriendlyName(friendlyName: str, group: OidGroup) -> Oid: ...
    @overload
    @staticmethod
    def FromOidValue(oidValue: str, group: OidGroup) -> Oid: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @FriendlyName.setter
    def FriendlyName(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class OidCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, oid: Oid) -> int: ...
    @overload
    def CopyTo(self, array: System.Array[Oid], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> Oid: ...
    @property
    def Item(self) -> Oid: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> OidEnumerator: ...

class OidEnumerator(object):
    """    """
    @property
    def Current(self) -> Oid: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class OidGroup(enum.Enum):
    All = 0
    HashAlgorithm = 1
    EncryptionAlgorithm = 2
    PublicKeyAlgorithm = 3
    SignatureAlgorithm = 4
    Attribute = 5
    ExtensionOrAttribute = 6
    EnhancedKeyUsage = 7
    Policy = 8
    Template = 9
    KeyDerivationFunction = 10

class PaddingMode(enum.Enum):
    None_ = 1
    PKCS7 = 2
    Zeros = 3
    ANSIX923 = 4
    ISO10126 = 5

class PasswordDeriveBytes(DeriveBytes):
    """    """
    @overload
    def __init__(self, strPassword: str, rgbSalt: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, strPassword: str, rgbSalt: System.System.Array[System.Byte], cspParams: CspParameters): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], cspParams: CspParameters): ...
    @overload
    def __init__(self, strPassword: str, rgbSalt: System.System.Array[System.Byte], strHashName: str, iterations: int): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], hashName: str, iterations: int): ...
    @overload
    def __init__(self, strPassword: str, rgbSalt: System.System.Array[System.Byte], strHashName: str, iterations: int, cspParams: CspParameters): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], hashName: str, iterations: int, cspParams: CspParameters): ...
    @overload
    def CryptDeriveKey(self, algname: str, alghashname: str, keySize: int, rgbIV: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def HashName(self) -> str: ...
    @property
    def IterationCount(self) -> int: ...
    @property
    def Salt(self) -> System.System.Array[System.Byte]: ...
    @overload
    def Reset() -> None: ...
    @HashName.setter
    def HashName(self, value: System.Void): ...
    @IterationCount.setter
    def IterationCount(self, value: System.Void): ...
    @Salt.setter
    def Salt(self, value: System.Void): ...

class PbeEncryptionAlgorithm(enum.Enum):
    Unknown = 0
    Aes128Cbc = 1
    Aes192Cbc = 2
    Aes256Cbc = 3
    TripleDes3KeyPkcs12 = 4

class PbeParameters(object):
    """    """
    def __init__(self, encryptionAlgorithm: PbeEncryptionAlgorithm, hashAlgorithm: HashAlgorithmName, iterationCount: int): ...
    @property
    def EncryptionAlgorithm(self) -> PbeEncryptionAlgorithm: ...
    @property
    def HashAlgorithm(self) -> HashAlgorithmName: ...
    @property
    def IterationCount(self) -> int: ...

class PemEncoding(object):
    """    """
    @overload
    @staticmethod
    def Find(pemData: System.ReadOnlySpan) -> PemFields: ...
    @overload
    @staticmethod
    def GetEncodedSize(labelLength: int, dataLength: int) -> int: ...
    @overload
    @staticmethod
    def TryFind(pemData: System.ReadOnlySpan) -> (bool, PemFields): ...
    @overload
    @staticmethod
    def TryWrite(label: System.ReadOnlySpan, data: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    @staticmethod
    def Write(label: System.ReadOnlySpan, data: System.ReadOnlySpan) -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def WriteString(label: System.ReadOnlySpan, data: System.ReadOnlySpan) -> str: ...

class PemFields(System.ValueType):
    """    """
    @property
    def Base64Data(self) -> System.Range: ...
    @property
    def DecodedDataLength(self) -> int: ...
    @property
    def Label(self) -> System.Range: ...
    @property
    def Location(self) -> System.Range: ...

class PKCS1MaskGenerationMethod(MaskGenerationMethod):
    """    """
    def __init__(self): ...
    @overload
    def GenerateMask(self, rgbSeed: System.System.Array[System.Byte], cbReturn: int) -> System.System.Array[System.Byte]: ...
    @property
    def HashName(self) -> str: ...
    @HashName.setter
    def HashName(self, value: System.Void): ...

class RandomNumberGenerator(object):
    """    """
    @overload
    @staticmethod
    def Create() -> RandomNumberGenerator: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def Fill(data: System.Span) -> None: ...
    @overload
    def GetBytes(self, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def GetBytes(self, data: System.Span) -> None: ...
    @overload
    @staticmethod
    def GetBytes(count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, data: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    @staticmethod
    def GetInt32(toExclusive: int) -> int: ...
    @overload
    @staticmethod
    def GetInt32(fromInclusive: int, toExclusive: int) -> int: ...
    @overload
    def GetNonZeroBytes(self, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def GetNonZeroBytes(self, data: System.Span) -> None: ...

class RC2(SymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> RC2: ...
    @property
    def EffectiveKeySize(self) -> int: ...
    @property
    def KeySize(self) -> int: ...
    @EffectiveKeySize.setter
    def EffectiveKeySize(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...

class Rfc2898DeriveBytes(DeriveBytes):
    """    """
    @overload
    def __init__(self, password: str, salt: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, password: str, saltSize: int): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], iterations: int): ...
    @overload
    def __init__(self, password: str, salt: System.System.Array[System.Byte], iterations: int): ...
    @overload
    def __init__(self, password: str, saltSize: int, iterations: int): ...
    @overload
    def __init__(self, password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], iterations: int, hashAlgorithm: HashAlgorithmName): ...
    @overload
    def __init__(self, password: str, salt: System.System.Array[System.Byte], iterations: int, hashAlgorithm: HashAlgorithmName): ...
    @overload
    def __init__(self, password: str, saltSize: int, iterations: int, hashAlgorithm: HashAlgorithmName): ...
    @property
    def HashAlgorithm(self) -> HashAlgorithmName: ...
    @property
    def IterationCount(self) -> int: ...
    @property
    def Salt(self) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, cb: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Pbkdf2(password: System.System.Array[System.Byte], salt: System.System.Array[System.Byte], iterations: int, hashAlgorithm: HashAlgorithmName, outputLength: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Pbkdf2(password: System.ReadOnlySpan, salt: System.ReadOnlySpan, destination: System.Span, iterations: int, hashAlgorithm: HashAlgorithmName) -> None: ...
    @overload
    @staticmethod
    def Pbkdf2(password: str, salt: System.System.Array[System.Byte], iterations: int, hashAlgorithm: HashAlgorithmName, outputLength: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Pbkdf2(password: System.ReadOnlySpan, salt: System.ReadOnlySpan, iterations: int, hashAlgorithm: HashAlgorithmName, outputLength: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Pbkdf2(password: System.ReadOnlySpan, salt: System.ReadOnlySpan, destination: System.Span, iterations: int, hashAlgorithm: HashAlgorithmName) -> None: ...
    @overload
    @staticmethod
    def Pbkdf2(password: System.ReadOnlySpan, salt: System.ReadOnlySpan, iterations: int, hashAlgorithm: HashAlgorithmName, outputLength: int) -> System.System.Array[System.Byte]: ...
    @overload
    def Reset() -> None: ...
    @IterationCount.setter
    def IterationCount(self, value: System.Void): ...
    @Salt.setter
    def Salt(self, value: System.Void): ...

class RSA(AsymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> RSA: ...
    @overload
    @staticmethod
    def Create(keySizeInBits: int) -> RSA: ...
    @overload
    @staticmethod
    def Create(parameters: RSAParameters) -> RSA: ...
    @overload
    def Decrypt(self, data: System.ReadOnlySpan, padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Decrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Decrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> int: ...
    @overload
    def DecryptValue(self, rgb: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, data: System.ReadOnlySpan, padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> int: ...
    @overload
    def EncryptValue(self, rgb: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> RSAParameters: ...
    @overload
    def ExportRSAPrivateKey() -> System.System.Array[System.Byte]: ...
    @overload
    def ExportRSAPrivateKeyPem() -> str: ...
    @overload
    def ExportRSAPublicKey() -> System.System.Array[System.Byte]: ...
    @overload
    def ExportRSAPublicKeyPem() -> str: ...
    @overload
    def FromXmlString(self, xmlString: str) -> None: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, passwordBytes: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromEncryptedPem(self, input_: System.ReadOnlySpan, password: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromPem(self, input_: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportParameters(self, parameters: RSAParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportRSAPrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportRSAPublicKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportSubjectPublicKeyInfo(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: IO.Stream, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> int: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> int: ...
    @overload
    def ToXmlString(self, includePrivateParameters: bool) -> str: ...
    @overload
    def TryDecrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> (bool, int): ...
    @overload
    def TryEncrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportRSAPrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportRSAPrivateKeyPem(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportRSAPublicKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportRSAPublicKeyPem(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TrySignData(self, data: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> (bool, int): ...
    @overload
    def TrySignHash(self, hash_: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> (bool, int): ...
    @overload
    def VerifyData(self, data: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...

class RSAEncryptionPadding(object):
    """    """
    @overload
    @staticmethod
    def CreateOaep(hashAlgorithm: HashAlgorithmName) -> RSAEncryptionPadding: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: RSAEncryptionPadding) -> bool: ...
    @property
    def Mode(self) -> RSAEncryptionPaddingMode: ...
    @property
    def OaepHashAlgorithm(self) -> HashAlgorithmName: ...
    @property
    def OaepSHA1(self) -> RSAEncryptionPadding: ...
    @property
    def OaepSHA256(self) -> RSAEncryptionPadding: ...
    @property
    def OaepSHA384(self) -> RSAEncryptionPadding: ...
    @property
    def OaepSHA512(self) -> RSAEncryptionPadding: ...
    @property
    def Pkcs1(self) -> RSAEncryptionPadding: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class RSAEncryptionPaddingMode(enum.Enum):
    Pkcs1 = 0
    Oaep = 1

class RSAOAEPKeyExchangeDeformatter(AsymmetricKeyExchangeDeformatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def DecryptKeyExchange(self, rgbData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @Parameters.setter
    def Parameters(self, value: System.Void): ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class RSAOAEPKeyExchangeFormatter(AsymmetricKeyExchangeFormatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def CreateKeyExchange(self, rgbData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateKeyExchange(self, rgbData: System.System.Array[System.Byte], symAlgType: System.Type) -> System.System.Array[System.Byte]: ...
    @property
    def Parameter(self) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @property
    def Rng(self) -> RandomNumberGenerator: ...
    @Parameter.setter
    def Parameter(self, value: System.Void): ...
    @Rng.setter
    def Rng(self, value: System.Void): ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class RSAParameters(System.ValueType):
    """    """
    @property
    def D(self) -> System.System.Array[System.Byte]: ...
    @property
    def DP(self) -> System.System.Array[System.Byte]: ...
    @property
    def DQ(self) -> System.System.Array[System.Byte]: ...
    @property
    def Exponent(self) -> System.System.Array[System.Byte]: ...
    @property
    def InverseQ(self) -> System.System.Array[System.Byte]: ...
    @property
    def Modulus(self) -> System.System.Array[System.Byte]: ...
    @property
    def P(self) -> System.System.Array[System.Byte]: ...
    @property
    def Q(self) -> System.System.Array[System.Byte]: ...

class RSAPKCS1KeyExchangeDeformatter(AsymmetricKeyExchangeDeformatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def DecryptKeyExchange(self, rgbIn: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @property
    def RNG(self) -> RandomNumberGenerator: ...
    @Parameters.setter
    def Parameters(self, value: System.Void): ...
    @RNG.setter
    def RNG(self, value: System.Void): ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class RSAPKCS1KeyExchangeFormatter(AsymmetricKeyExchangeFormatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def CreateKeyExchange(self, rgbData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateKeyExchange(self, rgbData: System.System.Array[System.Byte], symAlgType: System.Type) -> System.System.Array[System.Byte]: ...
    @property
    def Parameters(self) -> str: ...
    @property
    def Rng(self) -> RandomNumberGenerator: ...
    @Rng.setter
    def Rng(self, value: System.Void): ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class RSAPKCS1SignatureDeformatter(AsymmetricSignatureDeformatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class RSAPKCS1SignatureFormatter(AsymmetricSignatureFormatter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: AsymmetricAlgorithm): ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SetHashAlgorithm(self, strName: str) -> None: ...
    @overload
    def SetKey(self, key: AsymmetricAlgorithm) -> None: ...

class RSASignaturePadding(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: RSASignaturePadding) -> bool: ...
    @property
    def Mode(self) -> RSASignaturePaddingMode: ...
    @property
    def Pkcs1(self) -> RSASignaturePadding: ...
    @property
    def Pss(self) -> RSASignaturePadding: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class RSASignaturePaddingMode(enum.Enum):
    Pkcs1 = 0
    Pss = 1

class SHA1(HashAlgorithm):
    """    """
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @overload
    @staticmethod
    def Create() -> SHA1: ...
    @overload
    @staticmethod
    def HashData(source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def TryHashData(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class SHA256(HashAlgorithm):
    """    """
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @overload
    @staticmethod
    def Create() -> SHA256: ...
    @overload
    @staticmethod
    def HashData(source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def TryHashData(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class SHA384(HashAlgorithm):
    """    """
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @overload
    @staticmethod
    def Create() -> SHA384: ...
    @overload
    @staticmethod
    def HashData(source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def TryHashData(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class SHA512(HashAlgorithm):
    """    """
    @property
    def HashSizeInBits(self) -> int: ...
    @property
    def HashSizeInBytes(self) -> int: ...
    @overload
    @staticmethod
    def Create() -> SHA512: ...
    @overload
    @staticmethod
    def HashData(source: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def HashData(source: System.ReadOnlySpan, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashData(source: IO.Stream, destination: System.Span) -> int: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def HashDataAsync(source: IO.Stream, destination: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def TryHashData(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class SignatureDescription(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, el: Security.SecurityElement): ...
    @overload
    def CreateDeformatter(self, key: AsymmetricAlgorithm) -> AsymmetricSignatureDeformatter: ...
    @overload
    def CreateDigest() -> HashAlgorithm: ...
    @overload
    def CreateFormatter(self, key: AsymmetricAlgorithm) -> AsymmetricSignatureFormatter: ...
    @property
    def DeformatterAlgorithm(self) -> str: ...
    @property
    def DigestAlgorithm(self) -> str: ...
    @property
    def FormatterAlgorithm(self) -> str: ...
    @property
    def KeyAlgorithm(self) -> str: ...
    @DeformatterAlgorithm.setter
    def DeformatterAlgorithm(self, value: System.Void): ...
    @DigestAlgorithm.setter
    def DigestAlgorithm(self, value: System.Void): ...
    @FormatterAlgorithm.setter
    def FormatterAlgorithm(self, value: System.Void): ...
    @KeyAlgorithm.setter
    def KeyAlgorithm(self, value: System.Void): ...

class SymmetricAlgorithm(object):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def CreateDecryptor() -> ICryptoTransform: ...
    @overload
    def CreateDecryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def CreateEncryptor() -> ICryptoTransform: ...
    @overload
    def CreateEncryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def DecryptCbc(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptCbc(self, ciphertext: System.System.Array[System.Byte], iv: System.System.Array[System.Byte], paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptCbc(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def DecryptCfb(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, paddingMode: PaddingMode, feedbackSizeInBits: int) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptCfb(self, ciphertext: System.System.Array[System.Byte], iv: System.System.Array[System.Byte], paddingMode: PaddingMode, feedbackSizeInBits: int) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptCfb(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    @overload
    def DecryptEcb(self, ciphertext: System.ReadOnlySpan, paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptEcb(self, ciphertext: System.System.Array[System.Byte], paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptEcb(self, ciphertext: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EncryptCbc(self, plaintext: System.System.Array[System.Byte], iv: System.System.Array[System.Byte], paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptCbc(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptCbc(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def EncryptCfb(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, paddingMode: PaddingMode, feedbackSizeInBits: int) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptCfb(self, plaintext: System.System.Array[System.Byte], iv: System.System.Array[System.Byte], paddingMode: PaddingMode, feedbackSizeInBits: int) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptCfb(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    @overload
    def EncryptEcb(self, plaintext: System.ReadOnlySpan, paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptEcb(self, plaintext: System.System.Array[System.Byte], paddingMode: PaddingMode) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptEcb(self, plaintext: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def GenerateIV() -> None: ...
    @overload
    def GenerateKey() -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def FeedbackSize(self) -> int: ...
    @property
    def IV(self) -> System.System.Array[System.Byte]: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalBlockSizes(self) -> System.Array[KeySizes]: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def Mode(self) -> CipherMode: ...
    @property
    def Padding(self) -> PaddingMode: ...
    @overload
    def GetCiphertextLengthCbc(self, plaintextLength: int, paddingMode: PaddingMode) -> int: ...
    @overload
    def GetCiphertextLengthCfb(self, plaintextLength: int, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    @overload
    def GetCiphertextLengthEcb(self, plaintextLength: int, paddingMode: PaddingMode) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: System.Void): ...
    @FeedbackSize.setter
    def FeedbackSize(self, value: System.Void): ...
    @IV.setter
    def IV(self, value: System.Void): ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @overload
    def TryDecryptCbc(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> (bool, int): ...
    @overload
    def TryDecryptCfb(self, ciphertext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> (bool, int): ...
    @overload
    def TryDecryptEcb(self, ciphertext: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> (bool, int): ...
    @overload
    def TryEncryptCbc(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> (bool, int): ...
    @overload
    def TryEncryptCfb(self, plaintext: System.ReadOnlySpan, iv: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> (bool, int): ...
    @overload
    def TryEncryptEcb(self, plaintext: System.ReadOnlySpan, destination: System.Span, paddingMode: PaddingMode) -> (bool, int): ...
    @overload
    def ValidKeySize(self, bitLength: int) -> bool: ...

class TripleDES(SymmetricAlgorithm):
    """    """
    @overload
    @staticmethod
    def Create() -> TripleDES: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def IsWeakKey(rgbKey: System.System.Array[System.Byte]) -> bool: ...
    @Key.setter
    def Key(self, value: System.Void): ...

class DSACng(DSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, key: CngKey): ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> DSAParameters: ...
    @property
    def Key(self) -> CngKey: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: DSAParameters) -> None: ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class ECDiffieHellmanCng(ECDiffieHellman):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, curve: ECCurve): ...
    @overload
    def __init__(self, key: CngKey): ...
    @overload
    def DeriveKeyFromHash(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName, secretPrepend: System.System.Array[System.Byte], secretAppend: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyFromHmac(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, hashAlgorithm: HashAlgorithmName, hmacKey: System.System.Array[System.Byte], secretPrepend: System.System.Array[System.Byte], secretAppend: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyMaterial(self, otherPartyPublicKey: ECDiffieHellmanPublicKey) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyMaterial(self, otherPartyPublicKey: CngKey) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveKeyTls(self, otherPartyPublicKey: ECDiffieHellmanPublicKey, prfLabel: System.System.Array[System.Byte], prfSeed: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DeriveSecretAgreementHandle(self, otherPartyPublicKey: ECDiffieHellmanPublicKey) -> SafeHandles.SafeNCryptSecretHandle: ...
    @overload
    def DeriveSecretAgreementHandle(self, otherPartyPublicKey: CngKey) -> SafeHandles.SafeNCryptSecretHandle: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportExplicitParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def GenerateKey(self, curve: ECCurve) -> None: ...
    @property
    def HashAlgorithm(self) -> CngAlgorithm: ...
    @property
    def HmacKey(self) -> System.System.Array[System.Byte]: ...
    @property
    def Key(self) -> CngKey: ...
    @property
    def KeyDerivationFunction(self) -> ECDiffieHellmanKeyDerivationFunction: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def Label(self) -> System.System.Array[System.Byte]: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def PublicKey(self) -> ECDiffieHellmanPublicKey: ...
    @property
    def SecretAppend(self) -> System.System.Array[System.Byte]: ...
    @property
    def SecretPrepend(self) -> System.System.Array[System.Byte]: ...
    @property
    def Seed(self) -> System.System.Array[System.Byte]: ...
    @property
    def UseSecretAgreementAsHmacKey(self) -> bool: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: ECParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: System.Void): ...
    @HmacKey.setter
    def HmacKey(self, value: System.Void): ...
    @KeyDerivationFunction.setter
    def KeyDerivationFunction(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @Label.setter
    def Label(self, value: System.Void): ...
    @SecretAppend.setter
    def SecretAppend(self, value: System.Void): ...
    @SecretPrepend.setter
    def SecretPrepend(self, value: System.Void): ...
    @Seed.setter
    def Seed(self, value: System.Void): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...

class ECDsaCng(ECDsa):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, curve: ECCurve): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, key: CngKey): ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportExplicitParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @overload
    def GenerateKey(self, curve: ECCurve) -> None: ...
    @property
    def HashAlgorithm(self) -> CngAlgorithm: ...
    @property
    def Key(self) -> CngKey: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: ECParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], offset: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TrySignHash(self, source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    def VerifyData(self, data: IO.Stream, signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyData(self, data: System.System.Array[System.Byte], offset: int, count: int, signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan) -> bool: ...

class RSACng(RSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, key: CngKey): ...
    @overload
    def Decrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> RSAParameters: ...
    @property
    def Key(self) -> CngKey: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: RSAParameters) -> None: ...
    @overload
    def ImportPkcs8PrivateKey(self, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def TryDecrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> (bool, int): ...
    @overload
    def TryEncrypt(self, data: System.ReadOnlySpan, destination: System.Span, padding: RSAEncryptionPadding) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, pbeParameters: PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs8PrivateKey(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TrySignHash(self, hash_: System.ReadOnlySpan, destination: System.Span, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> (bool, int): ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.ReadOnlySpan, signature: System.ReadOnlySpan, hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...

class AesCng(Aes):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyName: str): ...
    @overload
    def __init__(self, keyName: str, provider: CngProvider): ...
    @overload
    def __init__(self, keyName: str, provider: CngProvider, openOptions: CngKeyOpenOptions): ...
    @overload
    def CreateDecryptor() -> ICryptoTransform: ...
    @overload
    def CreateDecryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def CreateEncryptor() -> ICryptoTransform: ...
    @overload
    def CreateEncryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def GenerateIV() -> None: ...
    @overload
    def GenerateKey() -> None: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeySize(self) -> int: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...

class CngKey(object):
    """    """
    @overload
    @staticmethod
    def Create(algorithm: CngAlgorithm) -> CngKey: ...
    @overload
    @staticmethod
    def Create(algorithm: CngAlgorithm, keyName: str) -> CngKey: ...
    @overload
    @staticmethod
    def Create(algorithm: CngAlgorithm, keyName: str, creationParameters: CngKeyCreationParameters) -> CngKey: ...
    @overload
    def Delete() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def Exists(keyName: str) -> bool: ...
    @overload
    @staticmethod
    def Exists(keyName: str, provider: CngProvider) -> bool: ...
    @overload
    @staticmethod
    def Exists(keyName: str, provider: CngProvider, options: CngKeyOpenOptions) -> bool: ...
    @overload
    def Export(self, format_: CngKeyBlobFormat) -> System.System.Array[System.Byte]: ...
    @property
    def Algorithm(self) -> CngAlgorithm: ...
    @property
    def AlgorithmGroup(self) -> CngAlgorithmGroup: ...
    @property
    def ExportPolicy(self) -> CngExportPolicies: ...
    @property
    def Handle(self) -> SafeHandles.SafeNCryptKeyHandle: ...
    @property
    def IsEphemeral(self) -> bool: ...
    @property
    def IsMachineKey(self) -> bool: ...
    @property
    def KeyName(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def KeyUsage(self) -> CngKeyUsages: ...
    @property
    def ParentWindowHandle(self) -> System.IntPtr: ...
    @property
    def Provider(self) -> CngProvider: ...
    @property
    def ProviderHandle(self) -> SafeHandles.SafeNCryptProviderHandle: ...
    @property
    def UIPolicy(self) -> CngUIPolicy: ...
    @property
    def UniqueName(self) -> str: ...
    @overload
    def GetProperty(self, name: str, options: CngPropertyOptions) -> CngProperty: ...
    @overload
    def HasProperty(self, name: str, options: CngPropertyOptions) -> bool: ...
    @overload
    @staticmethod
    def Import(keyBlob: System.System.Array[System.Byte], format_: CngKeyBlobFormat) -> CngKey: ...
    @overload
    @staticmethod
    def Import(keyBlob: System.System.Array[System.Byte], format_: CngKeyBlobFormat, provider: CngProvider) -> CngKey: ...
    @overload
    @staticmethod
    def Open(keyName: str) -> CngKey: ...
    @overload
    @staticmethod
    def Open(keyHandle: SafeHandles.SafeNCryptKeyHandle, keyHandleOpenOptions: CngKeyHandleOpenOptions) -> CngKey: ...
    @overload
    @staticmethod
    def Open(keyName: str, provider: CngProvider) -> CngKey: ...
    @overload
    @staticmethod
    def Open(keyName: str, provider: CngProvider, openOptions: CngKeyOpenOptions) -> CngKey: ...
    @ParentWindowHandle.setter
    def ParentWindowHandle(self, value: System.Void): ...
    @overload
    def SetProperty(self, property_: CngProperty) -> None: ...

class CspKeyContainerInfo(object):
    """    """
    def __init__(self, parameters: CspParameters): ...
    @property
    def Accessible(self) -> bool: ...
    @property
    def Exportable(self) -> bool: ...
    @property
    def HardwareDevice(self) -> bool: ...
    @property
    def KeyContainerName(self) -> str: ...
    @property
    def KeyNumber(self) -> KeyNumber: ...
    @property
    def MachineKeyStore(self) -> bool: ...
    @property
    def Protected(self) -> bool: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def ProviderType(self) -> int: ...
    @property
    def RandomlyGenerated(self) -> bool: ...
    @property
    def Removable(self) -> bool: ...
    @property
    def UniqueKeyContainerName(self) -> str: ...

class DSACryptoServiceProvider(DSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dwKeySize: int): ...
    @overload
    def __init__(self, parameters: CspParameters): ...
    @overload
    def __init__(self, dwKeySize: int, parameters: CspParameters): ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportCspBlob(self, includePrivateParameters: bool) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> DSAParameters: ...
    @property
    def CspKeyContainerInfo(self) -> CspKeyContainerInfo: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def PersistKeyInCsp(self) -> bool: ...
    @property
    def PublicOnly(self) -> bool: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @property
    def UseMachineKeyStore(self) -> bool: ...
    @overload
    def ImportCspBlob(self, keyBlob: System.System.Array[System.Byte]) -> None: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: DSAParameters) -> None: ...
    @PersistKeyInCsp.setter
    def PersistKeyInCsp(self, value: System.Void): ...
    @UseMachineKeyStore.setter
    def UseMachineKeyStore(self, value: System.Void): ...
    @overload
    def SignData(self, buffer: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, inputStream: IO.Stream) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, rgbHash: System.System.Array[System.Byte], str_: str) -> System.System.Array[System.Byte]: ...
    @overload
    def VerifyData(self, rgbData: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, rgbHash: System.System.Array[System.Byte], str_: str, rgbSignature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class ECDiffieHellmanCngPublicKey(ECDiffieHellmanPublicKey):
    """    """
    @overload
    def ExportExplicitParameters() -> ECParameters: ...
    @overload
    def ExportParameters() -> ECParameters: ...
    @overload
    @staticmethod
    def FromByteArray(publicKeyBlob: System.System.Array[System.Byte], format_: CngKeyBlobFormat) -> ECDiffieHellmanPublicKey: ...
    @property
    def BlobFormat(self) -> CngKeyBlobFormat: ...
    @overload
    def Import() -> CngKey: ...

class DSAOpenSsl(DSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, parameters: DSAParameters): ...
    @overload
    def __init__(self, pkeyHandle: SafeEvpPKeyHandle): ...
    @overload
    def CreateSignature(self, rgbHash: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def DuplicateKeyHandle() -> SafeEvpPKeyHandle: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> DSAParameters: ...
    @overload
    def ImportParameters(self, parameters: DSAParameters) -> None: ...
    @overload
    def VerifySignature(self, rgbHash: System.System.Array[System.Byte], rgbSignature: System.System.Array[System.Byte]) -> bool: ...

class ECDiffieHellmanOpenSsl(ECDiffieHellman):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, curve: ECCurve): ...
    @overload
    def __init__(self, pkeyHandle: SafeEvpPKeyHandle): ...
    @overload
    def DuplicateKeyHandle() -> SafeEvpPKeyHandle: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> ECParameters: ...
    @property
    def PublicKey(self) -> ECDiffieHellmanPublicKey: ...
    @overload
    def ImportParameters(self, parameters: ECParameters) -> None: ...

class ECDsaOpenSsl(ECDsa):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, curve: ECCurve): ...
    @overload
    def __init__(self, pkeyHandle: SafeEvpPKeyHandle): ...
    @overload
    def DuplicateKeyHandle() -> SafeEvpPKeyHandle: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte]) -> bool: ...

class RSAOpenSsl(RSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keySize: int): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, parameters: RSAParameters): ...
    @overload
    def __init__(self, pkeyHandle: SafeEvpPKeyHandle): ...
    @overload
    def DuplicateKeyHandle() -> SafeEvpPKeyHandle: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> RSAParameters: ...
    @overload
    def ImportParameters(self, parameters: RSAParameters) -> None: ...

class SafeEvpPKeyHandle(InteropServices.SafeHandle):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handle: System.IntPtr, ownsHandle: bool): ...
    @overload
    def DuplicateHandle() -> SafeEvpPKeyHandle: ...
    @property
    def IsInvalid(self) -> bool: ...
    @property
    def OpenSslVersion(self) -> System.Int64: ...

class RSACryptoServiceProvider(RSA):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dwKeySize: int): ...
    @overload
    def __init__(self, parameters: CspParameters): ...
    @overload
    def __init__(self, dwKeySize: int, parameters: CspParameters): ...
    @overload
    def Decrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Decrypt(self, rgb: System.System.Array[System.Byte], fOAEP: bool) -> System.System.Array[System.Byte]: ...
    @overload
    def DecryptValue(self, rgb: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, data: System.System.Array[System.Byte], padding: RSAEncryptionPadding) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, rgb: System.System.Array[System.Byte], fOAEP: bool) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptValue(self, rgb: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportCspBlob(self, includePrivateParameters: bool) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportParameters(self, includePrivateParameters: bool) -> RSAParameters: ...
    @property
    def CspKeyContainerInfo(self) -> CspKeyContainerInfo: ...
    @property
    def KeyExchangeAlgorithm(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalKeySizes(self) -> System.Array[KeySizes]: ...
    @property
    def PersistKeyInCsp(self) -> bool: ...
    @property
    def PublicOnly(self) -> bool: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @property
    def UseMachineKeyStore(self) -> bool: ...
    @overload
    def ImportCspBlob(self, keyBlob: System.System.Array[System.Byte]) -> None: ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, password: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportEncryptedPkcs8PrivateKey(self, passwordBytes: System.ReadOnlySpan, source: System.ReadOnlySpan) -> (int): ...
    @overload
    def ImportParameters(self, parameters: RSAParameters) -> None: ...
    @PersistKeyInCsp.setter
    def PersistKeyInCsp(self, value: System.Void): ...
    @UseMachineKeyStore.setter
    def UseMachineKeyStore(self, value: System.Void): ...
    @overload
    def SignData(self, buffer: System.System.Array[System.Byte], halg: object) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, inputStream: IO.Stream, halg: object) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, buffer: System.System.Array[System.Byte], offset: int, count: int, halg: object) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, rgbHash: System.System.Array[System.Byte], str_: str) -> System.System.Array[System.Byte]: ...
    @overload
    def SignHash(self, hash_: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> System.System.Array[System.Byte]: ...
    @overload
    def VerifyData(self, buffer: System.System.Array[System.Byte], halg: object, signature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, rgbHash: System.System.Array[System.Byte], str_: str, rgbSignature: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def VerifyHash(self, hash_: System.System.Array[System.Byte], signature: System.System.Array[System.Byte], hashAlgorithm: HashAlgorithmName, padding: RSASignaturePadding) -> bool: ...

class TripleDESCng(TripleDES):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyName: str): ...
    @overload
    def __init__(self, keyName: str, provider: CngProvider): ...
    @overload
    def __init__(self, keyName: str, provider: CngProvider, openOptions: CngKeyOpenOptions): ...
    @overload
    def CreateDecryptor() -> ICryptoTransform: ...
    @overload
    def CreateDecryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def CreateEncryptor() -> ICryptoTransform: ...
    @overload
    def CreateEncryptor(self, rgbKey: System.System.Array[System.Byte], rgbIV: System.System.Array[System.Byte]) -> ICryptoTransform: ...
    @overload
    def GenerateIV() -> None: ...
    @overload
    def GenerateKey() -> None: ...
    @property
    def Key(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeySize(self) -> int: ...
    @Key.setter
    def Key(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...

# endregion
