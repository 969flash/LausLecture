"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AlgorithmIdentifier", "CmsRecipient", "CmsRecipientCollection", "CmsRecipientEnumerator", "ContentInfo", "EnvelopedCms", "KeyAgreeRecipientInfo", "KeyTransRecipientInfo", "Pkcs9AttributeObject", "Pkcs9ContentType", "Pkcs9DocumentDescription", "Pkcs9DocumentName", "Pkcs9MessageDigest", "Pkcs9SigningTime", "PublicKeyInfo", "RecipientInfo", "RecipientInfoCollection", "RecipientInfoEnumerator", "RecipientInfoType", "SubjectIdentifier", "SubjectIdentifierOrKey", "SubjectIdentifierOrKeyType", "SubjectIdentifierType", "CmsSigner", "SignedCms", "SignerInfo", "SignerInfoCollection", "SignerInfoEnumerator", "Pkcs12Builder", "Pkcs12CertBag", "Pkcs12ConfidentialityMode", "Pkcs12Info", "Pkcs12IntegrityMode", "Pkcs12KeyBag", "Pkcs12SafeBag", "Pkcs12SafeContents", "Pkcs12SafeContentsBag", "Pkcs12SecretBag", "Pkcs12ShroudedKeyBag", "Pkcs8PrivateKeyInfo", "Pkcs9LocalKeyId", "Rfc3161TimestampRequest", "Rfc3161TimestampToken", "Rfc3161TimestampTokenInfo"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Security import Cryptography
from System.Security.Cryptography import X509Certificates
from typing import overload
import enum
import System
# endregion

# region: System.Security.Cryptography.Pkcs, Version=7.0.0.0

class AlgorithmIdentifier(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, oid: Cryptography.Oid): ...
    @overload
    def __init__(self, oid: Cryptography.Oid, keyLength: int): ...
    @property
    def KeyLength(self) -> int: ...
    @property
    def Oid(self) -> Cryptography.Oid: ...
    @property
    def Parameters(self) -> System.System.Array[System.Byte]: ...
    @KeyLength.setter
    def KeyLength(self, value: System.Void): ...
    @Oid.setter
    def Oid(self, value: System.Void): ...
    @Parameters.setter
    def Parameters(self, value: System.Void): ...

class CmsRecipient(object):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2, rsaEncryptionPadding: Cryptography.RSAEncryptionPadding): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificate: X509Certificates.X509Certificate2, rsaEncryptionPadding: Cryptography.RSAEncryptionPadding): ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate2: ...
    @property
    def RecipientIdentifierType(self) -> SubjectIdentifierType: ...
    @property
    def RSAEncryptionPadding(self) -> Cryptography.RSAEncryptionPadding: ...

class CmsRecipientCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, recipient: CmsRecipient): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificates: X509Certificates.X509Certificate2Collection): ...
    @overload
    def Add(self, recipient: CmsRecipient) -> int: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[CmsRecipient], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> CmsRecipient: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> CmsRecipientEnumerator: ...
    @overload
    def Remove(self, recipient: CmsRecipient) -> None: ...

class CmsRecipientEnumerator(object):
    """    """
    @property
    def Current(self) -> CmsRecipient: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ContentInfo(object):
    """    """
    @overload
    def __init__(self, content: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, contentType: Cryptography.Oid, content: System.System.Array[System.Byte]): ...
    @property
    def Content(self) -> System.System.Array[System.Byte]: ...
    @property
    def ContentType(self) -> Cryptography.Oid: ...
    @overload
    @staticmethod
    def GetContentType(encodedMessage: System.System.Array[System.Byte]) -> Cryptography.Oid: ...
    @overload
    @staticmethod
    def GetContentType(encodedMessage: System.ReadOnlySpan) -> Cryptography.Oid: ...

class EnvelopedCms(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, contentInfo: ContentInfo, encryptionAlgorithm: AlgorithmIdentifier): ...
    @overload
    def Decode(self, encodedMessage: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decode(self, encodedMessage: System.ReadOnlySpan) -> None: ...
    @overload
    def Decrypt() -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo) -> None: ...
    @overload
    def Decrypt(self, extraStore: X509Certificates.X509Certificate2Collection) -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo, extraStore: X509Certificates.X509Certificate2Collection) -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo, privateKey: Cryptography.AsymmetricAlgorithm) -> None: ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, recipient: CmsRecipient) -> None: ...
    @overload
    def Encrypt(self, recipients: CmsRecipientCollection) -> None: ...
    @property
    def Certificates(self) -> X509Certificates.X509Certificate2Collection: ...
    @property
    def ContentEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def ContentInfo(self) -> ContentInfo: ...
    @property
    def RecipientInfos(self) -> RecipientInfoCollection: ...
    @property
    def UnprotectedAttributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def Version(self) -> int: ...

class KeyAgreeRecipientInfo(RecipientInfo):
    """    """
    @property
    def Date(self) -> System.DateTime: ...
    @property
    def EncryptedKey(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def OriginatorIdentifierOrKey(self) -> SubjectIdentifierOrKey: ...
    @property
    def OtherKeyAttribute(self) -> Cryptography.CryptographicAttributeObject: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Version(self) -> int: ...

class KeyTransRecipientInfo(RecipientInfo):
    """    """
    @property
    def EncryptedKey(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Version(self) -> int: ...

class Pkcs9AttributeObject(Cryptography.AsnEncodedData):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, asnEncodedData: Cryptography.AsnEncodedData): ...
    @overload
    def __init__(self, oid: str, encodedData: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, oid: Cryptography.Oid, encodedData: System.System.Array[System.Byte]): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def Oid(self) -> Cryptography.Oid: ...

class Pkcs9ContentType(Pkcs9AttributeObject):
    """    """
    def __init__(self): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def ContentType(self) -> Cryptography.Oid: ...

class Pkcs9DocumentDescription(Pkcs9AttributeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, documentDescription: str): ...
    @overload
    def __init__(self, encodedDocumentDescription: System.System.Array[System.Byte]): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def DocumentDescription(self) -> str: ...

class Pkcs9DocumentName(Pkcs9AttributeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, documentName: str): ...
    @overload
    def __init__(self, encodedDocumentName: System.System.Array[System.Byte]): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def DocumentName(self) -> str: ...

class Pkcs9MessageDigest(Pkcs9AttributeObject):
    """    """
    def __init__(self): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def MessageDigest(self) -> System.System.Array[System.Byte]: ...

class Pkcs9SigningTime(Pkcs9AttributeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signingTime: System.DateTime): ...
    @overload
    def __init__(self, encodedSigningTime: System.System.Array[System.Byte]): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def SigningTime(self) -> System.DateTime: ...

class PublicKeyInfo(object):
    """    """
    @property
    def Algorithm(self) -> AlgorithmIdentifier: ...
    @property
    def KeyValue(self) -> System.System.Array[System.Byte]: ...

class RecipientInfo(object):
    """    """
    @property
    def EncryptedKey(self) -> System.System.Array[System.Byte]: ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Type(self) -> RecipientInfoType: ...
    @property
    def Version(self) -> int: ...

class RecipientInfoCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[RecipientInfo], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> RecipientInfo: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> RecipientInfoEnumerator: ...

class RecipientInfoEnumerator(object):
    """    """
    @property
    def Current(self) -> RecipientInfo: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class RecipientInfoType(enum.Enum):
    Unknown = 0
    KeyTransport = 1
    KeyAgreement = 2

class SubjectIdentifier(object):
    """    """
    @property
    def Type(self) -> SubjectIdentifierType: ...
    @property
    def Value(self) -> object: ...
    @overload
    def MatchesCertificate(self, certificate: X509Certificates.X509Certificate2) -> bool: ...

class SubjectIdentifierOrKey(object):
    """    """
    @property
    def Type(self) -> SubjectIdentifierOrKeyType: ...
    @property
    def Value(self) -> object: ...

class SubjectIdentifierOrKeyType(enum.Enum):
    Unknown = 0
    IssuerAndSerialNumber = 1
    SubjectKeyIdentifier = 2
    PublicKeyInfo = 3

class SubjectIdentifierType(enum.Enum):
    Unknown = 0
    IssuerAndSerialNumber = 1
    SubjectKeyIdentifier = 2
    NoSignature = 3

class CmsSigner(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType): ...
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, parameters: Cryptography.CspParameters): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, certificate: X509Certificates.X509Certificate2, privateKey: Cryptography.AsymmetricAlgorithm): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, certificate: X509Certificates.X509Certificate2, privateKey: Cryptography.RSA, signaturePadding: Cryptography.RSASignaturePadding): ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate2: ...
    @property
    def Certificates(self) -> X509Certificates.X509Certificate2Collection: ...
    @property
    def DigestAlgorithm(self) -> Cryptography.Oid: ...
    @property
    def IncludeOption(self) -> X509Certificates.X509IncludeOption: ...
    @property
    def PrivateKey(self) -> Cryptography.AsymmetricAlgorithm: ...
    @property
    def SignaturePadding(self) -> Cryptography.RSASignaturePadding: ...
    @property
    def SignedAttributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def SignerIdentifierType(self) -> SubjectIdentifierType: ...
    @property
    def UnsignedAttributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @Certificate.setter
    def Certificate(self, value: System.Void): ...
    @DigestAlgorithm.setter
    def DigestAlgorithm(self, value: System.Void): ...
    @IncludeOption.setter
    def IncludeOption(self, value: System.Void): ...
    @PrivateKey.setter
    def PrivateKey(self, value: System.Void): ...
    @SignaturePadding.setter
    def SignaturePadding(self, value: System.Void): ...
    @SignerIdentifierType.setter
    def SignerIdentifierType(self, value: System.Void): ...

class SignedCms(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType): ...
    @overload
    def __init__(self, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, contentInfo: ContentInfo, detached: bool): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, contentInfo: ContentInfo, detached: bool): ...
    @overload
    def AddCertificate(self, certificate: X509Certificates.X509Certificate2) -> None: ...
    @overload
    def CheckHash() -> None: ...
    @overload
    def CheckSignature(self, verifySignatureOnly: bool) -> None: ...
    @overload
    def CheckSignature(self, extraStore: X509Certificates.X509Certificate2Collection, verifySignatureOnly: bool) -> None: ...
    @overload
    def ComputeSignature() -> None: ...
    @overload
    def ComputeSignature(self, signer: CmsSigner) -> None: ...
    @overload
    def ComputeSignature(self, signer: CmsSigner, silent: bool) -> None: ...
    @overload
    def Decode(self, encodedMessage: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decode(self, encodedMessage: System.ReadOnlySpan) -> None: ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @property
    def Certificates(self) -> X509Certificates.X509Certificate2Collection: ...
    @property
    def ContentInfo(self) -> ContentInfo: ...
    @property
    def Detached(self) -> bool: ...
    @property
    def SignerInfos(self) -> SignerInfoCollection: ...
    @property
    def Version(self) -> int: ...
    @overload
    def RemoveCertificate(self, certificate: X509Certificates.X509Certificate2) -> None: ...
    @overload
    def RemoveSignature(self, index: int) -> None: ...
    @overload
    def RemoveSignature(self, signerInfo: SignerInfo) -> None: ...

class SignerInfo(object):
    """    """
    @overload
    def AddUnsignedAttribute(self, unsignedAttribute: Cryptography.AsnEncodedData) -> None: ...
    @overload
    def CheckHash() -> None: ...
    @overload
    def CheckSignature(self, verifySignatureOnly: bool) -> None: ...
    @overload
    def CheckSignature(self, extraStore: X509Certificates.X509Certificate2Collection, verifySignatureOnly: bool) -> None: ...
    @overload
    def ComputeCounterSignature(self, signer: CmsSigner) -> None: ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate2: ...
    @property
    def CounterSignerInfos(self) -> SignerInfoCollection: ...
    @property
    def DigestAlgorithm(self) -> Cryptography.Oid: ...
    @property
    def SignatureAlgorithm(self) -> Cryptography.Oid: ...
    @property
    def SignedAttributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def SignerIdentifier(self) -> SubjectIdentifier: ...
    @property
    def UnsignedAttributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def Version(self) -> int: ...
    @overload
    def GetSignature() -> System.System.Array[System.Byte]: ...
    @overload
    def RemoveCounterSignature(self, index: int) -> None: ...
    @overload
    def RemoveCounterSignature(self, counterSignerInfo: SignerInfo) -> None: ...
    @overload
    def RemoveUnsignedAttribute(self, unsignedAttribute: Cryptography.AsnEncodedData) -> None: ...

class SignerInfoCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[SignerInfo], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> SignerInfo: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> SignerInfoEnumerator: ...

class SignerInfoEnumerator(object):
    """    """
    @property
    def Current(self) -> SignerInfo: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class Pkcs12Builder(object):
    """    """
    def __init__(self): ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, passwordBytes: System.System.Array[System.Byte], pbeParameters: Cryptography.PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, passwordBytes: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, password: str, pbeParameters: Cryptography.PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, password: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> None: ...
    @overload
    def AddSafeContentsUnencrypted(self, safeContents: Pkcs12SafeContents) -> None: ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @property
    def IsSealed(self) -> bool: ...
    @overload
    def SealWithMac(self, password: str, hashAlgorithm: Cryptography.HashAlgorithmName, iterationCount: int) -> None: ...
    @overload
    def SealWithMac(self, password: System.ReadOnlySpan, hashAlgorithm: Cryptography.HashAlgorithmName, iterationCount: int) -> None: ...
    @overload
    def SealWithoutIntegrity() -> None: ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...

class Pkcs12CertBag(Pkcs12SafeBag):
    """    """
    def __init__(self, certificateType: Cryptography.Oid, encodedCertificate: System.ReadOnlyMemory): ...
    @property
    def EncodedCertificate(self) -> System.ReadOnlyMemory: ...
    @property
    def IsX509Certificate(self) -> bool: ...
    @overload
    def GetCertificate() -> X509Certificates.X509Certificate2: ...
    @overload
    def GetCertificateType() -> Cryptography.Oid: ...

class Pkcs12ConfidentialityMode(enum.Enum):
    Unknown = 0
    None_ = 1
    Password = 2
    PublicKey = 3

class Pkcs12Info(object):
    """    """
    @overload
    @staticmethod
    def Decode(encodedBytes: System.ReadOnlyMemory, skipCopy: bool) -> (Pkcs12Info, int): ...
    @property
    def AuthenticatedSafe(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def IntegrityMode(self) -> Pkcs12IntegrityMode: ...
    @overload
    def VerifyMac(self, password: str) -> bool: ...
    @overload
    def VerifyMac(self, password: System.ReadOnlySpan) -> bool: ...

class Pkcs12IntegrityMode(enum.Enum):
    Unknown = 0
    None_ = 1
    Password = 2
    PublicKey = 3

class Pkcs12KeyBag(Pkcs12SafeBag):
    """    """
    def __init__(self, pkcs8PrivateKey: System.ReadOnlyMemory, skipCopy: bool): ...
    @property
    def Pkcs8PrivateKey(self) -> System.ReadOnlyMemory: ...

class Pkcs12SafeBag(object):
    """    """
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @property
    def Attributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def EncodedBagValue(self) -> System.ReadOnlyMemory: ...
    @overload
    def GetBagId() -> Cryptography.Oid: ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...

class Pkcs12SafeContents(object):
    """    """
    def __init__(self): ...
    @overload
    def AddCertificate(self, certificate: X509Certificates.X509Certificate2) -> Pkcs12CertBag: ...
    @overload
    def AddKeyUnencrypted(self, key: Cryptography.AsymmetricAlgorithm) -> Pkcs12KeyBag: ...
    @overload
    def AddNestedContents(self, safeContents: Pkcs12SafeContents) -> Pkcs12SafeContentsBag: ...
    @overload
    def AddSafeBag(self, safeBag: Pkcs12SafeBag) -> None: ...
    @overload
    def AddSecret(self, secretType: Cryptography.Oid, secretValue: System.ReadOnlyMemory) -> Pkcs12SecretBag: ...
    @overload
    def AddShroudedKey(self, key: Cryptography.AsymmetricAlgorithm, password: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: Cryptography.AsymmetricAlgorithm, passwordBytes: System.System.Array[System.Byte], pbeParameters: Cryptography.PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: Cryptography.AsymmetricAlgorithm, passwordBytes: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: Cryptography.AsymmetricAlgorithm, password: str, pbeParameters: Cryptography.PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def Decrypt(self, password: System.ReadOnlySpan) -> None: ...
    @overload
    def Decrypt(self, passwordBytes: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Decrypt(self, passwordBytes: System.ReadOnlySpan) -> None: ...
    @overload
    def Decrypt(self, password: str) -> None: ...
    @property
    def ConfidentialityMode(self) -> Pkcs12ConfidentialityMode: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def GetBags() -> Generic.IEnumerable: ...

class Pkcs12SafeContentsBag(Pkcs12SafeBag):
    """    """
    @property
    def SafeContents(self) -> Pkcs12SafeContents: ...

class Pkcs12SecretBag(Pkcs12SafeBag):
    """    """
    @property
    def SecretValue(self) -> System.ReadOnlyMemory: ...
    @overload
    def GetSecretType() -> Cryptography.Oid: ...

class Pkcs12ShroudedKeyBag(Pkcs12SafeBag):
    """    """
    def __init__(self, encryptedPkcs8PrivateKey: System.ReadOnlyMemory, skipCopy: bool): ...
    @property
    def EncryptedPkcs8PrivateKey(self) -> System.ReadOnlyMemory: ...

class Pkcs8PrivateKeyInfo(object):
    """    """
    def __init__(self, algorithmId: Cryptography.Oid, algorithmParameters: System.Nullable, privateKey: System.ReadOnlyMemory, skipCopies: bool): ...
    @overload
    @staticmethod
    def Create(privateKey: Cryptography.AsymmetricAlgorithm) -> Pkcs8PrivateKeyInfo: ...
    @overload
    @staticmethod
    def Decode(source: System.ReadOnlyMemory, skipCopy: bool) -> (Pkcs8PrivateKeyInfo, int): ...
    @overload
    @staticmethod
    def DecryptAndDecode(passwordBytes: System.ReadOnlySpan, source: System.ReadOnlyMemory) -> (Pkcs8PrivateKeyInfo, int): ...
    @overload
    @staticmethod
    def DecryptAndDecode(password: System.ReadOnlySpan, source: System.ReadOnlyMemory) -> (Pkcs8PrivateKeyInfo, int): ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, passwordBytes: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> System.System.Array[System.Byte]: ...
    @overload
    def Encrypt(self, password: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters) -> System.System.Array[System.Byte]: ...
    @property
    def AlgorithmId(self) -> Cryptography.Oid: ...
    @property
    def AlgorithmParameters(self) -> System.Nullable: ...
    @property
    def Attributes(self) -> Cryptography.CryptographicAttributeObjectCollection: ...
    @property
    def PrivateKeyBytes(self) -> System.ReadOnlyMemory: ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryEncrypt(self, password: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters, destination: System.Span) -> (bool, int): ...
    @overload
    def TryEncrypt(self, passwordBytes: System.ReadOnlySpan, pbeParameters: Cryptography.PbeParameters, destination: System.Span) -> (bool, int): ...

class Pkcs9LocalKeyId(Pkcs9AttributeObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyId: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, keyId: System.ReadOnlySpan): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def KeyId(self) -> System.ReadOnlyMemory: ...

class Rfc3161TimestampRequest(object):
    """    """
    @overload
    @staticmethod
    def CreateFromData(data: System.ReadOnlySpan, hashAlgorithm: Cryptography.HashAlgorithmName, requestedPolicyId: Cryptography.Oid, nonce: System.Nullable, requestSignerCertificates: bool, extensions: X509Certificates.X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    @staticmethod
    def CreateFromHash(hash_: System.ReadOnlyMemory, hashAlgorithmId: Cryptography.Oid, requestedPolicyId: Cryptography.Oid, nonce: System.Nullable, requestSignerCertificates: bool, extensions: X509Certificates.X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    @staticmethod
    def CreateFromHash(hash_: System.ReadOnlyMemory, hashAlgorithm: Cryptography.HashAlgorithmName, requestedPolicyId: Cryptography.Oid, nonce: System.Nullable, requestSignerCertificates: bool, extensions: X509Certificates.X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    @staticmethod
    def CreateFromSignerInfo(signerInfo: SignerInfo, hashAlgorithm: Cryptography.HashAlgorithmName, requestedPolicyId: Cryptography.Oid, nonce: System.Nullable, requestSignerCertificates: bool, extensions: X509Certificates.X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @property
    def HasExtensions(self) -> bool: ...
    @property
    def HashAlgorithmId(self) -> Cryptography.Oid: ...
    @property
    def RequestedPolicyId(self) -> Cryptography.Oid: ...
    @property
    def RequestSignerCertificate(self) -> bool: ...
    @property
    def Version(self) -> int: ...
    @overload
    def GetExtensions() -> X509Certificates.X509ExtensionCollection: ...
    @overload
    def GetMessageHash() -> System.ReadOnlyMemory: ...
    @overload
    def GetNonce() -> System.Nullable: ...
    @overload
    def ProcessResponse(self, responseBytes: System.ReadOnlyMemory) -> (Rfc3161TimestampToken, int): ...
    @overload
    @staticmethod
    def TryDecode(encodedBytes: System.ReadOnlyMemory) -> (bool, Rfc3161TimestampRequest, int): ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...

class Rfc3161TimestampToken(object):
    """    """
    @overload
    def AsSignedCms() -> SignedCms: ...
    @property
    def TokenInfo(self) -> Rfc3161TimestampTokenInfo: ...
    @overload
    @staticmethod
    def TryDecode(encodedBytes: System.ReadOnlyMemory) -> (bool, Rfc3161TimestampToken, int): ...
    @overload
    def VerifySignatureForData(self, data: System.ReadOnlySpan, extraCandidates: X509Certificates.X509Certificate2Collection) -> (bool, X509Certificates.X509Certificate2): ...
    @overload
    def VerifySignatureForHash(self, hash_: System.ReadOnlySpan, hashAlgorithm: Cryptography.HashAlgorithmName, extraCandidates: X509Certificates.X509Certificate2Collection) -> (bool, X509Certificates.X509Certificate2): ...
    @overload
    def VerifySignatureForHash(self, hash_: System.ReadOnlySpan, hashAlgorithmId: Cryptography.Oid, extraCandidates: X509Certificates.X509Certificate2Collection) -> (bool, X509Certificates.X509Certificate2): ...
    @overload
    def VerifySignatureForSignerInfo(self, signerInfo: SignerInfo, extraCandidates: X509Certificates.X509Certificate2Collection) -> (bool, X509Certificates.X509Certificate2): ...

class Rfc3161TimestampTokenInfo(object):
    """    """
    def __init__(self, policyId: Cryptography.Oid, hashAlgorithmId: Cryptography.Oid, messageHash: System.ReadOnlyMemory, serialNumber: System.ReadOnlyMemory, timestamp: System.DateTimeOffset, accuracyInMicroseconds: System.Nullable, isOrdering: bool, nonce: System.Nullable, timestampAuthorityName: System.Nullable, extensions: X509Certificates.X509ExtensionCollection): ...
    @overload
    def Encode() -> System.System.Array[System.Byte]: ...
    @property
    def AccuracyInMicroseconds(self) -> System.Nullable: ...
    @property
    def HasExtensions(self) -> bool: ...
    @property
    def HashAlgorithmId(self) -> Cryptography.Oid: ...
    @property
    def IsOrdering(self) -> bool: ...
    @property
    def PolicyId(self) -> Cryptography.Oid: ...
    @property
    def Timestamp(self) -> System.DateTimeOffset: ...
    @property
    def Version(self) -> int: ...
    @overload
    def GetExtensions() -> X509Certificates.X509ExtensionCollection: ...
    @overload
    def GetMessageHash() -> System.ReadOnlyMemory: ...
    @overload
    def GetNonce() -> System.Nullable: ...
    @overload
    def GetSerialNumber() -> System.ReadOnlyMemory: ...
    @overload
    def GetTimestampAuthorityName() -> System.Nullable: ...
    @overload
    @staticmethod
    def TryDecode(encodedBytes: System.ReadOnlyMemory) -> (bool, Rfc3161TimestampTokenInfo, int): ...
    @overload
    def TryEncode(self, destination: System.Span) -> (bool, int): ...

# endregion
