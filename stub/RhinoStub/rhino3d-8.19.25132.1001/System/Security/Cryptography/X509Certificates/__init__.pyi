"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CertificateRequest", "CertificateRequestLoadOptions", "CertificateRevocationListBuilder", "DSACertificateExtensions", "ECDsaCertificateExtensions", "OpenFlags", "PublicKey", "RSACertificateExtensions", "StoreLocation", "StoreName", "SubjectAlternativeNameBuilder", "X500DistinguishedName", "X500DistinguishedNameBuilder", "X500DistinguishedNameFlags", "X500RelativeDistinguishedName", "X509AuthorityInformationAccessExtension", "X509AuthorityKeyIdentifierExtension", "X509BasicConstraintsExtension", "X509Certificate", "X509Certificate2", "X509Certificate2Collection", "X509Certificate2Enumerator", "X509CertificateCollection", "X509CertificateEnumerator", "X509Chain", "X509ChainElement", "X509ChainElementCollection", "X509ChainElementEnumerator", "X509ChainPolicy", "X509ChainStatus", "X509ChainStatusFlags", "X509ChainTrustMode", "X509ContentType", "X509EnhancedKeyUsageExtension", "X509Extension", "X509ExtensionCollection", "X509ExtensionEnumerator", "X509FindType", "X509IncludeOption", "X509KeyStorageFlags", "X509KeyUsageExtension", "X509KeyUsageFlags", "X509NameType", "X509RevocationFlag", "X509RevocationMode", "X509RevocationReason", "X509SignatureGenerator", "X509Store", "X509SubjectAlternativeNameExtension", "X509SubjectKeyIdentifierExtension", "X509SubjectKeyIdentifierHashAlgorithm", "X509VerificationFlags"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Collections
from System import Net
from System import Numerics
from System import Security
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Cryptography
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["X509SelectionFlag", "X509Certificate2UI"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Windows.Extensions, Version=7.0.0.0

class X509SelectionFlag(enum.Enum):
    SingleSelection = 0
    MultiSelection = 1

class X509Certificate2UI(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def DisplayCertificate(certificate: X509Certificate2) -> None: ...
    @overload
    @staticmethod
    def DisplayCertificate(certificate: X509Certificate2, hwndParent: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def SelectFromCollection(certificates: X509Certificate2Collection, title: str, message: str, selectionFlag: X509SelectionFlag) -> X509Certificate2Collection: ...
    @overload
    @staticmethod
    def SelectFromCollection(certificates: X509Certificate2Collection, title: str, message: str, selectionFlag: X509SelectionFlag, hwndParent: System.IntPtr) -> X509Certificate2Collection: ...

# endregion

# region: System.Security.Cryptography, Version=7.0.0.0

class CertificateRequest(object):
    """    """
    @overload
    def __init__(self, subjectName: str, key: Cryptography.ECDsa, hashAlgorithm: Cryptography.HashAlgorithmName): ...
    @overload
    def __init__(self, subjectName: X500DistinguishedName, key: Cryptography.ECDsa, hashAlgorithm: Cryptography.HashAlgorithmName): ...
    @overload
    def __init__(self, subjectName: X500DistinguishedName, publicKey: PublicKey, hashAlgorithm: Cryptography.HashAlgorithmName): ...
    @overload
    def __init__(self, subjectName: str, key: Cryptography.RSA, hashAlgorithm: Cryptography.HashAlgorithmName, padding: Cryptography.RSASignaturePadding): ...
    @overload
    def __init__(self, subjectName: X500DistinguishedName, key: Cryptography.RSA, hashAlgorithm: Cryptography.HashAlgorithmName, padding: Cryptography.RSASignaturePadding): ...
    @overload
    def __init__(self, subjectName: X500DistinguishedName, publicKey: PublicKey, hashAlgorithm: Cryptography.HashAlgorithmName, rsaSignaturePadding: Cryptography.RSASignaturePadding): ...
    @overload
    def Create(self, issuerCertificate: X509Certificate2, notBefore: System.DateTimeOffset, notAfter: System.DateTimeOffset, serialNumber: System.System.Array[System.Byte]) -> X509Certificate2: ...
    @overload
    def Create(self, issuerCertificate: X509Certificate2, notBefore: System.DateTimeOffset, notAfter: System.DateTimeOffset, serialNumber: System.ReadOnlySpan) -> X509Certificate2: ...
    @overload
    def Create(self, issuerName: X500DistinguishedName, generator: X509SignatureGenerator, notBefore: System.DateTimeOffset, notAfter: System.DateTimeOffset, serialNumber: System.System.Array[System.Byte]) -> X509Certificate2: ...
    @overload
    def Create(self, issuerName: X500DistinguishedName, generator: X509SignatureGenerator, notBefore: System.DateTimeOffset, notAfter: System.DateTimeOffset, serialNumber: System.ReadOnlySpan) -> X509Certificate2: ...
    @overload
    def CreateSelfSigned(self, notBefore: System.DateTimeOffset, notAfter: System.DateTimeOffset) -> X509Certificate2: ...
    @overload
    def CreateSigningRequest() -> System.System.Array[System.Byte]: ...
    @overload
    def CreateSigningRequest(self, signatureGenerator: X509SignatureGenerator) -> System.System.Array[System.Byte]: ...
    @overload
    def CreateSigningRequestPem() -> str: ...
    @overload
    def CreateSigningRequestPem(self, signatureGenerator: X509SignatureGenerator) -> str: ...
    @property
    def CertificateExtensions(self) -> ObjectModel.Collection: ...
    @property
    def HashAlgorithm(self) -> Cryptography.HashAlgorithmName: ...
    @property
    def OtherRequestAttributes(self) -> ObjectModel.Collection: ...
    @property
    def PublicKey(self) -> PublicKey: ...
    @property
    def SubjectName(self) -> X500DistinguishedName: ...
    @overload
    @staticmethod
    def LoadSigningRequest(pkcs10: System.System.Array[System.Byte], signerHashAlgorithm: Cryptography.HashAlgorithmName, options: CertificateRequestLoadOptions, signerSignaturePadding: Cryptography.RSASignaturePadding) -> CertificateRequest: ...
    @overload
    @staticmethod
    def LoadSigningRequest(pkcs10: System.ReadOnlySpan, signerHashAlgorithm: Cryptography.HashAlgorithmName, options: CertificateRequestLoadOptions, signerSignaturePadding: Cryptography.RSASignaturePadding) -> (CertificateRequest, int): ...
    @overload
    @staticmethod
    def LoadSigningRequestPem(pkcs10Pem: System.ReadOnlySpan, signerHashAlgorithm: Cryptography.HashAlgorithmName, options: CertificateRequestLoadOptions, signerSignaturePadding: Cryptography.RSASignaturePadding) -> CertificateRequest: ...
    @overload
    @staticmethod
    def LoadSigningRequestPem(pkcs10Pem: str, signerHashAlgorithm: Cryptography.HashAlgorithmName, options: CertificateRequestLoadOptions, signerSignaturePadding: Cryptography.RSASignaturePadding) -> CertificateRequest: ...

class CertificateRequestLoadOptions(enum.Enum):
    Default = 0
    SkipSignatureValidation = 1
    UnsafeLoadCertificateExtensions = 2

class CertificateRevocationListBuilder(object):
    """    """
    def __init__(self): ...
    @overload
    def AddEntry(self, certificate: X509Certificate2, revocationTime: System.Nullable, reason: System.Nullable) -> None: ...
    @overload
    def AddEntry(self, serialNumber: System.System.Array[System.Byte], revocationTime: System.Nullable, reason: System.Nullable) -> None: ...
    @overload
    def AddEntry(self, serialNumber: System.ReadOnlySpan, revocationTime: System.Nullable, reason: System.Nullable) -> None: ...
    @overload
    def Build(self, issuerCertificate: X509Certificate2, crlNumber: Numerics.BigInteger, nextUpdate: System.DateTimeOffset, hashAlgorithm: Cryptography.HashAlgorithmName, rsaSignaturePadding: Cryptography.RSASignaturePadding, thisUpdate: System.Nullable) -> System.System.Array[System.Byte]: ...
    @overload
    def Build(self, issuerName: X500DistinguishedName, generator: X509SignatureGenerator, crlNumber: Numerics.BigInteger, nextUpdate: System.DateTimeOffset, hashAlgorithm: Cryptography.HashAlgorithmName, authorityKeyIdentifier: X509AuthorityKeyIdentifierExtension, thisUpdate: System.Nullable) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def BuildCrlDistributionPointExtension(uris: Generic.IEnumerable, critical: bool) -> X509Extension: ...
    @overload
    @staticmethod
    def Load(currentCrl: System.System.Array[System.Byte]) -> (CertificateRevocationListBuilder, Numerics.BigInteger): ...
    @overload
    @staticmethod
    def Load(currentCrl: System.ReadOnlySpan) -> (CertificateRevocationListBuilder, Numerics.BigInteger, int): ...
    @overload
    @staticmethod
    def LoadPem(currentCrl: str) -> (CertificateRevocationListBuilder, Numerics.BigInteger): ...
    @overload
    @staticmethod
    def LoadPem(currentCrl: System.ReadOnlySpan) -> (CertificateRevocationListBuilder, Numerics.BigInteger): ...
    @overload
    def RemoveEntry(self, serialNumber: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def RemoveEntry(self, serialNumber: System.ReadOnlySpan) -> bool: ...

class DSACertificateExtensions(object):
    """    """
    @overload
    @staticmethod
    def CopyWithPrivateKey(certificate: X509Certificate2, privateKey: Cryptography.DSA) -> X509Certificate2: ...
    @overload
    @staticmethod
    def GetDSAPrivateKey(certificate: X509Certificate2) -> Cryptography.DSA: ...
    @overload
    @staticmethod
    def GetDSAPublicKey(certificate: X509Certificate2) -> Cryptography.DSA: ...

class ECDsaCertificateExtensions(object):
    """    """
    @overload
    @staticmethod
    def CopyWithPrivateKey(certificate: X509Certificate2, privateKey: Cryptography.ECDsa) -> X509Certificate2: ...
    @overload
    @staticmethod
    def GetECDsaPrivateKey(certificate: X509Certificate2) -> Cryptography.ECDsa: ...
    @overload
    @staticmethod
    def GetECDsaPublicKey(certificate: X509Certificate2) -> Cryptography.ECDsa: ...

class OpenFlags(enum.Enum):
    ReadOnly = 0
    ReadWrite = 1
    MaxAllowed = 2
    OpenExistingOnly = 4
    IncludeArchived = 8

class PublicKey(object):
    """    """
    @overload
    def __init__(self, key: Cryptography.AsymmetricAlgorithm): ...
    @overload
    def __init__(self, oid: Cryptography.Oid, parameters: Cryptography.AsnEncodedData, keyValue: Cryptography.AsnEncodedData): ...
    @overload
    @staticmethod
    def CreateFromSubjectPublicKeyInfo(source: System.ReadOnlySpan) -> (PublicKey, int): ...
    @overload
    def ExportSubjectPublicKeyInfo() -> System.System.Array[System.Byte]: ...
    @property
    def EncodedKeyValue(self) -> Cryptography.AsnEncodedData: ...
    @property
    def EncodedParameters(self) -> Cryptography.AsnEncodedData: ...
    @property
    def Key(self) -> Cryptography.AsymmetricAlgorithm: ...
    @property
    def Oid(self) -> Cryptography.Oid: ...
    @overload
    def GetDSAPublicKey() -> Cryptography.DSA: ...
    @overload
    def GetECDiffieHellmanPublicKey() -> Cryptography.ECDiffieHellman: ...
    @overload
    def GetECDsaPublicKey() -> Cryptography.ECDsa: ...
    @overload
    def GetRSAPublicKey() -> Cryptography.RSA: ...
    @overload
    def TryExportSubjectPublicKeyInfo(self, destination: System.Span) -> (bool, int): ...

class RSACertificateExtensions(object):
    """    """
    @overload
    @staticmethod
    def CopyWithPrivateKey(certificate: X509Certificate2, privateKey: Cryptography.RSA) -> X509Certificate2: ...
    @overload
    @staticmethod
    def GetRSAPrivateKey(certificate: X509Certificate2) -> Cryptography.RSA: ...
    @overload
    @staticmethod
    def GetRSAPublicKey(certificate: X509Certificate2) -> Cryptography.RSA: ...

class StoreLocation(enum.Enum):
    CurrentUser = 1
    LocalMachine = 2

class StoreName(enum.Enum):
    AddressBook = 1
    AuthRoot = 2
    CertificateAuthority = 3
    Disallowed = 4
    My = 5
    Root = 6
    TrustedPeople = 7
    TrustedPublisher = 8

class SubjectAlternativeNameBuilder(object):
    """    """
    def __init__(self): ...
    @overload
    def AddDnsName(self, dnsName: str) -> None: ...
    @overload
    def AddEmailAddress(self, emailAddress: str) -> None: ...
    @overload
    def AddIpAddress(self, ipAddress: Net.IPAddress) -> None: ...
    @overload
    def AddUri(self, uri: System.Uri) -> None: ...
    @overload
    def AddUserPrincipalName(self, upn: str) -> None: ...
    @overload
    def Build(self, critical: bool) -> X509Extension: ...

class X500DistinguishedName(Cryptography.AsnEncodedData):
    """    """
    @overload
    def __init__(self, encodedDistinguishedName: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, encodedDistinguishedName: System.ReadOnlySpan): ...
    @overload
    def __init__(self, encodedDistinguishedName: Cryptography.AsnEncodedData): ...
    @overload
    def __init__(self, distinguishedName: X500DistinguishedName): ...
    @overload
    def __init__(self, distinguishedName: str): ...
    @overload
    def __init__(self, distinguishedName: str, flag: X500DistinguishedNameFlags): ...
    @overload
    def Decode(self, flag: X500DistinguishedNameFlags) -> str: ...
    @overload
    def EnumerateRelativeDistinguishedNames(self, reversed_: bool) -> Generic.IEnumerable: ...
    @overload
    def Format(self, multiLine: bool) -> str: ...
    @property
    def Name(self) -> str: ...

class X500DistinguishedNameBuilder(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, oidValue: str, value: str, stringEncodingType: System.Nullable) -> None: ...
    @overload
    def Add(self, oid: Cryptography.Oid, value: str, stringEncodingType: System.Nullable) -> None: ...
    @overload
    def AddCommonName(self, commonName: str) -> None: ...
    @overload
    def AddCountryOrRegion(self, twoLetterCode: str) -> None: ...
    @overload
    def AddDomainComponent(self, domainComponent: str) -> None: ...
    @overload
    def AddEmailAddress(self, emailAddress: str) -> None: ...
    @overload
    def AddLocalityName(self, localityName: str) -> None: ...
    @overload
    def AddOrganizationalUnitName(self, organizationalUnitName: str) -> None: ...
    @overload
    def AddOrganizationName(self, organizationName: str) -> None: ...
    @overload
    def AddStateOrProvinceName(self, stateOrProvinceName: str) -> None: ...
    @overload
    def Build() -> X500DistinguishedName: ...

class X500DistinguishedNameFlags(enum.Enum):
    None_ = 0
    Reversed = 1
    UseSemicolons = 16
    DoNotUsePlusSign = 32
    DoNotUseQuotes = 64
    UseCommas = 128
    UseNewLines = 256
    UseUTF8Encoding = 4096
    UseT61Encoding = 8192
    ForceUTF8Encoding = 16384

class X500RelativeDistinguishedName(object):
    """    """
    @property
    def HasMultipleElements(self) -> bool: ...
    @property
    def RawData(self) -> System.ReadOnlyMemory: ...
    @overload
    def GetSingleElementType() -> Cryptography.Oid: ...
    @overload
    def GetSingleElementValue() -> str: ...

class X509AuthorityInformationAccessExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan, critical: bool): ...
    @overload
    def __init__(self, ocspUris: Generic.IEnumerable, caIssuersUris: Generic.IEnumerable, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @overload
    def EnumerateCAIssuersUris() -> Generic.IEnumerable: ...
    @overload
    def EnumerateOcspUris() -> Generic.IEnumerable: ...
    @overload
    def EnumerateUris(self, accessMethodOid: str) -> Generic.IEnumerable: ...
    @overload
    def EnumerateUris(self, accessMethodOid: Cryptography.Oid) -> Generic.IEnumerable: ...

class X509AuthorityKeyIdentifierExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @overload
    @staticmethod
    def Create(keyIdentifier: System.System.Array[System.Byte], issuerName: X500DistinguishedName, serialNumber: System.System.Array[System.Byte]) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def Create(keyIdentifier: System.ReadOnlySpan, issuerName: X500DistinguishedName, serialNumber: System.ReadOnlySpan) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromCertificate(certificate: X509Certificate2, includeKeyIdentifier: bool, includeIssuerAndSerial: bool) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromIssuerNameAndSerialNumber(issuerName: X500DistinguishedName, serialNumber: System.System.Array[System.Byte]) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromIssuerNameAndSerialNumber(issuerName: X500DistinguishedName, serialNumber: System.ReadOnlySpan) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromSubjectKeyIdentifier(subjectKeyIdentifier: X509SubjectKeyIdentifierExtension) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromSubjectKeyIdentifier(subjectKeyIdentifier: System.System.Array[System.Byte]) -> X509AuthorityKeyIdentifierExtension: ...
    @overload
    @staticmethod
    def CreateFromSubjectKeyIdentifier(subjectKeyIdentifier: System.ReadOnlySpan) -> X509AuthorityKeyIdentifierExtension: ...
    @property
    def KeyIdentifier(self) -> System.Nullable: ...
    @property
    def NamedIssuer(self) -> X500DistinguishedName: ...
    @property
    def RawIssuer(self) -> System.Nullable: ...
    @property
    def SerialNumber(self) -> System.Nullable: ...

class X509BasicConstraintsExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encodedBasicConstraints: Cryptography.AsnEncodedData, critical: bool): ...
    @overload
    def __init__(self, certificateAuthority: bool, hasPathLengthConstraint: bool, pathLengthConstraint: int, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @overload
    @staticmethod
    def CreateForCertificateAuthority(pathLengthConstraint: System.Nullable) -> X509BasicConstraintsExtension: ...
    @overload
    @staticmethod
    def CreateForEndEntity(critical: bool) -> X509BasicConstraintsExtension: ...
    @property
    def CertificateAuthority(self) -> bool: ...
    @property
    def HasPathLengthConstraint(self) -> bool: ...
    @property
    def PathLengthConstraint(self) -> int: ...

class X509Certificate(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, data: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, cert: X509Certificate): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: str): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: Security.SecureString): ...
    @overload
    def __init__(self, fileName: str, password: str): ...
    @overload
    def __init__(self, fileName: str, password: Security.SecureString): ...
    @overload
    def __init__(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: str, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: Security.SecureString, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, fileName: str, password: str, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, fileName: str, password: Security.SecureString, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    @staticmethod
    def CreateFromCertFile(filename: str) -> X509Certificate: ...
    @overload
    @staticmethod
    def CreateFromSignedFile(filename: str) -> X509Certificate: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, other: X509Certificate) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Export(self, contentType: X509ContentType) -> System.System.Array[System.Byte]: ...
    @overload
    def Export(self, contentType: X509ContentType, password: str) -> System.System.Array[System.Byte]: ...
    @overload
    def Export(self, contentType: X509ContentType, password: Security.SecureString) -> System.System.Array[System.Byte]: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def Issuer(self) -> str: ...
    @property
    def SerialNumberBytes(self) -> System.ReadOnlyMemory: ...
    @property
    def Subject(self) -> str: ...
    @overload
    def GetCertHash() -> System.System.Array[System.Byte]: ...
    @overload
    def GetCertHash(self, hashAlgorithm: Cryptography.HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def GetCertHashString() -> str: ...
    @overload
    def GetCertHashString(self, hashAlgorithm: Cryptography.HashAlgorithmName) -> str: ...
    @overload
    def GetEffectiveDateString() -> str: ...
    @overload
    def GetExpirationDateString() -> str: ...
    @overload
    def GetFormat() -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetKeyAlgorithm() -> str: ...
    @overload
    def GetKeyAlgorithmParameters() -> System.System.Array[System.Byte]: ...
    @overload
    def GetKeyAlgorithmParametersString() -> str: ...
    @overload
    def GetPublicKey() -> System.System.Array[System.Byte]: ...
    @overload
    def GetPublicKeyString() -> str: ...
    @overload
    def GetRawCertData() -> System.System.Array[System.Byte]: ...
    @overload
    def GetRawCertDataString() -> str: ...
    @overload
    def GetSerialNumber() -> System.System.Array[System.Byte]: ...
    @overload
    def GetSerialNumberString() -> str: ...
    @overload
    def Reset() -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, fVerbose: bool) -> str: ...
    @overload
    def TryGetCertHash(self, hashAlgorithm: Cryptography.HashAlgorithmName, destination: System.Span) -> (bool, int): ...

class X509Certificate2(X509Certificate):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan): ...
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, certificate: X509Certificate): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: str): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: Security.SecureString): ...
    @overload
    def __init__(self, fileName: str, password: str): ...
    @overload
    def __init__(self, fileName: str, password: Security.SecureString): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: str, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], password: Security.SecureString, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan, password: System.ReadOnlySpan, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, fileName: str, password: str, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, fileName: str, password: Security.SecureString, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def __init__(self, fileName: str, password: System.ReadOnlySpan, keyStorageFlags: X509KeyStorageFlags): ...
    @overload
    def CopyWithPrivateKey(self, privateKey: Cryptography.ECDiffieHellman) -> X509Certificate2: ...
    @overload
    @staticmethod
    def CreateFromEncryptedPem(certPem: System.ReadOnlySpan, keyPem: System.ReadOnlySpan, password: System.ReadOnlySpan) -> X509Certificate2: ...
    @overload
    @staticmethod
    def CreateFromEncryptedPemFile(certPemFilePath: str, password: System.ReadOnlySpan, keyPemFilePath: str) -> X509Certificate2: ...
    @overload
    @staticmethod
    def CreateFromPem(certPem: System.ReadOnlySpan) -> X509Certificate2: ...
    @overload
    @staticmethod
    def CreateFromPem(certPem: System.ReadOnlySpan, keyPem: System.ReadOnlySpan) -> X509Certificate2: ...
    @overload
    @staticmethod
    def CreateFromPemFile(certPemFilePath: str, keyPemFilePath: str) -> X509Certificate2: ...
    @overload
    def ExportCertificatePem() -> str: ...
    @property
    def Archived(self) -> bool: ...
    @property
    def Extensions(self) -> X509ExtensionCollection: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def HasPrivateKey(self) -> bool: ...
    @property
    def IssuerName(self) -> X500DistinguishedName: ...
    @property
    def NotAfter(self) -> System.DateTime: ...
    @property
    def NotBefore(self) -> System.DateTime: ...
    @property
    def PrivateKey(self) -> Cryptography.AsymmetricAlgorithm: ...
    @property
    def PublicKey(self) -> PublicKey: ...
    @property
    def RawData(self) -> System.System.Array[System.Byte]: ...
    @property
    def RawDataMemory(self) -> System.ReadOnlyMemory: ...
    @property
    def SerialNumber(self) -> str: ...
    @property
    def SignatureAlgorithm(self) -> Cryptography.Oid: ...
    @property
    def SubjectName(self) -> X500DistinguishedName: ...
    @property
    def Thumbprint(self) -> str: ...
    @property
    def Version(self) -> int: ...
    @overload
    @staticmethod
    def GetCertContentType(rawData: System.ReadOnlySpan) -> X509ContentType: ...
    @overload
    @staticmethod
    def GetCertContentType(rawData: System.System.Array[System.Byte]) -> X509ContentType: ...
    @overload
    @staticmethod
    def GetCertContentType(fileName: str) -> X509ContentType: ...
    @overload
    def GetECDiffieHellmanPrivateKey() -> Cryptography.ECDiffieHellman: ...
    @overload
    def GetECDiffieHellmanPublicKey() -> Cryptography.ECDiffieHellman: ...
    @overload
    def GetNameInfo(self, nameType: X509NameType, forIssuer: bool) -> str: ...
    @overload
    def MatchesHostname(self, hostname: str, allowWildcards: bool, allowCommonName: bool) -> bool: ...
    @overload
    def Reset() -> None: ...
    @Archived.setter
    def Archived(self, value: System.Void): ...
    @FriendlyName.setter
    def FriendlyName(self, value: System.Void): ...
    @PrivateKey.setter
    def PrivateKey(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, verbose: bool) -> str: ...
    @overload
    def TryExportCertificatePem(self, destination: System.Span) -> (bool, int): ...
    @overload
    def Verify() -> bool: ...

class X509Certificate2Collection(X509CertificateCollection):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificates: System.Array[X509Certificate2]): ...
    @overload
    def __init__(self, certificates: X509Certificate2Collection): ...
    @overload
    def Add(self, certificate: X509Certificate2) -> int: ...
    @overload
    def AddRange(self, certificates: System.Array[X509Certificate2]) -> None: ...
    @overload
    def AddRange(self, certificates: X509Certificate2Collection) -> None: ...
    @overload
    def Contains(self, certificate: X509Certificate2) -> bool: ...
    @overload
    def Export(self, contentType: X509ContentType) -> System.System.Array[System.Byte]: ...
    @overload
    def Export(self, contentType: X509ContentType, password: str) -> System.System.Array[System.Byte]: ...
    @overload
    def ExportCertificatePems() -> str: ...
    @overload
    def ExportPkcs7Pem() -> str: ...
    @overload
    def Find(self, findType: X509FindType, findValue: object, validOnly: bool) -> X509Certificate2Collection: ...
    @property
    def Item(self) -> X509Certificate2: ...
    @overload
    def GetEnumerator() -> X509Certificate2Enumerator: ...
    @overload
    def Import(self, rawData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Import(self, rawData: System.ReadOnlySpan) -> None: ...
    @overload
    def Import(self, fileName: str) -> None: ...
    @overload
    def Import(self, fileName: str, password: str, keyStorageFlags: X509KeyStorageFlags) -> None: ...
    @overload
    def Import(self, fileName: str, password: System.ReadOnlySpan, keyStorageFlags: X509KeyStorageFlags) -> None: ...
    @overload
    def Import(self, rawData: System.System.Array[System.Byte], password: str, keyStorageFlags: X509KeyStorageFlags) -> None: ...
    @overload
    def Import(self, rawData: System.ReadOnlySpan, password: System.ReadOnlySpan, keyStorageFlags: X509KeyStorageFlags) -> None: ...
    @overload
    def Import(self, rawData: System.ReadOnlySpan, password: str, keyStorageFlags: X509KeyStorageFlags) -> None: ...
    @overload
    def ImportFromPem(self, certPem: System.ReadOnlySpan) -> None: ...
    @overload
    def ImportFromPemFile(self, certPemFilePath: str) -> None: ...
    @overload
    def Insert(self, index: int, certificate: X509Certificate2) -> None: ...
    @overload
    def Remove(self, certificate: X509Certificate2) -> None: ...
    @overload
    def RemoveRange(self, certificates: System.Array[X509Certificate2]) -> None: ...
    @overload
    def RemoveRange(self, certificates: X509Certificate2Collection) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryExportCertificatePems(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryExportPkcs7Pem(self, destination: System.Span) -> (bool, int): ...

class X509Certificate2Enumerator(object):
    """    """
    @property
    def Current(self) -> X509Certificate2: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class X509CertificateCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: System.Array[X509Certificate]): ...
    @overload
    def __init__(self, value: X509CertificateCollection): ...
    @overload
    def Add(self, value: X509Certificate) -> int: ...
    @overload
    def AddRange(self, value: System.Array[X509Certificate]) -> None: ...
    @overload
    def AddRange(self, value: X509CertificateCollection) -> None: ...
    @overload
    def Contains(self, value: X509Certificate) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[X509Certificate], index: int) -> None: ...
    @property
    def Item(self) -> X509Certificate: ...
    @overload
    def GetEnumerator() -> X509CertificateEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, value: X509Certificate) -> int: ...
    @overload
    def Insert(self, index: int, value: X509Certificate) -> None: ...
    @overload
    def Remove(self, value: X509Certificate) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class X509CertificateEnumerator(object):
    """    """
    def __init__(self, mappings: X509CertificateCollection): ...
    @property
    def Current(self) -> X509Certificate: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class X509Chain(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, useMachineContext: bool): ...
    @overload
    def __init__(self, chainContext: System.IntPtr): ...
    @overload
    def Build(self, certificate: X509Certificate2) -> bool: ...
    @overload
    @staticmethod
    def Create() -> X509Chain: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ChainContext(self) -> System.IntPtr: ...
    @property
    def ChainElements(self) -> X509ChainElementCollection: ...
    @property
    def ChainPolicy(self) -> X509ChainPolicy: ...
    @property
    def ChainStatus(self) -> System.Array[X509ChainStatus]: ...
    @property
    def SafeHandle(self) -> SafeHandles.SafeX509ChainHandle: ...
    @overload
    def Reset() -> None: ...
    @ChainPolicy.setter
    def ChainPolicy(self, value: System.Void): ...

class X509ChainElement(object):
    """    """
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def ChainElementStatus(self) -> System.Array[X509ChainStatus]: ...
    @property
    def Information(self) -> str: ...

class X509ChainElementCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array[X509ChainElement], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> X509ChainElement: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> X509ChainElementEnumerator: ...

class X509ChainElementEnumerator(object):
    """    """
    @property
    def Current(self) -> X509ChainElement: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class X509ChainPolicy(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> X509ChainPolicy: ...
    @property
    def ApplicationPolicy(self) -> Cryptography.OidCollection: ...
    @property
    def CertificatePolicy(self) -> Cryptography.OidCollection: ...
    @property
    def CustomTrustStore(self) -> X509Certificate2Collection: ...
    @property
    def DisableCertificateDownloads(self) -> bool: ...
    @property
    def ExtraStore(self) -> X509Certificate2Collection: ...
    @property
    def RevocationFlag(self) -> X509RevocationFlag: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def TrustMode(self) -> X509ChainTrustMode: ...
    @property
    def UrlRetrievalTimeout(self) -> System.TimeSpan: ...
    @property
    def VerificationFlags(self) -> X509VerificationFlags: ...
    @property
    def VerificationTime(self) -> System.DateTime: ...
    @property
    def VerificationTimeIgnored(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @DisableCertificateDownloads.setter
    def DisableCertificateDownloads(self, value: System.Void): ...
    @RevocationFlag.setter
    def RevocationFlag(self, value: System.Void): ...
    @RevocationMode.setter
    def RevocationMode(self, value: System.Void): ...
    @TrustMode.setter
    def TrustMode(self, value: System.Void): ...
    @UrlRetrievalTimeout.setter
    def UrlRetrievalTimeout(self, value: System.Void): ...
    @VerificationFlags.setter
    def VerificationFlags(self, value: System.Void): ...
    @VerificationTime.setter
    def VerificationTime(self, value: System.Void): ...
    @VerificationTimeIgnored.setter
    def VerificationTimeIgnored(self, value: System.Void): ...

class X509ChainStatus(System.ValueType):
    """    """
    @property
    def Status(self) -> X509ChainStatusFlags: ...
    @property
    def StatusInformation(self) -> str: ...
    @Status.setter
    def Status(self, value: System.Void): ...
    @StatusInformation.setter
    def StatusInformation(self, value: System.Void): ...

class X509ChainStatusFlags(enum.Enum):
    NoError = 0
    NotTimeValid = 1
    NotTimeNested = 2
    Revoked = 4
    NotSignatureValid = 8
    NotValidForUsage = 16
    UntrustedRoot = 32
    RevocationStatusUnknown = 64
    Cyclic = 128
    InvalidExtension = 256
    InvalidPolicyConstraints = 512
    InvalidBasicConstraints = 1024
    InvalidNameConstraints = 2048
    HasNotSupportedNameConstraint = 4096
    HasNotDefinedNameConstraint = 8192
    HasNotPermittedNameConstraint = 16384
    HasExcludedNameConstraint = 32768
    PartialChain = 65536
    CtlNotTimeValid = 131072
    CtlNotSignatureValid = 262144
    CtlNotValidForUsage = 524288
    HasWeakSignature = 1048576
    OfflineRevocation = 16777216
    NoIssuanceChainPolicy = 33554432
    ExplicitDistrust = 67108864
    HasNotSupportedCriticalExtension = 134217728

class X509ChainTrustMode(enum.Enum):
    System = 0
    CustomRootTrust = 1

class X509ContentType(enum.Enum):
    Unknown = 0
    Cert = 1
    SerializedCert = 2
    Pfx = 3
    Pkcs12 = 3
    SerializedStore = 4
    Pkcs7 = 5
    Authenticode = 6

class X509EnhancedKeyUsageExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encodedEnhancedKeyUsages: Cryptography.AsnEncodedData, critical: bool): ...
    @overload
    def __init__(self, enhancedKeyUsages: Cryptography.OidCollection, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def EnhancedKeyUsages(self) -> Cryptography.OidCollection: ...

class X509Extension(Cryptography.AsnEncodedData):
    """    """
    @overload
    def __init__(self, encodedExtension: Cryptography.AsnEncodedData, critical: bool): ...
    @overload
    def __init__(self, oid: Cryptography.Oid, rawData: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, oid: Cryptography.Oid, rawData: System.ReadOnlySpan, critical: bool): ...
    @overload
    def __init__(self, oid: str, rawData: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, oid: str, rawData: System.ReadOnlySpan, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def Critical(self) -> bool: ...
    @Critical.setter
    def Critical(self, value: System.Void): ...

class X509ExtensionCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, extension: X509Extension) -> int: ...
    @overload
    def CopyTo(self, array: System.Array[X509Extension], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> X509Extension: ...
    @property
    def Item(self) -> X509Extension: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> X509ExtensionEnumerator: ...

class X509ExtensionEnumerator(object):
    """    """
    @property
    def Current(self) -> X509Extension: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class X509FindType(enum.Enum):
    FindByThumbprint = 0
    FindBySubjectName = 1
    FindBySubjectDistinguishedName = 2
    FindByIssuerName = 3
    FindByIssuerDistinguishedName = 4
    FindBySerialNumber = 5
    FindByTimeValid = 6
    FindByTimeNotYetValid = 7
    FindByTimeExpired = 8
    FindByTemplateName = 9
    FindByApplicationPolicy = 10
    FindByCertificatePolicy = 11
    FindByExtension = 12
    FindByKeyUsage = 13
    FindBySubjectKeyIdentifier = 14

class X509IncludeOption(enum.Enum):
    None_ = 0
    ExcludeRoot = 1
    EndCertOnly = 2
    WholeChain = 3

class X509KeyStorageFlags(enum.Enum):
    DefaultKeySet = 0
    UserKeySet = 1
    MachineKeySet = 2
    Exportable = 4
    UserProtected = 8
    PersistKeySet = 16
    EphemeralKeySet = 32

class X509KeyUsageExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encodedKeyUsage: Cryptography.AsnEncodedData, critical: bool): ...
    @overload
    def __init__(self, keyUsages: X509KeyUsageFlags, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def KeyUsages(self) -> X509KeyUsageFlags: ...

class X509KeyUsageFlags(enum.Enum):
    None_ = 0
    EncipherOnly = 1
    CrlSign = 2
    KeyCertSign = 4
    KeyAgreement = 8
    DataEncipherment = 16
    KeyEncipherment = 32
    NonRepudiation = 64
    DigitalSignature = 128
    DecipherOnly = 32768

class X509NameType(enum.Enum):
    SimpleName = 0
    EmailName = 1
    UpnName = 2
    DnsName = 3
    DnsFromAlternativeName = 4
    UrlName = 5

class X509RevocationFlag(enum.Enum):
    EndCertificateOnly = 0
    EntireChain = 1
    ExcludeRoot = 2

class X509RevocationMode(enum.Enum):
    NoCheck = 0
    Online = 1
    Offline = 2

class X509RevocationReason(enum.Enum):
    Unspecified = 0
    KeyCompromise = 1
    CACompromise = 2
    AffiliationChanged = 3
    Superseded = 4
    CessationOfOperation = 5
    CertificateHold = 6
    RemoveFromCrl = 8
    PrivilegeWithdrawn = 9
    AACompromise = 10
    WeakAlgorithmOrKey = 11

class X509SignatureGenerator(object):
    """    """
    @overload
    @staticmethod
    def CreateForECDsa(key: Cryptography.ECDsa) -> X509SignatureGenerator: ...
    @overload
    @staticmethod
    def CreateForRSA(key: Cryptography.RSA, signaturePadding: Cryptography.RSASignaturePadding) -> X509SignatureGenerator: ...
    @property
    def PublicKey(self) -> PublicKey: ...
    @overload
    def GetSignatureAlgorithmIdentifier(self, hashAlgorithm: Cryptography.HashAlgorithmName) -> System.System.Array[System.Byte]: ...
    @overload
    def SignData(self, data: System.System.Array[System.Byte], hashAlgorithm: Cryptography.HashAlgorithmName) -> System.System.Array[System.Byte]: ...

class X509Store(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, storeName: str): ...
    @overload
    def __init__(self, storeName: StoreName): ...
    @overload
    def __init__(self, storeLocation: StoreLocation): ...
    @overload
    def __init__(self, storeHandle: System.IntPtr): ...
    @overload
    def __init__(self, storeName: StoreName, storeLocation: StoreLocation): ...
    @overload
    def __init__(self, storeName: str, storeLocation: StoreLocation): ...
    @overload
    def __init__(self, storeName: StoreName, storeLocation: StoreLocation, flags: OpenFlags): ...
    @overload
    def __init__(self, storeName: str, storeLocation: StoreLocation, flags: OpenFlags): ...
    @overload
    def Add(self, certificate: X509Certificate2) -> None: ...
    @overload
    def AddRange(self, certificates: X509Certificate2Collection) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    @property
    def IsOpen(self) -> bool: ...
    @property
    def Location(self) -> StoreLocation: ...
    @property
    def Name(self) -> str: ...
    @property
    def StoreHandle(self) -> System.IntPtr: ...
    @overload
    def Open(self, flags: OpenFlags) -> None: ...
    @overload
    def Remove(self, certificate: X509Certificate2) -> None: ...
    @overload
    def RemoveRange(self, certificates: X509Certificate2Collection) -> None: ...

class X509SubjectAlternativeNameExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rawData: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, rawData: System.ReadOnlySpan, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @overload
    def EnumerateDnsNames() -> Generic.IEnumerable: ...
    @overload
    def EnumerateIPAddresses() -> Generic.IEnumerable: ...

class X509SubjectKeyIdentifierExtension(X509Extension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encodedSubjectKeyIdentifier: Cryptography.AsnEncodedData, critical: bool): ...
    @overload
    def __init__(self, subjectKeyIdentifier: System.System.Array[System.Byte], critical: bool): ...
    @overload
    def __init__(self, subjectKeyIdentifier: System.ReadOnlySpan, critical: bool): ...
    @overload
    def __init__(self, key: PublicKey, critical: bool): ...
    @overload
    def __init__(self, subjectKeyIdentifier: str, critical: bool): ...
    @overload
    def __init__(self, key: PublicKey, algorithm: X509SubjectKeyIdentifierHashAlgorithm, critical: bool): ...
    @overload
    def CopyFrom(self, asnEncodedData: Cryptography.AsnEncodedData) -> None: ...
    @property
    def SubjectKeyIdentifier(self) -> str: ...
    @property
    def SubjectKeyIdentifierBytes(self) -> System.ReadOnlyMemory: ...

class X509SubjectKeyIdentifierHashAlgorithm(enum.Enum):
    Sha1 = 0
    ShortSha1 = 1
    CapiSha1 = 2

class X509VerificationFlags(enum.Enum):
    NoFlag = 0
    IgnoreNotTimeValid = 1
    IgnoreCtlNotTimeValid = 2
    IgnoreNotTimeNested = 4
    IgnoreInvalidBasicConstraints = 8
    AllowUnknownCertificateAuthority = 16
    IgnoreWrongUsage = 32
    IgnoreInvalidName = 64
    IgnoreInvalidPolicy = 128
    IgnoreEndRevocationUnknown = 256
    IgnoreCtlSignerRevocationUnknown = 512
    IgnoreCertificateAuthorityRevocationUnknown = 1024
    IgnoreRootRevocationUnknown = 2048
    AllFlags = 4095

# endregion
