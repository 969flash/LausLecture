"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AceType", "AceFlags", "GenericAce", "KnownAce", "CustomAce", "CompoundAceType", "CompoundAce", "AceQualifier", "QualifiedAce", "CommonAce", "ObjectAceFlags", "ObjectAce", "AceEnumerator", "GenericAcl", "RawAcl", "CommonAcl", "SystemAcl", "DiscretionaryAcl", "CommonObjectSecurity", "InheritanceFlags", "PropagationFlags", "AuditFlags", "SecurityInfos", "ResourceType", "AccessControlSections", "AccessControlActions", "NativeObjectSecurity", "AccessControlModification", "ObjectSecurity", "AccessRule", "AuditRule", "PrivilegeNotHeldException", "ControlFlags", "GenericSecurityDescriptor", "RawSecurityDescriptor", "CommonSecurityDescriptor", "AccessControlType", "AuthorizationRule", "ObjectAccessRule", "ObjectAuditRule", "AuthorizationRuleCollection"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Principal
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["RegistryRights", "RegistryAccessRule", "RegistryAuditRule", "RegistrySecurity"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Security import Principal
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["MutexRights", "MutexAccessRule", "MutexAuditRule", "MutexSecurity", "EventWaitHandleRights", "EventWaitHandleAccessRule", "EventWaitHandleAuditRule", "EventWaitHandleSecurity", "SemaphoreRights", "SemaphoreAccessRule", "SemaphoreAuditRule", "SemaphoreSecurity"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Security import Principal
from typing import overload
import enum
import System
# endregion

# region: System.Threading.AccessControl, Version=7.0.0.0

class MutexRights(enum.Enum):
    Modify = 1
    Delete = 65536
    ReadPermissions = 131072
    ChangePermissions = 262144
    TakeOwnership = 524288
    Synchronize = 1048576
    FullControl = 2031617

class MutexAccessRule(AccessRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, eventRights: MutexRights, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, eventRights: MutexRights, type_: AccessControlType): ...
    @property
    def MutexRights(self) -> MutexRights: ...

class MutexAuditRule(AuditRule):
    """    """
    def __init__(self, identity: Principal.IdentityReference, eventRights: MutexRights, flags: AuditFlags): ...
    @property
    def MutexRights(self) -> MutexRights: ...

class MutexSecurity(NativeObjectSecurity):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, includeSections: AccessControlSections): ...
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AddAccessRule(self, rule: MutexAccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: MutexAuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: MutexAccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleAll(self, rule: MutexAccessRule) -> None: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: MutexAccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: MutexAuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: MutexAuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: MutexAuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: MutexAccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: MutexAccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: MutexAuditRule) -> None: ...

class EventWaitHandleRights(enum.Enum):
    Modify = 2
    Delete = 65536
    ReadPermissions = 131072
    ChangePermissions = 262144
    TakeOwnership = 524288
    Synchronize = 1048576
    FullControl = 2031619

class EventWaitHandleAccessRule(AccessRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, eventRights: EventWaitHandleRights, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, eventRights: EventWaitHandleRights, type_: AccessControlType): ...
    @property
    def EventWaitHandleRights(self) -> EventWaitHandleRights: ...

class EventWaitHandleAuditRule(AuditRule):
    """    """
    def __init__(self, identity: Principal.IdentityReference, eventRights: EventWaitHandleRights, flags: AuditFlags): ...
    @property
    def EventWaitHandleRights(self) -> EventWaitHandleRights: ...

class EventWaitHandleSecurity(NativeObjectSecurity):
    """    """
    def __init__(self): ...
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AddAccessRule(self, rule: EventWaitHandleAccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: EventWaitHandleAuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: EventWaitHandleAccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleAll(self, rule: EventWaitHandleAccessRule) -> None: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: EventWaitHandleAccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: EventWaitHandleAuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: EventWaitHandleAuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: EventWaitHandleAuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: EventWaitHandleAccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: EventWaitHandleAccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: EventWaitHandleAuditRule) -> None: ...

class SemaphoreRights(enum.Enum):
    Modify = 2
    Delete = 65536
    ReadPermissions = 131072
    ChangePermissions = 262144
    TakeOwnership = 524288
    Synchronize = 1048576
    FullControl = 2031619

class SemaphoreAccessRule(AccessRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, eventRights: SemaphoreRights, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, eventRights: SemaphoreRights, type_: AccessControlType): ...
    @property
    def SemaphoreRights(self) -> SemaphoreRights: ...

class SemaphoreAuditRule(AuditRule):
    """    """
    def __init__(self, identity: Principal.IdentityReference, eventRights: SemaphoreRights, flags: AuditFlags): ...
    @property
    def SemaphoreRights(self) -> SemaphoreRights: ...

class SemaphoreSecurity(NativeObjectSecurity):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, includeSections: AccessControlSections): ...
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AddAccessRule(self, rule: SemaphoreAccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: SemaphoreAuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: SemaphoreAccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleAll(self, rule: SemaphoreAccessRule) -> None: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: SemaphoreAccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: SemaphoreAuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: SemaphoreAuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: SemaphoreAuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: SemaphoreAccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: SemaphoreAccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: SemaphoreAuditRule) -> None: ...

# endregion

# region: Microsoft.Win32.Registry, Version=7.0.0.0

class RegistryRights(enum.Enum):
    QueryValues = 1
    SetValue = 2
    CreateSubKey = 4
    EnumerateSubKeys = 8
    Notify = 16
    CreateLink = 32
    Delete = 65536
    ReadPermissions = 131072
    WriteKey = 131078
    ExecuteKey = 131097
    ReadKey = 131097
    ChangePermissions = 262144
    TakeOwnership = 524288
    FullControl = 983103

class RegistryAccessRule(AccessRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, registryRights: RegistryRights, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, registryRights: RegistryRights, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: Principal.IdentityReference, registryRights: RegistryRights, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, registryRights: RegistryRights, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType): ...
    @property
    def RegistryRights(self) -> RegistryRights: ...

class RegistryAuditRule(AuditRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, registryRights: RegistryRights, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags): ...
    @overload
    def __init__(self, identity: str, registryRights: RegistryRights, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags): ...
    @property
    def RegistryRights(self) -> RegistryRights: ...

class RegistrySecurity(NativeObjectSecurity):
    """    """
    def __init__(self): ...
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AddAccessRule(self, rule: RegistryAccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: RegistryAuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: RegistryAccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleAll(self, rule: RegistryAccessRule) -> None: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: RegistryAccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: RegistryAuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: RegistryAuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: RegistryAuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: RegistryAccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: RegistryAccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: RegistryAuditRule) -> None: ...

# endregion

# region: System.Security.AccessControl, Version=7.0.0.0

class AceType(enum.Enum):
    AccessAllowed = 0
    AccessDenied = 1
    SystemAudit = 2
    SystemAlarm = 3
    AccessAllowedCompound = 4
    AccessAllowedObject = 5
    AccessDeniedObject = 6
    SystemAuditObject = 7
    SystemAlarmObject = 8
    AccessAllowedCallback = 9
    AccessDeniedCallback = 10
    AccessAllowedCallbackObject = 11
    AccessDeniedCallbackObject = 12
    SystemAuditCallback = 13
    SystemAlarmCallback = 14
    SystemAuditCallbackObject = 15
    SystemAlarmCallbackObject = 16
    MaxDefinedAceType = 16

class AceFlags(enum.Enum):
    None_ = 0
    ObjectInherit = 1
    ContainerInherit = 2
    NoPropagateInherit = 4
    InheritOnly = 8
    InheritanceFlags = 15
    Inherited = 16
    SuccessfulAccess = 64
    FailedAccess = 128
    AuditFlags = 192

class GenericAce(object):
    """    """
    @overload
    def Copy() -> GenericAce: ...
    @overload
    @staticmethod
    def CreateFromBinaryForm(binaryForm: System.System.Array[System.Byte], offset: int) -> GenericAce: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def AceFlags(self) -> AceFlags: ...
    @property
    def AceType(self) -> AceType: ...
    @property
    def AuditFlags(self) -> AuditFlags: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def InheritanceFlags(self) -> InheritanceFlags: ...
    @property
    def IsInherited(self) -> bool: ...
    @property
    def PropagationFlags(self) -> PropagationFlags: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def GetHashCode() -> int: ...
    @AceFlags.setter
    def AceFlags(self, value: System.Void): ...

class KnownAce(GenericAce):
    """    """
    @property
    def AccessMask(self) -> int: ...
    @property
    def SecurityIdentifier(self) -> Principal.SecurityIdentifier: ...
    @AccessMask.setter
    def AccessMask(self, value: System.Void): ...
    @SecurityIdentifier.setter
    def SecurityIdentifier(self, value: System.Void): ...

class CustomAce(GenericAce):
    """    """
    def __init__(self, type_: AceType, flags: AceFlags, opaque: System.System.Array[System.Byte]): ...
    @property
    def MaxOpaqueLength(self) -> int: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def OpaqueLength(self) -> int: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def GetOpaque() -> System.System.Array[System.Byte]: ...
    @overload
    def SetOpaque(self, opaque: System.System.Array[System.Byte]) -> None: ...

class CompoundAceType(enum.Enum):
    Impersonation = 1

class CompoundAce(KnownAce):
    """    """
    def __init__(self, flags: AceFlags, accessMask: int, compoundAceType: CompoundAceType, sid: Principal.SecurityIdentifier): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def CompoundAceType(self) -> CompoundAceType: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @CompoundAceType.setter
    def CompoundAceType(self, value: System.Void): ...

class AceQualifier(enum.Enum):
    AccessAllowed = 0
    AccessDenied = 1
    SystemAudit = 2
    SystemAlarm = 3

class QualifiedAce(KnownAce):
    """    """
    @property
    def AceQualifier(self) -> AceQualifier: ...
    @property
    def IsCallback(self) -> bool: ...
    @property
    def OpaqueLength(self) -> int: ...
    @overload
    def GetOpaque() -> System.System.Array[System.Byte]: ...
    @overload
    def SetOpaque(self, opaque: System.System.Array[System.Byte]) -> None: ...

class CommonAce(QualifiedAce):
    """    """
    def __init__(self, flags: AceFlags, qualifier: AceQualifier, accessMask: int, sid: Principal.SecurityIdentifier, isCallback: bool, opaque: System.System.Array[System.Byte]): ...
    @property
    def BinaryLength(self) -> int: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    @staticmethod
    def MaxOpaqueLength(isCallback: bool) -> int: ...

class ObjectAceFlags(enum.Enum):
    None_ = 0
    ObjectAceTypePresent = 1
    InheritedObjectAceTypePresent = 2

class ObjectAce(QualifiedAce):
    """    """
    def __init__(self, aceFlags: AceFlags, qualifier: AceQualifier, accessMask: int, sid: Principal.SecurityIdentifier, flags: ObjectAceFlags, type_: System.Guid, inheritedType: System.Guid, isCallback: bool, opaque: System.System.Array[System.Byte]): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def InheritedObjectAceType(self) -> System.Guid: ...
    @property
    def ObjectAceFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectAceType(self) -> System.Guid: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    @staticmethod
    def MaxOpaqueLength(isCallback: bool) -> int: ...
    @InheritedObjectAceType.setter
    def InheritedObjectAceType(self, value: System.Void): ...
    @ObjectAceFlags.setter
    def ObjectAceFlags(self, value: System.Void): ...
    @ObjectAceType.setter
    def ObjectAceType(self, value: System.Void): ...

class AceEnumerator(object):
    """    """
    @property
    def Current(self) -> GenericAce: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class GenericAcl(object):
    """    """
    @property
    def AclRevision(self) -> System.Byte: ...
    @property
    def AclRevisionDS(self) -> System.Byte: ...
    @property
    def MaxBinaryLength(self) -> int: ...
    @overload
    def CopyTo(self, array: System.Array[GenericAce], index: int) -> None: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> GenericAce: ...
    @property
    def Revision(self) -> System.Byte: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def GetEnumerator() -> AceEnumerator: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class RawAcl(GenericAcl):
    """    """
    @overload
    def __init__(self, revision: System.Byte, capacity: int): ...
    @overload
    def __init__(self, binaryForm: System.System.Array[System.Byte], offset: int): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> GenericAce: ...
    @property
    def Revision(self) -> System.Byte: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def InsertAce(self, index: int, ace: GenericAce) -> None: ...
    @overload
    def RemoveAce(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CommonAcl(GenericAcl):
    """    """
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsCanonical(self) -> bool: ...
    @property
    def IsContainer(self) -> bool: ...
    @property
    def IsDS(self) -> bool: ...
    @property
    def Item(self) -> GenericAce: ...
    @property
    def Revision(self) -> System.Byte: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def Purge(self, sid: Principal.SecurityIdentifier) -> None: ...
    @overload
    def RemoveInheritedAces() -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class SystemAcl(CommonAcl):
    """    """
    @overload
    def __init__(self, isContainer: bool, isDS: bool, capacity: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawAcl: RawAcl): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, revision: System.Byte, capacity: int): ...
    @overload
    def AddAudit(self, sid: Principal.SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def AddAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def AddAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...
    @overload
    def RemoveAudit(self, sid: Principal.SecurityIdentifier, rule: ObjectAuditRule) -> bool: ...
    @overload
    def RemoveAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> bool: ...
    @overload
    def RemoveAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> bool: ...
    @overload
    def RemoveAuditSpecific(self, sid: Principal.SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def RemoveAuditSpecific(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def RemoveAuditSpecific(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...
    @overload
    def SetAudit(self, sid: Principal.SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def SetAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def SetAudit(self, auditFlags: AuditFlags, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...

class DiscretionaryAcl(CommonAcl):
    """    """
    @overload
    def __init__(self, isContainer: bool, isDS: bool, capacity: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawAcl: RawAcl): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, revision: System.Byte, capacity: int): ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, rule: ObjectAccessRule) -> bool: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> bool: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> bool: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: Principal.SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: System.Guid, inheritedObjectType: System.Guid) -> None: ...

class CommonObjectSecurity(ObjectSecurity):
    """    """
    @overload
    def GetAccessRules(self, includeExplicit: bool, includeInherited: bool, targetType: System.Type) -> AuthorizationRuleCollection: ...
    @overload
    def GetAuditRules(self, includeExplicit: bool, includeInherited: bool, targetType: System.Type) -> AuthorizationRuleCollection: ...

class InheritanceFlags(enum.Enum):
    None_ = 0
    ContainerInherit = 1
    ObjectInherit = 2

class PropagationFlags(enum.Enum):
    None_ = 0
    NoPropagateInherit = 1
    InheritOnly = 2

class AuditFlags(enum.Enum):
    None_ = 0
    Success = 1
    Failure = 2

class SecurityInfos(enum.Enum):
    Owner = 1
    Group = 2
    DiscretionaryAcl = 4
    SystemAcl = 8

class ResourceType(enum.Enum):
    Unknown = 0
    FileObject = 1
    Service = 2
    Printer = 3
    RegistryKey = 4
    LMShare = 5
    KernelObject = 6
    WindowObject = 7
    DSObject = 8
    DSObjectAll = 9
    ProviderDefined = 10
    WmiGuidObject = 11
    RegistryWow6432Key = 12

class AccessControlSections(enum.Enum):
    None_ = 0
    Audit = 1
    Access = 2
    Owner = 4
    Group = 8
    All = 15

class AccessControlActions(enum.Enum):
    None_ = 0
    View = 1
    Change = 2

class NativeObjectSecurity(CommonObjectSecurity):
    """    """

class AccessControlModification(enum.Enum):
    Add = 0
    Set = 1
    Reset = 2
    Remove = 3
    RemoveAll = 4
    RemoveSpecific = 5

class ObjectSecurity(object):
    """    """
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AreAccessRulesCanonical(self) -> bool: ...
    @property
    def AreAccessRulesProtected(self) -> bool: ...
    @property
    def AreAuditRulesCanonical(self) -> bool: ...
    @property
    def AreAuditRulesProtected(self) -> bool: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def GetGroup(self, targetType: System.Type) -> Principal.IdentityReference: ...
    @overload
    def GetOwner(self, targetType: System.Type) -> Principal.IdentityReference: ...
    @overload
    def GetSecurityDescriptorBinaryForm() -> System.System.Array[System.Byte]: ...
    @overload
    def GetSecurityDescriptorSddlForm(self, includeSections: AccessControlSections) -> str: ...
    @overload
    @staticmethod
    def IsSddlConversionSupported() -> bool: ...
    @overload
    def ModifyAccessRule(self, modification: AccessControlModification, rule: AccessRule) -> (bool, bool): ...
    @overload
    def ModifyAuditRule(self, modification: AccessControlModification, rule: AuditRule) -> (bool, bool): ...
    @overload
    def PurgeAccessRules(self, identity: Principal.IdentityReference) -> None: ...
    @overload
    def PurgeAuditRules(self, identity: Principal.IdentityReference) -> None: ...
    @overload
    def SetAccessRuleProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    @overload
    def SetAuditRuleProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    @overload
    def SetGroup(self, identity: Principal.IdentityReference) -> None: ...
    @overload
    def SetOwner(self, identity: Principal.IdentityReference) -> None: ...
    @overload
    def SetSecurityDescriptorBinaryForm(self, binaryForm: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetSecurityDescriptorBinaryForm(self, binaryForm: System.System.Array[System.Byte], includeSections: AccessControlSections) -> None: ...
    @overload
    def SetSecurityDescriptorSddlForm(self, sddlForm: str) -> None: ...
    @overload
    def SetSecurityDescriptorSddlForm(self, sddlForm: str, includeSections: AccessControlSections) -> None: ...

class AccessRule(AccessRule):
    """    AccessRule[T]
    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: T, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, rights: T, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: T, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType): ...
    @overload
    def __init__(self, identity: str, rights: T, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType): ...
    @property
    def Rights(self) -> T: ...

class AuditRule(AuditRule):
    """    AuditRule[T]
    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: T, flags: AuditFlags): ...
    @overload
    def __init__(self, identity: str, rights: T, flags: AuditFlags): ...
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: T, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags): ...
    @overload
    def __init__(self, identity: str, rights: T, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags): ...
    @property
    def Rights(self) -> T: ...

class ObjectSecurity(NativeObjectSecurity):
    """    ObjectSecurity[T]
    """
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type_: AccessControlType) -> AccessRule: ...
    @overload
    def AddAccessRule(self, rule: AccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: AuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: AccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleAll(self, rule: AccessRule) -> None: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: AccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: AuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: AuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: AuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: AccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: AccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: AuditRule) -> None: ...

class PrivilegeNotHeldException(System.UnauthorizedAccessException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, privilege: str): ...
    @overload
    def __init__(self, privilege: str, inner: System.Exception): ...
    @property
    def PrivilegeName(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ControlFlags(enum.Enum):
    None_ = 0
    OwnerDefaulted = 1
    GroupDefaulted = 2
    DiscretionaryAclPresent = 4
    DiscretionaryAclDefaulted = 8
    SystemAclPresent = 16
    SystemAclDefaulted = 32
    DiscretionaryAclUntrusted = 64
    ServerSecurity = 128
    DiscretionaryAclAutoInheritRequired = 256
    SystemAclAutoInheritRequired = 512
    DiscretionaryAclAutoInherited = 1024
    SystemAclAutoInherited = 2048
    DiscretionaryAclProtected = 4096
    SystemAclProtected = 8192
    RMControlValid = 16384
    SelfRelative = 32768

class GenericSecurityDescriptor(object):
    """    """
    @property
    def BinaryLength(self) -> int: ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def Group(self) -> Principal.SecurityIdentifier: ...
    @property
    def Owner(self) -> Principal.SecurityIdentifier: ...
    @property
    def Revision(self) -> System.Byte: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def GetSddlForm(self, includeSections: AccessControlSections) -> str: ...
    @overload
    @staticmethod
    def IsSddlConversionSupported() -> bool: ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...

class RawSecurityDescriptor(GenericSecurityDescriptor):
    """    """
    @overload
    def __init__(self, sddlForm: str): ...
    @overload
    def __init__(self, binaryForm: System.System.Array[System.Byte], offset: int): ...
    @overload
    def __init__(self, flags: ControlFlags, owner: Principal.SecurityIdentifier, group: Principal.SecurityIdentifier, systemAcl: RawAcl, discretionaryAcl: RawAcl): ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def DiscretionaryAcl(self) -> RawAcl: ...
    @property
    def Group(self) -> Principal.SecurityIdentifier: ...
    @property
    def Owner(self) -> Principal.SecurityIdentifier: ...
    @property
    def ResourceManagerControl(self) -> System.Byte: ...
    @property
    def SystemAcl(self) -> RawAcl: ...
    @DiscretionaryAcl.setter
    def DiscretionaryAcl(self, value: System.Void): ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @ResourceManagerControl.setter
    def ResourceManagerControl(self, value: System.Void): ...
    @SystemAcl.setter
    def SystemAcl(self, value: System.Void): ...
    @overload
    def SetFlags(self, flags: ControlFlags) -> None: ...

class CommonSecurityDescriptor(GenericSecurityDescriptor):
    """    """
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawSecurityDescriptor: RawSecurityDescriptor): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, sddlForm: str): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, binaryForm: System.System.Array[System.Byte], offset: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, flags: ControlFlags, owner: Principal.SecurityIdentifier, group: Principal.SecurityIdentifier, systemAcl: SystemAcl, discretionaryAcl: DiscretionaryAcl): ...
    @overload
    def AddDiscretionaryAcl(self, revision: System.Byte, trusted: int) -> None: ...
    @overload
    def AddSystemAcl(self, revision: System.Byte, trusted: int) -> None: ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def DiscretionaryAcl(self) -> DiscretionaryAcl: ...
    @property
    def Group(self) -> Principal.SecurityIdentifier: ...
    @property
    def IsContainer(self) -> bool: ...
    @property
    def IsDiscretionaryAclCanonical(self) -> bool: ...
    @property
    def IsDS(self) -> bool: ...
    @property
    def IsSystemAclCanonical(self) -> bool: ...
    @property
    def Owner(self) -> Principal.SecurityIdentifier: ...
    @property
    def SystemAcl(self) -> SystemAcl: ...
    @overload
    def PurgeAccessControl(self, sid: Principal.SecurityIdentifier) -> None: ...
    @overload
    def PurgeAudit(self, sid: Principal.SecurityIdentifier) -> None: ...
    @DiscretionaryAcl.setter
    def DiscretionaryAcl(self, value: System.Void): ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @SystemAcl.setter
    def SystemAcl(self, value: System.Void): ...
    @overload
    def SetDiscretionaryAclProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    @overload
    def SetSystemAclProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...

class AccessControlType(enum.Enum):
    Allow = 0
    Deny = 1

class AuthorizationRule(object):
    """    """
    @property
    def IdentityReference(self) -> Principal.IdentityReference: ...
    @property
    def InheritanceFlags(self) -> InheritanceFlags: ...
    @property
    def IsInherited(self) -> bool: ...
    @property
    def PropagationFlags(self) -> PropagationFlags: ...

class AccessRule(AuthorizationRule):
    """    """
    @property
    def AccessControlType(self) -> AccessControlType: ...

class ObjectAccessRule(AccessRule):
    """    """
    @property
    def InheritedObjectType(self) -> System.Guid: ...
    @property
    def ObjectFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectType(self) -> System.Guid: ...

class AuditRule(AuthorizationRule):
    """    """
    @property
    def AuditFlags(self) -> AuditFlags: ...

class ObjectAuditRule(AuditRule):
    """    """
    @property
    def InheritedObjectType(self) -> System.Guid: ...
    @property
    def ObjectFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectType(self) -> System.Guid: ...

class AuthorizationRuleCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def AddRule(self, rule: AuthorizationRule) -> None: ...
    @overload
    def CopyTo(self, rules: System.Array[AuthorizationRule], index: int) -> None: ...
    @property
    def Item(self) -> AuthorizationRule: ...

# endregion
