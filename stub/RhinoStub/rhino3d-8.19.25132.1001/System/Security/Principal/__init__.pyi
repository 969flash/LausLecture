"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["GenericIdentity", "GenericPrincipal"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Security import Claims
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["IdentityNotMappedException", "IdentityReference", "IdentityReferenceCollection", "NTAccount", "WellKnownSidType", "SecurityIdentifier", "TokenAccessLevels", "WindowsAccountType", "WindowsIdentity", "WindowsBuiltInRole", "WindowsPrincipal"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Claims
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["IIdentity", "IPrincipal", "PrincipalPolicy", "TokenImpersonationLevel"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class IIdentity:
    """    """
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def Name(self) -> str: ...

class IPrincipal:
    """    """
    @property
    def Identity(self) -> IIdentity: ...
    @overload
    def IsInRole(self, role: str) -> bool: ...

class PrincipalPolicy(enum.Enum):
    UnauthenticatedPrincipal = 0
    NoPrincipal = 1
    WindowsPrincipal = 2

class TokenImpersonationLevel(enum.Enum):
    None_ = 0
    Anonymous = 1
    Identification = 2
    Impersonation = 3
    Delegation = 4

# endregion

# region: System.Security.Principal.Windows, Version=7.0.0.0

class IdentityNotMappedException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @property
    def UnmappedIdentities(self) -> IdentityReferenceCollection: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class IdentityReference(object):
    """    """
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsValidTargetType(self, targetType: System.Type) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Translate(self, targetType: System.Type) -> IdentityReference: ...

class IdentityReferenceCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def Add(self, identity: IdentityReference) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, identity: IdentityReference) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[IdentityReference], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IdentityReference: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, identity: IdentityReference) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Translate(self, targetType: System.Type) -> IdentityReferenceCollection: ...
    @overload
    def Translate(self, targetType: System.Type, forceSuccess: bool) -> IdentityReferenceCollection: ...

class NTAccount(IdentityReference):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, domainName: str, accountName: str): ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsValidTargetType(self, targetType: System.Type) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Translate(self, targetType: System.Type) -> IdentityReference: ...

class WellKnownSidType(enum.Enum):
    NullSid = 0
    WorldSid = 1
    LocalSid = 2
    CreatorOwnerSid = 3
    CreatorGroupSid = 4
    CreatorOwnerServerSid = 5
    CreatorGroupServerSid = 6
    NTAuthoritySid = 7
    DialupSid = 8
    NetworkSid = 9
    BatchSid = 10
    InteractiveSid = 11
    ServiceSid = 12
    AnonymousSid = 13
    ProxySid = 14
    EnterpriseControllersSid = 15
    SelfSid = 16
    AuthenticatedUserSid = 17
    RestrictedCodeSid = 18
    TerminalServerSid = 19
    RemoteLogonIdSid = 20
    LogonIdsSid = 21
    LocalSystemSid = 22
    LocalServiceSid = 23
    NetworkServiceSid = 24
    BuiltinDomainSid = 25
    BuiltinAdministratorsSid = 26
    BuiltinUsersSid = 27
    BuiltinGuestsSid = 28
    BuiltinPowerUsersSid = 29
    BuiltinAccountOperatorsSid = 30
    BuiltinSystemOperatorsSid = 31
    BuiltinPrintOperatorsSid = 32
    BuiltinBackupOperatorsSid = 33
    BuiltinReplicatorSid = 34
    BuiltinPreWindows2000CompatibleAccessSid = 35
    BuiltinRemoteDesktopUsersSid = 36
    BuiltinNetworkConfigurationOperatorsSid = 37
    AccountAdministratorSid = 38
    AccountGuestSid = 39
    AccountKrbtgtSid = 40
    AccountDomainAdminsSid = 41
    AccountDomainUsersSid = 42
    AccountDomainGuestsSid = 43
    AccountComputersSid = 44
    AccountControllersSid = 45
    AccountCertAdminsSid = 46
    AccountSchemaAdminsSid = 47
    AccountEnterpriseAdminsSid = 48
    AccountPolicyAdminsSid = 49
    AccountRasAndIasServersSid = 50
    NtlmAuthenticationSid = 51
    DigestAuthenticationSid = 52
    SChannelAuthenticationSid = 53
    ThisOrganizationSid = 54
    OtherOrganizationSid = 55
    BuiltinIncomingForestTrustBuildersSid = 56
    BuiltinPerformanceMonitoringUsersSid = 57
    BuiltinPerformanceLoggingUsersSid = 58
    BuiltinAuthorizationAccessSid = 59
    WinBuiltinTerminalServerLicenseServersSid = 60
    MaxDefined = 60
    WinBuiltinDCOMUsersSid = 61
    WinBuiltinIUsersSid = 62
    WinIUserSid = 63
    WinBuiltinCryptoOperatorsSid = 64
    WinUntrustedLabelSid = 65
    WinLowLabelSid = 66
    WinMediumLabelSid = 67
    WinHighLabelSid = 68
    WinSystemLabelSid = 69
    WinWriteRestrictedCodeSid = 70
    WinCreatorOwnerRightsSid = 71
    WinCacheablePrincipalsGroupSid = 72
    WinNonCacheablePrincipalsGroupSid = 73
    WinEnterpriseReadonlyControllersSid = 74
    WinAccountReadonlyControllersSid = 75
    WinBuiltinEventLogReadersGroup = 76
    WinNewEnterpriseReadonlyControllersSid = 77
    WinBuiltinCertSvcDComAccessGroup = 78
    WinMediumPlusLabelSid = 79
    WinLocalLogonSid = 80
    WinConsoleLogonSid = 81
    WinThisOrganizationCertificateSid = 82
    WinApplicationPackageAuthoritySid = 83
    WinBuiltinAnyPackageSid = 84
    WinCapabilityInternetClientSid = 85
    WinCapabilityInternetClientServerSid = 86
    WinCapabilityPrivateNetworkClientServerSid = 87
    WinCapabilityPicturesLibrarySid = 88
    WinCapabilityVideosLibrarySid = 89
    WinCapabilityMusicLibrarySid = 90
    WinCapabilityDocumentsLibrarySid = 91
    WinCapabilitySharedUserCertificatesSid = 92
    WinCapabilityEnterpriseAuthenticationSid = 93
    WinCapabilityRemovableStorageSid = 94

class SecurityIdentifier(IdentityReference):
    """    """
    @overload
    def __init__(self, sddlForm: str): ...
    @overload
    def __init__(self, binaryForm: System.IntPtr): ...
    @overload
    def __init__(self, binaryForm: System.System.Array[System.Byte], offset: int): ...
    @overload
    def __init__(self, sidType: WellKnownSidType, domainSid: SecurityIdentifier): ...
    @property
    def MinBinaryLength(self) -> int: ...
    @property
    def MaxBinaryLength(self) -> int: ...
    @overload
    def CompareTo(self, sid: SecurityIdentifier) -> int: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, sid: SecurityIdentifier) -> bool: ...
    @property
    def AccountDomainSid(self) -> SecurityIdentifier: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetBinaryForm(self, binaryForm: System.System.Array[System.Byte], offset: int) -> None: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsAccountSid() -> bool: ...
    @overload
    def IsEqualDomainSid(self, sid: SecurityIdentifier) -> bool: ...
    @overload
    def IsValidTargetType(self, targetType: System.Type) -> bool: ...
    @overload
    def IsWellKnown(self, type_: WellKnownSidType) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Translate(self, targetType: System.Type) -> IdentityReference: ...

class TokenAccessLevels(enum.Enum):
    AssignPrimary = 1
    Duplicate = 2
    Impersonate = 4
    Query = 8
    QuerySource = 16
    AdjustPrivileges = 32
    AdjustGroups = 64
    AdjustDefault = 128
    AdjustSessionId = 256
    Read = 131080
    Write = 131296
    AllAccess = 983551
    MaximumAllowed = 33554432

class WindowsAccountType(enum.Enum):
    Normal = 0
    Guest = 1
    System = 2
    Anonymous = 3

class WindowsIdentity(Claims.ClaimsIdentity):
    """    """
    @overload
    def __init__(self, userToken: System.IntPtr): ...
    @overload
    def __init__(self, sUserPrincipalName: str): ...
    @overload
    def __init__(self, userToken: System.IntPtr, type_: str): ...
    @overload
    def __init__(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext): ...
    @overload
    def __init__(self, userToken: System.IntPtr, type_: str, acctType: WindowsAccountType): ...
    @overload
    def __init__(self, userToken: System.IntPtr, type_: str, acctType: WindowsAccountType, isAuthenticated: bool): ...
    @property
    def DefaultIssuer(self) -> str: ...
    @overload
    def Clone() -> Claims.ClaimsIdentity: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AccessToken(self) -> SafeHandles.SafeAccessTokenHandle: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def Claims(self) -> Generic.IEnumerable: ...
    @property
    def DeviceClaims(self) -> Generic.IEnumerable: ...
    @property
    def Groups(self) -> IdentityReferenceCollection: ...
    @property
    def ImpersonationLevel(self) -> TokenImpersonationLevel: ...
    @property
    def IsAnonymous(self) -> bool: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsGuest(self) -> bool: ...
    @property
    def IsSystem(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> SecurityIdentifier: ...
    @property
    def Token(self) -> System.IntPtr: ...
    @property
    def User(self) -> SecurityIdentifier: ...
    @property
    def UserClaims(self) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetAnonymous() -> WindowsIdentity: ...
    @overload
    @staticmethod
    def GetCurrent() -> WindowsIdentity: ...
    @overload
    @staticmethod
    def GetCurrent(desiredAccess: TokenAccessLevels) -> WindowsIdentity: ...
    @overload
    @staticmethod
    def GetCurrent(ifImpersonating: bool) -> WindowsIdentity: ...
    @overload
    @staticmethod
    def RunImpersonated(safeAccessTokenHandle: SafeHandles.SafeAccessTokenHandle, func: System.Func) -> T: ...
    @overload
    @staticmethod
    def RunImpersonated(safeAccessTokenHandle: SafeHandles.SafeAccessTokenHandle, action: System.Action) -> None: ...
    @overload
    @staticmethod
    def RunImpersonatedAsync(safeAccessTokenHandle: SafeHandles.SafeAccessTokenHandle, func: System.Func) -> Tasks.Task: ...
    @overload
    @staticmethod
    def RunImpersonatedAsync(safeAccessTokenHandle: SafeHandles.SafeAccessTokenHandle, func: System.Func) -> Tasks.Task: ...

class WindowsBuiltInRole(enum.Enum):
    Administrator = 544
    User = 545
    Guest = 546
    PowerUser = 547
    AccountOperator = 548
    SystemOperator = 549
    PrintOperator = 550
    BackupOperator = 551
    Replicator = 552

class WindowsPrincipal(Claims.ClaimsPrincipal):
    """    """
    def __init__(self, ntIdentity: WindowsIdentity): ...
    @property
    def DeviceClaims(self) -> Generic.IEnumerable: ...
    @property
    def Identity(self) -> IIdentity: ...
    @property
    def UserClaims(self) -> Generic.IEnumerable: ...
    @overload
    def IsInRole(self, rid: int) -> bool: ...
    @overload
    def IsInRole(self, role: WindowsBuiltInRole) -> bool: ...
    @overload
    def IsInRole(self, role: str) -> bool: ...
    @overload
    def IsInRole(self, sid: SecurityIdentifier) -> bool: ...

# endregion

# region: System.Security.Claims, Version=7.0.0.0

class GenericIdentity(Claims.ClaimsIdentity):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, type_: str): ...
    @overload
    def Clone() -> Claims.ClaimsIdentity: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def Claims(self) -> Generic.IEnumerable: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def Name(self) -> str: ...

class GenericPrincipal(Claims.ClaimsPrincipal):
    """    """
    def __init__(self, identity: IIdentity, roles: System.System.Array[str]): ...
    @property
    def Identity(self) -> IIdentity: ...
    @overload
    def IsInRole(self, role: str) -> bool: ...

# endregion
