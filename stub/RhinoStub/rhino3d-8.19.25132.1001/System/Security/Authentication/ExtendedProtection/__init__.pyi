"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ExtendedProtectionPolicy", "PolicyEnforcement", "ProtectionScenario", "ServiceNameCollection"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["ChannelBinding", "ChannelBindingKind"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["ExtendedProtectionPolicyTypeConverter"]
# endregion

# region: Imports
from System import ComponentModel
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.ComponentModel.TypeConverter, Version=7.0.0.0

class ExtendedProtectionPolicyTypeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

# endregion

# region: System.Net.Primitives, Version=7.0.0.0

class ChannelBinding(SafeHandles.SafeHandleZeroOrMinusOneIsInvalid):
    """    """
    @property
    def Size(self) -> int: ...

class ChannelBindingKind(enum.Enum):
    Unknown = 0
    Unique = 25
    Endpoint = 26

# endregion

# region: System.Net.Security, Version=7.0.0.0

class ExtendedProtectionPolicy(object):
    """    """
    @overload
    def __init__(self, policyEnforcement: PolicyEnforcement): ...
    @overload
    def __init__(self, policyEnforcement: PolicyEnforcement, customChannelBinding: ChannelBinding): ...
    @overload
    def __init__(self, policyEnforcement: PolicyEnforcement, protectionScenario: ProtectionScenario, customServiceNames: ServiceNameCollection): ...
    @overload
    def __init__(self, policyEnforcement: PolicyEnforcement, protectionScenario: ProtectionScenario, customServiceNames: Collections.ICollection): ...
    @property
    def CustomChannelBinding(self) -> ChannelBinding: ...
    @property
    def CustomServiceNames(self) -> ServiceNameCollection: ...
    @property
    def OSSupportsExtendedProtection(self) -> bool: ...
    @property
    def PolicyEnforcement(self) -> PolicyEnforcement: ...
    @property
    def ProtectionScenario(self) -> ProtectionScenario: ...
    @overload
    def ToString() -> str: ...

class PolicyEnforcement(enum.Enum):
    Never = 0
    WhenSupported = 1
    Always = 2

class ProtectionScenario(enum.Enum):
    TransportSelected = 0
    TrustedProxy = 1

class ServiceNameCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self, items: Collections.ICollection): ...
    @overload
    def Contains(self, searchServiceName: str) -> bool: ...
    @overload
    def Merge(self, serviceName: str) -> ServiceNameCollection: ...
    @overload
    def Merge(self, serviceNames: Collections.IEnumerable) -> ServiceNameCollection: ...

# endregion
