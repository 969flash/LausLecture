"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AllowedMemberLocations", "XamlCollectionKind", "XamlMemberInvoker", "ShouldSerializeResult", "XamlTypeInvoker", "XamlValueConverter", "XamlTypeName", "XamlTypeTypeConverter"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import Reflection
from System import Xaml
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Xaml, Version=7.0.0.0

class AllowedMemberLocations(enum.Enum):
    None_ = 0
    Attribute = 1
    MemberElement = 2
    Any = 3

class XamlCollectionKind(enum.Enum):
    None_ = 0
    Collection = 1
    Dictionary = 2
    Array = 3

class XamlMemberInvoker(object):
    """    """
    def __init__(self, member: Xaml.XamlMember): ...
    @property
    def UnderlyingGetter(self) -> Reflection.MethodInfo: ...
    @property
    def UnderlyingSetter(self) -> Reflection.MethodInfo: ...
    @property
    def UnknownInvoker(self) -> XamlMemberInvoker: ...
    @overload
    def GetValue(self, instance: object) -> object: ...
    @overload
    def SetValue(self, instance: object, value: object) -> None: ...
    @overload
    def ShouldSerializeValue(self, instance: object) -> ShouldSerializeResult: ...

class ShouldSerializeResult(enum.Enum):
    Default = 0
    True_ = 1
    False_ = 2

class XamlTypeInvoker(object):
    """    """
    def __init__(self, type_: Xaml.XamlType): ...
    @overload
    def AddToCollection(self, instance: object, item: object) -> None: ...
    @overload
    def AddToDictionary(self, instance: object, key: object, item: object) -> None: ...
    @overload
    def CreateInstance(self, arguments: System.System.Array[object]) -> object: ...
    @property
    def SetMarkupExtensionHandler(self) -> System.EventHandler: ...
    @property
    def SetTypeConverterHandler(self) -> System.EventHandler: ...
    @property
    def UnknownInvoker(self) -> XamlTypeInvoker: ...
    @overload
    def GetAddMethod(self, contentType: Xaml.XamlType) -> Reflection.MethodInfo: ...
    @overload
    def GetEnumeratorMethod() -> Reflection.MethodInfo: ...
    @overload
    def GetItems(self, instance: object) -> Collections.IEnumerator: ...

class XamlValueConverter(object):
    """    XamlValueConverter[TConverterBase]
    """
    @overload
    def __init__(self, converterType: System.Type, targetType: Xaml.XamlType): ...
    @overload
    def __init__(self, converterType: System.Type, targetType: Xaml.XamlType, name: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: XamlValueConverter) -> bool: ...
    @property
    def ConverterInstance(self) -> TConverterBase: ...
    @property
    def ConverterType(self) -> System.Type: ...
    @property
    def Name(self) -> str: ...
    @property
    def TargetType(self) -> Xaml.XamlType: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class XamlTypeName(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, xamlType: Xaml.XamlType): ...
    @overload
    def __init__(self, xamlNamespace: str, name: str): ...
    @overload
    def __init__(self, xamlNamespace: str, name: str, typeArguments: Generic.IEnumerable): ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeArguments(self) -> Generic.IList: ...
    @overload
    @staticmethod
    def Parse(typeName: str, namespaceResolver: Xaml.IXamlNamespaceResolver) -> XamlTypeName: ...
    @overload
    @staticmethod
    def ParseList(typeNameList: str, namespaceResolver: Xaml.IXamlNamespaceResolver) -> Generic.IList: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, prefixLookup: Xaml.INamespacePrefixLookup) -> str: ...
    @overload
    @staticmethod
    def ToString(typeNameList: Generic.IList, prefixLookup: Xaml.INamespacePrefixLookup) -> str: ...
    @overload
    @staticmethod
    def TryParse(typeName: str, namespaceResolver: Xaml.IXamlNamespaceResolver) -> (bool, XamlTypeName): ...
    @overload
    @staticmethod
    def TryParseList(typeNameList: str, namespaceResolver: Xaml.IXamlNamespaceResolver) -> (bool, Generic.IList): ...

class XamlTypeTypeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

# endregion
