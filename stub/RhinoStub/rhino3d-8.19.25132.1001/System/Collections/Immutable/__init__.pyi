"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IImmutableDictionary", "IImmutableList", "IImmutableQueue", "IImmutableSet", "IImmutableStack", "ImmutableHashSet", "Builder", "Enumerator", "ImmutableArray", "ImmutableDictionary", "ImmutableInterlocked", "ImmutableList", "ImmutableQueue", "ImmutableSortedDictionary", "ImmutableSortedSet", "ImmutableStack"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Collections.Immutable, Version=7.0.0.0

class IImmutableDictionary:
    """    IImmutableDictionary[TKey, TValue]
    """
    @overload
    def Add(self, key: TKey, value: TValue) -> IImmutableDictionary: ...
    @overload
    def AddRange(self, pairs: Generic.IEnumerable) -> IImmutableDictionary: ...
    @overload
    def Clear() -> IImmutableDictionary: ...
    @overload
    def Contains(self, pair: Generic.KeyValuePair) -> bool: ...
    @overload
    def Remove(self, key: TKey) -> IImmutableDictionary: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> IImmutableDictionary: ...
    @overload
    def SetItem(self, key: TKey, value: TValue) -> IImmutableDictionary: ...
    @overload
    def SetItems(self, items: Generic.IEnumerable) -> IImmutableDictionary: ...
    @overload
    def TryGetKey(self, equalKey: TKey) -> (bool, TKey): ...

class IImmutableList:
    """    IImmutableList[T]
    """
    @overload
    def Add(self, value: T) -> IImmutableList: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> IImmutableList: ...
    @overload
    def Clear() -> IImmutableList: ...
    @overload
    def IndexOf(self, item: T, index: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Insert(self, index: int, element: T) -> IImmutableList: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> IImmutableList: ...
    @overload
    def LastIndexOf(self, item: T, index: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Remove(self, value: T, equalityComparer: Generic.IEqualityComparer) -> IImmutableList: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> IImmutableList: ...
    @overload
    def RemoveAt(self, index: int) -> IImmutableList: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> IImmutableList: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> IImmutableList: ...
    @overload
    def Replace(self, oldValue: T, newValue: T, equalityComparer: Generic.IEqualityComparer) -> IImmutableList: ...
    @overload
    def SetItem(self, index: int, value: T) -> IImmutableList: ...

class IImmutableQueue:
    """    IImmutableQueue[T]
    """
    @overload
    def Clear() -> IImmutableQueue: ...
    @overload
    def Dequeue() -> IImmutableQueue: ...
    @overload
    def Enqueue(self, value: T) -> IImmutableQueue: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def Peek() -> T: ...

class IImmutableSet:
    """    IImmutableSet[T]
    """
    @overload
    def Add(self, value: T) -> IImmutableSet: ...
    @overload
    def Clear() -> IImmutableSet: ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def Except(self, other: Generic.IEnumerable) -> IImmutableSet: ...
    @overload
    def Intersect(self, other: Generic.IEnumerable) -> IImmutableSet: ...
    @overload
    def IsProperSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Remove(self, value: T) -> IImmutableSet: ...
    @overload
    def SetEquals(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def SymmetricExcept(self, other: Generic.IEnumerable) -> IImmutableSet: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def Union(self, other: Generic.IEnumerable) -> IImmutableSet: ...

class IImmutableStack:
    """    IImmutableStack[T]
    """
    @overload
    def Clear() -> IImmutableStack: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def Peek() -> T: ...
    @overload
    def Pop() -> IImmutableStack: ...
    @overload
    def Push(self, value: T) -> IImmutableStack: ...

class ImmutableHashSet(object):
    """    ImmutableHashSet[T]
    """
    @property
    def Empty(self) -> ImmutableHashSet: ...
    @overload
    def Add(self, item: T) -> ImmutableHashSet: ...
    @overload
    def Clear() -> ImmutableHashSet: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def Except(self, other: Generic.IEnumerable) -> ImmutableHashSet: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def KeyComparer(self) -> Generic.IEqualityComparer: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Intersect(self, other: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    def IsProperSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Remove(self, item: T) -> ImmutableHashSet: ...
    @overload
    def SetEquals(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def SymmetricExcept(self, other: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    def ToBuilder() -> Builder: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def Union(self, other: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    def WithComparer(self, equalityComparer: Generic.IEqualityComparer) -> ImmutableHashSet: ...

class Builder(object):
    """    Builder[T]
    """
    @overload
    def Add(self, item: T) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def ExceptWith(self, other: Generic.IEnumerable) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def KeyComparer(self) -> Generic.IEqualityComparer: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def IntersectWith(self, other: Generic.IEnumerable) -> None: ...
    @overload
    def IsProperSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @KeyComparer.setter
    def KeyComparer(self, value: System.Void): ...
    @overload
    def SetEquals(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def SymmetricExceptWith(self, other: Generic.IEnumerable) -> None: ...
    @overload
    def ToImmutable() -> ImmutableHashSet: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def UnionWith(self, other: Generic.IEnumerable) -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ImmutableArray(object):
    """    """
    @overload
    @staticmethod
    def BinarySearch(array: ImmutableArray, value: T) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: ImmutableArray, value: T, comparer: Generic.IComparer) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: ImmutableArray, index: int, length: int, value: T) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: ImmutableArray, index: int, length: int, value: T, comparer: Generic.IComparer) -> int: ...
    @overload
    @staticmethod
    def Create() -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(items: System.ReadOnlySpan) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(items: System.Span) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(item1: T, item2: T) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(item1: T, item2: T, item3: T) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T], start: int, length: int) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(items: ImmutableArray, start: int, length: int) -> ImmutableArray: ...
    @overload
    @staticmethod
    def Create(item1: T, item2: T, item3: T, item4: T) -> ImmutableArray: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(initialCapacity: int) -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableArray: ...
    @overload
    @staticmethod
    def CreateRange(items: ImmutableArray, selector: System.Func) -> ImmutableArray: ...
    @overload
    @staticmethod
    def CreateRange(items: ImmutableArray, selector: System.Func, arg: TArg) -> ImmutableArray: ...
    @overload
    @staticmethod
    def CreateRange(items: ImmutableArray, start: int, length: int, selector: System.Func) -> ImmutableArray: ...
    @overload
    @staticmethod
    def CreateRange(items: ImmutableArray, start: int, length: int, selector: System.Func, arg: TArg) -> ImmutableArray: ...
    @overload
    @staticmethod
    def ToImmutableArray(builder: Builder) -> ImmutableArray: ...
    @overload
    @staticmethod
    def ToImmutableArray(items: System.Span) -> ImmutableArray: ...
    @overload
    @staticmethod
    def ToImmutableArray(items: System.ReadOnlySpan) -> ImmutableArray: ...
    @overload
    @staticmethod
    def ToImmutableArray(items: Generic.IEnumerable) -> ImmutableArray: ...

class ImmutableArray(System.ValueType):
    """    ImmutableArray[T]
    """
    @property
    def Empty(self) -> ImmutableArray: ...
    @overload
    def Add(self, item: T) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: System.Array[T]) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: ImmutableArray) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: ImmutableArray) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: System.Array[TDerived]) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: System.ReadOnlySpan) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: ImmutableArray, length: int) -> ImmutableArray: ...
    @overload
    def AddRange(self, items: System.Array[T], length: int) -> ImmutableArray: ...
    @overload
    def As() -> ImmutableArray: ...
    @overload
    def AsMemory() -> System.ReadOnlyMemory: ...
    @overload
    def AsSpan() -> System.ReadOnlySpan: ...
    @overload
    def AsSpan(self, range_: System.Range) -> System.ReadOnlySpan: ...
    @overload
    def AsSpan(self, start: int, length: int) -> System.ReadOnlySpan: ...
    @overload
    def CastArray() -> ImmutableArray: ...
    @overload
    @staticmethod
    def CastUp(items: ImmutableArray) -> ImmutableArray: ...
    @overload
    def Clear() -> ImmutableArray: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, destination: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Array[T], destinationIndex: int) -> None: ...
    @overload
    def CopyTo(self, sourceIndex: int, destination: System.Array[T], destinationIndex: int, length: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ImmutableArray) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def Length(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> ImmutableArray: ...
    @overload
    def InsertRange(self, index: int, items: System.Array[T]) -> ImmutableArray: ...
    @overload
    def InsertRange(self, index: int, items: System.ReadOnlySpan) -> ImmutableArray: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> ImmutableArray: ...
    @overload
    def InsertRange(self, index: int, items: ImmutableArray) -> ImmutableArray: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def LastIndexOf(self, item: T) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def OfType() -> Generic.IEnumerable: ...
    @overload
    def Remove(self, item: T) -> ImmutableArray: ...
    @overload
    def Remove(self, item: T, equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> ImmutableArray: ...
    @overload
    def RemoveAt(self, index: int) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: ImmutableArray) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: ImmutableArray, equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: System.Array[T], equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: System.ReadOnlySpan, equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, index: int, length: int) -> ImmutableArray: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def Replace(self, oldValue: T, newValue: T) -> ImmutableArray: ...
    @overload
    def Replace(self, oldValue: T, newValue: T, equalityComparer: Generic.IEqualityComparer) -> ImmutableArray: ...
    @overload
    def SetItem(self, index: int, item: T) -> ImmutableArray: ...
    @overload
    def Slice(self, start: int, length: int) -> ImmutableArray: ...
    @overload
    def Sort() -> ImmutableArray: ...
    @overload
    def Sort(self, comparer: Generic.IComparer) -> ImmutableArray: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> ImmutableArray: ...
    @overload
    def Sort(self, index: int, count: int, comparer: Generic.IComparer) -> ImmutableArray: ...
    @overload
    def ToBuilder() -> Builder: ...

class Builder(object):
    """    Builder[T]
    """
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def AddRange(self, items: Builder) -> None: ...
    @overload
    def AddRange(self, items: System.ReadOnlySpan) -> None: ...
    @overload
    def AddRange(self, items: ImmutableArray) -> None: ...
    @overload
    def AddRange(self, items: System.Array[TDerived]) -> None: ...
    @overload
    def AddRange(self, items: System.Array[T]) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def AddRange(self, items: Builder) -> None: ...
    @overload
    def AddRange(self, items: System.ReadOnlySpan) -> None: ...
    @overload
    def AddRange(self, items: ImmutableArray) -> None: ...
    @overload
    def AddRange(self, items: System.Array[T], length: int) -> None: ...
    @overload
    def AddRange(self, items: ImmutableArray, length: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, destination: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @overload
    def CopyTo(self, sourceIndex: int, destination: System.Array[T], destinationIndex: int, length: int) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def IndexOf(self, item: T, startIndex: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def InsertRange(self, index: int, items: ImmutableArray) -> None: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> None: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def LastIndexOf(self, item: T) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def MoveToImmutable() -> ImmutableArray: ...
    @overload
    def Remove(self, element: T) -> bool: ...
    @overload
    def Remove(self, element: T, equalityComparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def RemoveRange(self, index: int, length: int) -> None: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def Replace(self, oldValue: T, newValue: T) -> None: ...
    @overload
    def Replace(self, oldValue: T, newValue: T, equalityComparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def Reverse() -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Count.setter
    def Count(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Sort() -> None: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> None: ...
    @overload
    def Sort(self, comparer: Generic.IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: Generic.IComparer) -> None: ...
    @overload
    def ToArray() -> System.Array[T]: ...
    @overload
    def ToImmutable() -> ImmutableArray: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class ImmutableDictionary(object):
    """    """
    @overload
    @staticmethod
    def Contains(map_: IImmutableDictionary, key: TKey, value: TValue) -> bool: ...
    @overload
    @staticmethod
    def Create() -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def Create(keyComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def Create(keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(keyComparer: Generic.IEqualityComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def CreateRange(keyComparer: Generic.IEqualityComparer, items: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def CreateRange(keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer, items: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def GetValueOrDefault(dictionary: IImmutableDictionary, key: TKey) -> TValue: ...
    @overload
    @staticmethod
    def GetValueOrDefault(dictionary: IImmutableDictionary, key: TKey, defaultValue: TValue) -> TValue: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(builder: Builder) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keyComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keySelector: System.Func) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keySelector: System.Func, keyComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, keyComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    @staticmethod
    def ToImmutableDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...

class ImmutableDictionary(object):
    """    ImmutableDictionary[TKey, TValue]
    """
    @property
    def Empty(self) -> ImmutableDictionary: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> ImmutableDictionary: ...
    @overload
    def AddRange(self, pairs: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    def Clear() -> ImmutableDictionary: ...
    @overload
    def Contains(self, pair: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def KeyComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def ValueComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Remove(self, key: TKey) -> ImmutableDictionary: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    def SetItem(self, key: TKey, value: TValue) -> ImmutableDictionary: ...
    @overload
    def SetItems(self, items: Generic.IEnumerable) -> ImmutableDictionary: ...
    @overload
    def ToBuilder() -> Builder: ...
    @overload
    def TryGetKey(self, equalKey: TKey) -> (bool, TKey): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...
    @overload
    def WithComparers(self, keyComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...
    @overload
    def WithComparers(self, keyComparer: Generic.IEqualityComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableDictionary: ...

class Builder(object):
    """    Builder[TKey, TValue]
    """
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def KeyComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def ValueComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetValueOrDefault(self, key: TKey) -> TValue: ...
    @overload
    def GetValueOrDefault(self, key: TKey, defaultValue: TValue) -> TValue: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @KeyComparer.setter
    def KeyComparer(self, value: System.Void): ...
    @ValueComparer.setter
    def ValueComparer(self, value: System.Void): ...
    @overload
    def ToImmutable() -> ImmutableDictionary: ...
    @overload
    def TryGetKey(self, equalKey: TKey) -> (bool, TKey): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Generic.KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ImmutableHashSet(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def Create(equalityComparer: Generic.IEqualityComparer) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def Create(equalityComparer: Generic.IEqualityComparer, item: T) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def Create(equalityComparer: Generic.IEqualityComparer, items: System.Array[T]) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(equalityComparer: Generic.IEqualityComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def CreateRange(equalityComparer: Generic.IEqualityComparer, items: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def ToImmutableHashSet(builder: Builder) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def ToImmutableHashSet(source: Generic.IEnumerable) -> ImmutableHashSet: ...
    @overload
    @staticmethod
    def ToImmutableHashSet(source: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> ImmutableHashSet: ...

class ImmutableInterlocked(object):
    """    """
    @overload
    @staticmethod
    def AddOrUpdate(key: TKey, addValue: TValue, updateValueFactory: System.Func) -> (TValue, ImmutableDictionary): ...
    @overload
    @staticmethod
    def AddOrUpdate(key: TKey, addValueFactory: System.Func, updateValueFactory: System.Func) -> (TValue, ImmutableDictionary): ...
    @overload
    @staticmethod
    def Enqueue(value: T) -> (ImmutableQueue): ...
    @overload
    @staticmethod
    def GetOrAdd(key: TKey, valueFactory: System.Func) -> (TValue, ImmutableDictionary): ...
    @overload
    @staticmethod
    def GetOrAdd(key: TKey, value: TValue) -> (TValue, ImmutableDictionary): ...
    @overload
    @staticmethod
    def GetOrAdd(key: TKey, valueFactory: System.Func, factoryArgument: TArg) -> (TValue, ImmutableDictionary): ...
    @overload
    @staticmethod
    def InterlockedCompareExchange(value: ImmutableArray, comparand: ImmutableArray) -> (ImmutableArray, ImmutableArray): ...
    @overload
    @staticmethod
    def InterlockedExchange(value: ImmutableArray) -> (ImmutableArray, ImmutableArray): ...
    @overload
    @staticmethod
    def InterlockedInitialize(value: ImmutableArray) -> (bool, ImmutableArray): ...
    @overload
    @staticmethod
    def Push(value: T) -> (ImmutableStack): ...
    @overload
    @staticmethod
    def TryAdd(key: TKey, value: TValue) -> (bool, ImmutableDictionary): ...
    @overload
    @staticmethod
    def TryDequeue() -> (bool, ImmutableQueue, T): ...
    @overload
    @staticmethod
    def TryPop() -> (bool, ImmutableStack, T): ...
    @overload
    @staticmethod
    def TryRemove(key: TKey) -> (bool, ImmutableDictionary, TValue): ...
    @overload
    @staticmethod
    def TryUpdate(key: TKey, newValue: TValue, comparisonValue: TValue) -> (bool, ImmutableDictionary): ...
    @overload
    @staticmethod
    def Update(transformer: System.Func) -> (bool, ImmutableArray): ...
    @overload
    @staticmethod
    def Update(transformer: System.Func) -> (bool, T): ...
    @overload
    @staticmethod
    def Update(transformer: System.Func, transformerArgument: TArg) -> (bool, ImmutableArray): ...
    @overload
    @staticmethod
    def Update(transformer: System.Func, transformerArgument: TArg) -> (bool, T): ...

class ImmutableList(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableList: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableList: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableList: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableList: ...
    @overload
    @staticmethod
    def IndexOf(list_: IImmutableList, item: T) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: IImmutableList, item: T, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: IImmutableList, item: T, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def IndexOf(list_: IImmutableList, item: T, startIndex: int, count: int) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(list_: IImmutableList, item: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(list_: IImmutableList, item: T, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(list_: IImmutableList, item: T, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(list_: IImmutableList, item: T, startIndex: int, count: int) -> int: ...
    @overload
    @staticmethod
    def Remove(list_: IImmutableList, value: T) -> IImmutableList: ...
    @overload
    @staticmethod
    def RemoveRange(list_: IImmutableList, items: Generic.IEnumerable) -> IImmutableList: ...
    @overload
    @staticmethod
    def Replace(list_: IImmutableList, oldValue: T, newValue: T) -> IImmutableList: ...
    @overload
    @staticmethod
    def ToImmutableList(source: Generic.IEnumerable) -> ImmutableList: ...
    @overload
    @staticmethod
    def ToImmutableList(builder: Builder) -> ImmutableList: ...

class ImmutableList(object):
    """    ImmutableList[T]
    """
    @property
    def Empty(self) -> ImmutableList: ...
    @overload
    def Add(self, value: T) -> ImmutableList: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> ImmutableList: ...
    @overload
    def BinarySearch(self, item: T) -> int: ...
    @overload
    def BinarySearch(self, item: T, comparer: Generic.IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: T, comparer: Generic.IComparer) -> int: ...
    @overload
    def Clear() -> ImmutableList: ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def ConvertAll(self, converter: System.Func) -> ImmutableList: ...
    @overload
    def CopyTo(self, array: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: System.Array[T], arrayIndex: int, count: int) -> None: ...
    @overload
    def Exists(self, match: System.Predicate) -> bool: ...
    @overload
    def Find(self, match: System.Predicate) -> T: ...
    @overload
    def FindAll(self, match: System.Predicate) -> ImmutableList: ...
    @overload
    def FindIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def FindLast(self, match: System.Predicate) -> T: ...
    @overload
    def FindLastIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def ForEach(self, action: System.Action) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetRange(self, index: int, count: int) -> ImmutableList: ...
    @overload
    def IndexOf(self, value: T) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> ImmutableList: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> ImmutableList: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def LastIndexOf(self, item: T, index: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Remove(self, value: T) -> ImmutableList: ...
    @overload
    def Remove(self, value: T, equalityComparer: Generic.IEqualityComparer) -> ImmutableList: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> ImmutableList: ...
    @overload
    def RemoveAt(self, index: int) -> ImmutableList: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable) -> ImmutableList: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> ImmutableList: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> ImmutableList: ...
    @overload
    def Replace(self, oldValue: T, newValue: T) -> ImmutableList: ...
    @overload
    def Replace(self, oldValue: T, newValue: T, equalityComparer: Generic.IEqualityComparer) -> ImmutableList: ...
    @overload
    def Reverse() -> ImmutableList: ...
    @overload
    def Reverse(self, index: int, count: int) -> ImmutableList: ...
    @overload
    def SetItem(self, index: int, value: T) -> ImmutableList: ...
    @overload
    def Sort() -> ImmutableList: ...
    @overload
    def Sort(self, comparer: Generic.IComparer) -> ImmutableList: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> ImmutableList: ...
    @overload
    def Sort(self, index: int, count: int, comparer: Generic.IComparer) -> ImmutableList: ...
    @overload
    def ToBuilder() -> Builder: ...
    @overload
    def TrueForAll(self, match: System.Predicate) -> bool: ...

class Builder(object):
    """    Builder[T]
    """
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def BinarySearch(self, item: T) -> int: ...
    @overload
    def BinarySearch(self, item: T, comparer: Generic.IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: T, comparer: Generic.IComparer) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def ConvertAll(self, converter: System.Func) -> ImmutableList: ...
    @overload
    def CopyTo(self, array: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: System.Array[T], arrayIndex: int, count: int) -> None: ...
    @overload
    def Exists(self, match: System.Predicate) -> bool: ...
    @overload
    def Find(self, match: System.Predicate) -> T: ...
    @overload
    def FindAll(self, match: System.Predicate) -> ImmutableList: ...
    @overload
    def FindIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def FindLast(self, match: System.Predicate) -> T: ...
    @overload
    def FindLastIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def ForEach(self, action: System.Action) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetRange(self, index: int, count: int) -> ImmutableList: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int, count: int) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def InsertRange(self, index: int, items: Generic.IEnumerable) -> None: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def LastIndexOf(self, item: T) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, startIndex: int, count: int, equalityComparer: Generic.IEqualityComparer) -> int: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def Remove(self, item: T, equalityComparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def RemoveRange(self, items: Generic.IEnumerable, equalityComparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def Replace(self, oldValue: T, newValue: T) -> None: ...
    @overload
    def Replace(self, oldValue: T, newValue: T, equalityComparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def Reverse() -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Sort() -> None: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> None: ...
    @overload
    def Sort(self, comparer: Generic.IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: Generic.IComparer) -> None: ...
    @overload
    def ToImmutable() -> ImmutableList: ...
    @overload
    def TrueForAll(self, match: System.Predicate) -> bool: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ImmutableQueue(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableQueue: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableQueue: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableQueue: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableQueue: ...
    @overload
    @staticmethod
    def Dequeue(queue: IImmutableQueue) -> (IImmutableQueue, T): ...

class ImmutableQueue(object):
    """    ImmutableQueue[T]
    """
    @overload
    def Clear() -> ImmutableQueue: ...
    @overload
    def Dequeue() -> ImmutableQueue: ...
    @overload
    def Dequeue() -> (ImmutableQueue, T): ...
    @overload
    def Enqueue(self, value: T) -> ImmutableQueue: ...
    @property
    def Empty(self) -> ImmutableQueue: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Peek() -> T: ...
    @overload
    def PeekRef() -> T: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class ImmutableSortedDictionary(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def Create(keyComparer: Generic.IComparer) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def Create(keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(keyComparer: Generic.IComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def CreateRange(keyComparer: Generic.IComparer, items: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def CreateRange(keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer, items: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(builder: Builder) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable, keyComparer: Generic.IComparer) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable, keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, keyComparer: Generic.IComparer) -> ImmutableSortedDictionary: ...
    @overload
    @staticmethod
    def ToImmutableSortedDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableSortedDictionary: ...

class ImmutableSortedDictionary(object):
    """    ImmutableSortedDictionary[TKey, TValue]
    """
    @property
    def Empty(self) -> ImmutableSortedDictionary: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> ImmutableSortedDictionary: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    def Clear() -> ImmutableSortedDictionary: ...
    @overload
    def Contains(self, pair: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def KeyComparer(self) -> Generic.IComparer: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def ValueComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Remove(self, value: TKey) -> ImmutableSortedDictionary: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    def SetItem(self, key: TKey, value: TValue) -> ImmutableSortedDictionary: ...
    @overload
    def SetItems(self, items: Generic.IEnumerable) -> ImmutableSortedDictionary: ...
    @overload
    def ToBuilder() -> Builder: ...
    @overload
    def TryGetKey(self, equalKey: TKey) -> (bool, TKey): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...
    @overload
    def ValueRef(self, key: TKey) -> TValue: ...
    @overload
    def WithComparers(self, keyComparer: Generic.IComparer) -> ImmutableSortedDictionary: ...
    @overload
    def WithComparers(self, keyComparer: Generic.IComparer, valueComparer: Generic.IEqualityComparer) -> ImmutableSortedDictionary: ...

class Builder(object):
    """    Builder[TKey, TValue]
    """
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def AddRange(self, items: Generic.IEnumerable) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def KeyComparer(self) -> Generic.IComparer: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def ValueComparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetValueOrDefault(self, key: TKey) -> TValue: ...
    @overload
    def GetValueOrDefault(self, key: TKey, defaultValue: TValue) -> TValue: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def RemoveRange(self, keys: Generic.IEnumerable) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @KeyComparer.setter
    def KeyComparer(self, value: System.Void): ...
    @ValueComparer.setter
    def ValueComparer(self, value: System.Void): ...
    @overload
    def ToImmutable() -> ImmutableSortedDictionary: ...
    @overload
    def TryGetKey(self, equalKey: TKey) -> (bool, TKey): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...
    @overload
    def ValueRef(self, key: TKey) -> TValue: ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Generic.KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ImmutableSortedSet(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def Create(comparer: Generic.IComparer) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def Create(comparer: Generic.IComparer, item: T) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def Create(comparer: Generic.IComparer, items: System.Array[T]) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def CreateBuilder() -> Builder: ...
    @overload
    @staticmethod
    def CreateBuilder(comparer: Generic.IComparer) -> Builder: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def CreateRange(comparer: Generic.IComparer, items: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def ToImmutableSortedSet(source: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def ToImmutableSortedSet(builder: Builder) -> ImmutableSortedSet: ...
    @overload
    @staticmethod
    def ToImmutableSortedSet(source: Generic.IEnumerable, comparer: Generic.IComparer) -> ImmutableSortedSet: ...

class ImmutableSortedSet(object):
    """    ImmutableSortedSet[T]
    """
    @property
    def Empty(self) -> ImmutableSortedSet: ...
    @overload
    def Add(self, value: T) -> ImmutableSortedSet: ...
    @overload
    def Clear() -> ImmutableSortedSet: ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def Except(self, other: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def KeyComparer(self) -> Generic.IComparer: ...
    @property
    def Max(self) -> T: ...
    @property
    def Min(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Intersect(self, other: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    def IsProperSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def Overlaps(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Remove(self, value: T) -> ImmutableSortedSet: ...
    @overload
    def Reverse() -> Generic.IEnumerable: ...
    @overload
    def SetEquals(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def SymmetricExcept(self, other: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    def ToBuilder() -> Builder: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def Union(self, other: Generic.IEnumerable) -> ImmutableSortedSet: ...
    @overload
    def WithComparer(self, comparer: Generic.IComparer) -> ImmutableSortedSet: ...

class Builder(object):
    """    Builder[T]
    """
    @overload
    def Add(self, item: T) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def ExceptWith(self, other: Generic.IEnumerable) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @property
    def KeyComparer(self) -> Generic.IComparer: ...
    @property
    def Max(self) -> T: ...
    @property
    def Min(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def IntersectWith(self, other: Generic.IEnumerable) -> None: ...
    @overload
    def IsProperSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def ItemRef(self, index: int) -> T: ...
    @overload
    def Overlaps(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def Reverse() -> Generic.IEnumerable: ...
    @KeyComparer.setter
    def KeyComparer(self, value: System.Void): ...
    @overload
    def SetEquals(self, other: Generic.IEnumerable) -> bool: ...
    @overload
    def SymmetricExceptWith(self, other: Generic.IEnumerable) -> None: ...
    @overload
    def ToImmutable() -> ImmutableSortedSet: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def UnionWith(self, other: Generic.IEnumerable) -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ImmutableStack(object):
    """    """
    @overload
    @staticmethod
    def Create() -> ImmutableStack: ...
    @overload
    @staticmethod
    def Create(item: T) -> ImmutableStack: ...
    @overload
    @staticmethod
    def Create(items: System.Array[T]) -> ImmutableStack: ...
    @overload
    @staticmethod
    def CreateRange(items: Generic.IEnumerable) -> ImmutableStack: ...
    @overload
    @staticmethod
    def Pop(stack: IImmutableStack) -> (IImmutableStack, T): ...

class ImmutableStack(object):
    """    ImmutableStack[T]
    """
    @overload
    def Clear() -> ImmutableStack: ...
    @property
    def Empty(self) -> ImmutableStack: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Peek() -> T: ...
    @overload
    def PeekRef() -> T: ...
    @overload
    def Pop() -> ImmutableStack: ...
    @overload
    def Pop() -> (ImmutableStack, T): ...
    @overload
    def Push(self, value: T) -> ImmutableStack: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

# endregion
