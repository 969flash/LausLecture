"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["KeyedByTypeCollection", "SynchronizedCollection", "SynchronizedKeyedCollection", "SynchronizedReadOnlyCollection"]
# endregion

# region: Imports
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CollectionExtensions", "LinkedList", "Enumerator", "LinkedListNode", "PriorityQueue", "UnorderedItemsCollection", "SortedDictionary", "KeyCollection", "ValueCollection", "KeyValuePairComparer", "TreeSet", "SortedList", "KeyList", "ValueList", "SortedSet", "Stack"]
# endregion

# region: Imports
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Comparer", "EqualityComparer", "GenericEqualityComparer", "NullableEqualityComparer", "ObjectEqualityComparer", "ByteEqualityComparer", "EnumEqualityComparer", "GenericComparer", "NullableComparer", "ObjectComparer", "Dictionary", "Enumerator", "KeyCollection", "ValueCollection", "HashSet", "IAsyncEnumerable", "IAsyncEnumerator", "ICollection", "IComparer", "IDictionary", "IEnumerable", "IEnumerator", "IEqualityComparer", "IList", "IReadOnlyCollection", "IReadOnlyDictionary", "IReadOnlyList", "ISet", "IReadOnlySet", "KeyNotFoundException", "KeyValuePair", "List", "Queue", "ReferenceEqualityComparer", "NonRandomizedStringEqualityComparer"]
# endregion

# region: Imports
from System import Threading
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Comparer(object):
    """    Comparer[T]
    """
    @overload
    def Compare(self, x: T, y: T) -> int: ...
    @overload
    @staticmethod
    def Create(comparison: System.Comparison) -> Comparer: ...
    @property
    def Default(self) -> Comparer: ...

class EqualityComparer(object):
    """    EqualityComparer[T]
    """
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @property
    def Default(self) -> EqualityComparer: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...

class GenericEqualityComparer(EqualityComparer):
    """    GenericEqualityComparer[T]
    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...

class NullableEqualityComparer(EqualityComparer):
    """    NullableEqualityComparer[T]
    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: System.Nullable, y: System.Nullable) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: System.Nullable) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ObjectEqualityComparer(EqualityComparer):
    """    ObjectEqualityComparer[T]
    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...

class ByteEqualityComparer(EqualityComparer):
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: System.Byte, y: System.Byte) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, b: System.Byte) -> int: ...

class EnumEqualityComparer(EqualityComparer):
    """    EnumEqualityComparer[T]
    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class GenericComparer(Comparer):
    """    GenericComparer[T]
    """
    def __init__(self): ...
    @overload
    def Compare(self, x: T, y: T) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class NullableComparer(Comparer):
    """    NullableComparer[T]
    """
    def __init__(self): ...
    @overload
    def Compare(self, x: System.Nullable, y: System.Nullable) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ObjectComparer(Comparer):
    """    ObjectComparer[T]
    """
    def __init__(self): ...
    @overload
    def Compare(self, x: T, y: T) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class Dictionary(object):
    """    Dictionary[TKey, TValue]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, dictionary: IDictionary): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def __init__(self, capacity: int, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, dictionary: IDictionary, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, collection: IEnumerable, comparer: IEqualityComparer): ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @property
    def Comparer(self) -> IEqualityComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> KeyCollection: ...
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def Remove(self, key: TKey) -> (bool, TValue): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TrimExcess(self, capacity: int) -> None: ...
    @overload
    def TryAdd(self, key: TKey, value: TValue) -> bool: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...

class KeyCollection(object):
    """    KeyCollection[TKey, TValue]
    """
    def __init__(self, dictionary: Dictionary): ...
    @overload
    def CopyTo(self, array: System.Array[TKey], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> TKey: ...
    @overload
    def MoveNext() -> bool: ...

class ValueCollection(object):
    """    ValueCollection[TKey, TValue]
    """
    def __init__(self, dictionary: Dictionary): ...
    @overload
    def CopyTo(self, array: System.Array[TValue], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> TValue: ...
    @overload
    def MoveNext() -> bool: ...

class HashSet(object):
    """    HashSet[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def __init__(self, collection: IEnumerable, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int, comparer: IEqualityComparer): ...
    @overload
    def Add(self, item: T) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int, count: int) -> None: ...
    @overload
    @staticmethod
    def CreateSetComparer() -> IEqualityComparer: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @overload
    def ExceptWith(self, other: IEnumerable) -> None: ...
    @property
    def Comparer(self) -> IEqualityComparer: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def IntersectWith(self, other: IEnumerable) -> None: ...
    @overload
    def IsProperSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Overlaps(self, other: IEnumerable) -> bool: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveWhere(self, match: System.Predicate) -> int: ...
    @overload
    def SetEquals(self, other: IEnumerable) -> bool: ...
    @overload
    def SymmetricExceptWith(self, other: IEnumerable) -> None: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def UnionWith(self, other: IEnumerable) -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class IAsyncEnumerable:
    """    IAsyncEnumerable[T]
    """
    @overload
    def GetAsyncEnumerator(self, cancellationToken: Threading.CancellationToken) -> IAsyncEnumerator: ...

class IAsyncEnumerator:
    """    IAsyncEnumerator[T]
    """
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNextAsync() -> Tasks.ValueTask: ...

class ICollection:
    """    ICollection[T]
    """
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def Remove(self, item: T) -> bool: ...

class IComparer:
    """    IComparer[T]
    """
    @overload
    def Compare(self, x: T, y: T) -> int: ...

class IDictionary:
    """    IDictionary[TKey, TValue]
    """
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class IEnumerable:
    """    IEnumerable[T]
    """
    @overload
    def GetEnumerator() -> IEnumerator: ...

class IEnumerator:
    """    IEnumerator[T]
    """
    @property
    def Current(self) -> T: ...

class IEqualityComparer:
    """    IEqualityComparer[T]
    """
    @overload
    def Equals(self, x: T, y: T) -> bool: ...
    @overload
    def GetHashCode(self, obj: T) -> int: ...

class IList:
    """    IList[T]
    """
    @property
    def Item(self) -> T: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class IReadOnlyCollection:
    """    IReadOnlyCollection[T]
    """
    @property
    def Count(self) -> int: ...

class IReadOnlyDictionary:
    """    IReadOnlyDictionary[TKey, TValue]
    """
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> IEnumerable: ...
    @property
    def Values(self) -> IEnumerable: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class IReadOnlyList:
    """    IReadOnlyList[T]
    """
    @property
    def Item(self) -> T: ...

class ISet:
    """    ISet[T]
    """
    @overload
    def Add(self, item: T) -> bool: ...
    @overload
    def ExceptWith(self, other: IEnumerable) -> None: ...
    @overload
    def IntersectWith(self, other: IEnumerable) -> None: ...
    @overload
    def IsProperSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: IEnumerable) -> bool: ...
    @overload
    def SetEquals(self, other: IEnumerable) -> bool: ...
    @overload
    def SymmetricExceptWith(self, other: IEnumerable) -> None: ...
    @overload
    def UnionWith(self, other: IEnumerable) -> None: ...

class IReadOnlySet:
    """    IReadOnlySet[T]
    """
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def IsProperSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: IEnumerable) -> bool: ...
    @overload
    def SetEquals(self, other: IEnumerable) -> bool: ...

class KeyNotFoundException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class KeyValuePair(object):
    """    """
    @overload
    @staticmethod
    def Create(key: TKey, value: TValue) -> KeyValuePair: ...

class KeyValuePair(System.ValueType):
    """    KeyValuePair[TKey, TValue]
    """
    def __init__(self, key: TKey, value: TValue): ...
    @overload
    def Deconstruct() -> (TKey, TValue): ...
    @property
    def Key(self) -> TKey: ...
    @property
    def Value(self) -> TValue: ...
    @overload
    def ToString() -> str: ...

class List(object):
    """    List[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def AddRange(self, collection: IEnumerable) -> None: ...
    @overload
    def AsReadOnly() -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: T) -> int: ...
    @overload
    def BinarySearch(self, item: T, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: T, comparer: IComparer) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def ConvertAll(self, converter: System.Converter) -> List: ...
    @overload
    def CopyTo(self, array: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: System.Array[T], arrayIndex: int, count: int) -> None: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @overload
    def Exists(self, match: System.Predicate) -> bool: ...
    @overload
    def Find(self, match: System.Predicate) -> T: ...
    @overload
    def FindAll(self, match: System.Predicate) -> List: ...
    @overload
    def FindIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def FindLast(self, match: System.Predicate) -> T: ...
    @overload
    def FindLastIndex(self, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: System.Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: System.Predicate) -> int: ...
    @overload
    def ForEach(self, action: System.Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetRange(self, index: int, count: int) -> List: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int) -> int: ...
    @overload
    def IndexOf(self, item: T, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: IEnumerable) -> None: ...
    @overload
    def LastIndexOf(self, item: T) -> int: ...
    @overload
    def LastIndexOf(self, item: T, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: T, index: int, count: int) -> int: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAll(self, match: System.Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse() -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Sort() -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: System.Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray() -> System.Array[T]: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TrueForAll(self, match: System.Predicate) -> bool: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class Queue(object):
    """    Queue[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def Dequeue() -> T: ...
    @overload
    def Enqueue(self, item: T) -> None: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Peek() -> T: ...
    @overload
    def ToArray() -> System.Array[T]: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TryDequeue() -> (bool, T): ...
    @overload
    def TryPeek() -> (bool, T): ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class ReferenceEqualityComparer(object):
    """    """
    @overload
    def Equals(self, x: object, y: object) -> bool: ...
    @property
    def Instance(self) -> ReferenceEqualityComparer: ...
    @overload
    def GetHashCode(self, obj: object) -> int: ...

class NonRandomizedStringEqualityComparer(object):
    """    """
    @overload
    def Equals(self, x: str, y: str) -> bool: ...
    @overload
    def GetHashCode(self, obj: str) -> int: ...
    @overload
    @staticmethod
    def GetStringComparer(comparer: object) -> IEqualityComparer: ...
    @overload
    def GetUnderlyingEqualityComparer() -> IEqualityComparer: ...

# endregion

# region: System.Collections, Version=7.0.0.0

class CollectionExtensions(object):
    """    """
    @overload
    @staticmethod
    def AsReadOnly(list_: IList) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def AsReadOnly(dictionary: IDictionary) -> ObjectModel.ReadOnlyDictionary: ...
    @overload
    @staticmethod
    def GetValueOrDefault(dictionary: IReadOnlyDictionary, key: TKey) -> TValue: ...
    @overload
    @staticmethod
    def GetValueOrDefault(dictionary: IReadOnlyDictionary, key: TKey, defaultValue: TValue) -> TValue: ...
    @overload
    @staticmethod
    def Remove(dictionary: IDictionary, key: TKey) -> (bool, TValue): ...
    @overload
    @staticmethod
    def TryAdd(dictionary: IDictionary, key: TKey, value: TValue) -> bool: ...

class LinkedList(object):
    """    LinkedList[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def AddAfter(self, node: LinkedListNode, value: T) -> LinkedListNode: ...
    @overload
    def AddAfter(self, node: LinkedListNode, newNode: LinkedListNode) -> None: ...
    @overload
    def AddBefore(self, node: LinkedListNode, value: T) -> LinkedListNode: ...
    @overload
    def AddBefore(self, node: LinkedListNode, newNode: LinkedListNode) -> None: ...
    @overload
    def AddFirst(self, value: T) -> LinkedListNode: ...
    @overload
    def AddFirst(self, node: LinkedListNode) -> None: ...
    @overload
    def AddLast(self, value: T) -> LinkedListNode: ...
    @overload
    def AddLast(self, node: LinkedListNode) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @overload
    def Find(self, value: T) -> LinkedListNode: ...
    @overload
    def FindLast(self, value: T) -> LinkedListNode: ...
    @property
    def Count(self) -> int: ...
    @property
    def First(self) -> LinkedListNode: ...
    @property
    def Last(self) -> LinkedListNode: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Remove(self, value: T) -> bool: ...
    @overload
    def Remove(self, node: LinkedListNode) -> None: ...
    @overload
    def RemoveFirst() -> None: ...
    @overload
    def RemoveLast() -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class LinkedListNode(object):
    """    LinkedListNode[T]
    """
    def __init__(self, value: T): ...
    @property
    def List(self) -> LinkedList: ...
    @property
    def Next(self) -> LinkedListNode: ...
    @property
    def Previous(self) -> LinkedListNode: ...
    @property
    def Value(self) -> T: ...
    @property
    def ValueRef(self) -> T: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class PriorityQueue(object):
    """    PriorityQueue[TElement, TPriority]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialCapacity: int): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    @overload
    def __init__(self, items: IEnumerable): ...
    @overload
    def __init__(self, initialCapacity: int, comparer: IComparer): ...
    @overload
    def __init__(self, items: IEnumerable, comparer: IComparer): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Dequeue() -> TElement: ...
    @overload
    def Enqueue(self, element: TElement, priority: TPriority) -> None: ...
    @overload
    def EnqueueDequeue(self, element: TElement, priority: TPriority) -> TElement: ...
    @overload
    def EnqueueRange(self, items: IEnumerable) -> None: ...
    @overload
    def EnqueueRange(self, elements: IEnumerable, priority: TPriority) -> None: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def UnorderedItems(self) -> UnorderedItemsCollection: ...
    @overload
    def Peek() -> TElement: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TryDequeue() -> (bool, TElement, TPriority): ...
    @overload
    def TryPeek() -> (bool, TElement, TPriority): ...

class UnorderedItemsCollection(object):
    """    UnorderedItemsCollection[TElement, TPriority]
    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    Enumerator[TElement, TPriority]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> System.ValueTuple: ...
    @overload
    def MoveNext() -> bool: ...

class SortedDictionary(object):
    """    SortedDictionary[TKey, TValue]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dictionary: IDictionary): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    @overload
    def __init__(self, dictionary: IDictionary, comparer: IComparer): ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[KeyValuePair], index: int) -> None: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> KeyCollection: ...
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...

class KeyCollection(object):
    """    KeyCollection[TKey, TValue]
    """
    def __init__(self, dictionary: SortedDictionary): ...
    @overload
    def CopyTo(self, array: System.Array[TKey], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> TKey: ...
    @overload
    def MoveNext() -> bool: ...

class ValueCollection(object):
    """    ValueCollection[TKey, TValue]
    """
    def __init__(self, dictionary: SortedDictionary): ...
    @overload
    def CopyTo(self, array: System.Array[TValue], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    Enumerator[TKey, TValue]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> TValue: ...
    @overload
    def MoveNext() -> bool: ...

class KeyValuePairComparer(Comparer):
    """    KeyValuePairComparer[TKey, TValue]
    """
    def __init__(self, keyComparer: IComparer): ...
    @overload
    def Compare(self, x: KeyValuePair, y: KeyValuePair) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class TreeSet(SortedSet):
    """    TreeSet[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: IComparer): ...

class SortedList(object):
    """    SortedList[TKey, TValue]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    @overload
    def __init__(self, dictionary: IDictionary): ...
    @overload
    def __init__(self, capacity: int, comparer: IComparer): ...
    @overload
    def __init__(self, dictionary: IDictionary, comparer: IComparer): ...
    @overload
    def Add(self, key: TKey, value: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @overload
    def ContainsValue(self, value: TValue) -> bool: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> IList: ...
    @property
    def Values(self) -> IList: ...
    @overload
    def GetEnumerator() -> IEnumerator: ...
    @overload
    def GetKeyAtIndex(self, index: int) -> TKey: ...
    @overload
    def GetValueAtIndex(self, index: int) -> TValue: ...
    @overload
    def IndexOfKey(self, key: TKey) -> int: ...
    @overload
    def IndexOfValue(self, value: TValue) -> int: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetValueAtIndex(self, index: int, value: TValue) -> None: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class KeyList(object):
    """    KeyList[TKey, TValue]
    """
    @overload
    def Add(self, key: TKey) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, key: TKey) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[TKey], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TKey: ...
    @overload
    def GetEnumerator() -> IEnumerator: ...
    @overload
    def IndexOf(self, key: TKey) -> int: ...
    @overload
    def Insert(self, index: int, value: TKey) -> None: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ValueList(object):
    """    ValueList[TKey, TValue]
    """
    @overload
    def Add(self, key: TValue) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: TValue) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[TValue], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TValue: ...
    @overload
    def GetEnumerator() -> IEnumerator: ...
    @overload
    def IndexOf(self, value: TValue) -> int: ...
    @overload
    def Insert(self, index: int, value: TValue) -> None: ...
    @overload
    def Remove(self, value: TValue) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class SortedSet(object):
    """    SortedSet[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def __init__(self, collection: IEnumerable, comparer: IComparer): ...
    @overload
    def Add(self, item: T) -> bool: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int, count: int) -> None: ...
    @overload
    @staticmethod
    def CreateSetComparer() -> IEqualityComparer: ...
    @overload
    @staticmethod
    def CreateSetComparer(memberEqualityComparer: IEqualityComparer) -> IEqualityComparer: ...
    @overload
    def ExceptWith(self, other: IEnumerable) -> None: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Max(self) -> T: ...
    @property
    def Min(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetViewBetween(self, lowerValue: T, upperValue: T) -> SortedSet: ...
    @overload
    def IntersectWith(self, other: IEnumerable) -> None: ...
    @overload
    def IsProperSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsProperSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSubsetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def IsSupersetOf(self, other: IEnumerable) -> bool: ...
    @overload
    def Overlaps(self, other: IEnumerable) -> bool: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveWhere(self, match: System.Predicate) -> int: ...
    @overload
    def Reverse() -> IEnumerable: ...
    @overload
    def SetEquals(self, other: IEnumerable) -> bool: ...
    @overload
    def SymmetricExceptWith(self, other: IEnumerable) -> None: ...
    @overload
    def TryGetValue(self, equalValue: T) -> (bool, T): ...
    @overload
    def UnionWith(self, other: IEnumerable) -> None: ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class Stack(object):
    """    Stack[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, collection: IEnumerable): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], arrayIndex: int) -> None: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Peek() -> T: ...
    @overload
    def Pop() -> T: ...
    @overload
    def Push(self, item: T) -> None: ...
    @overload
    def ToArray() -> System.Array[T]: ...
    @overload
    def TrimExcess() -> None: ...
    @overload
    def TryPeek() -> (bool, T): ...
    @overload
    def TryPop() -> (bool, T): ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class KeyedByTypeCollection(ObjectModel.KeyedCollection):
    """    KeyedByTypeCollection[TItem]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: IEnumerable): ...
    @overload
    def Find() -> T: ...
    @overload
    def FindAll() -> ObjectModel.Collection: ...
    @overload
    def Remove() -> T: ...
    @overload
    def RemoveAll() -> ObjectModel.Collection: ...

class SynchronizedCollection(object):
    """    SynchronizedCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, syncRoot: object): ...
    @overload
    def __init__(self, syncRoot: object, list_: IEnumerable): ...
    @overload
    def __init__(self, syncRoot: object, list_: System.Array[T]): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class SynchronizedKeyedCollection(SynchronizedCollection):
    """    SynchronizedKeyedCollection[K, T]
    """
    @overload
    def Contains(self, key: K) -> bool: ...
    @property
    def Item(self) -> T: ...
    @overload
    def Remove(self, key: K) -> bool: ...

class SynchronizedReadOnlyCollection(object):
    """    SynchronizedReadOnlyCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, syncRoot: object): ...
    @overload
    def __init__(self, syncRoot: object, list_: IEnumerable): ...
    @overload
    def __init__(self, syncRoot: object, list_: System.Array[T]): ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> IEnumerator: ...
    @overload
    def IndexOf(self, value: T) -> int: ...

# endregion
