"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BitVector32", "Section", "HybridDictionary", "IOrderedDictionary", "ListDictionary", "DictionaryNode", "NameObjectCollectionBase", "KeysCollection", "NameValueCollection", "OrderedDictionary", "StringCollection", "StringEnumerator", "StringDictionary"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["INotifyCollectionChanged", "NotifyCollectionChangedAction", "NotifyCollectionChangedEventArgs", "NotifyCollectionChangedEventHandler"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["CollectionsUtil"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: System.Collections.NonGeneric, Version=7.0.0.0

class CollectionsUtil(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def CreateCaseInsensitiveHashtable() -> Collections.Hashtable: ...
    @overload
    @staticmethod
    def CreateCaseInsensitiveHashtable(capacity: int) -> Collections.Hashtable: ...
    @overload
    @staticmethod
    def CreateCaseInsensitiveHashtable(d: Collections.IDictionary) -> Collections.Hashtable: ...
    @overload
    @staticmethod
    def CreateCaseInsensitiveSortedList() -> Collections.SortedList: ...

# endregion

# region: System.ObjectModel, Version=7.0.0.0

class INotifyCollectionChanged:
    """    """
    @property
    def CollectionChanged(self): ...

class NotifyCollectionChangedAction(enum.Enum):
    Add = 0
    Remove = 1
    Replace = 2
    Move = 3
    Reset = 4

class NotifyCollectionChangedEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, action: NotifyCollectionChangedAction): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: Collections.IList): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object, index: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: Collections.IList, startingIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItem: object, oldItem: object): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItems: Collections.IList, oldItems: Collections.IList): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItem: object, oldItem: object, index: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItems: Collections.IList, oldItems: Collections.IList, startingIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object, index: int, oldIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: Collections.IList, index: int, oldIndex: int): ...
    @property
    def Action(self) -> NotifyCollectionChangedAction: ...
    @property
    def NewItems(self) -> Collections.IList: ...
    @property
    def NewStartingIndex(self) -> int: ...
    @property
    def OldItems(self) -> Collections.IList: ...
    @property
    def OldStartingIndex(self) -> int: ...

class NotifyCollectionChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: NotifyCollectionChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: NotifyCollectionChangedEventArgs) -> None: ...

# endregion

# region: System.Collections.Specialized, Version=7.0.0.0

class BitVector32(System.ValueType):
    """    """
    @overload
    def __init__(self, data: int): ...
    @overload
    def __init__(self, value: BitVector32): ...
    @overload
    @staticmethod
    def CreateMask() -> int: ...
    @overload
    @staticmethod
    def CreateMask(previous: int) -> int: ...
    @overload
    @staticmethod
    def CreateSection(maxValue: System.Int16) -> Section: ...
    @overload
    @staticmethod
    def CreateSection(maxValue: System.Int16, previous: Section) -> Section: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, other: BitVector32) -> bool: ...
    @property
    def Data(self) -> int: ...
    @property
    def Item(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def ToString(value: BitVector32) -> str: ...

class Section(System.ValueType):
    """    """
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, obj: Section) -> bool: ...
    @property
    def Mask(self) -> System.Int16: ...
    @property
    def Offset(self) -> System.Int16: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def ToString(value: Section) -> str: ...

class HybridDictionary(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: int): ...
    @overload
    def __init__(self, caseInsensitive: bool): ...
    @overload
    def __init__(self, initialSize: int, caseInsensitive: bool): ...
    @overload
    def Add(self, key: object, value: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, key: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def SyncRoot(self) -> object: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def Remove(self, key: object) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class IOrderedDictionary:
    """    """
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def Insert(self, index: int, key: object, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ListDictionary(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: Collections.IComparer): ...
    @overload
    def Add(self, key: object, value: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, key: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def SyncRoot(self) -> object: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def Remove(self, key: object) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DictionaryNode(object):
    """    """
    def __init__(self): ...
    @property
    def key(self) -> object: ...
    @property
    def value(self) -> object: ...
    @property
    def next_(self) -> DictionaryNode: ...

class NameObjectCollectionBase(object):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Keys(self) -> KeysCollection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...

class KeysCollection(object):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> str: ...
    @overload
    def Get(self, index: int) -> str: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class NameValueCollection(NameObjectCollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, col: NameValueCollection): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, equalityComparer: Collections.IEqualityComparer): ...
    @overload
    def __init__(self, hashProvider: Collections.IHashCodeProvider, comparer: Collections.IComparer): ...
    @overload
    def __init__(self, capacity: int, equalityComparer: Collections.IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int, col: NameValueCollection): ...
    @overload
    def __init__(self, capacity: int, hashProvider: Collections.IHashCodeProvider, comparer: Collections.IComparer): ...
    @overload
    def Add(self, c: NameValueCollection) -> None: ...
    @overload
    def Add(self, name: str, value: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def AllKeys(self) -> System.System.Array[str]: ...
    @property
    def Item(self) -> str: ...
    @property
    def Item(self) -> str: ...
    @overload
    def Get(self, name: str) -> str: ...
    @overload
    def Get(self, index: int) -> str: ...
    @overload
    def GetKey(self, index: int) -> str: ...
    @overload
    def GetValues(self, name: str) -> System.System.Array[str]: ...
    @overload
    def GetValues(self, index: int) -> System.System.Array[str]: ...
    @overload
    def HasKeys() -> bool: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Set(self, name: str, value: str) -> None: ...

class OrderedDictionary(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, comparer: Collections.IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int, comparer: Collections.IEqualityComparer): ...
    @overload
    def Add(self, key: object, value: object) -> None: ...
    @overload
    def AsReadOnly() -> OrderedDictionary: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, key: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def Insert(self, index: int, key: object, value: object) -> None: ...
    @overload
    def Remove(self, key: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class StringCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: str) -> int: ...
    @overload
    def AddRange(self, value: System.System.Array[str]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[str], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> StringEnumerator: ...
    @overload
    def IndexOf(self, value: str) -> int: ...
    @overload
    def Insert(self, index: int, value: str) -> None: ...
    @overload
    def Remove(self, value: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class StringEnumerator(object):
    """    """
    @property
    def Current(self) -> str: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class StringDictionary(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def ContainsValue(self, value: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def SyncRoot(self) -> object: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

# endregion
