"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["KeyedCollection", "ObservableCollection", "ReadOnlyObservableCollection"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Collection", "ReadOnlyCollection", "ReadOnlyDictionary", "KeyCollection", "ValueCollection"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Collection(object):
    """    Collection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, list_: Generic.IList): ...
    @overload
    def Add(self, item: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: T) -> int: ...
    @overload
    def Insert(self, index: int, item: T) -> None: ...
    @overload
    def Remove(self, item: T) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ReadOnlyCollection(object):
    """    ReadOnlyCollection[T]
    """
    def __init__(self, list_: Generic.IList): ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, value: T) -> int: ...

class ReadOnlyDictionary(object):
    """    ReadOnlyDictionary[TKey, TValue]
    """
    def __init__(self, dictionary: Generic.IDictionary): ...
    @overload
    def ContainsKey(self, key: TKey) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TValue: ...
    @property
    def Keys(self) -> KeyCollection: ...
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TValue): ...

class KeyCollection(object):
    """    KeyCollection[TKey, TValue]
    """
    @overload
    def CopyTo(self, array: System.Array[TKey], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class ValueCollection(object):
    """    ValueCollection[TKey, TValue]
    """
    @overload
    def CopyTo(self, array: System.Array[TValue], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

# endregion

# region: System.ObjectModel, Version=7.0.0.0

class KeyedCollection(Collection):
    """    KeyedCollection[TKey, TItem]
    """
    @overload
    def Contains(self, key: TKey) -> bool: ...
    @property
    def Comparer(self) -> Generic.IEqualityComparer: ...
    @property
    def Item(self) -> TItem: ...
    @overload
    def Remove(self, key: TKey) -> bool: ...
    @overload
    def TryGetValue(self, key: TKey) -> (bool, TItem): ...

class ObservableCollection(Collection):
    """    ObservableCollection[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: Generic.IEnumerable): ...
    @overload
    def __init__(self, list_: Generic.List): ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @property
    def CollectionChanged(self): ...

class ReadOnlyObservableCollection(ReadOnlyCollection):
    """    ReadOnlyObservableCollection[T]
    """
    def __init__(self, list_: ObservableCollection): ...

# endregion
