"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["KerberosSecurityTokenProvider", "SecurityTokenAuthenticator", "SecurityTokenManager", "SecurityTokenProvider", "SecurityTokenRequirement", "SecurityTokenResolver", "SecurityTokenSerializer", "SecurityTokenVersion", "UserNameSecurityTokenProvider", "WindowsSecurityTokenAuthenticator", "X509CertificateValidator", "X509SecurityTokenAuthenticator", "X509SecurityTokenProvider"]
# endregion

# region: Imports
from System import Net
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.IdentityModel import Tokens
from System.Runtime import CompilerServices
from System.Security import Principal
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class KerberosSecurityTokenProvider(SecurityTokenProvider):
    """    """
    @overload
    def __init__(self, servicePrincipalName: str): ...
    @overload
    def __init__(self, servicePrincipalName: str, tokenImpersonationLevel: Principal.TokenImpersonationLevel): ...
    @overload
    def __init__(self, servicePrincipalName: str, tokenImpersonationLevel: Principal.TokenImpersonationLevel, networkCredential: Net.NetworkCredential): ...
    @property
    def NetworkCredential(self) -> Net.NetworkCredential: ...
    @property
    def ServicePrincipalName(self) -> str: ...
    @property
    def TokenImpersonationLevel(self) -> Principal.TokenImpersonationLevel: ...

class SecurityTokenAuthenticator(object):
    """    """
    @overload
    def CanValidateToken(self, token: Tokens.SecurityToken) -> bool: ...
    @overload
    def ValidateToken(self, token: Tokens.SecurityToken) -> ObjectModel.ReadOnlyCollection: ...

class SecurityTokenManager(object):
    """    """
    @overload
    def CreateSecurityTokenAuthenticator(self, tokenRequirement: SecurityTokenRequirement) -> (SecurityTokenAuthenticator, SecurityTokenResolver): ...
    @overload
    def CreateSecurityTokenProvider(self, tokenRequirement: SecurityTokenRequirement) -> SecurityTokenProvider: ...
    @overload
    def CreateSecurityTokenSerializer(self, version: SecurityTokenVersion) -> SecurityTokenSerializer: ...

class SecurityTokenProvider(object):
    """    """
    @overload
    def BeginCancelToken(self, timeout: System.TimeSpan, token: Tokens.SecurityToken, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginGetToken(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginRenewToken(self, timeout: System.TimeSpan, tokenToBeRenewed: Tokens.SecurityToken, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CancelToken(self, timeout: System.TimeSpan, token: Tokens.SecurityToken) -> None: ...
    @overload
    def CancelTokenAsync(self, timeout: System.TimeSpan, token: Tokens.SecurityToken) -> Tasks.Task: ...
    @overload
    def EndCancelToken(self, result: System.IAsyncResult) -> None: ...
    @overload
    def EndGetToken(self, result: System.IAsyncResult) -> Tokens.SecurityToken: ...
    @overload
    def EndRenewToken(self, result: System.IAsyncResult) -> Tokens.SecurityToken: ...
    @property
    def SupportsTokenCancellation(self) -> bool: ...
    @property
    def SupportsTokenRenewal(self) -> bool: ...
    @overload
    def GetToken(self, timeout: System.TimeSpan) -> Tokens.SecurityToken: ...
    @overload
    def GetTokenAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def RenewToken(self, timeout: System.TimeSpan, tokenToBeRenewed: Tokens.SecurityToken) -> Tokens.SecurityToken: ...
    @overload
    def RenewTokenAsync(self, timeout: System.TimeSpan, tokenToBeRenewed: Tokens.SecurityToken) -> Tasks.Task: ...

class SecurityTokenRequirement(object):
    """    """
    def __init__(self): ...
    @property
    def IsOptionalTokenProperty(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def KeySizeProperty(self) -> str: ...
    @property
    def KeyType(self) -> Tokens.SecurityKeyType: ...
    @property
    def KeyTypeProperty(self) -> str: ...
    @property
    def KeyUsage(self) -> Tokens.SecurityKeyUsage: ...
    @property
    def KeyUsageProperty(self) -> str: ...
    @property
    def PeerAuthenticationMode(self) -> str: ...
    @property
    def Properties(self) -> Generic.IDictionary: ...
    @property
    def RequireCryptographicToken(self) -> bool: ...
    @property
    def RequireCryptographicTokenProperty(self) -> str: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def TokenTypeProperty(self) -> str: ...
    @overload
    def GetProperty(self, propertyName: str) -> TValue: ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @KeyType.setter
    def KeyType(self, value: System.Void): ...
    @KeyUsage.setter
    def KeyUsage(self, value: System.Void): ...
    @RequireCryptographicToken.setter
    def RequireCryptographicToken(self, value: System.Void): ...
    @TokenType.setter
    def TokenType(self, value: System.Void): ...
    @overload
    def TryGetProperty(self, propertyName: str) -> (bool, TValue): ...

class SecurityTokenResolver(object):
    """    """
    @overload
    @staticmethod
    def CreateDefaultSecurityTokenResolver(tokens: ObjectModel.ReadOnlyCollection, canMatchLocalId: bool) -> SecurityTokenResolver: ...
    @overload
    def ResolveSecurityKey(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> Tokens.SecurityKey: ...
    @overload
    def ResolveToken(self, keyIdentifier: Tokens.SecurityKeyIdentifier) -> Tokens.SecurityToken: ...
    @overload
    def ResolveToken(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> Tokens.SecurityToken: ...
    @overload
    def TryResolveSecurityKey(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> (bool, Tokens.SecurityKey): ...
    @overload
    def TryResolveToken(self, keyIdentifier: Tokens.SecurityKeyIdentifier) -> (bool, Tokens.SecurityToken): ...
    @overload
    def TryResolveToken(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> (bool, Tokens.SecurityToken): ...

class SecurityTokenSerializer(object):
    """    """
    @overload
    def CanReadKeyIdentifier(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def CanReadKeyIdentifierClause(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def CanWriteKeyIdentifier(self, keyIdentifier: Tokens.SecurityKeyIdentifier) -> bool: ...
    @overload
    def CanWriteKeyIdentifierClause(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def CanWriteToken(self, token: Tokens.SecurityToken) -> bool: ...
    @overload
    def ReadKeyIdentifier(self, reader: Xml.XmlReader) -> Tokens.SecurityKeyIdentifier: ...
    @overload
    def ReadKeyIdentifierClause(self, reader: Xml.XmlReader) -> Tokens.SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: Xml.XmlReader, tokenResolver: SecurityTokenResolver) -> Tokens.SecurityToken: ...
    @overload
    def WriteKeyIdentifier(self, writer: Xml.XmlWriter, keyIdentifier: Tokens.SecurityKeyIdentifier) -> None: ...
    @overload
    def WriteKeyIdentifierClause(self, writer: Xml.XmlWriter, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> None: ...
    @overload
    def WriteToken(self, writer: Xml.XmlWriter, token: Tokens.SecurityToken) -> None: ...

class SecurityTokenVersion(object):
    """    """
    @overload
    def GetSecuritySpecifications() -> ObjectModel.ReadOnlyCollection: ...

class UserNameSecurityTokenProvider(SecurityTokenProvider):
    """    """
    def __init__(self, userName: str, password: str): ...

class WindowsSecurityTokenAuthenticator(SecurityTokenAuthenticator):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, includeWindowsGroups: bool): ...

class X509CertificateValidator(object):
    """    """
    @overload
    @staticmethod
    def CreateChainTrustValidator(useMachineContext: bool, chainPolicy: X509Certificates.X509ChainPolicy) -> X509CertificateValidator: ...
    @overload
    @staticmethod
    def CreatePeerOrChainTrustValidator(useMachineContext: bool, chainPolicy: X509Certificates.X509ChainPolicy) -> X509CertificateValidator: ...
    @property
    def ChainTrust(self) -> X509CertificateValidator: ...
    @property
    def None_(self) -> X509CertificateValidator: ...
    @property
    def PeerOrChainTrust(self) -> X509CertificateValidator: ...
    @property
    def PeerTrust(self) -> X509CertificateValidator: ...
    @overload
    def Validate(self, certificate: X509Certificates.X509Certificate2) -> None: ...

class X509SecurityTokenAuthenticator(SecurityTokenAuthenticator):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, validator: X509CertificateValidator): ...
    @overload
    def __init__(self, validator: X509CertificateValidator, mapToWindows: bool): ...
    @overload
    def __init__(self, validator: X509CertificateValidator, mapToWindows: bool, includeWindowsGroups: bool): ...

class X509SecurityTokenProvider(SecurityTokenProvider):
    """    """
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def Dispose() -> None: ...

# endregion
