"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AggregateTokenResolver", "AsymmetricSecurityKey", "BinaryKeyIdentifierClause", "EncryptedKeyIdentifierClause", "GenericXmlSecurityKeyIdentifierClause", "GenericXmlSecurityToken", "KerberosRequestorSecurityToken", "LocalIdKeyIdentifierClause", "SamlSerializer", "SecurityAlgorithms", "SecurityKey", "SecurityKeyIdentifier", "SecurityKeyIdentifierClause", "SecurityKeyType", "SecurityKeyUsage", "SecurityToken", "SecurityTokenException", "SecurityTokenTypes", "SecurityTokenValidationException", "SymmetricSecurityKey", "UserNameSecurityToken", "WindowsSecurityToken", "X509AsymmetricSecurityKey", "X509IssuerSerialKeyIdentifierClause", "X509RawDataKeyIdentifierClause", "X509SecurityToken", "X509SubjectKeyIdentifierClause", "X509ThumbprintKeyIdentifierClause"]
# endregion

# region: Imports
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.IdentityModel import Selectors
from System.Runtime import CompilerServices
from System.Security import Cryptography
from System.Security import Principal
from System.Security.Cryptography import X509Certificates
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class AggregateTokenResolver(Selectors.SecurityTokenResolver):
    """    """
    def __init__(self, tokenResolvers: Generic.IEnumerable): ...
    @property
    def TokenResolvers(self) -> ObjectModel.ReadOnlyCollection: ...

class AsymmetricSecurityKey(SecurityKey):
    """    """
    @overload
    def GetAsymmetricAlgorithm(self, algorithm: str, privateKey: bool) -> Cryptography.AsymmetricAlgorithm: ...
    @overload
    def GetHashAlgorithmForSignature(self, algorithm: str) -> Cryptography.HashAlgorithm: ...
    @overload
    def GetSignatureDeformatter(self, algorithm: str) -> Cryptography.AsymmetricSignatureDeformatter: ...
    @overload
    def GetSignatureFormatter(self, algorithm: str) -> Cryptography.AsymmetricSignatureFormatter: ...
    @overload
    def HasPrivateKey() -> bool: ...

class BinaryKeyIdentifierClause(SecurityKeyIdentifierClause):
    """    """
    @overload
    def GetBuffer() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, data: System.System.Array[System.Byte]) -> bool: ...
    @overload
    def Matches(self, data: System.System.Array[System.Byte], offset: int) -> bool: ...

class EncryptedKeyIdentifierClause(BinaryKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, encryptedKey: System.System.Array[System.Byte], encryptionMethod: str): ...
    @overload
    def __init__(self, encryptedKey: System.System.Array[System.Byte], encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier): ...
    @overload
    def __init__(self, encryptedKey: System.System.Array[System.Byte], encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier, carriedKeyName: str): ...
    @overload
    def __init__(self, encryptedKey: System.System.Array[System.Byte], encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier, carriedKeyName: str, derivationNonce: System.System.Array[System.Byte], derivationLength: int): ...
    @property
    def CarriedKeyName(self) -> str: ...
    @property
    def EncryptingKeyIdentifier(self) -> SecurityKeyIdentifier: ...
    @property
    def EncryptionMethod(self) -> str: ...
    @overload
    def GetEncryptedKey() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, encryptedKey: System.System.Array[System.Byte], encryptionMethod: str, carriedKeyName: str) -> bool: ...
    @overload
    def ToString() -> str: ...

class GenericXmlSecurityKeyIdentifierClause(SecurityKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, referenceXml: Xml.XmlElement): ...
    @overload
    def __init__(self, referenceXml: Xml.XmlElement, derivationNonce: System.System.Array[System.Byte], derivationLength: int): ...
    @property
    def ReferenceXml(self) -> Xml.XmlElement: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...

class GenericXmlSecurityToken(SecurityToken):
    """    """
    def __init__(self, tokenXml: Xml.XmlElement, proofToken: SecurityToken, effectiveTime: System.DateTime, expirationTime: System.DateTime, internalTokenReference: SecurityKeyIdentifierClause, externalTokenReference: SecurityKeyIdentifierClause, authorizationPolicies: ObjectModel.ReadOnlyCollection): ...
    @overload
    def CanCreateKeyIdentifierClause() -> bool: ...
    @overload
    def CreateKeyIdentifierClause() -> T: ...
    @property
    def AuthorizationPolicies(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ExternalTokenReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def Id(self) -> str: ...
    @property
    def InternalTokenReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def ProofToken(self) -> SecurityToken: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def TokenXml(self) -> Xml.XmlElement: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...
    @overload
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def ToString() -> str: ...

class KerberosRequestorSecurityToken(SecurityToken):
    """    """
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ServicePrincipalName(self) -> str: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...

class LocalIdKeyIdentifierClause(SecurityKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, localId: str): ...
    @overload
    def __init__(self, localId: str, ownerType: System.Type): ...
    @overload
    def __init__(self, localId: str, derivationNonce: System.System.Array[System.Byte], derivationLength: int, ownerType: System.Type): ...
    @property
    def LocalId(self) -> str: ...
    @property
    def OwnerType(self) -> System.Type: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, localId: str, ownerType: System.Type) -> bool: ...
    @overload
    def ToString() -> str: ...

class SamlSerializer(object):
    """    """
    def __init__(self): ...

class SecurityAlgorithms(object):
    """    """
    @property
    def Aes128Encryption(self) -> str: ...
    @property
    def Aes128KeyWrap(self) -> str: ...
    @property
    def Aes192Encryption(self) -> str: ...
    @property
    def Aes192KeyWrap(self) -> str: ...
    @property
    def Aes256Encryption(self) -> str: ...
    @property
    def Aes256KeyWrap(self) -> str: ...
    @property
    def DesEncryption(self) -> str: ...
    @property
    def DsaSha1Signature(self) -> str: ...
    @property
    def ExclusiveC14n(self) -> str: ...
    @property
    def ExclusiveC14nWithComments(self) -> str: ...
    @property
    def HmacSha1Signature(self) -> str: ...
    @property
    def HmacSha256Signature(self) -> str: ...
    @property
    def Psha1KeyDerivation(self) -> str: ...
    @property
    def Psha1KeyDerivationDec2005(self) -> str: ...
    @property
    def Ripemd160Digest(self) -> str: ...
    @property
    def RsaOaepKeyWrap(self) -> str: ...
    @property
    def RsaSha1Signature(self) -> str: ...
    @property
    def RsaV15KeyWrap(self) -> str: ...
    @property
    def RsaSha256Signature(self) -> str: ...
    @property
    def Sha1Digest(self) -> str: ...
    @property
    def Sha256Digest(self) -> str: ...
    @property
    def Sha512Digest(self) -> str: ...
    @property
    def TripleDesEncryption(self) -> str: ...
    @property
    def TripleDesKeyWrap(self) -> str: ...

class SecurityKey(object):
    """    """
    @overload
    def DecryptKey(self, algorithm: str, keyData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptKey(self, algorithm: str, keyData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def KeySize(self) -> int: ...
    @overload
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    @overload
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    @overload
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...

class SecurityKeyIdentifier(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, clauses: System.Array[SecurityKeyIdentifierClause]): ...
    @overload
    def Add(self, clause: SecurityKeyIdentifierClause) -> None: ...
    @overload
    def CreateKey() -> SecurityKey: ...
    @overload
    def Find() -> TClause: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> SecurityKeyIdentifierClause: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def MakeReadOnly() -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryFind() -> (bool, TClause): ...

class SecurityKeyIdentifierClause(object):
    """    """
    @overload
    def CreateKey() -> SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @property
    def ClauseType(self) -> str: ...
    @property
    def DerivationLength(self) -> int: ...
    @property
    def Id(self) -> str: ...
    @overload
    def GetDerivationNonce() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @Id.setter
    def Id(self, value: System.Void): ...

class SecurityKeyType(enum.Enum):
    SymmetricKey = 0
    AsymmetricKey = 1
    BearerKey = 2

class SecurityKeyUsage(enum.Enum):
    Exchange = 0
    Signature = 1

class SecurityToken(object):
    """    """
    @overload
    def CanCreateKeyIdentifierClause() -> bool: ...
    @overload
    def CreateKeyIdentifierClause() -> T: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...
    @overload
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def ResolveKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> SecurityKey: ...

class SecurityTokenException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SecurityTokenTypes(object):
    """    """
    @property
    def Kerberos(self) -> str: ...
    @property
    def Rsa(self) -> str: ...
    @property
    def Saml(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @property
    def X509Certificate(self) -> str: ...

class SecurityTokenValidationException(SecurityTokenException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SymmetricSecurityKey(SecurityKey):
    """    """
    @overload
    def GenerateDerivedKey(self, algorithm: str, label: System.System.Array[System.Byte], nonce: System.System.Array[System.Byte], derivedKeyLength: int, offset: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetDecryptionTransform(self, algorithm: str, iv: System.System.Array[System.Byte]) -> Cryptography.ICryptoTransform: ...
    @overload
    def GetEncryptionTransform(self, algorithm: str, iv: System.System.Array[System.Byte]) -> Cryptography.ICryptoTransform: ...
    @overload
    def GetIVSize(self, algorithm: str) -> int: ...
    @overload
    def GetKeyedHashAlgorithm(self, algorithm: str) -> Cryptography.KeyedHashAlgorithm: ...
    @overload
    def GetSymmetricAlgorithm(self, algorithm: str) -> Cryptography.SymmetricAlgorithm: ...
    @overload
    def GetSymmetricKey() -> System.System.Array[System.Byte]: ...

class UserNameSecurityToken(SecurityToken):
    """    """
    @overload
    def __init__(self, userName: str, password: str): ...
    @overload
    def __init__(self, userName: str, password: str, id_: str): ...
    @property
    def Id(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def UserName(self) -> str: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...

class WindowsSecurityToken(SecurityToken):
    """    """
    @overload
    def __init__(self, windowsIdentity: Principal.WindowsIdentity): ...
    @overload
    def __init__(self, windowsIdentity: Principal.WindowsIdentity, id_: str): ...
    @overload
    def __init__(self, windowsIdentity: Principal.WindowsIdentity, id_: str, authenticationType: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...
    @property
    def WindowsIdentity(self) -> Principal.WindowsIdentity: ...

class X509AsymmetricSecurityKey(AsymmetricSecurityKey):
    """    """
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def DecryptKey(self, algorithm: str, keyData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def EncryptKey(self, algorithm: str, keyData: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @property
    def KeySize(self) -> int: ...
    @overload
    def GetAsymmetricAlgorithm(self, algorithm: str, privateKey: bool) -> Cryptography.AsymmetricAlgorithm: ...
    @overload
    def GetHashAlgorithmForSignature(self, algorithm: str) -> Cryptography.HashAlgorithm: ...
    @overload
    def GetSignatureDeformatter(self, algorithm: str) -> Cryptography.AsymmetricSignatureDeformatter: ...
    @overload
    def GetSignatureFormatter(self, algorithm: str) -> Cryptography.AsymmetricSignatureFormatter: ...
    @overload
    def HasPrivateKey() -> bool: ...
    @overload
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    @overload
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    @overload
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...

class X509IssuerSerialKeyIdentifierClause(SecurityKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, issuerName: str, issuerSerialNumber: str): ...
    @property
    def IssuerName(self) -> str: ...
    @property
    def IssuerSerialNumber(self) -> str: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, certificate: X509Certificates.X509Certificate2) -> bool: ...
    @overload
    def Matches(self, issuerName: str, issuerSerialNumber: str) -> bool: ...
    @overload
    def ToString() -> str: ...

class X509RawDataKeyIdentifierClause(BinaryKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, certificateRawData: System.System.Array[System.Byte]): ...
    @overload
    def CreateKey() -> SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @overload
    def GetX509RawData() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, certificate: X509Certificates.X509Certificate2) -> bool: ...
    @overload
    def ToString() -> str: ...

class X509SecurityToken(SecurityToken):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2, id_: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate2: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...

class X509SubjectKeyIdentifierClause(BinaryKeyIdentifierClause):
    """    """
    def __init__(self, ski: System.System.Array[System.Byte]): ...
    @overload
    @staticmethod
    def CanCreateFrom(certificate: X509Certificates.X509Certificate2) -> bool: ...
    @overload
    def GetX509SubjectKeyIdentifier() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, certificate: X509Certificates.X509Certificate2) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryCreateFrom(certificate: X509Certificates.X509Certificate2) -> (bool, X509SubjectKeyIdentifierClause): ...

class X509ThumbprintKeyIdentifierClause(BinaryKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, thumbprint: System.System.Array[System.Byte]): ...
    @overload
    def GetX509Thumbprint() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, certificate: X509Certificates.X509Certificate2) -> bool: ...
    @overload
    def ToString() -> str: ...

# endregion
