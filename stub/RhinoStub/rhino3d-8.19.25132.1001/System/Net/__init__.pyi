"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Http"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IWebProxyScript", "WebProxy"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Sockets"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Quic"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["WebHeaderCollection", "HttpResponseHeader", "HttpRequestHeader"]
# endregion

# region: Imports
from System import Collections
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["BindIPEndPoint", "ServicePoint", "ServicePointManager", "SecurityProtocolType"]
# endregion

# region: Imports
from System.Net import Security
from System.Runtime import CompilerServices
from System.Security.Cryptography import X509Certificates
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Dns", "IPHostEntry"]
# endregion

# region: Imports
from System import Threading
from System.Net import Sockets
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Cache", "NetworkInformation", "Security", "Sockets", "AuthenticationSchemes", "CookieVariant", "Cookie", "CookieContainer", "PathList", "CookieCollection", "CookieException", "CredentialCache", "DecompressionMethods", "DnsEndPoint", "EndPoint", "HttpStatusCode", "HttpVersion", "ICredentials", "ICredentialsByHost", "IPAddress", "IPEndPoint", "IWebProxy", "NetworkCredential", "TransportContext", "SocketAddress"]
# endregion

# region: Imports
from System import Collections
from System import Security
from System.Net import Sockets
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security.Authentication import ExtendedProtection
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["NetworkInformation"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Cache", "AuthenticationManager", "Authorization", "FileWebRequest", "FileWebResponse", "HttpContinueDelegate", "HttpWebRequest", "HttpWebResponse", "IAuthenticationModule", "ICredentialPolicy", "IWebRequestCreate", "ProtocolViolationException", "WebException", "WebExceptionStatus", "WebRequest", "WebRequestMethods", "Ftp", "Http", "File", "WebResponse", "FtpStatusCode", "FtpWebRequest", "FtpWebResponse"]
# endregion

# region: Imports
from System import Collections
from System import IO
from System.Collections import Specialized
from System.Net import Cache
from System.Net import Security
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Principal
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["WebClient", "OpenReadCompletedEventHandler", "OpenWriteCompletedEventHandler", "DownloadStringCompletedEventHandler", "DownloadDataCompletedEventHandler", "UploadStringCompletedEventHandler", "UploadDataCompletedEventHandler", "UploadFileCompletedEventHandler", "UploadValuesCompletedEventHandler", "DownloadProgressChangedEventHandler", "UploadProgressChangedEventHandler", "WriteStreamClosedEventHandler", "OpenReadCompletedEventArgs", "OpenWriteCompletedEventArgs", "DownloadStringCompletedEventArgs", "DownloadDataCompletedEventArgs", "UploadStringCompletedEventArgs", "UploadDataCompletedEventArgs", "UploadFileCompletedEventArgs", "UploadValuesCompletedEventArgs", "DownloadProgressChangedEventArgs", "UploadProgressChangedEventArgs", "WriteStreamClosedEventArgs"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Text
from System.Collections import Specialized
from System.Net import Cache
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["WebSockets"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["NetworkInformation"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Mail", "Mime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["WebSockets", "HttpListenerPrefixCollection", "HttpListenerRequest", "AuthenticationSchemeSelector", "HttpListener", "ExtendedProtectionSelector", "HttpListenerBasicIdentity", "HttpListenerContext", "HttpListenerException", "HttpListenerResponse", "HttpListenerTimeoutManager"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Text
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Security import Principal
from System.Security.Authentication import ExtendedProtection
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["WebSockets"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["PeerToPeer", "NetworkInformation", "Mail", "EndpointPermission", "NetworkAccess", "TransportType"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["WebUtility"]
# endregion

# region: Imports
from System import IO
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class WebUtility(object):
    """    """
    @overload
    @staticmethod
    def HtmlDecode(value: str) -> str: ...
    @overload
    @staticmethod
    def HtmlDecode(value: str, output: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def HtmlEncode(value: str) -> str: ...
    @overload
    @staticmethod
    def HtmlEncode(value: str, output: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def UrlDecode(encodedValue: str) -> str: ...
    @overload
    @staticmethod
    def UrlDecodeToBytes(encodedValue: System.System.Array[System.Byte], offset: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def UrlEncode(value: str) -> str: ...
    @overload
    @staticmethod
    def UrlEncodeToBytes(value: System.System.Array[System.Byte], offset: int, count: int) -> System.System.Array[System.Byte]: ...

# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class EndpointPermission(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Hostname(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Transport(self) -> TransportType: ...
    @overload
    def GetHashCode() -> int: ...

class NetworkAccess(enum.Enum):
    Connect = 64
    Accept = 128

class TransportType(enum.Enum):
    Udp = 1
    Connectionless = 1
    ConnectionOriented = 2
    Tcp = 2
    All = 3

# endregion

# region: System.Net.HttpListener, Version=7.0.0.0

class HttpListenerPrefixCollection(object):
    """    """
    @overload
    def Add(self, uriPrefix: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, uriPrefix: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, offset: int) -> None: ...
    @overload
    def CopyTo(self, array: System.System.Array[str], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, uriPrefix: str) -> bool: ...

class HttpListenerRequest(object):
    """    """
    @overload
    def BeginGetClientCertificate(self, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetClientCertificate(self, asyncResult: System.IAsyncResult) -> X509Certificates.X509Certificate2: ...
    @property
    def AcceptTypes(self) -> System.System.Array[str]: ...
    @property
    def ClientCertificateError(self) -> int: ...
    @property
    def ContentEncoding(self) -> Text.Encoding: ...
    @property
    def ContentLength64(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Cookies(self) -> CookieCollection: ...
    @property
    def HasEntityBody(self) -> bool: ...
    @property
    def Headers(self) -> Specialized.NameValueCollection: ...
    @property
    def HttpMethod(self) -> str: ...
    @property
    def InputStream(self) -> IO.Stream: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsSecureConnection(self) -> bool: ...
    @property
    def IsWebSocketRequest(self) -> bool: ...
    @property
    def KeepAlive(self) -> bool: ...
    @property
    def LocalEndPoint(self) -> IPEndPoint: ...
    @property
    def ProtocolVersion(self) -> System.Version: ...
    @property
    def QueryString(self) -> Specialized.NameValueCollection: ...
    @property
    def RawUrl(self) -> str: ...
    @property
    def RemoteEndPoint(self) -> IPEndPoint: ...
    @property
    def RequestTraceIdentifier(self) -> System.Guid: ...
    @property
    def ServiceName(self) -> str: ...
    @property
    def TransportContext(self) -> TransportContext: ...
    @property
    def Url(self) -> System.Uri: ...
    @property
    def UrlReferrer(self) -> System.Uri: ...
    @property
    def UserAgent(self) -> str: ...
    @property
    def UserHostAddress(self) -> str: ...
    @property
    def UserHostName(self) -> str: ...
    @property
    def UserLanguages(self) -> System.System.Array[str]: ...
    @overload
    def GetClientCertificate() -> X509Certificates.X509Certificate2: ...
    @overload
    def GetClientCertificateAsync() -> Tasks.Task: ...

class AuthenticationSchemeSelector(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, httpRequest: HttpListenerRequest, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> AuthenticationSchemes: ...
    @overload
    def Invoke(self, httpRequest: HttpListenerRequest) -> AuthenticationSchemes: ...

class HttpListener(object):
    """    """
    def __init__(self): ...
    @overload
    def Abort() -> None: ...
    @overload
    def BeginGetContext(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def EndGetContext(self, asyncResult: System.IAsyncResult) -> HttpListenerContext: ...
    @property
    def AuthenticationSchemes(self) -> AuthenticationSchemes: ...
    @property
    def AuthenticationSchemeSelectorDelegate(self) -> AuthenticationSchemeSelector: ...
    @property
    def DefaultServiceNames(self) -> ExtendedProtection.ServiceNameCollection: ...
    @property
    def ExtendedProtectionPolicy(self) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @property
    def ExtendedProtectionSelectorDelegate(self) -> ExtendedProtectionSelector: ...
    @property
    def IgnoreWriteExceptions(self) -> bool: ...
    @property
    def IsListening(self) -> bool: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Prefixes(self) -> HttpListenerPrefixCollection: ...
    @property
    def Realm(self) -> str: ...
    @property
    def TimeoutManager(self) -> HttpListenerTimeoutManager: ...
    @property
    def UnsafeConnectionNtlmAuthentication(self) -> bool: ...
    @overload
    def GetContext() -> HttpListenerContext: ...
    @overload
    def GetContextAsync() -> Tasks.Task: ...
    @AuthenticationSchemes.setter
    def AuthenticationSchemes(self, value: System.Void): ...
    @AuthenticationSchemeSelectorDelegate.setter
    def AuthenticationSchemeSelectorDelegate(self, value: System.Void): ...
    @ExtendedProtectionPolicy.setter
    def ExtendedProtectionPolicy(self, value: System.Void): ...
    @ExtendedProtectionSelectorDelegate.setter
    def ExtendedProtectionSelectorDelegate(self, value: System.Void): ...
    @IgnoreWriteExceptions.setter
    def IgnoreWriteExceptions(self, value: System.Void): ...
    @Realm.setter
    def Realm(self, value: System.Void): ...
    @UnsafeConnectionNtlmAuthentication.setter
    def UnsafeConnectionNtlmAuthentication(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Stop() -> None: ...

class ExtendedProtectionSelector(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, request: HttpListenerRequest, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @overload
    def Invoke(self, request: HttpListenerRequest) -> ExtendedProtection.ExtendedProtectionPolicy: ...

class HttpListenerBasicIdentity(Principal.GenericIdentity):
    """    """
    def __init__(self, username: str, password: str): ...
    @property
    def Password(self) -> str: ...

class HttpListenerContext(object):
    """    """
    @overload
    def AcceptWebSocketAsync(self, subProtocol: str) -> Tasks.Task: ...
    @overload
    def AcceptWebSocketAsync(self, subProtocol: str, keepAliveInterval: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def AcceptWebSocketAsync(self, subProtocol: str, receiveBufferSize: int, keepAliveInterval: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def AcceptWebSocketAsync(self, subProtocol: str, receiveBufferSize: int, keepAliveInterval: System.TimeSpan, internalBuffer: System.ArraySegment) -> Tasks.Task: ...
    @property
    def Request(self) -> HttpListenerRequest: ...
    @property
    def Response(self) -> HttpListenerResponse: ...
    @property
    def User(self) -> Principal.IPrincipal: ...

class HttpListenerException(ComponentModel.Win32Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, errorCode: int): ...
    @overload
    def __init__(self, errorCode: int, message: str): ...
    @property
    def ErrorCode(self) -> int: ...

class HttpListenerResponse(object):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def AddHeader(self, name: str, value: str) -> None: ...
    @overload
    def AppendCookie(self, cookie: Cookie) -> None: ...
    @overload
    def AppendHeader(self, name: str, value: str) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, responseEntity: System.System.Array[System.Byte], willBlock: bool) -> None: ...
    @overload
    def CopyFrom(self, templateResponse: HttpListenerResponse) -> None: ...
    @property
    def ContentEncoding(self) -> Text.Encoding: ...
    @property
    def ContentLength64(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Cookies(self) -> CookieCollection: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def KeepAlive(self) -> bool: ...
    @property
    def OutputStream(self) -> IO.Stream: ...
    @property
    def ProtocolVersion(self) -> System.Version: ...
    @property
    def RedirectLocation(self) -> str: ...
    @property
    def SendChunked(self) -> bool: ...
    @property
    def StatusCode(self) -> int: ...
    @property
    def StatusDescription(self) -> str: ...
    @overload
    def Redirect(self, url: str) -> None: ...
    @ContentEncoding.setter
    def ContentEncoding(self, value: System.Void): ...
    @ContentLength64.setter
    def ContentLength64(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @Cookies.setter
    def Cookies(self, value: System.Void): ...
    @Headers.setter
    def Headers(self, value: System.Void): ...
    @KeepAlive.setter
    def KeepAlive(self, value: System.Void): ...
    @ProtocolVersion.setter
    def ProtocolVersion(self, value: System.Void): ...
    @RedirectLocation.setter
    def RedirectLocation(self, value: System.Void): ...
    @SendChunked.setter
    def SendChunked(self, value: System.Void): ...
    @StatusCode.setter
    def StatusCode(self, value: System.Void): ...
    @StatusDescription.setter
    def StatusDescription(self, value: System.Void): ...
    @overload
    def SetCookie(self, cookie: Cookie) -> None: ...

class HttpListenerTimeoutManager(object):
    """    """
    @property
    def DrainEntityBody(self) -> System.TimeSpan: ...
    @property
    def EntityBody(self) -> System.TimeSpan: ...
    @property
    def HeaderWait(self) -> System.TimeSpan: ...
    @property
    def IdleConnection(self) -> System.TimeSpan: ...
    @property
    def MinSendBytesPerSecond(self) -> System.Int64: ...
    @property
    def RequestQueue(self) -> System.TimeSpan: ...
    @DrainEntityBody.setter
    def DrainEntityBody(self, value: System.Void): ...
    @EntityBody.setter
    def EntityBody(self, value: System.Void): ...
    @HeaderWait.setter
    def HeaderWait(self, value: System.Void): ...
    @IdleConnection.setter
    def IdleConnection(self, value: System.Void): ...
    @MinSendBytesPerSecond.setter
    def MinSendBytesPerSecond(self, value: System.Void): ...
    @RequestQueue.setter
    def RequestQueue(self, value: System.Void): ...

# endregion

# region: System.Net.WebClient, Version=7.0.0.0

class WebClient(ComponentModel.Component):
    """    """
    def __init__(self): ...
    @overload
    def CancelAsync() -> None: ...
    @overload
    def DownloadData(self, address: System.Uri) -> System.System.Array[System.Byte]: ...
    @overload
    def DownloadData(self, address: str) -> System.System.Array[System.Byte]: ...
    @overload
    def DownloadDataAsync(self, address: System.Uri) -> None: ...
    @overload
    def DownloadDataAsync(self, address: System.Uri, userToken: object) -> None: ...
    @overload
    def DownloadDataTaskAsync(self, address: System.Uri) -> Tasks.Task: ...
    @overload
    def DownloadDataTaskAsync(self, address: str) -> Tasks.Task: ...
    @overload
    def DownloadFile(self, address: str, fileName: str) -> None: ...
    @overload
    def DownloadFile(self, address: System.Uri, fileName: str) -> None: ...
    @overload
    def DownloadFileAsync(self, address: System.Uri, fileName: str) -> None: ...
    @overload
    def DownloadFileAsync(self, address: System.Uri, fileName: str, userToken: object) -> None: ...
    @overload
    def DownloadFileTaskAsync(self, address: System.Uri, fileName: str) -> Tasks.Task: ...
    @overload
    def DownloadFileTaskAsync(self, address: str, fileName: str) -> Tasks.Task: ...
    @overload
    def DownloadString(self, address: str) -> str: ...
    @overload
    def DownloadString(self, address: System.Uri) -> str: ...
    @overload
    def DownloadStringAsync(self, address: System.Uri) -> None: ...
    @overload
    def DownloadStringAsync(self, address: System.Uri, userToken: object) -> None: ...
    @overload
    def DownloadStringTaskAsync(self, address: System.Uri) -> Tasks.Task: ...
    @overload
    def DownloadStringTaskAsync(self, address: str) -> Tasks.Task: ...
    @property
    def AllowReadStreamBuffering(self) -> bool: ...
    @property
    def AllowWriteStreamBuffering(self) -> bool: ...
    @property
    def BaseAddress(self) -> str: ...
    @property
    def CachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def IsBusy(self) -> bool: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def QueryString(self) -> Specialized.NameValueCollection: ...
    @property
    def ResponseHeaders(self) -> WebHeaderCollection: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @overload
    def OpenRead(self, address: str) -> IO.Stream: ...
    @overload
    def OpenRead(self, address: System.Uri) -> IO.Stream: ...
    @overload
    def OpenReadAsync(self, address: System.Uri) -> None: ...
    @overload
    def OpenReadAsync(self, address: System.Uri, userToken: object) -> None: ...
    @overload
    def OpenReadTaskAsync(self, address: System.Uri) -> Tasks.Task: ...
    @overload
    def OpenReadTaskAsync(self, address: str) -> Tasks.Task: ...
    @overload
    def OpenWrite(self, address: str) -> IO.Stream: ...
    @overload
    def OpenWrite(self, address: System.Uri) -> IO.Stream: ...
    @overload
    def OpenWrite(self, address: str, method: str) -> IO.Stream: ...
    @overload
    def OpenWrite(self, address: System.Uri, method: str) -> IO.Stream: ...
    @overload
    def OpenWriteAsync(self, address: System.Uri) -> None: ...
    @overload
    def OpenWriteAsync(self, address: System.Uri, method: str) -> None: ...
    @overload
    def OpenWriteAsync(self, address: System.Uri, method: str, userToken: object) -> None: ...
    @overload
    def OpenWriteTaskAsync(self, address: str) -> Tasks.Task: ...
    @overload
    def OpenWriteTaskAsync(self, address: System.Uri) -> Tasks.Task: ...
    @overload
    def OpenWriteTaskAsync(self, address: str, method: str) -> Tasks.Task: ...
    @overload
    def OpenWriteTaskAsync(self, address: System.Uri, method: str) -> Tasks.Task: ...
    @AllowReadStreamBuffering.setter
    def AllowReadStreamBuffering(self, value: System.Void): ...
    @AllowWriteStreamBuffering.setter
    def AllowWriteStreamBuffering(self, value: System.Void): ...
    @BaseAddress.setter
    def BaseAddress(self, value: System.Void): ...
    @CachePolicy.setter
    def CachePolicy(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @Headers.setter
    def Headers(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @QueryString.setter
    def QueryString(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @overload
    def UploadData(self, address: str, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadData(self, address: System.Uri, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadData(self, address: System.Uri, method: str, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadData(self, address: str, method: str, data: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadDataAsync(self, address: System.Uri, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def UploadDataAsync(self, address: System.Uri, method: str, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def UploadDataAsync(self, address: System.Uri, method: str, data: System.System.Array[System.Byte], userToken: object) -> None: ...
    @overload
    def UploadDataTaskAsync(self, address: System.Uri, data: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def UploadDataTaskAsync(self, address: str, data: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def UploadDataTaskAsync(self, address: System.Uri, method: str, data: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def UploadDataTaskAsync(self, address: str, method: str, data: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def UploadFile(self, address: str, fileName: str) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadFile(self, address: System.Uri, fileName: str) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadFile(self, address: System.Uri, method: str, fileName: str) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadFile(self, address: str, method: str, fileName: str) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadFileAsync(self, address: System.Uri, fileName: str) -> None: ...
    @overload
    def UploadFileAsync(self, address: System.Uri, method: str, fileName: str) -> None: ...
    @overload
    def UploadFileAsync(self, address: System.Uri, method: str, fileName: str, userToken: object) -> None: ...
    @overload
    def UploadFileTaskAsync(self, address: System.Uri, fileName: str) -> Tasks.Task: ...
    @overload
    def UploadFileTaskAsync(self, address: str, fileName: str) -> Tasks.Task: ...
    @overload
    def UploadFileTaskAsync(self, address: System.Uri, method: str, fileName: str) -> Tasks.Task: ...
    @overload
    def UploadFileTaskAsync(self, address: str, method: str, fileName: str) -> Tasks.Task: ...
    @overload
    def UploadString(self, address: System.Uri, data: str) -> str: ...
    @overload
    def UploadString(self, address: str, data: str) -> str: ...
    @overload
    def UploadString(self, address: System.Uri, method: str, data: str) -> str: ...
    @overload
    def UploadString(self, address: str, method: str, data: str) -> str: ...
    @overload
    def UploadStringAsync(self, address: System.Uri, data: str) -> None: ...
    @overload
    def UploadStringAsync(self, address: System.Uri, method: str, data: str) -> None: ...
    @overload
    def UploadStringAsync(self, address: System.Uri, method: str, data: str, userToken: object) -> None: ...
    @overload
    def UploadStringTaskAsync(self, address: str, data: str) -> Tasks.Task: ...
    @overload
    def UploadStringTaskAsync(self, address: System.Uri, data: str) -> Tasks.Task: ...
    @overload
    def UploadStringTaskAsync(self, address: System.Uri, method: str, data: str) -> Tasks.Task: ...
    @overload
    def UploadStringTaskAsync(self, address: str, method: str, data: str) -> Tasks.Task: ...
    @overload
    def UploadValues(self, address: str, data: Specialized.NameValueCollection) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadValues(self, address: System.Uri, data: Specialized.NameValueCollection) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadValues(self, address: str, method: str, data: Specialized.NameValueCollection) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadValues(self, address: System.Uri, method: str, data: Specialized.NameValueCollection) -> System.System.Array[System.Byte]: ...
    @overload
    def UploadValuesAsync(self, address: System.Uri, data: Specialized.NameValueCollection) -> None: ...
    @overload
    def UploadValuesAsync(self, address: System.Uri, method: str, data: Specialized.NameValueCollection) -> None: ...
    @overload
    def UploadValuesAsync(self, address: System.Uri, method: str, data: Specialized.NameValueCollection, userToken: object) -> None: ...
    @overload
    def UploadValuesTaskAsync(self, address: str, data: Specialized.NameValueCollection) -> Tasks.Task: ...
    @overload
    def UploadValuesTaskAsync(self, address: System.Uri, data: Specialized.NameValueCollection) -> Tasks.Task: ...
    @overload
    def UploadValuesTaskAsync(self, address: System.Uri, method: str, data: Specialized.NameValueCollection) -> Tasks.Task: ...
    @overload
    def UploadValuesTaskAsync(self, address: str, method: str, data: Specialized.NameValueCollection) -> Tasks.Task: ...
    @property
    def DownloadStringCompleted(self): ...
    @property
    def DownloadDataCompleted(self): ...
    @property
    def DownloadFileCompleted(self): ...
    @property
    def UploadStringCompleted(self): ...
    @property
    def UploadDataCompleted(self): ...
    @property
    def UploadFileCompleted(self): ...
    @property
    def UploadValuesCompleted(self): ...
    @property
    def OpenReadCompleted(self): ...
    @property
    def OpenWriteCompleted(self): ...
    @property
    def DownloadProgressChanged(self): ...
    @property
    def UploadProgressChanged(self): ...
    @property
    def WriteStreamClosed(self): ...
    @property
    def Disposed(self): ...

class OpenReadCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: OpenReadCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: OpenReadCompletedEventArgs) -> None: ...

class OpenWriteCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: OpenWriteCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: OpenWriteCompletedEventArgs) -> None: ...

class DownloadStringCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DownloadStringCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DownloadStringCompletedEventArgs) -> None: ...

class DownloadDataCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DownloadDataCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DownloadDataCompletedEventArgs) -> None: ...

class UploadStringCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UploadStringCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UploadStringCompletedEventArgs) -> None: ...

class UploadDataCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UploadDataCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UploadDataCompletedEventArgs) -> None: ...

class UploadFileCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UploadFileCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UploadFileCompletedEventArgs) -> None: ...

class UploadValuesCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UploadValuesCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UploadValuesCompletedEventArgs) -> None: ...

class DownloadProgressChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DownloadProgressChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DownloadProgressChangedEventArgs) -> None: ...

class UploadProgressChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UploadProgressChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UploadProgressChangedEventArgs) -> None: ...

class WriteStreamClosedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: WriteStreamClosedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: WriteStreamClosedEventArgs) -> None: ...

class OpenReadCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> IO.Stream: ...

class OpenWriteCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> IO.Stream: ...

class DownloadStringCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> str: ...

class DownloadDataCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> System.System.Array[System.Byte]: ...

class UploadStringCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> str: ...

class UploadDataCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> System.System.Array[System.Byte]: ...

class UploadFileCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> System.System.Array[System.Byte]: ...

class UploadValuesCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Result(self) -> System.System.Array[System.Byte]: ...

class DownloadProgressChangedEventArgs(ComponentModel.ProgressChangedEventArgs):
    """    """
    @property
    def BytesReceived(self) -> System.Int64: ...
    @property
    def TotalBytesToReceive(self) -> System.Int64: ...

class UploadProgressChangedEventArgs(ComponentModel.ProgressChangedEventArgs):
    """    """
    @property
    def BytesReceived(self) -> System.Int64: ...
    @property
    def BytesSent(self) -> System.Int64: ...
    @property
    def TotalBytesToReceive(self) -> System.Int64: ...
    @property
    def TotalBytesToSend(self) -> System.Int64: ...

class WriteStreamClosedEventArgs(System.EventArgs):
    """    """
    def __init__(self): ...
    @property
    def Error(self) -> System.Exception: ...

# endregion

# region: System.Net.Requests, Version=7.0.0.0

class AuthenticationManager(object):
    """    """
    @property
    def CredentialPolicy(self) -> ICredentialPolicy: ...
    @property
    def CustomTargetNameDictionary(self) -> Specialized.StringDictionary: ...
    @property
    def RegisteredModules(self) -> Collections.IEnumerator: ...
    @overload
    @staticmethod
    def Register(authenticationModule: IAuthenticationModule) -> None: ...
    @CredentialPolicy.setter
    def CredentialPolicy(self, value: System.Void): ...
    @overload
    @staticmethod
    def Unregister(authenticationModule: IAuthenticationModule) -> None: ...
    @overload
    @staticmethod
    def Unregister(authenticationScheme: str) -> None: ...

class Authorization(object):
    """    """
    @overload
    def __init__(self, token: str): ...
    @overload
    def __init__(self, token: str, finished: bool): ...
    @overload
    def __init__(self, token: str, finished: bool, connectionGroupId: str): ...
    @property
    def Complete(self) -> bool: ...
    @property
    def ConnectionGroupId(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def MutuallyAuthenticated(self) -> bool: ...
    @property
    def ProtectionRealm(self) -> System.System.Array[str]: ...
    @MutuallyAuthenticated.setter
    def MutuallyAuthenticated(self, value: System.Void): ...
    @ProtectionRealm.setter
    def ProtectionRealm(self, value: System.Void): ...

class FileWebRequest(WebRequest):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginGetRequestStream(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginGetResponse(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetRequestStream(self, asyncResult: System.IAsyncResult) -> IO.Stream: ...
    @overload
    def EndGetResponse(self, asyncResult: System.IAsyncResult) -> WebResponse: ...
    @property
    def ConnectionGroupName(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def Method(self) -> str: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @overload
    def GetRequestStream() -> IO.Stream: ...
    @overload
    def GetRequestStreamAsync() -> Tasks.Task: ...
    @overload
    def GetResponse() -> WebResponse: ...
    @overload
    def GetResponseAsync() -> Tasks.Task: ...
    @ConnectionGroupName.setter
    def ConnectionGroupName(self, value: System.Void): ...
    @ContentLength.setter
    def ContentLength(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...

class FileWebResponse(WebResponse):
    """    """
    @overload
    def Close() -> None: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def ResponseUri(self) -> System.Uri: ...
    @property
    def SupportsHeaders(self) -> bool: ...
    @overload
    def GetResponseStream() -> IO.Stream: ...

class HttpContinueDelegate(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, StatusCode: int, httpHeaders: WebHeaderCollection, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, StatusCode: int, httpHeaders: WebHeaderCollection) -> None: ...

class HttpWebRequest(WebRequest):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def AddRange(self, range_: System.Int64) -> None: ...
    @overload
    def AddRange(self, range_: int) -> None: ...
    @overload
    def AddRange(self, rangeSpecifier: str, range_: System.Int64) -> None: ...
    @overload
    def AddRange(self, from_: int, to: int) -> None: ...
    @overload
    def AddRange(self, rangeSpecifier: str, range_: int) -> None: ...
    @overload
    def AddRange(self, from_: System.Int64, to: System.Int64) -> None: ...
    @overload
    def AddRange(self, rangeSpecifier: str, from_: System.Int64, to: System.Int64) -> None: ...
    @overload
    def AddRange(self, rangeSpecifier: str, from_: int, to: int) -> None: ...
    @overload
    def BeginGetRequestStream(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginGetResponse(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetRequestStream(self, asyncResult: System.IAsyncResult) -> IO.Stream: ...
    @overload
    def EndGetRequestStream(self, asyncResult: System.IAsyncResult) -> (IO.Stream, TransportContext): ...
    @overload
    def EndGetResponse(self, asyncResult: System.IAsyncResult) -> WebResponse: ...
    @property
    def Accept(self) -> str: ...
    @property
    def Address(self) -> System.Uri: ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def AllowReadStreamBuffering(self) -> bool: ...
    @property
    def AllowWriteStreamBuffering(self) -> bool: ...
    @property
    def AutomaticDecompression(self) -> DecompressionMethods: ...
    @property
    def ClientCertificates(self) -> X509Certificates.X509CertificateCollection: ...
    @property
    def Connection(self) -> str: ...
    @property
    def ConnectionGroupName(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def ContinueDelegate(self) -> HttpContinueDelegate: ...
    @property
    def ContinueTimeout(self) -> int: ...
    @property
    def CookieContainer(self) -> CookieContainer: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def Date(self) -> System.DateTime: ...
    @property
    def DefaultCachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def DefaultMaximumErrorResponseLength(self) -> int: ...
    @property
    def DefaultMaximumResponseHeadersLength(self) -> int: ...
    @property
    def Expect(self) -> str: ...
    @property
    def HaveResponse(self) -> bool: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def Host(self) -> str: ...
    @property
    def IfModifiedSince(self) -> System.DateTime: ...
    @property
    def KeepAlive(self) -> bool: ...
    @property
    def MaximumAutomaticRedirections(self) -> int: ...
    @property
    def MaximumResponseHeadersLength(self) -> int: ...
    @property
    def MediaType(self) -> str: ...
    @property
    def Method(self) -> str: ...
    @property
    def Pipelined(self) -> bool: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def ProtocolVersion(self) -> System.Version: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def ReadWriteTimeout(self) -> int: ...
    @property
    def Referer(self) -> str: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def SendChunked(self) -> bool: ...
    @property
    def ServerCertificateValidationCallback(self) -> Security.RemoteCertificateValidationCallback: ...
    @property
    def ServicePoint(self) -> ServicePoint: ...
    @property
    def SupportsCookieContainer(self) -> bool: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def TransferEncoding(self) -> str: ...
    @property
    def UnsafeAuthenticatedConnectionSharing(self) -> bool: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @property
    def UserAgent(self) -> str: ...
    @overload
    def GetRequestStream() -> IO.Stream: ...
    @overload
    def GetRequestStream() -> (IO.Stream, TransportContext): ...
    @overload
    def GetResponse() -> WebResponse: ...
    @Accept.setter
    def Accept(self, value: System.Void): ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: System.Void): ...
    @AllowReadStreamBuffering.setter
    def AllowReadStreamBuffering(self, value: System.Void): ...
    @AllowWriteStreamBuffering.setter
    def AllowWriteStreamBuffering(self, value: System.Void): ...
    @AutomaticDecompression.setter
    def AutomaticDecompression(self, value: System.Void): ...
    @ClientCertificates.setter
    def ClientCertificates(self, value: System.Void): ...
    @Connection.setter
    def Connection(self, value: System.Void): ...
    @ConnectionGroupName.setter
    def ConnectionGroupName(self, value: System.Void): ...
    @ContentLength.setter
    def ContentLength(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @ContinueDelegate.setter
    def ContinueDelegate(self, value: System.Void): ...
    @ContinueTimeout.setter
    def ContinueTimeout(self, value: System.Void): ...
    @CookieContainer.setter
    def CookieContainer(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @Date.setter
    def Date(self, value: System.Void): ...
    @DefaultCachePolicy.setter
    def DefaultCachePolicy(self, value: System.Void): ...
    @DefaultMaximumErrorResponseLength.setter
    def DefaultMaximumErrorResponseLength(self, value: System.Void): ...
    @DefaultMaximumResponseHeadersLength.setter
    def DefaultMaximumResponseHeadersLength(self, value: System.Void): ...
    @Expect.setter
    def Expect(self, value: System.Void): ...
    @Headers.setter
    def Headers(self, value: System.Void): ...
    @Host.setter
    def Host(self, value: System.Void): ...
    @IfModifiedSince.setter
    def IfModifiedSince(self, value: System.Void): ...
    @KeepAlive.setter
    def KeepAlive(self, value: System.Void): ...
    @MaximumAutomaticRedirections.setter
    def MaximumAutomaticRedirections(self, value: System.Void): ...
    @MaximumResponseHeadersLength.setter
    def MaximumResponseHeadersLength(self, value: System.Void): ...
    @MediaType.setter
    def MediaType(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @Pipelined.setter
    def Pipelined(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @ProtocolVersion.setter
    def ProtocolVersion(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @ReadWriteTimeout.setter
    def ReadWriteTimeout(self, value: System.Void): ...
    @Referer.setter
    def Referer(self, value: System.Void): ...
    @SendChunked.setter
    def SendChunked(self, value: System.Void): ...
    @ServerCertificateValidationCallback.setter
    def ServerCertificateValidationCallback(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @TransferEncoding.setter
    def TransferEncoding(self, value: System.Void): ...
    @UnsafeAuthenticatedConnectionSharing.setter
    def UnsafeAuthenticatedConnectionSharing(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @UserAgent.setter
    def UserAgent(self, value: System.Void): ...

class HttpWebResponse(WebResponse):
    """    """
    def __init__(self): ...
    @overload
    def Close() -> None: ...
    @property
    def CharacterSet(self) -> str: ...
    @property
    def ContentEncoding(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Cookies(self) -> CookieCollection: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def IsMutuallyAuthenticated(self) -> bool: ...
    @property
    def LastModified(self) -> System.DateTime: ...
    @property
    def Method(self) -> str: ...
    @property
    def ProtocolVersion(self) -> System.Version: ...
    @property
    def ResponseUri(self) -> System.Uri: ...
    @property
    def Server(self) -> str: ...
    @property
    def StatusCode(self) -> HttpStatusCode: ...
    @property
    def StatusDescription(self) -> str: ...
    @property
    def SupportsHeaders(self) -> bool: ...
    @overload
    def GetResponseHeader(self, headerName: str) -> str: ...
    @overload
    def GetResponseStream() -> IO.Stream: ...
    @Cookies.setter
    def Cookies(self, value: System.Void): ...

class IAuthenticationModule:
    """    """
    @overload
    def Authenticate(self, challenge: str, request: WebRequest, credentials: ICredentials) -> Authorization: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def CanPreAuthenticate(self) -> bool: ...
    @overload
    def PreAuthenticate(self, request: WebRequest, credentials: ICredentials) -> Authorization: ...

class ICredentialPolicy:
    """    """
    @overload
    def ShouldSendCredential(self, challengeUri: System.Uri, request: WebRequest, credential: NetworkCredential, authenticationModule: IAuthenticationModule) -> bool: ...

class IWebRequestCreate:
    """    """
    @overload
    def Create(self, uri: System.Uri) -> WebRequest: ...

class ProtocolViolationException(System.InvalidOperationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class WebException(System.InvalidOperationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, status: WebExceptionStatus): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, status: WebExceptionStatus, response: WebResponse): ...
    @property
    def Response(self) -> WebResponse: ...
    @property
    def Status(self) -> WebExceptionStatus: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class WebExceptionStatus(enum.Enum):
    Success = 0
    NameResolutionFailure = 1
    ConnectFailure = 2
    ReceiveFailure = 3
    SendFailure = 4
    PipelineFailure = 5
    RequestCanceled = 6
    ProtocolError = 7
    ConnectionClosed = 8
    TrustFailure = 9
    SecureChannelFailure = 10
    ServerProtocolViolation = 11
    KeepAliveFailure = 12
    Pending = 13
    Timeout = 14
    ProxyNameResolutionFailure = 15
    UnknownError = 16
    MessageLengthLimitExceeded = 17
    CacheEntryNotFound = 18
    RequestProhibitedByCachePolicy = 19
    RequestProhibitedByProxy = 20

class WebRequest(System.MarshalByRefObject):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginGetRequestStream(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginGetResponse(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetRequestStream(self, asyncResult: System.IAsyncResult) -> IO.Stream: ...
    @overload
    def EndGetResponse(self, asyncResult: System.IAsyncResult) -> WebResponse: ...
    @property
    def AuthenticationLevel(self) -> Security.AuthenticationLevel: ...
    @property
    def CachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def ConnectionGroupName(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DefaultCachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def DefaultWebProxy(self) -> IWebProxy: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def ImpersonationLevel(self) -> Principal.TokenImpersonationLevel: ...
    @property
    def Method(self) -> str: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @overload
    def GetRequestStream() -> IO.Stream: ...
    @overload
    def GetRequestStreamAsync() -> Tasks.Task: ...
    @overload
    def GetResponse() -> WebResponse: ...
    @overload
    def GetResponseAsync() -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetSystemWebProxy() -> IWebProxy: ...
    @overload
    @staticmethod
    def RegisterPrefix(prefix: str, creator: IWebRequestCreate) -> bool: ...
    @AuthenticationLevel.setter
    def AuthenticationLevel(self, value: System.Void): ...
    @CachePolicy.setter
    def CachePolicy(self, value: System.Void): ...
    @ConnectionGroupName.setter
    def ConnectionGroupName(self, value: System.Void): ...
    @ContentLength.setter
    def ContentLength(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DefaultCachePolicy.setter
    def DefaultCachePolicy(self, value: System.Void): ...
    @DefaultWebProxy.setter
    def DefaultWebProxy(self, value: System.Void): ...
    @Headers.setter
    def Headers(self, value: System.Void): ...
    @ImpersonationLevel.setter
    def ImpersonationLevel(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...

class WebRequestMethods(object):
    """    """

class Ftp(object):
    """    """
    @property
    def DownloadFile(self) -> str: ...
    @property
    def ListDirectory(self) -> str: ...
    @property
    def UploadFile(self) -> str: ...
    @property
    def DeleteFile(self) -> str: ...
    @property
    def AppendFile(self) -> str: ...
    @property
    def GetFileSize(self) -> str: ...
    @property
    def UploadFileWithUniqueName(self) -> str: ...
    @property
    def MakeDirectory(self) -> str: ...
    @property
    def RemoveDirectory(self) -> str: ...
    @property
    def ListDirectoryDetails(self) -> str: ...
    @property
    def GetDateTimestamp(self) -> str: ...
    @property
    def PrintWorkingDirectory(self) -> str: ...
    @property
    def Rename(self) -> str: ...

class Http(object):
    """    """
    @property
    def Get(self) -> str: ...
    @property
    def Connect(self) -> str: ...
    @property
    def Head(self) -> str: ...
    @property
    def Put(self) -> str: ...
    @property
    def Post(self) -> str: ...
    @property
    def MkCol(self) -> str: ...

class File(object):
    """    """
    @property
    def DownloadFile(self) -> str: ...
    @property
    def UploadFile(self) -> str: ...

class WebResponse(System.MarshalByRefObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def IsFromCache(self) -> bool: ...
    @property
    def IsMutuallyAuthenticated(self) -> bool: ...
    @property
    def ResponseUri(self) -> System.Uri: ...
    @property
    def SupportsHeaders(self) -> bool: ...
    @overload
    def GetResponseStream() -> IO.Stream: ...
    @ContentLength.setter
    def ContentLength(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...

class FtpStatusCode(enum.Enum):
    Undefined = 0
    RestartMarker = 110
    ServiceTemporarilyNotAvailable = 120
    DataAlreadyOpen = 125
    OpeningData = 150
    CommandOK = 200
    CommandExtraneous = 202
    DirectoryStatus = 212
    FileStatus = 213
    SystemType = 215
    SendUserCommand = 220
    ClosingControl = 221
    ClosingData = 226
    EnteringPassive = 227
    LoggedInProceed = 230
    ServerWantsSecureSession = 234
    FileActionOK = 250
    PathnameCreated = 257
    SendPasswordCommand = 331
    NeedLoginAccount = 332
    FileCommandPending = 350
    ServiceNotAvailable = 421
    CantOpenData = 425
    ConnectionClosed = 426
    ActionNotTakenFileUnavailableOrBusy = 450
    ActionAbortedLocalProcessingError = 451
    ActionNotTakenInsufficientSpace = 452
    CommandSyntaxError = 500
    ArgumentSyntaxError = 501
    CommandNotImplemented = 502
    BadCommandSequence = 503
    NotLoggedIn = 530
    AccountNeeded = 532
    ActionNotTakenFileUnavailable = 550
    ActionAbortedUnknownPageType = 551
    FileActionAborted = 552
    ActionNotTakenFilenameNotAllowed = 553

class FtpWebRequest(WebRequest):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginGetRequestStream(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginGetResponse(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetRequestStream(self, asyncResult: System.IAsyncResult) -> IO.Stream: ...
    @overload
    def EndGetResponse(self, asyncResult: System.IAsyncResult) -> WebResponse: ...
    @property
    def CachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def ClientCertificates(self) -> X509Certificates.X509CertificateCollection: ...
    @property
    def ConnectionGroupName(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ContentOffset(self) -> System.Int64: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DefaultCachePolicy(self) -> Cache.RequestCachePolicy: ...
    @property
    def EnableSsl(self) -> bool: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def KeepAlive(self) -> bool: ...
    @property
    def Method(self) -> str: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def ReadWriteTimeout(self) -> int: ...
    @property
    def RenameTo(self) -> str: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def ServicePoint(self) -> ServicePoint: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseBinary(self) -> bool: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @property
    def UsePassive(self) -> bool: ...
    @overload
    def GetRequestStream() -> IO.Stream: ...
    @overload
    def GetResponse() -> WebResponse: ...
    @CachePolicy.setter
    def CachePolicy(self, value: System.Void): ...
    @ClientCertificates.setter
    def ClientCertificates(self, value: System.Void): ...
    @ConnectionGroupName.setter
    def ConnectionGroupName(self, value: System.Void): ...
    @ContentLength.setter
    def ContentLength(self, value: System.Void): ...
    @ContentOffset.setter
    def ContentOffset(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DefaultCachePolicy.setter
    def DefaultCachePolicy(self, value: System.Void): ...
    @EnableSsl.setter
    def EnableSsl(self, value: System.Void): ...
    @Headers.setter
    def Headers(self, value: System.Void): ...
    @KeepAlive.setter
    def KeepAlive(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @ReadWriteTimeout.setter
    def ReadWriteTimeout(self, value: System.Void): ...
    @RenameTo.setter
    def RenameTo(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @UseBinary.setter
    def UseBinary(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @UsePassive.setter
    def UsePassive(self, value: System.Void): ...

class FtpWebResponse(WebResponse):
    """    """
    @overload
    def Close() -> None: ...
    @property
    def BannerMessage(self) -> str: ...
    @property
    def ContentLength(self) -> System.Int64: ...
    @property
    def ExitMessage(self) -> str: ...
    @property
    def Headers(self) -> WebHeaderCollection: ...
    @property
    def LastModified(self) -> System.DateTime: ...
    @property
    def ResponseUri(self) -> System.Uri: ...
    @property
    def StatusCode(self) -> FtpStatusCode: ...
    @property
    def StatusDescription(self) -> str: ...
    @property
    def SupportsHeaders(self) -> bool: ...
    @property
    def WelcomeMessage(self) -> str: ...
    @overload
    def GetResponseStream() -> IO.Stream: ...

# endregion

# region: System.Net.Primitives, Version=7.0.0.0

class AuthenticationSchemes(enum.Enum):
    None_ = 0
    Digest = 1
    Negotiate = 2
    Ntlm = 4
    IntegratedWindowsAuthentication = 6
    Basic = 8
    Anonymous = 32768

class CookieVariant(enum.Enum):
    Unknown = 0
    Plain = 1
    Rfc2109 = 2
    Default = 2
    Rfc2965 = 3

class Cookie(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, value: str): ...
    @overload
    def __init__(self, name: str, value: str, path: str): ...
    @overload
    def __init__(self, name: str, value: str, path: str, domain: str): ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @property
    def Comment(self) -> str: ...
    @property
    def CommentUri(self) -> System.Uri: ...
    @property
    def Discard(self) -> bool: ...
    @property
    def Domain(self) -> str: ...
    @property
    def Expired(self) -> bool: ...
    @property
    def Expires(self) -> System.DateTime: ...
    @property
    def HttpOnly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Port(self) -> str: ...
    @property
    def Secure(self) -> bool: ...
    @property
    def TimeStamp(self) -> System.DateTime: ...
    @property
    def Value(self) -> str: ...
    @property
    def Version(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @Comment.setter
    def Comment(self, value: System.Void): ...
    @CommentUri.setter
    def CommentUri(self, value: System.Void): ...
    @Discard.setter
    def Discard(self, value: System.Void): ...
    @Domain.setter
    def Domain(self, value: System.Void): ...
    @Expired.setter
    def Expired(self, value: System.Void): ...
    @Expires.setter
    def Expires(self, value: System.Void): ...
    @HttpOnly.setter
    def HttpOnly(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @Port.setter
    def Port(self, value: System.Void): ...
    @Secure.setter
    def Secure(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class CookieContainer(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, capacity: int, perDomainCapacity: int, maxCookieSize: int): ...
    @property
    def DefaultCookieLimit(self) -> int: ...
    @property
    def DefaultPerDomainCookieLimit(self) -> int: ...
    @property
    def DefaultCookieLengthLimit(self) -> int: ...
    @overload
    def Add(self, cookies: CookieCollection) -> None: ...
    @overload
    def Add(self, cookie: Cookie) -> None: ...
    @overload
    def Add(self, uri: System.Uri, cookie: Cookie) -> None: ...
    @overload
    def Add(self, uri: System.Uri, cookies: CookieCollection) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def MaxCookieSize(self) -> int: ...
    @property
    def PerDomainCapacity(self) -> int: ...
    @overload
    def GetAllCookies() -> CookieCollection: ...
    @overload
    def GetCookieHeader(self, uri: System.Uri) -> str: ...
    @overload
    def GetCookies(self, uri: System.Uri) -> CookieCollection: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @MaxCookieSize.setter
    def MaxCookieSize(self, value: System.Void): ...
    @PerDomainCapacity.setter
    def PerDomainCapacity(self, value: System.Void): ...
    @overload
    def SetCookies(self, uri: System.Uri, cookieHeader: str) -> None: ...

class PathList(object):
    """    """
    def __init__(self): ...

class CookieCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, cookie: Cookie) -> None: ...
    @overload
    def Add(self, cookies: CookieCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, cookie: Cookie) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[Cookie], index: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> Cookie: ...
    @property
    def Item(self) -> Cookie: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, cookie: Cookie) -> bool: ...

class CookieException(System.FormatException):
    """    """
    def __init__(self): ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class CredentialCache(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, uriPrefix: System.Uri, authType: str, cred: NetworkCredential) -> None: ...
    @overload
    def Add(self, host: str, port: int, authenticationType: str, credential: NetworkCredential) -> None: ...
    @property
    def DefaultCredentials(self) -> ICredentials: ...
    @property
    def DefaultNetworkCredentials(self) -> NetworkCredential: ...
    @overload
    def GetCredential(self, uriPrefix: System.Uri, authType: str) -> NetworkCredential: ...
    @overload
    def GetCredential(self, host: str, port: int, authenticationType: str) -> NetworkCredential: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Remove(self, uriPrefix: System.Uri, authType: str) -> None: ...
    @overload
    def Remove(self, host: str, port: int, authenticationType: str) -> None: ...

class DecompressionMethods(enum.Enum):
    None_ = 0
    GZip = 1
    Deflate = 2
    Brotli = 4
    All = -1

class DnsEndPoint(EndPoint):
    """    """
    @overload
    def __init__(self, host: str, port: int): ...
    @overload
    def __init__(self, host: str, port: int, addressFamily: Sockets.AddressFamily): ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @property
    def AddressFamily(self) -> Sockets.AddressFamily: ...
    @property
    def Host(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class EndPoint(object):
    """    """
    @overload
    def Create(self, socketAddress: SocketAddress) -> EndPoint: ...
    @property
    def AddressFamily(self) -> Sockets.AddressFamily: ...
    @overload
    def Serialize() -> SocketAddress: ...

class HttpStatusCode(enum.Enum):
    Continue = 100
    SwitchingProtocols = 101
    Processing = 102
    EarlyHints = 103
    OK = 200
    Created = 201
    Accepted = 202
    NonAuthoritativeInformation = 203
    NoContent = 204
    ResetContent = 205
    PartialContent = 206
    MultiStatus = 207
    AlreadyReported = 208
    IMUsed = 226
    MultipleChoices = 300
    Ambiguous = 300
    MovedPermanently = 301
    Moved = 301
    Found = 302
    Redirect = 302
    SeeOther = 303
    RedirectMethod = 303
    NotModified = 304
    UseProxy = 305
    Unused = 306
    TemporaryRedirect = 307
    RedirectKeepVerb = 307
    PermanentRedirect = 308
    BadRequest = 400
    Unauthorized = 401
    PaymentRequired = 402
    Forbidden = 403
    NotFound = 404
    MethodNotAllowed = 405
    NotAcceptable = 406
    ProxyAuthenticationRequired = 407
    RequestTimeout = 408
    Conflict = 409
    Gone = 410
    LengthRequired = 411
    PreconditionFailed = 412
    RequestEntityTooLarge = 413
    RequestUriTooLong = 414
    UnsupportedMediaType = 415
    RequestedRangeNotSatisfiable = 416
    ExpectationFailed = 417
    MisdirectedRequest = 421
    UnprocessableEntity = 422
    Locked = 423
    FailedDependency = 424
    UpgradeRequired = 426
    PreconditionRequired = 428
    TooManyRequests = 429
    RequestHeaderFieldsTooLarge = 431
    UnavailableForLegalReasons = 451
    InternalServerError = 500
    NotImplemented = 501
    BadGateway = 502
    ServiceUnavailable = 503
    GatewayTimeout = 504
    HttpVersionNotSupported = 505
    VariantAlsoNegotiates = 506
    InsufficientStorage = 507
    LoopDetected = 508
    NotExtended = 510
    NetworkAuthenticationRequired = 511

class HttpVersion(object):
    """    """
    @property
    def Unknown(self) -> System.Version: ...
    @property
    def Version10(self) -> System.Version: ...
    @property
    def Version11(self) -> System.Version: ...
    @property
    def Version20(self) -> System.Version: ...
    @property
    def Version30(self) -> System.Version: ...

class ICredentials:
    """    """
    @overload
    def GetCredential(self, uri: System.Uri, authType: str) -> NetworkCredential: ...

class ICredentialsByHost:
    """    """
    @overload
    def GetCredential(self, host: str, port: int, authenticationType: str) -> NetworkCredential: ...

class IPAddress(object):
    """    """
    @overload
    def __init__(self, newAddress: System.Int64): ...
    @overload
    def __init__(self, address: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, address: System.ReadOnlySpan): ...
    @overload
    def __init__(self, address: System.System.Array[System.Byte], scopeid: System.Int64): ...
    @overload
    def __init__(self, address: System.ReadOnlySpan, scopeid: System.Int64): ...
    @property
    def Any(self) -> IPAddress: ...
    @property
    def Loopback(self) -> IPAddress: ...
    @property
    def Broadcast(self) -> IPAddress: ...
    @property
    def None_(self) -> IPAddress: ...
    @property
    def IPv6Any(self) -> IPAddress: ...
    @property
    def IPv6Loopback(self) -> IPAddress: ...
    @property
    def IPv6None(self) -> IPAddress: ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @property
    def Address(self) -> System.Int64: ...
    @property
    def AddressFamily(self) -> Sockets.AddressFamily: ...
    @property
    def IsIPv4MappedToIPv6(self) -> bool: ...
    @property
    def IsIPv6LinkLocal(self) -> bool: ...
    @property
    def IsIPv6Multicast(self) -> bool: ...
    @property
    def IsIPv6SiteLocal(self) -> bool: ...
    @property
    def IsIPv6Teredo(self) -> bool: ...
    @property
    def IsIPv6UniqueLocal(self) -> bool: ...
    @property
    def ScopeId(self) -> System.Int64: ...
    @overload
    def GetAddressBytes() -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def HostToNetworkOrder(host: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def HostToNetworkOrder(host: int) -> int: ...
    @overload
    @staticmethod
    def HostToNetworkOrder(host: System.Int16) -> System.Int16: ...
    @overload
    @staticmethod
    def IsLoopback(address: IPAddress) -> bool: ...
    @overload
    def MapToIPv4() -> IPAddress: ...
    @overload
    def MapToIPv6() -> IPAddress: ...
    @overload
    @staticmethod
    def NetworkToHostOrder(network: int) -> int: ...
    @overload
    @staticmethod
    def NetworkToHostOrder(network: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def NetworkToHostOrder(network: System.Int16) -> System.Int16: ...
    @overload
    @staticmethod
    def Parse(ipSpan: System.ReadOnlySpan) -> IPAddress: ...
    @overload
    @staticmethod
    def Parse(ipString: str) -> IPAddress: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @ScopeId.setter
    def ScopeId(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryFormat(self, destination: System.Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(ipSpan: System.ReadOnlySpan) -> (bool, IPAddress): ...
    @overload
    @staticmethod
    def TryParse(ipString: str) -> (bool, IPAddress): ...
    @overload
    def TryWriteBytes(self, destination: System.Span) -> (bool, int): ...

class IPEndPoint(EndPoint):
    """    """
    @overload
    def __init__(self, address: System.Int64, port: int): ...
    @overload
    def __init__(self, address: IPAddress, port: int): ...
    @property
    def MinPort(self) -> int: ...
    @property
    def MaxPort(self) -> int: ...
    @overload
    def Create(self, socketAddress: SocketAddress) -> EndPoint: ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @property
    def Address(self) -> IPAddress: ...
    @property
    def AddressFamily(self) -> Sockets.AddressFamily: ...
    @property
    def Port(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(s: str) -> IPEndPoint: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan) -> IPEndPoint: ...
    @overload
    def Serialize() -> SocketAddress: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @Port.setter
    def Port(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, IPEndPoint): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan) -> (bool, IPEndPoint): ...

class IWebProxy:
    """    """
    @property
    def Credentials(self) -> ICredentials: ...
    @overload
    def GetProxy(self, destination: System.Uri) -> System.Uri: ...
    @overload
    def IsBypassed(self, host: System.Uri) -> bool: ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...

class NetworkCredential(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, userName: str, password: str): ...
    @overload
    def __init__(self, userName: str, password: Security.SecureString): ...
    @overload
    def __init__(self, userName: str, password: str, domain: str): ...
    @overload
    def __init__(self, userName: str, password: Security.SecureString, domain: str): ...
    @property
    def Domain(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def SecurePassword(self) -> Security.SecureString: ...
    @property
    def UserName(self) -> str: ...
    @overload
    def GetCredential(self, uri: System.Uri, authenticationType: str) -> NetworkCredential: ...
    @overload
    def GetCredential(self, host: str, port: int, authenticationType: str) -> NetworkCredential: ...
    @Domain.setter
    def Domain(self, value: System.Void): ...
    @Password.setter
    def Password(self, value: System.Void): ...
    @SecurePassword.setter
    def SecurePassword(self, value: System.Void): ...
    @UserName.setter
    def UserName(self, value: System.Void): ...

class TransportContext(object):
    """    """
    @overload
    def GetChannelBinding(self, kind: ExtendedProtection.ChannelBindingKind) -> ExtendedProtection.ChannelBinding: ...

class SocketAddress(object):
    """    """
    @overload
    def __init__(self, family: Sockets.AddressFamily): ...
    @overload
    def __init__(self, family: Sockets.AddressFamily, size: int): ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @property
    def Family(self) -> Sockets.AddressFamily: ...
    @property
    def Item(self) -> System.Byte: ...
    @property
    def Size(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

# endregion

# region: System.Net.NameResolution, Version=7.0.0.0

class Dns(object):
    """    """
    @overload
    @staticmethod
    def BeginGetHostAddresses(hostNameOrAddress: str, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def BeginGetHostEntry(address: IPAddress, requestCallback: System.AsyncCallback, stateObject: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def BeginGetHostEntry(hostNameOrAddress: str, requestCallback: System.AsyncCallback, stateObject: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def EndGetHostAddresses(asyncResult: System.IAsyncResult) -> System.Array[IPAddress]: ...
    @overload
    @staticmethod
    def EndGetHostEntry(asyncResult: System.IAsyncResult) -> IPHostEntry: ...
    @overload
    @staticmethod
    def GetHostAddresses(hostNameOrAddress: str) -> System.Array[IPAddress]: ...
    @overload
    @staticmethod
    def GetHostAddresses(hostNameOrAddress: str, family: Sockets.AddressFamily) -> System.Array[IPAddress]: ...
    @overload
    @staticmethod
    def GetHostAddressesAsync(hostNameOrAddress: str) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostAddressesAsync(hostNameOrAddress: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostAddressesAsync(hostNameOrAddress: str, family: Sockets.AddressFamily, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostEntry(hostNameOrAddress: str) -> IPHostEntry: ...
    @overload
    @staticmethod
    def GetHostEntry(address: IPAddress) -> IPHostEntry: ...
    @overload
    @staticmethod
    def GetHostEntry(hostNameOrAddress: str, family: Sockets.AddressFamily) -> IPHostEntry: ...
    @overload
    @staticmethod
    def GetHostEntryAsync(hostNameOrAddress: str) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostEntryAsync(address: IPAddress) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostEntryAsync(hostNameOrAddress: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostEntryAsync(hostNameOrAddress: str, family: Sockets.AddressFamily, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetHostName() -> str: ...

class IPHostEntry(object):
    """    """
    def __init__(self): ...
    @property
    def AddressList(self) -> System.Array[IPAddress]: ...
    @property
    def Aliases(self) -> System.System.Array[str]: ...
    @property
    def HostName(self) -> str: ...
    @AddressList.setter
    def AddressList(self, value: System.Void): ...
    @Aliases.setter
    def Aliases(self, value: System.Void): ...
    @HostName.setter
    def HostName(self, value: System.Void): ...

# endregion

# region: System.Net.ServicePoint, Version=7.0.0.0

class BindIPEndPoint(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, servicePoint: ServicePoint, remoteEndPoint: IPEndPoint, retryCount: int, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> IPEndPoint: ...
    @overload
    def Invoke(self, servicePoint: ServicePoint, remoteEndPoint: IPEndPoint, retryCount: int) -> IPEndPoint: ...

class ServicePoint(object):
    """    """
    @overload
    def CloseConnectionGroup(self, connectionGroupName: str) -> bool: ...
    @property
    def Address(self) -> System.Uri: ...
    @property
    def BindIPEndPointDelegate(self) -> BindIPEndPoint: ...
    @property
    def Certificate(self) -> X509Certificates.X509Certificate: ...
    @property
    def ClientCertificate(self) -> X509Certificates.X509Certificate: ...
    @property
    def ConnectionLeaseTimeout(self) -> int: ...
    @property
    def ConnectionLimit(self) -> int: ...
    @property
    def ConnectionName(self) -> str: ...
    @property
    def CurrentConnections(self) -> int: ...
    @property
    def Expect100Continue(self) -> bool: ...
    @property
    def IdleSince(self) -> System.DateTime: ...
    @property
    def MaxIdleTime(self) -> int: ...
    @property
    def ProtocolVersion(self) -> System.Version: ...
    @property
    def ReceiveBufferSize(self) -> int: ...
    @property
    def SupportsPipelining(self) -> bool: ...
    @property
    def UseNagleAlgorithm(self) -> bool: ...
    @BindIPEndPointDelegate.setter
    def BindIPEndPointDelegate(self, value: System.Void): ...
    @ConnectionLeaseTimeout.setter
    def ConnectionLeaseTimeout(self, value: System.Void): ...
    @ConnectionLimit.setter
    def ConnectionLimit(self, value: System.Void): ...
    @Expect100Continue.setter
    def Expect100Continue(self, value: System.Void): ...
    @MaxIdleTime.setter
    def MaxIdleTime(self, value: System.Void): ...
    @ReceiveBufferSize.setter
    def ReceiveBufferSize(self, value: System.Void): ...
    @UseNagleAlgorithm.setter
    def UseNagleAlgorithm(self, value: System.Void): ...
    @overload
    def SetTcpKeepAlive(self, enabled: bool, keepAliveTime: int, keepAliveInterval: int) -> None: ...

class ServicePointManager(object):
    """    """
    @property
    def DefaultNonPersistentConnectionLimit(self) -> int: ...
    @property
    def DefaultPersistentConnectionLimit(self) -> int: ...
    @property
    def CheckCertificateRevocationList(self) -> bool: ...
    @property
    def DefaultConnectionLimit(self) -> int: ...
    @property
    def DnsRefreshTimeout(self) -> int: ...
    @property
    def EnableDnsRoundRobin(self) -> bool: ...
    @property
    def EncryptionPolicy(self) -> Security.EncryptionPolicy: ...
    @property
    def Expect100Continue(self) -> bool: ...
    @property
    def MaxServicePointIdleTime(self) -> int: ...
    @property
    def MaxServicePoints(self) -> int: ...
    @property
    def ReusePort(self) -> bool: ...
    @property
    def SecurityProtocol(self) -> SecurityProtocolType: ...
    @property
    def ServerCertificateValidationCallback(self) -> Security.RemoteCertificateValidationCallback: ...
    @property
    def UseNagleAlgorithm(self) -> bool: ...
    @CheckCertificateRevocationList.setter
    def CheckCertificateRevocationList(self, value: System.Void): ...
    @DefaultConnectionLimit.setter
    def DefaultConnectionLimit(self, value: System.Void): ...
    @DnsRefreshTimeout.setter
    def DnsRefreshTimeout(self, value: System.Void): ...
    @EnableDnsRoundRobin.setter
    def EnableDnsRoundRobin(self, value: System.Void): ...
    @Expect100Continue.setter
    def Expect100Continue(self, value: System.Void): ...
    @MaxServicePointIdleTime.setter
    def MaxServicePointIdleTime(self, value: System.Void): ...
    @MaxServicePoints.setter
    def MaxServicePoints(self, value: System.Void): ...
    @ReusePort.setter
    def ReusePort(self, value: System.Void): ...
    @SecurityProtocol.setter
    def SecurityProtocol(self, value: System.Void): ...
    @ServerCertificateValidationCallback.setter
    def ServerCertificateValidationCallback(self, value: System.Void): ...
    @UseNagleAlgorithm.setter
    def UseNagleAlgorithm(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetTcpKeepAlive(enabled: bool, keepAliveTime: int, keepAliveInterval: int) -> None: ...

class SecurityProtocolType(enum.Enum):
    SystemDefault = 0
    Ssl3 = 48
    Tls = 192
    Tls11 = 768
    Tls12 = 3072
    Tls13 = 12288

# endregion

# region: System.Net.WebHeaderCollection, Version=7.0.0.0

class WebHeaderCollection(Specialized.NameValueCollection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, header: str) -> None: ...
    @overload
    def Add(self, header: HttpRequestHeader, value: str) -> None: ...
    @overload
    def Add(self, name: str, value: str) -> None: ...
    @overload
    def Add(self, header: HttpResponseHeader, value: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @property
    def AllKeys(self) -> System.System.Array[str]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> str: ...
    @property
    def Item(self) -> str: ...
    @property
    def Keys(self) -> Specialized.KeysCollection: ...
    @overload
    def Get(self, index: int) -> str: ...
    @overload
    def Get(self, name: str) -> str: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetKey(self, index: int) -> str: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...
    @overload
    def GetValues(self, index: int) -> System.System.Array[str]: ...
    @overload
    def GetValues(self, header: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def IsRestricted(headerName: str) -> bool: ...
    @overload
    @staticmethod
    def IsRestricted(headerName: str, response: bool) -> bool: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, header: HttpResponseHeader) -> None: ...
    @overload
    def Remove(self, header: HttpRequestHeader) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def Set(self, header: HttpResponseHeader, value: str) -> None: ...
    @overload
    def Set(self, header: HttpRequestHeader, value: str) -> None: ...
    @overload
    def Set(self, name: str, value: str) -> None: ...
    @overload
    def ToByteArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ToString() -> str: ...

class HttpResponseHeader(enum.Enum):
    CacheControl = 0
    Connection = 1
    Date = 2
    KeepAlive = 3
    Pragma = 4
    Trailer = 5
    TransferEncoding = 6
    Upgrade = 7
    Via = 8
    Warning = 9
    Allow = 10
    ContentLength = 11
    ContentType = 12
    ContentEncoding = 13
    ContentLanguage = 14
    ContentLocation = 15
    ContentMd5 = 16
    ContentRange = 17
    Expires = 18
    LastModified = 19
    AcceptRanges = 20
    Age = 21
    ETag = 22
    Location = 23
    ProxyAuthenticate = 24
    RetryAfter = 25
    Server = 26
    SetCookie = 27
    Vary = 28
    WwwAuthenticate = 29

class HttpRequestHeader(enum.Enum):
    CacheControl = 0
    Connection = 1
    Date = 2
    KeepAlive = 3
    Pragma = 4
    Trailer = 5
    TransferEncoding = 6
    Upgrade = 7
    Via = 8
    Warning = 9
    Allow = 10
    ContentLength = 11
    ContentType = 12
    ContentEncoding = 13
    ContentLanguage = 14
    ContentLocation = 15
    ContentMd5 = 16
    ContentRange = 17
    Expires = 18
    LastModified = 19
    Accept = 20
    AcceptCharset = 21
    AcceptEncoding = 22
    AcceptLanguage = 23
    Authorization = 24
    Cookie = 25
    Expect = 26
    From = 27
    Host = 28
    IfMatch = 29
    IfModifiedSince = 30
    IfNoneMatch = 31
    IfRange = 32
    IfUnmodifiedSince = 33
    MaxForwards = 34
    ProxyAuthorization = 35
    Referer = 36
    Range = 37
    Te = 38
    Translate = 39
    UserAgent = 40

# endregion

# region: System.Net.WebProxy, Version=7.0.0.0

class IWebProxyScript:
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def Load(self, scriptLocation: System.Uri, script: str, helperType: System.Type) -> bool: ...
    @overload
    def Run(self, url: str, host: str) -> str: ...

class WebProxy(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, Address: System.Uri): ...
    @overload
    def __init__(self, Address: str): ...
    @overload
    def __init__(self, Address: System.Uri, BypassOnLocal: bool): ...
    @overload
    def __init__(self, Host: str, Port: int): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool): ...
    @overload
    def __init__(self, Address: System.Uri, BypassOnLocal: bool, BypassList: System.System.Array[str]): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool, BypassList: System.System.Array[str]): ...
    @overload
    def __init__(self, Address: System.Uri, BypassOnLocal: bool, BypassList: System.System.Array[str], Credentials: ICredentials): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool, BypassList: System.System.Array[str], Credentials: ICredentials): ...
    @property
    def Address(self) -> System.Uri: ...
    @property
    def BypassArrayList(self) -> Collections.ArrayList: ...
    @property
    def BypassList(self) -> System.System.Array[str]: ...
    @property
    def BypassProxyOnLocal(self) -> bool: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @overload
    def GetProxy(self, destination: System.Uri) -> System.Uri: ...
    @overload
    def IsBypassed(self, host: System.Uri) -> bool: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @BypassList.setter
    def BypassList(self, value: System.Void): ...
    @BypassProxyOnLocal.setter
    def BypassProxyOnLocal(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...

# endregion

