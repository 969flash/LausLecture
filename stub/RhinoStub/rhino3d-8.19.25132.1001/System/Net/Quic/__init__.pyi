"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["QuicAbortDirection", "QuicConnection", "QuicConnectionOptions", "QuicClientConnectionOptions", "QuicServerConnectionOptions", "QuicError", "QuicException", "QuicListener", "QuicListenerOptions", "QuicStream", "QuicStreamType"]
# endregion

# region: Imports
from System import IO
from System import Net
from System import Threading
from System.Collections import Generic
from System.Net import Security
from System.Runtime import CompilerServices
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Net.Quic, Version=7.0.0.0

class QuicAbortDirection(enum.Enum):
    Read = 1
    Write = 2
    Both = 3

class QuicConnection(object):
    """    """
    @overload
    def AcceptInboundStreamAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def CloseAsync(self, errorCode: System.Int64, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ConnectAsync(options: QuicClientConnectionOptions, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def LocalEndPoint(self) -> Net.IPEndPoint: ...
    @property
    def NegotiatedApplicationProtocol(self) -> Security.SslApplicationProtocol: ...
    @property
    def RemoteCertificate(self) -> X509Certificates.X509Certificate: ...
    @property
    def RemoteEndPoint(self) -> Net.IPEndPoint: ...
    @overload
    def OpenOutboundStreamAsync(self, type_: QuicStreamType, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ToString() -> str: ...

class QuicConnectionOptions(object):
    """    """
    @property
    def DefaultCloseErrorCode(self) -> System.Int64: ...
    @property
    def DefaultStreamErrorCode(self) -> System.Int64: ...
    @property
    def IdleTimeout(self) -> System.TimeSpan: ...
    @property
    def MaxInboundBidirectionalStreams(self) -> int: ...
    @property
    def MaxInboundUnidirectionalStreams(self) -> int: ...
    @DefaultCloseErrorCode.setter
    def DefaultCloseErrorCode(self, value: System.Void): ...
    @DefaultStreamErrorCode.setter
    def DefaultStreamErrorCode(self, value: System.Void): ...
    @IdleTimeout.setter
    def IdleTimeout(self, value: System.Void): ...
    @MaxInboundBidirectionalStreams.setter
    def MaxInboundBidirectionalStreams(self, value: System.Void): ...
    @MaxInboundUnidirectionalStreams.setter
    def MaxInboundUnidirectionalStreams(self, value: System.Void): ...

class QuicClientConnectionOptions(QuicConnectionOptions):
    """    """
    def __init__(self): ...
    @property
    def ClientAuthenticationOptions(self) -> Security.SslClientAuthenticationOptions: ...
    @property
    def LocalEndPoint(self) -> Net.IPEndPoint: ...
    @property
    def RemoteEndPoint(self) -> Net.EndPoint: ...
    @ClientAuthenticationOptions.setter
    def ClientAuthenticationOptions(self, value: System.Void): ...
    @LocalEndPoint.setter
    def LocalEndPoint(self, value: System.Void): ...
    @RemoteEndPoint.setter
    def RemoteEndPoint(self, value: System.Void): ...

class QuicServerConnectionOptions(QuicConnectionOptions):
    """    """
    def __init__(self): ...
    @property
    def ServerAuthenticationOptions(self) -> Security.SslServerAuthenticationOptions: ...
    @ServerAuthenticationOptions.setter
    def ServerAuthenticationOptions(self, value: System.Void): ...

class QuicError(enum.Enum):
    Success = 0
    InternalError = 1
    ConnectionAborted = 2
    StreamAborted = 3
    AddressInUse = 4
    InvalidAddress = 5
    ConnectionTimeout = 6
    HostUnreachable = 7
    ConnectionRefused = 8
    VersionNegotiationError = 9
    ConnectionIdle = 10
    ProtocolError = 11
    OperationAborted = 12

class QuicException(IO.IOException):
    """    """
    def __init__(self, error: QuicError, applicationErrorCode: System.Nullable, message: str): ...
    @property
    def ApplicationErrorCode(self) -> System.Nullable: ...
    @property
    def QuicError(self) -> QuicError: ...

class QuicListener(object):
    """    """
    @overload
    def AcceptConnectionAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def LocalEndPoint(self) -> Net.IPEndPoint: ...
    @overload
    @staticmethod
    def ListenAsync(options: QuicListenerOptions, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ToString() -> str: ...

class QuicListenerOptions(object):
    """    """
    def __init__(self): ...
    @property
    def ApplicationProtocols(self) -> Generic.List: ...
    @property
    def ConnectionOptionsCallback(self) -> System.Func: ...
    @property
    def ListenBacklog(self) -> int: ...
    @property
    def ListenEndPoint(self) -> Net.IPEndPoint: ...
    @ApplicationProtocols.setter
    def ApplicationProtocols(self, value: System.Void): ...
    @ConnectionOptionsCallback.setter
    def ConnectionOptionsCallback(self, value: System.Void): ...
    @ListenBacklog.setter
    def ListenBacklog(self, value: System.Void): ...
    @ListenEndPoint.setter
    def ListenEndPoint(self, value: System.Void): ...

class QuicStream(IO.Stream):
    """    """
    @overload
    def Abort(self, abortDirection: QuicAbortDirection, errorCode: System.Int64) -> None: ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CompleteWrites() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Id(self) -> System.Int64: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def ReadsClosed(self) -> Tasks.Task: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def Type(self) -> QuicStreamType: ...
    @property
    def WritesClosed(self) -> Tasks.Task: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: System.Void): ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, completeWrites: bool, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class QuicStreamType(enum.Enum):
    Unidirectional = 0
    Bidirectional = 1

# endregion
