"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AlternateView", "AlternateViewCollection", "AttachmentBase", "Attachment", "AttachmentCollection", "LinkedResource", "LinkedResourceCollection", "MailAddress", "MailAddressCollection", "DeliveryNotificationOptions", "MailMessage", "MailPriority", "SmtpException", "SmtpFailedRecipientException", "SmtpFailedRecipientsException", "SmtpStatusCode", "SendCompletedEventHandler", "SmtpDeliveryMethod", "SmtpDeliveryFormat", "SmtpClient"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Net
from System import Text
from System import Threading
from System.Collections import ObjectModel
from System.Collections import Specialized
from System.Net import Mime
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["SmtpAccess"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class SmtpAccess(enum.Enum):
    None_ = 0
    Connect = 1
    ConnectToUnrestrictedPort = 2

# endregion

# region: System.Net.Mail, Version=7.0.0.0

class AlternateView(AttachmentBase):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, contentStream: IO.Stream): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: Mime.ContentType): ...
    @overload
    def __init__(self, contentStream: IO.Stream, mediaType: str): ...
    @overload
    def __init__(self, contentStream: IO.Stream, contentType: Mime.ContentType): ...
    @overload
    @staticmethod
    def CreateAlternateViewFromString(content: str) -> AlternateView: ...
    @overload
    @staticmethod
    def CreateAlternateViewFromString(content: str, contentType: Mime.ContentType) -> AlternateView: ...
    @overload
    @staticmethod
    def CreateAlternateViewFromString(content: str, contentEncoding: Text.Encoding, mediaType: str) -> AlternateView: ...
    @property
    def BaseUri(self) -> System.Uri: ...
    @property
    def LinkedResources(self) -> LinkedResourceCollection: ...
    @BaseUri.setter
    def BaseUri(self, value: System.Void): ...

class AlternateViewCollection(ObjectModel.Collection):
    """    """
    @overload
    def Dispose() -> None: ...

class AttachmentBase(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def ContentId(self) -> str: ...
    @property
    def ContentStream(self) -> IO.Stream: ...
    @property
    def ContentType(self) -> Mime.ContentType: ...
    @property
    def TransferEncoding(self) -> Mime.TransferEncoding: ...
    @ContentId.setter
    def ContentId(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @TransferEncoding.setter
    def TransferEncoding(self, value: System.Void): ...

class Attachment(AttachmentBase):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: Mime.ContentType): ...
    @overload
    def __init__(self, contentStream: IO.Stream, name: str): ...
    @overload
    def __init__(self, contentStream: IO.Stream, contentType: Mime.ContentType): ...
    @overload
    def __init__(self, contentStream: IO.Stream, name: str, mediaType: str): ...
    @overload
    @staticmethod
    def CreateAttachmentFromString(content: str, name: str) -> Attachment: ...
    @overload
    @staticmethod
    def CreateAttachmentFromString(content: str, contentType: Mime.ContentType) -> Attachment: ...
    @overload
    @staticmethod
    def CreateAttachmentFromString(content: str, name: str, contentEncoding: Text.Encoding, mediaType: str) -> Attachment: ...
    @property
    def ContentDisposition(self) -> Mime.ContentDisposition: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameEncoding(self) -> Text.Encoding: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @NameEncoding.setter
    def NameEncoding(self, value: System.Void): ...

class AttachmentCollection(ObjectModel.Collection):
    """    """
    @overload
    def Dispose() -> None: ...

class LinkedResource(AttachmentBase):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, contentStream: IO.Stream): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: Mime.ContentType): ...
    @overload
    def __init__(self, contentStream: IO.Stream, mediaType: str): ...
    @overload
    def __init__(self, contentStream: IO.Stream, contentType: Mime.ContentType): ...
    @overload
    @staticmethod
    def CreateLinkedResourceFromString(content: str) -> LinkedResource: ...
    @overload
    @staticmethod
    def CreateLinkedResourceFromString(content: str, contentType: Mime.ContentType) -> LinkedResource: ...
    @overload
    @staticmethod
    def CreateLinkedResourceFromString(content: str, contentEncoding: Text.Encoding, mediaType: str) -> LinkedResource: ...
    @property
    def ContentLink(self) -> System.Uri: ...
    @ContentLink.setter
    def ContentLink(self, value: System.Void): ...

class LinkedResourceCollection(ObjectModel.Collection):
    """    """
    @overload
    def Dispose() -> None: ...

class MailAddress(object):
    """    """
    @overload
    def __init__(self, address: str): ...
    @overload
    def __init__(self, address: str, displayName: str): ...
    @overload
    def __init__(self, address: str, displayName: str, displayNameEncoding: Text.Encoding): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def User(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryCreate(address: str) -> (bool, MailAddress): ...
    @overload
    @staticmethod
    def TryCreate(address: str, displayName: str) -> (bool, MailAddress): ...
    @overload
    @staticmethod
    def TryCreate(address: str, displayName: str, displayNameEncoding: Text.Encoding) -> (bool, MailAddress): ...

class MailAddressCollection(ObjectModel.Collection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, addresses: str) -> None: ...
    @overload
    def ToString() -> str: ...

class DeliveryNotificationOptions(enum.Enum):
    None_ = 0
    OnSuccess = 1
    OnFailure = 2
    Delay = 4
    Never = 134217728

class MailMessage(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, from_: str, to: str): ...
    @overload
    def __init__(self, from_: MailAddress, to: MailAddress): ...
    @overload
    def __init__(self, from_: str, to: str, subject: str, body: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AlternateViews(self) -> AlternateViewCollection: ...
    @property
    def Attachments(self) -> AttachmentCollection: ...
    @property
    def Bcc(self) -> MailAddressCollection: ...
    @property
    def Body(self) -> str: ...
    @property
    def BodyEncoding(self) -> Text.Encoding: ...
    @property
    def BodyTransferEncoding(self) -> Mime.TransferEncoding: ...
    @property
    def CC(self) -> MailAddressCollection: ...
    @property
    def DeliveryNotificationOptions(self) -> DeliveryNotificationOptions: ...
    @property
    def From(self) -> MailAddress: ...
    @property
    def Headers(self) -> Specialized.NameValueCollection: ...
    @property
    def HeadersEncoding(self) -> Text.Encoding: ...
    @property
    def IsBodyHtml(self) -> bool: ...
    @property
    def Priority(self) -> MailPriority: ...
    @property
    def ReplyTo(self) -> MailAddress: ...
    @property
    def ReplyToList(self) -> MailAddressCollection: ...
    @property
    def Sender(self) -> MailAddress: ...
    @property
    def Subject(self) -> str: ...
    @property
    def SubjectEncoding(self) -> Text.Encoding: ...
    @property
    def To(self) -> MailAddressCollection: ...
    @Body.setter
    def Body(self, value: System.Void): ...
    @BodyEncoding.setter
    def BodyEncoding(self, value: System.Void): ...
    @BodyTransferEncoding.setter
    def BodyTransferEncoding(self, value: System.Void): ...
    @DeliveryNotificationOptions.setter
    def DeliveryNotificationOptions(self, value: System.Void): ...
    @From.setter
    def From(self, value: System.Void): ...
    @HeadersEncoding.setter
    def HeadersEncoding(self, value: System.Void): ...
    @IsBodyHtml.setter
    def IsBodyHtml(self, value: System.Void): ...
    @Priority.setter
    def Priority(self, value: System.Void): ...
    @ReplyTo.setter
    def ReplyTo(self, value: System.Void): ...
    @Sender.setter
    def Sender(self, value: System.Void): ...
    @Subject.setter
    def Subject(self, value: System.Void): ...
    @SubjectEncoding.setter
    def SubjectEncoding(self, value: System.Void): ...

class MailPriority(enum.Enum):
    Normal = 0
    Low = 1
    High = 2

class SmtpException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def StatusCode(self) -> SmtpStatusCode: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: System.Void): ...

class SmtpFailedRecipientException(SmtpException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, failedRecipient: str): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, failedRecipient: str, serverResponse: str): ...
    @overload
    def __init__(self, message: str, failedRecipient: str, innerException: System.Exception): ...
    @property
    def FailedRecipient(self) -> str: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class SmtpFailedRecipientsException(SmtpFailedRecipientException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerExceptions: System.Array[SmtpFailedRecipientException]): ...
    @property
    def InnerExceptions(self) -> System.Array[SmtpFailedRecipientException]: ...
    @overload
    def GetObjectData(self, serializationInfo: Serialization.SerializationInfo, streamingContext: Serialization.StreamingContext) -> None: ...

class SmtpStatusCode(enum.Enum):
    SystemStatus = 211
    HelpMessage = 214
    ServiceReady = 220
    ServiceClosingTransmissionChannel = 221
    Ok = 250
    UserNotLocalWillForward = 251
    CannotVerifyUserWillAttemptDelivery = 252
    StartMailInput = 354
    ServiceNotAvailable = 421
    MailboxBusy = 450
    LocalErrorInProcessing = 451
    InsufficientStorage = 452
    ClientNotPermitted = 454
    CommandUnrecognized = 500
    SyntaxError = 501
    CommandNotImplemented = 502
    BadCommandSequence = 503
    CommandParameterNotImplemented = 504
    MustIssueStartTlsFirst = 530
    MailboxUnavailable = 550
    UserNotLocalTryAlternatePath = 551
    ExceededStorageAllocation = 552
    MailboxNameNotAllowed = 553
    TransactionFailed = 554
    GeneralFailure = -1

class SendCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentModel.AsyncCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentModel.AsyncCompletedEventArgs) -> None: ...

class SmtpDeliveryMethod(enum.Enum):
    Network = 0
    SpecifiedPickupDirectory = 1
    PickupDirectoryFromIis = 2

class SmtpDeliveryFormat(enum.Enum):
    SevenBit = 0
    International = 1

class SmtpClient(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, host: str): ...
    @overload
    def __init__(self, host: str, port: int): ...
    @overload
    def Dispose() -> None: ...
    @property
    def ClientCertificates(self) -> X509Certificates.X509CertificateCollection: ...
    @property
    def Credentials(self) -> Net.ICredentialsByHost: ...
    @property
    def DeliveryFormat(self) -> SmtpDeliveryFormat: ...
    @property
    def DeliveryMethod(self) -> SmtpDeliveryMethod: ...
    @property
    def EnableSsl(self) -> bool: ...
    @property
    def Host(self) -> str: ...
    @property
    def PickupDirectoryLocation(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def ServicePoint(self) -> Net.ServicePoint: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @overload
    def Send(self, message: MailMessage) -> None: ...
    @overload
    def Send(self, from_: str, recipients: str, subject: str, body: str) -> None: ...
    @overload
    def SendAsync(self, message: MailMessage, userToken: object) -> None: ...
    @overload
    def SendAsync(self, from_: str, recipients: str, subject: str, body: str, userToken: object) -> None: ...
    @overload
    def SendAsyncCancel() -> None: ...
    @overload
    def SendMailAsync(self, message: MailMessage) -> Tasks.Task: ...
    @overload
    def SendMailAsync(self, message: MailMessage, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def SendMailAsync(self, from_: str, recipients: str, subject: str, body: str) -> Tasks.Task: ...
    @overload
    def SendMailAsync(self, from_: str, recipients: str, subject: str, body: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DeliveryFormat.setter
    def DeliveryFormat(self, value: System.Void): ...
    @DeliveryMethod.setter
    def DeliveryMethod(self, value: System.Void): ...
    @EnableSsl.setter
    def EnableSsl(self, value: System.Void): ...
    @Host.setter
    def Host(self, value: System.Void): ...
    @PickupDirectoryLocation.setter
    def PickupDirectoryLocation(self, value: System.Void): ...
    @Port.setter
    def Port(self, value: System.Void): ...
    @TargetName.setter
    def TargetName(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @property
    def SendCompleted(self): ...

# endregion
