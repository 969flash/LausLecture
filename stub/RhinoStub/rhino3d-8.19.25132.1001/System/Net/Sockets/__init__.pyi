"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["SocketReceiveFromResult", "SocketReceiveMessageFromResult", "SocketTaskExtensions", "IOControlCode", "IPPacketInformation", "IPProtectionLevel", "LingerOption", "MulticastOption", "IPv6MulticastOption", "NetworkStream", "SafeSocketHandle", "SelectMode", "SendPacketsElement", "Socket", "SocketAsyncEventArgs", "SocketAsyncOperation", "SocketFlags", "SocketInformationOptions", "SocketInformation", "SocketOptionLevel", "SocketOptionName", "SocketShutdown", "TcpClient", "TcpListener", "TransmitFileOptions", "UdpClient", "UdpReceiveResult", "UnixDomainSocketEndPoint", "ProtocolFamily", "ProtocolType", "SocketType"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Collections
from System import IO
from System import Net
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["SocketException", "AddressFamily", "SocketError"]
# endregion

# region: Imports
from System import ComponentModel
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: System.Net.Primitives, Version=7.0.0.0

class SocketException(ComponentModel.Win32Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, errorCode: int): ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def SocketErrorCode(self) -> SocketError: ...

class AddressFamily(enum.Enum):
    Unspecified = 0
    Unix = 1
    InterNetwork = 2
    ImpLink = 3
    Pup = 4
    Chaos = 5
    NS = 6
    Ipx = 6
    Osi = 7
    Iso = 7
    Ecma = 8
    DataKit = 9
    Ccitt = 10
    Sna = 11
    DecNet = 12
    DataLink = 13
    Lat = 14
    HyperChannel = 15
    AppleTalk = 16
    NetBios = 17
    VoiceView = 18
    FireFox = 19
    Banyan = 21
    Atm = 22
    InterNetworkV6 = 23
    Cluster = 24
    Ieee12844 = 25
    Irda = 26
    NetworkDesigners = 28
    Max = 29
    Packet = 65536
    ControllerAreaNetwork = 65537
    Unknown = -1

class SocketError(enum.Enum):
    Success = 0
    OperationAborted = 995
    IOPending = 997
    Interrupted = 10004
    AccessDenied = 10013
    Fault = 10014
    InvalidArgument = 10022
    TooManyOpenSockets = 10024
    WouldBlock = 10035
    InProgress = 10036
    AlreadyInProgress = 10037
    NotSocket = 10038
    DestinationAddressRequired = 10039
    MessageSize = 10040
    ProtocolType = 10041
    ProtocolOption = 10042
    ProtocolNotSupported = 10043
    SocketNotSupported = 10044
    OperationNotSupported = 10045
    ProtocolFamilyNotSupported = 10046
    AddressFamilyNotSupported = 10047
    AddressAlreadyInUse = 10048
    AddressNotAvailable = 10049
    NetworkDown = 10050
    NetworkUnreachable = 10051
    NetworkReset = 10052
    ConnectionAborted = 10053
    ConnectionReset = 10054
    NoBufferSpaceAvailable = 10055
    IsConnected = 10056
    NotConnected = 10057
    Shutdown = 10058
    TimedOut = 10060
    ConnectionRefused = 10061
    HostDown = 10064
    HostUnreachable = 10065
    ProcessLimit = 10067
    SystemNotReady = 10091
    VersionNotSupported = 10092
    NotInitialized = 10093
    Disconnecting = 10101
    TypeNotFound = 10109
    HostNotFound = 11001
    TryAgain = 11002
    NoRecovery = 11003
    NoData = 11004
    SocketError = -1

# endregion

# region: System.Net.Sockets, Version=7.0.0.0

class SocketReceiveFromResult(System.ValueType):
    """    """
    @property
    def ReceivedBytes(self) -> int: ...
    @property
    def RemoteEndPoint(self) -> Net.EndPoint: ...

class SocketReceiveMessageFromResult(System.ValueType):
    """    """
    @property
    def ReceivedBytes(self) -> int: ...
    @property
    def SocketFlags(self) -> SocketFlags: ...
    @property
    def RemoteEndPoint(self) -> Net.EndPoint: ...
    @property
    def PacketInformation(self) -> IPPacketInformation: ...

class SocketTaskExtensions(object):
    """    """
    @overload
    @staticmethod
    def AcceptAsync(socket: Socket) -> Tasks.Task: ...
    @overload
    @staticmethod
    def AcceptAsync(socket: Socket, acceptSocket: Socket) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, remoteEP: Net.EndPoint) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, remoteEP: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, address: Net.IPAddress, port: int) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, addresses: Net.System.Array[Net.IPAddress], port: int) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, host: str, port: int) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, address: Net.IPAddress, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, addresses: Net.System.Array[Net.IPAddress], port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ConnectAsync(socket: Socket, host: str, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ReceiveAsync(socket: Socket, buffers: Generic.IList, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReceiveAsync(socket: Socket, buffer: System.ArraySegment, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReceiveAsync(socket: Socket, buffer: System.Memory, socketFlags: SocketFlags, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ReceiveFromAsync(socket: Socket, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReceiveMessageFromAsync(socket: Socket, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    @staticmethod
    def SendAsync(socket: Socket, buffer: System.ArraySegment, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    @staticmethod
    def SendAsync(socket: Socket, buffers: Generic.IList, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    @staticmethod
    def SendAsync(socket: Socket, buffer: System.ReadOnlyMemory, socketFlags: SocketFlags, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def SendToAsync(socket: Socket, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> Tasks.Task: ...

class IOControlCode(enum.Enum):
    EnableCircularQueuing = 671088642
    Flush = 671088644
    AddressListChange = 671088663
    DataToRead = 1074030207
    OobDataRead = 1074033415
    GetBroadcastAddress = 1207959557
    AddressListQuery = 1207959574
    QueryTargetPnpHandle = 1207959576
    AsyncIO = 2147772029
    NonBlockingIO = 2147772030
    AssociateHandle = 2281701377
    MultipointLoopback = 2281701385
    MulticastScope = 2281701386
    SetQos = 2281701387
    SetGroupQos = 2281701388
    RoutingInterfaceChange = 2281701397
    NamespaceChange = 2281701401
    ReceiveAll = 2550136833
    ReceiveAllMulticast = 2550136834
    ReceiveAllIgmpMulticast = 2550136835
    KeepAliveValues = 2550136836
    AbsorbRouterAlert = 2550136837
    UnicastInterface = 2550136838
    LimitBroadcasts = 2550136839
    BindToInterface = 2550136840
    MulticastInterface = 2550136841
    AddMulticastGroupOnInterface = 2550136842
    DeleteMulticastGroupFromInterface = 2550136843
    GetExtensionFunctionPointer = 3355443206
    GetQos = 3355443207
    GetGroupQos = 3355443208
    TranslateHandle = 3355443213
    RoutingInterfaceQuery = 3355443220
    AddressListSort = 3355443225

class IPPacketInformation(System.ValueType):
    """    """
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @overload
    def Equals(self, other: IPPacketInformation) -> bool: ...
    @property
    def Address(self) -> Net.IPAddress: ...
    @property
    def Interface(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class IPProtectionLevel(enum.Enum):
    Unrestricted = 10
    EdgeRestricted = 20
    Restricted = 30
    Unspecified = -1

class LingerOption(object):
    """    """
    def __init__(self, enable: bool, seconds: int): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def LingerTime(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @LingerTime.setter
    def LingerTime(self, value: System.Void): ...

class MulticastOption(object):
    """    """
    @overload
    def __init__(self, group: Net.IPAddress): ...
    @overload
    def __init__(self, group: Net.IPAddress, interfaceIndex: int): ...
    @overload
    def __init__(self, group: Net.IPAddress, mcint: Net.IPAddress): ...
    @property
    def Group(self) -> Net.IPAddress: ...
    @property
    def InterfaceIndex(self) -> int: ...
    @property
    def LocalAddress(self) -> Net.IPAddress: ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @InterfaceIndex.setter
    def InterfaceIndex(self, value: System.Void): ...
    @LocalAddress.setter
    def LocalAddress(self, value: System.Void): ...

class IPv6MulticastOption(object):
    """    """
    @overload
    def __init__(self, group: Net.IPAddress): ...
    @overload
    def __init__(self, group: Net.IPAddress, ifindex: System.Int64): ...
    @property
    def Group(self) -> Net.IPAddress: ...
    @property
    def InterfaceIndex(self) -> System.Int64: ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @InterfaceIndex.setter
    def InterfaceIndex(self, value: System.Void): ...

class NetworkStream(IO.Stream):
    """    """
    @overload
    def __init__(self, socket: Socket): ...
    @overload
    def __init__(self, socket: Socket, ownsSocket: bool): ...
    @overload
    def __init__(self, socket: Socket, access: IO.FileAccess): ...
    @overload
    def __init__(self, socket: Socket, access: IO.FileAccess, ownsSocket: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def Close(self, timeout: int) -> None: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def DataAvailable(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def Socket(self) -> Socket: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: System.Void): ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class SafeSocketHandle(SafeHandles.SafeHandleMinusOneIsInvalid):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, preexistingHandle: System.IntPtr, ownsHandle: bool): ...
    @property
    def IsInvalid(self) -> bool: ...

class SelectMode(enum.Enum):
    SelectRead = 0
    SelectWrite = 1
    SelectError = 2

class SendPacketsElement(object):
    """    """
    @overload
    def __init__(self, filepath: str): ...
    @overload
    def __init__(self, fileStream: IO.FileStream): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, buffer: System.ReadOnlyMemory): ...
    @overload
    def __init__(self, buffer: System.ReadOnlyMemory, endOfPacket: bool): ...
    @overload
    def __init__(self, filepath: str, offset: int, count: int): ...
    @overload
    def __init__(self, filepath: str, offset: System.Int64, count: int): ...
    @overload
    def __init__(self, fileStream: IO.FileStream, offset: System.Int64, count: int): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], offset: int, count: int): ...
    @overload
    def __init__(self, filepath: str, offset: int, count: int, endOfPacket: bool): ...
    @overload
    def __init__(self, filepath: str, offset: System.Int64, count: int, endOfPacket: bool): ...
    @overload
    def __init__(self, fileStream: IO.FileStream, offset: System.Int64, count: int, endOfPacket: bool): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], offset: int, count: int, endOfPacket: bool): ...
    @property
    def Buffer(self) -> System.System.Array[System.Byte]: ...
    @property
    def Count(self) -> int: ...
    @property
    def EndOfPacket(self) -> bool: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def FileStream(self) -> IO.FileStream: ...
    @property
    def MemoryBuffer(self) -> System.Nullable: ...
    @property
    def Offset(self) -> int: ...
    @property
    def OffsetLong(self) -> System.Int64: ...

class Socket(object):
    """    """
    @overload
    def __init__(self, handle: SafeSocketHandle): ...
    @overload
    def __init__(self, socketInformation: SocketInformation): ...
    @overload
    def __init__(self, socketType: SocketType, protocolType: ProtocolType): ...
    @overload
    def __init__(self, addressFamily: AddressFamily, socketType: SocketType, protocolType: ProtocolType): ...
    @overload
    def Accept() -> Socket: ...
    @overload
    def AcceptAsync() -> Tasks.Task: ...
    @overload
    def AcceptAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def AcceptAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def AcceptAsync(self, acceptSocket: Socket) -> Tasks.Task: ...
    @overload
    def AcceptAsync(self, acceptSocket: Socket, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def BeginAccept(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginAccept(self, receiveSize: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginAccept(self, acceptSocket: Socket, receiveSize: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, remoteEP: Net.EndPoint, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, addresses: Net.System.Array[Net.IPAddress], port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, address: Net.IPAddress, port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, host: str, port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginDisconnect(self, reuseSocket: bool, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceive(self, buffers: Generic.IList, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceive(self, buffers: Generic.IList, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, SocketError): ...
    @overload
    def BeginReceive(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceive(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, SocketError): ...
    @overload
    def BeginReceiveFrom(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, Net.EndPoint): ...
    @overload
    def BeginReceiveMessageFrom(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, Net.EndPoint): ...
    @overload
    def BeginSend(self, buffers: Generic.IList, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, buffers: Generic.IList, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, SocketError): ...
    @overload
    def BeginSend(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, callback: System.AsyncCallback, state: object) -> (System.IAsyncResult, SocketError): ...
    @overload
    def BeginSendFile(self, fileName: str, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSendFile(self, fileName: str, preBuffer: System.System.Array[System.Byte], postBuffer: System.System.Array[System.Byte], flags: TransmitFileOptions, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSendTo(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, remoteEP: Net.EndPoint, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Bind(self, localEP: Net.EndPoint) -> None: ...
    @overload
    @staticmethod
    def CancelConnectAsync(e: SocketAsyncEventArgs) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, timeout: int) -> None: ...
    @overload
    def Connect(self, remoteEP: Net.EndPoint) -> None: ...
    @overload
    def Connect(self, addresses: Net.System.Array[Net.IPAddress], port: int) -> None: ...
    @overload
    def Connect(self, address: Net.IPAddress, port: int) -> None: ...
    @overload
    def Connect(self, host: str, port: int) -> None: ...
    @overload
    def ConnectAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def ConnectAsync(self, remoteEP: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, remoteEP: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ConnectAsync(self, address: Net.IPAddress, port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, addresses: Net.System.Array[Net.IPAddress], port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, host: str, port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, address: Net.IPAddress, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ConnectAsync(self, addresses: Net.System.Array[Net.IPAddress], port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ConnectAsync(socketType: SocketType, protocolType: ProtocolType, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def ConnectAsync(self, host: str, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Disconnect(self, reuseSocket: bool) -> None: ...
    @overload
    def DisconnectAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def DisconnectAsync(self, reuseSocket: bool, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DuplicateAndClose(self, targetProcessId: int) -> SocketInformation: ...
    @overload
    def EndAccept(self, asyncResult: System.IAsyncResult) -> Socket: ...
    @overload
    def EndAccept(self, asyncResult: System.IAsyncResult) -> (Socket, System.System.Array[System.Byte]): ...
    @overload
    def EndAccept(self, asyncResult: System.IAsyncResult) -> (Socket, System.System.Array[System.Byte], int): ...
    @overload
    def EndConnect(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def EndDisconnect(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def EndReceive(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndReceive(self, asyncResult: System.IAsyncResult) -> (int, SocketError): ...
    @overload
    def EndReceiveFrom(self, asyncResult: System.IAsyncResult) -> (int, Net.EndPoint): ...
    @overload
    def EndReceiveMessageFrom(self, asyncResult: System.IAsyncResult) -> (int, SocketFlags, Net.EndPoint, IPPacketInformation): ...
    @overload
    def EndSend(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndSend(self, asyncResult: System.IAsyncResult) -> (int, SocketError): ...
    @overload
    def EndSendFile(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def EndSendTo(self, asyncResult: System.IAsyncResult) -> int: ...
    @property
    def AddressFamily(self) -> AddressFamily: ...
    @property
    def Available(self) -> int: ...
    @property
    def Blocking(self) -> bool: ...
    @property
    def Connected(self) -> bool: ...
    @property
    def DontFragment(self) -> bool: ...
    @property
    def DualMode(self) -> bool: ...
    @property
    def EnableBroadcast(self) -> bool: ...
    @property
    def ExclusiveAddressUse(self) -> bool: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def IsBound(self) -> bool: ...
    @property
    def LingerState(self) -> LingerOption: ...
    @property
    def LocalEndPoint(self) -> Net.EndPoint: ...
    @property
    def MulticastLoopback(self) -> bool: ...
    @property
    def NoDelay(self) -> bool: ...
    @property
    def OSSupportsIPv4(self) -> bool: ...
    @property
    def OSSupportsIPv6(self) -> bool: ...
    @property
    def OSSupportsUnixDomainSockets(self) -> bool: ...
    @property
    def ProtocolType(self) -> ProtocolType: ...
    @property
    def ReceiveBufferSize(self) -> int: ...
    @property
    def ReceiveTimeout(self) -> int: ...
    @property
    def RemoteEndPoint(self) -> Net.EndPoint: ...
    @property
    def SafeHandle(self) -> SafeSocketHandle: ...
    @property
    def SendBufferSize(self) -> int: ...
    @property
    def SendTimeout(self) -> int: ...
    @property
    def SocketType(self) -> SocketType: ...
    @property
    def SupportsIPv4(self) -> bool: ...
    @property
    def SupportsIPv6(self) -> bool: ...
    @property
    def Ttl(self) -> System.Int16: ...
    @property
    def UseOnlyOverlappedIO(self) -> bool: ...
    @overload
    def GetRawSocketOption(self, optionLevel: int, optionName: int, optionValue: System.Span) -> int: ...
    @overload
    def GetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName) -> object: ...
    @overload
    def GetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: System.System.Array[System.Byte]) -> None: ...
    @overload
    def GetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionLength: int) -> System.System.Array[System.Byte]: ...
    @overload
    def IOControl(self, ioControlCode: IOControlCode, optionInValue: System.System.Array[System.Byte], optionOutValue: System.System.Array[System.Byte]) -> int: ...
    @overload
    def IOControl(self, ioControlCode: int, optionInValue: System.System.Array[System.Byte], optionOutValue: System.System.Array[System.Byte]) -> int: ...
    @overload
    def Listen() -> None: ...
    @overload
    def Listen(self, backlog: int) -> None: ...
    @overload
    def Poll(self, microSeconds: int, mode: SelectMode) -> bool: ...
    @overload
    def Poll(self, timeout: System.TimeSpan, mode: SelectMode) -> bool: ...
    @overload
    def Receive(self, buffer: System.System.Array[System.Byte]) -> int: ...
    @overload
    def Receive(self, buffer: System.Span) -> int: ...
    @overload
    def Receive(self, buffers: Generic.IList) -> int: ...
    @overload
    def Receive(self, buffer: System.Span, socketFlags: SocketFlags) -> int: ...
    @overload
    def Receive(self, buffers: Generic.IList, socketFlags: SocketFlags) -> int: ...
    @overload
    def Receive(self, buffer: System.System.Array[System.Byte], socketFlags: SocketFlags) -> int: ...
    @overload
    def Receive(self, buffer: System.System.Array[System.Byte], size: int, socketFlags: SocketFlags) -> int: ...
    @overload
    def Receive(self, buffers: Generic.IList, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def Receive(self, buffer: System.Span, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def Receive(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags) -> int: ...
    @overload
    def Receive(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def ReceiveAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def ReceiveAsync(self, buffer: System.ArraySegment) -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, buffers: Generic.IList) -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, buffers: Generic.IList, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveAsync(self, buffer: System.ArraySegment, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, buffer: System.Memory, socketFlags: SocketFlags, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveFrom(self, buffer: System.Span) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFrom(self, buffer: System.System.Array[System.Byte]) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFrom(self, buffer: System.System.Array[System.Byte], socketFlags: SocketFlags) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFrom(self, buffer: System.Span, socketFlags: SocketFlags) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFrom(self, buffer: System.System.Array[System.Byte], size: int, socketFlags: SocketFlags) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFrom(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags) -> (int, Net.EndPoint): ...
    @overload
    def ReceiveFromAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def ReceiveFromAsync(self, buffer: System.ArraySegment, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def ReceiveFromAsync(self, buffer: System.Memory, remoteEndPoint: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveFromAsync(self, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def ReceiveFromAsync(self, buffer: System.Memory, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveMessageFrom(self, buffer: System.Span) -> (int, SocketFlags, Net.EndPoint, IPPacketInformation): ...
    @overload
    def ReceiveMessageFrom(self, buffer: System.System.Array[System.Byte], offset: int, size: int) -> (int, SocketFlags, Net.EndPoint, IPPacketInformation): ...
    @overload
    def ReceiveMessageFromAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def ReceiveMessageFromAsync(self, buffer: System.ArraySegment, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def ReceiveMessageFromAsync(self, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def ReceiveMessageFromAsync(self, buffer: System.Memory, remoteEndPoint: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveMessageFromAsync(self, buffer: System.Memory, socketFlags: SocketFlags, remoteEndPoint: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def Select(checkRead: Collections.IList, checkWrite: Collections.IList, checkError: Collections.IList, microSeconds: int) -> None: ...
    @overload
    @staticmethod
    def Select(checkRead: Collections.IList, checkWrite: Collections.IList, checkError: Collections.IList, timeout: System.TimeSpan) -> None: ...
    @overload
    def Send(self, buffer: System.ReadOnlySpan) -> int: ...
    @overload
    def Send(self, buffers: Generic.IList) -> int: ...
    @overload
    def Send(self, buffer: System.System.Array[System.Byte]) -> int: ...
    @overload
    def Send(self, buffer: System.System.Array[System.Byte], socketFlags: SocketFlags) -> int: ...
    @overload
    def Send(self, buffers: Generic.IList, socketFlags: SocketFlags) -> int: ...
    @overload
    def Send(self, buffer: System.ReadOnlySpan, socketFlags: SocketFlags) -> int: ...
    @overload
    def Send(self, buffer: System.System.Array[System.Byte], size: int, socketFlags: SocketFlags) -> int: ...
    @overload
    def Send(self, buffers: Generic.IList, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def Send(self, buffer: System.ReadOnlySpan, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def Send(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags) -> int: ...
    @overload
    def Send(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags) -> (int, SocketError): ...
    @overload
    def SendAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def SendAsync(self, buffer: System.ArraySegment) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffers: Generic.IList) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffer: System.ArraySegment, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffers: Generic.IList, socketFlags: SocketFlags) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendAsync(self, buffer: System.ReadOnlyMemory, socketFlags: SocketFlags, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendFile(self, fileName: str) -> None: ...
    @overload
    def SendFile(self, fileName: str, preBuffer: System.ReadOnlySpan, postBuffer: System.ReadOnlySpan, flags: TransmitFileOptions) -> None: ...
    @overload
    def SendFile(self, fileName: str, preBuffer: System.System.Array[System.Byte], postBuffer: System.System.Array[System.Byte], flags: TransmitFileOptions) -> None: ...
    @overload
    def SendFileAsync(self, fileName: str, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendFileAsync(self, fileName: str, preBuffer: System.ReadOnlyMemory, postBuffer: System.ReadOnlyMemory, flags: TransmitFileOptions, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendPacketsAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def SendTo(self, buffer: System.ReadOnlySpan, remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendTo(self, buffer: System.System.Array[System.Byte], remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendTo(self, buffer: System.ReadOnlySpan, socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendTo(self, buffer: System.System.Array[System.Byte], socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendTo(self, buffer: System.System.Array[System.Byte], size: int, socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendTo(self, buffer: System.System.Array[System.Byte], offset: int, size: int, socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> int: ...
    @overload
    def SendToAsync(self, e: SocketAsyncEventArgs) -> bool: ...
    @overload
    def SendToAsync(self, buffer: System.ArraySegment, remoteEP: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def SendToAsync(self, buffer: System.ReadOnlyMemory, remoteEP: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendToAsync(self, buffer: System.ArraySegment, socketFlags: SocketFlags, remoteEP: Net.EndPoint) -> Tasks.Task: ...
    @overload
    def SendToAsync(self, buffer: System.ReadOnlyMemory, socketFlags: SocketFlags, remoteEP: Net.EndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @Blocking.setter
    def Blocking(self, value: System.Void): ...
    @DontFragment.setter
    def DontFragment(self, value: System.Void): ...
    @DualMode.setter
    def DualMode(self, value: System.Void): ...
    @EnableBroadcast.setter
    def EnableBroadcast(self, value: System.Void): ...
    @ExclusiveAddressUse.setter
    def ExclusiveAddressUse(self, value: System.Void): ...
    @LingerState.setter
    def LingerState(self, value: System.Void): ...
    @MulticastLoopback.setter
    def MulticastLoopback(self, value: System.Void): ...
    @NoDelay.setter
    def NoDelay(self, value: System.Void): ...
    @ReceiveBufferSize.setter
    def ReceiveBufferSize(self, value: System.Void): ...
    @ReceiveTimeout.setter
    def ReceiveTimeout(self, value: System.Void): ...
    @SendBufferSize.setter
    def SendBufferSize(self, value: System.Void): ...
    @SendTimeout.setter
    def SendTimeout(self, value: System.Void): ...
    @Ttl.setter
    def Ttl(self, value: System.Void): ...
    @UseOnlyOverlappedIO.setter
    def UseOnlyOverlappedIO(self, value: System.Void): ...
    @overload
    def SetIPProtectionLevel(self, level: IPProtectionLevel) -> None: ...
    @overload
    def SetRawSocketOption(self, optionLevel: int, optionName: int, optionValue: System.ReadOnlySpan) -> None: ...
    @overload
    def SetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: int) -> None: ...
    @overload
    def SetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: object) -> None: ...
    @overload
    def SetSocketOption(self, optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: bool) -> None: ...
    @overload
    def Shutdown(self, how: SocketShutdown) -> None: ...

class SocketAsyncEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, unsafeSuppressExecutionContextFlow: bool): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AcceptSocket(self) -> Socket: ...
    @property
    def Buffer(self) -> System.System.Array[System.Byte]: ...
    @property
    def BufferList(self) -> Generic.IList: ...
    @property
    def BytesTransferred(self) -> int: ...
    @property
    def ConnectByNameError(self) -> System.Exception: ...
    @property
    def ConnectSocket(self) -> Socket: ...
    @property
    def Count(self) -> int: ...
    @property
    def DisconnectReuseSocket(self) -> bool: ...
    @property
    def LastOperation(self) -> SocketAsyncOperation: ...
    @property
    def MemoryBuffer(self) -> System.Memory: ...
    @property
    def Offset(self) -> int: ...
    @property
    def ReceiveMessageFromPacketInfo(self) -> IPPacketInformation: ...
    @property
    def RemoteEndPoint(self) -> Net.EndPoint: ...
    @property
    def SendPacketsElements(self) -> System.Array[SendPacketsElement]: ...
    @property
    def SendPacketsFlags(self) -> TransmitFileOptions: ...
    @property
    def SendPacketsSendSize(self) -> int: ...
    @property
    def SocketError(self) -> SocketError: ...
    @property
    def SocketFlags(self) -> SocketFlags: ...
    @property
    def UserToken(self) -> object: ...
    @AcceptSocket.setter
    def AcceptSocket(self, value: System.Void): ...
    @BufferList.setter
    def BufferList(self, value: System.Void): ...
    @DisconnectReuseSocket.setter
    def DisconnectReuseSocket(self, value: System.Void): ...
    @RemoteEndPoint.setter
    def RemoteEndPoint(self, value: System.Void): ...
    @SendPacketsElements.setter
    def SendPacketsElements(self, value: System.Void): ...
    @SendPacketsFlags.setter
    def SendPacketsFlags(self, value: System.Void): ...
    @SendPacketsSendSize.setter
    def SendPacketsSendSize(self, value: System.Void): ...
    @SocketError.setter
    def SocketError(self, value: System.Void): ...
    @SocketFlags.setter
    def SocketFlags(self, value: System.Void): ...
    @UserToken.setter
    def UserToken(self, value: System.Void): ...
    @overload
    def SetBuffer(self, buffer: System.Memory) -> None: ...
    @overload
    def SetBuffer(self, offset: int, count: int) -> None: ...
    @overload
    def SetBuffer(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @property
    def Completed(self): ...

class SocketAsyncOperation(enum.Enum):
    None_ = 0
    Accept = 1
    Connect = 2
    Disconnect = 3
    Receive = 4
    ReceiveFrom = 5
    ReceiveMessageFrom = 6
    Send = 7
    SendPackets = 8
    SendTo = 9

class SocketFlags(enum.Enum):
    None_ = 0
    OutOfBand = 1
    Peek = 2
    DontRoute = 4
    Truncated = 256
    ControlDataTruncated = 512
    Broadcast = 1024
    Multicast = 2048
    Partial = 32768

class SocketInformationOptions(enum.Enum):
    NonBlocking = 1
    Connected = 2
    Listening = 4
    UseOnlyOverlappedIO = 8

class SocketInformation(System.ValueType):
    """    """
    @property
    def Options(self) -> SocketInformationOptions: ...
    @property
    def ProtocolInformation(self) -> System.System.Array[System.Byte]: ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @ProtocolInformation.setter
    def ProtocolInformation(self, value: System.Void): ...

class SocketOptionLevel(enum.Enum):
    IP = 0
    Tcp = 6
    Udp = 17
    IPv6 = 41
    Socket = 65535

class SocketOptionName(enum.Enum):
    IPOptions = 1
    NoChecksum = 1
    NoDelay = 1
    Debug = 1
    HeaderIncluded = 2
    AcceptConnection = 2
    Expedited = 2
    BsdUrgent = 2
    TypeOfService = 3
    TcpKeepAliveTime = 3
    IpTimeToLive = 4
    ReuseAddress = 4
    KeepAlive = 8
    MulticastInterface = 9
    MulticastTimeToLive = 10
    MulticastLoopback = 11
    AddMembership = 12
    DropMembership = 13
    DontFragment = 14
    AddSourceMembership = 15
    TcpKeepAliveRetryCount = 16
    DontRoute = 16
    DropSourceMembership = 16
    BlockSource = 17
    TcpKeepAliveInterval = 17
    UnblockSource = 18
    PacketInformation = 19
    ChecksumCoverage = 20
    HopLimit = 21
    IPProtectionLevel = 23
    IPv6Only = 27
    Broadcast = 32
    UseLoopback = 64
    Linger = 128
    OutOfBandInline = 256
    SendBuffer = 4097
    ReceiveBuffer = 4098
    SendLowWater = 4099
    ReceiveLowWater = 4100
    SendTimeout = 4101
    ReceiveTimeout = 4102
    Error = 4103
    Type = 4104
    ReuseUnicastPort = 12295
    UpdateAcceptContext = 28683
    UpdateConnectContext = 28688
    MaxConnections = 2147483647
    DontLinger = -129
    ExclusiveAddressUse = -5

class SocketShutdown(enum.Enum):
    Receive = 0
    Send = 1
    Both = 2

class TcpClient(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, family: AddressFamily): ...
    @overload
    def __init__(self, localEP: Net.IPEndPoint): ...
    @overload
    def __init__(self, hostname: str, port: int): ...
    @overload
    def BeginConnect(self, addresses: Net.System.Array[Net.IPAddress], port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, host: str, port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginConnect(self, address: Net.IPAddress, port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def Connect(self, remoteEP: Net.IPEndPoint) -> None: ...
    @overload
    def Connect(self, hostname: str, port: int) -> None: ...
    @overload
    def Connect(self, address: Net.IPAddress, port: int) -> None: ...
    @overload
    def Connect(self, ipAddresses: Net.System.Array[Net.IPAddress], port: int) -> None: ...
    @overload
    def ConnectAsync(self, remoteEP: Net.IPEndPoint) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, remoteEP: Net.IPEndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ConnectAsync(self, address: Net.IPAddress, port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, host: str, port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, addresses: Net.System.Array[Net.IPAddress], port: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, address: Net.IPAddress, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ConnectAsync(self, host: str, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ConnectAsync(self, addresses: Net.System.Array[Net.IPAddress], port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EndConnect(self, asyncResult: System.IAsyncResult) -> None: ...
    @property
    def Available(self) -> int: ...
    @property
    def Client(self) -> Socket: ...
    @property
    def Connected(self) -> bool: ...
    @property
    def ExclusiveAddressUse(self) -> bool: ...
    @property
    def LingerState(self) -> LingerOption: ...
    @property
    def NoDelay(self) -> bool: ...
    @property
    def ReceiveBufferSize(self) -> int: ...
    @property
    def ReceiveTimeout(self) -> int: ...
    @property
    def SendBufferSize(self) -> int: ...
    @property
    def SendTimeout(self) -> int: ...
    @overload
    def GetStream() -> NetworkStream: ...
    @Client.setter
    def Client(self, value: System.Void): ...
    @ExclusiveAddressUse.setter
    def ExclusiveAddressUse(self, value: System.Void): ...
    @LingerState.setter
    def LingerState(self, value: System.Void): ...
    @NoDelay.setter
    def NoDelay(self, value: System.Void): ...
    @ReceiveBufferSize.setter
    def ReceiveBufferSize(self, value: System.Void): ...
    @ReceiveTimeout.setter
    def ReceiveTimeout(self, value: System.Void): ...
    @SendBufferSize.setter
    def SendBufferSize(self, value: System.Void): ...
    @SendTimeout.setter
    def SendTimeout(self, value: System.Void): ...

class TcpListener(object):
    """    """
    @overload
    def __init__(self, localEP: Net.IPEndPoint): ...
    @overload
    def __init__(self, port: int): ...
    @overload
    def __init__(self, localaddr: Net.IPAddress, port: int): ...
    @overload
    def AcceptSocket() -> Socket: ...
    @overload
    def AcceptSocketAsync() -> Tasks.Task: ...
    @overload
    def AcceptSocketAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def AcceptTcpClient() -> TcpClient: ...
    @overload
    def AcceptTcpClientAsync() -> Tasks.Task: ...
    @overload
    def AcceptTcpClientAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def AllowNatTraversal(self, allowed: bool) -> None: ...
    @overload
    def BeginAcceptSocket(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginAcceptTcpClient(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def Create(port: int) -> TcpListener: ...
    @overload
    def EndAcceptSocket(self, asyncResult: System.IAsyncResult) -> Socket: ...
    @overload
    def EndAcceptTcpClient(self, asyncResult: System.IAsyncResult) -> TcpClient: ...
    @property
    def ExclusiveAddressUse(self) -> bool: ...
    @property
    def LocalEndpoint(self) -> Net.EndPoint: ...
    @property
    def Server(self) -> Socket: ...
    @overload
    def Pending() -> bool: ...
    @ExclusiveAddressUse.setter
    def ExclusiveAddressUse(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Start(self, backlog: int) -> None: ...
    @overload
    def Stop() -> None: ...

class TransmitFileOptions(enum.Enum):
    UseDefaultWorkerThread = 0
    Disconnect = 1
    ReuseSocket = 2
    WriteBehind = 4
    UseSystemThread = 16
    UseKernelApc = 32

class UdpClient(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, family: AddressFamily): ...
    @overload
    def __init__(self, port: int): ...
    @overload
    def __init__(self, localEP: Net.IPEndPoint): ...
    @overload
    def __init__(self, port: int, family: AddressFamily): ...
    @overload
    def __init__(self, hostname: str, port: int): ...
    @overload
    def AllowNatTraversal(self, allowed: bool) -> None: ...
    @overload
    def BeginReceive(self, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, datagram: System.System.Array[System.Byte], bytes_: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, datagram: System.System.Array[System.Byte], bytes_: int, endPoint: Net.IPEndPoint, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, datagram: System.System.Array[System.Byte], bytes_: int, hostname: str, port: int, requestCallback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def Connect(self, endPoint: Net.IPEndPoint) -> None: ...
    @overload
    def Connect(self, addr: Net.IPAddress, port: int) -> None: ...
    @overload
    def Connect(self, hostname: str, port: int) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DropMulticastGroup(self, multicastAddr: Net.IPAddress) -> None: ...
    @overload
    def DropMulticastGroup(self, multicastAddr: Net.IPAddress, ifindex: int) -> None: ...
    @overload
    def EndReceive(self, asyncResult: System.IAsyncResult) -> (System.System.Array[System.Byte], Net.IPEndPoint): ...
    @overload
    def EndSend(self, asyncResult: System.IAsyncResult) -> int: ...
    @property
    def Available(self) -> int: ...
    @property
    def Client(self) -> Socket: ...
    @property
    def DontFragment(self) -> bool: ...
    @property
    def EnableBroadcast(self) -> bool: ...
    @property
    def ExclusiveAddressUse(self) -> bool: ...
    @property
    def MulticastLoopback(self) -> bool: ...
    @property
    def Ttl(self) -> System.Int16: ...
    @overload
    def JoinMulticastGroup(self, multicastAddr: Net.IPAddress) -> None: ...
    @overload
    def JoinMulticastGroup(self, ifindex: int, multicastAddr: Net.IPAddress) -> None: ...
    @overload
    def JoinMulticastGroup(self, multicastAddr: Net.IPAddress, localAddress: Net.IPAddress) -> None: ...
    @overload
    def JoinMulticastGroup(self, multicastAddr: Net.IPAddress, timeToLive: int) -> None: ...
    @overload
    def Receive() -> (System.System.Array[System.Byte], Net.IPEndPoint): ...
    @overload
    def ReceiveAsync() -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Send(self, datagram: System.ReadOnlySpan) -> int: ...
    @overload
    def Send(self, dgram: System.System.Array[System.Byte], bytes_: int) -> int: ...
    @overload
    def Send(self, datagram: System.ReadOnlySpan, endPoint: Net.IPEndPoint) -> int: ...
    @overload
    def Send(self, datagram: System.ReadOnlySpan, hostname: str, port: int) -> int: ...
    @overload
    def Send(self, dgram: System.System.Array[System.Byte], bytes_: int, endPoint: Net.IPEndPoint) -> int: ...
    @overload
    def Send(self, dgram: System.System.Array[System.Byte], bytes_: int, hostname: str, port: int) -> int: ...
    @overload
    def SendAsync(self, datagram: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendAsync(self, datagram: System.System.Array[System.Byte], bytes_: int) -> Tasks.Task: ...
    @overload
    def SendAsync(self, datagram: System.System.Array[System.Byte], bytes_: int, endPoint: Net.IPEndPoint) -> Tasks.Task: ...
    @overload
    def SendAsync(self, datagram: System.ReadOnlyMemory, endPoint: Net.IPEndPoint, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendAsync(self, datagram: System.System.Array[System.Byte], bytes_: int, hostname: str, port: int) -> Tasks.Task: ...
    @overload
    def SendAsync(self, datagram: System.ReadOnlyMemory, hostname: str, port: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @Client.setter
    def Client(self, value: System.Void): ...
    @DontFragment.setter
    def DontFragment(self, value: System.Void): ...
    @EnableBroadcast.setter
    def EnableBroadcast(self, value: System.Void): ...
    @ExclusiveAddressUse.setter
    def ExclusiveAddressUse(self, value: System.Void): ...
    @MulticastLoopback.setter
    def MulticastLoopback(self, value: System.Void): ...
    @Ttl.setter
    def Ttl(self, value: System.Void): ...

class UdpReceiveResult(System.ValueType):
    """    """
    def __init__(self, buffer: System.System.Array[System.Byte], remoteEndPoint: Net.IPEndPoint): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: UdpReceiveResult) -> bool: ...
    @property
    def Buffer(self) -> System.System.Array[System.Byte]: ...
    @property
    def RemoteEndPoint(self) -> Net.IPEndPoint: ...
    @overload
    def GetHashCode() -> int: ...

class UnixDomainSocketEndPoint(Net.EndPoint):
    """    """
    def __init__(self, path: str): ...
    @overload
    def Create(self, socketAddress: Net.SocketAddress) -> Net.EndPoint: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddressFamily(self) -> AddressFamily: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Serialize() -> Net.SocketAddress: ...
    @overload
    def ToString() -> str: ...

class ProtocolFamily(enum.Enum):
    Unspecified = 0
    Unix = 1
    InterNetwork = 2
    ImpLink = 3
    Pup = 4
    Chaos = 5
    NS = 6
    Ipx = 6
    Osi = 7
    Iso = 7
    Ecma = 8
    DataKit = 9
    Ccitt = 10
    Sna = 11
    DecNet = 12
    DataLink = 13
    Lat = 14
    HyperChannel = 15
    AppleTalk = 16
    NetBios = 17
    VoiceView = 18
    FireFox = 19
    Banyan = 21
    Atm = 22
    InterNetworkV6 = 23
    Cluster = 24
    Ieee12844 = 25
    Irda = 26
    NetworkDesigners = 28
    Max = 29
    Packet = 65536
    ControllerAreaNetwork = 65537
    Unknown = -1

class ProtocolType(enum.Enum):
    IPv6HopByHopOptions = 0
    IP = 0
    Unspecified = 0
    Icmp = 1
    Igmp = 2
    Ggp = 3
    IPv4 = 4
    Tcp = 6
    Pup = 12
    Udp = 17
    Idp = 22
    IPv6 = 41
    IPv6RoutingHeader = 43
    IPv6FragmentHeader = 44
    IPSecEncapsulatingSecurityPayload = 50
    IPSecAuthenticationHeader = 51
    IcmpV6 = 58
    IPv6NoNextHeader = 59
    IPv6DestinationOptions = 60
    ND = 77
    Raw = 255
    Ipx = 1000
    Spx = 1256
    SpxII = 1257
    Unknown = -1

class SocketType(enum.Enum):
    Stream = 1
    Dgram = 2
    Raw = 3
    Rdm = 4
    Seqpacket = 5
    Unknown = -1

# endregion
