"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IPAddressCollection"]
# endregion

# region: Imports
from System import Net
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["DuplicateAddressDetectionState", "GatewayIPAddressInformation", "GatewayIPAddressInformationCollection", "IcmpV4Statistics", "IcmpV6Statistics", "IPAddressInformation", "IPAddressInformationCollection", "IPGlobalProperties", "IPGlobalStatistics", "IPInterfaceProperties", "IPInterfaceStatistics", "IPv4InterfaceProperties", "IPv4InterfaceStatistics", "IPv6InterfaceProperties", "MulticastIPAddressInformation", "MulticastIPAddressInformationCollection", "NetBiosNodeType", "NetworkChange", "NetworkAvailabilityEventArgs", "NetworkAddressChangedEventHandler", "NetworkAvailabilityChangedEventHandler", "NetworkInterface", "NetworkInterfaceComponent", "NetworkInterfaceType", "OperationalStatus", "PhysicalAddress", "PrefixOrigin", "ScopeLevel", "SuffixOrigin", "TcpConnectionInformation", "TcpState", "TcpStatistics", "UdpStatistics", "UnicastIPAddressInformation", "UnicastIPAddressInformationCollection", "NetworkInformationException"]
# endregion

# region: Imports
from System import ComponentModel
from System import Net
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["IPStatus", "Ping", "PingCompletedEventHandler", "PingCompletedEventArgs", "PingException", "PingOptions", "PingReply"]
# endregion

# region: Imports
from System import ComponentModel
from System import Net
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["NetworkInformationAccess"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class NetworkInformationAccess(enum.Enum):
    None_ = 0
    Read = 1
    Ping = 4

# endregion

# region: System.Net.Ping, Version=7.0.0.0

class IPStatus(enum.Enum):
    Success = 0
    DestinationNetworkUnreachable = 11002
    DestinationHostUnreachable = 11003
    DestinationProhibited = 11004
    DestinationProtocolUnreachable = 11004
    DestinationPortUnreachable = 11005
    NoResources = 11006
    BadOption = 11007
    HardwareError = 11008
    PacketTooBig = 11009
    TimedOut = 11010
    BadRoute = 11012
    TtlExpired = 11013
    TtlReassemblyTimeExceeded = 11014
    ParameterProblem = 11015
    SourceQuench = 11016
    BadDestination = 11018
    DestinationUnreachable = 11040
    TimeExceeded = 11041
    BadHeader = 11042
    UnrecognizedNextHeader = 11043
    IcmpError = 11044
    DestinationScopeMismatch = 11045
    Unknown = -1

class Ping(ComponentModel.Component):
    """    """
    def __init__(self): ...
    @overload
    def Send(self, hostNameOrAddress: str) -> PingReply: ...
    @overload
    def Send(self, address: Net.IPAddress) -> PingReply: ...
    @overload
    def Send(self, hostNameOrAddress: str, timeout: int) -> PingReply: ...
    @overload
    def Send(self, address: Net.IPAddress, timeout: int) -> PingReply: ...
    @overload
    def Send(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte]) -> PingReply: ...
    @overload
    def Send(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte]) -> PingReply: ...
    @overload
    def Send(self, hostNameOrAddress: str, timeout: System.TimeSpan, buffer: System.System.Array[System.Byte], options: PingOptions) -> PingReply: ...
    @overload
    def Send(self, address: Net.IPAddress, timeout: System.TimeSpan, buffer: System.System.Array[System.Byte], options: PingOptions) -> PingReply: ...
    @overload
    def Send(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions) -> PingReply: ...
    @overload
    def Send(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions) -> PingReply: ...
    @overload
    def SendAsync(self, address: Net.IPAddress, userToken: object) -> None: ...
    @overload
    def SendAsync(self, hostNameOrAddress: str, userToken: object) -> None: ...
    @overload
    def SendAsync(self, address: Net.IPAddress, timeout: int, userToken: object) -> None: ...
    @overload
    def SendAsync(self, hostNameOrAddress: str, timeout: int, userToken: object) -> None: ...
    @overload
    def SendAsync(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte], userToken: object) -> None: ...
    @overload
    def SendAsync(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte], userToken: object) -> None: ...
    @overload
    def SendAsync(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions, userToken: object) -> None: ...
    @overload
    def SendAsync(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions, userToken: object) -> None: ...
    @overload
    def SendAsyncCancel() -> None: ...
    @overload
    def SendPingAsync(self, address: Net.IPAddress) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, hostNameOrAddress: str) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, address: Net.IPAddress, timeout: int) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, hostNameOrAddress: str, timeout: int) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte]) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, address: Net.IPAddress, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions) -> Tasks.Task: ...
    @overload
    def SendPingAsync(self, hostNameOrAddress: str, timeout: int, buffer: System.System.Array[System.Byte], options: PingOptions) -> Tasks.Task: ...
    @property
    def PingCompleted(self): ...
    @property
    def Disposed(self): ...

class PingCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PingCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PingCompletedEventArgs) -> None: ...

class PingCompletedEventArgs(ComponentModel.AsyncCompletedEventArgs):
    """    """
    @property
    def Reply(self) -> PingReply: ...

class PingException(System.InvalidOperationException):
    """    """
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class PingOptions(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ttl: int, dontFragment: bool): ...
    @property
    def DontFragment(self) -> bool: ...
    @property
    def Ttl(self) -> int: ...
    @DontFragment.setter
    def DontFragment(self, value: System.Void): ...
    @Ttl.setter
    def Ttl(self, value: System.Void): ...

class PingReply(object):
    """    """
    @property
    def Address(self) -> Net.IPAddress: ...
    @property
    def Buffer(self) -> System.System.Array[System.Byte]: ...
    @property
    def Options(self) -> PingOptions: ...
    @property
    def RoundtripTime(self) -> System.Int64: ...
    @property
    def Status(self) -> IPStatus: ...

# endregion

# region: System.Net.NetworkInformation, Version=7.0.0.0

class DuplicateAddressDetectionState(enum.Enum):
    Invalid = 0
    Tentative = 1
    Duplicate = 2
    Deprecated = 3
    Preferred = 4

class GatewayIPAddressInformation(object):
    """    """
    @property
    def Address(self) -> Net.IPAddress: ...

class GatewayIPAddressInformationCollection(object):
    """    """
    @overload
    def Add(self, address: GatewayIPAddressInformation) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, address: GatewayIPAddressInformation) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[GatewayIPAddressInformation], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> GatewayIPAddressInformation: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, address: GatewayIPAddressInformation) -> bool: ...

class IcmpV4Statistics(object):
    """    """
    @property
    def AddressMaskRepliesReceived(self) -> System.Int64: ...
    @property
    def AddressMaskRepliesSent(self) -> System.Int64: ...
    @property
    def AddressMaskRequestsReceived(self) -> System.Int64: ...
    @property
    def AddressMaskRequestsSent(self) -> System.Int64: ...
    @property
    def DestinationUnreachableMessagesReceived(self) -> System.Int64: ...
    @property
    def DestinationUnreachableMessagesSent(self) -> System.Int64: ...
    @property
    def EchoRepliesReceived(self) -> System.Int64: ...
    @property
    def EchoRepliesSent(self) -> System.Int64: ...
    @property
    def EchoRequestsReceived(self) -> System.Int64: ...
    @property
    def EchoRequestsSent(self) -> System.Int64: ...
    @property
    def ErrorsReceived(self) -> System.Int64: ...
    @property
    def ErrorsSent(self) -> System.Int64: ...
    @property
    def MessagesReceived(self) -> System.Int64: ...
    @property
    def MessagesSent(self) -> System.Int64: ...
    @property
    def ParameterProblemsReceived(self) -> System.Int64: ...
    @property
    def ParameterProblemsSent(self) -> System.Int64: ...
    @property
    def RedirectsReceived(self) -> System.Int64: ...
    @property
    def RedirectsSent(self) -> System.Int64: ...
    @property
    def SourceQuenchesReceived(self) -> System.Int64: ...
    @property
    def SourceQuenchesSent(self) -> System.Int64: ...
    @property
    def TimeExceededMessagesReceived(self) -> System.Int64: ...
    @property
    def TimeExceededMessagesSent(self) -> System.Int64: ...
    @property
    def TimestampRepliesReceived(self) -> System.Int64: ...
    @property
    def TimestampRepliesSent(self) -> System.Int64: ...
    @property
    def TimestampRequestsReceived(self) -> System.Int64: ...
    @property
    def TimestampRequestsSent(self) -> System.Int64: ...

class IcmpV6Statistics(object):
    """    """
    @property
    def DestinationUnreachableMessagesReceived(self) -> System.Int64: ...
    @property
    def DestinationUnreachableMessagesSent(self) -> System.Int64: ...
    @property
    def EchoRepliesReceived(self) -> System.Int64: ...
    @property
    def EchoRepliesSent(self) -> System.Int64: ...
    @property
    def EchoRequestsReceived(self) -> System.Int64: ...
    @property
    def EchoRequestsSent(self) -> System.Int64: ...
    @property
    def ErrorsReceived(self) -> System.Int64: ...
    @property
    def ErrorsSent(self) -> System.Int64: ...
    @property
    def MembershipQueriesReceived(self) -> System.Int64: ...
    @property
    def MembershipQueriesSent(self) -> System.Int64: ...
    @property
    def MembershipReductionsReceived(self) -> System.Int64: ...
    @property
    def MembershipReductionsSent(self) -> System.Int64: ...
    @property
    def MembershipReportsReceived(self) -> System.Int64: ...
    @property
    def MembershipReportsSent(self) -> System.Int64: ...
    @property
    def MessagesReceived(self) -> System.Int64: ...
    @property
    def MessagesSent(self) -> System.Int64: ...
    @property
    def NeighborAdvertisementsReceived(self) -> System.Int64: ...
    @property
    def NeighborAdvertisementsSent(self) -> System.Int64: ...
    @property
    def NeighborSolicitsReceived(self) -> System.Int64: ...
    @property
    def NeighborSolicitsSent(self) -> System.Int64: ...
    @property
    def PacketTooBigMessagesReceived(self) -> System.Int64: ...
    @property
    def PacketTooBigMessagesSent(self) -> System.Int64: ...
    @property
    def ParameterProblemsReceived(self) -> System.Int64: ...
    @property
    def ParameterProblemsSent(self) -> System.Int64: ...
    @property
    def RedirectsReceived(self) -> System.Int64: ...
    @property
    def RedirectsSent(self) -> System.Int64: ...
    @property
    def RouterAdvertisementsReceived(self) -> System.Int64: ...
    @property
    def RouterAdvertisementsSent(self) -> System.Int64: ...
    @property
    def RouterSolicitsReceived(self) -> System.Int64: ...
    @property
    def RouterSolicitsSent(self) -> System.Int64: ...
    @property
    def TimeExceededMessagesReceived(self) -> System.Int64: ...
    @property
    def TimeExceededMessagesSent(self) -> System.Int64: ...

class IPAddressInformation(object):
    """    """
    @property
    def Address(self) -> Net.IPAddress: ...
    @property
    def IsDnsEligible(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...

class IPAddressInformationCollection(object):
    """    """
    @overload
    def Add(self, address: IPAddressInformation) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, address: IPAddressInformation) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[IPAddressInformation], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> IPAddressInformation: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, address: IPAddressInformation) -> bool: ...

class IPGlobalProperties(object):
    """    """
    @overload
    def BeginGetUnicastAddresses(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndGetUnicastAddresses(self, asyncResult: System.IAsyncResult) -> UnicastIPAddressInformationCollection: ...
    @property
    def DhcpScopeName(self) -> str: ...
    @property
    def DomainName(self) -> str: ...
    @property
    def HostName(self) -> str: ...
    @property
    def IsWinsProxy(self) -> bool: ...
    @property
    def NodeType(self) -> NetBiosNodeType: ...
    @overload
    def GetActiveTcpConnections() -> System.Array[TcpConnectionInformation]: ...
    @overload
    def GetActiveTcpListeners() -> Net.System.Array[Net.IPEndPoint]: ...
    @overload
    def GetActiveUdpListeners() -> Net.System.Array[Net.IPEndPoint]: ...
    @overload
    def GetIcmpV4Statistics() -> IcmpV4Statistics: ...
    @overload
    def GetIcmpV6Statistics() -> IcmpV6Statistics: ...
    @overload
    @staticmethod
    def GetIPGlobalProperties() -> IPGlobalProperties: ...
    @overload
    def GetIPv4GlobalStatistics() -> IPGlobalStatistics: ...
    @overload
    def GetIPv6GlobalStatistics() -> IPGlobalStatistics: ...
    @overload
    def GetTcpIPv4Statistics() -> TcpStatistics: ...
    @overload
    def GetTcpIPv6Statistics() -> TcpStatistics: ...
    @overload
    def GetUdpIPv4Statistics() -> UdpStatistics: ...
    @overload
    def GetUdpIPv6Statistics() -> UdpStatistics: ...
    @overload
    def GetUnicastAddresses() -> UnicastIPAddressInformationCollection: ...
    @overload
    def GetUnicastAddressesAsync() -> Tasks.Task: ...

class IPGlobalStatistics(object):
    """    """
    @property
    def DefaultTtl(self) -> int: ...
    @property
    def ForwardingEnabled(self) -> bool: ...
    @property
    def NumberOfInterfaces(self) -> int: ...
    @property
    def NumberOfIPAddresses(self) -> int: ...
    @property
    def NumberOfRoutes(self) -> int: ...
    @property
    def OutputPacketRequests(self) -> System.Int64: ...
    @property
    def OutputPacketRoutingDiscards(self) -> System.Int64: ...
    @property
    def OutputPacketsDiscarded(self) -> System.Int64: ...
    @property
    def OutputPacketsWithNoRoute(self) -> System.Int64: ...
    @property
    def PacketFragmentFailures(self) -> System.Int64: ...
    @property
    def PacketReassembliesRequired(self) -> System.Int64: ...
    @property
    def PacketReassemblyFailures(self) -> System.Int64: ...
    @property
    def PacketReassemblyTimeout(self) -> System.Int64: ...
    @property
    def PacketsFragmented(self) -> System.Int64: ...
    @property
    def PacketsReassembled(self) -> System.Int64: ...
    @property
    def ReceivedPackets(self) -> System.Int64: ...
    @property
    def ReceivedPacketsDelivered(self) -> System.Int64: ...
    @property
    def ReceivedPacketsDiscarded(self) -> System.Int64: ...
    @property
    def ReceivedPacketsForwarded(self) -> System.Int64: ...
    @property
    def ReceivedPacketsWithAddressErrors(self) -> System.Int64: ...
    @property
    def ReceivedPacketsWithHeadersErrors(self) -> System.Int64: ...
    @property
    def ReceivedPacketsWithUnknownProtocol(self) -> System.Int64: ...

class IPInterfaceProperties(object):
    """    """
    @property
    def AnycastAddresses(self) -> IPAddressInformationCollection: ...
    @property
    def DhcpServerAddresses(self) -> IPAddressCollection: ...
    @property
    def DnsAddresses(self) -> IPAddressCollection: ...
    @property
    def DnsSuffix(self) -> str: ...
    @property
    def GatewayAddresses(self) -> GatewayIPAddressInformationCollection: ...
    @property
    def IsDnsEnabled(self) -> bool: ...
    @property
    def IsDynamicDnsEnabled(self) -> bool: ...
    @property
    def MulticastAddresses(self) -> MulticastIPAddressInformationCollection: ...
    @property
    def UnicastAddresses(self) -> UnicastIPAddressInformationCollection: ...
    @property
    def WinsServersAddresses(self) -> IPAddressCollection: ...
    @overload
    def GetIPv4Properties() -> IPv4InterfaceProperties: ...
    @overload
    def GetIPv6Properties() -> IPv6InterfaceProperties: ...

class IPInterfaceStatistics(object):
    """    """
    @property
    def BytesReceived(self) -> System.Int64: ...
    @property
    def BytesSent(self) -> System.Int64: ...
    @property
    def IncomingPacketsDiscarded(self) -> System.Int64: ...
    @property
    def IncomingPacketsWithErrors(self) -> System.Int64: ...
    @property
    def IncomingUnknownProtocolPackets(self) -> System.Int64: ...
    @property
    def NonUnicastPacketsReceived(self) -> System.Int64: ...
    @property
    def NonUnicastPacketsSent(self) -> System.Int64: ...
    @property
    def OutgoingPacketsDiscarded(self) -> System.Int64: ...
    @property
    def OutgoingPacketsWithErrors(self) -> System.Int64: ...
    @property
    def OutputQueueLength(self) -> System.Int64: ...
    @property
    def UnicastPacketsReceived(self) -> System.Int64: ...
    @property
    def UnicastPacketsSent(self) -> System.Int64: ...

class IPv4InterfaceProperties(object):
    """    """
    @property
    def Index(self) -> int: ...
    @property
    def IsAutomaticPrivateAddressingActive(self) -> bool: ...
    @property
    def IsAutomaticPrivateAddressingEnabled(self) -> bool: ...
    @property
    def IsDhcpEnabled(self) -> bool: ...
    @property
    def IsForwardingEnabled(self) -> bool: ...
    @property
    def Mtu(self) -> int: ...
    @property
    def UsesWins(self) -> bool: ...

class IPv4InterfaceStatistics(object):
    """    """
    @property
    def BytesReceived(self) -> System.Int64: ...
    @property
    def BytesSent(self) -> System.Int64: ...
    @property
    def IncomingPacketsDiscarded(self) -> System.Int64: ...
    @property
    def IncomingPacketsWithErrors(self) -> System.Int64: ...
    @property
    def IncomingUnknownProtocolPackets(self) -> System.Int64: ...
    @property
    def NonUnicastPacketsReceived(self) -> System.Int64: ...
    @property
    def NonUnicastPacketsSent(self) -> System.Int64: ...
    @property
    def OutgoingPacketsDiscarded(self) -> System.Int64: ...
    @property
    def OutgoingPacketsWithErrors(self) -> System.Int64: ...
    @property
    def OutputQueueLength(self) -> System.Int64: ...
    @property
    def UnicastPacketsReceived(self) -> System.Int64: ...
    @property
    def UnicastPacketsSent(self) -> System.Int64: ...

class IPv6InterfaceProperties(object):
    """    """
    @property
    def Index(self) -> int: ...
    @property
    def Mtu(self) -> int: ...
    @overload
    def GetScopeId(self, scopeLevel: ScopeLevel) -> System.Int64: ...

class MulticastIPAddressInformation(IPAddressInformation):
    """    """
    @property
    def AddressPreferredLifetime(self) -> System.Int64: ...
    @property
    def AddressValidLifetime(self) -> System.Int64: ...
    @property
    def DhcpLeaseLifetime(self) -> System.Int64: ...
    @property
    def DuplicateAddressDetectionState(self) -> DuplicateAddressDetectionState: ...
    @property
    def PrefixOrigin(self) -> PrefixOrigin: ...
    @property
    def SuffixOrigin(self) -> SuffixOrigin: ...

class MulticastIPAddressInformationCollection(object):
    """    """
    @overload
    def Add(self, address: MulticastIPAddressInformation) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, address: MulticastIPAddressInformation) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[MulticastIPAddressInformation], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> MulticastIPAddressInformation: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, address: MulticastIPAddressInformation) -> bool: ...

class NetBiosNodeType(enum.Enum):
    Unknown = 0
    Broadcast = 1
    Peer2Peer = 2
    Mixed = 4
    Hybrid = 8

class NetworkChange(object):
    """    """
    def __init__(self): ...
    @property
    def NetworkAvailabilityChanged(self): ...
    @property
    def NetworkAddressChanged(self): ...

class NetworkAvailabilityEventArgs(System.EventArgs):
    """    """
    @property
    def IsAvailable(self) -> bool: ...

class NetworkAddressChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: System.EventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: System.EventArgs) -> None: ...

class NetworkAvailabilityChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: NetworkAvailabilityEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: NetworkAvailabilityEventArgs) -> None: ...

class NetworkInterface(object):
    """    """
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def IPv6LoopbackInterfaceIndex(self) -> int: ...
    @property
    def IsReceiveOnly(self) -> bool: ...
    @property
    def LoopbackInterfaceIndex(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NetworkInterfaceType(self) -> NetworkInterfaceType: ...
    @property
    def OperationalStatus(self) -> OperationalStatus: ...
    @property
    def Speed(self) -> System.Int64: ...
    @property
    def SupportsMulticast(self) -> bool: ...
    @overload
    @staticmethod
    def GetAllNetworkInterfaces() -> System.Array[NetworkInterface]: ...
    @overload
    def GetIPProperties() -> IPInterfaceProperties: ...
    @overload
    def GetIPStatistics() -> IPInterfaceStatistics: ...
    @overload
    def GetIPv4Statistics() -> IPv4InterfaceStatistics: ...
    @overload
    @staticmethod
    def GetIsNetworkAvailable() -> bool: ...
    @overload
    def GetPhysicalAddress() -> PhysicalAddress: ...
    @overload
    def Supports(self, networkInterfaceComponent: NetworkInterfaceComponent) -> bool: ...

class NetworkInterfaceComponent(enum.Enum):
    IPv4 = 0
    IPv6 = 1

class NetworkInterfaceType(enum.Enum):
    Unknown = 1
    Ethernet = 6
    TokenRing = 9
    Fddi = 15
    BasicIsdn = 20
    PrimaryIsdn = 21
    Ppp = 23
    Loopback = 24
    Ethernet3Megabit = 26
    Slip = 28
    Atm = 37
    GenericModem = 48
    FastEthernetT = 62
    Isdn = 63
    FastEthernetFx = 69
    Wireless80211 = 71
    AsymmetricDsl = 94
    RateAdaptDsl = 95
    SymmetricDsl = 96
    VeryHighSpeedDsl = 97
    IPOverAtm = 114
    GigabitEthernet = 117
    Tunnel = 131
    MultiRateSymmetricDsl = 143
    HighPerformanceSerialBus = 144
    Wman = 237
    Wwanpp = 243
    Wwanpp2 = 244

class OperationalStatus(enum.Enum):
    Up = 1
    Down = 2
    Testing = 3
    Unknown = 4
    Dormant = 5
    NotPresent = 6
    LowerLayerDown = 7

class PhysicalAddress(object):
    """    """
    def __init__(self, address: System.System.Array[System.Byte]): ...
    @property
    def None_(self) -> PhysicalAddress: ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @overload
    def GetAddressBytes() -> System.System.Array[System.Byte]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(address: str) -> PhysicalAddress: ...
    @overload
    @staticmethod
    def Parse(address: System.ReadOnlySpan) -> PhysicalAddress: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryParse(address: str) -> (bool, PhysicalAddress): ...
    @overload
    @staticmethod
    def TryParse(address: System.ReadOnlySpan) -> (bool, PhysicalAddress): ...

class PrefixOrigin(enum.Enum):
    Other = 0
    Manual = 1
    WellKnown = 2
    Dhcp = 3
    RouterAdvertisement = 4

class ScopeLevel(enum.Enum):
    None_ = 0
    Interface = 1
    Link = 2
    Subnet = 3
    Admin = 4
    Site = 5
    Organization = 8
    Global = 14

class SuffixOrigin(enum.Enum):
    Other = 0
    Manual = 1
    WellKnown = 2
    OriginDhcp = 3
    LinkLayerAddress = 4
    Random = 5

class TcpConnectionInformation(object):
    """    """
    @property
    def LocalEndPoint(self) -> Net.IPEndPoint: ...
    @property
    def RemoteEndPoint(self) -> Net.IPEndPoint: ...
    @property
    def State(self) -> TcpState: ...

class TcpState(enum.Enum):
    Unknown = 0
    Closed = 1
    Listen = 2
    SynSent = 3
    SynReceived = 4
    Established = 5
    FinWait1 = 6
    FinWait2 = 7
    CloseWait = 8
    Closing = 9
    LastAck = 10
    TimeWait = 11
    DeleteTcb = 12

class TcpStatistics(object):
    """    """
    @property
    def ConnectionsAccepted(self) -> System.Int64: ...
    @property
    def ConnectionsInitiated(self) -> System.Int64: ...
    @property
    def CumulativeConnections(self) -> System.Int64: ...
    @property
    def CurrentConnections(self) -> System.Int64: ...
    @property
    def ErrorsReceived(self) -> System.Int64: ...
    @property
    def FailedConnectionAttempts(self) -> System.Int64: ...
    @property
    def MaximumConnections(self) -> System.Int64: ...
    @property
    def MaximumTransmissionTimeout(self) -> System.Int64: ...
    @property
    def MinimumTransmissionTimeout(self) -> System.Int64: ...
    @property
    def ResetConnections(self) -> System.Int64: ...
    @property
    def ResetsSent(self) -> System.Int64: ...
    @property
    def SegmentsReceived(self) -> System.Int64: ...
    @property
    def SegmentsResent(self) -> System.Int64: ...
    @property
    def SegmentsSent(self) -> System.Int64: ...

class UdpStatistics(object):
    """    """
    @property
    def DatagramsReceived(self) -> System.Int64: ...
    @property
    def DatagramsSent(self) -> System.Int64: ...
    @property
    def IncomingDatagramsDiscarded(self) -> System.Int64: ...
    @property
    def IncomingDatagramsWithErrors(self) -> System.Int64: ...
    @property
    def UdpListeners(self) -> int: ...

class UnicastIPAddressInformation(IPAddressInformation):
    """    """
    @property
    def AddressPreferredLifetime(self) -> System.Int64: ...
    @property
    def AddressValidLifetime(self) -> System.Int64: ...
    @property
    def DhcpLeaseLifetime(self) -> System.Int64: ...
    @property
    def DuplicateAddressDetectionState(self) -> DuplicateAddressDetectionState: ...
    @property
    def IPv4Mask(self) -> Net.IPAddress: ...
    @property
    def PrefixLength(self) -> int: ...
    @property
    def PrefixOrigin(self) -> PrefixOrigin: ...
    @property
    def SuffixOrigin(self) -> SuffixOrigin: ...

class UnicastIPAddressInformationCollection(object):
    """    """
    @overload
    def Add(self, address: UnicastIPAddressInformation) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, address: UnicastIPAddressInformation) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[UnicastIPAddressInformation], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> UnicastIPAddressInformation: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, address: UnicastIPAddressInformation) -> bool: ...

class NetworkInformationException(ComponentModel.Win32Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, errorCode: int): ...
    @property
    def ErrorCode(self) -> int: ...

# endregion

# region: System.Net.Primitives, Version=7.0.0.0

class IPAddressCollection(object):
    """    """
    @overload
    def Add(self, address: Net.IPAddress) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, address: Net.IPAddress) -> bool: ...
    @overload
    def CopyTo(self, array: Net.System.Array[Net.IPAddress], offset: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Net.IPAddress: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, address: Net.IPAddress) -> bool: ...

# endregion
