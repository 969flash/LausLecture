"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ClientWebSocket", "ClientWebSocketOptions"]
# endregion

# region: Imports
from System import Net
from System import Threading
from System.Collections import Generic
from System.Net import Http
from System.Net import Security
from System.Runtime import CompilerServices
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["HttpListenerWebSocketContext"]
# endregion

# region: Imports
from System import Net
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Security import Principal
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["ValueWebSocketReceiveResult", "WebSocket", "WebSocketCloseStatus", "WebSocketContext", "WebSocketCreationOptions", "WebSocketDeflateOptions", "WebSocketError", "WebSocketException", "WebSocketMessageType", "WebSocketMessageFlags", "WebSocketReceiveResult", "WebSocketState"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Net
from System import Threading
from System.Collections import Generic
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Principal
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Net.WebSockets, Version=7.0.0.0

class ValueWebSocketReceiveResult(System.ValueType):
    """    """
    def __init__(self, count: int, messageType: WebSocketMessageType, endOfMessage: bool): ...
    @property
    def Count(self) -> int: ...
    @property
    def EndOfMessage(self) -> bool: ...
    @property
    def MessageType(self) -> WebSocketMessageType: ...

class WebSocket(object):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def CloseAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def CloseOutputAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def CreateClientBuffer(receiveBufferSize: int, sendBufferSize: int) -> System.ArraySegment: ...
    @overload
    @staticmethod
    def CreateClientWebSocket(innerStream: IO.Stream, subProtocol: str, receiveBufferSize: int, sendBufferSize: int, keepAliveInterval: System.TimeSpan, useZeroMaskingKey: bool, internalBuffer: System.ArraySegment) -> WebSocket: ...
    @overload
    @staticmethod
    def CreateFromStream(stream: IO.Stream, options: WebSocketCreationOptions) -> WebSocket: ...
    @overload
    @staticmethod
    def CreateFromStream(stream: IO.Stream, isServer: bool, subProtocol: str, keepAliveInterval: System.TimeSpan) -> WebSocket: ...
    @overload
    @staticmethod
    def CreateServerBuffer(receiveBufferSize: int) -> System.ArraySegment: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CloseStatus(self) -> System.Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def DefaultKeepAliveInterval(self) -> System.TimeSpan: ...
    @property
    def State(self) -> WebSocketState: ...
    @property
    def SubProtocol(self) -> str: ...
    @overload
    def ReceiveAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReceiveAsync(self, buffer: System.ArraySegment, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffer: System.ArraySegment, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffer: System.ReadOnlyMemory, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendAsync(self, buffer: System.ReadOnlyMemory, messageType: WebSocketMessageType, messageFlags: WebSocketMessageFlags, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...

class WebSocketCloseStatus(enum.Enum):
    NormalClosure = 1000
    EndpointUnavailable = 1001
    ProtocolError = 1002
    InvalidMessageType = 1003
    Empty = 1005
    InvalidPayloadData = 1007
    PolicyViolation = 1008
    MessageTooBig = 1009
    MandatoryExtension = 1010
    InternalServerError = 1011

class WebSocketContext(object):
    """    """
    @property
    def CookieCollection(self) -> Net.CookieCollection: ...
    @property
    def Headers(self) -> Specialized.NameValueCollection: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsSecureConnection(self) -> bool: ...
    @property
    def Origin(self) -> str: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def SecWebSocketKey(self) -> str: ...
    @property
    def SecWebSocketProtocols(self) -> Generic.IEnumerable: ...
    @property
    def SecWebSocketVersion(self) -> str: ...
    @property
    def User(self) -> Principal.IPrincipal: ...
    @property
    def WebSocket(self) -> WebSocket: ...

class WebSocketCreationOptions(object):
    """    """
    def __init__(self): ...
    @property
    def DangerousDeflateOptions(self) -> WebSocketDeflateOptions: ...
    @property
    def IsServer(self) -> bool: ...
    @property
    def KeepAliveInterval(self) -> System.TimeSpan: ...
    @property
    def SubProtocol(self) -> str: ...
    @DangerousDeflateOptions.setter
    def DangerousDeflateOptions(self, value: System.Void): ...
    @IsServer.setter
    def IsServer(self, value: System.Void): ...
    @KeepAliveInterval.setter
    def KeepAliveInterval(self, value: System.Void): ...
    @SubProtocol.setter
    def SubProtocol(self, value: System.Void): ...

class WebSocketDeflateOptions(object):
    """    """
    def __init__(self): ...
    @property
    def ClientContextTakeover(self) -> bool: ...
    @property
    def ClientMaxWindowBits(self) -> int: ...
    @property
    def ServerContextTakeover(self) -> bool: ...
    @property
    def ServerMaxWindowBits(self) -> int: ...
    @ClientContextTakeover.setter
    def ClientContextTakeover(self, value: System.Void): ...
    @ClientMaxWindowBits.setter
    def ClientMaxWindowBits(self, value: System.Void): ...
    @ServerContextTakeover.setter
    def ServerContextTakeover(self, value: System.Void): ...
    @ServerMaxWindowBits.setter
    def ServerMaxWindowBits(self, value: System.Void): ...

class WebSocketError(enum.Enum):
    Success = 0
    InvalidMessageType = 1
    Faulted = 2
    NativeError = 3
    NotAWebSocket = 4
    UnsupportedVersion = 5
    UnsupportedProtocol = 6
    HeaderError = 7
    ConnectionClosedPrematurely = 8
    InvalidState = 9

class WebSocketException(ComponentModel.Win32Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: WebSocketError): ...
    @overload
    def __init__(self, nativeError: int): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, innerException: System.Exception): ...
    @overload
    def __init__(self, nativeError: int, message: str): ...
    @overload
    def __init__(self, nativeError: int, innerException: System.Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, error: WebSocketError, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, innerException: System.Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, message: str, innerException: System.Exception): ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def WebSocketErrorCode(self) -> WebSocketError: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class WebSocketMessageType(enum.Enum):
    Text = 0
    Binary = 1
    Close = 2

class WebSocketMessageFlags(enum.Enum):
    None_ = 0
    EndOfMessage = 1
    DisableCompression = 2

class WebSocketReceiveResult(object):
    """    """
    @overload
    def __init__(self, count: int, messageType: WebSocketMessageType, endOfMessage: bool): ...
    @overload
    def __init__(self, count: int, messageType: WebSocketMessageType, endOfMessage: bool, closeStatus: System.Nullable, closeStatusDescription: str): ...
    @property
    def CloseStatus(self) -> System.Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def EndOfMessage(self) -> bool: ...
    @property
    def MessageType(self) -> WebSocketMessageType: ...

class WebSocketState(enum.Enum):
    None_ = 0
    Connecting = 1
    Open = 2
    CloseSent = 3
    CloseReceived = 4
    Closed = 5
    Aborted = 6

# endregion

# region: System.Net.HttpListener, Version=7.0.0.0

class HttpListenerWebSocketContext(WebSocketContext):
    """    """
    @property
    def CookieCollection(self) -> Net.CookieCollection: ...
    @property
    def Headers(self) -> Specialized.NameValueCollection: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsSecureConnection(self) -> bool: ...
    @property
    def Origin(self) -> str: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def SecWebSocketKey(self) -> str: ...
    @property
    def SecWebSocketProtocols(self) -> Generic.IEnumerable: ...
    @property
    def SecWebSocketVersion(self) -> str: ...
    @property
    def User(self) -> Principal.IPrincipal: ...
    @property
    def WebSocket(self) -> WebSocket: ...

# endregion

# region: System.Net.WebSockets.Client, Version=7.0.0.0

class ClientWebSocket(WebSocket):
    """    """
    def __init__(self): ...
    @overload
    def Abort() -> None: ...
    @overload
    def CloseAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def CloseOutputAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, uri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, uri: System.Uri, invoker: Http.HttpMessageInvoker, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @property
    def CloseStatus(self) -> System.Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def HttpResponseHeaders(self) -> Generic.IReadOnlyDictionary: ...
    @property
    def HttpStatusCode(self) -> Net.HttpStatusCode: ...
    @property
    def Options(self) -> ClientWebSocketOptions: ...
    @property
    def State(self) -> WebSocketState: ...
    @property
    def SubProtocol(self) -> str: ...
    @overload
    def ReceiveAsync(self, buffer: System.ArraySegment, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def SendAsync(self, buffer: System.ArraySegment, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def SendAsync(self, buffer: System.ReadOnlyMemory, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @HttpResponseHeaders.setter
    def HttpResponseHeaders(self, value: System.Void): ...

class ClientWebSocketOptions(object):
    """    """
    @overload
    def AddSubProtocol(self, subProtocol: str) -> None: ...
    @property
    def ClientCertificates(self) -> X509Certificates.X509CertificateCollection: ...
    @property
    def CollectHttpResponseDetails(self) -> bool: ...
    @property
    def Cookies(self) -> Net.CookieContainer: ...
    @property
    def Credentials(self) -> Net.ICredentials: ...
    @property
    def DangerousDeflateOptions(self) -> WebSocketDeflateOptions: ...
    @property
    def HttpVersion(self) -> System.Version: ...
    @property
    def HttpVersionPolicy(self) -> Http.HttpVersionPolicy: ...
    @property
    def KeepAliveInterval(self) -> System.TimeSpan: ...
    @property
    def Proxy(self) -> Net.IWebProxy: ...
    @property
    def RemoteCertificateValidationCallback(self) -> Security.RemoteCertificateValidationCallback: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @ClientCertificates.setter
    def ClientCertificates(self, value: System.Void): ...
    @CollectHttpResponseDetails.setter
    def CollectHttpResponseDetails(self, value: System.Void): ...
    @Cookies.setter
    def Cookies(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DangerousDeflateOptions.setter
    def DangerousDeflateOptions(self, value: System.Void): ...
    @HttpVersion.setter
    def HttpVersion(self, value: System.Void): ...
    @HttpVersionPolicy.setter
    def HttpVersionPolicy(self, value: System.Void): ...
    @KeepAliveInterval.setter
    def KeepAliveInterval(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @RemoteCertificateValidationCallback.setter
    def RemoteCertificateValidationCallback(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @overload
    def SetBuffer(self, receiveBufferSize: int, sendBufferSize: int) -> None: ...
    @overload
    def SetBuffer(self, receiveBufferSize: int, sendBufferSize: int, buffer: System.ArraySegment) -> None: ...
    @overload
    def SetRequestHeader(self, headerName: str, headerValue: str) -> None: ...

# endregion
