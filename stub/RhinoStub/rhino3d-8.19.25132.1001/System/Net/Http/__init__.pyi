"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Headers", "ByteArrayContent", "ClientCertificateOption", "DelegatingHandler", "FormUrlEncodedContent", "HeaderEncodingSelector", "HttpClient", "HttpClientHandler", "HttpCompletionOption", "HttpContent", "HttpMessageHandler", "HttpMessageInvoker", "HttpMethod", "HttpProtocolException", "HttpRequestException", "HttpRequestMessage", "HttpRequestOptions", "HttpRequestOptionsKey", "HttpResponseMessage", "HttpVersionPolicy", "MessageProcessingHandler", "MultipartContent", "MultipartFormDataContent", "ReadOnlyMemoryContent", "StreamContent", "StringContent", "SocketsHttpPlaintextStreamFilterContext", "HttpKeepAlivePingPolicy", "SocketsHttpConnectionContext", "SocketsHttpHandler"]
# endregion

# region: Imports
from System import Diagnostics
from System import IO
from System import Net
from System import Text
from System import Threading
from System.Collections import Generic
from System.Net import Security
from System.Net.Http import Headers
from System.Runtime import CompilerServices
from System.Security import Authentication
from System.Security.Cryptography import X509Certificates
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Net.Http, Version=7.0.0.0

class ByteArrayContent(HttpContent):
    """    """
    @overload
    def __init__(self, content: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, content: System.System.Array[System.Byte], offset: int, count: int): ...

class ClientCertificateOption(enum.Enum):
    Manual = 0
    Automatic = 1

class DelegatingHandler(HttpMessageHandler):
    """    """
    @property
    def InnerHandler(self) -> HttpMessageHandler: ...
    @InnerHandler.setter
    def InnerHandler(self, value: System.Void): ...

class FormUrlEncodedContent(ByteArrayContent):
    """    """
    def __init__(self, nameValueCollection: Generic.IEnumerable): ...

class HeaderEncodingSelector(System.MulticastDelegate):
    """    HeaderEncodingSelector[TContext]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, headerName: str, context: TContext, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> Text.Encoding: ...
    @overload
    def Invoke(self, headerName: str, context: TContext) -> Text.Encoding: ...

class HttpClient(HttpMessageInvoker):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: HttpMessageHandler): ...
    @overload
    def __init__(self, handler: HttpMessageHandler, disposeHandler: bool): ...
    @overload
    def CancelPendingRequests() -> None: ...
    @overload
    def DeleteAsync(self, requestUri: System.Uri) -> Tasks.Task: ...
    @overload
    def DeleteAsync(self, requestUri: str) -> Tasks.Task: ...
    @overload
    def DeleteAsync(self, requestUri: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DeleteAsync(self, requestUri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BaseAddress(self) -> System.Uri: ...
    @property
    def DefaultProxy(self) -> Net.IWebProxy: ...
    @property
    def DefaultRequestHeaders(self) -> Headers.HttpRequestHeaders: ...
    @property
    def DefaultRequestVersion(self) -> System.Version: ...
    @property
    def DefaultVersionPolicy(self) -> HttpVersionPolicy: ...
    @property
    def MaxResponseContentBufferSize(self) -> System.Int64: ...
    @property
    def Timeout(self) -> System.TimeSpan: ...
    @overload
    def GetAsync(self, requestUri: System.Uri) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: str) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: System.Uri, completionOption: HttpCompletionOption) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: str, completionOption: HttpCompletionOption) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: System.Uri, completionOption: HttpCompletionOption, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetAsync(self, requestUri: str, completionOption: HttpCompletionOption, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: System.Uri) -> Tasks.Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: str) -> Tasks.Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetStreamAsync(self, requestUri: System.Uri) -> Tasks.Task: ...
    @overload
    def GetStreamAsync(self, requestUri: str) -> Tasks.Task: ...
    @overload
    def GetStreamAsync(self, requestUri: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetStreamAsync(self, requestUri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetStringAsync(self, requestUri: System.Uri) -> Tasks.Task: ...
    @overload
    def GetStringAsync(self, requestUri: str) -> Tasks.Task: ...
    @overload
    def GetStringAsync(self, requestUri: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def GetStringAsync(self, requestUri: System.Uri, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PatchAsync(self, requestUri: str, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PatchAsync(self, requestUri: System.Uri, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PatchAsync(self, requestUri: str, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PatchAsync(self, requestUri: System.Uri, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PostAsync(self, requestUri: str, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PostAsync(self, requestUri: System.Uri, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PostAsync(self, requestUri: System.Uri, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PostAsync(self, requestUri: str, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PutAsync(self, requestUri: System.Uri, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PutAsync(self, requestUri: str, content: HttpContent) -> Tasks.Task: ...
    @overload
    def PutAsync(self, requestUri: str, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PutAsync(self, requestUri: System.Uri, content: HttpContent, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Send(self, request: HttpRequestMessage) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, cancellationToken: Threading.CancellationToken) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, completionOption: HttpCompletionOption) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, completionOption: HttpCompletionOption, cancellationToken: Threading.CancellationToken) -> HttpResponseMessage: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage) -> Tasks.Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, completionOption: HttpCompletionOption) -> Tasks.Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, completionOption: HttpCompletionOption, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @BaseAddress.setter
    def BaseAddress(self, value: System.Void): ...
    @DefaultProxy.setter
    def DefaultProxy(self, value: System.Void): ...
    @DefaultRequestVersion.setter
    def DefaultRequestVersion(self, value: System.Void): ...
    @DefaultVersionPolicy.setter
    def DefaultVersionPolicy(self, value: System.Void): ...
    @MaxResponseContentBufferSize.setter
    def MaxResponseContentBufferSize(self, value: System.Void): ...
    @Timeout.setter
    def Timeout(self, value: System.Void): ...

class HttpClientHandler(HttpMessageHandler):
    """    """
    def __init__(self): ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def AutomaticDecompression(self) -> Net.DecompressionMethods: ...
    @property
    def CheckCertificateRevocationList(self) -> bool: ...
    @property
    def ClientCertificateOptions(self) -> ClientCertificateOption: ...
    @property
    def ClientCertificates(self) -> X509Certificates.X509CertificateCollection: ...
    @property
    def CookieContainer(self) -> Net.CookieContainer: ...
    @property
    def Credentials(self) -> Net.ICredentials: ...
    @property
    def DangerousAcceptAnyServerCertificateValidator(self) -> System.Func: ...
    @property
    def DefaultProxyCredentials(self) -> Net.ICredentials: ...
    @property
    def MaxAutomaticRedirections(self) -> int: ...
    @property
    def MaxConnectionsPerServer(self) -> int: ...
    @property
    def MaxRequestContentBufferSize(self) -> System.Int64: ...
    @property
    def MaxResponseHeadersLength(self) -> int: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Properties(self) -> Generic.IDictionary: ...
    @property
    def Proxy(self) -> Net.IWebProxy: ...
    @property
    def ServerCertificateCustomValidationCallback(self) -> System.Func: ...
    @property
    def SslProtocols(self) -> Authentication.SslProtocols: ...
    @property
    def SupportsAutomaticDecompression(self) -> bool: ...
    @property
    def SupportsProxy(self) -> bool: ...
    @property
    def SupportsRedirectConfiguration(self) -> bool: ...
    @property
    def UseCookies(self) -> bool: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @property
    def UseProxy(self) -> bool: ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: System.Void): ...
    @AutomaticDecompression.setter
    def AutomaticDecompression(self, value: System.Void): ...
    @CheckCertificateRevocationList.setter
    def CheckCertificateRevocationList(self, value: System.Void): ...
    @ClientCertificateOptions.setter
    def ClientCertificateOptions(self, value: System.Void): ...
    @CookieContainer.setter
    def CookieContainer(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DefaultProxyCredentials.setter
    def DefaultProxyCredentials(self, value: System.Void): ...
    @MaxAutomaticRedirections.setter
    def MaxAutomaticRedirections(self, value: System.Void): ...
    @MaxConnectionsPerServer.setter
    def MaxConnectionsPerServer(self, value: System.Void): ...
    @MaxRequestContentBufferSize.setter
    def MaxRequestContentBufferSize(self, value: System.Void): ...
    @MaxResponseHeadersLength.setter
    def MaxResponseHeadersLength(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @ServerCertificateCustomValidationCallback.setter
    def ServerCertificateCustomValidationCallback(self, value: System.Void): ...
    @SslProtocols.setter
    def SslProtocols(self, value: System.Void): ...
    @UseCookies.setter
    def UseCookies(self, value: System.Void): ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: System.Void): ...
    @UseProxy.setter
    def UseProxy(self, value: System.Void): ...

class HttpCompletionOption(enum.Enum):
    ResponseContentRead = 0
    ResponseHeadersRead = 1

class HttpContent(object):
    """    """
    @overload
    def CopyTo(self, stream: IO.Stream, context: Net.TransportContext, cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    def CopyToAsync(self, stream: IO.Stream) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, stream: IO.Stream, context: Net.TransportContext) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, stream: IO.Stream, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, stream: IO.Stream, context: Net.TransportContext, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Headers(self) -> Headers.HttpContentHeaders: ...
    @overload
    def LoadIntoBufferAsync() -> Tasks.Task: ...
    @overload
    def LoadIntoBufferAsync(self, maxBufferSize: System.Int64) -> Tasks.Task: ...
    @overload
    def ReadAsByteArrayAsync() -> Tasks.Task: ...
    @overload
    def ReadAsByteArrayAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadAsStream() -> IO.Stream: ...
    @overload
    def ReadAsStream(self, cancellationToken: Threading.CancellationToken) -> IO.Stream: ...
    @overload
    def ReadAsStreamAsync() -> Tasks.Task: ...
    @overload
    def ReadAsStreamAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadAsStringAsync() -> Tasks.Task: ...
    @overload
    def ReadAsStringAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class HttpMessageHandler(object):
    """    """
    @overload
    def Dispose() -> None: ...

class HttpMessageInvoker(object):
    """    """
    @overload
    def __init__(self, handler: HttpMessageHandler): ...
    @overload
    def __init__(self, handler: HttpMessageHandler, disposeHandler: bool): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Send(self, request: HttpRequestMessage, cancellationToken: Threading.CancellationToken) -> HttpResponseMessage: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class HttpMethod(object):
    """    """
    def __init__(self, method: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: HttpMethod) -> bool: ...
    @property
    def Connect(self) -> HttpMethod: ...
    @property
    def Delete(self) -> HttpMethod: ...
    @property
    def Get(self) -> HttpMethod: ...
    @property
    def Head(self) -> HttpMethod: ...
    @property
    def Method(self) -> str: ...
    @property
    def Options(self) -> HttpMethod: ...
    @property
    def Patch(self) -> HttpMethod: ...
    @property
    def Post(self) -> HttpMethod: ...
    @property
    def Put(self) -> HttpMethod: ...
    @property
    def Trace(self) -> HttpMethod: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class HttpProtocolException(IO.IOException):
    """    """
    def __init__(self, errorCode: System.Int64, message: str, innerException: System.Exception): ...
    @property
    def ErrorCode(self) -> System.Int64: ...

class HttpRequestException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, inner: System.Exception, statusCode: System.Nullable): ...
    @property
    def StatusCode(self) -> System.Nullable: ...

class HttpRequestMessage(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, method: HttpMethod, requestUri: System.Uri): ...
    @overload
    def __init__(self, method: HttpMethod, requestUri: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Content(self) -> HttpContent: ...
    @property
    def Headers(self) -> Headers.HttpRequestHeaders: ...
    @property
    def Method(self) -> HttpMethod: ...
    @property
    def Options(self) -> HttpRequestOptions: ...
    @property
    def Properties(self) -> Generic.IDictionary: ...
    @property
    def RequestUri(self) -> System.Uri: ...
    @property
    def Version(self) -> System.Version: ...
    @property
    def VersionPolicy(self) -> HttpVersionPolicy: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @RequestUri.setter
    def RequestUri(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @VersionPolicy.setter
    def VersionPolicy(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class HttpRequestOptions(object):
    """    """
    def __init__(self): ...
    @overload
    def Set(self, key: HttpRequestOptionsKey, value: TValue) -> None: ...
    @overload
    def TryGetValue(self, key: HttpRequestOptionsKey) -> (bool, TValue): ...

class HttpRequestOptionsKey(System.ValueType):
    """    HttpRequestOptionsKey[TValue]
    """
    def __init__(self, key: str): ...
    @property
    def Key(self) -> str: ...

class HttpResponseMessage(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusCode: Net.HttpStatusCode): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnsureSuccessStatusCode() -> HttpResponseMessage: ...
    @property
    def Content(self) -> HttpContent: ...
    @property
    def Headers(self) -> Headers.HttpResponseHeaders: ...
    @property
    def IsSuccessStatusCode(self) -> bool: ...
    @property
    def ReasonPhrase(self) -> str: ...
    @property
    def RequestMessage(self) -> HttpRequestMessage: ...
    @property
    def StatusCode(self) -> Net.HttpStatusCode: ...
    @property
    def TrailingHeaders(self) -> Headers.HttpResponseHeaders: ...
    @property
    def Version(self) -> System.Version: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @ReasonPhrase.setter
    def ReasonPhrase(self, value: System.Void): ...
    @RequestMessage.setter
    def RequestMessage(self, value: System.Void): ...
    @StatusCode.setter
    def StatusCode(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class HttpVersionPolicy(enum.Enum):
    RequestVersionOrLower = 0
    RequestVersionOrHigher = 1
    RequestVersionExact = 2

class MessageProcessingHandler(DelegatingHandler):
    """    """

class MultipartContent(HttpContent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, subtype: str): ...
    @overload
    def __init__(self, subtype: str, boundary: str): ...
    @overload
    def Add(self, content: HttpContent) -> None: ...
    @property
    def HeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @HeaderEncodingSelector.setter
    def HeaderEncodingSelector(self, value: System.Void): ...

class MultipartFormDataContent(MultipartContent):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, boundary: str): ...
    @overload
    def Add(self, content: HttpContent) -> None: ...
    @overload
    def Add(self, content: HttpContent, name: str) -> None: ...
    @overload
    def Add(self, content: HttpContent, name: str, fileName: str) -> None: ...

class ReadOnlyMemoryContent(HttpContent):
    """    """
    def __init__(self, content: System.ReadOnlyMemory): ...

class StreamContent(HttpContent):
    """    """
    @overload
    def __init__(self, content: IO.Stream): ...
    @overload
    def __init__(self, content: IO.Stream, bufferSize: int): ...

class StringContent(ByteArrayContent):
    """    """
    @overload
    def __init__(self, content: str): ...
    @overload
    def __init__(self, content: str, mediaType: Headers.MediaTypeHeaderValue): ...
    @overload
    def __init__(self, content: str, encoding: Text.Encoding): ...
    @overload
    def __init__(self, content: str, encoding: Text.Encoding, mediaType: str): ...
    @overload
    def __init__(self, content: str, encoding: Text.Encoding, mediaType: Headers.MediaTypeHeaderValue): ...

class SocketsHttpPlaintextStreamFilterContext(object):
    """    """
    @property
    def InitialRequestMessage(self) -> HttpRequestMessage: ...
    @property
    def NegotiatedHttpVersion(self) -> System.Version: ...
    @property
    def PlaintextStream(self) -> IO.Stream: ...

class HttpKeepAlivePingPolicy(enum.Enum):
    WithActiveRequests = 0
    Always = 1

class SocketsHttpConnectionContext(object):
    """    """
    @property
    def DnsEndPoint(self) -> Net.DnsEndPoint: ...
    @property
    def InitialRequestMessage(self) -> HttpRequestMessage: ...

class SocketsHttpHandler(HttpMessageHandler):
    """    """
    def __init__(self): ...
    @property
    def ActivityHeadersPropagator(self) -> Diagnostics.DistributedContextPropagator: ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def AutomaticDecompression(self) -> Net.DecompressionMethods: ...
    @property
    def ConnectCallback(self) -> System.Func: ...
    @property
    def ConnectTimeout(self) -> System.TimeSpan: ...
    @property
    def CookieContainer(self) -> Net.CookieContainer: ...
    @property
    def Credentials(self) -> Net.ICredentials: ...
    @property
    def DefaultProxyCredentials(self) -> Net.ICredentials: ...
    @property
    def EnableMultipleHttp2Connections(self) -> bool: ...
    @property
    def Expect100ContinueTimeout(self) -> System.TimeSpan: ...
    @property
    def InitialHttp2StreamWindowSize(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def KeepAlivePingDelay(self) -> System.TimeSpan: ...
    @property
    def KeepAlivePingPolicy(self) -> HttpKeepAlivePingPolicy: ...
    @property
    def KeepAlivePingTimeout(self) -> System.TimeSpan: ...
    @property
    def MaxAutomaticRedirections(self) -> int: ...
    @property
    def MaxConnectionsPerServer(self) -> int: ...
    @property
    def MaxResponseDrainSize(self) -> int: ...
    @property
    def MaxResponseHeadersLength(self) -> int: ...
    @property
    def PlaintextStreamFilter(self) -> System.Func: ...
    @property
    def PooledConnectionIdleTimeout(self) -> System.TimeSpan: ...
    @property
    def PooledConnectionLifetime(self) -> System.TimeSpan: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Properties(self) -> Generic.IDictionary: ...
    @property
    def Proxy(self) -> Net.IWebProxy: ...
    @property
    def RequestHeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    @property
    def ResponseDrainTimeout(self) -> System.TimeSpan: ...
    @property
    def ResponseHeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    @property
    def SslOptions(self) -> Security.SslClientAuthenticationOptions: ...
    @property
    def UseCookies(self) -> bool: ...
    @property
    def UseProxy(self) -> bool: ...
    @ActivityHeadersPropagator.setter
    def ActivityHeadersPropagator(self, value: System.Void): ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: System.Void): ...
    @AutomaticDecompression.setter
    def AutomaticDecompression(self, value: System.Void): ...
    @ConnectCallback.setter
    def ConnectCallback(self, value: System.Void): ...
    @ConnectTimeout.setter
    def ConnectTimeout(self, value: System.Void): ...
    @CookieContainer.setter
    def CookieContainer(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @DefaultProxyCredentials.setter
    def DefaultProxyCredentials(self, value: System.Void): ...
    @EnableMultipleHttp2Connections.setter
    def EnableMultipleHttp2Connections(self, value: System.Void): ...
    @Expect100ContinueTimeout.setter
    def Expect100ContinueTimeout(self, value: System.Void): ...
    @InitialHttp2StreamWindowSize.setter
    def InitialHttp2StreamWindowSize(self, value: System.Void): ...
    @KeepAlivePingDelay.setter
    def KeepAlivePingDelay(self, value: System.Void): ...
    @KeepAlivePingPolicy.setter
    def KeepAlivePingPolicy(self, value: System.Void): ...
    @KeepAlivePingTimeout.setter
    def KeepAlivePingTimeout(self, value: System.Void): ...
    @MaxAutomaticRedirections.setter
    def MaxAutomaticRedirections(self, value: System.Void): ...
    @MaxConnectionsPerServer.setter
    def MaxConnectionsPerServer(self, value: System.Void): ...
    @MaxResponseDrainSize.setter
    def MaxResponseDrainSize(self, value: System.Void): ...
    @MaxResponseHeadersLength.setter
    def MaxResponseHeadersLength(self, value: System.Void): ...
    @PlaintextStreamFilter.setter
    def PlaintextStreamFilter(self, value: System.Void): ...
    @PooledConnectionIdleTimeout.setter
    def PooledConnectionIdleTimeout(self, value: System.Void): ...
    @PooledConnectionLifetime.setter
    def PooledConnectionLifetime(self, value: System.Void): ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @RequestHeaderEncodingSelector.setter
    def RequestHeaderEncodingSelector(self, value: System.Void): ...
    @ResponseDrainTimeout.setter
    def ResponseDrainTimeout(self, value: System.Void): ...
    @ResponseHeaderEncodingSelector.setter
    def ResponseHeaderEncodingSelector(self, value: System.Void): ...
    @SslOptions.setter
    def SslOptions(self, value: System.Void): ...
    @UseCookies.setter
    def UseCookies(self, value: System.Void): ...
    @UseProxy.setter
    def UseProxy(self, value: System.Void): ...

# endregion
