"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BigInteger", "Complex"]
# endregion

# region: Imports
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["BitOperations", "Matrix3x2", "Matrix4x4", "Plane", "Quaternion", "Vector", "Vector2", "Vector3", "Vector4", "IAdditionOperators", "IAdditiveIdentity", "IBinaryFloatingPointIeee754", "IBinaryInteger", "IBinaryNumber", "IBitwiseOperators", "IComparisonOperators", "IDecrementOperators", "IDivisionOperators", "IEqualityOperators", "IExponentialFunctions", "IFloatingPoint", "IFloatingPointConstants", "IFloatingPointIeee754", "IHyperbolicFunctions", "IIncrementOperators", "ILogarithmicFunctions", "IMinMaxValue", "IModulusOperators", "IMultiplicativeIdentity", "IMultiplyOperators", "INumber", "INumberBase", "IPowerFunctions", "IRootFunctions", "IShiftOperators", "ISignedNumber", "ISubtractionOperators", "ITrigonometricFunctions", "IUnaryNegationOperators", "IUnaryPlusOperators", "IUnsignedNumber"]
# endregion

# region: Imports
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class BitOperations(object):
    """    """
    @overload
    @staticmethod
    def IsPow2(value: System.UIntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: System.UInt64) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: System.UInt32) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: System.IntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: System.Int64) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: System.UInt32) -> int: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: System.UIntPtr) -> int: ...
    @overload
    @staticmethod
    def Log2(value: System.UInt32) -> int: ...
    @overload
    @staticmethod
    def Log2(value: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def Log2(value: System.UIntPtr) -> int: ...
    @overload
    @staticmethod
    def PopCount(value: System.UIntPtr) -> int: ...
    @overload
    @staticmethod
    def PopCount(value: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def PopCount(value: System.UInt32) -> int: ...
    @overload
    @staticmethod
    def RotateLeft(value: System.UInt64, offset: int) -> System.UInt64: ...
    @overload
    @staticmethod
    def RotateLeft(value: System.UIntPtr, offset: int) -> System.UIntPtr: ...
    @overload
    @staticmethod
    def RotateLeft(value: System.UInt32, offset: int) -> System.UInt32: ...
    @overload
    @staticmethod
    def RotateRight(value: System.UIntPtr, offset: int) -> System.UIntPtr: ...
    @overload
    @staticmethod
    def RotateRight(value: System.UInt64, offset: int) -> System.UInt64: ...
    @overload
    @staticmethod
    def RotateRight(value: System.UInt32, offset: int) -> System.UInt32: ...
    @overload
    @staticmethod
    def RoundUpToPowerOf2(value: System.UInt32) -> System.UInt32: ...
    @overload
    @staticmethod
    def RoundUpToPowerOf2(value: System.UIntPtr) -> System.UIntPtr: ...
    @overload
    @staticmethod
    def RoundUpToPowerOf2(value: System.UInt64) -> System.UInt64: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.IntPtr) -> int: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.UInt64) -> int: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.Int64) -> int: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: int) -> int: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.UIntPtr) -> int: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: System.UInt32) -> int: ...

class Matrix3x2(System.ValueType):
    """    """
    def __init__(self, m11: System.Single, m12: System.Single, m21: System.Single, m22: System.Single, m31: System.Single, m32: System.Single): ...
    @property
    def M11(self) -> System.Single: ...
    @property
    def M12(self) -> System.Single: ...
    @property
    def M21(self) -> System.Single: ...
    @property
    def M22(self) -> System.Single: ...
    @property
    def M31(self) -> System.Single: ...
    @property
    def M32(self) -> System.Single: ...
    @overload
    @staticmethod
    def Add(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateRotation(radians: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateRotation(radians: System.Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(scale: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(scales: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(scale: System.Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(scales: Vector2, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(xScale: System.Single, yScale: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateScale(xScale: System.Single, yScale: System.Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateSkew(radiansX: System.Single, radiansY: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateSkew(radiansX: System.Single, radiansY: System.Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateTranslation(position: Vector2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def CreateTranslation(xPosition: System.Single, yPosition: System.Single) -> Matrix3x2: ...
    @overload
    def Equals(self, other: Matrix3x2) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Identity(self) -> Matrix3x2: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def Translation(self) -> Vector2: ...
    @overload
    def GetDeterminant() -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Invert(matrix: Matrix3x2) -> (bool, Matrix3x2): ...
    @overload
    @staticmethod
    def Lerp(matrix1: Matrix3x2, matrix2: Matrix3x2, amount: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def Multiply(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    @staticmethod
    def Multiply(value1: Matrix3x2, value2: System.Single) -> Matrix3x2: ...
    @overload
    @staticmethod
    def Negate(value: Matrix3x2) -> Matrix3x2: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Translation.setter
    def Translation(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    def ToString() -> str: ...

class Matrix4x4(System.ValueType):
    """    """
    @overload
    def __init__(self, value: Matrix3x2): ...
    @overload
    def __init__(self, m11: System.Single, m12: System.Single, m13: System.Single, m14: System.Single, m21: System.Single, m22: System.Single, m23: System.Single, m24: System.Single, m31: System.Single, m32: System.Single, m33: System.Single, m34: System.Single, m41: System.Single, m42: System.Single, m43: System.Single, m44: System.Single): ...
    @property
    def M11(self) -> System.Single: ...
    @property
    def M12(self) -> System.Single: ...
    @property
    def M13(self) -> System.Single: ...
    @property
    def M14(self) -> System.Single: ...
    @property
    def M21(self) -> System.Single: ...
    @property
    def M22(self) -> System.Single: ...
    @property
    def M23(self) -> System.Single: ...
    @property
    def M24(self) -> System.Single: ...
    @property
    def M31(self) -> System.Single: ...
    @property
    def M32(self) -> System.Single: ...
    @property
    def M33(self) -> System.Single: ...
    @property
    def M34(self) -> System.Single: ...
    @property
    def M41(self) -> System.Single: ...
    @property
    def M42(self) -> System.Single: ...
    @property
    def M43(self) -> System.Single: ...
    @property
    def M44(self) -> System.Single: ...
    @overload
    @staticmethod
    def Add(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateBillboard(objectPosition: Vector3, cameraPosition: Vector3, cameraUpVector: Vector3, cameraForwardVector: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateConstrainedBillboard(objectPosition: Vector3, cameraPosition: Vector3, rotateAxis: Vector3, cameraForwardVector: Vector3, objectForwardVector: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateFromAxisAngle(axis: Vector3, angle: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateFromQuaternion(quaternion: Quaternion) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateFromYawPitchRoll(yaw: System.Single, pitch: System.Single, roll: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateLookAt(cameraPosition: Vector3, cameraTarget: Vector3, cameraUpVector: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateOrthographic(width: System.Single, height: System.Single, zNearPlane: System.Single, zFarPlane: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateOrthographicOffCenter(left: System.Single, right: System.Single, bottom: System.Single, top: System.Single, zNearPlane: System.Single, zFarPlane: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreatePerspective(width: System.Single, height: System.Single, nearPlaneDistance: System.Single, farPlaneDistance: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreatePerspectiveFieldOfView(fieldOfView: System.Single, aspectRatio: System.Single, nearPlaneDistance: System.Single, farPlaneDistance: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreatePerspectiveOffCenter(left: System.Single, right: System.Single, bottom: System.Single, top: System.Single, nearPlaneDistance: System.Single, farPlaneDistance: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateReflection(value: Plane) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationX(radians: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationX(radians: System.Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationY(radians: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationY(radians: System.Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationZ(radians: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateRotationZ(radians: System.Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(scales: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(scale: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(scales: Vector3, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(scale: System.Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(xScale: System.Single, yScale: System.Single, zScale: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateScale(xScale: System.Single, yScale: System.Single, zScale: System.Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateShadow(lightDirection: Vector3, plane: Plane) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateTranslation(position: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateTranslation(xPosition: System.Single, yPosition: System.Single, zPosition: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def CreateWorld(position: Vector3, forward: Vector3, up: Vector3) -> Matrix4x4: ...
    @overload
    @staticmethod
    def Decompose(matrix: Matrix4x4) -> (bool, Vector3, Quaternion, Vector3): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Matrix4x4) -> bool: ...
    @property
    def Identity(self) -> Matrix4x4: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def Translation(self) -> Vector3: ...
    @overload
    def GetDeterminant() -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Invert(matrix: Matrix4x4) -> (bool, Matrix4x4): ...
    @overload
    @staticmethod
    def Lerp(matrix1: Matrix4x4, matrix2: Matrix4x4, amount: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def Multiply(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    @overload
    @staticmethod
    def Multiply(value1: Matrix4x4, value2: System.Single) -> Matrix4x4: ...
    @overload
    @staticmethod
    def Negate(value: Matrix4x4) -> Matrix4x4: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Translation.setter
    def Translation(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Transform(value: Matrix4x4, rotation: Quaternion) -> Matrix4x4: ...
    @overload
    @staticmethod
    def Transpose(matrix: Matrix4x4) -> Matrix4x4: ...

class Plane(System.ValueType):
    """    """
    @overload
    def __init__(self, value: Vector4): ...
    @overload
    def __init__(self, normal: Vector3, d: System.Single): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single, z: System.Single, d: System.Single): ...
    @property
    def Normal(self) -> Vector3: ...
    @property
    def D(self) -> System.Single: ...
    @overload
    @staticmethod
    def CreateFromVertices(point1: Vector3, point2: Vector3, point3: Vector3) -> Plane: ...
    @overload
    @staticmethod
    def Dot(plane: Plane, value: Vector4) -> System.Single: ...
    @overload
    @staticmethod
    def DotCoordinate(plane: Plane, value: Vector3) -> System.Single: ...
    @overload
    @staticmethod
    def DotNormal(plane: Plane, value: Vector3) -> System.Single: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Plane) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Normalize(value: Plane) -> Plane: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Transform(plane: Plane, matrix: Matrix4x4) -> Plane: ...
    @overload
    @staticmethod
    def Transform(plane: Plane, rotation: Quaternion) -> Plane: ...

class Quaternion(System.ValueType):
    """    """
    @overload
    def __init__(self, vectorPart: Vector3, scalarPart: System.Single): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single, z: System.Single, w: System.Single): ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @property
    def Z(self) -> System.Single: ...
    @property
    def W(self) -> System.Single: ...
    @overload
    @staticmethod
    def Add(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def Concatenate(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def Conjugate(value: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def CreateFromAxisAngle(axis: Vector3, angle: System.Single) -> Quaternion: ...
    @overload
    @staticmethod
    def CreateFromRotationMatrix(matrix: Matrix4x4) -> Quaternion: ...
    @overload
    @staticmethod
    def CreateFromYawPitchRoll(yaw: System.Single, pitch: System.Single, roll: System.Single) -> Quaternion: ...
    @overload
    @staticmethod
    def Divide(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def Dot(quaternion1: Quaternion, quaternion2: Quaternion) -> System.Single: ...
    @overload
    def Equals(self, other: Quaternion) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Identity(self) -> Quaternion: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def Zero(self) -> Quaternion: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Inverse(value: Quaternion) -> Quaternion: ...
    @overload
    def Length() -> System.Single: ...
    @overload
    def LengthSquared() -> System.Single: ...
    @overload
    @staticmethod
    def Lerp(quaternion1: Quaternion, quaternion2: Quaternion, amount: System.Single) -> Quaternion: ...
    @overload
    @staticmethod
    def Multiply(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def Multiply(value1: Quaternion, value2: System.Single) -> Quaternion: ...
    @overload
    @staticmethod
    def Negate(value: Quaternion) -> Quaternion: ...
    @overload
    @staticmethod
    def Normalize(value: Quaternion) -> Quaternion: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    @staticmethod
    def Slerp(quaternion1: Quaternion, quaternion2: Quaternion, amount: System.Single) -> Quaternion: ...
    @overload
    @staticmethod
    def Subtract(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    def ToString() -> str: ...

class Vector(object):
    """    """
    @overload
    @staticmethod
    def Abs(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Add(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AndNot(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def As(vector: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorByte(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorDouble(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorInt16(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorInt32(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorInt64(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorNInt(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorNUInt(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorSByte(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorSingle(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorUInt16(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorUInt32(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def AsVectorUInt64(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def BitwiseAnd(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def BitwiseOr(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Ceiling(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Ceiling(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector, left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector, left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConditionalSelect(condition: Vector, left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToDouble(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToDouble(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToInt32(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToInt64(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToSingle(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToSingle(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToUInt32(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ConvertToUInt64(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Divide(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Dot(left: Vector, right: Vector) -> T: ...
    @overload
    @staticmethod
    def Equals(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Equals(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Equals(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Equals(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Equals(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def EqualsAll(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def EqualsAny(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def Floor(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Floor(value: Vector) -> Vector: ...
    @property
    def IsHardwareAccelerated(self) -> bool: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanAll(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanAny(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAll(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def GreaterThanOrEqualAny(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def LessThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThan(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanAll(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def LessThanAny(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanOrEqual(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def LessThanOrEqualAll(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def LessThanOrEqualAny(left: Vector, right: Vector) -> bool: ...
    @overload
    @staticmethod
    def Max(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Min(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Multiply(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Multiply(left: Vector, right: T) -> Vector: ...
    @overload
    @staticmethod
    def Multiply(left: T, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Narrow(low: Vector, high: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Negate(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def OnesComplement(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftLeft(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightArithmetic(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def ShiftRightLogical(value: Vector, shiftCount: int) -> Vector: ...
    @overload
    @staticmethod
    def SquareRoot(value: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Subtract(left: Vector, right: Vector) -> Vector: ...
    @overload
    @staticmethod
    def Sum(value: Vector) -> T: ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Widen(source: Vector) -> (Vector, Vector): ...
    @overload
    @staticmethod
    def Xor(left: Vector, right: Vector) -> Vector: ...

class Vector(System.ValueType):
    """    Vector[T]
    """
    @overload
    def __init__(self, value: T): ...
    @overload
    def __init__(self, values: System.Array[T]): ...
    @overload
    def __init__(self, values: System.ReadOnlySpan): ...
    @overload
    def __init__(self, values: System.ReadOnlySpan): ...
    @overload
    def __init__(self, values: System.Span): ...
    @overload
    def __init__(self, values: System.Array[T], index: int): ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, destination: System.Array[T]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Array[T], startIndex: int) -> None: ...
    @overload
    def Equals(self, other: Vector) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...
    @property
    def Item(self) -> T: ...
    @property
    def One(self) -> Vector: ...
    @property
    def Zero(self) -> Vector: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...
    @overload
    def TryCopyTo(self, destination: System.Span) -> bool: ...
    @overload
    def TryCopyTo(self, destination: System.Span) -> bool: ...

class Vector2(System.ValueType):
    """    """
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, values: System.ReadOnlySpan): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single): ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @overload
    @staticmethod
    def Abs(value: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Add(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Clamp(value1: Vector2, min_: Vector2, max_: Vector2) -> Vector2: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single], index: int) -> None: ...
    @overload
    @staticmethod
    def Distance(value1: Vector2, value2: Vector2) -> System.Single: ...
    @overload
    @staticmethod
    def DistanceSquared(value1: Vector2, value2: Vector2) -> System.Single: ...
    @overload
    @staticmethod
    def Divide(left: Vector2, divisor: System.Single) -> Vector2: ...
    @overload
    @staticmethod
    def Divide(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Dot(value1: Vector2, value2: Vector2) -> System.Single: ...
    @overload
    def Equals(self, other: Vector2) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def One(self) -> Vector2: ...
    @property
    def UnitX(self) -> Vector2: ...
    @property
    def UnitY(self) -> Vector2: ...
    @property
    def Zero(self) -> Vector2: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Length() -> System.Single: ...
    @overload
    def LengthSquared() -> System.Single: ...
    @overload
    @staticmethod
    def Lerp(value1: Vector2, value2: Vector2, amount: System.Single) -> Vector2: ...
    @overload
    @staticmethod
    def Max(value1: Vector2, value2: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Min(value1: Vector2, value2: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Multiply(left: System.Single, right: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Multiply(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Multiply(left: Vector2, right: System.Single) -> Vector2: ...
    @overload
    @staticmethod
    def Negate(value: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Normalize(value: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Reflect(vector: Vector2, normal: Vector2) -> Vector2: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    @staticmethod
    def SquareRoot(value: Vector2) -> Vector2: ...
    @overload
    @staticmethod
    def Subtract(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Transform(value: Vector2, rotation: Quaternion) -> Vector2: ...
    @overload
    @staticmethod
    def Transform(position: Vector2, matrix: Matrix3x2) -> Vector2: ...
    @overload
    @staticmethod
    def Transform(position: Vector2, matrix: Matrix4x4) -> Vector2: ...
    @overload
    @staticmethod
    def TransformNormal(normal: Vector2, matrix: Matrix4x4) -> Vector2: ...
    @overload
    @staticmethod
    def TransformNormal(normal: Vector2, matrix: Matrix3x2) -> Vector2: ...
    @overload
    def TryCopyTo(self, destination: System.Span) -> bool: ...

class Vector3(System.ValueType):
    """    """
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, values: System.ReadOnlySpan): ...
    @overload
    def __init__(self, value: Vector2, z: System.Single): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single, z: System.Single): ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @property
    def Z(self) -> System.Single: ...
    @overload
    @staticmethod
    def Abs(value: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Add(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Clamp(value1: Vector3, min_: Vector3, max_: Vector3) -> Vector3: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single], index: int) -> None: ...
    @overload
    @staticmethod
    def Cross(vector1: Vector3, vector2: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Distance(value1: Vector3, value2: Vector3) -> System.Single: ...
    @overload
    @staticmethod
    def DistanceSquared(value1: Vector3, value2: Vector3) -> System.Single: ...
    @overload
    @staticmethod
    def Divide(left: Vector3, divisor: System.Single) -> Vector3: ...
    @overload
    @staticmethod
    def Divide(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Dot(vector1: Vector3, vector2: Vector3) -> System.Single: ...
    @overload
    def Equals(self, other: Vector3) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def One(self) -> Vector3: ...
    @property
    def UnitX(self) -> Vector3: ...
    @property
    def UnitY(self) -> Vector3: ...
    @property
    def UnitZ(self) -> Vector3: ...
    @property
    def Zero(self) -> Vector3: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Length() -> System.Single: ...
    @overload
    def LengthSquared() -> System.Single: ...
    @overload
    @staticmethod
    def Lerp(value1: Vector3, value2: Vector3, amount: System.Single) -> Vector3: ...
    @overload
    @staticmethod
    def Max(value1: Vector3, value2: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Min(value1: Vector3, value2: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Multiply(left: System.Single, right: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Multiply(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Multiply(left: Vector3, right: System.Single) -> Vector3: ...
    @overload
    @staticmethod
    def Negate(value: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Normalize(value: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Reflect(vector: Vector3, normal: Vector3) -> Vector3: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    @staticmethod
    def SquareRoot(value: Vector3) -> Vector3: ...
    @overload
    @staticmethod
    def Subtract(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Transform(value: Vector3, rotation: Quaternion) -> Vector3: ...
    @overload
    @staticmethod
    def Transform(position: Vector3, matrix: Matrix4x4) -> Vector3: ...
    @overload
    @staticmethod
    def TransformNormal(normal: Vector3, matrix: Matrix4x4) -> Vector3: ...
    @overload
    def TryCopyTo(self, destination: System.Span) -> bool: ...

class Vector4(System.ValueType):
    """    """
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, values: System.ReadOnlySpan): ...
    @overload
    def __init__(self, value: Vector3, w: System.Single): ...
    @overload
    def __init__(self, value: Vector2, z: System.Single, w: System.Single): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single, z: System.Single, w: System.Single): ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @property
    def Z(self) -> System.Single: ...
    @property
    def W(self) -> System.Single: ...
    @overload
    @staticmethod
    def Abs(value: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Add(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Clamp(value1: Vector4, min_: Vector4, max_: Vector4) -> Vector4: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single]) -> None: ...
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    def CopyTo(self, array: System.System.Array[System.Single], index: int) -> None: ...
    @overload
    @staticmethod
    def Distance(value1: Vector4, value2: Vector4) -> System.Single: ...
    @overload
    @staticmethod
    def DistanceSquared(value1: Vector4, value2: Vector4) -> System.Single: ...
    @overload
    @staticmethod
    def Divide(left: Vector4, divisor: System.Single) -> Vector4: ...
    @overload
    @staticmethod
    def Divide(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Dot(vector1: Vector4, vector2: Vector4) -> System.Single: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Vector4) -> bool: ...
    @property
    def Item(self) -> System.Single: ...
    @property
    def One(self) -> Vector4: ...
    @property
    def UnitW(self) -> Vector4: ...
    @property
    def UnitX(self) -> Vector4: ...
    @property
    def UnitY(self) -> Vector4: ...
    @property
    def UnitZ(self) -> Vector4: ...
    @property
    def Zero(self) -> Vector4: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Length() -> System.Single: ...
    @overload
    def LengthSquared() -> System.Single: ...
    @overload
    @staticmethod
    def Lerp(value1: Vector4, value2: Vector4, amount: System.Single) -> Vector4: ...
    @overload
    @staticmethod
    def Max(value1: Vector4, value2: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Min(value1: Vector4, value2: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Multiply(left: System.Single, right: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Multiply(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Multiply(left: Vector4, right: System.Single) -> Vector4: ...
    @overload
    @staticmethod
    def Negate(value: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Normalize(vector: Vector4) -> Vector4: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    @staticmethod
    def SquareRoot(value: Vector4) -> Vector4: ...
    @overload
    @staticmethod
    def Subtract(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: System.IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Transform(value: Vector4, rotation: Quaternion) -> Vector4: ...
    @overload
    @staticmethod
    def Transform(value: Vector3, rotation: Quaternion) -> Vector4: ...
    @overload
    @staticmethod
    def Transform(value: Vector2, rotation: Quaternion) -> Vector4: ...
    @overload
    @staticmethod
    def Transform(position: Vector2, matrix: Matrix4x4) -> Vector4: ...
    @overload
    @staticmethod
    def Transform(vector: Vector4, matrix: Matrix4x4) -> Vector4: ...
    @overload
    @staticmethod
    def Transform(position: Vector3, matrix: Matrix4x4) -> Vector4: ...
    @overload
    def TryCopyTo(self, destination: System.Span) -> bool: ...

class IAdditionOperators:
    """    IAdditionOperators[TSelf, TOther, TResult]
    """

class IAdditiveIdentity:
    """    IAdditiveIdentity[TSelf, TResult]
    """
    @property
    def AdditiveIdentity(self) -> TResult: ...

class IBinaryFloatingPointIeee754:
    """    IBinaryFloatingPointIeee754[TSelf]
    """

class IBinaryInteger:
    """    IBinaryInteger[TSelf]
    """
    @overload
    @staticmethod
    def DivRem(left: TSelf, right: TSelf) -> System.ValueTuple: ...
    @overload
    def GetByteCount() -> int: ...
    @overload
    def GetShortestBitLength() -> int: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def PopCount(value: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def ReadBigEndian(source: System.System.Array[System.Byte], isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def ReadBigEndian(source: System.ReadOnlySpan, isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def ReadBigEndian(source: System.System.Array[System.Byte], startIndex: int, isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def ReadLittleEndian(source: System.System.Array[System.Byte], isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def ReadLittleEndian(source: System.ReadOnlySpan, isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def ReadLittleEndian(source: System.System.Array[System.Byte], startIndex: int, isUnsigned: bool) -> TSelf: ...
    @overload
    @staticmethod
    def RotateLeft(value: TSelf, rotateAmount: int) -> TSelf: ...
    @overload
    @staticmethod
    def RotateRight(value: TSelf, rotateAmount: int) -> TSelf: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def TryReadBigEndian(source: System.ReadOnlySpan, isUnsigned: bool) -> (bool, TSelf): ...
    @overload
    @staticmethod
    def TryReadLittleEndian(source: System.ReadOnlySpan, isUnsigned: bool) -> (bool, TSelf): ...
    @overload
    def TryWriteBigEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryWriteLittleEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def WriteBigEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteBigEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteBigEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...
    @overload
    def WriteLittleEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteLittleEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteLittleEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...

class IBinaryNumber:
    """    IBinaryNumber[TSelf]
    """
    @property
    def AllBitsSet(self) -> TSelf: ...
    @overload
    @staticmethod
    def IsPow2(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def Log2(value: TSelf) -> TSelf: ...

class IBitwiseOperators:
    """    IBitwiseOperators[TSelf, TOther, TResult]
    """

class IComparisonOperators:
    """    IComparisonOperators[TSelf, TOther, TResult]
    """

class IDecrementOperators:
    """    IDecrementOperators[TSelf]
    """

class IDivisionOperators:
    """    IDivisionOperators[TSelf, TOther, TResult]
    """

class IEqualityOperators:
    """    IEqualityOperators[TSelf, TOther, TResult]
    """

class IExponentialFunctions:
    """    IExponentialFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Exp(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Exp10(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Exp10M1(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Exp2(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Exp2M1(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def ExpM1(x: TSelf) -> TSelf: ...

class IFloatingPoint:
    """    IFloatingPoint[TSelf]
    """
    @overload
    @staticmethod
    def Ceiling(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Floor(x: TSelf) -> TSelf: ...
    @overload
    def GetExponentByteCount() -> int: ...
    @overload
    def GetExponentShortestBitLength() -> int: ...
    @overload
    def GetSignificandBitLength() -> int: ...
    @overload
    def GetSignificandByteCount() -> int: ...
    @overload
    @staticmethod
    def Round(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Round(x: TSelf, digits: int) -> TSelf: ...
    @overload
    @staticmethod
    def Round(x: TSelf, mode: System.MidpointRounding) -> TSelf: ...
    @overload
    @staticmethod
    def Round(x: TSelf, digits: int, mode: System.MidpointRounding) -> TSelf: ...
    @overload
    @staticmethod
    def Truncate(x: TSelf) -> TSelf: ...
    @overload
    def TryWriteExponentBigEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryWriteExponentLittleEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryWriteSignificandBigEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryWriteSignificandLittleEndian(self, destination: System.Span) -> (bool, int): ...
    @overload
    def WriteExponentBigEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteExponentBigEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteExponentBigEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...
    @overload
    def WriteExponentLittleEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteExponentLittleEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteExponentLittleEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...
    @overload
    def WriteSignificandBigEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteSignificandBigEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteSignificandBigEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...
    @overload
    def WriteSignificandLittleEndian(self, destination: System.System.Array[System.Byte]) -> int: ...
    @overload
    def WriteSignificandLittleEndian(self, destination: System.Span) -> int: ...
    @overload
    def WriteSignificandLittleEndian(self, destination: System.System.Array[System.Byte], startIndex: int) -> int: ...

class IFloatingPointConstants:
    """    IFloatingPointConstants[TSelf]
    """
    @property
    def E(self) -> TSelf: ...
    @property
    def Pi(self) -> TSelf: ...
    @property
    def Tau(self) -> TSelf: ...

class IFloatingPointIeee754:
    """    IFloatingPointIeee754[TSelf]
    """
    @overload
    @staticmethod
    def Atan2(y: TSelf, x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Atan2Pi(y: TSelf, x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def BitDecrement(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def BitIncrement(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(left: TSelf, right: TSelf, addend: TSelf) -> TSelf: ...
    @property
    def Epsilon(self) -> TSelf: ...
    @property
    def NaN(self) -> TSelf: ...
    @property
    def NegativeInfinity(self) -> TSelf: ...
    @property
    def NegativeZero(self) -> TSelf: ...
    @property
    def PositiveInfinity(self) -> TSelf: ...
    @overload
    @staticmethod
    def Ieee754Remainder(left: TSelf, right: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def ILogB(x: TSelf) -> int: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def ScaleB(x: TSelf, n: int) -> TSelf: ...

class IHyperbolicFunctions:
    """    IHyperbolicFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Acosh(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Asinh(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Atanh(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Cosh(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Sinh(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Tanh(x: TSelf) -> TSelf: ...

class IIncrementOperators:
    """    IIncrementOperators[TSelf]
    """

class ILogarithmicFunctions:
    """    ILogarithmicFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Log(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Log(x: TSelf, newBase: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Log10(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Log10P1(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Log2(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Log2P1(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def LogP1(x: TSelf) -> TSelf: ...

class IMinMaxValue:
    """    IMinMaxValue[TSelf]
    """
    @property
    def MaxValue(self) -> TSelf: ...
    @property
    def MinValue(self) -> TSelf: ...

class IModulusOperators:
    """    IModulusOperators[TSelf, TOther, TResult]
    """

class IMultiplicativeIdentity:
    """    IMultiplicativeIdentity[TSelf, TResult]
    """
    @property
    def MultiplicativeIdentity(self) -> TResult: ...

class IMultiplyOperators:
    """    IMultiplyOperators[TSelf, TOther, TResult]
    """

class INumber:
    """    INumber[TSelf]
    """
    @overload
    @staticmethod
    def Clamp(value: TSelf, min_: TSelf, max_: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def CopySign(value: TSelf, sign: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Max(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def MaxNumber(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Min(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def MinNumber(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Sign(value: TSelf) -> int: ...

class INumberBase:
    """    INumberBase[TSelf]
    """
    @overload
    @staticmethod
    def Abs(value: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> TSelf: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> TSelf: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> TSelf: ...
    @property
    def One(self) -> TSelf: ...
    @property
    def Radix(self) -> int: ...
    @property
    def Zero(self) -> TSelf: ...
    @overload
    @staticmethod
    def IsCanonical(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsComplexNumber(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsImaginaryNumber(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def IsZero(value: TSelf) -> bool: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def MaxMagnitudeNumber(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def MinMagnitude(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def MinMagnitudeNumber(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> TSelf: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> TSelf: ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, TSelf): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, TSelf): ...

class IPowerFunctions:
    """    IPowerFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Pow(x: TSelf, y: TSelf) -> TSelf: ...

class IRootFunctions:
    """    IRootFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Cbrt(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Hypot(x: TSelf, y: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def RootN(x: TSelf, n: int) -> TSelf: ...
    @overload
    @staticmethod
    def Sqrt(x: TSelf) -> TSelf: ...

class IShiftOperators:
    """    IShiftOperators[TSelf, TOther, TResult]
    """

class ISignedNumber:
    """    ISignedNumber[TSelf]
    """
    @property
    def NegativeOne(self) -> TSelf: ...

class ISubtractionOperators:
    """    ISubtractionOperators[TSelf, TOther, TResult]
    """

class ITrigonometricFunctions:
    """    ITrigonometricFunctions[TSelf]
    """
    @overload
    @staticmethod
    def Acos(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def AcosPi(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Asin(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def AsinPi(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Atan(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def AtanPi(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Cos(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def CosPi(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Sin(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def SinCos(x: TSelf) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def SinCosPi(x: TSelf) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def SinPi(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def Tan(x: TSelf) -> TSelf: ...
    @overload
    @staticmethod
    def TanPi(x: TSelf) -> TSelf: ...

class IUnaryNegationOperators:
    """    IUnaryNegationOperators[TSelf, TResult]
    """

class IUnaryPlusOperators:
    """    IUnaryPlusOperators[TSelf, TResult]
    """

class IUnsignedNumber:
    """    IUnsignedNumber[TSelf]
    """

# endregion

# region: System.Runtime.Numerics, Version=7.0.0.0

class BigInteger(System.ValueType):
    """    """
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: System.UInt32): ...
    @overload
    def __init__(self, value: System.Int64): ...
    @overload
    def __init__(self, value: System.UInt64): ...
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: System.Decimal): ...
    @overload
    def __init__(self, value: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, value: System.ReadOnlySpan, isUnsigned: bool, isBigEndian: bool): ...
    @overload
    @staticmethod
    def Abs(value: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Add(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Clamp(value: BigInteger, min_: BigInteger, max_: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Compare(left: BigInteger, right: BigInteger) -> int: ...
    @overload
    def CompareTo(self, other: System.Int64) -> int: ...
    @overload
    def CompareTo(self, other: System.UInt64) -> int: ...
    @overload
    def CompareTo(self, other: BigInteger) -> int: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: BigInteger, sign: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> BigInteger: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> BigInteger: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> BigInteger: ...
    @overload
    @staticmethod
    def Divide(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def DivRem(left: BigInteger, right: BigInteger) -> System.ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(dividend: BigInteger, divisor: BigInteger) -> (BigInteger, BigInteger): ...
    @overload
    def Equals(self, other: System.UInt64) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: BigInteger) -> bool: ...
    @overload
    def Equals(self, other: System.Int64) -> bool: ...
    @property
    def IsEven(self) -> bool: ...
    @property
    def IsOne(self) -> bool: ...
    @property
    def IsPowerOfTwo(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def MinusOne(self) -> BigInteger: ...
    @property
    def One(self) -> BigInteger: ...
    @property
    def Sign(self) -> int: ...
    @property
    def Zero(self) -> BigInteger: ...
    @overload
    def GetBitLength() -> System.Int64: ...
    @overload
    def GetByteCount(self, isUnsigned: bool) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GreatestCommonDivisor(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: BigInteger) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: BigInteger) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Log(value: BigInteger) -> float: ...
    @overload
    @staticmethod
    def Log(value: BigInteger, baseValue: float) -> float: ...
    @overload
    @staticmethod
    def Log10(value: BigInteger) -> float: ...
    @overload
    @staticmethod
    def Log2(value: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Max(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: BigInteger, y: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Min(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def MinMagnitude(x: BigInteger, y: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def ModPow(value: BigInteger, exponent: BigInteger, modulus: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Multiply(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Negate(value: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(value: str) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(value: str, style: Globalization.NumberStyles) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(value: str, provider: System.IFormatProvider) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(value: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> BigInteger: ...
    @overload
    @staticmethod
    def Parse(value: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> BigInteger: ...
    @overload
    @staticmethod
    def PopCount(value: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def Pow(value: BigInteger, exponent: int) -> BigInteger: ...
    @overload
    @staticmethod
    def Remainder(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    @overload
    @staticmethod
    def RotateLeft(value: BigInteger, rotateAmount: int) -> BigInteger: ...
    @overload
    @staticmethod
    def RotateRight(value: BigInteger, rotateAmount: int) -> BigInteger: ...
    @overload
    @staticmethod
    def Subtract(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    def ToByteArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ToByteArray(self, isUnsigned: bool, isBigEndian: bool) -> System.System.Array[System.Byte]: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: System.IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: System.IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: BigInteger) -> BigInteger: ...
    @overload
    def TryFormat(self, destination: System.Span, format_: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(value: str) -> (bool, BigInteger): ...
    @overload
    @staticmethod
    def TryParse(value: System.ReadOnlySpan) -> (bool, BigInteger): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: System.IFormatProvider) -> (bool, BigInteger): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, BigInteger): ...
    @overload
    @staticmethod
    def TryParse(value: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, BigInteger): ...
    @overload
    @staticmethod
    def TryParse(value: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, BigInteger): ...
    @overload
    def TryWriteBytes(self, destination: System.Span, isUnsigned: bool, isBigEndian: bool) -> (bool, int): ...

class Complex(System.ValueType):
    """    """
    def __init__(self, real: float, imaginary: float): ...
    @property
    def Zero(self) -> Complex: ...
    @property
    def One(self) -> Complex: ...
    @property
    def ImaginaryOne(self) -> Complex: ...
    @property
    def NaN(self) -> Complex: ...
    @property
    def Infinity(self) -> Complex: ...
    @overload
    @staticmethod
    def Abs(value: Complex) -> float: ...
    @overload
    @staticmethod
    def Acos(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Add(left: float, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Add(left: Complex, right: float) -> Complex: ...
    @overload
    @staticmethod
    def Add(left: Complex, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Asin(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Atan(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Conjugate(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Cos(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Cosh(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Complex: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Complex: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Complex: ...
    @overload
    @staticmethod
    def Divide(dividend: Complex, divisor: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Divide(dividend: Complex, divisor: float) -> Complex: ...
    @overload
    @staticmethod
    def Divide(dividend: float, divisor: Complex) -> Complex: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, value: Complex) -> bool: ...
    @overload
    @staticmethod
    def Exp(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def FromPolarCoordinates(magnitude: float, phase: float) -> Complex: ...
    @property
    def Imaginary(self) -> float: ...
    @property
    def Magnitude(self) -> float: ...
    @property
    def Phase(self) -> float: ...
    @property
    def Real(self) -> float: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsComplexNumber(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsImaginaryNumber(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(value: Complex) -> bool: ...
    @overload
    @staticmethod
    def Log(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Log(value: Complex, baseValue: float) -> Complex: ...
    @overload
    @staticmethod
    def Log10(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Complex, y: Complex) -> Complex: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Complex, y: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Multiply(left: Complex, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Multiply(left: Complex, right: float) -> Complex: ...
    @overload
    @staticmethod
    def Multiply(left: float, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Negate(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> Complex: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: System.IFormatProvider) -> Complex: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> Complex: ...
    @overload
    @staticmethod
    def Parse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> Complex: ...
    @overload
    @staticmethod
    def Pow(value: Complex, power: float) -> Complex: ...
    @overload
    @staticmethod
    def Pow(value: Complex, power: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Reciprocal(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Sin(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Sinh(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Sqrt(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Subtract(left: Complex, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Subtract(left: float, right: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Subtract(left: Complex, right: float) -> Complex: ...
    @overload
    @staticmethod
    def Tan(value: Complex) -> Complex: ...
    @overload
    @staticmethod
    def Tanh(value: Complex) -> Complex: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: System.IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: System.IFormatProvider) -> str: ...
    @overload
    def TryFormat(self, destination: System.Span, format_: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: System.IFormatProvider) -> (bool, Complex): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, provider: System.IFormatProvider) -> (bool, Complex): ...
    @overload
    @staticmethod
    def TryParse(s: System.ReadOnlySpan, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, Complex): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: System.IFormatProvider) -> (bool, Complex): ...

# endregion
