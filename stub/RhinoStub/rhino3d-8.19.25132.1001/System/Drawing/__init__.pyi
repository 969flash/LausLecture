"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Design"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["ColorConverter", "PointConverter", "RectangleConverter", "SizeConverter", "SizeFConverter"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Configuration"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Printing"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Design"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text", "Drawing2D", "Design", "Printing", "Imaging", "Bitmap", "BitmapSuffixInSameAssemblyAttribute", "BitmapSuffixInSatelliteAssemblyAttribute", "BufferedGraphics", "BufferedGraphicsContext", "Brushes", "CharacterRange", "ContentAlignment", "IDeviceContext", "Graphics", "GraphicsUnit", "IconConverter", "Image", "ImageAnimator", "ImageConverter", "ImageFormatConverter", "Pen", "Pens", "RotateFlipType", "StringFormat", "SystemFonts", "SystemPens", "CopyPixelOperation", "FontStyle", "Region", "StringAlignment", "StringDigitSubstitute", "StringFormatFlags", "StringTrimming", "StringUnit", "Brush", "Font", "FontConverter", "FontFamily", "SolidBrush", "SystemBrushes", "TextureBrush", "BufferedGraphicsManager", "Icon", "SystemIcons", "ToolboxBitmapAttribute", "DrawImageAbort", "EnumerateMetafileProc", "GetThumbnailImageAbort", "FontNameConverter", "FontUnitConverter"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import IO
from System import Numerics
from System.Drawing import Drawing2D
from System.Drawing import Imaging
from System.Drawing import Text
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Point", "PointF", "Rectangle", "RectangleF", "Size", "SizeF", "Color", "ColorTranslator", "KnownColor", "SystemColors"]
# endregion

# region: Imports
from System import Numerics
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Drawing.Primitives, Version=7.0.0.0

class Point(System.ValueType):
    """    """
    @overload
    def __init__(self, sz: Size): ...
    @overload
    def __init__(self, dw: int): ...
    @overload
    def __init__(self, x: int, y: int): ...
    @property
    def Empty(self) -> Point: ...
    @overload
    @staticmethod
    def Add(pt: Point, sz: Size) -> Point: ...
    @overload
    @staticmethod
    def Ceiling(value: PointF) -> Point: ...
    @overload
    def Equals(self, other: Point) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Offset(self, p: Point) -> None: ...
    @overload
    def Offset(self, dx: int, dy: int) -> None: ...
    @overload
    @staticmethod
    def Round(value: PointF) -> Point: ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(pt: Point, sz: Size) -> Point: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Truncate(value: PointF) -> Point: ...

class PointF(System.ValueType):
    """    """
    @overload
    def __init__(self, vector: Numerics.Vector2): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single): ...
    @property
    def Empty(self) -> PointF: ...
    @overload
    @staticmethod
    def Add(pt: PointF, sz: SizeF) -> PointF: ...
    @overload
    @staticmethod
    def Add(pt: PointF, sz: Size) -> PointF: ...
    @overload
    def Equals(self, other: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(pt: PointF, sz: SizeF) -> PointF: ...
    @overload
    @staticmethod
    def Subtract(pt: PointF, sz: Size) -> PointF: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToVector2() -> Numerics.Vector2: ...

class Rectangle(System.ValueType):
    """    """
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, x: int, y: int, width: int, height: int): ...
    @property
    def Empty(self) -> Rectangle: ...
    @overload
    @staticmethod
    def Ceiling(value: RectangleF) -> Rectangle: ...
    @overload
    def Contains(self, rect: Rectangle) -> bool: ...
    @overload
    def Contains(self, pt: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, other: Rectangle) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromLTRB(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Inflate(self, size: Size) -> None: ...
    @overload
    def Inflate(self, width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def Inflate(rect: Rectangle, x: int, y: int) -> Rectangle: ...
    @overload
    def Intersect(self, rect: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Intersect(a: Rectangle, b: Rectangle) -> Rectangle: ...
    @overload
    def IntersectsWith(self, rect: Rectangle) -> bool: ...
    @overload
    def Offset(self, pos: Point) -> None: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def Round(value: RectangleF) -> Rectangle: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Truncate(value: RectangleF) -> Rectangle: ...
    @overload
    @staticmethod
    def Union(a: Rectangle, b: Rectangle) -> Rectangle: ...

class RectangleF(System.ValueType):
    """    """
    @overload
    def __init__(self, vector: Numerics.Vector4): ...
    @overload
    def __init__(self, location: PointF, size: SizeF): ...
    @overload
    def __init__(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single): ...
    @property
    def Empty(self) -> RectangleF: ...
    @overload
    def Contains(self, rect: RectangleF) -> bool: ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Contains(self, x: System.Single, y: System.Single) -> bool: ...
    @overload
    def Equals(self, other: RectangleF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromLTRB(left: System.Single, top: System.Single, right: System.Single, bottom: System.Single) -> RectangleF: ...
    @property
    def Bottom(self) -> System.Single: ...
    @property
    def Height(self) -> System.Single: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> System.Single: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def Right(self) -> System.Single: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Top(self) -> System.Single: ...
    @property
    def Width(self) -> System.Single: ...
    @property
    def X(self) -> System.Single: ...
    @property
    def Y(self) -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Inflate(self, size: SizeF) -> None: ...
    @overload
    def Inflate(self, x: System.Single, y: System.Single) -> None: ...
    @overload
    @staticmethod
    def Inflate(rect: RectangleF, x: System.Single, y: System.Single) -> RectangleF: ...
    @overload
    def Intersect(self, rect: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Intersect(a: RectangleF, b: RectangleF) -> RectangleF: ...
    @overload
    def IntersectsWith(self, rect: RectangleF) -> bool: ...
    @overload
    def Offset(self, pos: PointF) -> None: ...
    @overload
    def Offset(self, x: System.Single, y: System.Single) -> None: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToVector4() -> Numerics.Vector4: ...
    @overload
    @staticmethod
    def Union(a: RectangleF, b: RectangleF) -> RectangleF: ...

class Size(System.ValueType):
    """    """
    @overload
    def __init__(self, pt: Point): ...
    @overload
    def __init__(self, width: int, height: int): ...
    @property
    def Empty(self) -> Size: ...
    @overload
    @staticmethod
    def Add(sz1: Size, sz2: Size) -> Size: ...
    @overload
    @staticmethod
    def Ceiling(value: SizeF) -> Size: ...
    @overload
    def Equals(self, other: Size) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Round(value: SizeF) -> Size: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(sz1: Size, sz2: Size) -> Size: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Truncate(value: SizeF) -> Size: ...

class SizeF(System.ValueType):
    """    """
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, pt: PointF): ...
    @overload
    def __init__(self, vector: Numerics.Vector2): ...
    @overload
    def __init__(self, width: System.Single, height: System.Single): ...
    @property
    def Empty(self) -> SizeF: ...
    @overload
    @staticmethod
    def Add(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    @overload
    def Equals(self, other: SizeF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Height(self) -> System.Single: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    @overload
    def ToPointF() -> PointF: ...
    @overload
    def ToSize() -> Size: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToVector2() -> Numerics.Vector2: ...

class Color(System.ValueType):
    """    """
    @property
    def Empty(self) -> Color: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Color) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(argb: int) -> Color: ...
    @overload
    @staticmethod
    def FromArgb(alpha: int, baseColor: Color) -> Color: ...
    @overload
    @staticmethod
    def FromArgb(red: int, green: int, blue: int) -> Color: ...
    @overload
    @staticmethod
    def FromArgb(alpha: int, red: int, green: int, blue: int) -> Color: ...
    @overload
    @staticmethod
    def FromKnownColor(color: KnownColor) -> Color: ...
    @overload
    @staticmethod
    def FromName(name: str) -> Color: ...
    @property
    def A(self) -> System.Byte: ...
    @property
    def AliceBlue(self) -> Color: ...
    @property
    def AntiqueWhite(self) -> Color: ...
    @property
    def Aqua(self) -> Color: ...
    @property
    def Aquamarine(self) -> Color: ...
    @property
    def Azure(self) -> Color: ...
    @property
    def B(self) -> System.Byte: ...
    @property
    def Beige(self) -> Color: ...
    @property
    def Bisque(self) -> Color: ...
    @property
    def Black(self) -> Color: ...
    @property
    def BlanchedAlmond(self) -> Color: ...
    @property
    def Blue(self) -> Color: ...
    @property
    def BlueViolet(self) -> Color: ...
    @property
    def Brown(self) -> Color: ...
    @property
    def BurlyWood(self) -> Color: ...
    @property
    def CadetBlue(self) -> Color: ...
    @property
    def Chartreuse(self) -> Color: ...
    @property
    def Chocolate(self) -> Color: ...
    @property
    def Coral(self) -> Color: ...
    @property
    def CornflowerBlue(self) -> Color: ...
    @property
    def Cornsilk(self) -> Color: ...
    @property
    def Crimson(self) -> Color: ...
    @property
    def Cyan(self) -> Color: ...
    @property
    def DarkBlue(self) -> Color: ...
    @property
    def DarkCyan(self) -> Color: ...
    @property
    def DarkGoldenrod(self) -> Color: ...
    @property
    def DarkGray(self) -> Color: ...
    @property
    def DarkGreen(self) -> Color: ...
    @property
    def DarkKhaki(self) -> Color: ...
    @property
    def DarkMagenta(self) -> Color: ...
    @property
    def DarkOliveGreen(self) -> Color: ...
    @property
    def DarkOrange(self) -> Color: ...
    @property
    def DarkOrchid(self) -> Color: ...
    @property
    def DarkRed(self) -> Color: ...
    @property
    def DarkSalmon(self) -> Color: ...
    @property
    def DarkSeaGreen(self) -> Color: ...
    @property
    def DarkSlateBlue(self) -> Color: ...
    @property
    def DarkSlateGray(self) -> Color: ...
    @property
    def DarkTurquoise(self) -> Color: ...
    @property
    def DarkViolet(self) -> Color: ...
    @property
    def DeepPink(self) -> Color: ...
    @property
    def DeepSkyBlue(self) -> Color: ...
    @property
    def DimGray(self) -> Color: ...
    @property
    def DodgerBlue(self) -> Color: ...
    @property
    def Firebrick(self) -> Color: ...
    @property
    def FloralWhite(self) -> Color: ...
    @property
    def ForestGreen(self) -> Color: ...
    @property
    def Fuchsia(self) -> Color: ...
    @property
    def G(self) -> System.Byte: ...
    @property
    def Gainsboro(self) -> Color: ...
    @property
    def GhostWhite(self) -> Color: ...
    @property
    def Gold(self) -> Color: ...
    @property
    def Goldenrod(self) -> Color: ...
    @property
    def Gray(self) -> Color: ...
    @property
    def Green(self) -> Color: ...
    @property
    def GreenYellow(self) -> Color: ...
    @property
    def Honeydew(self) -> Color: ...
    @property
    def HotPink(self) -> Color: ...
    @property
    def IndianRed(self) -> Color: ...
    @property
    def Indigo(self) -> Color: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsKnownColor(self) -> bool: ...
    @property
    def IsNamedColor(self) -> bool: ...
    @property
    def IsSystemColor(self) -> bool: ...
    @property
    def Ivory(self) -> Color: ...
    @property
    def Khaki(self) -> Color: ...
    @property
    def Lavender(self) -> Color: ...
    @property
    def LavenderBlush(self) -> Color: ...
    @property
    def LawnGreen(self) -> Color: ...
    @property
    def LemonChiffon(self) -> Color: ...
    @property
    def LightBlue(self) -> Color: ...
    @property
    def LightCoral(self) -> Color: ...
    @property
    def LightCyan(self) -> Color: ...
    @property
    def LightGoldenrodYellow(self) -> Color: ...
    @property
    def LightGray(self) -> Color: ...
    @property
    def LightGreen(self) -> Color: ...
    @property
    def LightPink(self) -> Color: ...
    @property
    def LightSalmon(self) -> Color: ...
    @property
    def LightSeaGreen(self) -> Color: ...
    @property
    def LightSkyBlue(self) -> Color: ...
    @property
    def LightSlateGray(self) -> Color: ...
    @property
    def LightSteelBlue(self) -> Color: ...
    @property
    def LightYellow(self) -> Color: ...
    @property
    def Lime(self) -> Color: ...
    @property
    def LimeGreen(self) -> Color: ...
    @property
    def Linen(self) -> Color: ...
    @property
    def Magenta(self) -> Color: ...
    @property
    def Maroon(self) -> Color: ...
    @property
    def MediumAquamarine(self) -> Color: ...
    @property
    def MediumBlue(self) -> Color: ...
    @property
    def MediumOrchid(self) -> Color: ...
    @property
    def MediumPurple(self) -> Color: ...
    @property
    def MediumSeaGreen(self) -> Color: ...
    @property
    def MediumSlateBlue(self) -> Color: ...
    @property
    def MediumSpringGreen(self) -> Color: ...
    @property
    def MediumTurquoise(self) -> Color: ...
    @property
    def MediumVioletRed(self) -> Color: ...
    @property
    def MidnightBlue(self) -> Color: ...
    @property
    def MintCream(self) -> Color: ...
    @property
    def MistyRose(self) -> Color: ...
    @property
    def Moccasin(self) -> Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def NavajoWhite(self) -> Color: ...
    @property
    def Navy(self) -> Color: ...
    @property
    def OldLace(self) -> Color: ...
    @property
    def Olive(self) -> Color: ...
    @property
    def OliveDrab(self) -> Color: ...
    @property
    def Orange(self) -> Color: ...
    @property
    def OrangeRed(self) -> Color: ...
    @property
    def Orchid(self) -> Color: ...
    @property
    def PaleGoldenrod(self) -> Color: ...
    @property
    def PaleGreen(self) -> Color: ...
    @property
    def PaleTurquoise(self) -> Color: ...
    @property
    def PaleVioletRed(self) -> Color: ...
    @property
    def PapayaWhip(self) -> Color: ...
    @property
    def PeachPuff(self) -> Color: ...
    @property
    def Peru(self) -> Color: ...
    @property
    def Pink(self) -> Color: ...
    @property
    def Plum(self) -> Color: ...
    @property
    def PowderBlue(self) -> Color: ...
    @property
    def Purple(self) -> Color: ...
    @property
    def R(self) -> System.Byte: ...
    @property
    def RebeccaPurple(self) -> Color: ...
    @property
    def Red(self) -> Color: ...
    @property
    def RosyBrown(self) -> Color: ...
    @property
    def RoyalBlue(self) -> Color: ...
    @property
    def SaddleBrown(self) -> Color: ...
    @property
    def Salmon(self) -> Color: ...
    @property
    def SandyBrown(self) -> Color: ...
    @property
    def SeaGreen(self) -> Color: ...
    @property
    def SeaShell(self) -> Color: ...
    @property
    def Sienna(self) -> Color: ...
    @property
    def Silver(self) -> Color: ...
    @property
    def SkyBlue(self) -> Color: ...
    @property
    def SlateBlue(self) -> Color: ...
    @property
    def SlateGray(self) -> Color: ...
    @property
    def Snow(self) -> Color: ...
    @property
    def SpringGreen(self) -> Color: ...
    @property
    def SteelBlue(self) -> Color: ...
    @property
    def Tan(self) -> Color: ...
    @property
    def Teal(self) -> Color: ...
    @property
    def Thistle(self) -> Color: ...
    @property
    def Tomato(self) -> Color: ...
    @property
    def Transparent(self) -> Color: ...
    @property
    def Turquoise(self) -> Color: ...
    @property
    def Violet(self) -> Color: ...
    @property
    def Wheat(self) -> Color: ...
    @property
    def White(self) -> Color: ...
    @property
    def WhiteSmoke(self) -> Color: ...
    @property
    def Yellow(self) -> Color: ...
    @property
    def YellowGreen(self) -> Color: ...
    @overload
    def GetBrightness() -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHue() -> System.Single: ...
    @overload
    def GetSaturation() -> System.Single: ...
    @overload
    def ToArgb() -> int: ...
    @overload
    def ToKnownColor() -> KnownColor: ...
    @overload
    def ToString() -> str: ...

class ColorTranslator(object):
    """    """
    @overload
    @staticmethod
    def FromHtml(htmlColor: str) -> Color: ...
    @overload
    @staticmethod
    def FromOle(oleColor: int) -> Color: ...
    @overload
    @staticmethod
    def FromWin32(win32Color: int) -> Color: ...
    @overload
    @staticmethod
    def ToHtml(c: Color) -> str: ...
    @overload
    @staticmethod
    def ToOle(c: Color) -> int: ...
    @overload
    @staticmethod
    def ToWin32(c: Color) -> int: ...

class KnownColor(enum.Enum):
    ActiveBorder = 1
    ActiveCaption = 2
    ActiveCaptionText = 3
    AppWorkspace = 4
    Control = 5
    ControlDark = 6
    ControlDarkDark = 7
    ControlLight = 8
    ControlLightLight = 9
    ControlText = 10
    Desktop = 11
    GrayText = 12
    Highlight = 13
    HighlightText = 14
    HotTrack = 15
    InactiveBorder = 16
    InactiveCaption = 17
    InactiveCaptionText = 18
    Info = 19
    InfoText = 20
    Menu = 21
    MenuText = 22
    ScrollBar = 23
    Window = 24
    WindowFrame = 25
    WindowText = 26
    Transparent = 27
    AliceBlue = 28
    AntiqueWhite = 29
    Aqua = 30
    Aquamarine = 31
    Azure = 32
    Beige = 33
    Bisque = 34
    Black = 35
    BlanchedAlmond = 36
    Blue = 37
    BlueViolet = 38
    Brown = 39
    BurlyWood = 40
    CadetBlue = 41
    Chartreuse = 42
    Chocolate = 43
    Coral = 44
    CornflowerBlue = 45
    Cornsilk = 46
    Crimson = 47
    Cyan = 48
    DarkBlue = 49
    DarkCyan = 50
    DarkGoldenrod = 51
    DarkGray = 52
    DarkGreen = 53
    DarkKhaki = 54
    DarkMagenta = 55
    DarkOliveGreen = 56
    DarkOrange = 57
    DarkOrchid = 58
    DarkRed = 59
    DarkSalmon = 60
    DarkSeaGreen = 61
    DarkSlateBlue = 62
    DarkSlateGray = 63
    DarkTurquoise = 64
    DarkViolet = 65
    DeepPink = 66
    DeepSkyBlue = 67
    DimGray = 68
    DodgerBlue = 69
    Firebrick = 70
    FloralWhite = 71
    ForestGreen = 72
    Fuchsia = 73
    Gainsboro = 74
    GhostWhite = 75
    Gold = 76
    Goldenrod = 77
    Gray = 78
    Green = 79
    GreenYellow = 80
    Honeydew = 81
    HotPink = 82
    IndianRed = 83
    Indigo = 84
    Ivory = 85
    Khaki = 86
    Lavender = 87
    LavenderBlush = 88
    LawnGreen = 89
    LemonChiffon = 90
    LightBlue = 91
    LightCoral = 92
    LightCyan = 93
    LightGoldenrodYellow = 94
    LightGray = 95
    LightGreen = 96
    LightPink = 97
    LightSalmon = 98
    LightSeaGreen = 99
    LightSkyBlue = 100
    LightSlateGray = 101
    LightSteelBlue = 102
    LightYellow = 103
    Lime = 104
    LimeGreen = 105
    Linen = 106
    Magenta = 107
    Maroon = 108
    MediumAquamarine = 109
    MediumBlue = 110
    MediumOrchid = 111
    MediumPurple = 112
    MediumSeaGreen = 113
    MediumSlateBlue = 114
    MediumSpringGreen = 115
    MediumTurquoise = 116
    MediumVioletRed = 117
    MidnightBlue = 118
    MintCream = 119
    MistyRose = 120
    Moccasin = 121
    NavajoWhite = 122
    Navy = 123
    OldLace = 124
    Olive = 125
    OliveDrab = 126
    Orange = 127
    OrangeRed = 128
    Orchid = 129
    PaleGoldenrod = 130
    PaleGreen = 131
    PaleTurquoise = 132
    PaleVioletRed = 133
    PapayaWhip = 134
    PeachPuff = 135
    Peru = 136
    Pink = 137
    Plum = 138
    PowderBlue = 139
    Purple = 140
    Red = 141
    RosyBrown = 142
    RoyalBlue = 143
    SaddleBrown = 144
    Salmon = 145
    SandyBrown = 146
    SeaGreen = 147
    SeaShell = 148
    Sienna = 149
    Silver = 150
    SkyBlue = 151
    SlateBlue = 152
    SlateGray = 153
    Snow = 154
    SpringGreen = 155
    SteelBlue = 156
    Tan = 157
    Teal = 158
    Thistle = 159
    Tomato = 160
    Turquoise = 161
    Violet = 162
    Wheat = 163
    White = 164
    WhiteSmoke = 165
    Yellow = 166
    YellowGreen = 167
    ButtonFace = 168
    ButtonHighlight = 169
    ButtonShadow = 170
    GradientActiveCaption = 171
    GradientInactiveCaption = 172
    MenuBar = 173
    MenuHighlight = 174
    RebeccaPurple = 175

class SystemColors(object):
    """    """
    @property
    def ActiveBorder(self) -> Color: ...
    @property
    def ActiveCaption(self) -> Color: ...
    @property
    def ActiveCaptionText(self) -> Color: ...
    @property
    def AppWorkspace(self) -> Color: ...
    @property
    def ButtonFace(self) -> Color: ...
    @property
    def ButtonHighlight(self) -> Color: ...
    @property
    def ButtonShadow(self) -> Color: ...
    @property
    def Control(self) -> Color: ...
    @property
    def ControlDark(self) -> Color: ...
    @property
    def ControlDarkDark(self) -> Color: ...
    @property
    def ControlLight(self) -> Color: ...
    @property
    def ControlLightLight(self) -> Color: ...
    @property
    def ControlText(self) -> Color: ...
    @property
    def Desktop(self) -> Color: ...
    @property
    def GradientActiveCaption(self) -> Color: ...
    @property
    def GradientInactiveCaption(self) -> Color: ...
    @property
    def GrayText(self) -> Color: ...
    @property
    def Highlight(self) -> Color: ...
    @property
    def HighlightText(self) -> Color: ...
    @property
    def HotTrack(self) -> Color: ...
    @property
    def InactiveBorder(self) -> Color: ...
    @property
    def InactiveCaption(self) -> Color: ...
    @property
    def InactiveCaptionText(self) -> Color: ...
    @property
    def Info(self) -> Color: ...
    @property
    def InfoText(self) -> Color: ...
    @property
    def Menu(self) -> Color: ...
    @property
    def MenuBar(self) -> Color: ...
    @property
    def MenuHighlight(self) -> Color: ...
    @property
    def MenuText(self) -> Color: ...
    @property
    def ScrollBar(self) -> Color: ...
    @property
    def Window(self) -> Color: ...
    @property
    def WindowFrame(self) -> Color: ...
    @property
    def WindowText(self) -> Color: ...

# endregion

# region: System.Drawing.Common, Version=7.0.0.0

class Bitmap(Image):
    """    """
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, original: Image): ...
    @overload
    def __init__(self, filename: str, useIcm: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, useIcm: bool): ...
    @overload
    def __init__(self, type_: System.Type, resource: str): ...
    @overload
    def __init__(self, width: int, height: int): ...
    @overload
    def __init__(self, original: Image, newSize: Size): ...
    @overload
    def __init__(self, width: int, height: int, g: Graphics): ...
    @overload
    def __init__(self, width: int, height: int, format_: Imaging.PixelFormat): ...
    @overload
    def __init__(self, original: Image, width: int, height: int): ...
    @overload
    def __init__(self, width: int, height: int, stride: int, format_: Imaging.PixelFormat, scan0: System.IntPtr): ...
    @overload
    def Clone(self, rect: Rectangle, format_: Imaging.PixelFormat) -> Bitmap: ...
    @overload
    def Clone(self, rect: RectangleF, format_: Imaging.PixelFormat) -> Bitmap: ...
    @overload
    @staticmethod
    def FromHicon(hicon: System.IntPtr) -> Bitmap: ...
    @overload
    @staticmethod
    def FromResource(hinstance: System.IntPtr, bitmapName: str) -> Bitmap: ...
    @overload
    def GetHbitmap() -> System.IntPtr: ...
    @overload
    def GetHbitmap(self, background: Color) -> System.IntPtr: ...
    @overload
    def GetHicon() -> System.IntPtr: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def LockBits(self, rect: Rectangle, flags: Imaging.ImageLockMode, format_: Imaging.PixelFormat) -> Imaging.BitmapData: ...
    @overload
    def LockBits(self, rect: Rectangle, flags: Imaging.ImageLockMode, format_: Imaging.PixelFormat, bitmapData: Imaging.BitmapData) -> Imaging.BitmapData: ...
    @overload
    def MakeTransparent() -> None: ...
    @overload
    def MakeTransparent(self, transparentColor: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def SetResolution(self, xDpi: System.Single, yDpi: System.Single) -> None: ...
    @overload
    def UnlockBits(self, bitmapdata: Imaging.BitmapData) -> None: ...

class BitmapSuffixInSameAssemblyAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class BitmapSuffixInSatelliteAssemblyAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class BufferedGraphics(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    def Render() -> None: ...
    @overload
    def Render(self, target: Graphics) -> None: ...
    @overload
    def Render(self, targetDC: System.IntPtr) -> None: ...

class BufferedGraphicsContext(object):
    """    """
    def __init__(self): ...
    @overload
    def Allocate(self, targetGraphics: Graphics, targetRectangle: Rectangle) -> BufferedGraphics: ...
    @overload
    def Allocate(self, targetDC: System.IntPtr, targetRectangle: Rectangle) -> BufferedGraphics: ...
    @overload
    def Dispose() -> None: ...
    @property
    def MaximumBuffer(self) -> Size: ...
    @overload
    def Invalidate() -> None: ...
    @MaximumBuffer.setter
    def MaximumBuffer(self, value: System.Void): ...

class Brushes(object):
    """    """
    @property
    def AliceBlue(self) -> Brush: ...
    @property
    def AntiqueWhite(self) -> Brush: ...
    @property
    def Aqua(self) -> Brush: ...
    @property
    def Aquamarine(self) -> Brush: ...
    @property
    def Azure(self) -> Brush: ...
    @property
    def Beige(self) -> Brush: ...
    @property
    def Bisque(self) -> Brush: ...
    @property
    def Black(self) -> Brush: ...
    @property
    def BlanchedAlmond(self) -> Brush: ...
    @property
    def Blue(self) -> Brush: ...
    @property
    def BlueViolet(self) -> Brush: ...
    @property
    def Brown(self) -> Brush: ...
    @property
    def BurlyWood(self) -> Brush: ...
    @property
    def CadetBlue(self) -> Brush: ...
    @property
    def Chartreuse(self) -> Brush: ...
    @property
    def Chocolate(self) -> Brush: ...
    @property
    def Coral(self) -> Brush: ...
    @property
    def CornflowerBlue(self) -> Brush: ...
    @property
    def Cornsilk(self) -> Brush: ...
    @property
    def Crimson(self) -> Brush: ...
    @property
    def Cyan(self) -> Brush: ...
    @property
    def DarkBlue(self) -> Brush: ...
    @property
    def DarkCyan(self) -> Brush: ...
    @property
    def DarkGoldenrod(self) -> Brush: ...
    @property
    def DarkGray(self) -> Brush: ...
    @property
    def DarkGreen(self) -> Brush: ...
    @property
    def DarkKhaki(self) -> Brush: ...
    @property
    def DarkMagenta(self) -> Brush: ...
    @property
    def DarkOliveGreen(self) -> Brush: ...
    @property
    def DarkOrange(self) -> Brush: ...
    @property
    def DarkOrchid(self) -> Brush: ...
    @property
    def DarkRed(self) -> Brush: ...
    @property
    def DarkSalmon(self) -> Brush: ...
    @property
    def DarkSeaGreen(self) -> Brush: ...
    @property
    def DarkSlateBlue(self) -> Brush: ...
    @property
    def DarkSlateGray(self) -> Brush: ...
    @property
    def DarkTurquoise(self) -> Brush: ...
    @property
    def DarkViolet(self) -> Brush: ...
    @property
    def DeepPink(self) -> Brush: ...
    @property
    def DeepSkyBlue(self) -> Brush: ...
    @property
    def DimGray(self) -> Brush: ...
    @property
    def DodgerBlue(self) -> Brush: ...
    @property
    def Firebrick(self) -> Brush: ...
    @property
    def FloralWhite(self) -> Brush: ...
    @property
    def ForestGreen(self) -> Brush: ...
    @property
    def Fuchsia(self) -> Brush: ...
    @property
    def Gainsboro(self) -> Brush: ...
    @property
    def GhostWhite(self) -> Brush: ...
    @property
    def Gold(self) -> Brush: ...
    @property
    def Goldenrod(self) -> Brush: ...
    @property
    def Gray(self) -> Brush: ...
    @property
    def Green(self) -> Brush: ...
    @property
    def GreenYellow(self) -> Brush: ...
    @property
    def Honeydew(self) -> Brush: ...
    @property
    def HotPink(self) -> Brush: ...
    @property
    def IndianRed(self) -> Brush: ...
    @property
    def Indigo(self) -> Brush: ...
    @property
    def Ivory(self) -> Brush: ...
    @property
    def Khaki(self) -> Brush: ...
    @property
    def Lavender(self) -> Brush: ...
    @property
    def LavenderBlush(self) -> Brush: ...
    @property
    def LawnGreen(self) -> Brush: ...
    @property
    def LemonChiffon(self) -> Brush: ...
    @property
    def LightBlue(self) -> Brush: ...
    @property
    def LightCoral(self) -> Brush: ...
    @property
    def LightCyan(self) -> Brush: ...
    @property
    def LightGoldenrodYellow(self) -> Brush: ...
    @property
    def LightGray(self) -> Brush: ...
    @property
    def LightGreen(self) -> Brush: ...
    @property
    def LightPink(self) -> Brush: ...
    @property
    def LightSalmon(self) -> Brush: ...
    @property
    def LightSeaGreen(self) -> Brush: ...
    @property
    def LightSkyBlue(self) -> Brush: ...
    @property
    def LightSlateGray(self) -> Brush: ...
    @property
    def LightSteelBlue(self) -> Brush: ...
    @property
    def LightYellow(self) -> Brush: ...
    @property
    def Lime(self) -> Brush: ...
    @property
    def LimeGreen(self) -> Brush: ...
    @property
    def Linen(self) -> Brush: ...
    @property
    def Magenta(self) -> Brush: ...
    @property
    def Maroon(self) -> Brush: ...
    @property
    def MediumAquamarine(self) -> Brush: ...
    @property
    def MediumBlue(self) -> Brush: ...
    @property
    def MediumOrchid(self) -> Brush: ...
    @property
    def MediumPurple(self) -> Brush: ...
    @property
    def MediumSeaGreen(self) -> Brush: ...
    @property
    def MediumSlateBlue(self) -> Brush: ...
    @property
    def MediumSpringGreen(self) -> Brush: ...
    @property
    def MediumTurquoise(self) -> Brush: ...
    @property
    def MediumVioletRed(self) -> Brush: ...
    @property
    def MidnightBlue(self) -> Brush: ...
    @property
    def MintCream(self) -> Brush: ...
    @property
    def MistyRose(self) -> Brush: ...
    @property
    def Moccasin(self) -> Brush: ...
    @property
    def NavajoWhite(self) -> Brush: ...
    @property
    def Navy(self) -> Brush: ...
    @property
    def OldLace(self) -> Brush: ...
    @property
    def Olive(self) -> Brush: ...
    @property
    def OliveDrab(self) -> Brush: ...
    @property
    def Orange(self) -> Brush: ...
    @property
    def OrangeRed(self) -> Brush: ...
    @property
    def Orchid(self) -> Brush: ...
    @property
    def PaleGoldenrod(self) -> Brush: ...
    @property
    def PaleGreen(self) -> Brush: ...
    @property
    def PaleTurquoise(self) -> Brush: ...
    @property
    def PaleVioletRed(self) -> Brush: ...
    @property
    def PapayaWhip(self) -> Brush: ...
    @property
    def PeachPuff(self) -> Brush: ...
    @property
    def Peru(self) -> Brush: ...
    @property
    def Pink(self) -> Brush: ...
    @property
    def Plum(self) -> Brush: ...
    @property
    def PowderBlue(self) -> Brush: ...
    @property
    def Purple(self) -> Brush: ...
    @property
    def Red(self) -> Brush: ...
    @property
    def RosyBrown(self) -> Brush: ...
    @property
    def RoyalBlue(self) -> Brush: ...
    @property
    def SaddleBrown(self) -> Brush: ...
    @property
    def Salmon(self) -> Brush: ...
    @property
    def SandyBrown(self) -> Brush: ...
    @property
    def SeaGreen(self) -> Brush: ...
    @property
    def SeaShell(self) -> Brush: ...
    @property
    def Sienna(self) -> Brush: ...
    @property
    def Silver(self) -> Brush: ...
    @property
    def SkyBlue(self) -> Brush: ...
    @property
    def SlateBlue(self) -> Brush: ...
    @property
    def SlateGray(self) -> Brush: ...
    @property
    def Snow(self) -> Brush: ...
    @property
    def SpringGreen(self) -> Brush: ...
    @property
    def SteelBlue(self) -> Brush: ...
    @property
    def Tan(self) -> Brush: ...
    @property
    def Teal(self) -> Brush: ...
    @property
    def Thistle(self) -> Brush: ...
    @property
    def Tomato(self) -> Brush: ...
    @property
    def Transparent(self) -> Brush: ...
    @property
    def Turquoise(self) -> Brush: ...
    @property
    def Violet(self) -> Brush: ...
    @property
    def Wheat(self) -> Brush: ...
    @property
    def White(self) -> Brush: ...
    @property
    def WhiteSmoke(self) -> Brush: ...
    @property
    def Yellow(self) -> Brush: ...
    @property
    def YellowGreen(self) -> Brush: ...

class CharacterRange(System.ValueType):
    """    """
    def __init__(self, First: int, Length: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CharacterRange) -> bool: ...
    @property
    def First(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @First.setter
    def First(self, value: System.Void): ...
    @Length.setter
    def Length(self, value: System.Void): ...

class ContentAlignment(enum.Enum):
    TopLeft = 1
    TopCenter = 2
    TopRight = 4
    MiddleLeft = 16
    MiddleCenter = 32
    MiddleRight = 64
    BottomLeft = 256
    BottomCenter = 512
    BottomRight = 1024

class IDeviceContext:
    """    """
    @overload
    def GetHdc() -> System.IntPtr: ...
    @overload
    def ReleaseHdc() -> None: ...

class Graphics(System.MarshalByRefObject):
    """    """
    @overload
    def AddMetafileComment(self, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def BeginContainer() -> Drawing2D.GraphicsContainer: ...
    @overload
    def BeginContainer(self, dstrect: Rectangle, srcrect: Rectangle, unit: GraphicsUnit) -> Drawing2D.GraphicsContainer: ...
    @overload
    def BeginContainer(self, dstrect: RectangleF, srcrect: RectangleF, unit: GraphicsUnit) -> Drawing2D.GraphicsContainer: ...
    @overload
    def Clear(self, color: Color) -> None: ...
    @overload
    def CopyFromScreen(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size) -> None: ...
    @overload
    def CopyFromScreen(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None: ...
    @overload
    def CopyFromScreen(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size) -> None: ...
    @overload
    def CopyFromScreen(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rect: RectangleF, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rect: Rectangle, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: System.Single, y: System.Single, width: System.Single, height: System.Single, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, pt1: PointF, pt2: PointF, pt3: PointF, pt4: PointF) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, pt1: Point, pt2: Point, pt3: Point, pt4: Point) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, x1: System.Single, y1: System.Single, x2: System.Single, y2: System.Single, x3: System.Single, y3: System.Single, x4: System.Single, y4: System.Single) -> None: ...
    @overload
    def DrawBeziers(self, pen: Pen, points: System.Array[PointF]) -> None: ...
    @overload
    def DrawBeziers(self, pen: Pen, points: System.Array[Point]) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: System.Array[Point]) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: System.Array[PointF]) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: System.Array[Point], tension: System.Single, fillmode: Drawing2D.FillMode) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: System.Array[PointF], tension: System.Single, fillmode: Drawing2D.FillMode) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[PointF]) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[Point]) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[PointF], tension: System.Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[Point], tension: System.Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[PointF], offset: int, numberOfSegments: int) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[PointF], offset: int, numberOfSegments: int, tension: System.Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: System.Array[Point], offset: int, numberOfSegments: int, tension: System.Single) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rect: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rect: Rectangle) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawIcon(self, icon: Icon, targetRect: Rectangle) -> None: ...
    @overload
    def DrawIcon(self, icon: Icon, x: int, y: int) -> None: ...
    @overload
    def DrawIconUnstretched(self, icon: Icon, targetRect: Rectangle) -> None: ...
    @overload
    def DrawImage(self, image: Image, point: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[PointF]) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[Point]) -> None: ...
    @overload
    def DrawImage(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawImage(self, image: Image, rect: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, point: Point) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: System.Single, y: System.Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: System.Single, y: System.Single, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes, callback: DrawImageAbort, callbackData: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes, callback: DrawImageAbort, callbackData: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: System.Single, srcY: System.Single, srcWidth: System.Single, srcHeight: System.Single, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: System.Single, srcY: System.Single, srcWidth: System.Single, srcHeight: System.Single, srcUnit: GraphicsUnit, imageAttrs: Imaging.ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttr: Imaging.ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: System.Single, srcY: System.Single, srcWidth: System.Single, srcHeight: System.Single, srcUnit: GraphicsUnit, imageAttrs: Imaging.ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttrs: Imaging.ImageAttributes, callback: DrawImageAbort, callbackData: System.IntPtr) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: System.Single, srcY: System.Single, srcWidth: System.Single, srcHeight: System.Single, srcUnit: GraphicsUnit, imageAttrs: Imaging.ImageAttributes, callback: DrawImageAbort, callbackData: System.IntPtr) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, point: Point) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, x: int, y: int) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawImageUnscaledAndClipped(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, pt1: PointF, pt2: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, pt1: Point, pt2: Point) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, x1: int, y1: int, x2: int, y2: int) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, x1: System.Single, y1: System.Single, x2: System.Single, y2: System.Single) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: System.Array[PointF]) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: System.Array[Point]) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, rect: Rectangle, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, rect: RectangleF, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, x: System.Single, y: System.Single, width: System.Single, height: System.Single, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: System.Array[Point]) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: System.Array[PointF]) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rect: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rect: Rectangle) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawRectangles(self, pen: Pen, rects: System.Array[Rectangle]) -> None: ...
    @overload
    def DrawRectangles(self, pen: Pen, rects: System.Array[RectangleF]) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, point: PointF) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF, format_: StringFormat) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, point: PointF, format_: StringFormat) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, x: System.Single, y: System.Single) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, x: System.Single, y: System.Single, format_: StringFormat) -> None: ...
    @overload
    def EndContainer(self, container: Drawing2D.GraphicsContainer) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[Point], srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: RectangleF, srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: Point, srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destRect: Rectangle, srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoint: PointF, srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Imaging.Metafile, destPoints: System.Array[PointF], srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: System.IntPtr, imageAttr: Imaging.ImageAttributes) -> None: ...
    @overload
    def ExcludeClip(self, region: Region) -> None: ...
    @overload
    def ExcludeClip(self, rect: Rectangle) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[PointF]) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[Point]) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[PointF], fillmode: Drawing2D.FillMode) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[Point], fillmode: Drawing2D.FillMode) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[PointF], fillmode: Drawing2D.FillMode, tension: System.Single) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: System.Array[Point], fillmode: Drawing2D.FillMode, tension: System.Single) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, rect: Rectangle) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, rect: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rect: Rectangle, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rect: RectangleF, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: System.Single, y: System.Single, width: System.Single, height: System.Single, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: System.Array[Point]) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: System.Array[PointF]) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: System.Array[Point], fillMode: Drawing2D.FillMode) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: System.Array[PointF], fillMode: Drawing2D.FillMode) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rect: Rectangle) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rect: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rects: System.Array[Rectangle]) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rects: System.Array[RectangleF]) -> None: ...
    @overload
    def FillRegion(self, brush: Brush, region: Region) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def Flush(self, intention: Drawing2D.FlushIntention) -> None: ...
    @overload
    @staticmethod
    def FromHdc(hdc: System.IntPtr) -> Graphics: ...
    @overload
    @staticmethod
    def FromHdc(hdc: System.IntPtr, hdevice: System.IntPtr) -> Graphics: ...
    @overload
    @staticmethod
    def FromHdcInternal(hdc: System.IntPtr) -> Graphics: ...
    @overload
    @staticmethod
    def FromHwnd(hwnd: System.IntPtr) -> Graphics: ...
    @overload
    @staticmethod
    def FromHwndInternal(hwnd: System.IntPtr) -> Graphics: ...
    @overload
    @staticmethod
    def FromImage(image: Image) -> Graphics: ...
    @property
    def Clip(self) -> Region: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @property
    def CompositingMode(self) -> Drawing2D.CompositingMode: ...
    @property
    def CompositingQuality(self) -> Drawing2D.CompositingQuality: ...
    @property
    def DpiX(self) -> System.Single: ...
    @property
    def DpiY(self) -> System.Single: ...
    @property
    def InterpolationMode(self) -> Drawing2D.InterpolationMode: ...
    @property
    def IsClipEmpty(self) -> bool: ...
    @property
    def IsVisibleClipEmpty(self) -> bool: ...
    @property
    def PageScale(self) -> System.Single: ...
    @property
    def PageUnit(self) -> GraphicsUnit: ...
    @property
    def PixelOffsetMode(self) -> Drawing2D.PixelOffsetMode: ...
    @property
    def RenderingOrigin(self) -> Point: ...
    @property
    def SmoothingMode(self) -> Drawing2D.SmoothingMode: ...
    @property
    def TextContrast(self) -> int: ...
    @property
    def TextRenderingHint(self) -> Text.TextRenderingHint: ...
    @property
    def Transform(self) -> Drawing2D.Matrix: ...
    @property
    def TransformElements(self) -> Numerics.Matrix3x2: ...
    @property
    def VisibleClipBounds(self) -> RectangleF: ...
    @overload
    def GetContextInfo() -> (PointF): ...
    @overload
    def GetContextInfo() -> (PointF, Region): ...
    @overload
    @staticmethod
    def GetHalftonePalette() -> System.IntPtr: ...
    @overload
    def GetHdc() -> System.IntPtr: ...
    @overload
    def GetNearestColor(self, color: Color) -> Color: ...
    @overload
    def IntersectClip(self, rect: Rectangle) -> None: ...
    @overload
    def IntersectClip(self, rect: RectangleF) -> None: ...
    @overload
    def IntersectClip(self, region: Region) -> None: ...
    @overload
    def IsVisible(self, point: Point) -> bool: ...
    @overload
    def IsVisible(self, point: PointF) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> bool: ...
    @overload
    def MeasureCharacterRanges(self, text: str, font: Font, layoutRect: RectangleF, stringFormat: StringFormat) -> System.Array[Region]: ...
    @overload
    def MeasureString(self, text: str, font: Font) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, width: int) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, origin: PointF, stringFormat: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, width: int, format_: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat) -> (SizeF, int, int): ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def ReleaseHdc() -> None: ...
    @overload
    def ReleaseHdc(self, hdc: System.IntPtr) -> None: ...
    @overload
    def ReleaseHdcInternal(self, hdc: System.IntPtr) -> None: ...
    @overload
    def ResetClip() -> None: ...
    @overload
    def ResetTransform() -> None: ...
    @overload
    def Restore(self, gstate: Drawing2D.GraphicsState) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def Save() -> Drawing2D.GraphicsState: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @Clip.setter
    def Clip(self, value: System.Void): ...
    @CompositingMode.setter
    def CompositingMode(self, value: System.Void): ...
    @CompositingQuality.setter
    def CompositingQuality(self, value: System.Void): ...
    @InterpolationMode.setter
    def InterpolationMode(self, value: System.Void): ...
    @PageScale.setter
    def PageScale(self, value: System.Void): ...
    @PageUnit.setter
    def PageUnit(self, value: System.Void): ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: System.Void): ...
    @RenderingOrigin.setter
    def RenderingOrigin(self, value: System.Void): ...
    @SmoothingMode.setter
    def SmoothingMode(self, value: System.Void): ...
    @TextContrast.setter
    def TextContrast(self, value: System.Void): ...
    @TextRenderingHint.setter
    def TextRenderingHint(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @TransformElements.setter
    def TransformElements(self, value: System.Void): ...
    @overload
    def SetClip(self, g: Graphics) -> None: ...
    @overload
    def SetClip(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def SetClip(self, rect: RectangleF) -> None: ...
    @overload
    def SetClip(self, rect: Rectangle) -> None: ...
    @overload
    def SetClip(self, region: Region, combineMode: Drawing2D.CombineMode) -> None: ...
    @overload
    def SetClip(self, path: Drawing2D.GraphicsPath, combineMode: Drawing2D.CombineMode) -> None: ...
    @overload
    def SetClip(self, rect: RectangleF, combineMode: Drawing2D.CombineMode) -> None: ...
    @overload
    def SetClip(self, g: Graphics, combineMode: Drawing2D.CombineMode) -> None: ...
    @overload
    def SetClip(self, rect: Rectangle, combineMode: Drawing2D.CombineMode) -> None: ...
    @overload
    def TransformPoints(self, destSpace: Drawing2D.CoordinateSpace, srcSpace: Drawing2D.CoordinateSpace, pts: System.Array[PointF]) -> None: ...
    @overload
    def TransformPoints(self, destSpace: Drawing2D.CoordinateSpace, srcSpace: Drawing2D.CoordinateSpace, pts: System.Array[Point]) -> None: ...
    @overload
    def TranslateClip(self, dx: int, dy: int) -> None: ...
    @overload
    def TranslateClip(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...

class GraphicsUnit(enum.Enum):
    World = 0
    Display = 1
    Pixel = 2
    Point = 3
    Inch = 4
    Document = 5
    Millimeter = 6

class IconConverter(ComponentModel.ExpandableObjectConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class Image(System.MarshalByRefObject):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def FromFile(filename: str) -> Image: ...
    @overload
    @staticmethod
    def FromFile(filename: str, useEmbeddedColorManagement: bool) -> Image: ...
    @overload
    @staticmethod
    def FromHbitmap(hbitmap: System.IntPtr) -> Bitmap: ...
    @overload
    @staticmethod
    def FromHbitmap(hbitmap: System.IntPtr, hpalette: System.IntPtr) -> Bitmap: ...
    @overload
    @staticmethod
    def FromStream(stream: IO.Stream) -> Image: ...
    @overload
    @staticmethod
    def FromStream(stream: IO.Stream, useEmbeddedColorManagement: bool) -> Image: ...
    @overload
    @staticmethod
    def FromStream(stream: IO.Stream, useEmbeddedColorManagement: bool, validateImageData: bool) -> Image: ...
    @property
    def Flags(self) -> int: ...
    @property
    def FrameDimensionsList(self) -> System.System.Array[System.Guid]: ...
    @property
    def Height(self) -> int: ...
    @property
    def HorizontalResolution(self) -> System.Single: ...
    @property
    def Palette(self) -> Imaging.ColorPalette: ...
    @property
    def PhysicalDimension(self) -> SizeF: ...
    @property
    def PixelFormat(self) -> Imaging.PixelFormat: ...
    @property
    def PropertyIdList(self) -> System.System.Array[int]: ...
    @property
    def PropertyItems(self) -> Imaging.System.Array[Imaging.PropertyItem]: ...
    @property
    def RawFormat(self) -> Imaging.ImageFormat: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> object: ...
    @property
    def VerticalResolution(self) -> System.Single: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetBounds() -> (RectangleF, GraphicsUnit): ...
    @overload
    def GetEncoderParameterList(self, encoder: System.Guid) -> Imaging.EncoderParameters: ...
    @overload
    def GetFrameCount(self, dimension: Imaging.FrameDimension) -> int: ...
    @overload
    @staticmethod
    def GetPixelFormatSize(pixfmt: Imaging.PixelFormat) -> int: ...
    @overload
    def GetPropertyItem(self, propid: int) -> Imaging.PropertyItem: ...
    @overload
    def GetThumbnailImage(self, thumbWidth: int, thumbHeight: int, callback: GetThumbnailImageAbort, callbackData: System.IntPtr) -> Image: ...
    @overload
    @staticmethod
    def IsAlphaPixelFormat(pixfmt: Imaging.PixelFormat) -> bool: ...
    @overload
    @staticmethod
    def IsCanonicalPixelFormat(pixfmt: Imaging.PixelFormat) -> bool: ...
    @overload
    @staticmethod
    def IsExtendedPixelFormat(pixfmt: Imaging.PixelFormat) -> bool: ...
    @overload
    def RemovePropertyItem(self, propid: int) -> None: ...
    @overload
    def RotateFlip(self, rotateFlipType: RotateFlipType) -> None: ...
    @overload
    def Save(self, filename: str) -> None: ...
    @overload
    def Save(self, filename: str, format_: Imaging.ImageFormat) -> None: ...
    @overload
    def Save(self, stream: IO.Stream, format_: Imaging.ImageFormat) -> None: ...
    @overload
    def Save(self, stream: IO.Stream, encoder: Imaging.ImageCodecInfo, encoderParams: Imaging.EncoderParameters) -> None: ...
    @overload
    def Save(self, filename: str, encoder: Imaging.ImageCodecInfo, encoderParams: Imaging.EncoderParameters) -> None: ...
    @overload
    def SaveAdd(self, encoderParams: Imaging.EncoderParameters) -> None: ...
    @overload
    def SaveAdd(self, image: Image, encoderParams: Imaging.EncoderParameters) -> None: ...
    @overload
    def SelectActiveFrame(self, dimension: Imaging.FrameDimension, frameIndex: int) -> int: ...
    @Palette.setter
    def Palette(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def SetPropertyItem(self, propitem: Imaging.PropertyItem) -> None: ...

class ImageAnimator(object):
    """    """
    @overload
    @staticmethod
    def Animate(image: Image, onFrameChangedHandler: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def CanAnimate(image: Image) -> bool: ...
    @overload
    @staticmethod
    def StopAnimate(image: Image, onFrameChangedHandler: System.EventHandler) -> None: ...
    @overload
    @staticmethod
    def UpdateFrames() -> None: ...
    @overload
    @staticmethod
    def UpdateFrames(image: Image) -> None: ...

class ImageConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class ImageFormatConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class Pen(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, brush: Brush): ...
    @overload
    def __init__(self, color: Color, width: System.Single): ...
    @overload
    def __init__(self, brush: Brush, width: System.Single): ...
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Alignment(self) -> Drawing2D.PenAlignment: ...
    @property
    def Brush(self) -> Brush: ...
    @property
    def Color(self) -> Color: ...
    @property
    def CompoundArray(self) -> System.System.Array[System.Single]: ...
    @property
    def CustomEndCap(self) -> Drawing2D.CustomLineCap: ...
    @property
    def CustomStartCap(self) -> Drawing2D.CustomLineCap: ...
    @property
    def DashCap(self) -> Drawing2D.DashCap: ...
    @property
    def DashOffset(self) -> System.Single: ...
    @property
    def DashPattern(self) -> System.System.Array[System.Single]: ...
    @property
    def DashStyle(self) -> Drawing2D.DashStyle: ...
    @property
    def EndCap(self) -> Drawing2D.LineCap: ...
    @property
    def LineJoin(self) -> Drawing2D.LineJoin: ...
    @property
    def MiterLimit(self) -> System.Single: ...
    @property
    def PenType(self) -> Drawing2D.PenType: ...
    @property
    def StartCap(self) -> Drawing2D.LineCap: ...
    @property
    def Transform(self) -> Drawing2D.Matrix: ...
    @property
    def Width(self) -> System.Single: ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def ResetTransform() -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @Brush.setter
    def Brush(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @CompoundArray.setter
    def CompoundArray(self, value: System.Void): ...
    @CustomEndCap.setter
    def CustomEndCap(self, value: System.Void): ...
    @CustomStartCap.setter
    def CustomStartCap(self, value: System.Void): ...
    @DashCap.setter
    def DashCap(self, value: System.Void): ...
    @DashOffset.setter
    def DashOffset(self, value: System.Void): ...
    @DashPattern.setter
    def DashPattern(self, value: System.Void): ...
    @DashStyle.setter
    def DashStyle(self, value: System.Void): ...
    @EndCap.setter
    def EndCap(self, value: System.Void): ...
    @LineJoin.setter
    def LineJoin(self, value: System.Void): ...
    @MiterLimit.setter
    def MiterLimit(self, value: System.Void): ...
    @StartCap.setter
    def StartCap(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def SetLineCap(self, startCap: Drawing2D.LineCap, endCap: Drawing2D.LineCap, dashCap: Drawing2D.DashCap) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...

class Pens(object):
    """    """
    @property
    def AliceBlue(self) -> Pen: ...
    @property
    def AntiqueWhite(self) -> Pen: ...
    @property
    def Aqua(self) -> Pen: ...
    @property
    def Aquamarine(self) -> Pen: ...
    @property
    def Azure(self) -> Pen: ...
    @property
    def Beige(self) -> Pen: ...
    @property
    def Bisque(self) -> Pen: ...
    @property
    def Black(self) -> Pen: ...
    @property
    def BlanchedAlmond(self) -> Pen: ...
    @property
    def Blue(self) -> Pen: ...
    @property
    def BlueViolet(self) -> Pen: ...
    @property
    def Brown(self) -> Pen: ...
    @property
    def BurlyWood(self) -> Pen: ...
    @property
    def CadetBlue(self) -> Pen: ...
    @property
    def Chartreuse(self) -> Pen: ...
    @property
    def Chocolate(self) -> Pen: ...
    @property
    def Coral(self) -> Pen: ...
    @property
    def CornflowerBlue(self) -> Pen: ...
    @property
    def Cornsilk(self) -> Pen: ...
    @property
    def Crimson(self) -> Pen: ...
    @property
    def Cyan(self) -> Pen: ...
    @property
    def DarkBlue(self) -> Pen: ...
    @property
    def DarkCyan(self) -> Pen: ...
    @property
    def DarkGoldenrod(self) -> Pen: ...
    @property
    def DarkGray(self) -> Pen: ...
    @property
    def DarkGreen(self) -> Pen: ...
    @property
    def DarkKhaki(self) -> Pen: ...
    @property
    def DarkMagenta(self) -> Pen: ...
    @property
    def DarkOliveGreen(self) -> Pen: ...
    @property
    def DarkOrange(self) -> Pen: ...
    @property
    def DarkOrchid(self) -> Pen: ...
    @property
    def DarkRed(self) -> Pen: ...
    @property
    def DarkSalmon(self) -> Pen: ...
    @property
    def DarkSeaGreen(self) -> Pen: ...
    @property
    def DarkSlateBlue(self) -> Pen: ...
    @property
    def DarkSlateGray(self) -> Pen: ...
    @property
    def DarkTurquoise(self) -> Pen: ...
    @property
    def DarkViolet(self) -> Pen: ...
    @property
    def DeepPink(self) -> Pen: ...
    @property
    def DeepSkyBlue(self) -> Pen: ...
    @property
    def DimGray(self) -> Pen: ...
    @property
    def DodgerBlue(self) -> Pen: ...
    @property
    def Firebrick(self) -> Pen: ...
    @property
    def FloralWhite(self) -> Pen: ...
    @property
    def ForestGreen(self) -> Pen: ...
    @property
    def Fuchsia(self) -> Pen: ...
    @property
    def Gainsboro(self) -> Pen: ...
    @property
    def GhostWhite(self) -> Pen: ...
    @property
    def Gold(self) -> Pen: ...
    @property
    def Goldenrod(self) -> Pen: ...
    @property
    def Gray(self) -> Pen: ...
    @property
    def Green(self) -> Pen: ...
    @property
    def GreenYellow(self) -> Pen: ...
    @property
    def Honeydew(self) -> Pen: ...
    @property
    def HotPink(self) -> Pen: ...
    @property
    def IndianRed(self) -> Pen: ...
    @property
    def Indigo(self) -> Pen: ...
    @property
    def Ivory(self) -> Pen: ...
    @property
    def Khaki(self) -> Pen: ...
    @property
    def Lavender(self) -> Pen: ...
    @property
    def LavenderBlush(self) -> Pen: ...
    @property
    def LawnGreen(self) -> Pen: ...
    @property
    def LemonChiffon(self) -> Pen: ...
    @property
    def LightBlue(self) -> Pen: ...
    @property
    def LightCoral(self) -> Pen: ...
    @property
    def LightCyan(self) -> Pen: ...
    @property
    def LightGoldenrodYellow(self) -> Pen: ...
    @property
    def LightGray(self) -> Pen: ...
    @property
    def LightGreen(self) -> Pen: ...
    @property
    def LightPink(self) -> Pen: ...
    @property
    def LightSalmon(self) -> Pen: ...
    @property
    def LightSeaGreen(self) -> Pen: ...
    @property
    def LightSkyBlue(self) -> Pen: ...
    @property
    def LightSlateGray(self) -> Pen: ...
    @property
    def LightSteelBlue(self) -> Pen: ...
    @property
    def LightYellow(self) -> Pen: ...
    @property
    def Lime(self) -> Pen: ...
    @property
    def LimeGreen(self) -> Pen: ...
    @property
    def Linen(self) -> Pen: ...
    @property
    def Magenta(self) -> Pen: ...
    @property
    def Maroon(self) -> Pen: ...
    @property
    def MediumAquamarine(self) -> Pen: ...
    @property
    def MediumBlue(self) -> Pen: ...
    @property
    def MediumOrchid(self) -> Pen: ...
    @property
    def MediumPurple(self) -> Pen: ...
    @property
    def MediumSeaGreen(self) -> Pen: ...
    @property
    def MediumSlateBlue(self) -> Pen: ...
    @property
    def MediumSpringGreen(self) -> Pen: ...
    @property
    def MediumTurquoise(self) -> Pen: ...
    @property
    def MediumVioletRed(self) -> Pen: ...
    @property
    def MidnightBlue(self) -> Pen: ...
    @property
    def MintCream(self) -> Pen: ...
    @property
    def MistyRose(self) -> Pen: ...
    @property
    def Moccasin(self) -> Pen: ...
    @property
    def NavajoWhite(self) -> Pen: ...
    @property
    def Navy(self) -> Pen: ...
    @property
    def OldLace(self) -> Pen: ...
    @property
    def Olive(self) -> Pen: ...
    @property
    def OliveDrab(self) -> Pen: ...
    @property
    def Orange(self) -> Pen: ...
    @property
    def OrangeRed(self) -> Pen: ...
    @property
    def Orchid(self) -> Pen: ...
    @property
    def PaleGoldenrod(self) -> Pen: ...
    @property
    def PaleGreen(self) -> Pen: ...
    @property
    def PaleTurquoise(self) -> Pen: ...
    @property
    def PaleVioletRed(self) -> Pen: ...
    @property
    def PapayaWhip(self) -> Pen: ...
    @property
    def PeachPuff(self) -> Pen: ...
    @property
    def Peru(self) -> Pen: ...
    @property
    def Pink(self) -> Pen: ...
    @property
    def Plum(self) -> Pen: ...
    @property
    def PowderBlue(self) -> Pen: ...
    @property
    def Purple(self) -> Pen: ...
    @property
    def Red(self) -> Pen: ...
    @property
    def RosyBrown(self) -> Pen: ...
    @property
    def RoyalBlue(self) -> Pen: ...
    @property
    def SaddleBrown(self) -> Pen: ...
    @property
    def Salmon(self) -> Pen: ...
    @property
    def SandyBrown(self) -> Pen: ...
    @property
    def SeaGreen(self) -> Pen: ...
    @property
    def SeaShell(self) -> Pen: ...
    @property
    def Sienna(self) -> Pen: ...
    @property
    def Silver(self) -> Pen: ...
    @property
    def SkyBlue(self) -> Pen: ...
    @property
    def SlateBlue(self) -> Pen: ...
    @property
    def SlateGray(self) -> Pen: ...
    @property
    def Snow(self) -> Pen: ...
    @property
    def SpringGreen(self) -> Pen: ...
    @property
    def SteelBlue(self) -> Pen: ...
    @property
    def Tan(self) -> Pen: ...
    @property
    def Teal(self) -> Pen: ...
    @property
    def Thistle(self) -> Pen: ...
    @property
    def Tomato(self) -> Pen: ...
    @property
    def Transparent(self) -> Pen: ...
    @property
    def Turquoise(self) -> Pen: ...
    @property
    def Violet(self) -> Pen: ...
    @property
    def Wheat(self) -> Pen: ...
    @property
    def White(self) -> Pen: ...
    @property
    def WhiteSmoke(self) -> Pen: ...
    @property
    def Yellow(self) -> Pen: ...
    @property
    def YellowGreen(self) -> Pen: ...

class RotateFlipType(enum.Enum):
    Rotate180FlipXY = 0
    RotateNoneFlipNone = 0
    Rotate90FlipNone = 1
    Rotate270FlipXY = 1
    Rotate180FlipNone = 2
    RotateNoneFlipXY = 2
    Rotate270FlipNone = 3
    Rotate90FlipXY = 3
    RotateNoneFlipX = 4
    Rotate180FlipY = 4
    Rotate90FlipX = 5
    Rotate270FlipY = 5
    Rotate180FlipX = 6
    RotateNoneFlipY = 6
    Rotate270FlipX = 7
    Rotate90FlipY = 7

class StringFormat(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: StringFormatFlags): ...
    @overload
    def __init__(self, format_: StringFormat): ...
    @overload
    def __init__(self, options: StringFormatFlags, language: int): ...
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Alignment(self) -> StringAlignment: ...
    @property
    def DigitSubstitutionLanguage(self) -> int: ...
    @property
    def DigitSubstitutionMethod(self) -> StringDigitSubstitute: ...
    @property
    def FormatFlags(self) -> StringFormatFlags: ...
    @property
    def GenericDefault(self) -> StringFormat: ...
    @property
    def GenericTypographic(self) -> StringFormat: ...
    @property
    def HotkeyPrefix(self) -> Text.HotkeyPrefix: ...
    @property
    def LineAlignment(self) -> StringAlignment: ...
    @property
    def Trimming(self) -> StringTrimming: ...
    @overload
    def GetTabStops() -> (System.System.Array[System.Single], System.Single): ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @FormatFlags.setter
    def FormatFlags(self, value: System.Void): ...
    @HotkeyPrefix.setter
    def HotkeyPrefix(self, value: System.Void): ...
    @LineAlignment.setter
    def LineAlignment(self, value: System.Void): ...
    @Trimming.setter
    def Trimming(self, value: System.Void): ...
    @overload
    def SetDigitSubstitution(self, language: int, substitute: StringDigitSubstitute) -> None: ...
    @overload
    def SetMeasurableCharacterRanges(self, ranges: System.Array[CharacterRange]) -> None: ...
    @overload
    def SetTabStops(self, firstTabOffset: System.Single, tabStops: System.System.Array[System.Single]) -> None: ...
    @overload
    def ToString() -> str: ...

class SystemFonts(object):
    """    """
    @property
    def CaptionFont(self) -> Font: ...
    @property
    def DefaultFont(self) -> Font: ...
    @property
    def DialogFont(self) -> Font: ...
    @property
    def IconTitleFont(self) -> Font: ...
    @property
    def MenuFont(self) -> Font: ...
    @property
    def MessageBoxFont(self) -> Font: ...
    @property
    def SmallCaptionFont(self) -> Font: ...
    @property
    def StatusFont(self) -> Font: ...
    @overload
    @staticmethod
    def GetFontByName(systemFontName: str) -> Font: ...

class SystemPens(object):
    """    """
    @overload
    @staticmethod
    def FromSystemColor(c: Color) -> Pen: ...
    @property
    def ActiveBorder(self) -> Pen: ...
    @property
    def ActiveCaption(self) -> Pen: ...
    @property
    def ActiveCaptionText(self) -> Pen: ...
    @property
    def AppWorkspace(self) -> Pen: ...
    @property
    def ButtonFace(self) -> Pen: ...
    @property
    def ButtonHighlight(self) -> Pen: ...
    @property
    def ButtonShadow(self) -> Pen: ...
    @property
    def Control(self) -> Pen: ...
    @property
    def ControlDark(self) -> Pen: ...
    @property
    def ControlDarkDark(self) -> Pen: ...
    @property
    def ControlLight(self) -> Pen: ...
    @property
    def ControlLightLight(self) -> Pen: ...
    @property
    def ControlText(self) -> Pen: ...
    @property
    def Desktop(self) -> Pen: ...
    @property
    def GradientActiveCaption(self) -> Pen: ...
    @property
    def GradientInactiveCaption(self) -> Pen: ...
    @property
    def GrayText(self) -> Pen: ...
    @property
    def Highlight(self) -> Pen: ...
    @property
    def HighlightText(self) -> Pen: ...
    @property
    def HotTrack(self) -> Pen: ...
    @property
    def InactiveBorder(self) -> Pen: ...
    @property
    def InactiveCaption(self) -> Pen: ...
    @property
    def InactiveCaptionText(self) -> Pen: ...
    @property
    def Info(self) -> Pen: ...
    @property
    def InfoText(self) -> Pen: ...
    @property
    def Menu(self) -> Pen: ...
    @property
    def MenuBar(self) -> Pen: ...
    @property
    def MenuHighlight(self) -> Pen: ...
    @property
    def MenuText(self) -> Pen: ...
    @property
    def ScrollBar(self) -> Pen: ...
    @property
    def Window(self) -> Pen: ...
    @property
    def WindowFrame(self) -> Pen: ...
    @property
    def WindowText(self) -> Pen: ...

class CopyPixelOperation(enum.Enum):
    Blackness = 66
    NotSourceErase = 1114278
    NotSourceCopy = 3342344
    SourceErase = 4457256
    DestinationInvert = 5570569
    PatInvert = 5898313
    SourceInvert = 6684742
    SourceAnd = 8913094
    MergePaint = 12255782
    MergeCopy = 12583114
    SourceCopy = 13369376
    SourcePaint = 15597702
    PatCopy = 15728673
    PatPaint = 16452105
    Whiteness = 16711778
    CaptureBlt = 1073741824
    NoMirrorBitmap = -2147483648

class FontStyle(enum.Enum):
    Regular = 0
    Bold = 1
    Italic = 2
    Underline = 4
    Strikeout = 8

class Region(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rect: RectangleF): ...
    @overload
    def __init__(self, rect: Rectangle): ...
    @overload
    def __init__(self, path: Drawing2D.GraphicsPath): ...
    @overload
    def __init__(self, rgnData: Drawing2D.RegionData): ...
    @overload
    def Clone() -> Region: ...
    @overload
    def Complement(self, region: Region) -> None: ...
    @overload
    def Complement(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def Complement(self, rect: Rectangle) -> None: ...
    @overload
    def Complement(self, rect: RectangleF) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, region: Region, g: Graphics) -> bool: ...
    @overload
    def Exclude(self, region: Region) -> None: ...
    @overload
    def Exclude(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def Exclude(self, rect: Rectangle) -> None: ...
    @overload
    def Exclude(self, rect: RectangleF) -> None: ...
    @overload
    @staticmethod
    def FromHrgn(hrgn: System.IntPtr) -> Region: ...
    @overload
    def GetBounds(self, g: Graphics) -> RectangleF: ...
    @overload
    def GetHrgn(self, g: Graphics) -> System.IntPtr: ...
    @overload
    def GetRegionData() -> Drawing2D.RegionData: ...
    @overload
    def GetRegionScans(self, matrix: Drawing2D.Matrix) -> System.Array[RectangleF]: ...
    @overload
    def Intersect(self, rect: RectangleF) -> None: ...
    @overload
    def Intersect(self, rect: Rectangle) -> None: ...
    @overload
    def Intersect(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def Intersect(self, region: Region) -> None: ...
    @overload
    def IsEmpty(self, g: Graphics) -> bool: ...
    @overload
    def IsInfinite(self, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle) -> bool: ...
    @overload
    def IsVisible(self, point: PointF) -> bool: ...
    @overload
    def IsVisible(self, point: Point) -> bool: ...
    @overload
    def IsVisible(self, point: PointF, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, point: Point, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single, g: Graphics) -> bool: ...
    @overload
    def MakeEmpty() -> None: ...
    @overload
    def MakeInfinite() -> None: ...
    @overload
    def ReleaseHrgn(self, regionHandle: System.IntPtr) -> None: ...
    @overload
    def Transform(self, matrix: Drawing2D.Matrix) -> None: ...
    @overload
    def Translate(self, dx: int, dy: int) -> None: ...
    @overload
    def Translate(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def Union(self, rect: RectangleF) -> None: ...
    @overload
    def Union(self, rect: Rectangle) -> None: ...
    @overload
    def Union(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def Union(self, region: Region) -> None: ...
    @overload
    def Xor(self, region: Region) -> None: ...
    @overload
    def Xor(self, path: Drawing2D.GraphicsPath) -> None: ...
    @overload
    def Xor(self, rect: RectangleF) -> None: ...
    @overload
    def Xor(self, rect: Rectangle) -> None: ...

class StringAlignment(enum.Enum):
    Near = 0
    Center = 1
    Far = 2

class StringDigitSubstitute(enum.Enum):
    User = 0
    None_ = 1
    National = 2
    Traditional = 3

class StringFormatFlags(enum.Enum):
    DirectionRightToLeft = 1
    DirectionVertical = 2
    FitBlackBox = 4
    DisplayFormatControl = 32
    NoFontFallback = 1024
    MeasureTrailingSpaces = 2048
    NoWrap = 4096
    LineLimit = 8192
    NoClip = 16384

class StringTrimming(enum.Enum):
    None_ = 0
    Character = 1
    Word = 2
    EllipsisCharacter = 3
    EllipsisWord = 4
    EllipsisPath = 5

class StringUnit(enum.Enum):
    World = 0
    Display = 1
    Pixel = 2
    Point = 3
    Inch = 4
    Document = 5
    Millimeter = 6
    Em = 32

class Brush(System.MarshalByRefObject):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...

class Font(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self, prototype: Font, newStyle: FontStyle): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single, style: FontStyle): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single, unit: GraphicsUnit): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single, style: FontStyle): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single, unit: GraphicsUnit): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single, style: FontStyle, unit: GraphicsUnit): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single, style: FontStyle, unit: GraphicsUnit): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: System.Byte): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: System.Byte): ...
    @overload
    def __init__(self, family: FontFamily, emSize: System.Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: System.Byte, gdiVerticalFont: bool): ...
    @overload
    def __init__(self, familyName: str, emSize: System.Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: System.Byte, gdiVerticalFont: bool): ...
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromHdc(hdc: System.IntPtr) -> Font: ...
    @overload
    @staticmethod
    def FromHfont(hfont: System.IntPtr) -> Font: ...
    @overload
    @staticmethod
    def FromLogFont(lf: object) -> Font: ...
    @overload
    @staticmethod
    def FromLogFont(lf: object, hdc: System.IntPtr) -> Font: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def FontFamily(self) -> FontFamily: ...
    @property
    def GdiCharSet(self) -> System.Byte: ...
    @property
    def GdiVerticalFont(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsSystemFont(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def OriginalFontName(self) -> str: ...
    @property
    def Size(self) -> System.Single: ...
    @property
    def SizeInPoints(self) -> System.Single: ...
    @property
    def Strikeout(self) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def SystemFontName(self) -> str: ...
    @property
    def Underline(self) -> bool: ...
    @property
    def Unit(self) -> GraphicsUnit: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHeight() -> System.Single: ...
    @overload
    def GetHeight(self, graphics: Graphics) -> System.Single: ...
    @overload
    def GetHeight(self, dpi: System.Single) -> System.Single: ...
    @overload
    def ToHfont() -> System.IntPtr: ...
    @overload
    def ToLogFont(self, logFont: object) -> None: ...
    @overload
    def ToLogFont(self, logFont: object, graphics: Graphics) -> None: ...
    @overload
    def ToString() -> str: ...

class FontConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class FontFamily(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, genericFamily: Text.GenericFontFamilies): ...
    @overload
    def __init__(self, name: str, fontCollection: Text.FontCollection): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Families(self) -> System.Array[FontFamily]: ...
    @property
    def GenericMonospace(self) -> FontFamily: ...
    @property
    def GenericSansSerif(self) -> FontFamily: ...
    @property
    def GenericSerif(self) -> FontFamily: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetCellAscent(self, style: FontStyle) -> int: ...
    @overload
    def GetCellDescent(self, style: FontStyle) -> int: ...
    @overload
    def GetEmHeight(self, style: FontStyle) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLineSpacing(self, style: FontStyle) -> int: ...
    @overload
    def GetName(self, language: int) -> str: ...
    @overload
    def IsStyleAvailable(self, style: FontStyle) -> bool: ...
    @overload
    def ToString() -> str: ...

class SolidBrush(Brush):
    """    """
    def __init__(self, color: Color): ...
    @overload
    def Clone() -> object: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: System.Void): ...

class SystemBrushes(object):
    """    """
    @overload
    @staticmethod
    def FromSystemColor(c: Color) -> Brush: ...
    @property
    def ActiveBorder(self) -> Brush: ...
    @property
    def ActiveCaption(self) -> Brush: ...
    @property
    def ActiveCaptionText(self) -> Brush: ...
    @property
    def AppWorkspace(self) -> Brush: ...
    @property
    def ButtonFace(self) -> Brush: ...
    @property
    def ButtonHighlight(self) -> Brush: ...
    @property
    def ButtonShadow(self) -> Brush: ...
    @property
    def Control(self) -> Brush: ...
    @property
    def ControlDark(self) -> Brush: ...
    @property
    def ControlDarkDark(self) -> Brush: ...
    @property
    def ControlLight(self) -> Brush: ...
    @property
    def ControlLightLight(self) -> Brush: ...
    @property
    def ControlText(self) -> Brush: ...
    @property
    def Desktop(self) -> Brush: ...
    @property
    def GradientActiveCaption(self) -> Brush: ...
    @property
    def GradientInactiveCaption(self) -> Brush: ...
    @property
    def GrayText(self) -> Brush: ...
    @property
    def Highlight(self) -> Brush: ...
    @property
    def HighlightText(self) -> Brush: ...
    @property
    def HotTrack(self) -> Brush: ...
    @property
    def InactiveBorder(self) -> Brush: ...
    @property
    def InactiveCaption(self) -> Brush: ...
    @property
    def InactiveCaptionText(self) -> Brush: ...
    @property
    def Info(self) -> Brush: ...
    @property
    def InfoText(self) -> Brush: ...
    @property
    def Menu(self) -> Brush: ...
    @property
    def MenuBar(self) -> Brush: ...
    @property
    def MenuHighlight(self) -> Brush: ...
    @property
    def MenuText(self) -> Brush: ...
    @property
    def ScrollBar(self) -> Brush: ...
    @property
    def Window(self) -> Brush: ...
    @property
    def WindowFrame(self) -> Brush: ...
    @property
    def WindowText(self) -> Brush: ...

class TextureBrush(Brush):
    """    """
    @overload
    def __init__(self, bitmap: Image): ...
    @overload
    def __init__(self, image: Image, wrapMode: Drawing2D.WrapMode): ...
    @overload
    def __init__(self, image: Image, dstRect: RectangleF): ...
    @overload
    def __init__(self, image: Image, dstRect: Rectangle): ...
    @overload
    def __init__(self, image: Image, wrapMode: Drawing2D.WrapMode, dstRect: RectangleF): ...
    @overload
    def __init__(self, image: Image, wrapMode: Drawing2D.WrapMode, dstRect: Rectangle): ...
    @overload
    def __init__(self, image: Image, dstRect: RectangleF, imageAttr: Imaging.ImageAttributes): ...
    @overload
    def __init__(self, image: Image, dstRect: Rectangle, imageAttr: Imaging.ImageAttributes): ...
    @overload
    def Clone() -> object: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Transform(self) -> Drawing2D.Matrix: ...
    @property
    def WrapMode(self) -> Drawing2D.WrapMode: ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Drawing2D.Matrix, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def ResetTransform() -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @WrapMode.setter
    def WrapMode(self, value: System.Void): ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single, order: Drawing2D.MatrixOrder) -> None: ...

class BufferedGraphicsManager(object):
    """    """
    @property
    def Current(self) -> BufferedGraphicsContext: ...

class Icon(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, fileName: str, size: Size): ...
    @overload
    def __init__(self, original: Icon, size: Size): ...
    @overload
    def __init__(self, type_: System.Type, resource: str): ...
    @overload
    def __init__(self, stream: IO.Stream, size: Size): ...
    @overload
    def __init__(self, fileName: str, width: int, height: int): ...
    @overload
    def __init__(self, original: Icon, width: int, height: int): ...
    @overload
    def __init__(self, stream: IO.Stream, width: int, height: int): ...
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def ExtractAssociatedIcon(filePath: str) -> Icon: ...
    @overload
    @staticmethod
    def FromHandle(handle: System.IntPtr) -> Icon: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def Height(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Width(self) -> int: ...
    @overload
    def Save(self, outputStream: IO.Stream) -> None: ...
    @overload
    def ToBitmap() -> Bitmap: ...
    @overload
    def ToString() -> str: ...

class SystemIcons(object):
    """    """
    @property
    def Application(self) -> Icon: ...
    @property
    def Asterisk(self) -> Icon: ...
    @property
    def Error(self) -> Icon: ...
    @property
    def Exclamation(self) -> Icon: ...
    @property
    def Hand(self) -> Icon: ...
    @property
    def Information(self) -> Icon: ...
    @property
    def Question(self) -> Icon: ...
    @property
    def Shield(self) -> Icon: ...
    @property
    def Warning(self) -> Icon: ...
    @property
    def WinLogo(self) -> Icon: ...

class ToolboxBitmapAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, imageFile: str): ...
    @overload
    def __init__(self, t: System.Type): ...
    @overload
    def __init__(self, t: System.Type, name: str): ...
    @property
    def Default(self) -> ToolboxBitmapAttribute: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetImage(self, component: object) -> Image: ...
    @overload
    def GetImage(self, type_: System.Type) -> Image: ...
    @overload
    def GetImage(self, component: object, large: bool) -> Image: ...
    @overload
    def GetImage(self, type_: System.Type, large: bool) -> Image: ...
    @overload
    def GetImage(self, type_: System.Type, imgName: str, large: bool) -> Image: ...
    @overload
    @staticmethod
    def GetImageFromResource(t: System.Type, imageName: str, large: bool) -> Image: ...

class DrawImageAbort(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callbackdata: System.IntPtr, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, callbackdata: System.IntPtr) -> bool: ...

class EnumerateMetafileProc(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, recordType: Imaging.EmfPlusRecordType, flags: int, dataSize: int, data: System.IntPtr, callbackData: Imaging.PlayRecordCallback, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, recordType: Imaging.EmfPlusRecordType, flags: int, dataSize: int, data: System.IntPtr, callbackData: Imaging.PlayRecordCallback) -> bool: ...

class GetThumbnailImageAbort(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke() -> bool: ...

class FontNameConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class FontUnitConverter(ComponentModel.EnumConverter):
    """    """
    def __init__(self): ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...

# endregion

# region: System.ComponentModel.TypeConverter, Version=7.0.0.0

class ColorConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class PointConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class RectangleConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class SizeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class SizeFConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

# endregion

