"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Blend", "ColorBlend", "CombineMode", "CompositingMode", "CompositingQuality", "CoordinateSpace", "DashStyle", "FillMode", "FlushIntention", "GraphicsContainer", "HatchBrush", "HatchStyle", "InterpolationMode", "LinearGradientMode", "LinearGradientBrush", "LineCap", "LineJoin", "MatrixOrder", "Matrix", "PathData", "PathGradientBrush", "PathPointType", "PenAlignment", "PenType", "PixelOffsetMode", "QualityMode", "RegionData", "SmoothingMode", "WrapMode", "WarpMode", "AdjustableArrowCap", "CustomLineCap", "DashCap", "GraphicsPathIterator", "GraphicsState", "GraphicsPath"]
# endregion

# region: Imports
from System import Drawing
from System import Numerics
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Drawing.Common, Version=7.0.0.0

class Blend(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, count: int): ...
    @property
    def Factors(self) -> System.System.Array[System.Single]: ...
    @property
    def Positions(self) -> System.System.Array[System.Single]: ...
    @Factors.setter
    def Factors(self, value: System.Void): ...
    @Positions.setter
    def Positions(self, value: System.Void): ...

class ColorBlend(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, count: int): ...
    @property
    def Colors(self) -> Drawing.System.Array[Drawing.Color]: ...
    @property
    def Positions(self) -> System.System.Array[System.Single]: ...
    @Colors.setter
    def Colors(self, value: System.Void): ...
    @Positions.setter
    def Positions(self, value: System.Void): ...

class CombineMode(enum.Enum):
    Replace = 0
    Intersect = 1
    Union = 2
    Xor = 3
    Exclude = 4
    Complement = 5

class CompositingMode(enum.Enum):
    SourceOver = 0
    SourceCopy = 1

class CompositingQuality(enum.Enum):
    Default = 0
    HighSpeed = 1
    HighQuality = 2
    GammaCorrected = 3
    AssumeLinear = 4
    Invalid = -1

class CoordinateSpace(enum.Enum):
    World = 0
    Page = 1
    Device = 2

class DashStyle(enum.Enum):
    Solid = 0
    Dash = 1
    Dot = 2
    DashDot = 3
    DashDotDot = 4
    Custom = 5

class FillMode(enum.Enum):
    Alternate = 0
    Winding = 1

class FlushIntention(enum.Enum):
    Flush = 0
    Sync = 1

class GraphicsContainer(System.MarshalByRefObject):
    """    """

class HatchBrush(Drawing.Brush):
    """    """
    @overload
    def __init__(self, hatchstyle: HatchStyle, foreColor: Drawing.Color): ...
    @overload
    def __init__(self, hatchstyle: HatchStyle, foreColor: Drawing.Color, backColor: Drawing.Color): ...
    @overload
    def Clone() -> object: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def ForegroundColor(self) -> Drawing.Color: ...
    @property
    def HatchStyle(self) -> HatchStyle: ...

class HatchStyle(enum.Enum):
    Horizontal = 0
    Min = 0
    Vertical = 1
    ForwardDiagonal = 2
    BackwardDiagonal = 3
    Cross = 4
    LargeGrid = 4
    Max = 4
    DiagonalCross = 5
    Percent05 = 6
    Percent10 = 7
    Percent20 = 8
    Percent25 = 9
    Percent30 = 10
    Percent40 = 11
    Percent50 = 12
    Percent60 = 13
    Percent70 = 14
    Percent75 = 15
    Percent80 = 16
    Percent90 = 17
    LightDownwardDiagonal = 18
    LightUpwardDiagonal = 19
    DarkDownwardDiagonal = 20
    DarkUpwardDiagonal = 21
    WideDownwardDiagonal = 22
    WideUpwardDiagonal = 23
    LightVertical = 24
    LightHorizontal = 25
    NarrowVertical = 26
    NarrowHorizontal = 27
    DarkVertical = 28
    DarkHorizontal = 29
    DashedDownwardDiagonal = 30
    DashedUpwardDiagonal = 31
    DashedHorizontal = 32
    DashedVertical = 33
    SmallConfetti = 34
    LargeConfetti = 35
    ZigZag = 36
    Wave = 37
    DiagonalBrick = 38
    HorizontalBrick = 39
    Weave = 40
    Plaid = 41
    Divot = 42
    DottedGrid = 43
    DottedDiamond = 44
    Shingle = 45
    Trellis = 46
    Sphere = 47
    SmallGrid = 48
    SmallCheckerBoard = 49
    LargeCheckerBoard = 50
    OutlinedDiamond = 51
    SolidDiamond = 52

class InterpolationMode(enum.Enum):
    Default = 0
    Low = 1
    High = 2
    Bilinear = 3
    Bicubic = 4
    NearestNeighbor = 5
    HighQualityBilinear = 6
    HighQualityBicubic = 7
    Invalid = -1

class LinearGradientMode(enum.Enum):
    Horizontal = 0
    Vertical = 1
    ForwardDiagonal = 2
    BackwardDiagonal = 3

class LinearGradientBrush(Drawing.Brush):
    """    """
    @overload
    def __init__(self, point1: Drawing.PointF, point2: Drawing.PointF, color1: Drawing.Color, color2: Drawing.Color): ...
    @overload
    def __init__(self, point1: Drawing.Point, point2: Drawing.Point, color1: Drawing.Color, color2: Drawing.Color): ...
    @overload
    def __init__(self, rect: Drawing.RectangleF, color1: Drawing.Color, color2: Drawing.Color, linearGradientMode: LinearGradientMode): ...
    @overload
    def __init__(self, rect: Drawing.Rectangle, color1: Drawing.Color, color2: Drawing.Color, linearGradientMode: LinearGradientMode): ...
    @overload
    def __init__(self, rect: Drawing.RectangleF, color1: Drawing.Color, color2: Drawing.Color, angle: System.Single): ...
    @overload
    def __init__(self, rect: Drawing.Rectangle, color1: Drawing.Color, color2: Drawing.Color, angle: System.Single): ...
    @overload
    def __init__(self, rect: Drawing.RectangleF, color1: Drawing.Color, color2: Drawing.Color, angle: System.Single, isAngleScaleable: bool): ...
    @overload
    def __init__(self, rect: Drawing.Rectangle, color1: Drawing.Color, color2: Drawing.Color, angle: System.Single, isAngleScaleable: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def Blend(self) -> Blend: ...
    @property
    def GammaCorrection(self) -> bool: ...
    @property
    def InterpolationColors(self) -> ColorBlend: ...
    @property
    def LinearColors(self) -> Drawing.System.Array[Drawing.Color]: ...
    @property
    def Rectangle(self) -> Drawing.RectangleF: ...
    @property
    def Transform(self) -> Matrix: ...
    @property
    def WrapMode(self) -> WrapMode: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    @overload
    def ResetTransform() -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single, order: MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single, order: MatrixOrder) -> None: ...
    @Blend.setter
    def Blend(self, value: System.Void): ...
    @GammaCorrection.setter
    def GammaCorrection(self, value: System.Void): ...
    @InterpolationColors.setter
    def InterpolationColors(self, value: System.Void): ...
    @LinearColors.setter
    def LinearColors(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @WrapMode.setter
    def WrapMode(self, value: System.Void): ...
    @overload
    def SetBlendTriangularShape(self, focus: System.Single) -> None: ...
    @overload
    def SetBlendTriangularShape(self, focus: System.Single, scale: System.Single) -> None: ...
    @overload
    def SetSigmaBellShape(self, focus: System.Single) -> None: ...
    @overload
    def SetSigmaBellShape(self, focus: System.Single, scale: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single, order: MatrixOrder) -> None: ...

class LineCap(enum.Enum):
    Flat = 0
    Square = 1
    Round = 2
    Triangle = 3
    NoAnchor = 16
    SquareAnchor = 17
    RoundAnchor = 18
    DiamondAnchor = 19
    ArrowAnchor = 20
    AnchorMask = 240
    Custom = 255

class LineJoin(enum.Enum):
    Miter = 0
    Bevel = 1
    Round = 2
    MiterClipped = 3

class MatrixOrder(enum.Enum):
    Prepend = 0
    Append = 1

class Matrix(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, matrix: Numerics.Matrix3x2): ...
    @overload
    def __init__(self, rect: Drawing.RectangleF, plgpts: Drawing.System.Array[Drawing.PointF]): ...
    @overload
    def __init__(self, rect: Drawing.Rectangle, plgpts: Drawing.System.Array[Drawing.Point]): ...
    @overload
    def __init__(self, m11: System.Single, m12: System.Single, m21: System.Single, m22: System.Single, dx: System.Single, dy: System.Single): ...
    @overload
    def Clone() -> Matrix: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Elements(self) -> System.System.Array[System.Single]: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsInvertible(self) -> bool: ...
    @property
    def MatrixElements(self) -> Numerics.Matrix3x2: ...
    @property
    def OffsetX(self) -> System.Single: ...
    @property
    def OffsetY(self) -> System.Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Invert() -> None: ...
    @overload
    def Multiply(self, matrix: Matrix) -> None: ...
    @overload
    def Multiply(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Rotate(self, angle: System.Single) -> None: ...
    @overload
    def Rotate(self, angle: System.Single, order: MatrixOrder) -> None: ...
    @overload
    def RotateAt(self, angle: System.Single, point: Drawing.PointF) -> None: ...
    @overload
    def RotateAt(self, angle: System.Single, point: Drawing.PointF, order: MatrixOrder) -> None: ...
    @overload
    def Scale(self, scaleX: System.Single, scaleY: System.Single) -> None: ...
    @overload
    def Scale(self, scaleX: System.Single, scaleY: System.Single, order: MatrixOrder) -> None: ...
    @MatrixElements.setter
    def MatrixElements(self, value: System.Void): ...
    @overload
    def Shear(self, shearX: System.Single, shearY: System.Single) -> None: ...
    @overload
    def Shear(self, shearX: System.Single, shearY: System.Single, order: MatrixOrder) -> None: ...
    @overload
    def TransformPoints(self, pts: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def TransformPoints(self, pts: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def TransformVectors(self, pts: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def TransformVectors(self, pts: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def Translate(self, offsetX: System.Single, offsetY: System.Single) -> None: ...
    @overload
    def Translate(self, offsetX: System.Single, offsetY: System.Single, order: MatrixOrder) -> None: ...
    @overload
    def VectorTransformPoints(self, pts: Drawing.System.Array[Drawing.Point]) -> None: ...

class PathData(object):
    """    """
    def __init__(self): ...
    @property
    def Points(self) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def Types(self) -> System.System.Array[System.Byte]: ...
    @Points.setter
    def Points(self, value: System.Void): ...
    @Types.setter
    def Types(self, value: System.Void): ...

class PathGradientBrush(Drawing.Brush):
    """    """
    @overload
    def __init__(self, points: Drawing.System.Array[Drawing.PointF]): ...
    @overload
    def __init__(self, points: Drawing.System.Array[Drawing.Point]): ...
    @overload
    def __init__(self, path: GraphicsPath): ...
    @overload
    def __init__(self, points: Drawing.System.Array[Drawing.PointF], wrapMode: WrapMode): ...
    @overload
    def __init__(self, points: Drawing.System.Array[Drawing.Point], wrapMode: WrapMode): ...
    @overload
    def Clone() -> object: ...
    @property
    def Blend(self) -> Blend: ...
    @property
    def CenterColor(self) -> Drawing.Color: ...
    @property
    def CenterPoint(self) -> Drawing.PointF: ...
    @property
    def FocusScales(self) -> Drawing.PointF: ...
    @property
    def InterpolationColors(self) -> ColorBlend: ...
    @property
    def Rectangle(self) -> Drawing.RectangleF: ...
    @property
    def SurroundColors(self) -> Drawing.System.Array[Drawing.Color]: ...
    @property
    def Transform(self) -> Matrix: ...
    @property
    def WrapMode(self) -> WrapMode: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    @overload
    def ResetTransform() -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single) -> None: ...
    @overload
    def RotateTransform(self, angle: System.Single, order: MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: System.Single, sy: System.Single, order: MatrixOrder) -> None: ...
    @Blend.setter
    def Blend(self, value: System.Void): ...
    @CenterColor.setter
    def CenterColor(self, value: System.Void): ...
    @CenterPoint.setter
    def CenterPoint(self, value: System.Void): ...
    @FocusScales.setter
    def FocusScales(self, value: System.Void): ...
    @InterpolationColors.setter
    def InterpolationColors(self, value: System.Void): ...
    @SurroundColors.setter
    def SurroundColors(self, value: System.Void): ...
    @Transform.setter
    def Transform(self, value: System.Void): ...
    @WrapMode.setter
    def WrapMode(self, value: System.Void): ...
    @overload
    def SetBlendTriangularShape(self, focus: System.Single) -> None: ...
    @overload
    def SetBlendTriangularShape(self, focus: System.Single, scale: System.Single) -> None: ...
    @overload
    def SetSigmaBellShape(self, focus: System.Single) -> None: ...
    @overload
    def SetSigmaBellShape(self, focus: System.Single, scale: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: System.Single, dy: System.Single, order: MatrixOrder) -> None: ...

class PathPointType(enum.Enum):
    Start = 0
    Line = 1
    Bezier = 3
    Bezier3 = 3
    PathTypeMask = 7
    DashMode = 16
    PathMarker = 32
    CloseSubpath = 128

class PenAlignment(enum.Enum):
    Center = 0
    Inset = 1
    Outset = 2
    Left = 3
    Right = 4

class PenType(enum.Enum):
    SolidColor = 0
    HatchFill = 1
    TextureFill = 2
    PathGradient = 3
    LinearGradient = 4

class PixelOffsetMode(enum.Enum):
    Default = 0
    HighSpeed = 1
    HighQuality = 2
    None_ = 3
    Half = 4
    Invalid = -1

class QualityMode(enum.Enum):
    Default = 0
    Low = 1
    High = 2
    Invalid = -1

class RegionData(object):
    """    """
    @property
    def Data(self) -> System.System.Array[System.Byte]: ...
    @Data.setter
    def Data(self, value: System.Void): ...

class SmoothingMode(enum.Enum):
    Default = 0
    HighSpeed = 1
    HighQuality = 2
    None_ = 3
    AntiAlias = 4
    Invalid = -1

class WrapMode(enum.Enum):
    Tile = 0
    TileFlipX = 1
    TileFlipY = 2
    TileFlipXY = 3
    Clamp = 4

class WarpMode(enum.Enum):
    Perspective = 0
    Bilinear = 1

class AdjustableArrowCap(CustomLineCap):
    """    """
    @overload
    def __init__(self, width: System.Single, height: System.Single): ...
    @overload
    def __init__(self, width: System.Single, height: System.Single, isFilled: bool): ...
    @property
    def Filled(self) -> bool: ...
    @property
    def Height(self) -> System.Single: ...
    @property
    def MiddleInset(self) -> System.Single: ...
    @property
    def Width(self) -> System.Single: ...
    @Filled.setter
    def Filled(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @MiddleInset.setter
    def MiddleInset(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...

class CustomLineCap(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self, fillPath: GraphicsPath, strokePath: GraphicsPath): ...
    @overload
    def __init__(self, fillPath: GraphicsPath, strokePath: GraphicsPath, baseCap: LineCap): ...
    @overload
    def __init__(self, fillPath: GraphicsPath, strokePath: GraphicsPath, baseCap: LineCap, baseInset: System.Single): ...
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @property
    def BaseCap(self) -> LineCap: ...
    @property
    def BaseInset(self) -> System.Single: ...
    @property
    def StrokeJoin(self) -> LineJoin: ...
    @property
    def WidthScale(self) -> System.Single: ...
    @overload
    def GetStrokeCaps() -> (LineCap, LineCap): ...
    @BaseCap.setter
    def BaseCap(self, value: System.Void): ...
    @BaseInset.setter
    def BaseInset(self, value: System.Void): ...
    @StrokeJoin.setter
    def StrokeJoin(self, value: System.Void): ...
    @WidthScale.setter
    def WidthScale(self, value: System.Void): ...
    @overload
    def SetStrokeCaps(self, startCap: LineCap, endCap: LineCap) -> None: ...

class DashCap(enum.Enum):
    Flat = 0
    Round = 2
    Triangle = 3

class GraphicsPathIterator(System.MarshalByRefObject):
    """    """
    def __init__(self, path: GraphicsPath): ...
    @overload
    def CopyData(self, startIndex: int, endIndex: int) -> (int, Drawing.System.Array[Drawing.PointF], System.System.Array[System.Byte]): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Enumerate() -> (int, Drawing.System.Array[Drawing.PointF], System.System.Array[System.Byte]): ...
    @property
    def Count(self) -> int: ...
    @property
    def SubpathCount(self) -> int: ...
    @overload
    def HasCurve() -> bool: ...
    @overload
    def NextMarker(self, path: GraphicsPath) -> int: ...
    @overload
    def NextMarker() -> (int, int, int): ...
    @overload
    def NextPathType() -> (int, System.Byte, int, int): ...
    @overload
    def NextSubpath(self, path: GraphicsPath) -> (int, bool): ...
    @overload
    def NextSubpath() -> (int, int, int, bool): ...
    @overload
    def Rewind() -> None: ...

class GraphicsState(System.MarshalByRefObject):
    """    """

class GraphicsPath(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fillMode: FillMode): ...
    @overload
    def __init__(self, pts: Drawing.System.Array[Drawing.PointF], types: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, pts: Drawing.System.Array[Drawing.Point], types: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, pts: Drawing.System.Array[Drawing.PointF], types: System.System.Array[System.Byte], fillMode: FillMode): ...
    @overload
    def __init__(self, pts: Drawing.System.Array[Drawing.Point], types: System.System.Array[System.Byte], fillMode: FillMode): ...
    @overload
    def AddArc(self, rect: Drawing.Rectangle, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddArc(self, rect: Drawing.RectangleF, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddArc(self, x: int, y: int, width: int, height: int, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddArc(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddBezier(self, pt1: Drawing.Point, pt2: Drawing.Point, pt3: Drawing.Point, pt4: Drawing.Point) -> None: ...
    @overload
    def AddBezier(self, pt1: Drawing.PointF, pt2: Drawing.PointF, pt3: Drawing.PointF, pt4: Drawing.PointF) -> None: ...
    @overload
    def AddBezier(self, x1: System.Single, y1: System.Single, x2: System.Single, y2: System.Single, x3: System.Single, y3: System.Single, x4: System.Single, y4: System.Single) -> None: ...
    @overload
    def AddBezier(self, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> None: ...
    @overload
    def AddBeziers(self, points: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def AddBeziers(self, points: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def AddClosedCurve(self, points: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def AddClosedCurve(self, points: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def AddClosedCurve(self, points: Drawing.System.Array[Drawing.Point], tension: System.Single) -> None: ...
    @overload
    def AddClosedCurve(self, points: Drawing.System.Array[Drawing.PointF], tension: System.Single) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.PointF], tension: System.Single) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.Point], tension: System.Single) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.PointF], offset: int, numberOfSegments: int, tension: System.Single) -> None: ...
    @overload
    def AddCurve(self, points: Drawing.System.Array[Drawing.Point], offset: int, numberOfSegments: int, tension: System.Single) -> None: ...
    @overload
    def AddEllipse(self, rect: Drawing.RectangleF) -> None: ...
    @overload
    def AddEllipse(self, rect: Drawing.Rectangle) -> None: ...
    @overload
    def AddEllipse(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single) -> None: ...
    @overload
    def AddEllipse(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def AddLine(self, pt1: Drawing.PointF, pt2: Drawing.PointF) -> None: ...
    @overload
    def AddLine(self, pt1: Drawing.Point, pt2: Drawing.Point) -> None: ...
    @overload
    def AddLine(self, x1: System.Single, y1: System.Single, x2: System.Single, y2: System.Single) -> None: ...
    @overload
    def AddLine(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    @overload
    def AddLines(self, points: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def AddLines(self, points: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def AddPath(self, addingPath: GraphicsPath, connect: bool) -> None: ...
    @overload
    def AddPie(self, rect: Drawing.Rectangle, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddPie(self, x: System.Single, y: System.Single, width: System.Single, height: System.Single, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddPie(self, x: int, y: int, width: int, height: int, startAngle: System.Single, sweepAngle: System.Single) -> None: ...
    @overload
    def AddPolygon(self, points: Drawing.System.Array[Drawing.Point]) -> None: ...
    @overload
    def AddPolygon(self, points: Drawing.System.Array[Drawing.PointF]) -> None: ...
    @overload
    def AddRectangle(self, rect: Drawing.RectangleF) -> None: ...
    @overload
    def AddRectangle(self, rect: Drawing.Rectangle) -> None: ...
    @overload
    def AddRectangles(self, rects: Drawing.System.Array[Drawing.RectangleF]) -> None: ...
    @overload
    def AddRectangles(self, rects: Drawing.System.Array[Drawing.Rectangle]) -> None: ...
    @overload
    def AddString(self, s: str, family: Drawing.FontFamily, style: int, emSize: System.Single, origin: Drawing.PointF, format_: Drawing.StringFormat) -> None: ...
    @overload
    def AddString(self, s: str, family: Drawing.FontFamily, style: int, emSize: System.Single, origin: Drawing.Point, format_: Drawing.StringFormat) -> None: ...
    @overload
    def AddString(self, s: str, family: Drawing.FontFamily, style: int, emSize: System.Single, layoutRect: Drawing.RectangleF, format_: Drawing.StringFormat) -> None: ...
    @overload
    def AddString(self, s: str, family: Drawing.FontFamily, style: int, emSize: System.Single, layoutRect: Drawing.Rectangle, format_: Drawing.StringFormat) -> None: ...
    @overload
    def ClearMarkers() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    def CloseAllFigures() -> None: ...
    @overload
    def CloseFigure() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Flatten() -> None: ...
    @overload
    def Flatten(self, matrix: Matrix) -> None: ...
    @overload
    def Flatten(self, matrix: Matrix, flatness: System.Single) -> None: ...
    @property
    def FillMode(self) -> FillMode: ...
    @property
    def PathData(self) -> PathData: ...
    @property
    def PathPoints(self) -> Drawing.System.Array[Drawing.PointF]: ...
    @property
    def PathTypes(self) -> System.System.Array[System.Byte]: ...
    @property
    def PointCount(self) -> int: ...
    @overload
    def GetBounds() -> Drawing.RectangleF: ...
    @overload
    def GetBounds(self, matrix: Matrix) -> Drawing.RectangleF: ...
    @overload
    def GetBounds(self, matrix: Matrix, pen: Drawing.Pen) -> Drawing.RectangleF: ...
    @overload
    def GetLastPoint() -> Drawing.PointF: ...
    @overload
    def IsOutlineVisible(self, point: Drawing.Point, pen: Drawing.Pen) -> bool: ...
    @overload
    def IsOutlineVisible(self, point: Drawing.PointF, pen: Drawing.Pen) -> bool: ...
    @overload
    def IsOutlineVisible(self, pt: Drawing.Point, pen: Drawing.Pen, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsOutlineVisible(self, x: int, y: int, pen: Drawing.Pen) -> bool: ...
    @overload
    def IsOutlineVisible(self, pt: Drawing.PointF, pen: Drawing.Pen, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsOutlineVisible(self, x: System.Single, y: System.Single, pen: Drawing.Pen) -> bool: ...
    @overload
    def IsOutlineVisible(self, x: int, y: int, pen: Drawing.Pen, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsOutlineVisible(self, x: System.Single, y: System.Single, pen: Drawing.Pen, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsVisible(self, point: Drawing.PointF) -> bool: ...
    @overload
    def IsVisible(self, point: Drawing.Point) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single) -> bool: ...
    @overload
    def IsVisible(self, pt: Drawing.PointF, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsVisible(self, pt: Drawing.Point, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: System.Single, y: System.Single, graphics: Drawing.Graphics) -> bool: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Reverse() -> None: ...
    @FillMode.setter
    def FillMode(self, value: System.Void): ...
    @overload
    def SetMarkers() -> None: ...
    @overload
    def StartFigure() -> None: ...
    @overload
    def Transform(self, matrix: Matrix) -> None: ...
    @overload
    def Warp(self, destPoints: Drawing.System.Array[Drawing.PointF], srcRect: Drawing.RectangleF) -> None: ...
    @overload
    def Warp(self, destPoints: Drawing.System.Array[Drawing.PointF], srcRect: Drawing.RectangleF, matrix: Matrix) -> None: ...
    @overload
    def Warp(self, destPoints: Drawing.System.Array[Drawing.PointF], srcRect: Drawing.RectangleF, matrix: Matrix, warpMode: WarpMode) -> None: ...
    @overload
    def Warp(self, destPoints: Drawing.System.Array[Drawing.PointF], srcRect: Drawing.RectangleF, matrix: Matrix, warpMode: WarpMode, flatness: System.Single) -> None: ...
    @overload
    def Widen(self, pen: Drawing.Pen) -> None: ...
    @overload
    def Widen(self, pen: Drawing.Pen, matrix: Matrix) -> None: ...
    @overload
    def Widen(self, pen: Drawing.Pen, matrix: Matrix, flatness: System.Single) -> None: ...

# endregion
