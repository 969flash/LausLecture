"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["LazyMemberInfo", "ReflectionModelServices"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.ComponentModel import Composition
from System.ComponentModel.Composition import Primitives
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.ComponentModel.Composition, Version=4.0.0.0

class LazyMemberInfo(System.ValueType):
    """    """
    @overload
    def __init__(self, member: Reflection.MemberInfo): ...
    @overload
    def __init__(self, memberType: Reflection.MemberTypes, accessors: Reflection.System.Array[Reflection.MemberInfo]): ...
    @overload
    def __init__(self, memberType: Reflection.MemberTypes, accessorsCreator: System.Func): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LazyMemberInfo) -> bool: ...
    @property
    def MemberType(self) -> Reflection.MemberTypes: ...
    @overload
    def GetAccessors() -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetHashCode() -> int: ...

class ReflectionModelServices(object):
    """    """
    @overload
    @staticmethod
    def CreateExportDefinition(exportingMember: LazyMemberInfo, contractName: str, metadata: System.Lazy, origin: Primitives.ICompositionElement) -> Primitives.ExportDefinition: ...
    @overload
    @staticmethod
    def CreateImportDefinition(parameter: System.Lazy, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: Primitives.ImportCardinality, requiredCreationPolicy: Composition.CreationPolicy, origin: Primitives.ICompositionElement) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: Primitives.ImportCardinality, isRecomposable: bool, requiredCreationPolicy: Composition.CreationPolicy, origin: Primitives.ICompositionElement) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def CreateImportDefinition(parameter: System.Lazy, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: Primitives.ImportCardinality, requiredCreationPolicy: Composition.CreationPolicy, metadata: Generic.IDictionary, isExportFactory: bool, origin: Primitives.ICompositionElement) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: Primitives.ImportCardinality, isRecomposable: bool, requiredCreationPolicy: Composition.CreationPolicy, metadata: Generic.IDictionary, isExportFactory: bool, origin: Primitives.ICompositionElement) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: Primitives.ImportCardinality, isRecomposable: bool, isPreRequisite: bool, requiredCreationPolicy: Composition.CreationPolicy, metadata: Generic.IDictionary, isExportFactory: bool, origin: Primitives.ICompositionElement) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def CreatePartDefinition(partType: System.Lazy, isDisposalRequired: bool, imports: System.Lazy, exports: System.Lazy, metadata: System.Lazy, origin: Primitives.ICompositionElement) -> Primitives.ComposablePartDefinition: ...
    @overload
    @staticmethod
    def GetExportFactoryProductImportDefinition(importDefinition: Primitives.ImportDefinition) -> Primitives.ContractBasedImportDefinition: ...
    @overload
    @staticmethod
    def GetExportingMember(exportDefinition: Primitives.ExportDefinition) -> LazyMemberInfo: ...
    @overload
    @staticmethod
    def GetImportingMember(importDefinition: Primitives.ImportDefinition) -> LazyMemberInfo: ...
    @overload
    @staticmethod
    def GetImportingParameter(importDefinition: Primitives.ImportDefinition) -> System.Lazy: ...
    @overload
    @staticmethod
    def GetPartType(partDefinition: Primitives.ComposablePartDefinition) -> System.Lazy: ...
    @overload
    @staticmethod
    def IsDisposalRequired(partDefinition: Primitives.ComposablePartDefinition) -> bool: ...
    @overload
    @staticmethod
    def IsExportFactoryImportDefinition(importDefinition: Primitives.ImportDefinition) -> bool: ...
    @overload
    @staticmethod
    def IsImportingParameter(importDefinition: Primitives.ImportDefinition) -> bool: ...
    @overload
    @staticmethod
    def TryMakeGenericPartDefinition(partDefinition: Primitives.ComposablePartDefinition, genericParameters: Generic.IEnumerable) -> (bool, Primitives.ComposablePartDefinition): ...

# endregion
