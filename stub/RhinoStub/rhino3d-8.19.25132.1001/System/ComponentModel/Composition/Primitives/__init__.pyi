"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ComposablePart", "ComposablePartCatalog", "ComposablePartDefinition", "ComposablePartException", "ContractBasedImportDefinition", "Export", "ExportDefinition", "ExportedDelegate", "ICompositionElement", "ImportCardinality", "ImportDefinition"]
# endregion

# region: Imports
from System import Linq
from System import Reflection
from System.Collections import Generic
from System.ComponentModel import Composition
from System.Linq import Expressions
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.ComponentModel.Composition, Version=4.0.0.0

class ComposablePart(object):
    """    """
    @overload
    def Activate() -> None: ...
    @property
    def ExportDefinitions(self) -> Generic.IEnumerable: ...
    @property
    def ImportDefinitions(self) -> Generic.IEnumerable: ...
    @property
    def Metadata(self) -> Generic.IDictionary: ...
    @overload
    def GetExportedValue(self, definition: ExportDefinition) -> object: ...
    @overload
    def SetImport(self, definition: ImportDefinition, exports: Generic.IEnumerable) -> None: ...

class ComposablePartCatalog(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Parts(self) -> Linq.IQueryable: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: ImportDefinition) -> Generic.IEnumerable: ...

class ComposablePartDefinition(object):
    """    """
    @overload
    def CreatePart() -> ComposablePart: ...
    @property
    def ExportDefinitions(self) -> Generic.IEnumerable: ...
    @property
    def ImportDefinitions(self) -> Generic.IEnumerable: ...
    @property
    def Metadata(self) -> Generic.IDictionary: ...

class ComposablePartException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, element: ICompositionElement): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, element: ICompositionElement, innerException: System.Exception): ...
    @property
    def Element(self) -> ICompositionElement: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ContractBasedImportDefinition(ImportDefinition):
    """    """
    @overload
    def __init__(self, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: ImportCardinality, isRecomposable: bool, isPrerequisite: bool, requiredCreationPolicy: Composition.CreationPolicy): ...
    @overload
    def __init__(self, contractName: str, requiredTypeIdentity: str, requiredMetadata: Generic.IEnumerable, cardinality: ImportCardinality, isRecomposable: bool, isPrerequisite: bool, requiredCreationPolicy: Composition.CreationPolicy, metadata: Generic.IDictionary): ...
    @property
    def Constraint(self) -> Expressions.Expression: ...
    @property
    def RequiredCreationPolicy(self) -> Composition.CreationPolicy: ...
    @property
    def RequiredMetadata(self) -> Generic.IEnumerable: ...
    @property
    def RequiredTypeIdentity(self) -> str: ...
    @overload
    def IsConstraintSatisfiedBy(self, exportDefinition: ExportDefinition) -> bool: ...
    @overload
    def ToString() -> str: ...

class Export(object):
    """    """
    @overload
    def __init__(self, contractName: str, exportedValueGetter: System.Func): ...
    @overload
    def __init__(self, definition: ExportDefinition, exportedValueGetter: System.Func): ...
    @overload
    def __init__(self, contractName: str, metadata: Generic.IDictionary, exportedValueGetter: System.Func): ...
    @property
    def Definition(self) -> ExportDefinition: ...
    @property
    def Metadata(self) -> Generic.IDictionary: ...
    @property
    def Value(self) -> object: ...

class ExportDefinition(object):
    """    """
    def __init__(self, contractName: str, metadata: Generic.IDictionary): ...
    @property
    def ContractName(self) -> str: ...
    @property
    def Metadata(self) -> Generic.IDictionary: ...
    @overload
    def ToString() -> str: ...

class ExportedDelegate(object):
    """    """
    def __init__(self, instance: object, method: Reflection.MethodInfo): ...
    @overload
    def CreateDelegate(self, delegateType: System.Type) -> System.Delegate: ...

class ICompositionElement:
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def Origin(self) -> ICompositionElement: ...

class ImportCardinality(enum.Enum):
    ZeroOrOne = 0
    ExactlyOne = 1
    ZeroOrMore = 2

class ImportDefinition(object):
    """    """
    @overload
    def __init__(self, constraint: Expressions.Expression, contractName: str, cardinality: ImportCardinality, isRecomposable: bool, isPrerequisite: bool): ...
    @overload
    def __init__(self, constraint: Expressions.Expression, contractName: str, cardinality: ImportCardinality, isRecomposable: bool, isPrerequisite: bool, metadata: Generic.IDictionary): ...
    @property
    def Cardinality(self) -> ImportCardinality: ...
    @property
    def Constraint(self) -> Expressions.Expression: ...
    @property
    def ContractName(self) -> str: ...
    @property
    def IsPrerequisite(self) -> bool: ...
    @property
    def IsRecomposable(self) -> bool: ...
    @property
    def Metadata(self) -> Generic.IDictionary: ...
    @overload
    def IsConstraintSatisfiedBy(self, exportDefinition: ExportDefinition) -> bool: ...
    @overload
    def ToString() -> str: ...

# endregion
