"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ReflectionModel", "Primitives", "Hosting", "AttributedModelServices", "CatalogReflectionContextAttribute", "ChangeRejectedException", "CompositionContractMismatchException", "CompositionError", "CompositionException", "CreationPolicy", "ExportAttribute", "ExportFactory", "ExportLifetimeContext", "ExportMetadataAttribute", "ICompositionService", "ImportAttribute", "ImportCardinalityMismatchException", "ImportingConstructorAttribute", "ImportManyAttribute", "ImportSource", "InheritedExportAttribute", "IPartImportsSatisfiedNotification", "MetadataAttributeAttribute", "MetadataViewImplementationAttribute", "PartCreationPolicyAttribute", "PartMetadataAttribute", "PartNotDiscoverableAttribute", "AdaptationConstants"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.ComponentModel.Composition import Hosting
from System.ComponentModel.Composition import Primitives
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.ComponentModel.Composition, Version=4.0.0.0

class AttributedModelServices(object):
    """    """
    @overload
    @staticmethod
    def AddExportedValue(batch: Hosting.CompositionBatch, exportedValue: T) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def AddExportedValue(batch: Hosting.CompositionBatch, contractName: str, exportedValue: T) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def AddPart(batch: Hosting.CompositionBatch, attributedPart: object) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def ComposeExportedValue(container: Hosting.CompositionContainer, exportedValue: T) -> None: ...
    @overload
    @staticmethod
    def ComposeExportedValue(container: Hosting.CompositionContainer, contractName: str, exportedValue: T) -> None: ...
    @overload
    @staticmethod
    def ComposeParts(container: Hosting.CompositionContainer, attributedParts: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def CreatePart(attributedPart: object) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def CreatePart(attributedPart: object, reflectionContext: Reflection.ReflectionContext) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def CreatePart(partDefinition: Primitives.ComposablePartDefinition, attributedPart: object) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def CreatePartDefinition(type_: System.Type, origin: Primitives.ICompositionElement) -> Primitives.ComposablePartDefinition: ...
    @overload
    @staticmethod
    def CreatePartDefinition(type_: System.Type, origin: Primitives.ICompositionElement, ensureIsDiscoverable: bool) -> Primitives.ComposablePartDefinition: ...
    @overload
    @staticmethod
    def Exports(part: Primitives.ComposablePartDefinition) -> bool: ...
    @overload
    @staticmethod
    def Exports(part: Primitives.ComposablePartDefinition, contractType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def GetContractName(type_: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetMetadataView(metadata: Generic.IDictionary) -> TMetadataView: ...
    @overload
    @staticmethod
    def GetTypeIdentity(method: Reflection.MethodInfo) -> str: ...
    @overload
    @staticmethod
    def GetTypeIdentity(type_: System.Type) -> str: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition) -> bool: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition, contractType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition, importCardinality: Primitives.ImportCardinality) -> bool: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition, contractType: System.Type, importCardinality: Primitives.ImportCardinality) -> bool: ...
    @overload
    @staticmethod
    def SatisfyImportsOnce(compositionService: ICompositionService, attributedPart: object) -> Primitives.ComposablePart: ...
    @overload
    @staticmethod
    def SatisfyImportsOnce(compositionService: ICompositionService, attributedPart: object, reflectionContext: Reflection.ReflectionContext) -> Primitives.ComposablePart: ...

class CatalogReflectionContextAttribute(System.Attribute):
    """    """
    def __init__(self, reflectionContextType: System.Type): ...
    @overload
    def CreateReflectionContext() -> Reflection.ReflectionContext: ...

class ChangeRejectedException(CompositionException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errors: Generic.IEnumerable): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Message(self) -> str: ...

class CompositionContractMismatchException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class CompositionError(object):
    """    """
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, element: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, message: str, exception: System.Exception): ...
    @overload
    def __init__(self, message: str, element: Primitives.ICompositionElement, exception: System.Exception): ...
    @property
    def Description(self) -> str: ...
    @property
    def Element(self) -> Primitives.ICompositionElement: ...
    @property
    def Exception(self) -> System.Exception: ...
    @overload
    def ToString() -> str: ...

class CompositionException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errors: Generic.IEnumerable): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Errors(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def Message(self) -> str: ...
    @property
    def RootCauses(self) -> ObjectModel.ReadOnlyCollection: ...

class CreationPolicy(enum.Enum):
    Any = 0
    Shared = 1
    NonShared = 2

class ExportAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: System.Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: System.Type): ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> System.Type: ...

class ExportFactory(object):
    """    ExportFactory[T]
    """
    def __init__(self, exportLifetimeContextCreator: System.Func): ...
    @overload
    def CreateExport() -> ExportLifetimeContext: ...

class ExportFactory(ExportFactory):
    """    ExportFactory[T, TMetadata]
    """
    def __init__(self, exportLifetimeContextCreator: System.Func, metadata: TMetadata): ...
    @property
    def Metadata(self) -> TMetadata: ...

class ExportLifetimeContext(object):
    """    ExportLifetimeContext[T]
    """
    def __init__(self, value: T, disposeAction: System.Action): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Value(self) -> T: ...

class ExportMetadataAttribute(System.Attribute):
    """    """
    def __init__(self, name: str, value: object): ...
    @property
    def IsMultiple(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> object: ...
    @IsMultiple.setter
    def IsMultiple(self, value: System.Void): ...

class ICompositionService:
    """    """
    @overload
    def SatisfyImportsOnce(self, part: Primitives.ComposablePart) -> None: ...

class ImportAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: System.Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: System.Type): ...
    @property
    def AllowDefault(self) -> bool: ...
    @property
    def AllowRecomposition(self) -> bool: ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> System.Type: ...
    @property
    def RequiredCreationPolicy(self) -> CreationPolicy: ...
    @property
    def Source(self) -> ImportSource: ...
    @AllowDefault.setter
    def AllowDefault(self, value: System.Void): ...
    @AllowRecomposition.setter
    def AllowRecomposition(self, value: System.Void): ...
    @RequiredCreationPolicy.setter
    def RequiredCreationPolicy(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class ImportCardinalityMismatchException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ImportingConstructorAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ImportManyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: System.Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: System.Type): ...
    @property
    def AllowRecomposition(self) -> bool: ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> System.Type: ...
    @property
    def RequiredCreationPolicy(self) -> CreationPolicy: ...
    @property
    def Source(self) -> ImportSource: ...
    @AllowRecomposition.setter
    def AllowRecomposition(self, value: System.Void): ...
    @RequiredCreationPolicy.setter
    def RequiredCreationPolicy(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class ImportSource(enum.Enum):
    Any = 0
    Local = 1
    NonLocal = 2

class InheritedExportAttribute(ExportAttribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: System.Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: System.Type): ...

class IPartImportsSatisfiedNotification:
    """    """
    @overload
    def OnImportsSatisfied() -> None: ...

class MetadataAttributeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class MetadataViewImplementationAttribute(System.Attribute):
    """    """
    def __init__(self, implementationType: System.Type): ...
    @property
    def ImplementationType(self) -> System.Type: ...

class PartCreationPolicyAttribute(System.Attribute):
    """    """
    def __init__(self, creationPolicy: CreationPolicy): ...
    @property
    def CreationPolicy(self) -> CreationPolicy: ...

class PartMetadataAttribute(System.Attribute):
    """    """
    def __init__(self, name: str, value: object): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> object: ...

class PartNotDiscoverableAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class AdaptationConstants(object):
    """    """
    @property
    def AdapterContractName(self) -> str: ...
    @property
    def AdapterFromContractMetadataName(self) -> str: ...
    @property
    def AdapterToContractMetadataName(self) -> str: ...

# endregion
