"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AggregateCatalog", "AggregateExportProvider", "ApplicationCatalog", "AssemblyCatalog", "AtomicComposition", "CatalogExportProvider", "CatalogExtensions", "ComposablePartCatalogChangeEventArgs", "ComposablePartExportProvider", "CompositionBatch", "CompositionConstants", "CompositionContainer", "CompositionOptions", "CompositionScopeDefinition", "CompositionService", "DirectoryCatalog", "ExportProvider", "ExportsChangeEventArgs", "FilteredCatalog", "ImportEngine", "INotifyComposablePartCatalogChanged", "ScopingExtensions", "TypeCatalog"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.Collections import ObjectModel
from System.ComponentModel.Composition import Primitives
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.ComponentModel.Composition, Version=4.0.0.0

class AggregateCatalog(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, catalogs: Primitives.System.Array[Primitives.ComposablePartCatalog]): ...
    @overload
    def __init__(self, catalogs: Generic.IEnumerable): ...
    @property
    def Catalogs(self) -> Generic.ICollection: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @property
    def Changed(self): ...
    @property
    def Changing(self): ...

class AggregateExportProvider(ExportProvider):
    """    """
    @overload
    def __init__(self, providers: System.Array[ExportProvider]): ...
    @overload
    def __init__(self, providers: Generic.IEnumerable): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Providers(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ExportsChanged(self): ...
    @property
    def ExportsChanging(self): ...

class ApplicationCatalog(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @overload
    def ToString() -> str: ...

class AssemblyCatalog(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self, codeBase: str): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly): ...
    @overload
    def __init__(self, codeBase: str, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, codeBase: str, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, codeBase: str, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, assembly: Reflection.Assembly, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @overload
    def ToString() -> str: ...

class AtomicComposition(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, outerAtomicComposition: AtomicComposition): ...
    @overload
    def AddCompleteAction(self, completeAction: System.Action) -> None: ...
    @overload
    def AddRevertAction(self, revertAction: System.Action) -> None: ...
    @overload
    def Complete() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def SetValue(self, key: object, value: object) -> None: ...
    @overload
    def TryGetValue(self, key: object) -> (bool, T): ...
    @overload
    def TryGetValue(self, key: object, localAtomicCompositionOnly: bool) -> (bool, T): ...

class CatalogExportProvider(ExportProvider):
    """    """
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, isThreadSafe: bool): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, compositionOptions: CompositionOptions): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Catalog(self) -> Primitives.ComposablePartCatalog: ...
    @property
    def SourceProvider(self) -> ExportProvider: ...
    @SourceProvider.setter
    def SourceProvider(self, value: System.Void): ...
    @property
    def ExportsChanged(self): ...
    @property
    def ExportsChanging(self): ...

class CatalogExtensions(object):
    """    """
    @overload
    @staticmethod
    def CreateCompositionService(composablePartCatalog: Primitives.ComposablePartCatalog) -> CompositionService: ...

class ComposablePartCatalogChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, addedDefinitions: Generic.IEnumerable, removedDefinitions: Generic.IEnumerable, atomicComposition: AtomicComposition): ...
    @property
    def AddedDefinitions(self) -> Generic.IEnumerable: ...
    @property
    def AtomicComposition(self) -> AtomicComposition: ...
    @property
    def RemovedDefinitions(self) -> Generic.IEnumerable: ...

class ComposablePartExportProvider(ExportProvider):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isThreadSafe: bool): ...
    @overload
    def __init__(self, compositionOptions: CompositionOptions): ...
    @overload
    def Compose(self, batch: CompositionBatch) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def SourceProvider(self) -> ExportProvider: ...
    @SourceProvider.setter
    def SourceProvider(self, value: System.Void): ...
    @property
    def ExportsChanged(self): ...
    @property
    def ExportsChanging(self): ...

class CompositionBatch(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, partsToAdd: Generic.IEnumerable, partsToRemove: Generic.IEnumerable): ...
    @overload
    def AddExport(self, export: Primitives.Export) -> Primitives.ComposablePart: ...
    @overload
    def AddPart(self, part: Primitives.ComposablePart) -> None: ...
    @property
    def PartsToAdd(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def PartsToRemove(self) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def RemovePart(self, part: Primitives.ComposablePart) -> None: ...

class CompositionConstants(object):
    """    """
    @property
    def PartCreationPolicyMetadataName(self) -> str: ...
    @property
    def ImportSourceMetadataName(self) -> str: ...
    @property
    def IsGenericPartMetadataName(self) -> str: ...
    @property
    def GenericContractMetadataName(self) -> str: ...
    @property
    def GenericParametersMetadataName(self) -> str: ...
    @property
    def ExportTypeIdentityMetadataName(self) -> str: ...

class CompositionContainer(ExportProvider):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, providers: System.Array[ExportProvider]): ...
    @overload
    def __init__(self, compositionOptions: CompositionOptions, providers: System.Array[ExportProvider]): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, providers: System.Array[ExportProvider]): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, isThreadSafe: bool, providers: System.Array[ExportProvider]): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, compositionOptions: CompositionOptions, providers: System.Array[ExportProvider]): ...
    @overload
    def Compose(self, batch: CompositionBatch) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Catalog(self) -> Primitives.ComposablePartCatalog: ...
    @property
    def Providers(self) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def ReleaseExport(self, export: Primitives.Export) -> None: ...
    @overload
    def ReleaseExport(self, export: System.Lazy) -> None: ...
    @overload
    def ReleaseExports(self, exports: Generic.IEnumerable) -> None: ...
    @overload
    def ReleaseExports(self, exports: Generic.IEnumerable) -> None: ...
    @overload
    def ReleaseExports(self, exports: Generic.IEnumerable) -> None: ...
    @overload
    def SatisfyImportsOnce(self, part: Primitives.ComposablePart) -> None: ...
    @property
    def ExportsChanged(self): ...
    @property
    def ExportsChanging(self): ...

class CompositionOptions(enum.Enum):
    Default = 0
    DisableSilentRejection = 1
    IsThreadSafe = 2
    ExportCompositionService = 4

class CompositionScopeDefinition(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, children: Generic.IEnumerable): ...
    @overload
    def __init__(self, catalog: Primitives.ComposablePartCatalog, children: Generic.IEnumerable, publicSurface: Generic.IEnumerable): ...
    @property
    def Children(self) -> Generic.IEnumerable: ...
    @property
    def PublicSurface(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @property
    def Changed(self): ...
    @property
    def Changing(self): ...

class CompositionService(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def SatisfyImportsOnce(self, part: Primitives.ComposablePart) -> None: ...

class DirectoryCatalog(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, path: str, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str): ...
    @overload
    def __init__(self, path: str, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, path: str, searchPattern: str, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @property
    def FullPath(self) -> str: ...
    @property
    def LoadedFiles(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def Path(self) -> str: ...
    @property
    def SearchPattern(self) -> str: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def Changed(self): ...
    @property
    def Changing(self): ...

class ExportProvider(object):
    """    """
    @overload
    def GetExport() -> System.Lazy: ...
    @overload
    def GetExport() -> System.Lazy: ...
    @overload
    def GetExport(self, contractName: str) -> System.Lazy: ...
    @overload
    def GetExport(self, contractName: str) -> System.Lazy: ...
    @overload
    def GetExportedValue() -> T: ...
    @overload
    def GetExportedValue(self, contractName: str) -> T: ...
    @overload
    def GetExportedValueOrDefault() -> T: ...
    @overload
    def GetExportedValueOrDefault(self, contractName: str) -> T: ...
    @overload
    def GetExportedValues() -> Generic.IEnumerable: ...
    @overload
    def GetExportedValues(self, contractName: str) -> Generic.IEnumerable: ...
    @overload
    def GetExports() -> Generic.IEnumerable: ...
    @overload
    def GetExports() -> Generic.IEnumerable: ...
    @overload
    def GetExports(self, contractName: str) -> Generic.IEnumerable: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @overload
    def GetExports(self, contractName: str) -> Generic.IEnumerable: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition, atomicComposition: AtomicComposition) -> Generic.IEnumerable: ...
    @overload
    def GetExports(self, type_: System.Type, metadataViewType: System.Type, contractName: str) -> Generic.IEnumerable: ...
    @overload
    def TryGetExports(self, definition: Primitives.ImportDefinition, atomicComposition: AtomicComposition) -> (bool, Generic.IEnumerable): ...
    @property
    def ExportsChanged(self): ...
    @property
    def ExportsChanging(self): ...

class ExportsChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, addedExports: Generic.IEnumerable, removedExports: Generic.IEnumerable, atomicComposition: AtomicComposition): ...
    @property
    def AddedExports(self) -> Generic.IEnumerable: ...
    @property
    def AtomicComposition(self) -> AtomicComposition: ...
    @property
    def ChangedContractNames(self) -> Generic.IEnumerable: ...
    @property
    def RemovedExports(self) -> Generic.IEnumerable: ...

class FilteredCatalog(Primitives.ComposablePartCatalog):
    """    """
    def __init__(self, catalog: Primitives.ComposablePartCatalog, filter_: System.Func): ...
    @property
    def Complement(self) -> FilteredCatalog: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetExports(self, definition: Primitives.ImportDefinition) -> Generic.IEnumerable: ...
    @overload
    def IncludeDependencies() -> FilteredCatalog: ...
    @overload
    def IncludeDependencies(self, importFilter: System.Func) -> FilteredCatalog: ...
    @overload
    def IncludeDependents() -> FilteredCatalog: ...
    @overload
    def IncludeDependents(self, importFilter: System.Func) -> FilteredCatalog: ...
    @property
    def Changed(self): ...
    @property
    def Changing(self): ...

class ImportEngine(object):
    """    """
    @overload
    def __init__(self, sourceProvider: ExportProvider): ...
    @overload
    def __init__(self, sourceProvider: ExportProvider, isThreadSafe: bool): ...
    @overload
    def __init__(self, sourceProvider: ExportProvider, compositionOptions: CompositionOptions): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def PreviewImports(self, part: Primitives.ComposablePart, atomicComposition: AtomicComposition) -> None: ...
    @overload
    def ReleaseImports(self, part: Primitives.ComposablePart, atomicComposition: AtomicComposition) -> None: ...
    @overload
    def SatisfyImports(self, part: Primitives.ComposablePart) -> None: ...
    @overload
    def SatisfyImportsOnce(self, part: Primitives.ComposablePart) -> None: ...

class INotifyComposablePartCatalogChanged:
    """    """
    @property
    def Changed(self): ...
    @property
    def Changing(self): ...

class ScopingExtensions(object):
    """    """
    @overload
    @staticmethod
    def ContainsPartMetadata(part: Primitives.ComposablePartDefinition, key: str, value: T) -> bool: ...
    @overload
    @staticmethod
    def ContainsPartMetadataWithKey(part: Primitives.ComposablePartDefinition, key: str) -> bool: ...
    @overload
    @staticmethod
    def Exports(part: Primitives.ComposablePartDefinition, contractName: str) -> bool: ...
    @overload
    @staticmethod
    def Filter(catalog: Primitives.ComposablePartCatalog, filter_: System.Func) -> FilteredCatalog: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition, contractName: str) -> bool: ...
    @overload
    @staticmethod
    def Imports(part: Primitives.ComposablePartDefinition, contractName: str, importCardinality: Primitives.ImportCardinality) -> bool: ...

class TypeCatalog(Primitives.ComposablePartCatalog):
    """    """
    @overload
    def __init__(self, types: System.System.Array[System.Type]): ...
    @overload
    def __init__(self, types: Generic.IEnumerable): ...
    @overload
    def __init__(self, types: Generic.IEnumerable, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def __init__(self, types: Generic.IEnumerable, reflectionContext: Reflection.ReflectionContext): ...
    @overload
    def __init__(self, types: Generic.IEnumerable, reflectionContext: Reflection.ReflectionContext, definitionOrigin: Primitives.ICompositionElement): ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def ToString() -> str: ...

# endregion
