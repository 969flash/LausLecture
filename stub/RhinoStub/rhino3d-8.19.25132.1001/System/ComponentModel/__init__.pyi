"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Composition"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Design", "ArrayConverter", "BaseNumberConverter", "BooleanConverter", "ByteConverter", "CharConverter", "CollectionConverter", "DateOnlyConverter", "DateTimeConverter", "DateTimeOffsetConverter", "DecimalConverter", "DoubleConverter", "EnumConverter", "GuidConverter", "HalfConverter", "Int16Converter", "Int128Converter", "Int32Converter", "Int64Converter", "ITypeDescriptorContext", "MultilineStringConverter", "NullableConverter", "PropertyDescriptor", "SByteConverter", "SingleConverter", "StringConverter", "TimeOnlyConverter", "TimeSpanConverter", "TypeConverter", "StandardValuesCollection", "TypeListConverter", "UInt128Converter", "UInt16Converter", "UInt32Converter", "UInt64Converter", "VersionConverter", "AttributeCollection", "AttributeProviderAttribute", "CancelEventHandler", "CollectionChangeAction", "CollectionChangeEventArgs", "CollectionChangeEventHandler", "CustomTypeDescriptor", "DefaultEventAttribute", "DefaultPropertyAttribute", "EventDescriptor", "EventDescriptorCollection", "ExtenderProvidedPropertyAttribute", "HandledEventArgs", "HandledEventHandler", "ICustomTypeDescriptor", "IExtenderProvider", "IListSource", "ITypedList", "MemberDescriptor", "PropertyDescriptorCollection", "ProvidePropertyAttribute", "RefreshEventArgs", "RefreshEventHandler", "TypeDescriptor", "TypeDescriptionProvider", "AddingNewEventArgs", "AddingNewEventHandler", "AmbientValueAttribute", "BindableAttribute", "BindableSupport", "BindingDirection", "BindingList", "IBindingList", "ICancelAddNew", "IRaiseItemChangedEvents", "ListChangedEventArgs", "ListChangedEventHandler", "ListSortDirection", "ListChangedType", "ComplexBindingPropertiesAttribute", "ComponentConverter", "ReferenceConverter", "ComponentEditor", "Container", "ContainerFilterService", "InheritanceAttribute", "InheritanceLevel", "CultureInfoConverter", "DataObjectAttribute", "DataObjectFieldAttribute", "DataObjectMethodAttribute", "DataObjectMethodType", "DefaultBindingPropertyAttribute", "DesignTimeVisibleAttribute", "ExpandableObjectConverter", "IBindingListView", "ListSortDescriptionCollection", "ListSortDescription", "IDataErrorInfo", "INestedContainer", "IIntellisenseBuilder", "INestedSite", "InstallerTypeAttribute", "InstanceCreationEditor", "ISupportInitializeNotification", "License", "LicenseContext", "LicenseUsageMode", "LicenseException", "LicenseManager", "LicenseProvider", "LicenseProviderAttribute", "LicFileLicenseProvider", "ListBindableAttribute", "LookupBindingPropertiesAttribute", "MarshalByValueComponent", "MaskedTextProvider", "MaskedTextResultHint", "NestedContainer", "PasswordPropertyTextAttribute", "PropertyTabAttribute", "PropertyTabScope", "RunInstallerAttribute", "SettingsBindableAttribute", "SyntaxCheck", "ToolboxItemAttribute", "ToolboxItemFilterAttribute", "ToolboxItemFilterType", "WarningException", "ComponentResourceManager"]
# endregion

# region: Imports
from System import Collections
from System import Globalization
from System import Reflection
from System import Resources
from System.Collections import Generic
from System.Collections import ObjectModel
from System.ComponentModel import Design
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["AsyncCompletedEventHandler", "AsyncCompletedEventArgs", "AsyncOperation", "AsyncOperationManager", "ProgressChangedEventHandler", "ProgressChangedEventArgs", "BackgroundWorker", "DoWorkEventHandler", "DoWorkEventArgs", "RunWorkerCompletedEventHandler", "RunWorkerCompletedEventArgs"]
# endregion

# region: Imports
from System import Threading
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CancelEventArgs", "IChangeTracking", "IEditableObject", "IRevertibleChangeTracking"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["DataErrorsChangedEventArgs", "INotifyDataErrorInfo", "INotifyPropertyChanged", "INotifyPropertyChanging", "PropertyChangedEventArgs", "PropertyChangedEventHandler", "PropertyChangingEventArgs", "PropertyChangingEventHandler", "TypeConverterAttribute", "TypeDescriptionProviderAttribute"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Design", "ISynchronizeInvoke", "BrowsableAttribute", "CategoryAttribute", "Component", "ComponentCollection", "DescriptionAttribute", "DesignerAttribute", "DesignerCategoryAttribute", "DesignerSerializationVisibility", "DesignerSerializationVisibilityAttribute", "DesignOnlyAttribute", "DisplayNameAttribute", "EditorAttribute", "EventHandlerList", "IComponent", "IContainer", "ImmutableObjectAttribute", "InitializationEventAttribute", "InvalidAsynchronousStateException", "InvalidEnumArgumentException", "ISite", "ISupportInitialize", "LocalizableAttribute", "MergablePropertyAttribute", "NotifyParentPropertyAttribute", "ParenthesizePropertyNameAttribute", "ReadOnlyAttribute", "RefreshProperties", "RefreshPropertiesAttribute"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["DefaultValueAttribute", "EditorBrowsableAttribute", "EditorBrowsableState", "Win32Exception"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class DefaultValueAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, value: System.Char): ...
    @overload
    def __init__(self, value: System.Byte): ...
    @overload
    def __init__(self, value: System.Int16): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: System.Int64): ...
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: object): ...
    @overload
    def __init__(self, value: System.SByte): ...
    @overload
    def __init__(self, value: System.UInt16): ...
    @overload
    def __init__(self, value: System.UInt32): ...
    @overload
    def __init__(self, value: System.UInt64): ...
    @overload
    def __init__(self, type_: System.Type, value: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Value(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class EditorBrowsableAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: EditorBrowsableState): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def State(self) -> EditorBrowsableState: ...
    @overload
    def GetHashCode() -> int: ...

class EditorBrowsableState(enum.Enum):
    Always = 0
    Never = 1
    Advanced = 2

class Win32Exception(InteropServices.ExternalException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: int): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, error: int, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def NativeErrorCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

# endregion

# region: System.ComponentModel.Primitives, Version=7.0.0.0

class ISynchronizeInvoke:
    """    """
    @overload
    def BeginInvoke(self, method: System.Delegate, args: System.System.Array[object]) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> object: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    def Invoke(self, method: System.Delegate, args: System.System.Array[object]) -> object: ...

class BrowsableAttribute(System.Attribute):
    """    """
    def __init__(self, browsable: bool): ...
    @property
    def Yes(self) -> BrowsableAttribute: ...
    @property
    def No(self) -> BrowsableAttribute: ...
    @property
    def Default(self) -> BrowsableAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Browsable(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class CategoryAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, category: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Action(self) -> CategoryAttribute: ...
    @property
    def Appearance(self) -> CategoryAttribute: ...
    @property
    def Asynchronous(self) -> CategoryAttribute: ...
    @property
    def Behavior(self) -> CategoryAttribute: ...
    @property
    def Category(self) -> str: ...
    @property
    def Data(self) -> CategoryAttribute: ...
    @property
    def Default(self) -> CategoryAttribute: ...
    @property
    def Design(self) -> CategoryAttribute: ...
    @property
    def DragDrop(self) -> CategoryAttribute: ...
    @property
    def Focus(self) -> CategoryAttribute: ...
    @property
    def Format(self) -> CategoryAttribute: ...
    @property
    def Key(self) -> CategoryAttribute: ...
    @property
    def Layout(self) -> CategoryAttribute: ...
    @property
    def Mouse(self) -> CategoryAttribute: ...
    @property
    def WindowStyle(self) -> CategoryAttribute: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class Component(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def Site(self) -> ISite: ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class ComponentCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self, components: System.Array[IComponent]): ...
    @overload
    def CopyTo(self, array: System.Array[IComponent], index: int) -> None: ...
    @property
    def Item(self) -> IComponent: ...
    @property
    def Item(self) -> IComponent: ...

class DescriptionAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str): ...
    @property
    def Default(self) -> DescriptionAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DesignerAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, designerTypeName: str): ...
    @overload
    def __init__(self, designerType: System.Type): ...
    @overload
    def __init__(self, designerTypeName: str, designerBaseTypeName: str): ...
    @overload
    def __init__(self, designerTypeName: str, designerBaseType: System.Type): ...
    @overload
    def __init__(self, designerType: System.Type, designerBaseType: System.Type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DesignerBaseTypeName(self) -> str: ...
    @property
    def DesignerTypeName(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class DesignerCategoryAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, category: str): ...
    @property
    def Component(self) -> DesignerCategoryAttribute: ...
    @property
    def Default(self) -> DesignerCategoryAttribute: ...
    @property
    def Form(self) -> DesignerCategoryAttribute: ...
    @property
    def Generic(self) -> DesignerCategoryAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DesignerSerializationVisibility(enum.Enum):
    Hidden = 0
    Visible = 1
    Content = 2

class DesignerSerializationVisibilityAttribute(System.Attribute):
    """    """
    def __init__(self, visibility: DesignerSerializationVisibility): ...
    @property
    def Content(self) -> DesignerSerializationVisibilityAttribute: ...
    @property
    def Hidden(self) -> DesignerSerializationVisibilityAttribute: ...
    @property
    def Visible(self) -> DesignerSerializationVisibilityAttribute: ...
    @property
    def Default(self) -> DesignerSerializationVisibilityAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Visibility(self) -> DesignerSerializationVisibility: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DesignOnlyAttribute(System.Attribute):
    """    """
    def __init__(self, isDesignOnly: bool): ...
    @property
    def Yes(self) -> DesignOnlyAttribute: ...
    @property
    def No(self) -> DesignOnlyAttribute: ...
    @property
    def Default(self) -> DesignOnlyAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsDesignOnly(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DisplayNameAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, displayName: str): ...
    @property
    def Default(self) -> DisplayNameAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class EditorAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str, baseTypeName: str): ...
    @overload
    def __init__(self, typeName: str, baseType: System.Type): ...
    @overload
    def __init__(self, type_: System.Type, baseType: System.Type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def EditorBaseTypeName(self) -> str: ...
    @property
    def EditorTypeName(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class EventHandlerList(object):
    """    """
    def __init__(self): ...
    @overload
    def AddHandler(self, key: object, value: System.Delegate) -> None: ...
    @overload
    def AddHandlers(self, listToAddFrom: EventHandlerList) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Item(self) -> System.Delegate: ...
    @overload
    def RemoveHandler(self, key: object, value: System.Delegate) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class IComponent:
    """    """
    @property
    def Site(self) -> ISite: ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class IContainer:
    """    """
    @overload
    def Add(self, component: IComponent) -> None: ...
    @overload
    def Add(self, component: IComponent, name: str) -> None: ...
    @property
    def Components(self) -> ComponentCollection: ...
    @overload
    def Remove(self, component: IComponent) -> None: ...

class ImmutableObjectAttribute(System.Attribute):
    """    """
    def __init__(self, immutable: bool): ...
    @property
    def Yes(self) -> ImmutableObjectAttribute: ...
    @property
    def No(self) -> ImmutableObjectAttribute: ...
    @property
    def Default(self) -> ImmutableObjectAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Immutable(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class InitializationEventAttribute(System.Attribute):
    """    """
    def __init__(self, eventName: str): ...
    @property
    def EventName(self) -> str: ...

class InvalidAsynchronousStateException(System.ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class InvalidEnumArgumentException(System.ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, argumentName: str, invalidValue: int, enumClass: System.Type): ...

class ISite:
    """    """
    @property
    def Component(self) -> IComponent: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def DesignMode(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class ISupportInitialize:
    """    """
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...

class LocalizableAttribute(System.Attribute):
    """    """
    def __init__(self, isLocalizable: bool): ...
    @property
    def Yes(self) -> LocalizableAttribute: ...
    @property
    def No(self) -> LocalizableAttribute: ...
    @property
    def Default(self) -> LocalizableAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsLocalizable(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class MergablePropertyAttribute(System.Attribute):
    """    """
    def __init__(self, allowMerge: bool): ...
    @property
    def Yes(self) -> MergablePropertyAttribute: ...
    @property
    def No(self) -> MergablePropertyAttribute: ...
    @property
    def Default(self) -> MergablePropertyAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllowMerge(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class NotifyParentPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, notifyParent: bool): ...
    @property
    def Yes(self) -> NotifyParentPropertyAttribute: ...
    @property
    def No(self) -> NotifyParentPropertyAttribute: ...
    @property
    def Default(self) -> NotifyParentPropertyAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NotifyParent(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class ParenthesizePropertyNameAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, needParenthesis: bool): ...
    @property
    def Default(self) -> ParenthesizePropertyNameAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NeedParenthesis(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class ReadOnlyAttribute(System.Attribute):
    """    """
    def __init__(self, isReadOnly: bool): ...
    @property
    def Yes(self) -> ReadOnlyAttribute: ...
    @property
    def No(self) -> ReadOnlyAttribute: ...
    @property
    def Default(self) -> ReadOnlyAttribute: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class RefreshProperties(enum.Enum):
    None_ = 0
    All = 1
    Repaint = 2

class RefreshPropertiesAttribute(System.Attribute):
    """    """
    def __init__(self, refresh: RefreshProperties): ...
    @property
    def All(self) -> RefreshPropertiesAttribute: ...
    @property
    def Repaint(self) -> RefreshPropertiesAttribute: ...
    @property
    def Default(self) -> RefreshPropertiesAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def RefreshProperties(self) -> RefreshProperties: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

# endregion

# region: System.ObjectModel, Version=7.0.0.0

class DataErrorsChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...

class INotifyDataErrorInfo:
    """    """
    @property
    def HasErrors(self) -> bool: ...
    @overload
    def GetErrors(self, propertyName: str) -> Collections.IEnumerable: ...
    @property
    def ErrorsChanged(self): ...

class INotifyPropertyChanged:
    """    """
    @property
    def PropertyChanged(self): ...

class INotifyPropertyChanging:
    """    """
    @property
    def PropertyChanging(self): ...

class PropertyChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...

class PropertyChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PropertyChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PropertyChangedEventArgs) -> None: ...

class PropertyChangingEventArgs(System.EventArgs):
    """    """
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...

class PropertyChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PropertyChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PropertyChangingEventArgs) -> None: ...

class TypeConverterAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def Default(self) -> TypeConverterAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ConverterTypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class TypeDescriptionProviderAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def TypeName(self) -> str: ...

# endregion

# region: System.ComponentModel, Version=7.0.0.0

class CancelEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cancel: bool): ...
    @property
    def Cancel(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...

class IChangeTracking:
    """    """
    @overload
    def AcceptChanges() -> None: ...
    @property
    def IsChanged(self) -> bool: ...

class IEditableObject:
    """    """
    @overload
    def BeginEdit() -> None: ...
    @overload
    def CancelEdit() -> None: ...
    @overload
    def EndEdit() -> None: ...

class IRevertibleChangeTracking:
    """    """
    @overload
    def RejectChanges() -> None: ...

# endregion

# region: System.ComponentModel.EventBasedAsync, Version=7.0.0.0

class AsyncCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: AsyncCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: AsyncCompletedEventArgs) -> None: ...

class AsyncCompletedEventArgs(System.EventArgs):
    """    """
    def __init__(self, error: System.Exception, cancelled: bool, userState: object): ...
    @property
    def Cancelled(self) -> bool: ...
    @property
    def Error(self) -> System.Exception: ...
    @property
    def UserState(self) -> object: ...

class AsyncOperation(object):
    """    """
    @property
    def SynchronizationContext(self) -> Threading.SynchronizationContext: ...
    @property
    def UserSuppliedState(self) -> object: ...
    @overload
    def OperationCompleted() -> None: ...
    @overload
    def Post(self, d: Threading.SendOrPostCallback, arg: object) -> None: ...
    @overload
    def PostOperationCompleted(self, d: Threading.SendOrPostCallback, arg: object) -> None: ...

class AsyncOperationManager(object):
    """    """
    @overload
    @staticmethod
    def CreateOperation(userSuppliedState: object) -> AsyncOperation: ...
    @property
    def SynchronizationContext(self) -> Threading.SynchronizationContext: ...
    @SynchronizationContext.setter
    def SynchronizationContext(self, value: System.Void): ...

class ProgressChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ProgressChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ProgressChangedEventArgs) -> None: ...

class ProgressChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, progressPercentage: int, userState: object): ...
    @property
    def ProgressPercentage(self) -> int: ...
    @property
    def UserState(self) -> object: ...

class BackgroundWorker(Component):
    """    """
    def __init__(self): ...
    @overload
    def CancelAsync() -> None: ...
    @property
    def CancellationPending(self) -> bool: ...
    @property
    def IsBusy(self) -> bool: ...
    @property
    def WorkerReportsProgress(self) -> bool: ...
    @property
    def WorkerSupportsCancellation(self) -> bool: ...
    @overload
    def ReportProgress(self, percentProgress: int) -> None: ...
    @overload
    def ReportProgress(self, percentProgress: int, userState: object) -> None: ...
    @overload
    def RunWorkerAsync() -> None: ...
    @overload
    def RunWorkerAsync(self, argument: object) -> None: ...
    @WorkerReportsProgress.setter
    def WorkerReportsProgress(self, value: System.Void): ...
    @WorkerSupportsCancellation.setter
    def WorkerSupportsCancellation(self, value: System.Void): ...
    @property
    def DoWork(self): ...
    @property
    def ProgressChanged(self): ...
    @property
    def RunWorkerCompleted(self): ...
    @property
    def Disposed(self): ...

class DoWorkEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DoWorkEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DoWorkEventArgs) -> None: ...

class DoWorkEventArgs(CancelEventArgs):
    """    """
    def __init__(self, argument: object): ...
    @property
    def Argument(self) -> object: ...
    @property
    def Result(self) -> object: ...
    @Result.setter
    def Result(self, value: System.Void): ...

class RunWorkerCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: RunWorkerCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: RunWorkerCompletedEventArgs) -> None: ...

class RunWorkerCompletedEventArgs(AsyncCompletedEventArgs):
    """    """
    def __init__(self, result: object, error: System.Exception, cancelled: bool): ...
    @property
    def Result(self) -> object: ...
    @property
    def UserState(self) -> object: ...

# endregion

# region: System.ComponentModel.TypeConverter, Version=7.0.0.0

class ArrayConverter(CollectionConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class BaseNumberConverter(TypeConverter):
    """    """
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class BooleanConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class ByteConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class CharConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class CollectionConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...

class DateOnlyConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class DateTimeConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class DateTimeOffsetConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class DecimalConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class DoubleConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class EnumConverter(TypeConverter):
    """    """
    def __init__(self, type_: System.Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...

class GuidConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class HalfConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class Int16Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class Int128Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class Int32Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class Int64Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class ITypeDescriptorContext:
    """    """
    @property
    def Container(self) -> IContainer: ...
    @property
    def Instance(self) -> object: ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...
    @overload
    def OnComponentChanged() -> None: ...
    @overload
    def OnComponentChanging() -> bool: ...

class MultilineStringConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class NullableConverter(TypeConverter):
    """    """
    def __init__(self, type_: System.Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @property
    def NullableType(self) -> System.Type: ...
    @property
    def UnderlyingType(self) -> System.Type: ...
    @property
    def UnderlyingTypeConverter(self) -> TypeConverter: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...

class PropertyDescriptor(MemberDescriptor):
    """    """
    @overload
    def AddValueChanged(self, component: object, handler: System.EventHandler) -> None: ...
    @overload
    def CanResetValue(self, component: object) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ComponentType(self) -> System.Type: ...
    @property
    def Converter(self) -> TypeConverter: ...
    @property
    def IsLocalizable(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @property
    def SerializationVisibility(self) -> DesignerSerializationVisibility: ...
    @property
    def SupportsChangeEvents(self) -> bool: ...
    @overload
    def GetChildProperties() -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, instance: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, filter_: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, instance: object, filter_: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetEditor(self, editorBaseType: System.Type) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetValue(self, component: object) -> object: ...
    @overload
    def RemoveValueChanged(self, component: object, handler: System.EventHandler) -> None: ...
    @overload
    def ResetValue(self, component: object) -> None: ...
    @overload
    def SetValue(self, component: object, value: object) -> None: ...
    @overload
    def ShouldSerializeValue(self, component: object) -> bool: ...

class SByteConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class SingleConverter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class StringConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...

class TimeOnlyConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class TimeSpanConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class TypeConverter(object):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, value: object) -> object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, text: str) -> object: ...
    @overload
    def ConvertTo(self, value: object, destinationType: System.Type) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def ConvertToInvariantString(self, value: object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported() -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported() -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues() -> Collections.ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive() -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported() -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, value: object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...

class StandardValuesCollection(object):
    """    """
    def __init__(self, values: Collections.ICollection): ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class TypeListConverter(TypeConverter):
    """    """
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class UInt128Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class UInt16Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class UInt32Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class UInt64Converter(BaseNumberConverter):
    """    """
    def __init__(self): ...

class VersionConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...

class AttributeCollection(object):
    """    """
    def __init__(self, attributes: System.System.Array[System.Attribute]): ...
    @property
    def Empty(self) -> AttributeCollection: ...
    @overload
    def Contains(self, attribute: System.Attribute) -> bool: ...
    @overload
    def Contains(self, attributes: System.System.Array[System.Attribute]) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    @staticmethod
    def FromExisting(existing: AttributeCollection, newAttributes: System.System.Array[System.Attribute]) -> AttributeCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> System.Attribute: ...
    @property
    def Item(self) -> System.Attribute: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Matches(self, attribute: System.Attribute) -> bool: ...
    @overload
    def Matches(self, attributes: System.System.Array[System.Attribute]) -> bool: ...

class AttributeProviderAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, typeName: str, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...

class CancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: CancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: CancelEventArgs) -> None: ...

class CollectionChangeAction(enum.Enum):
    Add = 1
    Remove = 2
    Refresh = 3

class CollectionChangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, action: CollectionChangeAction, element: object): ...
    @property
    def Action(self) -> CollectionChangeAction: ...
    @property
    def Element(self) -> object: ...

class CollectionChangeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: CollectionChangeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: CollectionChangeEventArgs) -> None: ...

class CustomTypeDescriptor(object):
    """    """
    @overload
    def GetAttributes() -> AttributeCollection: ...
    @overload
    def GetClassName() -> str: ...
    @overload
    def GetComponentName() -> str: ...
    @overload
    def GetConverter() -> TypeConverter: ...
    @overload
    def GetDefaultEvent() -> EventDescriptor: ...
    @overload
    def GetDefaultProperty() -> PropertyDescriptor: ...
    @overload
    def GetEditor(self, editorBaseType: System.Type) -> object: ...
    @overload
    def GetEvents() -> EventDescriptorCollection: ...
    @overload
    def GetEvents(self, attributes: System.System.Array[System.Attribute]) -> EventDescriptorCollection: ...
    @overload
    def GetProperties() -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertyOwner(self, pd: PropertyDescriptor) -> object: ...

class DefaultEventAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Default(self) -> DefaultEventAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class DefaultPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Default(self) -> DefaultPropertyAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class EventDescriptor(MemberDescriptor):
    """    """
    @overload
    def AddEventHandler(self, component: object, value: System.Delegate) -> None: ...
    @property
    def ComponentType(self) -> System.Type: ...
    @property
    def EventType(self) -> System.Type: ...
    @property
    def IsMulticast(self) -> bool: ...
    @overload
    def RemoveEventHandler(self, component: object, value: System.Delegate) -> None: ...

class EventDescriptorCollection(object):
    """    """
    @overload
    def __init__(self, events: System.Array[EventDescriptor]): ...
    @overload
    def __init__(self, events: System.Array[EventDescriptor], readOnly: bool): ...
    @property
    def Empty(self) -> EventDescriptorCollection: ...
    @overload
    def Add(self, value: EventDescriptor) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: EventDescriptor) -> bool: ...
    @overload
    def Find(self, name: str, ignoreCase: bool) -> EventDescriptor: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EventDescriptor: ...
    @property
    def Item(self) -> EventDescriptor: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: EventDescriptor) -> int: ...
    @overload
    def Insert(self, index: int, value: EventDescriptor) -> None: ...
    @overload
    def Remove(self, value: EventDescriptor) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Sort() -> EventDescriptorCollection: ...
    @overload
    def Sort(self, names: System.System.Array[str]) -> EventDescriptorCollection: ...
    @overload
    def Sort(self, comparer: Collections.IComparer) -> EventDescriptorCollection: ...
    @overload
    def Sort(self, names: System.System.Array[str], comparer: Collections.IComparer) -> EventDescriptorCollection: ...

class ExtenderProvidedPropertyAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ExtenderProperty(self) -> PropertyDescriptor: ...
    @property
    def Provider(self) -> IExtenderProvider: ...
    @property
    def ReceiverType(self) -> System.Type: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class HandledEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultHandledValue: bool): ...
    @property
    def Handled(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class HandledEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: HandledEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: HandledEventArgs) -> None: ...

class ICustomTypeDescriptor:
    """    """
    @overload
    def GetAttributes() -> AttributeCollection: ...
    @overload
    def GetClassName() -> str: ...
    @overload
    def GetComponentName() -> str: ...
    @overload
    def GetConverter() -> TypeConverter: ...
    @overload
    def GetDefaultEvent() -> EventDescriptor: ...
    @overload
    def GetDefaultProperty() -> PropertyDescriptor: ...
    @overload
    def GetEditor(self, editorBaseType: System.Type) -> object: ...
    @overload
    def GetEvents() -> EventDescriptorCollection: ...
    @overload
    def GetEvents(self, attributes: System.System.Array[System.Attribute]) -> EventDescriptorCollection: ...
    @overload
    def GetProperties() -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertyOwner(self, pd: PropertyDescriptor) -> object: ...

class IExtenderProvider:
    """    """
    @overload
    def CanExtend(self, extendee: object) -> bool: ...

class IListSource:
    """    """
    @property
    def ContainsListCollection(self) -> bool: ...
    @overload
    def GetList() -> Collections.IList: ...

class ITypedList:
    """    """
    @overload
    def GetItemProperties(self, listAccessors: System.Array[PropertyDescriptor]) -> PropertyDescriptorCollection: ...
    @overload
    def GetListName(self, listAccessors: System.Array[PropertyDescriptor]) -> str: ...

class MemberDescriptor(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DesignTimeOnly(self) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsBrowsable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class PropertyDescriptorCollection(object):
    """    """
    @overload
    def __init__(self, properties: System.Array[PropertyDescriptor]): ...
    @overload
    def __init__(self, properties: System.Array[PropertyDescriptor], readOnly: bool): ...
    @property
    def Empty(self) -> PropertyDescriptorCollection: ...
    @overload
    def Add(self, value: PropertyDescriptor) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: PropertyDescriptor) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @overload
    def Find(self, name: str, ignoreCase: bool) -> PropertyDescriptor: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> PropertyDescriptor: ...
    @property
    def Item(self) -> PropertyDescriptor: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: PropertyDescriptor) -> int: ...
    @overload
    def Insert(self, index: int, value: PropertyDescriptor) -> None: ...
    @overload
    def Remove(self, value: PropertyDescriptor) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Sort() -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, names: System.System.Array[str]) -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, comparer: Collections.IComparer) -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, names: System.System.Array[str], comparer: Collections.IComparer) -> PropertyDescriptorCollection: ...

class ProvidePropertyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, propertyName: str, receiverType: System.Type): ...
    @overload
    def __init__(self, propertyName: str, receiverTypeName: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def ReceiverTypeName(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class RefreshEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, componentChanged: object): ...
    @overload
    def __init__(self, typeChanged: System.Type): ...
    @property
    def ComponentChanged(self) -> object: ...
    @property
    def TypeChanged(self) -> System.Type: ...

class RefreshEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, e: RefreshEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, e: RefreshEventArgs) -> None: ...

class TypeDescriptor(object):
    """    """
    @overload
    @staticmethod
    def AddAttributes(type_: System.Type, attributes: System.System.Array[System.Attribute]) -> TypeDescriptionProvider: ...
    @overload
    @staticmethod
    def AddAttributes(instance: object, attributes: System.System.Array[System.Attribute]) -> TypeDescriptionProvider: ...
    @overload
    @staticmethod
    def AddEditorTable(editorBaseType: System.Type, table: Collections.Hashtable) -> None: ...
    @overload
    @staticmethod
    def AddProvider(provider: TypeDescriptionProvider, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def AddProvider(provider: TypeDescriptionProvider, instance: object) -> None: ...
    @overload
    @staticmethod
    def AddProviderTransparent(provider: TypeDescriptionProvider, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def AddProviderTransparent(provider: TypeDescriptionProvider, instance: object) -> None: ...
    @overload
    @staticmethod
    def CreateAssociation(primary: object, secondary: object) -> None: ...
    @overload
    @staticmethod
    def CreateDesigner(component: IComponent, designerBaseType: System.Type) -> Design.IDesigner: ...
    @overload
    @staticmethod
    def CreateEvent(componentType: System.Type, oldEventDescriptor: EventDescriptor, attributes: System.System.Array[System.Attribute]) -> EventDescriptor: ...
    @overload
    @staticmethod
    def CreateEvent(componentType: System.Type, name: str, type_: System.Type, attributes: System.System.Array[System.Attribute]) -> EventDescriptor: ...
    @overload
    @staticmethod
    def CreateInstance(provider: System.IServiceProvider, objectType: System.Type, argTypes: System.System.Array[System.Type], args: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def CreateProperty(componentType: System.Type, oldPropertyDescriptor: PropertyDescriptor, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptor: ...
    @overload
    @staticmethod
    def CreateProperty(componentType: System.Type, name: str, type_: System.Type, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptor: ...
    @property
    def ComNativeDescriptorHandler(self) -> IComNativeDescriptorHandler: ...
    @property
    def ComObjectType(self) -> System.Type: ...
    @property
    def InterfaceType(self) -> System.Type: ...
    @overload
    @staticmethod
    def GetAssociation(type_: System.Type, primary: object) -> object: ...
    @overload
    @staticmethod
    def GetAttributes(component: object) -> AttributeCollection: ...
    @overload
    @staticmethod
    def GetAttributes(componentType: System.Type) -> AttributeCollection: ...
    @overload
    @staticmethod
    def GetAttributes(component: object, noCustomTypeDesc: bool) -> AttributeCollection: ...
    @overload
    @staticmethod
    def GetClassName(component: object) -> str: ...
    @overload
    @staticmethod
    def GetClassName(componentType: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetClassName(component: object, noCustomTypeDesc: bool) -> str: ...
    @overload
    @staticmethod
    def GetComponentName(component: object) -> str: ...
    @overload
    @staticmethod
    def GetComponentName(component: object, noCustomTypeDesc: bool) -> str: ...
    @overload
    @staticmethod
    def GetConverter(component: object) -> TypeConverter: ...
    @overload
    @staticmethod
    def GetConverter(type_: System.Type) -> TypeConverter: ...
    @overload
    @staticmethod
    def GetConverter(component: object, noCustomTypeDesc: bool) -> TypeConverter: ...
    @overload
    @staticmethod
    def GetDefaultEvent(componentType: System.Type) -> EventDescriptor: ...
    @overload
    @staticmethod
    def GetDefaultEvent(component: object) -> EventDescriptor: ...
    @overload
    @staticmethod
    def GetDefaultEvent(component: object, noCustomTypeDesc: bool) -> EventDescriptor: ...
    @overload
    @staticmethod
    def GetDefaultProperty(componentType: System.Type) -> PropertyDescriptor: ...
    @overload
    @staticmethod
    def GetDefaultProperty(component: object) -> PropertyDescriptor: ...
    @overload
    @staticmethod
    def GetDefaultProperty(component: object, noCustomTypeDesc: bool) -> PropertyDescriptor: ...
    @overload
    @staticmethod
    def GetEditor(type_: System.Type, editorBaseType: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetEditor(component: object, editorBaseType: System.Type) -> object: ...
    @overload
    @staticmethod
    def GetEditor(component: object, editorBaseType: System.Type, noCustomTypeDesc: bool) -> object: ...
    @overload
    @staticmethod
    def GetEvents(component: object) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetEvents(componentType: System.Type) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetEvents(componentType: System.Type, attributes: System.System.Array[System.Attribute]) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetEvents(component: object, noCustomTypeDesc: bool) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetEvents(component: object, attributes: System.System.Array[System.Attribute]) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetEvents(component: object, attributes: System.System.Array[System.Attribute], noCustomTypeDesc: bool) -> EventDescriptorCollection: ...
    @overload
    @staticmethod
    def GetFullComponentName(component: object) -> str: ...
    @overload
    @staticmethod
    def GetProperties(component: object) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProperties(componentType: System.Type) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProperties(component: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProperties(component: object, noCustomTypeDesc: bool) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProperties(componentType: System.Type, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProperties(component: object, attributes: System.System.Array[System.Attribute], noCustomTypeDesc: bool) -> PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetProvider(type_: System.Type) -> TypeDescriptionProvider: ...
    @overload
    @staticmethod
    def GetProvider(instance: object) -> TypeDescriptionProvider: ...
    @overload
    @staticmethod
    def GetReflectionType(type_: System.Type) -> System.Type: ...
    @overload
    @staticmethod
    def GetReflectionType(instance: object) -> System.Type: ...
    @overload
    @staticmethod
    def Refresh(type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def Refresh(module: Reflection.Module) -> None: ...
    @overload
    @staticmethod
    def Refresh(component: object) -> None: ...
    @overload
    @staticmethod
    def Refresh(assembly: Reflection.Assembly) -> None: ...
    @overload
    @staticmethod
    def RemoveAssociation(primary: object, secondary: object) -> None: ...
    @overload
    @staticmethod
    def RemoveAssociations(primary: object) -> None: ...
    @overload
    @staticmethod
    def RemoveProvider(provider: TypeDescriptionProvider, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def RemoveProvider(provider: TypeDescriptionProvider, instance: object) -> None: ...
    @overload
    @staticmethod
    def RemoveProviderTransparent(provider: TypeDescriptionProvider, type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def RemoveProviderTransparent(provider: TypeDescriptionProvider, instance: object) -> None: ...
    @ComNativeDescriptorHandler.setter
    def ComNativeDescriptorHandler(self, value: System.Void): ...
    @overload
    @staticmethod
    def SortDescriptorArray(infos: Collections.IList) -> None: ...
    @property
    def Refreshed(self): ...

class TypeDescriptionProvider(object):
    """    """
    @overload
    def CreateInstance(self, provider: System.IServiceProvider, objectType: System.Type, argTypes: System.System.Array[System.Type], args: System.System.Array[object]) -> object: ...
    @overload
    def GetCache(self, instance: object) -> Collections.IDictionary: ...
    @overload
    def GetExtendedTypeDescriptor(self, instance: object) -> ICustomTypeDescriptor: ...
    @overload
    def GetFullComponentName(self, component: object) -> str: ...
    @overload
    def GetReflectionType(self, objectType: System.Type) -> System.Type: ...
    @overload
    def GetReflectionType(self, instance: object) -> System.Type: ...
    @overload
    def GetReflectionType(self, objectType: System.Type, instance: object) -> System.Type: ...
    @overload
    def GetRuntimeType(self, reflectionType: System.Type) -> System.Type: ...
    @overload
    def GetTypeDescriptor(self, objectType: System.Type) -> ICustomTypeDescriptor: ...
    @overload
    def GetTypeDescriptor(self, instance: object) -> ICustomTypeDescriptor: ...
    @overload
    def GetTypeDescriptor(self, objectType: System.Type, instance: object) -> ICustomTypeDescriptor: ...
    @overload
    def IsSupportedType(self, type_: System.Type) -> bool: ...

class AddingNewEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, newObject: object): ...
    @property
    def NewObject(self) -> object: ...
    @NewObject.setter
    def NewObject(self, value: System.Void): ...

class AddingNewEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: AddingNewEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: AddingNewEventArgs) -> None: ...

class AmbientValueAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, value: System.Char): ...
    @overload
    def __init__(self, value: System.Byte): ...
    @overload
    def __init__(self, value: System.Int16): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: System.Int64): ...
    @overload
    def __init__(self, value: System.Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: object): ...
    @overload
    def __init__(self, type_: System.Type, value: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Value(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class BindableAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, bindable: bool): ...
    @overload
    def __init__(self, flags: BindableSupport): ...
    @overload
    def __init__(self, bindable: bool, direction: BindingDirection): ...
    @overload
    def __init__(self, flags: BindableSupport, direction: BindingDirection): ...
    @property
    def Yes(self) -> BindableAttribute: ...
    @property
    def No(self) -> BindableAttribute: ...
    @property
    def Default(self) -> BindableAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bindable(self) -> bool: ...
    @property
    def Direction(self) -> BindingDirection: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class BindableSupport(enum.Enum):
    No = 0
    Yes = 1
    Default = 2

class BindingDirection(enum.Enum):
    OneWay = 0
    TwoWay = 1

class BindingList(ObjectModel.Collection):
    """    BindingList[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, list_: Generic.IList): ...
    @overload
    def AddNew() -> T: ...
    @overload
    def CancelNew(self, itemIndex: int) -> None: ...
    @overload
    def EndNew(self, itemIndex: int) -> None: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def AllowRemove(self) -> bool: ...
    @property
    def RaiseListChangedEvents(self) -> bool: ...
    @overload
    def ResetBindings() -> None: ...
    @overload
    def ResetItem(self, position: int) -> None: ...
    @AllowEdit.setter
    def AllowEdit(self, value: System.Void): ...
    @AllowNew.setter
    def AllowNew(self, value: System.Void): ...
    @AllowRemove.setter
    def AllowRemove(self, value: System.Void): ...
    @RaiseListChangedEvents.setter
    def RaiseListChangedEvents(self, value: System.Void): ...
    @property
    def AddingNew(self): ...
    @property
    def ListChanged(self): ...

class IBindingList:
    """    """
    @overload
    def AddIndex(self, property_: PropertyDescriptor) -> None: ...
    @overload
    def AddNew() -> object: ...
    @overload
    def ApplySort(self, property_: PropertyDescriptor, direction: ListSortDirection) -> None: ...
    @overload
    def Find(self, property_: PropertyDescriptor, key: object) -> int: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def AllowRemove(self) -> bool: ...
    @property
    def IsSorted(self) -> bool: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    @property
    def SortProperty(self) -> PropertyDescriptor: ...
    @property
    def SupportsChangeNotification(self) -> bool: ...
    @property
    def SupportsSearching(self) -> bool: ...
    @property
    def SupportsSorting(self) -> bool: ...
    @overload
    def RemoveIndex(self, property_: PropertyDescriptor) -> None: ...
    @overload
    def RemoveSort() -> None: ...
    @property
    def ListChanged(self): ...

class ICancelAddNew:
    """    """
    @overload
    def CancelNew(self, itemIndex: int) -> None: ...
    @overload
    def EndNew(self, itemIndex: int) -> None: ...

class IRaiseItemChangedEvents:
    """    """
    @property
    def RaisesItemChangedEvents(self) -> bool: ...

class ListChangedEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, propDesc: PropertyDescriptor): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int, propDesc: PropertyDescriptor): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int, oldIndex: int): ...
    @property
    def ListChangedType(self) -> ListChangedType: ...
    @property
    def NewIndex(self) -> int: ...
    @property
    def OldIndex(self) -> int: ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...

class ListChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ListChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ListChangedEventArgs) -> None: ...

class ListSortDirection(enum.Enum):
    Ascending = 0
    Descending = 1

class ListChangedType(enum.Enum):
    Reset = 0
    ItemAdded = 1
    ItemDeleted = 2
    ItemMoved = 3
    ItemChanged = 4
    PropertyDescriptorAdded = 5
    PropertyDescriptorDeleted = 6
    PropertyDescriptorChanged = 7

class ComplexBindingPropertiesAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSource: str): ...
    @overload
    def __init__(self, dataSource: str, dataMember: str): ...
    @property
    def Default(self) -> ComplexBindingPropertiesAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class ComponentConverter(ReferenceConverter):
    """    """
    def __init__(self, type_: System.Type): ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class ReferenceConverter(TypeConverter):
    """    """
    def __init__(self, type_: System.Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class ComponentEditor(object):
    """    """
    @overload
    def EditComponent(self, component: object) -> bool: ...
    @overload
    def EditComponent(self, context: ITypeDescriptorContext, component: object) -> bool: ...

class Container(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, component: IComponent) -> None: ...
    @overload
    def Add(self, component: IComponent, name: str) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Components(self) -> ComponentCollection: ...
    @overload
    def Remove(self, component: IComponent) -> None: ...

class ContainerFilterService(object):
    """    """
    @overload
    def FilterComponents(self, components: ComponentCollection) -> ComponentCollection: ...

class InheritanceAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, inheritanceLevel: InheritanceLevel): ...
    @property
    def Inherited(self) -> InheritanceAttribute: ...
    @property
    def InheritedReadOnly(self) -> InheritanceAttribute: ...
    @property
    def NotInherited(self) -> InheritanceAttribute: ...
    @property
    def Default(self) -> InheritanceAttribute: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def InheritanceLevel(self) -> InheritanceLevel: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...
    @overload
    def ToString() -> str: ...

class InheritanceLevel(enum.Enum):
    Inherited = 1
    InheritedReadOnly = 2
    NotInherited = 3

class CultureInfoConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class DataObjectAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isDataObject: bool): ...
    @property
    def DataObject(self) -> DataObjectAttribute: ...
    @property
    def NonDataObject(self) -> DataObjectAttribute: ...
    @property
    def Default(self) -> DataObjectAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsDataObject(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DataObjectFieldAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, primaryKey: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool, isNullable: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool, isNullable: bool, length: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def PrimaryKey(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class DataObjectMethodAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, methodType: DataObjectMethodType): ...
    @overload
    def __init__(self, methodType: DataObjectMethodType, isDefault: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def MethodType(self) -> DataObjectMethodType: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Match(self, obj: object) -> bool: ...

class DataObjectMethodType(enum.Enum):
    Fill = 0
    Select = 1
    Update = 2
    Insert = 3
    Delete = 4

class DefaultBindingPropertyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Default(self) -> DefaultBindingPropertyAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class DesignTimeVisibleAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, visible: bool): ...
    @property
    def Yes(self) -> DesignTimeVisibleAttribute: ...
    @property
    def No(self) -> DesignTimeVisibleAttribute: ...
    @property
    def Default(self) -> DesignTimeVisibleAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class ExpandableObjectConverter(TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...

class IBindingListView:
    """    """
    @overload
    def ApplySort(self, sorts: ListSortDescriptionCollection) -> None: ...
    @property
    def Filter(self) -> str: ...
    @property
    def SortDescriptions(self) -> ListSortDescriptionCollection: ...
    @property
    def SupportsAdvancedSorting(self) -> bool: ...
    @property
    def SupportsFiltering(self) -> bool: ...
    @overload
    def RemoveFilter() -> None: ...
    @Filter.setter
    def Filter(self, value: System.Void): ...

class ListSortDescriptionCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sorts: System.Array[ListSortDescription]): ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ListSortDescription: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ListSortDescription(object):
    """    """
    def __init__(self, property_: PropertyDescriptor, direction: ListSortDirection): ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    @PropertyDescriptor.setter
    def PropertyDescriptor(self, value: System.Void): ...
    @SortDirection.setter
    def SortDirection(self, value: System.Void): ...

class IDataErrorInfo:
    """    """
    @property
    def Error(self) -> str: ...
    @property
    def Item(self) -> str: ...

class INestedContainer:
    """    """
    @property
    def Owner(self) -> IComponent: ...

class IIntellisenseBuilder:
    """    """
    @property
    def Name(self) -> str: ...
    @overload
    def Show(self, language: str, value: str) -> (bool, str): ...

class INestedSite:
    """    """
    @property
    def FullName(self) -> str: ...

class InstallerTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, installerType: System.Type): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def InstallerType(self) -> System.Type: ...
    @overload
    def GetHashCode() -> int: ...

class InstanceCreationEditor(object):
    """    """
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, instanceType: System.Type) -> object: ...
    @property
    def Text(self) -> str: ...

class ISupportInitializeNotification:
    """    """
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Initialized(self): ...

class License(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def LicenseKey(self) -> str: ...

class LicenseContext(object):
    """    """
    def __init__(self): ...
    @property
    def UsageMode(self) -> LicenseUsageMode: ...
    @overload
    def GetSavedLicenseKey(self, type_: System.Type, resourceAssembly: Reflection.Assembly) -> str: ...
    @overload
    def GetService(self, type_: System.Type) -> object: ...
    @overload
    def SetSavedLicenseKey(self, type_: System.Type, key: str) -> None: ...

class LicenseUsageMode(enum.Enum):
    Runtime = 0
    Designtime = 1

class LicenseException(System.SystemException):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, type_: System.Type, instance: object): ...
    @overload
    def __init__(self, type_: System.Type, instance: object, message: str): ...
    @overload
    def __init__(self, type_: System.Type, instance: object, message: str, innerException: System.Exception): ...
    @property
    def LicensedType(self) -> System.Type: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class LicenseManager(object):
    """    """
    @overload
    @staticmethod
    def CreateWithContext(type_: System.Type, creationContext: LicenseContext) -> object: ...
    @overload
    @staticmethod
    def CreateWithContext(type_: System.Type, creationContext: LicenseContext, args: System.System.Array[object]) -> object: ...
    @property
    def CurrentContext(self) -> LicenseContext: ...
    @property
    def UsageMode(self) -> LicenseUsageMode: ...
    @overload
    @staticmethod
    def IsLicensed(type_: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsValid(type_: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsValid(type_: System.Type, instance: object) -> (bool, License): ...
    @overload
    @staticmethod
    def LockContext(contextUser: object) -> None: ...
    @CurrentContext.setter
    def CurrentContext(self, value: System.Void): ...
    @overload
    @staticmethod
    def UnlockContext(contextUser: object) -> None: ...
    @overload
    @staticmethod
    def Validate(type_: System.Type) -> None: ...
    @overload
    @staticmethod
    def Validate(type_: System.Type, instance: object) -> License: ...

class LicenseProvider(object):
    """    """
    @overload
    def GetLicense(self, context: LicenseContext, type_: System.Type, instance: object, allowExceptions: bool) -> License: ...

class LicenseProviderAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def Default(self) -> LicenseProviderAttribute: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def LicenseProvider(self) -> System.Type: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class LicFileLicenseProvider(LicenseProvider):
    """    """
    def __init__(self): ...
    @overload
    def GetLicense(self, context: LicenseContext, type_: System.Type, instance: object, allowExceptions: bool) -> License: ...

class ListBindableAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, listBindable: bool): ...
    @overload
    def __init__(self, flags: BindableSupport): ...
    @property
    def Yes(self) -> ListBindableAttribute: ...
    @property
    def No(self) -> ListBindableAttribute: ...
    @property
    def Default(self) -> ListBindableAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ListBindable(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class LookupBindingPropertiesAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSource: str, displayMember: str, valueMember: str, lookupMember: str): ...
    @property
    def Default(self) -> LookupBindingPropertiesAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DataSource(self) -> str: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def LookupMember(self) -> str: ...
    @property
    def ValueMember(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class MarshalByValueComponent(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def DesignMode(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @overload
    def GetService(self, service: System.Type) -> object: ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class MaskedTextProvider(object):
    """    """
    @overload
    def __init__(self, mask: str): ...
    @overload
    def __init__(self, mask: str, restrictToAscii: bool): ...
    @overload
    def __init__(self, mask: str, culture: Globalization.CultureInfo): ...
    @overload
    def __init__(self, mask: str, culture: Globalization.CultureInfo, restrictToAscii: bool): ...
    @overload
    def __init__(self, mask: str, passwordChar: System.Char, allowPromptAsInput: bool): ...
    @overload
    def __init__(self, mask: str, culture: Globalization.CultureInfo, passwordChar: System.Char, allowPromptAsInput: bool): ...
    @overload
    def __init__(self, mask: str, culture: Globalization.CultureInfo, allowPromptAsInput: bool, promptChar: System.Char, passwordChar: System.Char, restrictToAscii: bool): ...
    @overload
    def Add(self, input_: str) -> bool: ...
    @overload
    def Add(self, input_: System.Char) -> bool: ...
    @overload
    def Add(self, input_: str) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Add(self, input_: System.Char) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Clear() -> (MaskedTextResultHint): ...
    @overload
    def Clone() -> object: ...
    @overload
    def FindAssignedEditPositionFrom(self, position: int, direction: bool) -> int: ...
    @overload
    def FindAssignedEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    @overload
    def FindEditPositionFrom(self, position: int, direction: bool) -> int: ...
    @overload
    def FindEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    @overload
    def FindNonEditPositionFrom(self, position: int, direction: bool) -> int: ...
    @overload
    def FindNonEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    @overload
    def FindUnassignedEditPositionFrom(self, position: int, direction: bool) -> int: ...
    @overload
    def FindUnassignedEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AssignedEditPositionCount(self) -> int: ...
    @property
    def AvailableEditPositionCount(self) -> int: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def DefaultPasswordChar(self) -> System.Char: ...
    @property
    def EditPositionCount(self) -> int: ...
    @property
    def EditPositions(self) -> Collections.IEnumerator: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def InvalidIndex(self) -> int: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Item(self) -> System.Char: ...
    @property
    def LastAssignedPosition(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def PromptChar(self) -> System.Char: ...
    @property
    def ResetOnPrompt(self) -> bool: ...
    @property
    def ResetOnSpace(self) -> bool: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @overload
    @staticmethod
    def GetOperationResultFromHint(hint: MaskedTextResultHint) -> bool: ...
    @overload
    def InsertAt(self, input_: str, position: int) -> bool: ...
    @overload
    def InsertAt(self, input_: System.Char, position: int) -> bool: ...
    @overload
    def InsertAt(self, input_: str, position: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def InsertAt(self, input_: System.Char, position: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def IsAvailablePosition(self, position: int) -> bool: ...
    @overload
    def IsEditPosition(self, position: int) -> bool: ...
    @overload
    @staticmethod
    def IsValidInputChar(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsValidMaskChar(c: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsValidPasswordChar(c: System.Char) -> bool: ...
    @overload
    def Remove() -> bool: ...
    @overload
    def Remove() -> (bool, int, MaskedTextResultHint): ...
    @overload
    def RemoveAt(self, position: int) -> bool: ...
    @overload
    def RemoveAt(self, startPosition: int, endPosition: int) -> bool: ...
    @overload
    def RemoveAt(self, startPosition: int, endPosition: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Replace(self, input_: str, position: int) -> bool: ...
    @overload
    def Replace(self, input_: System.Char, position: int) -> bool: ...
    @overload
    def Replace(self, input_: System.Char, position: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Replace(self, input_: str, position: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Replace(self, input_: System.Char, startPosition: int, endPosition: int) -> (bool, int, MaskedTextResultHint): ...
    @overload
    def Replace(self, input_: str, startPosition: int, endPosition: int) -> (bool, int, MaskedTextResultHint): ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: System.Void): ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: System.Void): ...
    @IsPassword.setter
    def IsPassword(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @PromptChar.setter
    def PromptChar(self, value: System.Void): ...
    @ResetOnPrompt.setter
    def ResetOnPrompt(self, value: System.Void): ...
    @ResetOnSpace.setter
    def ResetOnSpace(self, value: System.Void): ...
    @overload
    def Set(self, input_: str) -> bool: ...
    @overload
    def Set(self, input_: str) -> (bool, int, MaskedTextResultHint): ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: System.Void): ...
    @overload
    def ToDisplayString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool) -> str: ...
    @overload
    def ToString(self, includePrompt: bool, includeLiterals: bool) -> str: ...
    @overload
    def ToString(self, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, includePrompt: bool, includeLiterals: bool, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool, includePrompt: bool, includeLiterals: bool, startPosition: int, length: int) -> str: ...
    @overload
    def VerifyChar(self, input_: System.Char, position: int) -> (bool, MaskedTextResultHint): ...
    @overload
    def VerifyEscapeChar(self, input_: System.Char, position: int) -> bool: ...
    @overload
    def VerifyString(self, input_: str) -> bool: ...
    @overload
    def VerifyString(self, input_: str) -> (bool, int, MaskedTextResultHint): ...

class MaskedTextResultHint(enum.Enum):
    Unknown = 0
    CharacterEscaped = 1
    NoEffect = 2
    SideEffect = 3
    Success = 4
    PositionOutOfRange = -55
    NonEditPosition = -54
    UnavailableEditPosition = -53
    PromptCharNotAllowed = -52
    InvalidInput = -51
    SignedDigitExpected = -5
    LetterExpected = -4
    DigitExpected = -3
    AlphanumericCharacterExpected = -2
    AsciiCharacterExpected = -1

class NestedContainer(Container):
    """    """
    def __init__(self, owner: IComponent): ...
    @property
    def Owner(self) -> IComponent: ...

class PasswordPropertyTextAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, password: bool): ...
    @property
    def Yes(self) -> PasswordPropertyTextAttribute: ...
    @property
    def No(self) -> PasswordPropertyTextAttribute: ...
    @property
    def Default(self) -> PasswordPropertyTextAttribute: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Password(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class PropertyTabAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tabClass: System.Type): ...
    @overload
    def __init__(self, tabClassName: str): ...
    @overload
    def __init__(self, tabClass: System.Type, tabScope: PropertyTabScope): ...
    @overload
    def __init__(self, tabClassName: str, tabScope: PropertyTabScope): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: PropertyTabAttribute) -> bool: ...
    @property
    def TabClasses(self) -> System.System.Array[System.Type]: ...
    @property
    def TabScopes(self) -> System.Array[PropertyTabScope]: ...
    @overload
    def GetHashCode() -> int: ...

class PropertyTabScope(enum.Enum):
    Static = 0
    Global = 1
    Document = 2
    Component = 3

class RunInstallerAttribute(System.Attribute):
    """    """
    def __init__(self, runInstaller: bool): ...
    @property
    def Yes(self) -> RunInstallerAttribute: ...
    @property
    def No(self) -> RunInstallerAttribute: ...
    @property
    def Default(self) -> RunInstallerAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def RunInstaller(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class SettingsBindableAttribute(System.Attribute):
    """    """
    def __init__(self, bindable: bool): ...
    @property
    def Yes(self) -> SettingsBindableAttribute: ...
    @property
    def No(self) -> SettingsBindableAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bindable(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class SyntaxCheck(object):
    """    """
    @overload
    @staticmethod
    def CheckMachineName(value: str) -> bool: ...
    @overload
    @staticmethod
    def CheckPath(value: str) -> bool: ...
    @overload
    @staticmethod
    def CheckRootedPath(value: str) -> bool: ...

class ToolboxItemAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, defaultType: bool): ...
    @overload
    def __init__(self, toolboxItemTypeName: str): ...
    @overload
    def __init__(self, toolboxItemType: System.Type): ...
    @property
    def Default(self) -> ToolboxItemAttribute: ...
    @property
    def None_(self) -> ToolboxItemAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ToolboxItemType(self) -> System.Type: ...
    @property
    def ToolboxItemTypeName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class ToolboxItemFilterAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, filterString: str): ...
    @overload
    def __init__(self, filterString: str, filterType: ToolboxItemFilterType): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FilterString(self) -> str: ...
    @property
    def FilterType(self) -> ToolboxItemFilterType: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString() -> str: ...

class ToolboxItemFilterType(enum.Enum):
    Allow = 0
    Custom = 1
    Prevent = 2
    Require = 3

class WarningException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, helpUrl: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, helpUrl: str, helpTopic: str): ...
    @property
    def HelpTopic(self) -> str: ...
    @property
    def HelpUrl(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ComponentResourceManager(Resources.ResourceManager):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, t: System.Type): ...
    @overload
    def ApplyResources(self, value: object, objectName: str) -> None: ...
    @overload
    def ApplyResources(self, value: object, objectName: str, culture: Globalization.CultureInfo) -> None: ...

# endregion

