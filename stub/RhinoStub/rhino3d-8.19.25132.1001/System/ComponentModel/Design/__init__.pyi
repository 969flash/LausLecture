"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Serialization", "IDictionaryService", "IExtenderListService", "ITypeDescriptorFilterService", "IReferenceService", "IDesigner", "DesignerVerbCollection", "DesignerVerb", "MenuCommand", "CommandID", "CheckoutException", "StandardCommands", "DesigntimeLicenseContext", "DesigntimeLicenseContextSerializer", "ITypeResolutionService", "ActiveDesignerEventArgs", "ActiveDesignerEventHandler", "IDesignerHost", "IServiceContainer", "DesignerTransaction", "DesignerTransactionCloseEventArgs", "DesignerTransactionCloseEventHandler", "ServiceCreatorCallback", "ComponentChangedEventArgs", "ComponentChangedEventHandler", "ComponentChangingEventArgs", "ComponentChangingEventHandler", "ComponentEventArgs", "ComponentEventHandler", "ComponentRenameEventArgs", "ComponentRenameEventHandler", "DesignerCollection", "DesignerEventArgs", "DesignerEventHandler", "DesignerOptionService", "DesignerOptionCollection", "HelpKeywordAttribute", "HelpKeywordType", "HelpContextType", "IDesignerOptionService", "IComponentChangeService", "IComponentDiscoveryService", "IComponentInitializer", "IDesignerEventService", "IDesignerFilter", "IDesignerHostTransactionState", "IEventBindingService", "IExtenderProviderService", "IHelpService", "IMenuCommandService", "IResourceService", "IRootDesigner", "ISelectionService", "ITreeDesigner", "ITypeDiscoveryService", "ViewTechnology", "SelectionTypes", "IInheritanceService", "ServiceContainer", "StandardToolWindows", "TypeDescriptionProviderService"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import IO
from System import Reflection
from System import Resources
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Serialization"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.ComponentModel.TypeConverter, Version=7.0.0.0

class IDictionaryService:
    """    """
    @overload
    def GetKey(self, value: object) -> object: ...
    @overload
    def GetValue(self, key: object) -> object: ...
    @overload
    def SetValue(self, key: object, value: object) -> None: ...

class IExtenderListService:
    """    """
    @overload
    def GetExtenderProviders() -> ComponentModel.System.Array[ComponentModel.IExtenderProvider]: ...

class ITypeDescriptorFilterService:
    """    """
    @overload
    def FilterAttributes(self, component: ComponentModel.IComponent, attributes: Collections.IDictionary) -> bool: ...
    @overload
    def FilterEvents(self, component: ComponentModel.IComponent, events: Collections.IDictionary) -> bool: ...
    @overload
    def FilterProperties(self, component: ComponentModel.IComponent, properties: Collections.IDictionary) -> bool: ...

class IReferenceService:
    """    """
    @overload
    def GetComponent(self, reference: object) -> ComponentModel.IComponent: ...
    @overload
    def GetName(self, reference: object) -> str: ...
    @overload
    def GetReference(self, name: str) -> object: ...
    @overload
    def GetReferences() -> System.System.Array[object]: ...
    @overload
    def GetReferences(self, baseType: System.Type) -> System.System.Array[object]: ...

class IDesigner:
    """    """
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def Component(self) -> ComponentModel.IComponent: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    @overload
    def Initialize(self, component: ComponentModel.IComponent) -> None: ...

class DesignerVerbCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: System.Array[DesignerVerb]): ...
    @overload
    def Add(self, value: DesignerVerb) -> int: ...
    @overload
    def AddRange(self, value: System.Array[DesignerVerb]) -> None: ...
    @overload
    def AddRange(self, value: DesignerVerbCollection) -> None: ...
    @overload
    def Contains(self, value: DesignerVerb) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DesignerVerb], index: int) -> None: ...
    @property
    def Item(self) -> DesignerVerb: ...
    @overload
    def IndexOf(self, value: DesignerVerb) -> int: ...
    @overload
    def Insert(self, index: int, value: DesignerVerb) -> None: ...
    @overload
    def Remove(self, value: DesignerVerb) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DesignerVerb(MenuCommand):
    """    """
    @overload
    def __init__(self, text: str, handler: System.EventHandler): ...
    @overload
    def __init__(self, text: str, handler: System.EventHandler, startCommandID: CommandID): ...
    @property
    def Description(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def CommandChanged(self): ...

class MenuCommand(object):
    """    """
    def __init__(self, handler: System.EventHandler, command: CommandID): ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CommandID(self) -> CommandID: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def OleStatus(self) -> int: ...
    @property
    def Properties(self) -> Collections.IDictionary: ...
    @property
    def Supported(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def Invoke() -> None: ...
    @overload
    def Invoke(self, arg: object) -> None: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Supported.setter
    def Supported(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def CommandChanged(self): ...

class CommandID(object):
    """    """
    def __init__(self, menuGroup: System.Guid, commandID: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Guid(self) -> System.Guid: ...
    @property
    def ID(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CheckoutException(InteropServices.ExternalException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Canceled(self) -> CheckoutException: ...

class StandardCommands(object):
    """    """
    def __init__(self): ...
    @property
    def AlignBottom(self) -> CommandID: ...
    @property
    def AlignHorizontalCenters(self) -> CommandID: ...
    @property
    def AlignLeft(self) -> CommandID: ...
    @property
    def AlignRight(self) -> CommandID: ...
    @property
    def AlignToGrid(self) -> CommandID: ...
    @property
    def AlignTop(self) -> CommandID: ...
    @property
    def AlignVerticalCenters(self) -> CommandID: ...
    @property
    def ArrangeBottom(self) -> CommandID: ...
    @property
    def ArrangeRight(self) -> CommandID: ...
    @property
    def BringForward(self) -> CommandID: ...
    @property
    def BringToFront(self) -> CommandID: ...
    @property
    def CenterHorizontally(self) -> CommandID: ...
    @property
    def CenterVertically(self) -> CommandID: ...
    @property
    def ViewCode(self) -> CommandID: ...
    @property
    def DocumentOutline(self) -> CommandID: ...
    @property
    def Copy(self) -> CommandID: ...
    @property
    def Cut(self) -> CommandID: ...
    @property
    def Delete(self) -> CommandID: ...
    @property
    def Group(self) -> CommandID: ...
    @property
    def HorizSpaceConcatenate(self) -> CommandID: ...
    @property
    def HorizSpaceDecrease(self) -> CommandID: ...
    @property
    def HorizSpaceIncrease(self) -> CommandID: ...
    @property
    def HorizSpaceMakeEqual(self) -> CommandID: ...
    @property
    def Paste(self) -> CommandID: ...
    @property
    def Properties(self) -> CommandID: ...
    @property
    def Redo(self) -> CommandID: ...
    @property
    def MultiLevelRedo(self) -> CommandID: ...
    @property
    def SelectAll(self) -> CommandID: ...
    @property
    def SendBackward(self) -> CommandID: ...
    @property
    def SendToBack(self) -> CommandID: ...
    @property
    def SizeToControl(self) -> CommandID: ...
    @property
    def SizeToControlHeight(self) -> CommandID: ...
    @property
    def SizeToControlWidth(self) -> CommandID: ...
    @property
    def SizeToFit(self) -> CommandID: ...
    @property
    def SizeToGrid(self) -> CommandID: ...
    @property
    def SnapToGrid(self) -> CommandID: ...
    @property
    def TabOrder(self) -> CommandID: ...
    @property
    def Undo(self) -> CommandID: ...
    @property
    def MultiLevelUndo(self) -> CommandID: ...
    @property
    def Ungroup(self) -> CommandID: ...
    @property
    def VertSpaceConcatenate(self) -> CommandID: ...
    @property
    def VertSpaceDecrease(self) -> CommandID: ...
    @property
    def VertSpaceIncrease(self) -> CommandID: ...
    @property
    def VertSpaceMakeEqual(self) -> CommandID: ...
    @property
    def ShowGrid(self) -> CommandID: ...
    @property
    def ViewGrid(self) -> CommandID: ...
    @property
    def Replace(self) -> CommandID: ...
    @property
    def PropertiesWindow(self) -> CommandID: ...
    @property
    def LockControls(self) -> CommandID: ...
    @property
    def F1Help(self) -> CommandID: ...
    @property
    def ArrangeIcons(self) -> CommandID: ...
    @property
    def LineupIcons(self) -> CommandID: ...
    @property
    def ShowLargeIcons(self) -> CommandID: ...
    @property
    def VerbFirst(self) -> CommandID: ...
    @property
    def VerbLast(self) -> CommandID: ...

class DesigntimeLicenseContext(ComponentModel.LicenseContext):
    """    """
    def __init__(self): ...
    @property
    def UsageMode(self) -> ComponentModel.LicenseUsageMode: ...
    @overload
    def GetSavedLicenseKey(self, type_: System.Type, resourceAssembly: Reflection.Assembly) -> str: ...
    @overload
    def SetSavedLicenseKey(self, type_: System.Type, key: str) -> None: ...

class DesigntimeLicenseContextSerializer(object):
    """    """
    @overload
    @staticmethod
    def Serialize(o: IO.Stream, cryptoKey: str, context: DesigntimeLicenseContext) -> None: ...

class ITypeResolutionService:
    """    """
    @overload
    def GetAssembly(self, name: Reflection.AssemblyName) -> Reflection.Assembly: ...
    @overload
    def GetAssembly(self, name: Reflection.AssemblyName, throwOnError: bool) -> Reflection.Assembly: ...
    @overload
    def GetPathOfAssembly(self, name: Reflection.AssemblyName) -> str: ...
    @overload
    def GetType(self, name: str) -> System.Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool) -> System.Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool, ignoreCase: bool) -> System.Type: ...
    @overload
    def ReferenceAssembly(self, name: Reflection.AssemblyName) -> None: ...

class ActiveDesignerEventArgs(System.EventArgs):
    """    """
    def __init__(self, oldDesigner: IDesignerHost, newDesigner: IDesignerHost): ...
    @property
    def NewDesigner(self) -> IDesignerHost: ...
    @property
    def OldDesigner(self) -> IDesignerHost: ...

class ActiveDesignerEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ActiveDesignerEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ActiveDesignerEventArgs) -> None: ...

class IDesignerHost:
    """    """
    @overload
    def Activate() -> None: ...
    @overload
    def CreateComponent(self, componentClass: System.Type) -> ComponentModel.IComponent: ...
    @overload
    def CreateComponent(self, componentClass: System.Type, name: str) -> ComponentModel.IComponent: ...
    @overload
    def CreateTransaction() -> DesignerTransaction: ...
    @overload
    def CreateTransaction(self, description: str) -> DesignerTransaction: ...
    @overload
    def DestroyComponent(self, component: ComponentModel.IComponent) -> None: ...
    @property
    def Container(self) -> ComponentModel.IContainer: ...
    @property
    def InTransaction(self) -> bool: ...
    @property
    def Loading(self) -> bool: ...
    @property
    def RootComponent(self) -> ComponentModel.IComponent: ...
    @property
    def RootComponentClassName(self) -> str: ...
    @property
    def TransactionDescription(self) -> str: ...
    @overload
    def GetDesigner(self, component: ComponentModel.IComponent) -> IDesigner: ...
    @overload
    def GetType(self, typeName: str) -> System.Type: ...
    @property
    def Activated(self): ...
    @property
    def Deactivated(self): ...
    @property
    def LoadComplete(self): ...
    @property
    def TransactionClosed(self): ...
    @property
    def TransactionClosing(self): ...
    @property
    def TransactionOpened(self): ...
    @property
    def TransactionOpening(self): ...

class IServiceContainer:
    """    """
    @overload
    def AddService(self, serviceType: System.Type, serviceInstance: object) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, callback: ServiceCreatorCallback) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, serviceInstance: object, promote: bool) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, callback: ServiceCreatorCallback, promote: bool) -> None: ...
    @overload
    def RemoveService(self, serviceType: System.Type) -> None: ...
    @overload
    def RemoveService(self, serviceType: System.Type, promote: bool) -> None: ...

class DesignerTransaction(object):
    """    """
    @overload
    def Cancel() -> None: ...
    @overload
    def Commit() -> None: ...
    @property
    def Canceled(self) -> bool: ...
    @property
    def Committed(self) -> bool: ...
    @property
    def Description(self) -> str: ...

class DesignerTransactionCloseEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, commit: bool): ...
    @overload
    def __init__(self, commit: bool, lastTransaction: bool): ...
    @property
    def LastTransaction(self) -> bool: ...
    @property
    def TransactionCommitted(self) -> bool: ...

class DesignerTransactionCloseEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DesignerTransactionCloseEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DesignerTransactionCloseEventArgs) -> None: ...

class ServiceCreatorCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, container: IServiceContainer, serviceType: System.Type, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> object: ...
    @overload
    def Invoke(self, container: IServiceContainer, serviceType: System.Type) -> object: ...

class ComponentChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, component: object, member: ComponentModel.MemberDescriptor, oldValue: object, newValue: object): ...
    @property
    def Component(self) -> object: ...
    @property
    def Member(self) -> ComponentModel.MemberDescriptor: ...
    @property
    def NewValue(self) -> object: ...
    @property
    def OldValue(self) -> object: ...

class ComponentChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentChangedEventArgs) -> None: ...

class ComponentChangingEventArgs(System.EventArgs):
    """    """
    def __init__(self, component: object, member: ComponentModel.MemberDescriptor): ...
    @property
    def Component(self) -> object: ...
    @property
    def Member(self) -> ComponentModel.MemberDescriptor: ...

class ComponentChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentChangingEventArgs) -> None: ...

class ComponentEventArgs(System.EventArgs):
    """    """
    def __init__(self, component: ComponentModel.IComponent): ...
    @property
    def Component(self) -> ComponentModel.IComponent: ...

class ComponentEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentEventArgs) -> None: ...

class ComponentRenameEventArgs(System.EventArgs):
    """    """
    def __init__(self, component: object, oldName: str, newName: str): ...
    @property
    def Component(self) -> object: ...
    @property
    def NewName(self) -> str: ...
    @property
    def OldName(self) -> str: ...

class ComponentRenameEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ComponentRenameEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ComponentRenameEventArgs) -> None: ...

class DesignerCollection(object):
    """    """
    @overload
    def __init__(self, designers: System.Array[IDesignerHost]): ...
    @overload
    def __init__(self, designers: Collections.IList): ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IDesignerHost: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class DesignerEventArgs(System.EventArgs):
    """    """
    def __init__(self, host: IDesignerHost): ...
    @property
    def Designer(self) -> IDesignerHost: ...

class DesignerEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DesignerEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DesignerEventArgs) -> None: ...

class DesignerOptionService(object):
    """    """
    @property
    def Options(self) -> DesignerOptionCollection: ...

class DesignerOptionCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DesignerOptionCollection: ...
    @property
    def Item(self) -> DesignerOptionCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> DesignerOptionCollection: ...
    @property
    def Properties(self) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: DesignerOptionCollection) -> int: ...
    @overload
    def ShowDialog() -> bool: ...

class HelpKeywordAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyword: str): ...
    @overload
    def __init__(self, t: System.Type): ...
    @property
    def Default(self) -> HelpKeywordAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def HelpKeyword(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class HelpKeywordType(enum.Enum):
    F1Keyword = 0
    GeneralKeyword = 1
    FilterKeyword = 2

class HelpContextType(enum.Enum):
    Ambient = 0
    Window = 1
    Selection = 2
    ToolWindowSelection = 3

class IDesignerOptionService:
    """    """
    @overload
    def GetOptionValue(self, pageName: str, valueName: str) -> object: ...
    @overload
    def SetOptionValue(self, pageName: str, valueName: str, value: object) -> None: ...

class IComponentChangeService:
    """    """
    @overload
    def OnComponentChanged(self, component: object, member: ComponentModel.MemberDescriptor, oldValue: object, newValue: object) -> None: ...
    @overload
    def OnComponentChanging(self, component: object, member: ComponentModel.MemberDescriptor) -> None: ...
    @property
    def ComponentAdded(self): ...
    @property
    def ComponentAdding(self): ...
    @property
    def ComponentChanged(self): ...
    @property
    def ComponentChanging(self): ...
    @property
    def ComponentRemoved(self): ...
    @property
    def ComponentRemoving(self): ...
    @property
    def ComponentRename(self): ...

class IComponentDiscoveryService:
    """    """
    @overload
    def GetComponentTypes(self, designerHost: IDesignerHost, baseType: System.Type) -> Collections.ICollection: ...

class IComponentInitializer:
    """    """
    @overload
    def InitializeExistingComponent(self, defaultValues: Collections.IDictionary) -> None: ...
    @overload
    def InitializeNewComponent(self, defaultValues: Collections.IDictionary) -> None: ...

class IDesignerEventService:
    """    """
    @property
    def ActiveDesigner(self) -> IDesignerHost: ...
    @property
    def Designers(self) -> DesignerCollection: ...
    @property
    def ActiveDesignerChanged(self): ...
    @property
    def DesignerCreated(self): ...
    @property
    def DesignerDisposed(self): ...
    @property
    def SelectionChanged(self): ...

class IDesignerFilter:
    """    """
    @overload
    def PostFilterAttributes(self, attributes: Collections.IDictionary) -> None: ...
    @overload
    def PostFilterEvents(self, events: Collections.IDictionary) -> None: ...
    @overload
    def PostFilterProperties(self, properties: Collections.IDictionary) -> None: ...
    @overload
    def PreFilterAttributes(self, attributes: Collections.IDictionary) -> None: ...
    @overload
    def PreFilterEvents(self, events: Collections.IDictionary) -> None: ...
    @overload
    def PreFilterProperties(self, properties: Collections.IDictionary) -> None: ...

class IDesignerHostTransactionState:
    """    """
    @property
    def IsClosingTransaction(self) -> bool: ...

class IEventBindingService:
    """    """
    @overload
    def CreateUniqueMethodName(self, component: ComponentModel.IComponent, e: ComponentModel.EventDescriptor) -> str: ...
    @overload
    def GetCompatibleMethods(self, e: ComponentModel.EventDescriptor) -> Collections.ICollection: ...
    @overload
    def GetEvent(self, property_: ComponentModel.PropertyDescriptor) -> ComponentModel.EventDescriptor: ...
    @overload
    def GetEventProperties(self, events: ComponentModel.EventDescriptorCollection) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetEventProperty(self, e: ComponentModel.EventDescriptor) -> ComponentModel.PropertyDescriptor: ...
    @overload
    def ShowCode() -> bool: ...
    @overload
    def ShowCode(self, lineNumber: int) -> bool: ...
    @overload
    def ShowCode(self, component: ComponentModel.IComponent, e: ComponentModel.EventDescriptor) -> bool: ...

class IExtenderProviderService:
    """    """
    @overload
    def AddExtenderProvider(self, provider: ComponentModel.IExtenderProvider) -> None: ...
    @overload
    def RemoveExtenderProvider(self, provider: ComponentModel.IExtenderProvider) -> None: ...

class IHelpService:
    """    """
    @overload
    def AddContextAttribute(self, name: str, value: str, keywordType: HelpKeywordType) -> None: ...
    @overload
    def ClearContextAttributes() -> None: ...
    @overload
    def CreateLocalContext(self, contextType: HelpContextType) -> IHelpService: ...
    @overload
    def RemoveContextAttribute(self, name: str, value: str) -> None: ...
    @overload
    def RemoveLocalContext(self, localContext: IHelpService) -> None: ...
    @overload
    def ShowHelpFromKeyword(self, helpKeyword: str) -> None: ...
    @overload
    def ShowHelpFromUrl(self, helpUrl: str) -> None: ...

class IMenuCommandService:
    """    """
    @overload
    def AddCommand(self, command: MenuCommand) -> None: ...
    @overload
    def AddVerb(self, verb: DesignerVerb) -> None: ...
    @overload
    def FindCommand(self, commandID: CommandID) -> MenuCommand: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    @overload
    def GlobalInvoke(self, commandID: CommandID) -> bool: ...
    @overload
    def RemoveCommand(self, command: MenuCommand) -> None: ...
    @overload
    def RemoveVerb(self, verb: DesignerVerb) -> None: ...
    @overload
    def ShowContextMenu(self, menuID: CommandID, x: int, y: int) -> None: ...

class IResourceService:
    """    """
    @overload
    def GetResourceReader(self, info: Globalization.CultureInfo) -> Resources.IResourceReader: ...
    @overload
    def GetResourceWriter(self, info: Globalization.CultureInfo) -> Resources.IResourceWriter: ...

class IRootDesigner:
    """    """
    @property
    def SupportedTechnologies(self) -> System.Array[ViewTechnology]: ...
    @overload
    def GetView(self, technology: ViewTechnology) -> object: ...

class ISelectionService:
    """    """
    @property
    def PrimarySelection(self) -> object: ...
    @property
    def SelectionCount(self) -> int: ...
    @overload
    def GetComponentSelected(self, component: object) -> bool: ...
    @overload
    def GetSelectedComponents() -> Collections.ICollection: ...
    @overload
    def SetSelectedComponents(self, components: Collections.ICollection) -> None: ...
    @overload
    def SetSelectedComponents(self, components: Collections.ICollection, selectionType: SelectionTypes) -> None: ...
    @property
    def SelectionChanged(self): ...
    @property
    def SelectionChanging(self): ...

class ITreeDesigner:
    """    """
    @property
    def Children(self) -> Collections.ICollection: ...
    @property
    def Parent(self) -> IDesigner: ...

class ITypeDiscoveryService:
    """    """
    @overload
    def GetTypes(self, baseType: System.Type, excludeGlobalTypes: bool) -> Collections.ICollection: ...

class ViewTechnology(enum.Enum):
    Passthrough = 0
    WindowsForms = 1
    Default = 2

class SelectionTypes(enum.Enum):
    Auto = 1
    Normal = 1
    Replace = 2
    MouseDown = 4
    MouseUp = 8
    Click = 16
    Primary = 16
    Valid = 31
    Toggle = 32
    Add = 64
    Remove = 128

class IInheritanceService:
    """    """
    @overload
    def AddInheritedComponents(self, component: ComponentModel.IComponent, container: ComponentModel.IContainer) -> None: ...
    @overload
    def GetInheritanceAttribute(self, component: ComponentModel.IComponent) -> ComponentModel.InheritanceAttribute: ...

class ServiceContainer(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentProvider: System.IServiceProvider): ...
    @overload
    def AddService(self, serviceType: System.Type, serviceInstance: object) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, callback: ServiceCreatorCallback) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, serviceInstance: object, promote: bool) -> None: ...
    @overload
    def AddService(self, serviceType: System.Type, callback: ServiceCreatorCallback, promote: bool) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GetService(self, serviceType: System.Type) -> object: ...
    @overload
    def RemoveService(self, serviceType: System.Type) -> None: ...
    @overload
    def RemoveService(self, serviceType: System.Type, promote: bool) -> None: ...

class StandardToolWindows(object):
    """    """
    def __init__(self): ...
    @property
    def ObjectBrowser(self) -> System.Guid: ...
    @property
    def OutputWindow(self) -> System.Guid: ...
    @property
    def ProjectExplorer(self) -> System.Guid: ...
    @property
    def PropertyBrowser(self) -> System.Guid: ...
    @property
    def RelatedLinks(self) -> System.Guid: ...
    @property
    def ServerExplorer(self) -> System.Guid: ...
    @property
    def TaskList(self) -> System.Guid: ...
    @property
    def Toolbox(self) -> System.Guid: ...

class TypeDescriptionProviderService(object):
    """    """
    @overload
    def GetProvider(self, instance: object) -> ComponentModel.TypeDescriptionProvider: ...
    @overload
    def GetProvider(self, type_: System.Type) -> ComponentModel.TypeDescriptionProvider: ...

# endregion
