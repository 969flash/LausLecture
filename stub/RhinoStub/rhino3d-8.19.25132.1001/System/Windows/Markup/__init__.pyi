"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ValueSerializerAttribute"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["AmbientAttribute", "ArrayExtension", "UsableDuringInitializationAttribute", "ConstructorArgumentAttribute", "ContentPropertyAttribute", "ContentWrapperAttribute", "DateTimeValueSerializer", "DependsOnAttribute", "DictionaryKeyPropertyAttribute", "IComponentConnector", "INameScope", "INameScopeDictionary", "IProvideValueTarget", "IQueryAmbient", "IUriContext", "IValueSerializerContext", "IXamlTypeResolver", "MarkupExtension", "MarkupExtensionBracketCharactersAttribute", "MarkupExtensionReturnTypeAttribute", "MemberDefinition", "NameScopePropertyAttribute", "NullExtension", "PropertyDefinition", "RootNamespaceAttribute", "StaticExtension", "TrimSurroundingWhitespaceAttribute", "TypeExtension", "UidPropertyAttribute", "ValueSerializer", "WhitespaceSignificantCollectionAttribute", "XamlSetMarkupExtensionAttribute", "XamlSetMarkupExtensionEventArgs", "XamlSetTypeConverterAttribute", "XamlSetTypeConverterEventArgs", "XamlSetValueEventArgs", "XmlLangPropertyAttribute", "XmlnsCompatibleWithAttribute", "XmlnsDefinitionAttribute", "XmlnsPrefixAttribute", "NameReferenceConverter", "Reference", "XamlDeferLoadAttribute", "XData", "RuntimeNamePropertyAttribute"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Globalization
from System import Xaml
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Xaml, Version=7.0.0.0

class AmbientAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ArrayExtension(MarkupExtension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, arrayType: System.Type): ...
    @overload
    def __init__(self, elements: System.Array): ...
    @overload
    def AddChild(self, value: object) -> None: ...
    @overload
    def AddText(self, text: str) -> None: ...
    @property
    def Items(self) -> Collections.IList: ...
    @property
    def Type(self) -> System.Type: ...
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class UsableDuringInitializationAttribute(System.Attribute):
    """    """
    def __init__(self, usable: bool): ...
    @property
    def Usable(self) -> bool: ...

class ConstructorArgumentAttribute(System.Attribute):
    """    """
    def __init__(self, argumentName: str): ...
    @property
    def ArgumentName(self) -> str: ...

class ContentPropertyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class ContentWrapperAttribute(System.Attribute):
    """    """
    def __init__(self, contentWrapper: System.Type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ContentWrapper(self) -> System.Type: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...

class DateTimeValueSerializer(ValueSerializer):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFromString(self, value: str, context: IValueSerializerContext) -> bool: ...
    @overload
    def CanConvertToString(self, value: object, context: IValueSerializerContext) -> bool: ...
    @overload
    def ConvertFromString(self, value: str, context: IValueSerializerContext) -> object: ...
    @overload
    def ConvertToString(self, value: object, context: IValueSerializerContext) -> str: ...

class DependsOnAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> object: ...

class DictionaryKeyPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class IComponentConnector:
    """    """
    @overload
    def Connect(self, connectionId: int, target: object) -> None: ...
    @overload
    def InitializeComponent() -> None: ...

class INameScope:
    """    """
    @overload
    def FindName(self, name: str) -> object: ...
    @overload
    def RegisterName(self, name: str, scopedElement: object) -> None: ...
    @overload
    def UnregisterName(self, name: str) -> None: ...

class INameScopeDictionary:
    """    """

class IProvideValueTarget:
    """    """
    @property
    def TargetObject(self) -> object: ...
    @property
    def TargetProperty(self) -> object: ...

class IQueryAmbient:
    """    """
    @overload
    def IsAmbientPropertyAvailable(self, propertyName: str) -> bool: ...

class IUriContext:
    """    """
    @property
    def BaseUri(self) -> System.Uri: ...
    @BaseUri.setter
    def BaseUri(self, value: System.Void): ...

class IValueSerializerContext:
    """    """
    @overload
    def GetValueSerializerFor(self, type_: System.Type) -> ValueSerializer: ...
    @overload
    def GetValueSerializerFor(self, descriptor: ComponentModel.PropertyDescriptor) -> ValueSerializer: ...

class IXamlTypeResolver:
    """    """
    @overload
    def Resolve(self, qualifiedTypeName: str) -> System.Type: ...

class MarkupExtension(object):
    """    """
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...

class MarkupExtensionBracketCharactersAttribute(System.Attribute):
    """    """
    def __init__(self, openingBracket: System.Char, closingBracket: System.Char): ...
    @property
    def ClosingBracket(self) -> System.Char: ...
    @property
    def OpeningBracket(self) -> System.Char: ...

class MarkupExtensionReturnTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, returnType: System.Type): ...
    @overload
    def __init__(self, returnType: System.Type, expressionType: System.Type): ...
    @property
    def ExpressionType(self) -> System.Type: ...
    @property
    def ReturnType(self) -> System.Type: ...

class MemberDefinition(object):
    """    """
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class NameScopePropertyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, type_: System.Type): ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...

class NullExtension(MarkupExtension):
    """    """
    def __init__(self): ...
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...

class PropertyDefinition(MemberDefinition):
    """    """
    def __init__(self): ...
    @property
    def Attributes(self) -> Generic.IList: ...
    @property
    def Modifier(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Xaml.XamlType: ...
    @Modifier.setter
    def Modifier(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class RootNamespaceAttribute(System.Attribute):
    """    """
    def __init__(self, nameSpace: str): ...
    @property
    def Namespace(self) -> str: ...

class StaticExtension(MarkupExtension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, member: str): ...
    @property
    def Member(self) -> str: ...
    @property
    def MemberType(self) -> System.Type: ...
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...
    @Member.setter
    def Member(self, value: System.Void): ...
    @MemberType.setter
    def MemberType(self, value: System.Void): ...

class TrimSurroundingWhitespaceAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class TypeExtension(MarkupExtension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @TypeName.setter
    def TypeName(self, value: System.Void): ...

class UidPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class ValueSerializer(object):
    """    """
    @overload
    def CanConvertFromString(self, value: str, context: IValueSerializerContext) -> bool: ...
    @overload
    def CanConvertToString(self, value: object, context: IValueSerializerContext) -> bool: ...
    @overload
    def ConvertFromString(self, value: str, context: IValueSerializerContext) -> object: ...
    @overload
    def ConvertToString(self, value: object, context: IValueSerializerContext) -> str: ...
    @overload
    @staticmethod
    def GetSerializerFor(type_: System.Type) -> ValueSerializer: ...
    @overload
    @staticmethod
    def GetSerializerFor(descriptor: ComponentModel.PropertyDescriptor) -> ValueSerializer: ...
    @overload
    @staticmethod
    def GetSerializerFor(type_: System.Type, context: IValueSerializerContext) -> ValueSerializer: ...
    @overload
    @staticmethod
    def GetSerializerFor(descriptor: ComponentModel.PropertyDescriptor, context: IValueSerializerContext) -> ValueSerializer: ...
    @overload
    def TypeReferences(self, value: object, context: IValueSerializerContext) -> Generic.IEnumerable: ...

class WhitespaceSignificantCollectionAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class XamlSetMarkupExtensionAttribute(System.Attribute):
    """    """
    def __init__(self, xamlSetMarkupExtensionHandler: str): ...
    @property
    def XamlSetMarkupExtensionHandler(self) -> str: ...

class XamlSetMarkupExtensionEventArgs(XamlSetValueEventArgs):
    """    """
    def __init__(self, member: Xaml.XamlMember, value: MarkupExtension, serviceProvider: System.IServiceProvider): ...
    @overload
    def CallBase() -> None: ...
    @property
    def MarkupExtension(self) -> MarkupExtension: ...
    @property
    def ServiceProvider(self) -> System.IServiceProvider: ...

class XamlSetTypeConverterAttribute(System.Attribute):
    """    """
    def __init__(self, xamlSetTypeConverterHandler: str): ...
    @property
    def XamlSetTypeConverterHandler(self) -> str: ...

class XamlSetTypeConverterEventArgs(XamlSetValueEventArgs):
    """    """
    def __init__(self, member: Xaml.XamlMember, typeConverter: ComponentModel.TypeConverter, value: object, serviceProvider: ComponentModel.ITypeDescriptorContext, cultureInfo: Globalization.CultureInfo): ...
    @overload
    def CallBase() -> None: ...
    @property
    def CultureInfo(self) -> Globalization.CultureInfo: ...
    @property
    def ServiceProvider(self) -> ComponentModel.ITypeDescriptorContext: ...
    @property
    def TypeConverter(self) -> ComponentModel.TypeConverter: ...

class XamlSetValueEventArgs(System.EventArgs):
    """    """
    def __init__(self, member: Xaml.XamlMember, value: object): ...
    @overload
    def CallBase() -> None: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Member(self) -> Xaml.XamlMember: ...
    @property
    def Value(self) -> object: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class XmlLangPropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class XmlnsCompatibleWithAttribute(System.Attribute):
    """    """
    def __init__(self, oldNamespace: str, newNamespace: str): ...
    @property
    def NewNamespace(self) -> str: ...
    @property
    def OldNamespace(self) -> str: ...

class XmlnsDefinitionAttribute(System.Attribute):
    """    """
    def __init__(self, xmlNamespace: str, clrNamespace: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...
    @AssemblyName.setter
    def AssemblyName(self, value: System.Void): ...

class XmlnsPrefixAttribute(System.Attribute):
    """    """
    def __init__(self, xmlNamespace: str, prefix: str): ...
    @property
    def Prefix(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...

class NameReferenceConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class Reference(MarkupExtension):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @overload
    def ProvideValue(self, serviceProvider: System.IServiceProvider) -> object: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class XamlDeferLoadAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, loaderType: System.Type, contentType: System.Type): ...
    @overload
    def __init__(self, loaderType: str, contentType: str): ...
    @property
    def ContentType(self) -> System.Type: ...
    @property
    def ContentTypeName(self) -> str: ...
    @property
    def LoaderType(self) -> System.Type: ...
    @property
    def LoaderTypeName(self) -> str: ...

class XData(object):
    """    """
    def __init__(self): ...
    @property
    def Text(self) -> str: ...
    @property
    def XmlReader(self) -> object: ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @XmlReader.setter
    def XmlReader(self, value: System.Void): ...

class RuntimeNamePropertyAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

# endregion

# region: System.ObjectModel, Version=7.0.0.0

class ValueSerializerAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, valueSerializerType: System.Type): ...
    @overload
    def __init__(self, valueSerializerTypeName: str): ...
    @property
    def ValueSerializerType(self) -> System.Type: ...
    @property
    def ValueSerializerTypeName(self) -> str: ...

# endregion
