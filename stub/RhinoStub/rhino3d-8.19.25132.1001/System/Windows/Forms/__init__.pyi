"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["VisualStyles", "Automation", "FileDialogCustomPlace", "FileDialogCustomPlacesCollection", "HighDpiMode", "Message", "Padding", "PaddingConverter", "ScreenOrientation"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Drawing
from System import Globalization
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["VisualStyles", "PropertyGridInternal", "Layout", "Design", "ComponentModel", "AccessibleEvents", "AccessibleNavigation", "AccessibleObject", "AccessibleRole", "AccessibleSelection", "AccessibleStates", "AmbientProperties", "AnchorStyles", "Appearance", "Application", "ApplicationContext", "ArrangeDirection", "ArrangeStartingPosition", "ArrowDirection", "AutoCompleteMode", "AutoCompleteSource", "AutoCompleteStringCollection", "AutoScaleMode", "AutoSizeMode", "AutoValidate", "AxHost", "BaseCollection", "BatteryChargeStatus", "BindableComponent", "Binding", "BindingCompleteContext", "BindingCompleteEventArgs", "BindingCompleteEventHandler", "BindingCompleteState", "BindingContext", "BindingManagerBase", "BindingManagerDataErrorEventArgs", "BindingManagerDataErrorEventHandler", "BindingMemberInfo", "BindingNavigator", "BindingsCollection", "BindingSource", "BootMode", "Border3DSide", "Border3DStyle", "BorderStyle", "BoundsSpecified", "Button", "ButtonBase", "ButtonBorderStyle", "ButtonRenderer", "ButtonState", "CacheVirtualItemsEventArgs", "CacheVirtualItemsEventHandler", "CaptionButton", "CharacterCasing", "CheckBox", "CheckBoxRenderer", "CheckedListBox", "CheckState", "Clipboard", "CloseReason", "ColorDepth", "ColorDialog", "ColumnClickEventArgs", "ColumnClickEventHandler", "ColumnHeader", "ColumnHeaderAutoResizeStyle", "ColumnHeaderConverter", "ColumnHeaderStyle", "ColumnReorderedEventArgs", "ColumnReorderedEventHandler", "ColumnStyle", "ColumnWidthChangedEventArgs", "ColumnWidthChangedEventHandler", "ColumnWidthChangingEventArgs", "ColumnWidthChangingEventHandler", "ComboBox", "ComboBoxRenderer", "ComboBoxStyle", "CommonDialog", "ContainerControl", "ContentsResizedEventArgs", "ContentsResizedEventHandler", "ContextMenuStrip", "Control", "ImeContext", "ImeModeConversion", "ControlBindingsCollection", "ControlEventArgs", "ControlEventHandler", "ControlPaint", "ControlStyles", "ControlUpdateMode", "ConvertEventArgs", "ConvertEventHandler", "CreateParams", "CurrencyManager", "Cursor", "CursorConverter", "Cursors", "DataFormats", "DataGridView", "DataGridViewAdvancedBorderStyle", "DataGridViewAdvancedCellBorderStyle", "DataGridViewAutoSizeColumnMode", "DataGridViewAutoSizeColumnModeEventArgs", "DataGridViewAutoSizeColumnsMode", "DataGridViewAutoSizeColumnsModeEventArgs", "DataGridViewAutoSizeModeEventArgs", "DataGridViewAutoSizeRowMode", "DataGridViewAutoSizeRowsMode", "DataGridViewBand", "DataGridViewBindingCompleteEventArgs", "DataGridViewButtonCell", "DataGridViewButtonColumn", "DataGridViewCell", "DataGridViewCellBorderStyle", "DataGridViewCellCancelEventArgs", "DataGridViewCellCollection", "DataGridViewCellContextMenuStripNeededEventArgs", "DataGridViewCellErrorTextNeededEventArgs", "DataGridViewCellEventArgs", "DataGridViewCellFormattingEventArgs", "DataGridViewCellMouseEventArgs", "DataGridViewCellPaintingEventArgs", "DataGridViewCellParsingEventArgs", "DataGridViewCellStateChangedEventArgs", "DataGridViewCellStyle", "DataGridViewCellStyleContentChangedEventArgs", "DataGridViewCellStyleConverter", "DataGridViewCellStyleScopes", "DataGridViewCellToolTipTextNeededEventArgs", "DataGridViewCellValidatingEventArgs", "DataGridViewCellValueEventArgs", "DataGridViewCheckBoxCell", "DataGridViewCheckBoxColumn", "DataGridViewClipboardCopyMode", "DataGridViewColumn", "DataGridViewColumnCollection", "DataGridViewColumnDesignTimeVisibleAttribute", "DataGridViewColumnDividerDoubleClickEventArgs", "DataGridViewColumnEventArgs", "DataGridViewColumnHeaderCell", "DataGridViewColumnHeadersHeightSizeMode", "DataGridViewColumnSortMode", "DataGridViewColumnStateChangedEventArgs", "DataGridViewComboBoxCell", "DataGridViewComboBoxColumn", "DataGridViewComboBoxDisplayStyle", "DataGridViewComboBoxEditingControl", "DataGridViewContentAlignment", "DataGridViewDataErrorContexts", "DataGridViewDataErrorEventArgs", "IDataGridViewEditingCell", "IDataGridViewEditingControl", "DataGridViewEditingControlShowingEventArgs", "DataGridViewEditMode", "DataGridViewElement", "DataGridViewElementStates", "DataGridViewAutoSizeColumnModeEventHandler", "DataGridViewAutoSizeColumnsModeEventHandler", "DataGridViewAutoSizeModeEventHandler", "DataGridViewBindingCompleteEventHandler", "DataGridViewCellCancelEventHandler", "DataGridViewCellContextMenuStripNeededEventHandler", "DataGridViewCellErrorTextNeededEventHandler", "DataGridViewCellEventHandler", "DataGridViewCellFormattingEventHandler", "DataGridViewCellMouseEventHandler", "DataGridViewCellPaintingEventHandler", "DataGridViewCellParsingEventHandler", "DataGridViewCellStateChangedEventHandler", "DataGridViewCellStyleContentChangedEventHandler", "DataGridViewCellToolTipTextNeededEventHandler", "DataGridViewCellValidatingEventHandler", "DataGridViewCellValueEventHandler", "DataGridViewColumnDividerDoubleClickEventHandler", "DataGridViewColumnEventHandler", "DataGridViewColumnStateChangedEventHandler", "DataGridViewEditingControlShowingEventHandler", "DataGridViewDataErrorEventHandler", "DataGridViewRowCancelEventHandler", "DataGridViewRowContextMenuStripNeededEventHandler", "DataGridViewRowDividerDoubleClickEventHandler", "DataGridViewRowEventHandler", "DataGridViewRowErrorTextNeededEventHandler", "DataGridViewRowHeightInfoNeededEventHandler", "DataGridViewRowHeightInfoPushedEventHandler", "DataGridViewRowPostPaintEventHandler", "DataGridViewRowPrePaintEventHandler", "DataGridViewRowsAddedEventHandler", "DataGridViewRowsRemovedEventHandler", "DataGridViewRowStateChangedEventHandler", "DataGridViewSortCompareEventHandler", "DataGridViewHeaderBorderStyle", "DataGridViewHeaderCell", "DataGridViewHitTestType", "DataGridViewImageCell", "DataGridViewImageCellLayout", "DataGridViewImageColumn", "DataGridViewLinkCell", "DataGridViewLinkColumn", "DataGridViewPaintParts", "DataGridViewRow", "DataGridViewRowCancelEventArgs", "DataGridViewRowCollection", "DataGridViewRowContextMenuStripNeededEventArgs", "DataGridViewRowDividerDoubleClickEventArgs", "DataGridViewRowErrorTextNeededEventArgs", "DataGridViewRowEventArgs", "DataGridViewRowHeaderCell", "DataGridViewRowHeadersWidthSizeMode", "DataGridViewRowHeightInfoNeededEventArgs", "DataGridViewRowHeightInfoPushedEventArgs", "DataGridViewRowPostPaintEventArgs", "DataGridViewRowPrePaintEventArgs", "DataGridViewRowsAddedEventArgs", "DataGridViewRowsRemovedEventArgs", "DataGridViewRowStateChangedEventArgs", "DataGridViewSelectedCellCollection", "DataGridViewSelectedColumnCollection", "DataGridViewSelectedRowCollection", "DataGridViewSelectionMode", "DataGridViewSortCompareEventArgs", "DataGridViewTextBoxCell", "DataGridViewTextBoxColumn", "DataGridViewTextBoxEditingControl", "DataGridViewTopLeftHeaderCell", "DataGridViewTriState", "DataObject", "DataSourceUpdateMode", "DateBoldEventArgs", "DateBoldEventHandler", "DateRangeEventArgs", "DateRangeEventHandler", "DateTimePicker", "DateTimePickerFormat", "Day", "DialogResult", "DockingAttribute", "DockingBehavior", "DockStyle", "DomainUpDown", "DpiChangedEventArgs", "DpiChangedEventHandler", "DragAction", "DragDropEffects", "DragEventArgs", "DragEventHandler", "DrawItemEventArgs", "DrawItemEventHandler", "DrawItemState", "DrawListViewColumnHeaderEventArgs", "DrawListViewColumnHeaderEventHandler", "DrawListViewItemEventArgs", "DrawListViewItemEventHandler", "DrawListViewSubItemEventArgs", "DrawListViewSubItemEventHandler", "DrawMode", "DrawToolTipEventArgs", "DrawToolTipEventHandler", "DrawTreeNodeEventArgs", "DrawTreeNodeEventHandler", "DropImageType", "ErrorBlinkStyle", "ErrorIconAlignment", "ErrorProvider", "FeatureSupport", "FileDialog", "FixedPanel", "FlatButtonAppearance", "FlatStyle", "FlowDirection", "FlowLayoutPanel", "FlowLayoutSettings", "FolderBrowserDialog", "FontDialog", "Form", "FormBorderStyle", "FormClosedEventArgs", "FormClosedEventHandler", "FormClosingEventArgs", "FormClosingEventHandler", "FormCollection", "FormStartPosition", "FormWindowState", "FrameStyle", "GetChildAtPointSkip", "GiveFeedbackEventArgs", "GiveFeedbackEventHandler", "GridItem", "GridItemCollection", "GridItemType", "GroupBox", "GroupBoxRenderer", "HandledMouseEventArgs", "Help", "HelpEventArgs", "HelpEventHandler", "HelpNavigator", "HelpProvider", "MonthCalendar", "HorizontalAlignment", "HScrollBar", "HScrollProperties", "HtmlDocument", "HtmlElement", "HtmlElementCollection", "HtmlElementErrorEventArgs", "HtmlElementErrorEventHandler", "HtmlElementEventArgs", "HtmlElementEventHandler", "HtmlElementInsertionOrientation", "HtmlHistory", "HtmlWindow", "HtmlWindowCollection", "IBindableComponent", "IButtonControl", "ICommandExecutor", "IComponentEditorPageSite", "IContainerControl", "ICurrencyManagerProvider", "IDataGridColumnStyleEditingNotificationService", "IDataObject", "IFeatureSupport", "IFileReaderService", "ImageIndexConverter", "ImageKeyConverter", "ImageLayout", "ImageList", "ImageListStreamer", "ImeMode", "IMessageFilter", "InputLanguage", "InputLanguageChangedEventArgs", "InputLanguageChangedEventHandler", "InputLanguageChangingEventArgs", "InputLanguageChangingEventHandler", "InputLanguageCollection", "InsertKeyMode", "InvalidateEventArgs", "InvalidateEventHandler", "IDropTarget", "ItemActivation", "ItemBoundsPortion", "ItemChangedEventArgs", "ItemChangedEventHandler", "ItemCheckedEventArgs", "ItemCheckedEventHandler", "ItemCheckEventArgs", "ItemCheckEventHandler", "ItemDragEventArgs", "ItemDragEventHandler", "IWin32Window", "IWindowTarget", "KeyEventArgs", "KeyEventHandler", "KeyPressEventArgs", "KeyPressEventHandler", "Keys", "KeysConverter", "Label", "LabelEditEventArgs", "LabelEditEventHandler", "LayoutEventArgs", "LayoutEventHandler", "LayoutSettings", "LeftRightAlignment", "LinkArea", "LinkBehavior", "LinkClickedEventArgs", "LinkClickedEventHandler", "LinkConverter", "LinkLabel", "LinkLabelLinkClickedEventArgs", "LinkLabelLinkClickedEventHandler", "LinkState", "ListView", "ListBindingConverter", "ListBindingHelper", "ListBox", "ListControl", "ListControlConvertEventArgs", "ListControlConvertEventHandler", "ListViewAlignment", "ListViewGroup", "ListViewGroupCollapsedState", "ListViewGroupCollection", "ListViewGroupEventArgs", "ListViewHitTestInfo", "ListViewHitTestLocations", "ListViewInsertionMark", "ListViewItem", "ListViewItemConverter", "ListViewItemMouseHoverEventArgs", "ListViewItemMouseHoverEventHandler", "ListViewItemSelectionChangedEventArgs", "ListViewItemSelectionChangedEventHandler", "ListViewItemStates", "ListViewItemStateImageIndexConverter", "ListViewVirtualItemsSelectionRangeChangedEventArgs", "ListViewVirtualItemsSelectionRangeChangedEventHandler", "MaskedTextBox", "MaskFormat", "MaskInputRejectedEventArgs", "MaskInputRejectedEventHandler", "MdiClient", "MdiLayout", "MeasureItemEventArgs", "MeasureItemEventHandler", "MenuGlyph", "MenuStrip", "MergeAction", "MessageBox", "MessageBoxButtons", "MessageBoxDefaultButton", "MessageBoxIcon", "MessageBoxOptions", "MethodInvoker", "MouseButtons", "MouseEventArgs", "MouseEventHandler", "NativeWindow", "NavigateEventArgs", "NavigateEventHandler", "NodeLabelEditEventArgs", "NodeLabelEditEventHandler", "NotifyIcon", "NumericUpDown", "NumericUpDownAcceleration", "NumericUpDownAccelerationCollection", "OpacityConverter", "OpenFileDialog", "Orientation", "OSFeature", "OwnerDrawPropertyBag", "PaintEventArgs", "PaintEventHandler", "Panel", "PictureBox", "PictureBoxSizeMode", "PopupEventArgs", "PopupEventHandler", "PowerLineStatus", "PowerState", "PowerStatus", "PreProcessControlState", "PreviewKeyDownEventArgs", "PreviewKeyDownEventHandler", "PageSetupDialog", "PrintControllerWithStatusDialog", "PrintDialog", "PrintPreviewControl", "PrintPreviewDialog", "ProfessionalColors", "ProfessionalColorTable", "ProgressBar", "ProgressBarRenderer", "ProgressBarStyle", "PropertyGrid", "PropertyManager", "PropertySort", "PropertyTabChangedEventArgs", "PropertyTabChangedEventHandler", "PropertyValueChangedEventArgs", "PropertyValueChangedEventHandler", "QueryAccessibilityHelpEventArgs", "QueryAccessibilityHelpEventHandler", "QueryContinueDragEventArgs", "QueryContinueDragEventHandler", "QuestionEventArgs", "QuestionEventHandler", "RadioButton", "RadioButtonRenderer", "RelatedImageListAttribute", "RetrieveVirtualItemEventArgs", "RetrieveVirtualItemEventHandler", "RichTextBox", "RichTextBoxFinds", "RichTextBoxLanguageOptions", "RichTextBoxScrollBars", "RichTextBoxSelectionAttribute", "RichTextBoxSelectionTypes", "RichTextBoxStreamType", "RichTextBoxWordPunctuations", "RightToLeft", "RowStyle", "SaveFileDialog", "Screen", "ScrollableControl", "ScrollBar", "ScrollBarRenderer", "ScrollBars", "ScrollButton", "ScrollEventArgs", "ScrollEventHandler", "ScrollEventType", "ScrollOrientation", "ScrollProperties", "SearchDirectionHint", "SearchForVirtualItemEventArgs", "SearchForVirtualItemEventHandler", "SecurityIDType", "SelectedGridItemChangedEventArgs", "SelectedGridItemChangedEventHandler", "SelectionMode", "SelectionRange", "SelectionRangeConverter", "SendKeys", "Shortcut", "SizeGripStyle", "SizeType", "SortOrder", "SplitContainer", "Splitter", "SplitterCancelEventArgs", "SplitterCancelEventHandler", "SplitterEventArgs", "SplitterEventHandler", "SplitterPanel", "StatusStrip", "StructFormat", "SystemInformation", "SystemParameter", "TabAlignment", "TabAppearance", "TabControl", "TabControlAction", "TabControlCancelEventArgs", "TabControlCancelEventHandler", "TabControlEventArgs", "TabControlEventHandler", "TabDrawMode", "TableLayoutCellPaintEventArgs", "TableLayoutCellPaintEventHandler", "TableLayoutColumnStyleCollection", "TableLayoutControlCollection", "TableLayoutPanel", "TableLayoutPanelCellBorderStyle", "TableLayoutPanelCellPosition", "TableLayoutPanelGrowStyle", "TableLayoutRowStyleCollection", "TableLayoutSettings", "TableLayoutStyle", "TableLayoutStyleCollection", "TabPage", "TabRenderer", "TabSizeMode", "TaskDialog", "TaskDialogButton", "TaskDialogButtonCollection", "TaskDialogCommandLinkButton", "TaskDialogControl", "TaskDialogExpander", "TaskDialogExpanderPosition", "TaskDialogFootnote", "TaskDialogIcon", "TaskDialogPage", "TaskDialogProgressBar", "TaskDialogProgressBarState", "TaskDialogRadioButton", "TaskDialogRadioButtonCollection", "TaskDialogStartupLocation", "TaskDialogVerificationCheckBox", "TextBox", "TextBoxBase", "TextBoxRenderer", "TextDataFormat", "TextFormatFlags", "TextImageRelation", "TextRenderer", "ThreadExceptionDialog", "TickStyle", "Timer", "ToolStrip", "ToolStripArrowRenderEventArgs", "ToolStripArrowRenderEventHandler", "ToolStripButton", "ToolStripComboBox", "ToolStripContainer", "ToolStripContentPanel", "ToolStripContentPanelRenderEventArgs", "ToolStripContentPanelRenderEventHandler", "ToolStripControlHost", "ToolStripDropDown", "ToolStripDropDownButton", "ToolStripDropDownClosedEventArgs", "ToolStripDropDownClosedEventHandler", "ToolStripDropDownCloseReason", "ToolStripDropDownClosingEventArgs", "ToolStripDropDownClosingEventHandler", "ToolStripDropDownDirection", "ToolStripDropDownItem", "ToolStripDropDownItemAccessibleObject", "ToolStripDropDownMenu", "ToolStripGripDisplayStyle", "ToolStripGripRenderEventArgs", "ToolStripGripRenderEventHandler", "ToolStripGripStyle", "ToolStripItem", "ToolStripItemAlignment", "ToolStripItemClickedEventArgs", "ToolStripItemClickedEventHandler", "ToolStripItemCollection", "ToolStripItemDisplayStyle", "ToolStripItemEventArgs", "ToolStripItemEventHandler", "ToolStripItemImageRenderEventArgs", "ToolStripItemImageRenderEventHandler", "ToolStripItemImageScaling", "ToolStripItemOverflow", "ToolStripItemPlacement", "ToolStripItemRenderEventArgs", "ToolStripItemRenderEventHandler", "ToolStripItemTextRenderEventArgs", "ToolStripItemTextRenderEventHandler", "ToolStripLabel", "ToolStripLayoutStyle", "ToolStripManager", "ToolStripManagerRenderMode", "ToolStripMenuItem", "ToolStripOverflow", "ToolStripOverflowButton", "ToolStripPanel", "ToolStripPanelRenderEventArgs", "ToolStripPanelRenderEventHandler", "ToolStripPanelRow", "ToolStripProfessionalRenderer", "ToolStripProgressBar", "ToolStripRenderer", "ToolStripRenderEventArgs", "ToolStripRenderEventHandler", "ToolStripRenderMode", "ToolStripSeparator", "ToolStripSeparatorRenderEventArgs", "ToolStripSeparatorRenderEventHandler", "ToolStripSplitButton", "ToolStripStatusLabel", "ToolStripStatusLabelBorderSides", "ToolStripSystemRenderer", "ToolStripTextBox", "ToolStripTextDirection", "ToolTip", "ToolTipIcon", "TrackBar", "TrackBarRenderer", "TreeNode", "TreeNodeCollection", "TreeNodeConverter", "TreeNodeMouseClickEventArgs", "TreeNodeMouseClickEventHandler", "TreeNodeMouseHoverEventArgs", "TreeNodeMouseHoverEventHandler", "TreeNodeStates", "TreeView", "TreeViewAction", "TreeViewCancelEventArgs", "TreeViewCancelEventHandler", "TreeViewDrawMode", "TreeViewEventArgs", "TreeViewEventHandler", "TreeViewHitTestInfo", "TreeViewHitTestLocations", "TreeViewImageIndexConverter", "TreeViewImageKeyConverter", "TypeValidationEventArgs", "TypeValidationEventHandler", "UICues", "UICuesEventArgs", "UICuesEventHandler", "UnhandledExceptionMode", "UpDownBase", "UpDownEventArgs", "UpDownEventHandler", "UserControl", "ValidationConstraints", "View", "VScrollBar", "VScrollProperties", "WebBrowser", "WebBrowserBase", "WebBrowserDocumentCompletedEventArgs", "WebBrowserDocumentCompletedEventHandler", "WebBrowserEncryptionLevel", "WebBrowserNavigatedEventArgs", "WebBrowserNavigatedEventHandler", "WebBrowserNavigatingEventArgs", "WebBrowserNavigatingEventHandler", "WebBrowserProgressChangedEventArgs", "WebBrowserProgressChangedEventHandler", "WebBrowserReadyState", "WebBrowserRefreshOption", "WebBrowserSiteBase", "WindowsFormsSection", "WindowsFormsSynchronizationContext", "MessageLoopCallback", "ActiveXInvokeKind", "AxComponentEditor", "ClsidAttribute", "ConnectionPointCookie", "InvalidActiveXStateException", "State", "StateConverter", "TypeLibraryTimeStampAttribute", "ButtonBaseAccessibleObject", "CheckBoxAccessibleObject", "CheckedIndexCollection", "CheckedItemCollection", "ObjectCollection", "ChildAccessibleObject", "ControlAccessibleObject", "ControlCollection", "Format", "DataGridViewControlCollection", "HitTestInfo", "DateTimePickerAccessibleObject", "DomainUpDownItemCollection", "HitArea", "ImageCollection", "LinkAreaConverter", "Link", "LinkCollection", "CheckedListViewItemCollection", "ColumnHeaderCollection", "ListViewItemCollection", "SelectedIndexCollection", "SelectedListViewItemCollection", "IntegerCollection", "SelectedObjectCollection", "ListViewSubItem", "ListViewSubItemCollection", "PropertyTabCollection", "RadioButtonAccessibleObject", "DockPaddingEdgesConverter", "DockPaddingEdges", "TabPageCollection", "TabPageControlCollection", "ToolStripAccessibleObject", "ToolStripHostedControlAccessibleObject", "ToolStripDropDownAccessibleObject", "ToolStripItemAccessibleObject", "ToolStripPanelRowCollection", "ToolStripSplitButtonAccessibleObject"]
# endregion

# region: Imports
from Microsoft import Win32
from System import Collections
from System import ComponentModel
from System import Drawing
from System import Globalization
from System import IO
from System import Threading
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Collections import Specialized
from System.Drawing import Printing
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Runtime import Serialization
from System.Windows import Input
from System.Windows.Forms import Automation
from System.Windows.Forms import Design
from System.Windows.Forms import Layout
from System.Windows.Forms import VisualStyles
from typing import overload
import enum
import System
# endregion

# region: System.Windows.Forms, Version=7.0.0.0

class AccessibleEvents(enum.Enum):
    SystemSound = 1
    SystemAlert = 2
    SystemForeground = 3
    SystemMenuStart = 4
    SystemMenuEnd = 5
    SystemMenuPopupStart = 6
    SystemMenuPopupEnd = 7
    SystemCaptureStart = 8
    SystemCaptureEnd = 9
    SystemMoveSizeStart = 10
    SystemMoveSizeEnd = 11
    SystemContextHelpStart = 12
    SystemContextHelpEnd = 13
    SystemDragDropStart = 14
    SystemDragDropEnd = 15
    SystemDialogStart = 16
    SystemDialogEnd = 17
    SystemScrollingStart = 18
    SystemScrollingEnd = 19
    SystemSwitchStart = 20
    SystemSwitchEnd = 21
    SystemMinimizeStart = 22
    SystemMinimizeEnd = 23
    Create = 32768
    Destroy = 32769
    Show = 32770
    Hide = 32771
    Reorder = 32772
    Focus = 32773
    Selection = 32774
    SelectionAdd = 32775
    SelectionRemove = 32776
    SelectionWithin = 32777
    StateChange = 32778
    LocationChange = 32779
    NameChange = 32780
    DescriptionChange = 32781
    ValueChange = 32782
    ParentChange = 32783
    HelpChange = 32784
    DefaultActionChange = 32785
    AcceleratorChange = 32786

class AccessibleNavigation(enum.Enum):
    Up = 1
    Down = 2
    Left = 3
    Right = 4
    Next = 5
    Previous = 6
    FirstChild = 7
    LastChild = 8

class AccessibleObject(InteropServices.StandardOleMarshalObject):
    """    """
    def __init__(self): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetChild(self, index: int) -> AccessibleObject: ...
    @overload
    def GetChildCount() -> int: ...
    @overload
    def GetFocused() -> AccessibleObject: ...
    @overload
    def GetHelpTopic() -> (int, str): ...
    @overload
    def GetSelected() -> AccessibleObject: ...
    @overload
    def HitTest(self, x: int, y: int) -> AccessibleObject: ...
    @overload
    def Navigate(self, navdir: AccessibleNavigation) -> AccessibleObject: ...
    @overload
    def RaiseAutomationNotification(self, notificationKind: Automation.AutomationNotificationKind, notificationProcessing: Automation.AutomationNotificationProcessing, notificationText: str) -> bool: ...
    @overload
    def RaiseLiveRegionChanged() -> bool: ...
    @overload
    def Select(self, flags: AccessibleSelection) -> None: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class AccessibleRole(enum.Enum):
    None_ = 0
    TitleBar = 1
    MenuBar = 2
    ScrollBar = 3
    Grip = 4
    Sound = 5
    Cursor = 6
    Caret = 7
    Alert = 8
    Window = 9
    Client = 10
    MenuPopup = 11
    MenuItem = 12
    ToolTip = 13
    Application = 14
    Document = 15
    Pane = 16
    Chart = 17
    Dialog = 18
    Border = 19
    Grouping = 20
    Separator = 21
    ToolBar = 22
    StatusBar = 23
    Table = 24
    ColumnHeader = 25
    RowHeader = 26
    Column = 27
    Row = 28
    Cell = 29
    Link = 30
    HelpBalloon = 31
    Character = 32
    List = 33
    ListItem = 34
    Outline = 35
    OutlineItem = 36
    PageTab = 37
    PropertyPage = 38
    Indicator = 39
    Graphic = 40
    StaticText = 41
    Text = 42
    PushButton = 43
    CheckButton = 44
    RadioButton = 45
    ComboBox = 46
    DropList = 47
    ProgressBar = 48
    Dial = 49
    HotkeyField = 50
    Slider = 51
    SpinButton = 52
    Diagram = 53
    Animation = 54
    Equation = 55
    ButtonDropDown = 56
    ButtonMenu = 57
    ButtonDropDownGrid = 58
    WhiteSpace = 59
    PageTabList = 60
    Clock = 61
    SplitButton = 62
    IpAddress = 63
    OutlineButton = 64
    Default = -1

class AccessibleSelection(enum.Enum):
    None_ = 0
    TakeFocus = 1
    TakeSelection = 2
    ExtendSelection = 4
    AddSelection = 8
    RemoveSelection = 16

class AccessibleStates(enum.Enum):
    None_ = 0
    Unavailable = 1
    Selected = 2
    Focused = 4
    Pressed = 8
    Checked = 16
    Indeterminate = 32
    Mixed = 32
    ReadOnly = 64
    HotTracked = 128
    Default = 256
    Expanded = 512
    Collapsed = 1024
    Busy = 2048
    Floating = 4096
    Marqueed = 8192
    Animated = 16384
    Invisible = 32768
    Offscreen = 65536
    Sizeable = 131072
    Moveable = 262144
    SelfVoicing = 524288
    Focusable = 1048576
    Selectable = 2097152
    Linked = 4194304
    Traversed = 8388608
    MultiSelectable = 16777216
    ExtSelectable = 33554432
    AlertLow = 67108864
    AlertMedium = 134217728
    AlertHigh = 268435456
    Protected = 536870912
    Valid = 1073741823
    HasPopup = 1073741824

class AmbientProperties(object):
    """    """
    def __init__(self): ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...

class AnchorStyles(enum.Enum):
    None_ = 0
    Top = 1
    Bottom = 2
    Left = 4
    Right = 8

class Appearance(enum.Enum):
    Normal = 0
    Button = 1

class Application(object):
    """    """
    @overload
    @staticmethod
    def AddMessageFilter(value: IMessageFilter) -> None: ...
    @overload
    @staticmethod
    def DoEvents() -> None: ...
    @overload
    @staticmethod
    def EnableVisualStyles() -> None: ...
    @overload
    @staticmethod
    def Exit() -> None: ...
    @overload
    @staticmethod
    def Exit(e: ComponentModel.CancelEventArgs) -> None: ...
    @overload
    @staticmethod
    def ExitThread() -> None: ...
    @overload
    @staticmethod
    def FilterMessage() -> (bool, Message): ...
    @property
    def AllowQuit(self) -> bool: ...
    @property
    def CommonAppDataPath(self) -> str: ...
    @property
    def CommonAppDataRegistry(self) -> Win32.RegistryKey: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def CurrentCulture(self) -> Globalization.CultureInfo: ...
    @property
    def CurrentInputLanguage(self) -> InputLanguage: ...
    @property
    def ExecutablePath(self) -> str: ...
    @property
    def HighDpiMode(self) -> HighDpiMode: ...
    @property
    def LocalUserAppDataPath(self) -> str: ...
    @property
    def MessageLoop(self) -> bool: ...
    @property
    def OpenForms(self) -> FormCollection: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RenderWithVisualStyles(self) -> bool: ...
    @property
    def SafeTopLevelCaptionFormat(self) -> str: ...
    @property
    def StartupPath(self) -> str: ...
    @property
    def UserAppDataPath(self) -> str: ...
    @property
    def UserAppDataRegistry(self) -> Win32.RegistryKey: ...
    @property
    def UseVisualStyles(self) -> bool: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VisualStyleState(self) -> VisualStyles.VisualStyleState: ...
    @overload
    @staticmethod
    def OleRequired() -> Threading.ApartmentState: ...
    @overload
    @staticmethod
    def OnThreadException(t: System.Exception) -> None: ...
    @overload
    @staticmethod
    def RaiseIdle(e: System.EventArgs) -> None: ...
    @overload
    @staticmethod
    def RegisterMessageLoop(callback: MessageLoopCallback) -> None: ...
    @overload
    @staticmethod
    def RemoveMessageFilter(value: IMessageFilter) -> None: ...
    @overload
    @staticmethod
    def Restart() -> None: ...
    @overload
    @staticmethod
    def Run() -> None: ...
    @overload
    @staticmethod
    def Run(mainForm: Form) -> None: ...
    @overload
    @staticmethod
    def Run(context: ApplicationContext) -> None: ...
    @CurrentCulture.setter
    def CurrentCulture(self, value: System.Void): ...
    @CurrentInputLanguage.setter
    def CurrentInputLanguage(self, value: System.Void): ...
    @SafeTopLevelCaptionFormat.setter
    def SafeTopLevelCaptionFormat(self, value: System.Void): ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: System.Void): ...
    @VisualStyleState.setter
    def VisualStyleState(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetCompatibleTextRenderingDefault(defaultValue: bool) -> None: ...
    @overload
    @staticmethod
    def SetDefaultFont(font: Drawing.Font) -> None: ...
    @overload
    @staticmethod
    def SetHighDpiMode(highDpiMode: HighDpiMode) -> bool: ...
    @overload
    @staticmethod
    def SetSuspendState(state: PowerState, force: bool, disableWakeEvent: bool) -> bool: ...
    @overload
    @staticmethod
    def SetUnhandledExceptionMode(mode: UnhandledExceptionMode) -> None: ...
    @overload
    @staticmethod
    def SetUnhandledExceptionMode(mode: UnhandledExceptionMode, threadScope: bool) -> None: ...
    @overload
    @staticmethod
    def UnregisterMessageLoop() -> None: ...
    @property
    def ApplicationExit(self): ...
    @property
    def Idle(self): ...
    @property
    def EnterThreadModal(self): ...
    @property
    def LeaveThreadModal(self): ...
    @property
    def ThreadException(self): ...
    @property
    def ThreadExit(self): ...

class ApplicationContext(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mainForm: Form): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def ExitThread() -> None: ...
    @property
    def MainForm(self) -> Form: ...
    @property
    def Tag(self) -> object: ...
    @MainForm.setter
    def MainForm(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @property
    def ThreadExit(self): ...

class ArrangeDirection(enum.Enum):
    Left = 0
    Right = 0
    Down = 4
    Up = 4

class ArrangeStartingPosition(enum.Enum):
    BottomLeft = 0
    BottomRight = 1
    TopLeft = 2
    TopRight = 3
    Hide = 8

class ArrowDirection(enum.Enum):
    Left = 0
    Up = 1
    Right = 16
    Down = 17

class AutoCompleteMode(enum.Enum):
    None_ = 0
    Suggest = 1
    Append = 2
    SuggestAppend = 3

class AutoCompleteSource(enum.Enum):
    FileSystem = 1
    HistoryList = 2
    RecentlyUsedList = 4
    AllUrl = 6
    AllSystemSources = 7
    FileSystemDirectories = 32
    CustomSource = 64
    None_ = 128
    ListItems = 256

class AutoCompleteStringCollection(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, value: str) -> int: ...
    @overload
    def AddRange(self, value: System.System.Array[str]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.System.Array[str], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: str) -> int: ...
    @overload
    def Insert(self, index: int, value: str) -> None: ...
    @overload
    def Remove(self, value: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @property
    def CollectionChanged(self): ...

class AutoScaleMode(enum.Enum):
    None_ = 0
    Font = 1
    Dpi = 2
    Inherit = 3

class AutoSizeMode(enum.Enum):
    GrowAndShrink = 0
    GrowOnly = 1

class AutoValidate(enum.Enum):
    Disable = 0
    EnablePreventFocusChange = 1
    EnableAllowFocusChange = 2
    Inherit = -1

class AxHost(Control):
    """    """
    @overload
    def BeginInit() -> None: ...
    @overload
    def DoVerb(self, verb: int) -> None: ...
    @overload
    def DrawToBitmap(self, bitmap: Drawing.Bitmap, targetBounds: Drawing.Rectangle) -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def ContainingControl(self) -> ContainerControl: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def EditMode(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def HasAboutBox(self) -> bool: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def OcxState(self) -> State: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetOcx() -> object: ...
    @overload
    def HasPropertyPages() -> bool: ...
    @overload
    def InvokeEditMode() -> None: ...
    @overload
    def MakeDirty() -> None: ...
    @overload
    def PreProcessMessage() -> (bool, Message): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @ContainingControl.setter
    def ContainingControl(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @OcxState.setter
    def OcxState(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ShowAboutBox() -> None: ...
    @overload
    def ShowPropertyPages() -> None: ...
    @overload
    def ShowPropertyPages(self, control: Control) -> None: ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class BaseCollection(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def CopyTo(self, ar: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class BatteryChargeStatus(enum.Enum):
    High = 1
    Low = 2
    Critical = 4
    Charging = 8
    NoSystemBattery = 128
    Unknown = 255

class BindableComponent(ComponentModel.Component):
    """    """
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class Binding(object):
    """    """
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str): ...
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool): ...
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode): ...
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object): ...
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object, formatString: str): ...
    @overload
    def __init__(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object, formatString: str, formatInfo: System.IFormatProvider): ...
    @property
    def BindableComponent(self) -> IBindableComponent: ...
    @property
    def BindingManagerBase(self) -> BindingManagerBase: ...
    @property
    def BindingMemberInfo(self) -> BindingMemberInfo: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlUpdateMode(self) -> ControlUpdateMode: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DataSourceNullValue(self) -> object: ...
    @property
    def DataSourceUpdateMode(self) -> DataSourceUpdateMode: ...
    @property
    def FormatInfo(self) -> System.IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def FormattingEnabled(self) -> bool: ...
    @property
    def IsBinding(self) -> bool: ...
    @property
    def NullValue(self) -> object: ...
    @property
    def PropertyName(self) -> str: ...
    @overload
    def ReadValue() -> None: ...
    @ControlUpdateMode.setter
    def ControlUpdateMode(self, value: System.Void): ...
    @DataSourceNullValue.setter
    def DataSourceNullValue(self, value: System.Void): ...
    @DataSourceUpdateMode.setter
    def DataSourceUpdateMode(self, value: System.Void): ...
    @FormatInfo.setter
    def FormatInfo(self, value: System.Void): ...
    @FormatString.setter
    def FormatString(self, value: System.Void): ...
    @FormattingEnabled.setter
    def FormattingEnabled(self, value: System.Void): ...
    @NullValue.setter
    def NullValue(self, value: System.Void): ...
    @overload
    def WriteValue() -> None: ...
    @property
    def BindingComplete(self): ...
    @property
    def Parse(self): ...
    @property
    def Format(self): ...

class BindingCompleteContext(enum.Enum):
    ControlUpdate = 0
    DataSourceUpdate = 1

class BindingCompleteEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: System.Exception): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: System.Exception, cancel: bool): ...
    @property
    def Binding(self) -> Binding: ...
    @property
    def BindingCompleteContext(self) -> BindingCompleteContext: ...
    @property
    def BindingCompleteState(self) -> BindingCompleteState: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Exception(self) -> System.Exception: ...

class BindingCompleteEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: BindingCompleteEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: BindingCompleteEventArgs) -> None: ...

class BindingCompleteState(enum.Enum):
    Success = 0
    DataError = 1
    Exception = 2

class BindingContext(object):
    """    """
    def __init__(self): ...
    @overload
    def Contains(self, dataSource: object) -> bool: ...
    @overload
    def Contains(self, dataSource: object, dataMember: str) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> BindingManagerBase: ...
    @property
    def Item(self) -> BindingManagerBase: ...
    @overload
    @staticmethod
    def UpdateBinding(newBindingContext: BindingContext, binding: Binding) -> None: ...
    @property
    def CollectionChanged(self): ...

class BindingManagerBase(object):
    """    """
    def __init__(self): ...
    @overload
    def AddNew() -> None: ...
    @overload
    def CancelCurrentEdit() -> None: ...
    @overload
    def EndCurrentEdit() -> None: ...
    @property
    def Bindings(self) -> BindingsCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> object: ...
    @property
    def IsBindingSuspended(self) -> bool: ...
    @property
    def Position(self) -> int: ...
    @overload
    def GetItemProperties() -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def ResumeBinding() -> None: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SuspendBinding() -> None: ...
    @property
    def BindingComplete(self): ...
    @property
    def CurrentChanged(self): ...
    @property
    def CurrentItemChanged(self): ...
    @property
    def DataError(self): ...
    @property
    def PositionChanged(self): ...

class BindingManagerDataErrorEventArgs(System.EventArgs):
    """    """
    def __init__(self, exception: System.Exception): ...
    @property
    def Exception(self) -> System.Exception: ...

class BindingManagerDataErrorEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: BindingManagerDataErrorEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: BindingManagerDataErrorEventArgs) -> None: ...

class BindingMemberInfo(System.ValueType):
    """    """
    def __init__(self, dataMember: str): ...
    @overload
    def Equals(self, otherObject: object) -> bool: ...
    @overload
    def Equals(self, other: BindingMemberInfo) -> bool: ...
    @property
    def BindingField(self) -> str: ...
    @property
    def BindingMember(self) -> str: ...
    @property
    def BindingPath(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class BindingNavigator(ToolStrip):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bindingSource: BindingSource): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @overload
    def __init__(self, addStandardItems: bool): ...
    @overload
    def AddStandardItems() -> None: ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def AddNewItem(self) -> ToolStripItem: ...
    @property
    def BindingSource(self) -> BindingSource: ...
    @property
    def CountItem(self) -> ToolStripItem: ...
    @property
    def CountItemFormat(self) -> str: ...
    @property
    def DeleteItem(self) -> ToolStripItem: ...
    @property
    def MoveFirstItem(self) -> ToolStripItem: ...
    @property
    def MoveLastItem(self) -> ToolStripItem: ...
    @property
    def MoveNextItem(self) -> ToolStripItem: ...
    @property
    def MovePreviousItem(self) -> ToolStripItem: ...
    @property
    def PositionItem(self) -> ToolStripItem: ...
    @AddNewItem.setter
    def AddNewItem(self, value: System.Void): ...
    @BindingSource.setter
    def BindingSource(self, value: System.Void): ...
    @CountItem.setter
    def CountItem(self, value: System.Void): ...
    @CountItemFormat.setter
    def CountItemFormat(self, value: System.Void): ...
    @DeleteItem.setter
    def DeleteItem(self, value: System.Void): ...
    @MoveFirstItem.setter
    def MoveFirstItem(self, value: System.Void): ...
    @MoveLastItem.setter
    def MoveLastItem(self, value: System.Void): ...
    @MoveNextItem.setter
    def MoveNextItem(self, value: System.Void): ...
    @MovePreviousItem.setter
    def MovePreviousItem(self, value: System.Void): ...
    @PositionItem.setter
    def PositionItem(self, value: System.Void): ...
    @overload
    def Validate() -> bool: ...
    @property
    def RefreshItems(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class BindingsCollection(BaseCollection):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Binding: ...
    @property
    def CollectionChanging(self): ...
    @property
    def CollectionChanged(self): ...

class BindingSource(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @overload
    def __init__(self, dataSource: object, dataMember: str): ...
    @overload
    def Add(self, value: object) -> int: ...
    @overload
    def AddNew() -> object: ...
    @overload
    def ApplySort(self, sorts: ComponentModel.ListSortDescriptionCollection) -> None: ...
    @overload
    def ApplySort(self, property_: ComponentModel.PropertyDescriptor, sort: ComponentModel.ListSortDirection) -> None: ...
    @overload
    def CancelEdit() -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, arr: System.Array, index: int) -> None: ...
    @overload
    def EndEdit() -> None: ...
    @overload
    def Find(self, propertyName: str, key: object) -> int: ...
    @overload
    def Find(self, prop: ComponentModel.PropertyDescriptor, key: object) -> int: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def AllowRemove(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrencyManager(self) -> CurrencyManager: ...
    @property
    def Current(self) -> object: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def Filter(self) -> str: ...
    @property
    def IsBindingSuspended(self) -> bool: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSorted(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def List(self) -> Collections.IList: ...
    @property
    def Position(self) -> int: ...
    @property
    def RaiseListChangedEvents(self) -> bool: ...
    @property
    def Sort(self) -> str: ...
    @property
    def SortDescriptions(self) -> ComponentModel.ListSortDescriptionCollection: ...
    @property
    def SortDirection(self) -> ComponentModel.ListSortDirection: ...
    @property
    def SortProperty(self) -> ComponentModel.PropertyDescriptor: ...
    @property
    def SupportsAdvancedSorting(self) -> bool: ...
    @property
    def SupportsChangeNotification(self) -> bool: ...
    @property
    def SupportsFiltering(self) -> bool: ...
    @property
    def SupportsSearching(self) -> bool: ...
    @property
    def SupportsSorting(self) -> bool: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetItemProperties(self, listAccessors: ComponentModel.System.Array[ComponentModel.PropertyDescriptor]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetListName(self, listAccessors: ComponentModel.System.Array[ComponentModel.PropertyDescriptor]) -> str: ...
    @overload
    def GetRelatedCurrencyManager(self, dataMember: str) -> CurrencyManager: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def Insert(self, index: int, value: object) -> None: ...
    @overload
    def MoveFirst() -> None: ...
    @overload
    def MoveLast() -> None: ...
    @overload
    def MoveNext() -> None: ...
    @overload
    def MovePrevious() -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveCurrent() -> None: ...
    @overload
    def RemoveFilter() -> None: ...
    @overload
    def RemoveSort() -> None: ...
    @overload
    def ResetAllowNew() -> None: ...
    @overload
    def ResetBindings(self, metadataChanged: bool) -> None: ...
    @overload
    def ResetCurrentItem() -> None: ...
    @overload
    def ResetItem(self, itemIndex: int) -> None: ...
    @overload
    def ResumeBinding() -> None: ...
    @AllowNew.setter
    def AllowNew(self, value: System.Void): ...
    @DataMember.setter
    def DataMember(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @RaiseListChangedEvents.setter
    def RaiseListChangedEvents(self, value: System.Void): ...
    @Sort.setter
    def Sort(self, value: System.Void): ...
    @overload
    def SuspendBinding() -> None: ...
    @property
    def AddingNew(self): ...
    @property
    def BindingComplete(self): ...
    @property
    def DataError(self): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DataMemberChanged(self): ...
    @property
    def CurrentChanged(self): ...
    @property
    def CurrentItemChanged(self): ...
    @property
    def ListChanged(self): ...
    @property
    def PositionChanged(self): ...
    @property
    def Disposed(self): ...

class BootMode(enum.Enum):
    Normal = 0
    FailSafe = 1
    FailSafeWithNetwork = 2

class Border3DSide(enum.Enum):
    Left = 1
    Top = 2
    Right = 4
    Bottom = 8
    Middle = 2048
    All = 2063

class Border3DStyle(enum.Enum):
    RaisedOuter = 1
    SunkenOuter = 2
    RaisedInner = 4
    Raised = 5
    Etched = 6
    SunkenInner = 8
    Bump = 9
    Sunken = 10
    Adjust = 8192
    Flat = 16394

class BorderStyle(enum.Enum):
    None_ = 0
    FixedSingle = 1
    Fixed3D = 2

class BoundsSpecified(enum.Enum):
    None_ = 0
    X = 1
    Y = 2
    Location = 3
    Width = 4
    Height = 8
    Size = 12
    All = 15

class Button(ButtonBase):
    """    """
    def __init__(self): ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    def NotifyDefault(self, value: bool) -> None: ...
    @overload
    def PerformClick() -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @DialogResult.setter
    def DialogResult(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ButtonBase(Control):
    """    """
    @property
    def AutoEllipsis(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def FlatAppearance(self) -> FlatButtonAppearance: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def UseMnemonic(self) -> bool: ...
    @property
    def UseVisualStyleBackColor(self) -> bool: ...
    @overload
    def GetPreferredSize(self, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @AutoEllipsis.setter
    def AutoEllipsis(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageAlign.setter
    def ImageAlign(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @ImageList.setter
    def ImageList(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @UseMnemonic.setter
    def UseMnemonic(self, value: System.Void): ...
    @UseVisualStyleBackColor.setter
    def UseVisualStyleBackColor(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ButtonBorderStyle(enum.Enum):
    None_ = 0
    Dotted = 1
    Dashed = 2
    Solid = 3
    Inset = 4
    Outset = 5

class ButtonRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, buttonText: str, font: Drawing.Font, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, buttonText: str, font: Drawing.Font, flags: TextFormatFlags, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, buttonText: str, font: Drawing.Font, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, buttonText: str, font: Drawing.Font, flags: TextFormatFlags, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.PushButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawParentBackground(g: Drawing.Graphics, bounds: Drawing.Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState(self) -> bool: ...
    @overload
    @staticmethod
    def IsBackgroundPartiallyTransparent(state: VisualStyles.PushButtonState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(self, value: System.Void): ...

class ButtonState(enum.Enum):
    Normal = 0
    Inactive = 256
    Pushed = 512
    Checked = 1024
    Flat = 16384
    All = 18176

class CacheVirtualItemsEventArgs(System.EventArgs):
    """    """
    def __init__(self, startIndex: int, endIndex: int): ...
    @property
    def EndIndex(self) -> int: ...
    @property
    def StartIndex(self) -> int: ...

class CacheVirtualItemsEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: CacheVirtualItemsEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: CacheVirtualItemsEventArgs) -> None: ...

class CaptionButton(enum.Enum):
    Close = 0
    Minimize = 1
    Maximize = 2
    Restore = 3
    Help = 4

class CharacterCasing(enum.Enum):
    Normal = 0
    Upper = 1
    Lower = 2

class CheckBox(ButtonBase):
    """    """
    def __init__(self): ...
    @property
    def Appearance(self) -> Appearance: ...
    @property
    def AutoCheck(self) -> bool: ...
    @property
    def CheckAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ThreeState(self) -> bool: ...
    @Appearance.setter
    def Appearance(self, value: System.Void): ...
    @AutoCheck.setter
    def AutoCheck(self, value: System.Void): ...
    @CheckAlign.setter
    def CheckAlign(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @CheckState.setter
    def CheckState(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @ThreeState.setter
    def ThreeState(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AppearanceChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def CheckedChanged(self): ...
    @property
    def CheckStateChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class CheckBoxRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawCheckBox(g: Drawing.Graphics, glyphLocation: Drawing.Point, state: VisualStyles.CheckBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, checkBoxText: str, font: Drawing.Font, focused: bool, state: VisualStyles.CheckBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, checkBoxText: str, font: Drawing.Font, flags: TextFormatFlags, focused: bool, state: VisualStyles.CheckBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, checkBoxText: str, font: Drawing.Font, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.CheckBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, checkBoxText: str, font: Drawing.Font, flags: TextFormatFlags, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.CheckBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawParentBackground(g: Drawing.Graphics, bounds: Drawing.Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState(self) -> bool: ...
    @overload
    @staticmethod
    def GetGlyphSize(g: Drawing.Graphics, state: VisualStyles.CheckBoxState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def IsBackgroundPartiallyTransparent(state: VisualStyles.CheckBoxState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(self, value: System.Void): ...

class CheckedListBox(ListBox):
    """    """
    def __init__(self): ...
    @property
    def CheckedIndices(self) -> CheckedIndexCollection: ...
    @property
    def CheckedItems(self) -> CheckedItemCollection: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectionMode(self) -> SelectionMode: ...
    @property
    def ThreeDCheckBoxes(self) -> bool: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    @overload
    def GetItemChecked(self, index: int) -> bool: ...
    @overload
    def GetItemCheckState(self, index: int) -> CheckState: ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DisplayMember.setter
    def DisplayMember(self, value: System.Void): ...
    @DrawMode.setter
    def DrawMode(self, value: System.Void): ...
    @ItemHeight.setter
    def ItemHeight(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @ThreeDCheckBoxes.setter
    def ThreeDCheckBoxes(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @ValueMember.setter
    def ValueMember(self, value: System.Void): ...
    @overload
    def SetItemChecked(self, index: int, value: bool) -> None: ...
    @overload
    def SetItemCheckState(self, index: int, value: CheckState) -> None: ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DisplayMemberChanged(self): ...
    @property
    def ItemCheck(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def DrawItem(self): ...
    @property
    def MeasureItem(self): ...
    @property
    def ValueMemberChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def Format(self): ...
    @property
    def FormatInfoChanged(self): ...
    @property
    def FormatStringChanged(self): ...
    @property
    def FormattingEnabledChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class CheckState(enum.Enum):
    Unchecked = 0
    Checked = 1
    Indeterminate = 2

class Clipboard(object):
    """    """
    @overload
    @staticmethod
    def Clear() -> None: ...
    @overload
    @staticmethod
    def ContainsAudio() -> bool: ...
    @overload
    @staticmethod
    def ContainsData(format_: str) -> bool: ...
    @overload
    @staticmethod
    def ContainsFileDropList() -> bool: ...
    @overload
    @staticmethod
    def ContainsImage() -> bool: ...
    @overload
    @staticmethod
    def ContainsText() -> bool: ...
    @overload
    @staticmethod
    def ContainsText(format_: TextDataFormat) -> bool: ...
    @overload
    @staticmethod
    def GetAudioStream() -> IO.Stream: ...
    @overload
    @staticmethod
    def GetData(format_: str) -> object: ...
    @overload
    @staticmethod
    def GetDataObject() -> IDataObject: ...
    @overload
    @staticmethod
    def GetFileDropList() -> Specialized.StringCollection: ...
    @overload
    @staticmethod
    def GetImage() -> Drawing.Image: ...
    @overload
    @staticmethod
    def GetText() -> str: ...
    @overload
    @staticmethod
    def GetText(format_: TextDataFormat) -> str: ...
    @overload
    @staticmethod
    def SetAudio(audioBytes: System.System.Array[System.Byte]) -> None: ...
    @overload
    @staticmethod
    def SetAudio(audioStream: IO.Stream) -> None: ...
    @overload
    @staticmethod
    def SetData(format_: str, data: object) -> None: ...
    @overload
    @staticmethod
    def SetDataObject(data: object) -> None: ...
    @overload
    @staticmethod
    def SetDataObject(data: object, copy: bool) -> None: ...
    @overload
    @staticmethod
    def SetDataObject(data: object, copy: bool, retryTimes: int, retryDelay: int) -> None: ...
    @overload
    @staticmethod
    def SetFileDropList(filePaths: Specialized.StringCollection) -> None: ...
    @overload
    @staticmethod
    def SetImage(image: Drawing.Image) -> None: ...
    @overload
    @staticmethod
    def SetText(text: str) -> None: ...
    @overload
    @staticmethod
    def SetText(text: str, format_: TextDataFormat) -> None: ...

class CloseReason(enum.Enum):
    None_ = 0
    WindowsShutDown = 1
    MdiFormClosing = 2
    UserClosing = 3
    TaskManagerClosing = 4
    FormOwnerClosing = 5
    ApplicationExitCall = 6

class ColorDepth(enum.Enum):
    Depth4Bit = 4
    Depth8Bit = 8
    Depth16Bit = 16
    Depth24Bit = 24
    Depth32Bit = 32

class ColorDialog(CommonDialog):
    """    """
    def __init__(self): ...
    @property
    def AllowFullOpen(self) -> bool: ...
    @property
    def AnyColor(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def CustomColors(self) -> System.System.Array[int]: ...
    @property
    def FullOpen(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def SolidColorOnly(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AllowFullOpen.setter
    def AllowFullOpen(self, value: System.Void): ...
    @AnyColor.setter
    def AnyColor(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @CustomColors.setter
    def CustomColors(self, value: System.Void): ...
    @FullOpen.setter
    def FullOpen(self, value: System.Void): ...
    @ShowHelp.setter
    def ShowHelp(self, value: System.Void): ...
    @SolidColorOnly.setter
    def SolidColorOnly(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class ColumnClickEventArgs(System.EventArgs):
    """    """
    def __init__(self, column: int): ...
    @property
    def Column(self) -> int: ...

class ColumnClickEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ColumnClickEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ColumnClickEventArgs) -> None: ...

class ColumnHeader(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, imageIndex: int): ...
    @overload
    def __init__(self, imageKey: str): ...
    @overload
    def AutoResize(self, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    @overload
    def Clone() -> object: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def Index(self) -> int: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def Width(self) -> int: ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class ColumnHeaderAutoResizeStyle(enum.Enum):
    None_ = 0
    HeaderSize = 1
    ColumnContent = 2

class ColumnHeaderConverter(ComponentModel.ExpandableObjectConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class ColumnHeaderStyle(enum.Enum):
    None_ = 0
    Nonclickable = 1
    Clickable = 2

class ColumnReorderedEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, oldDisplayIndex: int, newDisplayIndex: int, header: ColumnHeader): ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def NewDisplayIndex(self) -> int: ...
    @property
    def OldDisplayIndex(self) -> int: ...

class ColumnReorderedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ColumnReorderedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ColumnReorderedEventArgs) -> None: ...

class ColumnStyle(TableLayoutStyle):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sizeType: SizeType): ...
    @overload
    def __init__(self, sizeType: SizeType, width: System.Single): ...
    @property
    def Width(self) -> System.Single: ...
    @Width.setter
    def Width(self, value: System.Void): ...

class ColumnWidthChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, columnIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...

class ColumnWidthChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ColumnWidthChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ColumnWidthChangedEventArgs) -> None: ...

class ColumnWidthChangingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @overload
    def __init__(self, columnIndex: int, newWidth: int): ...
    @overload
    def __init__(self, columnIndex: int, newWidth: int, cancel: bool): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def NewWidth(self) -> int: ...
    @NewWidth.setter
    def NewWidth(self, value: System.Void): ...

class ColumnWidthChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ColumnWidthChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ColumnWidthChangingEventArgs) -> None: ...

class ComboBox(ListControl):
    """    """
    def __init__(self): ...
    @overload
    def BeginUpdate() -> None: ...
    @overload
    def EndUpdate() -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def DropDownHeight(self) -> int: ...
    @property
    def DropDownStyle(self) -> ComboBoxStyle: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def DroppedDown(self) -> bool: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> object: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetItemHeight(self, index: int) -> int: ...
    @overload
    def ResetText() -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: System.Void): ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: System.Void): ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DrawMode.setter
    def DrawMode(self, value: System.Void): ...
    @DropDownHeight.setter
    def DropDownHeight(self, value: System.Void): ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: System.Void): ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: System.Void): ...
    @DroppedDown.setter
    def DroppedDown(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: System.Void): ...
    @ItemHeight.setter
    def ItemHeight(self, value: System.Void): ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SelectionLength.setter
    def SelectionLength(self, value: System.Void): ...
    @SelectionStart.setter
    def SelectionStart(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DrawItem(self): ...
    @property
    def DropDown(self): ...
    @property
    def MeasureItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectionChangeCommitted(self): ...
    @property
    def DropDownStyleChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def TextUpdate(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DisplayMemberChanged(self): ...
    @property
    def Format(self): ...
    @property
    def FormatInfoChanged(self): ...
    @property
    def FormatStringChanged(self): ...
    @property
    def FormattingEnabledChanged(self): ...
    @property
    def ValueMemberChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ComboBoxRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawDropDownButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ComboBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ComboBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, comboBoxText: str, font: Drawing.Font, state: VisualStyles.ComboBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, comboBoxText: str, font: Drawing.Font, textBounds: Drawing.Rectangle, state: VisualStyles.ComboBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, comboBoxText: str, font: Drawing.Font, flags: TextFormatFlags, state: VisualStyles.ComboBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, comboBoxText: str, font: Drawing.Font, textBounds: Drawing.Rectangle, flags: TextFormatFlags, state: VisualStyles.ComboBoxState) -> None: ...
    @property
    def IsSupported(self) -> bool: ...

class ComboBoxStyle(enum.Enum):
    Simple = 0
    DropDown = 1
    DropDownList = 2

class CommonDialog(ComponentModel.Component):
    """    """
    def __init__(self): ...
    @property
    def Tag(self) -> object: ...
    @overload
    def Reset() -> None: ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def ShowDialog() -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class ContainerControl(ScrollableControl):
    """    """
    def __init__(self): ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def AutoScaleDimensions(self) -> Drawing.SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def CurrentAutoScaleDimensions(self) -> Drawing.SizeF: ...
    @property
    def ParentForm(self) -> Form: ...
    @overload
    def PerformAutoScale() -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: System.Void): ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: System.Void): ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: System.Void): ...
    @AutoValidate.setter
    def AutoValidate(self, value: System.Void): ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...
    @overload
    def Validate() -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren() -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ContentsResizedEventArgs(System.EventArgs):
    """    """
    def __init__(self, newRectangle: Drawing.Rectangle): ...
    @property
    def NewRectangle(self) -> Drawing.Rectangle: ...

class ContentsResizedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ContentsResizedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ContentsResizedEventArgs) -> None: ...

class ContextMenuStrip(ToolStripDropDownMenu):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @property
    def SourceControl(self) -> Control: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Enter(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Leave(self): ...
    @property
    def Opening(self): ...
    @property
    def Opened(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def Validated(self): ...
    @property
    def Validating(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class Control(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, parent: Control, text: str): ...
    @overload
    def __init__(self, text: str, left: int, top: int, width: int, height: int): ...
    @overload
    def __init__(self, parent: Control, text: str, left: int, top: int, width: int, height: int): ...
    @overload
    def BeginInvoke(self, method: System.Action) -> System.IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: System.Delegate) -> System.IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: System.Delegate, args: System.System.Array[object]) -> System.IAsyncResult: ...
    @overload
    def BringToFront() -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl() -> None: ...
    @overload
    def CreateGraphics() -> Drawing.Graphics: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects, dragImage: Drawing.Bitmap, cursorOffset: Drawing.Point, useDefaultDragImage: bool) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Drawing.Bitmap, targetBounds: Drawing.Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: System.IAsyncResult) -> object: ...
    @overload
    def FindForm() -> Form: ...
    @overload
    def Focus() -> bool: ...
    @overload
    @staticmethod
    def FromChildHandle(handle: System.IntPtr) -> Control: ...
    @overload
    @staticmethod
    def FromHandle(handle: System.IntPtr) -> Control: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScrollOffset(self) -> Drawing.Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def CheckForIllegalCrossThreadCalls(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Drawing.Rectangle: ...
    @property
    def ClientSize(self) -> Drawing.Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def DefaultBackColor(self) -> Drawing.Color: ...
    @property
    def DefaultFont(self) -> Drawing.Font: ...
    @property
    def DefaultForeColor(self) -> Drawing.Color: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsAncestorSiteInDesignMode(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def ModifierKeys(self) -> Keys: ...
    @property
    def MouseButtons(self) -> MouseButtons: ...
    @property
    def MousePosition(self) -> Drawing.Point: ...
    @property
    def Name(self) -> str: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def PreferredSize(self) -> Drawing.Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Drawing.Region: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Drawing.Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Drawing.Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl() -> IContainerControl: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def Hide() -> None: ...
    @overload
    def Invalidate() -> None: ...
    @overload
    def Invalidate(self, region: Drawing.Region) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Drawing.Rectangle) -> None: ...
    @overload
    def Invalidate(self, rc: Drawing.Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Drawing.Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: System.Func) -> T: ...
    @overload
    def Invoke(self, method: System.Delegate) -> object: ...
    @overload
    def Invoke(self, method: System.Action) -> None: ...
    @overload
    def Invoke(self, method: System.Delegate, args: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def IsKeyLocked(keyVal: Keys) -> bool: ...
    @overload
    @staticmethod
    def IsMnemonic(charCode: System.Char, text: str) -> bool: ...
    @overload
    def LogicalToDeviceUnits(self, value: Drawing.Size) -> Drawing.Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformLayout() -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Drawing.Point) -> Drawing.Point: ...
    @overload
    def PointToScreen(self, p: Drawing.Point) -> Drawing.Point: ...
    @overload
    def PreProcessControlMessage() -> (PreProcessControlState, Message): ...
    @overload
    def PreProcessMessage() -> (bool, Message): ...
    @overload
    def RectangleToClient(self, r: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def ResetBackColor() -> None: ...
    @overload
    def ResetBindings() -> None: ...
    @overload
    def ResetCursor() -> None: ...
    @overload
    def ResetFont() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @overload
    def ResetImeMode() -> None: ...
    @overload
    def ResetRightToLeft() -> None: ...
    @overload
    def ResetText() -> None: ...
    @overload
    def ResumeLayout() -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: Drawing.SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice() -> (Drawing.Bitmap): ...
    @overload
    def Select() -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack() -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: System.Void): ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: System.Void): ...
    @AccessibleName.setter
    def AccessibleName(self, value: System.Void): ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: System.Void): ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...
    @Bounds.setter
    def Bounds(self, value: System.Void): ...
    @Capture.setter
    def Capture(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @CheckForIllegalCrossThreadCalls.setter
    def CheckForIllegalCrossThreadCalls(self, value: System.Void): ...
    @ClientSize.setter
    def ClientSize(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @DataContext.setter
    def DataContext(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @IsAccessible.setter
    def IsAccessible(self, value: System.Void): ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Margin.setter
    def Margin(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Region.setter
    def Region(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Top.setter
    def Top(self, value: System.Void): ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @WindowTarget.setter
    def WindowTarget(self, value: System.Void): ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def Show() -> None: ...
    @overload
    def SuspendLayout() -> None: ...
    @overload
    def Update() -> None: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ImeContext(object):
    """    """
    @overload
    @staticmethod
    def Disable(handle: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def Enable(handle: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def GetImeMode(handle: System.IntPtr) -> ImeMode: ...
    @overload
    @staticmethod
    def IsOpen(handle: System.IntPtr) -> bool: ...
    @overload
    @staticmethod
    def SetImeStatus(imeMode: ImeMode, handle: System.IntPtr) -> None: ...
    @overload
    @staticmethod
    def SetOpenStatus(open_: bool, handle: System.IntPtr) -> None: ...

class ImeModeConversion(System.ValueType):
    """    """
    @property
    def ImeModeConversionBits(self) -> Generic.Dictionary: ...
    @property
    def IsCurrentConversionTableSupported(self) -> bool: ...

class ControlBindingsCollection(BindingsCollection):
    """    """
    def __init__(self, control: IBindableComponent): ...
    @overload
    def Add(self, binding: Binding) -> None: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: object) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: object, formatString: str) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: object, formatString: str, formatInfo: System.IFormatProvider) -> Binding: ...
    @overload
    def Clear() -> None: ...
    @property
    def BindableComponent(self) -> IBindableComponent: ...
    @property
    def Control(self) -> Control: ...
    @property
    def DefaultDataSourceUpdateMode(self) -> DataSourceUpdateMode: ...
    @property
    def Item(self) -> Binding: ...
    @overload
    def Remove(self, binding: Binding) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @DefaultDataSourceUpdateMode.setter
    def DefaultDataSourceUpdateMode(self, value: System.Void): ...
    @property
    def CollectionChanging(self): ...
    @property
    def CollectionChanged(self): ...

class ControlEventArgs(System.EventArgs):
    """    """
    def __init__(self, control: Control): ...
    @property
    def Control(self) -> Control: ...

class ControlEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ControlEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ControlEventArgs) -> None: ...

class ControlPaint(object):
    """    """
    @overload
    @staticmethod
    def CreateHBitmap16Bit(bitmap: Drawing.Bitmap, background: Drawing.Color) -> System.IntPtr: ...
    @overload
    @staticmethod
    def CreateHBitmapColorMask(bitmap: Drawing.Bitmap, monochromeMask: System.IntPtr) -> System.IntPtr: ...
    @overload
    @staticmethod
    def CreateHBitmapTransparencyMask(bitmap: Drawing.Bitmap) -> System.IntPtr: ...
    @overload
    @staticmethod
    def Dark(baseColor: Drawing.Color) -> Drawing.Color: ...
    @overload
    @staticmethod
    def Dark(baseColor: Drawing.Color, percOfDarkDark: System.Single) -> Drawing.Color: ...
    @overload
    @staticmethod
    def DarkDark(baseColor: Drawing.Color) -> Drawing.Color: ...
    @overload
    @staticmethod
    def DrawBorder(graphics: Drawing.Graphics, bounds: Drawing.Rectangle, color: Drawing.Color, style: ButtonBorderStyle) -> None: ...
    @overload
    @staticmethod
    def DrawBorder(graphics: Drawing.Graphics, bounds: Drawing.Rectangle, leftColor: Drawing.Color, leftWidth: int, leftStyle: ButtonBorderStyle, topColor: Drawing.Color, topWidth: int, topStyle: ButtonBorderStyle, rightColor: Drawing.Color, rightWidth: int, rightStyle: ButtonBorderStyle, bottomColor: Drawing.Color, bottomWidth: int, bottomStyle: ButtonBorderStyle) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, style: Border3DStyle) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, style: Border3DStyle, sides: Border3DSide) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle) -> None: ...
    @overload
    @staticmethod
    def DrawBorder3D(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle, sides: Border3DSide) -> None: ...
    @overload
    @staticmethod
    def DrawButton(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawButton(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawCaptionButton(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, button: CaptionButton, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawCaptionButton(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, button: CaptionButton, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawCheckBox(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawComboButton(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawComboButton(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawContainerGrabHandle(graphics: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawFocusRectangle(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawFocusRectangle(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawGrabHandle(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, primary: bool, enabled: bool) -> None: ...
    @overload
    @staticmethod
    def DrawGrid(graphics: Drawing.Graphics, area: Drawing.Rectangle, pixelsBetweenDots: Drawing.Size, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawImageDisabled(graphics: Drawing.Graphics, image: Drawing.Image, x: int, y: int, background: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawLockedFrame(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, primary: bool) -> None: ...
    @overload
    @staticmethod
    def DrawMenuGlyph(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, glyph: MenuGlyph) -> None: ...
    @overload
    @staticmethod
    def DrawMenuGlyph(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, glyph: MenuGlyph, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawMenuGlyph(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph) -> None: ...
    @overload
    @staticmethod
    def DrawMenuGlyph(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawMixedCheckBox(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawMixedCheckBox(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawReversibleFrame(rectangle: Drawing.Rectangle, backColor: Drawing.Color, style: FrameStyle) -> None: ...
    @overload
    @staticmethod
    def DrawReversibleLine(start: Drawing.Point, end: Drawing.Point, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawScrollButton(graphics: Drawing.Graphics, rectangle: Drawing.Rectangle, button: ScrollButton, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawScrollButton(graphics: Drawing.Graphics, x: int, y: int, width: int, height: int, button: ScrollButton, state: ButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawSelectionFrame(graphics: Drawing.Graphics, active: bool, outsideRect: Drawing.Rectangle, insideRect: Drawing.Rectangle, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawSizeGrip(graphics: Drawing.Graphics, backColor: Drawing.Color, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawSizeGrip(graphics: Drawing.Graphics, backColor: Drawing.Color, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def DrawStringDisabled(graphics: Drawing.Graphics, s: str, font: Drawing.Font, color: Drawing.Color, layoutRectangle: Drawing.RectangleF, format_: Drawing.StringFormat) -> None: ...
    @overload
    @staticmethod
    def DrawStringDisabled(dc: Drawing.IDeviceContext, s: str, font: Drawing.Font, color: Drawing.Color, layoutRectangle: Drawing.Rectangle, format_: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawVisualStyleBorder(graphics: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def FillReversibleRectangle(rectangle: Drawing.Rectangle, backColor: Drawing.Color) -> None: ...
    @property
    def ContrastControlDark(self) -> Drawing.Color: ...
    @overload
    @staticmethod
    def Light(baseColor: Drawing.Color) -> Drawing.Color: ...
    @overload
    @staticmethod
    def Light(baseColor: Drawing.Color, percOfLightLight: System.Single) -> Drawing.Color: ...
    @overload
    @staticmethod
    def LightLight(baseColor: Drawing.Color) -> Drawing.Color: ...

class ControlStyles(enum.Enum):
    ContainerControl = 1
    UserPaint = 2
    Opaque = 4
    ResizeRedraw = 16
    FixedWidth = 32
    FixedHeight = 64
    StandardClick = 256
    Selectable = 512
    UserMouse = 1024
    SupportsTransparentBackColor = 2048
    StandardDoubleClick = 4096
    AllPaintingInWmPaint = 8192
    CacheText = 16384
    EnableNotifyMessage = 32768
    DoubleBuffer = 65536
    OptimizedDoubleBuffer = 131072
    UseTextForAccessibility = 262144

class ControlUpdateMode(enum.Enum):
    OnPropertyChanged = 0
    Never = 1

class ConvertEventArgs(System.EventArgs):
    """    """
    def __init__(self, value: object, desiredType: System.Type): ...
    @property
    def DesiredType(self) -> System.Type: ...
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class ConvertEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ConvertEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ConvertEventArgs) -> None: ...

class CreateParams(object):
    """    """
    def __init__(self): ...
    @property
    def Caption(self) -> str: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ClassStyle(self) -> int: ...
    @property
    def ExStyle(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def Param(self) -> object: ...
    @property
    def Parent(self) -> System.IntPtr: ...
    @property
    def Style(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @Caption.setter
    def Caption(self, value: System.Void): ...
    @ClassName.setter
    def ClassName(self, value: System.Void): ...
    @ClassStyle.setter
    def ClassStyle(self, value: System.Void): ...
    @ExStyle.setter
    def ExStyle(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Param.setter
    def Param(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @X.setter
    def X(self, value: System.Void): ...
    @Y.setter
    def Y(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class CurrencyManager(BindingManagerBase):
    """    """
    @overload
    def AddNew() -> None: ...
    @overload
    def CancelCurrentEdit() -> None: ...
    @overload
    def EndCurrentEdit() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> object: ...
    @property
    def List(self) -> Collections.IList: ...
    @property
    def Position(self) -> int: ...
    @overload
    def GetItemProperties() -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def ResumeBinding() -> None: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SuspendBinding() -> None: ...
    @property
    def ItemChanged(self): ...
    @property
    def ListChanged(self): ...
    @property
    def MetaDataChanged(self): ...
    @property
    def BindingComplete(self): ...
    @property
    def CurrentChanged(self): ...
    @property
    def CurrentItemChanged(self): ...
    @property
    def DataError(self): ...
    @property
    def PositionChanged(self): ...

class Cursor(object):
    """    """
    @overload
    def __init__(self, handle: System.IntPtr): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, type_: System.Type, resource: str): ...
    @overload
    def CopyHandle() -> System.IntPtr: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Draw(self, g: Drawing.Graphics, targetRect: Drawing.Rectangle) -> None: ...
    @overload
    def DrawStretched(self, g: Drawing.Graphics, targetRect: Drawing.Rectangle) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Clip(self) -> Drawing.Rectangle: ...
    @property
    def Current(self) -> Cursor: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HotSpot(self) -> Drawing.Point: ...
    @property
    def Position(self) -> Drawing.Point: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Tag(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Hide() -> None: ...
    @Clip.setter
    def Clip(self, value: System.Void): ...
    @Current.setter
    def Current(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    @staticmethod
    def Show() -> None: ...
    @overload
    def ToString() -> str: ...

class CursorConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class Cursors(object):
    """    """
    @property
    def AppStarting(self) -> Cursor: ...
    @property
    def Arrow(self) -> Cursor: ...
    @property
    def Cross(self) -> Cursor: ...
    @property
    def Default(self) -> Cursor: ...
    @property
    def Hand(self) -> Cursor: ...
    @property
    def Help(self) -> Cursor: ...
    @property
    def HSplit(self) -> Cursor: ...
    @property
    def IBeam(self) -> Cursor: ...
    @property
    def No(self) -> Cursor: ...
    @property
    def NoMove2D(self) -> Cursor: ...
    @property
    def NoMoveHoriz(self) -> Cursor: ...
    @property
    def NoMoveVert(self) -> Cursor: ...
    @property
    def PanEast(self) -> Cursor: ...
    @property
    def PanNE(self) -> Cursor: ...
    @property
    def PanNorth(self) -> Cursor: ...
    @property
    def PanNW(self) -> Cursor: ...
    @property
    def PanSE(self) -> Cursor: ...
    @property
    def PanSouth(self) -> Cursor: ...
    @property
    def PanSW(self) -> Cursor: ...
    @property
    def PanWest(self) -> Cursor: ...
    @property
    def SizeAll(self) -> Cursor: ...
    @property
    def SizeNESW(self) -> Cursor: ...
    @property
    def SizeNS(self) -> Cursor: ...
    @property
    def SizeNWSE(self) -> Cursor: ...
    @property
    def SizeWE(self) -> Cursor: ...
    @property
    def UpArrow(self) -> Cursor: ...
    @property
    def VSplit(self) -> Cursor: ...
    @property
    def WaitCursor(self) -> Cursor: ...

class DataFormats(object):
    """    """
    @property
    def Text(self) -> str: ...
    @property
    def UnicodeText(self) -> str: ...
    @property
    def Dib(self) -> str: ...
    @property
    def Bitmap(self) -> str: ...
    @property
    def EnhancedMetafile(self) -> str: ...
    @property
    def MetafilePict(self) -> str: ...
    @property
    def SymbolicLink(self) -> str: ...
    @property
    def Dif(self) -> str: ...
    @property
    def Tiff(self) -> str: ...
    @property
    def OemText(self) -> str: ...
    @property
    def Palette(self) -> str: ...
    @property
    def PenData(self) -> str: ...
    @property
    def Riff(self) -> str: ...
    @property
    def WaveAudio(self) -> str: ...
    @property
    def FileDrop(self) -> str: ...
    @property
    def Locale(self) -> str: ...
    @property
    def Html(self) -> str: ...
    @property
    def Rtf(self) -> str: ...
    @property
    def CommaSeparatedValue(self) -> str: ...
    @property
    def StringFormat(self) -> str: ...
    @property
    def Serializable(self) -> str: ...
    @overload
    @staticmethod
    def GetFormat(format_: str) -> Format: ...
    @overload
    @staticmethod
    def GetFormat(id_: int) -> Format: ...

class DataGridView(Control):
    """    """
    def __init__(self): ...
    @overload
    def AdjustColumnHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, isFirstDisplayedColumn: bool, isLastVisibleColumn: bool) -> DataGridViewAdvancedBorderStyle: ...
    @overload
    def AreAllCellsSelected(self, includeInvisibleCells: bool) -> bool: ...
    @overload
    def AutoResizeColumn(self, columnIndex: int) -> None: ...
    @overload
    def AutoResizeColumn(self, columnIndex: int, autoSizeColumnMode: DataGridViewAutoSizeColumnMode) -> None: ...
    @overload
    def AutoResizeColumnHeadersHeight() -> None: ...
    @overload
    def AutoResizeColumnHeadersHeight(self, columnIndex: int) -> None: ...
    @overload
    def AutoResizeColumns() -> None: ...
    @overload
    def AutoResizeColumns(self, autoSizeColumnsMode: DataGridViewAutoSizeColumnsMode) -> None: ...
    @overload
    def AutoResizeRow(self, rowIndex: int) -> None: ...
    @overload
    def AutoResizeRow(self, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode) -> None: ...
    @overload
    def AutoResizeRowHeadersWidth(self, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode) -> None: ...
    @overload
    def AutoResizeRowHeadersWidth(self, rowIndex: int, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode) -> None: ...
    @overload
    def AutoResizeRows() -> None: ...
    @overload
    def AutoResizeRows(self, autoSizeRowsMode: DataGridViewAutoSizeRowsMode) -> None: ...
    @overload
    def BeginEdit(self, selectAll: bool) -> bool: ...
    @overload
    def CancelEdit() -> bool: ...
    @overload
    def ClearSelection() -> None: ...
    @overload
    def CommitEdit(self, context: DataGridViewDataErrorContexts) -> bool: ...
    @overload
    def DisplayedColumnCount(self, includePartialColumns: bool) -> int: ...
    @overload
    def DisplayedRowCount(self, includePartialRow: bool) -> int: ...
    @overload
    def EndEdit() -> bool: ...
    @overload
    def EndEdit(self, context: DataGridViewDataErrorContexts) -> bool: ...
    @property
    def AdjustedTopLeftHeaderBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedCellBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedColumnHeadersBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedRowHeadersBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AllowUserToAddRows(self) -> bool: ...
    @property
    def AllowUserToDeleteRows(self) -> bool: ...
    @property
    def AllowUserToOrderColumns(self) -> bool: ...
    @property
    def AllowUserToResizeColumns(self) -> bool: ...
    @property
    def AllowUserToResizeRows(self) -> bool: ...
    @property
    def AlternatingRowsDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def AutoGenerateColumns(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeColumnsMode(self) -> DataGridViewAutoSizeColumnsMode: ...
    @property
    def AutoSizeRowsMode(self) -> DataGridViewAutoSizeRowsMode: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CellBorderStyle(self) -> DataGridViewCellBorderStyle: ...
    @property
    def ClipboardCopyMode(self) -> DataGridViewClipboardCopyMode: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnHeadersBorderStyle(self) -> DataGridViewHeaderBorderStyle: ...
    @property
    def ColumnHeadersDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ColumnHeadersHeight(self) -> int: ...
    @property
    def ColumnHeadersHeightSizeMode(self) -> DataGridViewColumnHeadersHeightSizeMode: ...
    @property
    def ColumnHeadersVisible(self) -> bool: ...
    @property
    def Columns(self) -> DataGridViewColumnCollection: ...
    @property
    def CurrentCell(self) -> DataGridViewCell: ...
    @property
    def CurrentCellAddress(self) -> Drawing.Point: ...
    @property
    def CurrentRow(self) -> DataGridViewRow: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def EditingControl(self) -> Control: ...
    @property
    def EditingPanel(self) -> Panel: ...
    @property
    def EditMode(self) -> DataGridViewEditMode: ...
    @property
    def EnableHeadersVisualStyles(self) -> bool: ...
    @property
    def FirstDisplayedCell(self) -> DataGridViewCell: ...
    @property
    def FirstDisplayedScrollingColumnHiddenWidth(self) -> int: ...
    @property
    def FirstDisplayedScrollingColumnIndex(self) -> int: ...
    @property
    def FirstDisplayedScrollingRowIndex(self) -> int: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def GridColor(self) -> Drawing.Color: ...
    @property
    def HorizontalScrollingOffset(self) -> int: ...
    @property
    def IsCurrentCellDirty(self) -> bool: ...
    @property
    def IsCurrentCellInEditMode(self) -> bool: ...
    @property
    def IsCurrentRowDirty(self) -> bool: ...
    @property
    def Item(self) -> DataGridViewCell: ...
    @property
    def Item(self) -> DataGridViewCell: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def NewRowIndex(self) -> int: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowHeadersBorderStyle(self) -> DataGridViewHeaderBorderStyle: ...
    @property
    def RowHeadersDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def RowHeadersVisible(self) -> bool: ...
    @property
    def RowHeadersWidth(self) -> int: ...
    @property
    def RowHeadersWidthSizeMode(self) -> DataGridViewRowHeadersWidthSizeMode: ...
    @property
    def Rows(self) -> DataGridViewRowCollection: ...
    @property
    def RowsDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def RowTemplate(self) -> DataGridViewRow: ...
    @property
    def ScrollBars(self) -> ScrollBars: ...
    @property
    def SelectedCells(self) -> DataGridViewSelectedCellCollection: ...
    @property
    def SelectedColumns(self) -> DataGridViewSelectedColumnCollection: ...
    @property
    def SelectedRows(self) -> DataGridViewSelectedRowCollection: ...
    @property
    def SelectionMode(self) -> DataGridViewSelectionMode: ...
    @property
    def ShowCellErrors(self) -> bool: ...
    @property
    def ShowCellToolTips(self) -> bool: ...
    @property
    def ShowEditingIcon(self) -> bool: ...
    @property
    def ShowRowErrors(self) -> bool: ...
    @property
    def SortedColumn(self) -> DataGridViewColumn: ...
    @property
    def SortOrder(self) -> SortOrder: ...
    @property
    def StandardTab(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopLeftHeaderCell(self) -> DataGridViewHeaderCell: ...
    @property
    def UserSetCursor(self) -> Cursor: ...
    @property
    def VerticalScrollingOffset(self) -> int: ...
    @property
    def VirtualMode(self) -> bool: ...
    @overload
    def GetCellCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetCellDisplayRectangle(self, columnIndex: int, rowIndex: int, cutOverflow: bool) -> Drawing.Rectangle: ...
    @overload
    def GetClipboardContent() -> DataObject: ...
    @overload
    def GetColumnDisplayRectangle(self, columnIndex: int, cutOverflow: bool) -> Drawing.Rectangle: ...
    @overload
    def GetRowDisplayRectangle(self, rowIndex: int, cutOverflow: bool) -> Drawing.Rectangle: ...
    @overload
    def HitTest(self, x: int, y: int) -> HitTestInfo: ...
    @overload
    def InvalidateCell(self, dataGridViewCell: DataGridViewCell) -> None: ...
    @overload
    def InvalidateCell(self, columnIndex: int, rowIndex: int) -> None: ...
    @overload
    def InvalidateColumn(self, columnIndex: int) -> None: ...
    @overload
    def InvalidateRow(self, rowIndex: int) -> None: ...
    @overload
    def NotifyCurrentCellDirty(self, dirty: bool) -> None: ...
    @overload
    def RefreshEdit() -> bool: ...
    @overload
    def ResetText() -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AllowUserToAddRows.setter
    def AllowUserToAddRows(self, value: System.Void): ...
    @AllowUserToDeleteRows.setter
    def AllowUserToDeleteRows(self, value: System.Void): ...
    @AllowUserToOrderColumns.setter
    def AllowUserToOrderColumns(self, value: System.Void): ...
    @AllowUserToResizeColumns.setter
    def AllowUserToResizeColumns(self, value: System.Void): ...
    @AllowUserToResizeRows.setter
    def AllowUserToResizeRows(self, value: System.Void): ...
    @AlternatingRowsDefaultCellStyle.setter
    def AlternatingRowsDefaultCellStyle(self, value: System.Void): ...
    @AutoGenerateColumns.setter
    def AutoGenerateColumns(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeColumnsMode.setter
    def AutoSizeColumnsMode(self, value: System.Void): ...
    @AutoSizeRowsMode.setter
    def AutoSizeRowsMode(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CellBorderStyle.setter
    def CellBorderStyle(self, value: System.Void): ...
    @ClipboardCopyMode.setter
    def ClipboardCopyMode(self, value: System.Void): ...
    @ColumnCount.setter
    def ColumnCount(self, value: System.Void): ...
    @ColumnHeadersBorderStyle.setter
    def ColumnHeadersBorderStyle(self, value: System.Void): ...
    @ColumnHeadersDefaultCellStyle.setter
    def ColumnHeadersDefaultCellStyle(self, value: System.Void): ...
    @ColumnHeadersHeight.setter
    def ColumnHeadersHeight(self, value: System.Void): ...
    @ColumnHeadersHeightSizeMode.setter
    def ColumnHeadersHeightSizeMode(self, value: System.Void): ...
    @ColumnHeadersVisible.setter
    def ColumnHeadersVisible(self, value: System.Void): ...
    @CurrentCell.setter
    def CurrentCell(self, value: System.Void): ...
    @DataMember.setter
    def DataMember(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @EditMode.setter
    def EditMode(self, value: System.Void): ...
    @EnableHeadersVisualStyles.setter
    def EnableHeadersVisualStyles(self, value: System.Void): ...
    @FirstDisplayedCell.setter
    def FirstDisplayedCell(self, value: System.Void): ...
    @FirstDisplayedScrollingColumnIndex.setter
    def FirstDisplayedScrollingColumnIndex(self, value: System.Void): ...
    @FirstDisplayedScrollingRowIndex.setter
    def FirstDisplayedScrollingRowIndex(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @GridColor.setter
    def GridColor(self, value: System.Void): ...
    @HorizontalScrollingOffset.setter
    def HorizontalScrollingOffset(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @MultiSelect.setter
    def MultiSelect(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @RowCount.setter
    def RowCount(self, value: System.Void): ...
    @RowHeadersBorderStyle.setter
    def RowHeadersBorderStyle(self, value: System.Void): ...
    @RowHeadersDefaultCellStyle.setter
    def RowHeadersDefaultCellStyle(self, value: System.Void): ...
    @RowHeadersVisible.setter
    def RowHeadersVisible(self, value: System.Void): ...
    @RowHeadersWidth.setter
    def RowHeadersWidth(self, value: System.Void): ...
    @RowHeadersWidthSizeMode.setter
    def RowHeadersWidthSizeMode(self, value: System.Void): ...
    @RowsDefaultCellStyle.setter
    def RowsDefaultCellStyle(self, value: System.Void): ...
    @RowTemplate.setter
    def RowTemplate(self, value: System.Void): ...
    @ScrollBars.setter
    def ScrollBars(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @ShowCellErrors.setter
    def ShowCellErrors(self, value: System.Void): ...
    @ShowCellToolTips.setter
    def ShowCellToolTips(self, value: System.Void): ...
    @ShowEditingIcon.setter
    def ShowEditingIcon(self, value: System.Void): ...
    @ShowRowErrors.setter
    def ShowRowErrors(self, value: System.Void): ...
    @StandardTab.setter
    def StandardTab(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TopLeftHeaderCell.setter
    def TopLeftHeaderCell(self, value: System.Void): ...
    @VirtualMode.setter
    def VirtualMode(self, value: System.Void): ...
    @overload
    def Sort(self, comparer: Collections.IComparer) -> None: ...
    @overload
    def Sort(self, dataGridViewColumn: DataGridViewColumn, direction: ComponentModel.ListSortDirection) -> None: ...
    @overload
    def UpdateCellErrorText(self, columnIndex: int, rowIndex: int) -> None: ...
    @overload
    def UpdateCellValue(self, columnIndex: int, rowIndex: int) -> None: ...
    @overload
    def UpdateRowErrorText(self, rowIndex: int) -> None: ...
    @overload
    def UpdateRowErrorText(self, rowIndexStart: int, rowIndexEnd: int) -> None: ...
    @overload
    def UpdateRowHeightInfo(self, rowIndex: int, updateToEnd: bool) -> None: ...
    @property
    def AllowUserToAddRowsChanged(self): ...
    @property
    def AllowUserToDeleteRowsChanged(self): ...
    @property
    def AllowUserToOrderColumnsChanged(self): ...
    @property
    def AllowUserToResizeColumnsChanged(self): ...
    @property
    def AllowUserToResizeRowsChanged(self): ...
    @property
    def AlternatingRowsDefaultCellStyleChanged(self): ...
    @property
    def AutoGenerateColumnsChanged(self): ...
    @property
    def AutoSizeColumnsModeChanged(self): ...
    @property
    def AutoSizeRowsModeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def CellBorderStyleChanged(self): ...
    @property
    def ColumnHeadersBorderStyleChanged(self): ...
    @property
    def ColumnHeadersDefaultCellStyleChanged(self): ...
    @property
    def ColumnHeadersHeightChanged(self): ...
    @property
    def ColumnHeadersHeightSizeModeChanged(self): ...
    @property
    def DataMemberChanged(self): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DefaultCellStyleChanged(self): ...
    @property
    def EditModeChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def GridColorChanged(self): ...
    @property
    def MultiSelectChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def RowHeadersBorderStyleChanged(self): ...
    @property
    def RowHeadersDefaultCellStyleChanged(self): ...
    @property
    def RowHeadersWidthChanged(self): ...
    @property
    def RowHeadersWidthSizeModeChanged(self): ...
    @property
    def RowsDefaultCellStyleChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def AutoSizeColumnModeChanged(self): ...
    @property
    def CancelRowEdit(self): ...
    @property
    def CellBeginEdit(self): ...
    @property
    def CellClick(self): ...
    @property
    def CellContentClick(self): ...
    @property
    def CellContentDoubleClick(self): ...
    @property
    def CellContextMenuStripChanged(self): ...
    @property
    def CellContextMenuStripNeeded(self): ...
    @property
    def CellDoubleClick(self): ...
    @property
    def CellEndEdit(self): ...
    @property
    def CellEnter(self): ...
    @property
    def CellErrorTextChanged(self): ...
    @property
    def CellErrorTextNeeded(self): ...
    @property
    def CellFormatting(self): ...
    @property
    def CellLeave(self): ...
    @property
    def CellMouseClick(self): ...
    @property
    def CellMouseDoubleClick(self): ...
    @property
    def CellMouseDown(self): ...
    @property
    def CellMouseEnter(self): ...
    @property
    def CellMouseLeave(self): ...
    @property
    def CellMouseMove(self): ...
    @property
    def CellMouseUp(self): ...
    @property
    def CellPainting(self): ...
    @property
    def CellParsing(self): ...
    @property
    def CellStateChanged(self): ...
    @property
    def CellStyleChanged(self): ...
    @property
    def CellStyleContentChanged(self): ...
    @property
    def CellToolTipTextChanged(self): ...
    @property
    def CellToolTipTextNeeded(self): ...
    @property
    def CellValidated(self): ...
    @property
    def CellValidating(self): ...
    @property
    def CellValueChanged(self): ...
    @property
    def CellValueNeeded(self): ...
    @property
    def CellValuePushed(self): ...
    @property
    def ColumnAdded(self): ...
    @property
    def ColumnContextMenuStripChanged(self): ...
    @property
    def ColumnDataPropertyNameChanged(self): ...
    @property
    def ColumnDefaultCellStyleChanged(self): ...
    @property
    def ColumnDisplayIndexChanged(self): ...
    @property
    def ColumnDividerDoubleClick(self): ...
    @property
    def ColumnDividerWidthChanged(self): ...
    @property
    def ColumnHeaderMouseClick(self): ...
    @property
    def ColumnHeaderMouseDoubleClick(self): ...
    @property
    def ColumnHeaderCellChanged(self): ...
    @property
    def ColumnMinimumWidthChanged(self): ...
    @property
    def ColumnNameChanged(self): ...
    @property
    def ColumnRemoved(self): ...
    @property
    def ColumnSortModeChanged(self): ...
    @property
    def ColumnStateChanged(self): ...
    @property
    def ColumnToolTipTextChanged(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def CurrentCellChanged(self): ...
    @property
    def CurrentCellDirtyStateChanged(self): ...
    @property
    def DataBindingComplete(self): ...
    @property
    def DataError(self): ...
    @property
    def DefaultValuesNeeded(self): ...
    @property
    def EditingControlShowing(self): ...
    @property
    def NewRowNeeded(self): ...
    @property
    def RowContextMenuStripChanged(self): ...
    @property
    def RowContextMenuStripNeeded(self): ...
    @property
    def RowDefaultCellStyleChanged(self): ...
    @property
    def RowDirtyStateNeeded(self): ...
    @property
    def RowDividerDoubleClick(self): ...
    @property
    def RowDividerHeightChanged(self): ...
    @property
    def RowEnter(self): ...
    @property
    def RowErrorTextChanged(self): ...
    @property
    def RowErrorTextNeeded(self): ...
    @property
    def RowHeaderMouseClick(self): ...
    @property
    def RowHeaderMouseDoubleClick(self): ...
    @property
    def RowHeaderCellChanged(self): ...
    @property
    def RowHeightChanged(self): ...
    @property
    def RowHeightInfoNeeded(self): ...
    @property
    def RowHeightInfoPushed(self): ...
    @property
    def RowLeave(self): ...
    @property
    def RowMinimumHeightChanged(self): ...
    @property
    def RowPostPaint(self): ...
    @property
    def RowPrePaint(self): ...
    @property
    def RowsAdded(self): ...
    @property
    def RowsRemoved(self): ...
    @property
    def RowStateChanged(self): ...
    @property
    def RowUnshared(self): ...
    @property
    def RowValidated(self): ...
    @property
    def RowValidating(self): ...
    @property
    def Scroll(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def SortCompare(self): ...
    @property
    def Sorted(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def UserAddedRow(self): ...
    @property
    def UserDeletedRow(self): ...
    @property
    def UserDeletingRow(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class DataGridViewAdvancedBorderStyle(object):
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def All(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Bottom(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Left(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Right(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Top(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @overload
    def GetHashCode() -> int: ...
    @All.setter
    def All(self, value: System.Void): ...
    @Bottom.setter
    def Bottom(self, value: System.Void): ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Right.setter
    def Right(self, value: System.Void): ...
    @Top.setter
    def Top(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewAdvancedCellBorderStyle(enum.Enum):
    NotSet = 0
    None_ = 1
    Single = 2
    Inset = 3
    InsetDouble = 4
    Outset = 5
    OutsetDouble = 6
    OutsetPartial = 7

class DataGridViewAutoSizeColumnMode(enum.Enum):
    NotSet = 0
    None_ = 1
    ColumnHeader = 2
    AllCellsExceptHeader = 4
    AllCells = 6
    DisplayedCellsExceptHeader = 8
    DisplayedCells = 10
    Fill = 16

class DataGridViewAutoSizeColumnModeEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewColumn: DataGridViewColumn, previousMode: DataGridViewAutoSizeColumnMode): ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def PreviousMode(self) -> DataGridViewAutoSizeColumnMode: ...

class DataGridViewAutoSizeColumnsMode(enum.Enum):
    None_ = 1
    ColumnHeader = 2
    AllCellsExceptHeader = 4
    AllCells = 6
    DisplayedCellsExceptHeader = 8
    DisplayedCells = 10
    Fill = 16

class DataGridViewAutoSizeColumnsModeEventArgs(System.EventArgs):
    """    """
    def __init__(self, previousModes: System.Array[DataGridViewAutoSizeColumnMode]): ...
    @property
    def PreviousModes(self) -> System.Array[DataGridViewAutoSizeColumnMode]: ...

class DataGridViewAutoSizeModeEventArgs(System.EventArgs):
    """    """
    def __init__(self, previousModeAutoSized: bool): ...
    @property
    def PreviousModeAutoSized(self) -> bool: ...

class DataGridViewAutoSizeRowMode(enum.Enum):
    RowHeader = 1
    AllCellsExceptHeader = 2
    AllCells = 3

class DataGridViewAutoSizeRowsMode(enum.Enum):
    None_ = 0
    AllHeaders = 5
    AllCellsExceptHeaders = 6
    AllCells = 7
    DisplayedHeaders = 9
    DisplayedCellsExceptHeaders = 10
    DisplayedCells = 11

class DataGridViewBand(DataGridViewElement):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DefaultHeaderCellType(self) -> System.Type: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HasDefaultCellStyle(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Visible(self) -> bool: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @DefaultHeaderCellType.setter
    def DefaultHeaderCellType(self, value: System.Void): ...
    @Frozen.setter
    def Frozen(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewBindingCompleteEventArgs(System.EventArgs):
    """    """
    def __init__(self, listChangedType: ComponentModel.ListChangedType): ...
    @property
    def ListChangedType(self) -> ComponentModel.ListChangedType: ...

class DataGridViewButtonCell(DataGridViewCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def UseColumnTextForButtonValue(self) -> bool: ...
    @property
    def ValueType(self) -> System.Type: ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @UseColumnTextForButtonValue.setter
    def UseColumnTextForButtonValue(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewButtonColumn(DataGridViewColumn):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseColumnTextForButtonValue(self) -> bool: ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @UseColumnTextForButtonValue.setter
    def UseColumnTextForButtonValue(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewCell(DataGridViewElement):
    """    """
    @overload
    def AdjustCellBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> DataGridViewAdvancedBorderStyle: ...
    @overload
    def Clone() -> object: ...
    @overload
    def DetachEditingControl() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ContentBounds(self) -> Drawing.Rectangle: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultNewRowValue(self) -> object: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def EditedFormattedValue(self) -> object: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def ErrorIconBounds(self) -> Drawing.Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def FormattedValue(self) -> object: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HasStyle(self) -> bool: ...
    @property
    def InheritedState(self) -> DataGridViewElementStates: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsInEditMode(self) -> bool: ...
    @property
    def OwningColumn(self) -> DataGridViewColumn: ...
    @property
    def OwningRow(self) -> DataGridViewRow: ...
    @property
    def PreferredSize(self) -> Drawing.Size: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Style(self) -> DataGridViewCellStyle: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def Value(self) -> object: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetContentBounds(self, rowIndex: int) -> Drawing.Rectangle: ...
    @overload
    def GetEditedFormattedValue(self, rowIndex: int, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    @overload
    def GetInheritedState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @overload
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    @overload
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    @overload
    @staticmethod
    def MeasureTextHeight(graphics: Drawing.Graphics, text: str, font: Drawing.Font, maxWidth: int, flags: TextFormatFlags) -> int: ...
    @overload
    @staticmethod
    def MeasureTextHeight(graphics: Drawing.Graphics, text: str, font: Drawing.Font, maxWidth: int, flags: TextFormatFlags) -> (int, bool): ...
    @overload
    @staticmethod
    def MeasureTextPreferredSize(graphics: Drawing.Graphics, text: str, font: Drawing.Font, maxRatio: System.Single, flags: TextFormatFlags) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureTextSize(graphics: Drawing.Graphics, text: str, font: Drawing.Font, flags: TextFormatFlags) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureTextWidth(graphics: Drawing.Graphics, text: str, font: Drawing.Font, maxHeight: int, flags: TextFormatFlags) -> int: ...
    @overload
    def ParseFormattedValue(self, formattedValue: object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: ComponentModel.TypeConverter, valueTypeConverter: ComponentModel.TypeConverter) -> object: ...
    @overload
    def PositionEditingControl(self, setLocation: bool, setSize: bool, cellBounds: Drawing.Rectangle, cellClip: Drawing.Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> None: ...
    @overload
    def PositionEditingPanel(self, cellBounds: Drawing.Rectangle, cellClip: Drawing.Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> Drawing.Rectangle: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @ErrorText.setter
    def ErrorText(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @ValueType.setter
    def ValueType(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewCellBorderStyle(enum.Enum):
    Custom = 0
    Single = 1
    Raised = 2
    Sunken = 3
    None_ = 4
    SingleVertical = 5
    RaisedVertical = 6
    SunkenVertical = 7
    SingleHorizontal = 8
    RaisedHorizontal = 9
    SunkenHorizontal = 10

class DataGridViewCellCancelEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewCellCollection(BaseCollection):
    """    """
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    @overload
    def Add(self, dataGridViewCell: DataGridViewCell) -> int: ...
    @overload
    def AddRange(self, dataGridViewCells: System.Array[DataGridViewCell]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewCell: DataGridViewCell) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewCell], index: int) -> None: ...
    @property
    def Item(self) -> DataGridViewCell: ...
    @property
    def Item(self) -> DataGridViewCell: ...
    @overload
    def IndexOf(self, dataGridViewCell: DataGridViewCell) -> int: ...
    @overload
    def Insert(self, index: int, dataGridViewCell: DataGridViewCell) -> None: ...
    @overload
    def Remove(self, cell: DataGridViewCell) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @property
    def CollectionChanged(self): ...

class DataGridViewCellContextMenuStripNeededEventArgs(DataGridViewCellEventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...

class DataGridViewCellErrorTextNeededEventArgs(DataGridViewCellEventArgs):
    """    """
    @property
    def ErrorText(self) -> str: ...
    @ErrorText.setter
    def ErrorText(self, value: System.Void): ...

class DataGridViewCellEventArgs(System.EventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewCellFormattingEventArgs(ConvertEventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int, value: object, desiredType: System.Type, cellStyle: DataGridViewCellStyle): ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def FormattingApplied(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @CellStyle.setter
    def CellStyle(self, value: System.Void): ...
    @FormattingApplied.setter
    def FormattingApplied(self, value: System.Void): ...

class DataGridViewCellMouseEventArgs(MouseEventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int, localX: int, localY: int, e: MouseEventArgs): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewCellPaintingEventArgs(ComponentModel.HandledEventArgs):
    """    """
    def __init__(self, dataGridView: DataGridView, graphics: Drawing.Graphics, clipBounds: Drawing.Rectangle, cellBounds: Drawing.Rectangle, rowIndex: int, columnIndex: int, cellState: DataGridViewElementStates, value: object, formattedValue: object, errorText: str, cellStyle: DataGridViewCellStyle, advancedBorderStyle: DataGridViewAdvancedBorderStyle, paintParts: DataGridViewPaintParts): ...
    @property
    def AdvancedBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def CellBounds(self) -> Drawing.Rectangle: ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ClipBounds(self) -> Drawing.Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def FormattedValue(self) -> object: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def PaintParts(self) -> DataGridViewPaintParts: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @property
    def Value(self) -> object: ...
    @overload
    def Paint(self, clipBounds: Drawing.Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    @overload
    def PaintBackground(self, clipBounds: Drawing.Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @overload
    def PaintContent(self, clipBounds: Drawing.Rectangle) -> None: ...

class DataGridViewCellParsingEventArgs(ConvertEventArgs):
    """    """
    def __init__(self, rowIndex: int, columnIndex: int, value: object, desiredType: System.Type, inheritedCellStyle: DataGridViewCellStyle): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def InheritedCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ParsingApplied(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @InheritedCellStyle.setter
    def InheritedCellStyle(self, value: System.Void): ...
    @ParsingApplied.setter
    def ParsingApplied(self, value: System.Void): ...

class DataGridViewCellStateChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewCell: DataGridViewCell, stateChanged: DataGridViewElementStates): ...
    @property
    def Cell(self) -> DataGridViewCell: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...

class DataGridViewCellStyle(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataGridViewCellStyle: DataGridViewCellStyle): ...
    @overload
    def ApplyStyle(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def Clone() -> DataGridViewCellStyle: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Alignment(self) -> DataGridViewContentAlignment: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def DataSourceNullValue(self) -> object: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Format(self) -> str: ...
    @property
    def FormatProvider(self) -> System.IFormatProvider: ...
    @property
    def IsDataSourceNullValueDefault(self) -> bool: ...
    @property
    def IsFormatProviderDefault(self) -> bool: ...
    @property
    def IsNullValueDefault(self) -> bool: ...
    @property
    def NullValue(self) -> object: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectionBackColor(self) -> Drawing.Color: ...
    @property
    def SelectionForeColor(self) -> Drawing.Color: ...
    @property
    def Tag(self) -> object: ...
    @property
    def WrapMode(self) -> DataGridViewTriState: ...
    @overload
    def GetHashCode() -> int: ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @DataSourceNullValue.setter
    def DataSourceNullValue(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Format.setter
    def Format(self, value: System.Void): ...
    @FormatProvider.setter
    def FormatProvider(self, value: System.Void): ...
    @NullValue.setter
    def NullValue(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @SelectionBackColor.setter
    def SelectionBackColor(self, value: System.Void): ...
    @SelectionForeColor.setter
    def SelectionForeColor(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @WrapMode.setter
    def WrapMode(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewCellStyleContentChangedEventArgs(System.EventArgs):
    """    """
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def CellStyleScope(self) -> DataGridViewCellStyleScopes: ...

class DataGridViewCellStyleConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class DataGridViewCellStyleScopes(enum.Enum):
    None_ = 0
    Cell = 1
    Column = 2
    Row = 4
    DataGridView = 8
    ColumnHeaders = 16
    RowHeaders = 32
    Rows = 64
    AlternatingRows = 128

class DataGridViewCellToolTipTextNeededEventArgs(DataGridViewCellEventArgs):
    """    """
    @property
    def ToolTipText(self) -> str: ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...

class DataGridViewCellValidatingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def FormattedValue(self) -> object: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewCellValueEventArgs(System.EventArgs):
    """    """
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Value(self) -> object: ...
    @Value.setter
    def Value(self, value: System.Void): ...

class DataGridViewCheckBoxCell(DataGridViewCell):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, threeState: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def EditingCellFormattedValue(self) -> object: ...
    @property
    def EditingCellValueChanged(self) -> bool: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def FalseValue(self) -> object: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def IndeterminateValue(self) -> object: ...
    @property
    def ThreeState(self) -> bool: ...
    @property
    def TrueValue(self) -> object: ...
    @property
    def ValueType(self) -> System.Type: ...
    @overload
    def GetEditingCellFormattedValue(self, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def ParseFormattedValue(self, formattedValue: object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: ComponentModel.TypeConverter, valueTypeConverter: ComponentModel.TypeConverter) -> object: ...
    @overload
    def PrepareEditingCellForEdit(self, selectAll: bool) -> None: ...
    @EditingCellFormattedValue.setter
    def EditingCellFormattedValue(self, value: System.Void): ...
    @EditingCellValueChanged.setter
    def EditingCellValueChanged(self, value: System.Void): ...
    @FalseValue.setter
    def FalseValue(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @IndeterminateValue.setter
    def IndeterminateValue(self, value: System.Void): ...
    @ThreeState.setter
    def ThreeState(self, value: System.Void): ...
    @TrueValue.setter
    def TrueValue(self, value: System.Void): ...
    @ValueType.setter
    def ValueType(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewCheckBoxColumn(DataGridViewColumn):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, threeState: bool): ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def FalseValue(self) -> object: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def IndeterminateValue(self) -> object: ...
    @property
    def ThreeState(self) -> bool: ...
    @property
    def TrueValue(self) -> object: ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @FalseValue.setter
    def FalseValue(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @IndeterminateValue.setter
    def IndeterminateValue(self, value: System.Void): ...
    @ThreeState.setter
    def ThreeState(self, value: System.Void): ...
    @TrueValue.setter
    def TrueValue(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewClipboardCopyMode(enum.Enum):
    Disable = 0
    EnableWithAutoHeaderText = 1
    EnableWithoutHeaderText = 2
    EnableAlwaysIncludeHeaderText = 3

class DataGridViewColumn(DataGridViewBand):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cellTemplate: DataGridViewCell): ...
    @overload
    def Clone() -> object: ...
    @property
    def AutoSizeMode(self) -> DataGridViewAutoSizeColumnMode: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def CellType(self) -> System.Type: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DataPropertyName(self) -> str: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def DividerWidth(self) -> int: ...
    @property
    def FillWeight(self) -> System.Single: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HeaderCell(self) -> DataGridViewColumnHeaderCell: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def InheritedAutoSizeMode(self) -> DataGridViewAutoSizeColumnMode: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsDataBound(self) -> bool: ...
    @property
    def MinimumWidth(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def SortMode(self) -> DataGridViewColumnSortMode: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetPreferredWidth(self, autoSizeColumnMode: DataGridViewAutoSizeColumnMode, fixedHeight: bool) -> int: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @DataPropertyName.setter
    def DataPropertyName(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: System.Void): ...
    @DividerWidth.setter
    def DividerWidth(self, value: System.Void): ...
    @FillWeight.setter
    def FillWeight(self, value: System.Void): ...
    @Frozen.setter
    def Frozen(self, value: System.Void): ...
    @HeaderCell.setter
    def HeaderCell(self, value: System.Void): ...
    @HeaderText.setter
    def HeaderText(self, value: System.Void): ...
    @MinimumWidth.setter
    def MinimumWidth(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @SortMode.setter
    def SortMode(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @ValueType.setter
    def ValueType(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewColumnCollection(BaseCollection):
    """    """
    def __init__(self, dataGridView: DataGridView): ...
    @overload
    def Add(self, dataGridViewColumn: DataGridViewColumn) -> int: ...
    @overload
    def Add(self, columnName: str, headerText: str) -> int: ...
    @overload
    def AddRange(self, dataGridViewColumns: System.Array[DataGridViewColumn]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewColumn: DataGridViewColumn) -> bool: ...
    @overload
    def Contains(self, columnName: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewColumn], index: int) -> None: ...
    @property
    def Item(self) -> DataGridViewColumn: ...
    @property
    def Item(self) -> DataGridViewColumn: ...
    @overload
    def GetColumnCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetColumnsWidth(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetFirstColumn(self, includeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def GetFirstColumn(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def GetLastColumn(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def GetNextColumn(self, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def GetPreviousColumn(self, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def IndexOf(self, dataGridViewColumn: DataGridViewColumn) -> int: ...
    @overload
    def Insert(self, columnIndex: int, dataGridViewColumn: DataGridViewColumn) -> None: ...
    @overload
    def Remove(self, dataGridViewColumn: DataGridViewColumn) -> None: ...
    @overload
    def Remove(self, columnName: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @property
    def CollectionChanged(self): ...

class DataGridViewColumnDesignTimeVisibleAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, visible: bool): ...
    @property
    def Yes(self) -> DataGridViewColumnDesignTimeVisibleAttribute: ...
    @property
    def No(self) -> DataGridViewColumnDesignTimeVisibleAttribute: ...
    @property
    def Default(self) -> DataGridViewColumnDesignTimeVisibleAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DataGridViewColumnDividerDoubleClickEventArgs(HandledMouseEventArgs):
    """    """
    def __init__(self, columnIndex: int, e: HandledMouseEventArgs): ...
    @property
    def ColumnIndex(self) -> int: ...

class DataGridViewColumnEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewColumn: DataGridViewColumn): ...
    @property
    def Column(self) -> DataGridViewColumn: ...

class DataGridViewColumnHeaderCell(DataGridViewHeaderCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def SortGlyphDirection(self) -> SortOrder: ...
    @overload
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    @overload
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    @SortGlyphDirection.setter
    def SortGlyphDirection(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewColumnHeadersHeightSizeMode(enum.Enum):
    EnableResizing = 0
    DisableResizing = 1
    AutoSize = 2

class DataGridViewColumnSortMode(enum.Enum):
    NotSortable = 0
    Automatic = 1
    Programmatic = 2

class DataGridViewColumnStateChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewColumn: DataGridViewColumn, stateChanged: DataGridViewElementStates): ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...

class DataGridViewComboBoxCell(DataGridViewCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @overload
    def DetachEditingControl() -> None: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DisplayStyle(self) -> DataGridViewComboBoxDisplayStyle: ...
    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    @property
    def ValueType(self) -> System.Type: ...
    @overload
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    @overload
    def ParseFormattedValue(self, formattedValue: object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: ComponentModel.TypeConverter, valueTypeConverter: ComponentModel.TypeConverter) -> object: ...
    @AutoComplete.setter
    def AutoComplete(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DisplayMember.setter
    def DisplayMember(self, value: System.Void): ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: System.Void): ...
    @DisplayStyleForCurrentCellOnly.setter
    def DisplayStyleForCurrentCellOnly(self, value: System.Void): ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @ValueMember.setter
    def ValueMember(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewComboBoxColumn(DataGridViewColumn):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DisplayStyle(self) -> DataGridViewComboBoxDisplayStyle: ...
    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    @AutoComplete.setter
    def AutoComplete(self, value: System.Void): ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DisplayMember.setter
    def DisplayMember(self, value: System.Void): ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: System.Void): ...
    @DisplayStyleForCurrentCellOnly.setter
    def DisplayStyleForCurrentCellOnly(self, value: System.Void): ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @ValueMember.setter
    def ValueMember(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewComboBoxDisplayStyle(enum.Enum):
    ComboBox = 0
    DropDownButton = 1
    Nothing = 2

class DataGridViewComboBoxEditingControl(ComboBox):
    """    """
    def __init__(self): ...
    @overload
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    @overload
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: System.Void): ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: System.Void): ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: System.Void): ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: System.Void): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DrawItem(self): ...
    @property
    def DropDown(self): ...
    @property
    def MeasureItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def SelectionChangeCommitted(self): ...
    @property
    def DropDownStyleChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def TextUpdate(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DisplayMemberChanged(self): ...
    @property
    def Format(self): ...
    @property
    def FormatInfoChanged(self): ...
    @property
    def FormatStringChanged(self): ...
    @property
    def FormattingEnabledChanged(self): ...
    @property
    def ValueMemberChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class DataGridViewContentAlignment(enum.Enum):
    NotSet = 0
    TopLeft = 1
    TopCenter = 2
    TopRight = 4
    MiddleLeft = 16
    MiddleCenter = 32
    MiddleRight = 64
    BottomLeft = 256
    BottomCenter = 512
    BottomRight = 1024

class DataGridViewDataErrorContexts(enum.Enum):
    Formatting = 1
    Display = 2
    PreferredSize = 4
    RowDeletion = 8
    Parsing = 256
    Commit = 512
    InitialValueRestoration = 1024
    LeaveControl = 2048
    CurrentCellChange = 4096
    Scroll = 8192
    ClipboardContent = 16384

class DataGridViewDataErrorEventArgs(DataGridViewCellCancelEventArgs):
    """    """
    def __init__(self, exception: System.Exception, columnIndex: int, rowIndex: int, context: DataGridViewDataErrorContexts): ...
    @property
    def Context(self) -> DataGridViewDataErrorContexts: ...
    @property
    def Exception(self) -> System.Exception: ...
    @property
    def ThrowException(self) -> bool: ...
    @ThrowException.setter
    def ThrowException(self, value: System.Void): ...

class IDataGridViewEditingCell:
    """    """
    @property
    def EditingCellFormattedValue(self) -> object: ...
    @property
    def EditingCellValueChanged(self) -> bool: ...
    @overload
    def GetEditingCellFormattedValue(self, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def PrepareEditingCellForEdit(self, selectAll: bool) -> None: ...
    @EditingCellFormattedValue.setter
    def EditingCellFormattedValue(self, value: System.Void): ...
    @EditingCellValueChanged.setter
    def EditingCellValueChanged(self, value: System.Void): ...

class IDataGridViewEditingControl:
    """    """
    @overload
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    @overload
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: System.Void): ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: System.Void): ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: System.Void): ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: System.Void): ...

class DataGridViewEditingControlShowingEventArgs(System.EventArgs):
    """    """
    def __init__(self, control: Control, cellStyle: DataGridViewCellStyle): ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Control(self) -> Control: ...
    @CellStyle.setter
    def CellStyle(self, value: System.Void): ...

class DataGridViewEditMode(enum.Enum):
    EditOnEnter = 0
    EditOnKeystroke = 1
    EditOnKeystrokeOrF2 = 2
    EditOnF2 = 3
    EditProgrammatically = 4

class DataGridViewElement(object):
    """    """
    def __init__(self): ...
    @property
    def DataGridView(self) -> DataGridView: ...
    @property
    def State(self) -> DataGridViewElementStates: ...

class DataGridViewElementStates(enum.Enum):
    None_ = 0
    Displayed = 1
    Frozen = 2
    ReadOnly = 4
    Resizable = 8
    ResizableSet = 16
    Selected = 32
    Visible = 64

class DataGridViewAutoSizeColumnModeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewAutoSizeColumnModeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewAutoSizeColumnModeEventArgs) -> None: ...

class DataGridViewAutoSizeColumnsModeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewAutoSizeColumnsModeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewAutoSizeColumnsModeEventArgs) -> None: ...

class DataGridViewAutoSizeModeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewAutoSizeModeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewAutoSizeModeEventArgs) -> None: ...

class DataGridViewBindingCompleteEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewBindingCompleteEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewBindingCompleteEventArgs) -> None: ...

class DataGridViewCellCancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellCancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellCancelEventArgs) -> None: ...

class DataGridViewCellContextMenuStripNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellContextMenuStripNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellContextMenuStripNeededEventArgs) -> None: ...

class DataGridViewCellErrorTextNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellErrorTextNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellErrorTextNeededEventArgs) -> None: ...

class DataGridViewCellEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellEventArgs) -> None: ...

class DataGridViewCellFormattingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellFormattingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellFormattingEventArgs) -> None: ...

class DataGridViewCellMouseEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellMouseEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellMouseEventArgs) -> None: ...

class DataGridViewCellPaintingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellPaintingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellPaintingEventArgs) -> None: ...

class DataGridViewCellParsingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellParsingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellParsingEventArgs) -> None: ...

class DataGridViewCellStateChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellStateChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellStateChangedEventArgs) -> None: ...

class DataGridViewCellStyleContentChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellStyleContentChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellStyleContentChangedEventArgs) -> None: ...

class DataGridViewCellToolTipTextNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellToolTipTextNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellToolTipTextNeededEventArgs) -> None: ...

class DataGridViewCellValidatingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellValidatingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellValidatingEventArgs) -> None: ...

class DataGridViewCellValueEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewCellValueEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewCellValueEventArgs) -> None: ...

class DataGridViewColumnDividerDoubleClickEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewColumnDividerDoubleClickEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewColumnDividerDoubleClickEventArgs) -> None: ...

class DataGridViewColumnEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewColumnEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewColumnEventArgs) -> None: ...

class DataGridViewColumnStateChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewColumnStateChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewColumnStateChangedEventArgs) -> None: ...

class DataGridViewEditingControlShowingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewEditingControlShowingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewEditingControlShowingEventArgs) -> None: ...

class DataGridViewDataErrorEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewDataErrorEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewDataErrorEventArgs) -> None: ...

class DataGridViewRowCancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowCancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowCancelEventArgs) -> None: ...

class DataGridViewRowContextMenuStripNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowContextMenuStripNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowContextMenuStripNeededEventArgs) -> None: ...

class DataGridViewRowDividerDoubleClickEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowDividerDoubleClickEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowDividerDoubleClickEventArgs) -> None: ...

class DataGridViewRowEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowEventArgs) -> None: ...

class DataGridViewRowErrorTextNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowErrorTextNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowErrorTextNeededEventArgs) -> None: ...

class DataGridViewRowHeightInfoNeededEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowHeightInfoNeededEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowHeightInfoNeededEventArgs) -> None: ...

class DataGridViewRowHeightInfoPushedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowHeightInfoPushedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowHeightInfoPushedEventArgs) -> None: ...

class DataGridViewRowPostPaintEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowPostPaintEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowPostPaintEventArgs) -> None: ...

class DataGridViewRowPrePaintEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowPrePaintEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowPrePaintEventArgs) -> None: ...

class DataGridViewRowsAddedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowsAddedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowsAddedEventArgs) -> None: ...

class DataGridViewRowsRemovedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowsRemovedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowsRemovedEventArgs) -> None: ...

class DataGridViewRowStateChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewRowStateChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewRowStateChangedEventArgs) -> None: ...

class DataGridViewSortCompareEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataGridViewSortCompareEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataGridViewSortCompareEventArgs) -> None: ...

class DataGridViewHeaderBorderStyle(enum.Enum):
    Custom = 0
    Single = 1
    Raised = 2
    Sunken = 3
    None_ = 4

class DataGridViewHeaderCell(DataGridViewCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    @overload
    def GetInheritedState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @ValueType.setter
    def ValueType(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewHitTestType(enum.Enum):
    None_ = 0
    Cell = 1
    ColumnHeader = 2
    RowHeader = 3
    TopLeftHeader = 4
    HorizontalScrollBar = 5
    VerticalScrollBar = 6

class DataGridViewImageCell(DataGridViewCell):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, valueIsIcon: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def DefaultNewRowValue(self) -> object: ...
    @property
    def Description(self) -> str: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def ImageLayout(self) -> DataGridViewImageCellLayout: ...
    @property
    def ValueIsIcon(self) -> bool: ...
    @property
    def ValueType(self) -> System.Type: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @ImageLayout.setter
    def ImageLayout(self, value: System.Void): ...
    @ValueIsIcon.setter
    def ValueIsIcon(self, value: System.Void): ...
    @ValueType.setter
    def ValueType(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewImageCellLayout(enum.Enum):
    NotSet = 0
    Normal = 1
    Stretch = 2
    Zoom = 3

class DataGridViewImageColumn(DataGridViewColumn):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, valuesAreIcons: bool): ...
    @overload
    def Clone() -> object: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageLayout(self) -> DataGridViewImageCellLayout: ...
    @property
    def ValuesAreIcons(self) -> bool: ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageLayout.setter
    def ImageLayout(self, value: System.Void): ...
    @ValuesAreIcons.setter
    def ValuesAreIcons(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewLinkCell(DataGridViewCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def ActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def EditType(self) -> System.Type: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Drawing.Color: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def TrackVisitedState(self) -> bool: ...
    @property
    def UseColumnTextForLinkValue(self) -> bool: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def VisitedLinkColor(self) -> Drawing.Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: System.Void): ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: System.Void): ...
    @LinkColor.setter
    def LinkColor(self, value: System.Void): ...
    @LinkVisited.setter
    def LinkVisited(self, value: System.Void): ...
    @TrackVisitedState.setter
    def TrackVisitedState(self, value: System.Void): ...
    @UseColumnTextForLinkValue.setter
    def UseColumnTextForLinkValue(self, value: System.Void): ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewLinkColumn(DataGridViewColumn):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @property
    def ActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Drawing.Color: ...
    @property
    def Text(self) -> str: ...
    @property
    def TrackVisitedState(self) -> bool: ...
    @property
    def UseColumnTextForLinkValue(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Drawing.Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: System.Void): ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: System.Void): ...
    @LinkColor.setter
    def LinkColor(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TrackVisitedState.setter
    def TrackVisitedState(self, value: System.Void): ...
    @UseColumnTextForLinkValue.setter
    def UseColumnTextForLinkValue(self, value: System.Void): ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewPaintParts(enum.Enum):
    None_ = 0
    Background = 1
    Border = 2
    ContentBackground = 4
    ContentForeground = 8
    ErrorIcon = 16
    Focus = 32
    SelectionBackground = 64
    All = 127

class DataGridViewRow(DataGridViewBand):
    """    """
    def __init__(self): ...
    @overload
    def AdjustRowHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedRow: bool, isLastVisibleRow: bool) -> DataGridViewAdvancedBorderStyle: ...
    @overload
    def Clone() -> object: ...
    @overload
    def CreateCells(self, dataGridView: DataGridView) -> None: ...
    @overload
    def CreateCells(self, dataGridView: DataGridView, values: System.System.Array[object]) -> None: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def Cells(self) -> DataGridViewCellCollection: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DataBoundItem(self) -> object: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def DividerHeight(self) -> int: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HeaderCell(self) -> DataGridViewRowHeaderCell: ...
    @property
    def Height(self) -> int: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsNewRow(self) -> bool: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    @overload
    def GetErrorText(self, rowIndex: int) -> str: ...
    @overload
    def GetPreferredHeight(self, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode, fixedWidth: bool) -> int: ...
    @overload
    def GetState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: System.Void): ...
    @DividerHeight.setter
    def DividerHeight(self, value: System.Void): ...
    @ErrorText.setter
    def ErrorText(self, value: System.Void): ...
    @Frozen.setter
    def Frozen(self, value: System.Void): ...
    @HeaderCell.setter
    def HeaderCell(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @MinimumHeight.setter
    def MinimumHeight(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Resizable.setter
    def Resizable(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def SetValues(self, values: System.System.Array[object]) -> bool: ...
    @overload
    def ToString() -> str: ...

class DataGridViewRowCancelEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    @property
    def Row(self) -> DataGridViewRow: ...
    @Row.setter
    def Row(self, value: System.Void): ...

class DataGridViewRowCollection(object):
    """    """
    def __init__(self, dataGridView: DataGridView): ...
    @overload
    def Add() -> int: ...
    @overload
    def Add(self, values: System.System.Array[object]) -> int: ...
    @overload
    def Add(self, dataGridViewRow: DataGridViewRow) -> int: ...
    @overload
    def Add(self, count: int) -> int: ...
    @overload
    def AddCopies(self, indexSource: int, count: int) -> int: ...
    @overload
    def AddCopy(self, indexSource: int) -> int: ...
    @overload
    def AddRange(self, dataGridViewRows: System.Array[DataGridViewRow]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewRow: DataGridViewRow) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewRow], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DataGridViewRow: ...
    @overload
    def GetFirstRow(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetFirstRow(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetLastRow(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetNextRow(self, indexStart: int, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetNextRow(self, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetPreviousRow(self, indexStart: int, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetPreviousRow(self, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetRowCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetRowsHeight(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetRowState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @overload
    def IndexOf(self, dataGridViewRow: DataGridViewRow) -> int: ...
    @overload
    def Insert(self, rowIndex: int, count: int) -> None: ...
    @overload
    def Insert(self, rowIndex: int, values: System.System.Array[object]) -> None: ...
    @overload
    def Insert(self, rowIndex: int, dataGridViewRow: DataGridViewRow) -> None: ...
    @overload
    def InsertCopies(self, indexSource: int, indexDestination: int, count: int) -> None: ...
    @overload
    def InsertCopy(self, indexSource: int, indexDestination: int) -> None: ...
    @overload
    def InsertRange(self, rowIndex: int, dataGridViewRows: System.Array[DataGridViewRow]) -> None: ...
    @overload
    def Remove(self, dataGridViewRow: DataGridViewRow) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def SharedRow(self, rowIndex: int) -> DataGridViewRow: ...
    @property
    def CollectionChanged(self): ...

class DataGridViewRowContextMenuStripNeededEventArgs(System.EventArgs):
    """    """
    def __init__(self, rowIndex: int): ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def RowIndex(self) -> int: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...

class DataGridViewRowDividerDoubleClickEventArgs(HandledMouseEventArgs):
    """    """
    def __init__(self, rowIndex: int, e: HandledMouseEventArgs): ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewRowErrorTextNeededEventArgs(System.EventArgs):
    """    """
    @property
    def ErrorText(self) -> str: ...
    @property
    def RowIndex(self) -> int: ...
    @ErrorText.setter
    def ErrorText(self, value: System.Void): ...

class DataGridViewRowEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    @property
    def Row(self) -> DataGridViewRow: ...

class DataGridViewRowHeaderCell(DataGridViewHeaderCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @overload
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    @overload
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    @overload
    def ToString() -> str: ...

class DataGridViewRowHeadersWidthSizeMode(enum.Enum):
    EnableResizing = 0
    DisableResizing = 1
    AutoSizeToAllHeaders = 2
    AutoSizeToDisplayedHeaders = 3
    AutoSizeToFirstHeader = 4

class DataGridViewRowHeightInfoNeededEventArgs(System.EventArgs):
    """    """
    @property
    def Height(self) -> int: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @MinimumHeight.setter
    def MinimumHeight(self, value: System.Void): ...

class DataGridViewRowHeightInfoPushedEventArgs(ComponentModel.HandledEventArgs):
    """    """
    @property
    def Height(self) -> int: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewRowPostPaintEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridView: DataGridView, graphics: Drawing.Graphics, clipBounds: Drawing.Rectangle, rowBounds: Drawing.Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool): ...
    @overload
    def DrawFocus(self, bounds: Drawing.Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @property
    def ClipBounds(self) -> Drawing.Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsFirstDisplayedRow(self) -> bool: ...
    @property
    def IsLastVisibleRow(self) -> bool: ...
    @property
    def RowBounds(self) -> Drawing.Rectangle: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @overload
    def PaintCells(self, clipBounds: Drawing.Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    @overload
    def PaintCellsBackground(self, clipBounds: Drawing.Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @overload
    def PaintCellsContent(self, clipBounds: Drawing.Rectangle) -> None: ...
    @overload
    def PaintHeader(self, paintSelectionBackground: bool) -> None: ...
    @overload
    def PaintHeader(self, paintParts: DataGridViewPaintParts) -> None: ...
    @ClipBounds.setter
    def ClipBounds(self, value: System.Void): ...

class DataGridViewRowPrePaintEventArgs(ComponentModel.HandledEventArgs):
    """    """
    def __init__(self, dataGridView: DataGridView, graphics: Drawing.Graphics, clipBounds: Drawing.Rectangle, rowBounds: Drawing.Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool): ...
    @overload
    def DrawFocus(self, bounds: Drawing.Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @property
    def ClipBounds(self) -> Drawing.Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsFirstDisplayedRow(self) -> bool: ...
    @property
    def IsLastVisibleRow(self) -> bool: ...
    @property
    def PaintParts(self) -> DataGridViewPaintParts: ...
    @property
    def RowBounds(self) -> Drawing.Rectangle: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @overload
    def PaintCells(self, clipBounds: Drawing.Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    @overload
    def PaintCellsBackground(self, clipBounds: Drawing.Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @overload
    def PaintCellsContent(self, clipBounds: Drawing.Rectangle) -> None: ...
    @overload
    def PaintHeader(self, paintSelectionBackground: bool) -> None: ...
    @overload
    def PaintHeader(self, paintParts: DataGridViewPaintParts) -> None: ...
    @ClipBounds.setter
    def ClipBounds(self, value: System.Void): ...
    @PaintParts.setter
    def PaintParts(self, value: System.Void): ...

class DataGridViewRowsAddedEventArgs(System.EventArgs):
    """    """
    def __init__(self, rowIndex: int, rowCount: int): ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewRowsRemovedEventArgs(System.EventArgs):
    """    """
    def __init__(self, rowIndex: int, rowCount: int): ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...

class DataGridViewRowStateChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, dataGridViewRow: DataGridViewRow, stateChanged: DataGridViewElementStates): ...
    @property
    def Row(self) -> DataGridViewRow: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...

class DataGridViewSelectedCellCollection(BaseCollection):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewCell: DataGridViewCell) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewCell], index: int) -> None: ...
    @property
    def Item(self) -> DataGridViewCell: ...
    @overload
    def Insert(self, index: int, dataGridViewCell: DataGridViewCell) -> None: ...

class DataGridViewSelectedColumnCollection(BaseCollection):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewColumn: DataGridViewColumn) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewColumn], index: int) -> None: ...
    @property
    def Item(self) -> DataGridViewColumn: ...
    @overload
    def Insert(self, index: int, dataGridViewColumn: DataGridViewColumn) -> None: ...

class DataGridViewSelectedRowCollection(BaseCollection):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, dataGridViewRow: DataGridViewRow) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[DataGridViewRow], index: int) -> None: ...
    @property
    def Item(self) -> DataGridViewRow: ...
    @overload
    def Insert(self, index: int, dataGridViewRow: DataGridViewRow) -> None: ...

class DataGridViewSelectionMode(enum.Enum):
    CellSelect = 0
    FullRowSelect = 1
    FullColumnSelect = 2
    RowHeaderSelect = 3
    ColumnHeaderSelect = 4

class DataGridViewSortCompareEventArgs(ComponentModel.HandledEventArgs):
    """    """
    def __init__(self, dataGridViewColumn: DataGridViewColumn, cellValue1: object, cellValue2: object, rowIndex1: int, rowIndex2: int): ...
    @property
    def CellValue1(self) -> object: ...
    @property
    def CellValue2(self) -> object: ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def RowIndex1(self) -> int: ...
    @property
    def RowIndex2(self) -> int: ...
    @property
    def SortResult(self) -> int: ...
    @SortResult.setter
    def SortResult(self, value: System.Void): ...

class DataGridViewTextBoxCell(DataGridViewCell):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> object: ...
    @overload
    def DetachEditingControl() -> None: ...
    @property
    def FormattedValueType(self) -> System.Type: ...
    @property
    def MaxInputLength(self) -> int: ...
    @property
    def ValueType(self) -> System.Type: ...
    @overload
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    @overload
    def PositionEditingControl(self, setLocation: bool, setSize: bool, cellBounds: Drawing.Rectangle, cellClip: Drawing.Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> None: ...
    @MaxInputLength.setter
    def MaxInputLength(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DataGridViewTextBoxColumn(DataGridViewColumn):
    """    """
    def __init__(self): ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def MaxInputLength(self) -> int: ...
    @property
    def SortMode(self) -> DataGridViewColumnSortMode: ...
    @CellTemplate.setter
    def CellTemplate(self, value: System.Void): ...
    @MaxInputLength.setter
    def MaxInputLength(self, value: System.Void): ...
    @SortMode.setter
    def SortMode(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class DataGridViewTextBoxEditingControl(TextBox):
    """    """
    def __init__(self): ...
    @overload
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    @overload
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    @overload
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> object: ...
    @overload
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: System.Void): ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: System.Void): ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: System.Void): ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: System.Void): ...
    @property
    def TextAlignChanged(self): ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class DataGridViewTopLeftHeaderCell(DataGridViewColumnHeaderCell):
    """    """
    def __init__(self): ...
    @overload
    def ToString() -> str: ...

class DataGridViewTriState(enum.Enum):
    NotSet = 0
    True_ = 1
    False_ = 2

class DataObject(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, data: object): ...
    @overload
    def __init__(self, format_: str, data: object): ...
    @overload
    def ContainsAudio() -> bool: ...
    @overload
    def ContainsFileDropList() -> bool: ...
    @overload
    def ContainsImage() -> bool: ...
    @overload
    def ContainsText() -> bool: ...
    @overload
    def ContainsText(self, format_: TextDataFormat) -> bool: ...
    @overload
    def GetAudioStream() -> IO.Stream: ...
    @overload
    def GetData(self, format_: str) -> object: ...
    @overload
    def GetData(self, format_: System.Type) -> object: ...
    @overload
    def GetData(self, format_: str, autoConvert: bool) -> object: ...
    @overload
    def GetDataPresent(self, format_: System.Type) -> bool: ...
    @overload
    def GetDataPresent(self, format_: str) -> bool: ...
    @overload
    def GetDataPresent(self, format_: str, autoConvert: bool) -> bool: ...
    @overload
    def GetFileDropList() -> Specialized.StringCollection: ...
    @overload
    def GetFormats() -> System.System.Array[str]: ...
    @overload
    def GetFormats(self, autoConvert: bool) -> System.System.Array[str]: ...
    @overload
    def GetImage() -> Drawing.Image: ...
    @overload
    def GetText() -> str: ...
    @overload
    def GetText(self, format_: TextDataFormat) -> str: ...
    @overload
    def SetAudio(self, audioBytes: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetAudio(self, audioStream: IO.Stream) -> None: ...
    @overload
    def SetData(self, data: object) -> None: ...
    @overload
    def SetData(self, format_: str, data: object) -> None: ...
    @overload
    def SetData(self, format_: System.Type, data: object) -> None: ...
    @overload
    def SetData(self, format_: str, autoConvert: bool, data: object) -> None: ...
    @overload
    def SetFileDropList(self, filePaths: Specialized.StringCollection) -> None: ...
    @overload
    def SetImage(self, image: Drawing.Image) -> None: ...
    @overload
    def SetText(self, textData: str) -> None: ...
    @overload
    def SetText(self, textData: str, format_: TextDataFormat) -> None: ...

class DataSourceUpdateMode(enum.Enum):
    OnValidation = 0
    OnPropertyChanged = 1
    Never = 2

class DateBoldEventArgs(System.EventArgs):
    """    """
    @property
    def DaysToBold(self) -> System.System.Array[int]: ...
    @property
    def Size(self) -> int: ...
    @property
    def StartDate(self) -> System.DateTime: ...
    @DaysToBold.setter
    def DaysToBold(self, value: System.Void): ...

class DateBoldEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DateBoldEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DateBoldEventArgs) -> None: ...

class DateRangeEventArgs(System.EventArgs):
    """    """
    def __init__(self, start: System.DateTime, end: System.DateTime): ...
    @property
    def End(self) -> System.DateTime: ...
    @property
    def Start(self) -> System.DateTime: ...

class DateRangeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DateRangeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DateRangeEventArgs) -> None: ...

class DateTimePicker(Control):
    """    """
    def __init__(self): ...
    @property
    def MinDateTime(self) -> System.DateTime: ...
    @property
    def MaxDateTime(self) -> System.DateTime: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CalendarFont(self) -> Drawing.Font: ...
    @property
    def CalendarForeColor(self) -> Drawing.Color: ...
    @property
    def CalendarMonthBackground(self) -> Drawing.Color: ...
    @property
    def CalendarTitleBackColor(self) -> Drawing.Color: ...
    @property
    def CalendarTitleForeColor(self) -> Drawing.Color: ...
    @property
    def CalendarTrailingForeColor(self) -> Drawing.Color: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CustomFormat(self) -> str: ...
    @property
    def DropDownAlign(self) -> LeftRightAlignment: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Format(self) -> DateTimePickerFormat: ...
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MaximumDateTime(self) -> System.DateTime: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def MinimumDateTime(self) -> System.DateTime: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowCheckBox(self) -> bool: ...
    @property
    def ShowUpDown(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> System.DateTime: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @CalendarFont.setter
    def CalendarFont(self, value: System.Void): ...
    @CalendarForeColor.setter
    def CalendarForeColor(self, value: System.Void): ...
    @CalendarMonthBackground.setter
    def CalendarMonthBackground(self, value: System.Void): ...
    @CalendarTitleBackColor.setter
    def CalendarTitleBackColor(self, value: System.Void): ...
    @CalendarTitleForeColor.setter
    def CalendarTitleForeColor(self, value: System.Void): ...
    @CalendarTrailingForeColor.setter
    def CalendarTrailingForeColor(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @CustomFormat.setter
    def CustomFormat(self, value: System.Void): ...
    @DropDownAlign.setter
    def DropDownAlign(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Format.setter
    def Format(self, value: System.Void): ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @ShowCheckBox.setter
    def ShowCheckBox(self, value: System.Void): ...
    @ShowUpDown.setter
    def ShowUpDown(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FormatChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def CloseUp(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def DropDown(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class DateTimePickerFormat(enum.Enum):
    Long = 1
    Short = 2
    Time = 4
    Custom = 8

class Day(enum.Enum):
    Monday = 0
    Tuesday = 1
    Wednesday = 2
    Thursday = 3
    Friday = 4
    Saturday = 5
    Sunday = 6
    Default = 7

class DialogResult(enum.Enum):
    None_ = 0
    OK = 1
    Cancel = 2
    Abort = 3
    Retry = 4
    Ignore = 5
    Yes = 6
    No = 7
    TryAgain = 10
    Continue = 11

class DockingAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dockingBehavior: DockingBehavior): ...
    @property
    def Default(self) -> DockingAttribute: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DockingBehavior(self) -> DockingBehavior: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...

class DockingBehavior(enum.Enum):
    Never = 0
    Ask = 1
    AutoDock = 2

class DockStyle(enum.Enum):
    None_ = 0
    Top = 1
    Bottom = 2
    Left = 3
    Right = 4
    Fill = 5

class DomainUpDown(UpDownBase):
    """    """
    def __init__(self): ...
    @overload
    def DownButton() -> None: ...
    @property
    def Items(self) -> DomainUpDownItemCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> object: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Wrap(self) -> bool: ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @Wrap.setter
    def Wrap(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def UpButton() -> None: ...
    @property
    def PaddingChanged(self): ...
    @property
    def SelectedItemChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class DpiChangedEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @property
    def DeviceDpiNew(self) -> int: ...
    @property
    def DeviceDpiOld(self) -> int: ...
    @property
    def SuggestedRectangle(self) -> Drawing.Rectangle: ...
    @overload
    def ToString() -> str: ...

class DpiChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DpiChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DpiChangedEventArgs) -> None: ...

class DragAction(enum.Enum):
    Continue = 0
    Drop = 1
    Cancel = 2

class DragDropEffects(enum.Enum):
    None_ = 0
    Copy = 1
    Move = 2
    Link = 4
    Scroll = -2147483648
    All = -2147483645

class DragEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, data: IDataObject, keyState: int, x: int, y: int, allowedEffect: DragDropEffects, effect: DragDropEffects): ...
    @overload
    def __init__(self, data: IDataObject, keyState: int, x: int, y: int, allowedEffect: DragDropEffects, effect: DragDropEffects, dropImageType: DropImageType, message: str, messageReplacementToken: str): ...
    @property
    def AllowedEffect(self) -> DragDropEffects: ...
    @property
    def Data(self) -> IDataObject: ...
    @property
    def DropImageType(self) -> DropImageType: ...
    @property
    def Effect(self) -> DragDropEffects: ...
    @property
    def KeyState(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def MessageReplacementToken(self) -> str: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @DropImageType.setter
    def DropImageType(self, value: System.Void): ...
    @Effect.setter
    def Effect(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @MessageReplacementToken.setter
    def MessageReplacementToken(self, value: System.Void): ...

class DragEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DragEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DragEventArgs) -> None: ...

class DrawItemEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, graphics: Drawing.Graphics, font: Drawing.Font, rect: Drawing.Rectangle, index: int, state: DrawItemState): ...
    @overload
    def __init__(self, graphics: Drawing.Graphics, font: Drawing.Font, rect: Drawing.Rectangle, index: int, state: DrawItemState, foreColor: Drawing.Color, backColor: Drawing.Color): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DrawBackground() -> None: ...
    @overload
    def DrawFocusRectangle() -> None: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Index(self) -> int: ...
    @property
    def State(self) -> DrawItemState: ...

class DrawItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawItemEventArgs) -> None: ...

class DrawItemState(enum.Enum):
    None_ = 0
    Selected = 1
    Grayed = 2
    Disabled = 4
    Checked = 8
    Focus = 16
    Default = 32
    HotLight = 64
    Inactive = 128
    NoAccelerator = 256
    NoFocusRect = 512
    ComboBoxEdit = 4096

class DrawListViewColumnHeaderEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, bounds: Drawing.Rectangle, columnIndex: int, header: ColumnHeader, state: ListViewItemStates, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font): ...
    @overload
    def DrawBackground() -> None: ...
    @overload
    def DrawText() -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def State(self) -> ListViewItemStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: System.Void): ...

class DrawListViewColumnHeaderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawListViewColumnHeaderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawListViewColumnHeaderEventArgs) -> None: ...

class DrawListViewItemEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, item: ListViewItem, bounds: Drawing.Rectangle, itemIndex: int, state: ListViewItemStates): ...
    @overload
    def DrawBackground() -> None: ...
    @overload
    def DrawFocusRectangle() -> None: ...
    @overload
    def DrawText() -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def State(self) -> ListViewItemStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: System.Void): ...

class DrawListViewItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawListViewItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawListViewItemEventArgs) -> None: ...

class DrawListViewSubItemEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, bounds: Drawing.Rectangle, item: ListViewItem, subItem: ListViewSubItem, itemIndex: int, columnIndex: int, header: ColumnHeader, itemState: ListViewItemStates): ...
    @overload
    def DrawBackground() -> None: ...
    @overload
    def DrawFocusRectangle(self, bounds: Drawing.Rectangle) -> None: ...
    @overload
    def DrawText() -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def ItemState(self) -> ListViewItemStates: ...
    @property
    def SubItem(self) -> ListViewSubItem: ...
    @DrawDefault.setter
    def DrawDefault(self, value: System.Void): ...

class DrawListViewSubItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawListViewSubItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawListViewSubItemEventArgs) -> None: ...

class DrawMode(enum.Enum):
    Normal = 0
    OwnerDrawFixed = 1
    OwnerDrawVariable = 2

class DrawToolTipEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, associatedWindow: IWin32Window, associatedControl: Control, bounds: Drawing.Rectangle, toolTipText: str, backColor: Drawing.Color, foreColor: Drawing.Color, font: Drawing.Font): ...
    @overload
    def DrawBackground() -> None: ...
    @overload
    def DrawBorder() -> None: ...
    @overload
    def DrawText() -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def AssociatedControl(self) -> Control: ...
    @property
    def AssociatedWindow(self) -> IWin32Window: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def ToolTipText(self) -> str: ...

class DrawToolTipEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawToolTipEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawToolTipEventArgs) -> None: ...

class DrawTreeNodeEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, node: TreeNode, bounds: Drawing.Rectangle, state: TreeNodeStates): ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Node(self) -> TreeNode: ...
    @property
    def State(self) -> TreeNodeStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: System.Void): ...

class DrawTreeNodeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DrawTreeNodeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DrawTreeNodeEventArgs) -> None: ...

class DropImageType(enum.Enum):
    None_ = 0
    Copy = 1
    Move = 2
    Link = 4
    Label = 6
    Warning = 7
    NoImage = 8
    Invalid = -1

class ErrorBlinkStyle(enum.Enum):
    BlinkIfDifferentError = 0
    AlwaysBlink = 1
    NeverBlink = 2

class ErrorIconAlignment(enum.Enum):
    TopLeft = 0
    TopRight = 1
    MiddleLeft = 2
    MiddleRight = 3
    BottomLeft = 4
    BottomRight = 5

class ErrorProvider(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentControl: ContainerControl): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @overload
    def BindToDataAndErrors(self, newDataSource: object, newDataMember: str) -> None: ...
    @overload
    def CanExtend(self, extendee: object) -> bool: ...
    @overload
    def Clear() -> None: ...
    @property
    def BlinkRate(self) -> int: ...
    @property
    def BlinkStyle(self) -> ErrorBlinkStyle: ...
    @property
    def ContainerControl(self) -> ContainerControl: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> object: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @overload
    def GetError(self, control: Control) -> str: ...
    @overload
    def GetIconAlignment(self, control: Control) -> ErrorIconAlignment: ...
    @overload
    def GetIconPadding(self, control: Control) -> int: ...
    @BlinkRate.setter
    def BlinkRate(self, value: System.Void): ...
    @BlinkStyle.setter
    def BlinkStyle(self, value: System.Void): ...
    @ContainerControl.setter
    def ContainerControl(self, value: System.Void): ...
    @DataMember.setter
    def DataMember(self, value: System.Void): ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def SetError(self, control: Control, value: str) -> None: ...
    @overload
    def SetIconAlignment(self, control: Control, value: ErrorIconAlignment) -> None: ...
    @overload
    def SetIconPadding(self, control: Control, padding: int) -> None: ...
    @overload
    def UpdateBinding() -> None: ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def Disposed(self): ...

class FeatureSupport(object):
    """    """
    @overload
    def GetVersionPresent(self, feature: object) -> System.Version: ...
    @overload
    @staticmethod
    def GetVersionPresent(featureClassName: str, featureConstName: str) -> System.Version: ...
    @overload
    def IsPresent(self, feature: object) -> bool: ...
    @overload
    @staticmethod
    def IsPresent(featureClassName: str, featureConstName: str) -> bool: ...
    @overload
    def IsPresent(self, feature: object, minimumVersion: System.Version) -> bool: ...
    @overload
    @staticmethod
    def IsPresent(featureClassName: str, featureConstName: str, minimumVersion: System.Version) -> bool: ...

class FileDialog(CommonDialog):
    """    """
    @property
    def AddExtension(self) -> bool: ...
    @property
    def AddToRecent(self) -> bool: ...
    @property
    def AutoUpgradeEnabled(self) -> bool: ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CheckPathExists(self) -> bool: ...
    @property
    def ClientGuid(self) -> System.Nullable: ...
    @property
    def CustomPlaces(self) -> FileDialogCustomPlacesCollection: ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def DereferenceLinks(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileNames(self) -> System.System.Array[str]: ...
    @property
    def Filter(self) -> str: ...
    @property
    def FilterIndex(self) -> int: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def OkRequiresInteraction(self) -> bool: ...
    @property
    def RestoreDirectory(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def ShowHiddenFiles(self) -> bool: ...
    @property
    def ShowPinnedPlaces(self) -> bool: ...
    @property
    def SupportMultiDottedExtensions(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ValidateNames(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AddExtension.setter
    def AddExtension(self, value: System.Void): ...
    @AddToRecent.setter
    def AddToRecent(self, value: System.Void): ...
    @AutoUpgradeEnabled.setter
    def AutoUpgradeEnabled(self, value: System.Void): ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: System.Void): ...
    @CheckPathExists.setter
    def CheckPathExists(self, value: System.Void): ...
    @ClientGuid.setter
    def ClientGuid(self, value: System.Void): ...
    @DefaultExt.setter
    def DefaultExt(self, value: System.Void): ...
    @DereferenceLinks.setter
    def DereferenceLinks(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @FilterIndex.setter
    def FilterIndex(self, value: System.Void): ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: System.Void): ...
    @OkRequiresInteraction.setter
    def OkRequiresInteraction(self, value: System.Void): ...
    @RestoreDirectory.setter
    def RestoreDirectory(self, value: System.Void): ...
    @ShowHelp.setter
    def ShowHelp(self, value: System.Void): ...
    @ShowHiddenFiles.setter
    def ShowHiddenFiles(self, value: System.Void): ...
    @ShowPinnedPlaces.setter
    def ShowPinnedPlaces(self, value: System.Void): ...
    @SupportMultiDottedExtensions.setter
    def SupportMultiDottedExtensions(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @ValidateNames.setter
    def ValidateNames(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def FileOk(self): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class FixedPanel(enum.Enum):
    None_ = 0
    Panel1 = 1
    Panel2 = 2

class FlatButtonAppearance(object):
    """    """
    @property
    def BorderColor(self) -> Drawing.Color: ...
    @property
    def BorderSize(self) -> int: ...
    @property
    def CheckedBackColor(self) -> Drawing.Color: ...
    @property
    def MouseDownBackColor(self) -> Drawing.Color: ...
    @property
    def MouseOverBackColor(self) -> Drawing.Color: ...
    @BorderColor.setter
    def BorderColor(self, value: System.Void): ...
    @BorderSize.setter
    def BorderSize(self, value: System.Void): ...
    @CheckedBackColor.setter
    def CheckedBackColor(self, value: System.Void): ...
    @MouseDownBackColor.setter
    def MouseDownBackColor(self, value: System.Void): ...
    @MouseOverBackColor.setter
    def MouseOverBackColor(self, value: System.Void): ...

class FlatStyle(enum.Enum):
    Flat = 0
    Popup = 1
    Standard = 2
    System = 3

class FlowDirection(enum.Enum):
    LeftToRight = 0
    TopDown = 1
    RightToLeft = 2
    BottomUp = 3

class FlowLayoutPanel(Panel):
    """    """
    def __init__(self): ...
    @property
    def FlowDirection(self) -> FlowDirection: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def WrapContents(self) -> bool: ...
    @overload
    def GetFlowBreak(self, control: Control) -> bool: ...
    @FlowDirection.setter
    def FlowDirection(self, value: System.Void): ...
    @WrapContents.setter
    def WrapContents(self, value: System.Void): ...
    @overload
    def SetFlowBreak(self, control: Control, value: bool) -> None: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class FlowLayoutSettings(LayoutSettings):
    """    """
    @property
    def FlowDirection(self) -> FlowDirection: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def WrapContents(self) -> bool: ...
    @overload
    def GetFlowBreak(self, child: object) -> bool: ...
    @FlowDirection.setter
    def FlowDirection(self, value: System.Void): ...
    @WrapContents.setter
    def WrapContents(self, value: System.Void): ...
    @overload
    def SetFlowBreak(self, child: object, value: bool) -> None: ...

class FolderBrowserDialog(CommonDialog):
    """    """
    def __init__(self): ...
    @property
    def AddToRecent(self) -> bool: ...
    @property
    def AutoUpgradeEnabled(self) -> bool: ...
    @property
    def ClientGuid(self) -> System.Nullable: ...
    @property
    def Description(self) -> str: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def OkRequiresInteraction(self) -> bool: ...
    @property
    def RootFolder(self) -> System.SpecialFolder: ...
    @property
    def SelectedPath(self) -> str: ...
    @property
    def ShowHiddenFiles(self) -> bool: ...
    @property
    def ShowNewFolderButton(self) -> bool: ...
    @property
    def ShowPinnedPlaces(self) -> bool: ...
    @property
    def UseDescriptionForTitle(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AddToRecent.setter
    def AddToRecent(self, value: System.Void): ...
    @AutoUpgradeEnabled.setter
    def AutoUpgradeEnabled(self, value: System.Void): ...
    @ClientGuid.setter
    def ClientGuid(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: System.Void): ...
    @OkRequiresInteraction.setter
    def OkRequiresInteraction(self, value: System.Void): ...
    @RootFolder.setter
    def RootFolder(self, value: System.Void): ...
    @SelectedPath.setter
    def SelectedPath(self, value: System.Void): ...
    @ShowHiddenFiles.setter
    def ShowHiddenFiles(self, value: System.Void): ...
    @ShowNewFolderButton.setter
    def ShowNewFolderButton(self, value: System.Void): ...
    @ShowPinnedPlaces.setter
    def ShowPinnedPlaces(self, value: System.Void): ...
    @UseDescriptionForTitle.setter
    def UseDescriptionForTitle(self, value: System.Void): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class FontDialog(CommonDialog):
    """    """
    def __init__(self): ...
    @property
    def AllowScriptChange(self) -> bool: ...
    @property
    def AllowSimulations(self) -> bool: ...
    @property
    def AllowVectorFonts(self) -> bool: ...
    @property
    def AllowVerticalFonts(self) -> bool: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def FixedPitchOnly(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def FontMustExist(self) -> bool: ...
    @property
    def MaxSize(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def ScriptsOnly(self) -> bool: ...
    @property
    def ShowApply(self) -> bool: ...
    @property
    def ShowColor(self) -> bool: ...
    @property
    def ShowEffects(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AllowScriptChange.setter
    def AllowScriptChange(self, value: System.Void): ...
    @AllowSimulations.setter
    def AllowSimulations(self, value: System.Void): ...
    @AllowVectorFonts.setter
    def AllowVectorFonts(self, value: System.Void): ...
    @AllowVerticalFonts.setter
    def AllowVerticalFonts(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @FixedPitchOnly.setter
    def FixedPitchOnly(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @FontMustExist.setter
    def FontMustExist(self, value: System.Void): ...
    @MaxSize.setter
    def MaxSize(self, value: System.Void): ...
    @MinSize.setter
    def MinSize(self, value: System.Void): ...
    @ScriptsOnly.setter
    def ScriptsOnly(self, value: System.Void): ...
    @ShowApply.setter
    def ShowApply(self, value: System.Void): ...
    @ShowColor.setter
    def ShowColor(self, value: System.Void): ...
    @ShowEffects.setter
    def ShowEffects(self, value: System.Void): ...
    @ShowHelp.setter
    def ShowHelp(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Apply(self): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class Form(ContainerControl):
    """    """
    def __init__(self): ...
    @overload
    def Activate() -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def Close() -> None: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def ActiveForm(self) -> Form: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Drawing.Size: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def ClientSize(self) -> Drawing.Size: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def DesktopBounds(self) -> Drawing.Rectangle: ...
    @property
    def DesktopLocation(self) -> Drawing.Point: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MdiChildren(self) -> System.Array[Form]: ...
    @property
    def MdiChildrenMinimizedAnchorBottom(self) -> bool: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> System.Array[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def RestoreBounds(self) -> Drawing.Rectangle: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Drawing.Color: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: System.Void): ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: System.Void): ...
    @AutoScale.setter
    def AutoScale(self, value: System.Void): ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: System.Void): ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @AutoValidate.setter
    def AutoValidate(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @CancelButton.setter
    def CancelButton(self, value: System.Void): ...
    @ClientSize.setter
    def ClientSize(self, value: System.Void): ...
    @ControlBox.setter
    def ControlBox(self, value: System.Void): ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: System.Void): ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: System.Void): ...
    @DialogResult.setter
    def DialogResult(self, value: System.Void): ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: System.Void): ...
    @HelpButton.setter
    def HelpButton(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: System.Void): ...
    @KeyPreview.setter
    def KeyPreview(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: System.Void): ...
    @Margin.setter
    def Margin(self, value: System.Void): ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MdiChildrenMinimizedAnchorBottom.setter
    def MdiChildrenMinimizedAnchorBottom(self, value: System.Void): ...
    @MdiParent.setter
    def MdiParent(self, value: System.Void): ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Opacity.setter
    def Opacity(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @ShowIcon.setter
    def ShowIcon(self, value: System.Void): ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: System.Void): ...
    @StartPosition.setter
    def StartPosition(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TopLevel.setter
    def TopLevel(self, value: System.Void): ...
    @TopMost.setter
    def TopMost(self, value: System.Void): ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: System.Void): ...
    @WindowState.setter
    def WindowState(self, value: System.Void): ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog() -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ValidateChildren() -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class FormBorderStyle(enum.Enum):
    None_ = 0
    FixedSingle = 1
    Fixed3D = 2
    FixedDialog = 3
    Sizable = 4
    FixedToolWindow = 5
    SizableToolWindow = 6

class FormClosedEventArgs(System.EventArgs):
    """    """
    def __init__(self, closeReason: CloseReason): ...
    @property
    def CloseReason(self) -> CloseReason: ...

class FormClosedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: FormClosedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: FormClosedEventArgs) -> None: ...

class FormClosingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, closeReason: CloseReason, cancel: bool): ...
    @property
    def CloseReason(self) -> CloseReason: ...

class FormClosingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: FormClosingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: FormClosingEventArgs) -> None: ...

class FormCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self): ...
    @property
    def Item(self) -> Form: ...
    @property
    def Item(self) -> Form: ...

class FormStartPosition(enum.Enum):
    Manual = 0
    CenterScreen = 1
    WindowsDefaultLocation = 2
    WindowsDefaultBounds = 3
    CenterParent = 4

class FormWindowState(enum.Enum):
    Normal = 0
    Minimized = 1
    Maximized = 2

class FrameStyle(enum.Enum):
    Dashed = 0
    Thick = 1

class GetChildAtPointSkip(enum.Enum):
    None_ = 0
    Invisible = 1
    Disabled = 2
    Transparent = 4

class GiveFeedbackEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, effect: DragDropEffects, useDefaultCursors: bool): ...
    @overload
    def __init__(self, effect: DragDropEffects, useDefaultCursors: bool, dragImage: Drawing.Bitmap, cursorOffset: Drawing.Point, useDefaultDragImage: bool): ...
    @property
    def CursorOffset(self) -> Drawing.Point: ...
    @property
    def DragImage(self) -> Drawing.Bitmap: ...
    @property
    def Effect(self) -> DragDropEffects: ...
    @property
    def UseDefaultCursors(self) -> bool: ...
    @property
    def UseDefaultDragImage(self) -> bool: ...
    @CursorOffset.setter
    def CursorOffset(self, value: System.Void): ...
    @DragImage.setter
    def DragImage(self, value: System.Void): ...
    @UseDefaultCursors.setter
    def UseDefaultCursors(self, value: System.Void): ...
    @UseDefaultDragImage.setter
    def UseDefaultDragImage(self, value: System.Void): ...

class GiveFeedbackEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GiveFeedbackEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: GiveFeedbackEventArgs) -> None: ...

class GridItem(object):
    """    """
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def GridItems(self) -> GridItemCollection: ...
    @property
    def GridItemType(self) -> GridItemType: ...
    @property
    def Label(self) -> str: ...
    @property
    def Parent(self) -> GridItem: ...
    @property
    def PropertyDescriptor(self) -> ComponentModel.PropertyDescriptor: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Value(self) -> object: ...
    @overload
    def Select() -> bool: ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...

class GridItemCollection(object):
    """    """
    @property
    def Empty(self) -> GridItemCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> GridItem: ...
    @property
    def Item(self) -> GridItem: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class GridItemType(enum.Enum):
    Property = 0
    Category = 1
    ArrayValue = 2
    Root = 3

class GroupBox(Control):
    """    """
    def __init__(self): ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class GroupBoxRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawGroupBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.GroupBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawGroupBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, groupBoxText: str, font: Drawing.Font, state: VisualStyles.GroupBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawGroupBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, groupBoxText: str, font: Drawing.Font, textColor: Drawing.Color, state: VisualStyles.GroupBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawGroupBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, groupBoxText: str, font: Drawing.Font, flags: TextFormatFlags, state: VisualStyles.GroupBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawGroupBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, groupBoxText: str, font: Drawing.Font, textColor: Drawing.Color, flags: TextFormatFlags, state: VisualStyles.GroupBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawParentBackground(g: Drawing.Graphics, bounds: Drawing.Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState(self) -> bool: ...
    @overload
    @staticmethod
    def IsBackgroundPartiallyTransparent(state: VisualStyles.GroupBoxState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(self, value: System.Void): ...

class HandledMouseEventArgs(MouseEventArgs):
    """    """
    @overload
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int): ...
    @overload
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int, defaultHandledValue: bool): ...
    @property
    def Handled(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class Help(object):
    """    """
    @overload
    @staticmethod
    def ShowHelp(parent: Control, url: str) -> None: ...
    @overload
    @staticmethod
    def ShowHelp(parent: Control, url: str, navigator: HelpNavigator) -> None: ...
    @overload
    @staticmethod
    def ShowHelp(parent: Control, url: str, keyword: str) -> None: ...
    @overload
    @staticmethod
    def ShowHelp(parent: Control, url: str, command: HelpNavigator, parameter: object) -> None: ...
    @overload
    @staticmethod
    def ShowHelpIndex(parent: Control, url: str) -> None: ...
    @overload
    @staticmethod
    def ShowPopup(parent: Control, caption: str, location: Drawing.Point) -> None: ...

class HelpEventArgs(System.EventArgs):
    """    """
    def __init__(self, mousePos: Drawing.Point): ...
    @property
    def Handled(self) -> bool: ...
    @property
    def MousePos(self) -> Drawing.Point: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class HelpEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, hlpevent: HelpEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, hlpevent: HelpEventArgs) -> None: ...

class HelpNavigator(enum.Enum):
    Topic = -2147483647
    TableOfContents = -2147483646
    Index = -2147483645
    Find = -2147483644
    AssociateIndex = -2147483643
    KeywordIndex = -2147483642
    TopicId = -2147483641

class HelpProvider(ComponentModel.Component):
    """    """
    def __init__(self): ...
    @overload
    def CanExtend(self, target: object) -> bool: ...
    @property
    def HelpNamespace(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @overload
    def GetHelpKeyword(self, ctl: Control) -> str: ...
    @overload
    def GetHelpNavigator(self, ctl: Control) -> HelpNavigator: ...
    @overload
    def GetHelpString(self, ctl: Control) -> str: ...
    @overload
    def GetShowHelp(self, ctl: Control) -> bool: ...
    @overload
    def ResetShowHelp(self, ctl: Control) -> None: ...
    @HelpNamespace.setter
    def HelpNamespace(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def SetHelpKeyword(self, ctl: Control, keyword: str) -> None: ...
    @overload
    def SetHelpNavigator(self, ctl: Control, navigator: HelpNavigator) -> None: ...
    @overload
    def SetHelpString(self, ctl: Control, helpString: str) -> None: ...
    @overload
    def SetShowHelp(self, ctl: Control, value: bool) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class MonthCalendar(Control):
    """    """
    def __init__(self): ...
    @overload
    def AddAnnuallyBoldedDate(self, date: System.DateTime) -> None: ...
    @overload
    def AddBoldedDate(self, date: System.DateTime) -> None: ...
    @overload
    def AddMonthlyBoldedDate(self, date: System.DateTime) -> None: ...
    @property
    def AnnuallyBoldedDates(self) -> System.System.Array[System.DateTime]: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BoldedDates(self) -> System.System.Array[System.DateTime]: ...
    @property
    def CalendarDimensions(self) -> Drawing.Size: ...
    @property
    def FirstDayOfWeek(self) -> Day: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MaxDate(self) -> System.DateTime: ...
    @property
    def MaxSelectionCount(self) -> int: ...
    @property
    def MinDate(self) -> System.DateTime: ...
    @property
    def MonthlyBoldedDates(self) -> System.System.Array[System.DateTime]: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ScrollChange(self) -> int: ...
    @property
    def SelectionEnd(self) -> System.DateTime: ...
    @property
    def SelectionRange(self) -> SelectionRange: ...
    @property
    def SelectionStart(self) -> System.DateTime: ...
    @property
    def ShowToday(self) -> bool: ...
    @property
    def ShowTodayCircle(self) -> bool: ...
    @property
    def ShowWeekNumbers(self) -> bool: ...
    @property
    def SingleMonthSize(self) -> Drawing.Size: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def TitleBackColor(self) -> Drawing.Color: ...
    @property
    def TitleForeColor(self) -> Drawing.Color: ...
    @property
    def TodayDate(self) -> System.DateTime: ...
    @property
    def TodayDateSet(self) -> bool: ...
    @property
    def TrailingForeColor(self) -> Drawing.Color: ...
    @overload
    def GetDisplayRange(self, visible: bool) -> SelectionRange: ...
    @overload
    def HitTest(self, point: Drawing.Point) -> HitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> HitTestInfo: ...
    @overload
    def RemoveAllAnnuallyBoldedDates() -> None: ...
    @overload
    def RemoveAllBoldedDates() -> None: ...
    @overload
    def RemoveAllMonthlyBoldedDates() -> None: ...
    @overload
    def RemoveAnnuallyBoldedDate(self, date: System.DateTime) -> None: ...
    @overload
    def RemoveBoldedDate(self, date: System.DateTime) -> None: ...
    @overload
    def RemoveMonthlyBoldedDate(self, date: System.DateTime) -> None: ...
    @AnnuallyBoldedDates.setter
    def AnnuallyBoldedDates(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BoldedDates.setter
    def BoldedDates(self, value: System.Void): ...
    @CalendarDimensions.setter
    def CalendarDimensions(self, value: System.Void): ...
    @FirstDayOfWeek.setter
    def FirstDayOfWeek(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @MaxDate.setter
    def MaxDate(self, value: System.Void): ...
    @MaxSelectionCount.setter
    def MaxSelectionCount(self, value: System.Void): ...
    @MinDate.setter
    def MinDate(self, value: System.Void): ...
    @MonthlyBoldedDates.setter
    def MonthlyBoldedDates(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @ScrollChange.setter
    def ScrollChange(self, value: System.Void): ...
    @SelectionEnd.setter
    def SelectionEnd(self, value: System.Void): ...
    @SelectionRange.setter
    def SelectionRange(self, value: System.Void): ...
    @SelectionStart.setter
    def SelectionStart(self, value: System.Void): ...
    @ShowToday.setter
    def ShowToday(self, value: System.Void): ...
    @ShowTodayCircle.setter
    def ShowTodayCircle(self, value: System.Void): ...
    @ShowWeekNumbers.setter
    def ShowWeekNumbers(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TitleBackColor.setter
    def TitleBackColor(self, value: System.Void): ...
    @TitleForeColor.setter
    def TitleForeColor(self, value: System.Void): ...
    @TodayDate.setter
    def TodayDate(self, value: System.Void): ...
    @TrailingForeColor.setter
    def TrailingForeColor(self, value: System.Void): ...
    @overload
    def SetCalendarDimensions(self, x: int, y: int) -> None: ...
    @overload
    def SetDate(self, date: System.DateTime) -> None: ...
    @overload
    def SetSelectionRange(self, date1: System.DateTime, date2: System.DateTime) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def UpdateBoldedDates() -> None: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DateChanged(self): ...
    @property
    def DateSelected(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def Paint(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class HorizontalAlignment(enum.Enum):
    Left = 0
    Right = 1
    Center = 2

class HScrollBar(ScrollBar):
    """    """
    def __init__(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def Paint(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def Scroll(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class HScrollProperties(ScrollProperties):
    """    """
    def __init__(self, container: ScrollableControl): ...

class HtmlDocument(object):
    """    """
    @overload
    def AttachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def CreateElement(self, elementTag: str) -> HtmlElement: ...
    @overload
    def DetachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExecCommand(self, command: str, showUI: bool, value: object) -> None: ...
    @overload
    def Focus() -> None: ...
    @property
    def ActiveElement(self) -> HtmlElement: ...
    @property
    def ActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def All(self) -> HtmlElementCollection: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Body(self) -> HtmlElement: ...
    @property
    def Cookie(self) -> str: ...
    @property
    def DefaultEncoding(self) -> str: ...
    @property
    def Domain(self) -> str: ...
    @property
    def DomDocument(self) -> object: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Forms(self) -> HtmlElementCollection: ...
    @property
    def Images(self) -> HtmlElementCollection: ...
    @property
    def LinkColor(self) -> Drawing.Color: ...
    @property
    def Links(self) -> HtmlElementCollection: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...
    @property
    def VisitedLinkColor(self) -> Drawing.Color: ...
    @property
    def Window(self) -> HtmlWindow: ...
    @overload
    def GetElementById(self, id_: str) -> HtmlElement: ...
    @overload
    def GetElementFromPoint(self, point: Drawing.Point) -> HtmlElement: ...
    @overload
    def GetElementsByTagName(self, tagName: str) -> HtmlElementCollection: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def InvokeScript(self, scriptName: str) -> object: ...
    @overload
    def InvokeScript(self, scriptName: str, args: System.System.Array[object]) -> object: ...
    @overload
    def OpenNew(self, replaceInHistory: bool) -> HtmlDocument: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Cookie.setter
    def Cookie(self, value: System.Void): ...
    @Domain.setter
    def Domain(self, value: System.Void): ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @LinkColor.setter
    def LinkColor(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: System.Void): ...
    @overload
    def Write(self, text: str) -> None: ...
    @property
    def Click(self): ...
    @property
    def ContextMenuShowing(self): ...
    @property
    def Focusing(self): ...
    @property
    def LosingFocus(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseOver(self): ...
    @property
    def MouseUp(self): ...
    @property
    def Stop(self): ...

class HtmlElement(object):
    """    """
    @overload
    def AppendChild(self, newElement: HtmlElement) -> HtmlElement: ...
    @overload
    def AttachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def DetachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus() -> None: ...
    @property
    def All(self) -> HtmlElementCollection: ...
    @property
    def CanHaveChildren(self) -> bool: ...
    @property
    def Children(self) -> HtmlElementCollection: ...
    @property
    def ClientRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DomElement(self) -> object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FirstChild(self) -> HtmlElement: ...
    @property
    def Id(self) -> str: ...
    @property
    def InnerHtml(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> HtmlElement: ...
    @property
    def OffsetParent(self) -> HtmlElement: ...
    @property
    def OffsetRectangle(self) -> Drawing.Rectangle: ...
    @property
    def OuterHtml(self) -> str: ...
    @property
    def OuterText(self) -> str: ...
    @property
    def Parent(self) -> HtmlElement: ...
    @property
    def ScrollLeft(self) -> int: ...
    @property
    def ScrollRectangle(self) -> Drawing.Rectangle: ...
    @property
    def ScrollTop(self) -> int: ...
    @property
    def Style(self) -> str: ...
    @property
    def TabIndex(self) -> System.Int16: ...
    @property
    def TagName(self) -> str: ...
    @overload
    def GetAttribute(self, attributeName: str) -> str: ...
    @overload
    def GetElementsByTagName(self, tagName: str) -> HtmlElementCollection: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def InsertAdjacentElement(self, orient: HtmlElementInsertionOrientation, newElement: HtmlElement) -> HtmlElement: ...
    @overload
    def InvokeMember(self, methodName: str) -> object: ...
    @overload
    def InvokeMember(self, methodName: str, parameter: System.System.Array[object]) -> object: ...
    @overload
    def RaiseEvent(self, eventName: str) -> None: ...
    @overload
    def RemoveFocus() -> None: ...
    @overload
    def ScrollIntoView(self, alignWithTop: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @InnerHtml.setter
    def InnerHtml(self, value: System.Void): ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @OuterHtml.setter
    def OuterHtml(self, value: System.Void): ...
    @OuterText.setter
    def OuterText(self, value: System.Void): ...
    @ScrollLeft.setter
    def ScrollLeft(self, value: System.Void): ...
    @ScrollTop.setter
    def ScrollTop(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @overload
    def SetAttribute(self, attributeName: str, value: str) -> None: ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Drag(self): ...
    @property
    def DragEnd(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragOver(self): ...
    @property
    def Focusing(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LosingFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseOver(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...

class HtmlElementCollection(object):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HtmlElement: ...
    @property
    def Item(self) -> HtmlElement: ...
    @overload
    def GetElementsByName(self, name: str) -> HtmlElementCollection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class HtmlElementErrorEventArgs(System.EventArgs):
    """    """
    @property
    def Description(self) -> str: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Url(self) -> System.Uri: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class HtmlElementErrorEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: HtmlElementErrorEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: HtmlElementErrorEventArgs) -> None: ...

class HtmlElementEventArgs(System.EventArgs):
    """    """
    @property
    def AltKeyPressed(self) -> bool: ...
    @property
    def BubbleEvent(self) -> bool: ...
    @property
    def ClientMousePosition(self) -> Drawing.Point: ...
    @property
    def CtrlKeyPressed(self) -> bool: ...
    @property
    def EventType(self) -> str: ...
    @property
    def FromElement(self) -> HtmlElement: ...
    @property
    def KeyPressedCode(self) -> int: ...
    @property
    def MouseButtonsPressed(self) -> MouseButtons: ...
    @property
    def MousePosition(self) -> Drawing.Point: ...
    @property
    def OffsetMousePosition(self) -> Drawing.Point: ...
    @property
    def ReturnValue(self) -> bool: ...
    @property
    def ShiftKeyPressed(self) -> bool: ...
    @property
    def ToElement(self) -> HtmlElement: ...
    @BubbleEvent.setter
    def BubbleEvent(self, value: System.Void): ...
    @ReturnValue.setter
    def ReturnValue(self, value: System.Void): ...

class HtmlElementEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: HtmlElementEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: HtmlElementEventArgs) -> None: ...

class HtmlElementInsertionOrientation(enum.Enum):
    BeforeBegin = 0
    AfterBegin = 1
    BeforeEnd = 2
    AfterEnd = 3

class HtmlHistory(object):
    """    """
    @overload
    def Back(self, numberBack: int) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Forward(self, numberForward: int) -> None: ...
    @property
    def DomHistory(self) -> object: ...
    @property
    def Length(self) -> int: ...
    @overload
    def Go(self, url: System.Uri) -> None: ...
    @overload
    def Go(self, urlString: str) -> None: ...
    @overload
    def Go(self, relativePosition: int) -> None: ...

class HtmlWindow(object):
    """    """
    @overload
    def Alert(self, message: str) -> None: ...
    @overload
    def AttachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Confirm(self, message: str) -> bool: ...
    @overload
    def DetachEventHandler(self, eventName: str, eventHandler: System.EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus() -> None: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DomWindow(self) -> object: ...
    @property
    def Frames(self) -> HtmlWindowCollection: ...
    @property
    def History(self) -> HtmlHistory: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opener(self) -> HtmlWindow: ...
    @property
    def Parent(self) -> HtmlWindow: ...
    @property
    def Position(self) -> Drawing.Point: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def StatusBarText(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...
    @property
    def WindowFrameElement(self) -> HtmlElement: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MoveTo(self, point: Drawing.Point) -> None: ...
    @overload
    def MoveTo(self, x: int, y: int) -> None: ...
    @overload
    def Navigate(self, urlString: str) -> None: ...
    @overload
    def Navigate(self, url: System.Uri) -> None: ...
    @overload
    def Open(self, url: System.Uri, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow: ...
    @overload
    def Open(self, urlString: str, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow: ...
    @overload
    def OpenNew(self, url: System.Uri, windowOptions: str) -> HtmlWindow: ...
    @overload
    def OpenNew(self, urlString: str, windowOptions: str) -> HtmlWindow: ...
    @overload
    def Prompt(self, message: str, defaultInputValue: str) -> str: ...
    @overload
    def RemoveFocus() -> None: ...
    @overload
    def ResizeTo(self, size: Drawing.Size) -> None: ...
    @overload
    def ResizeTo(self, width: int, height: int) -> None: ...
    @overload
    def ScrollTo(self, point: Drawing.Point) -> None: ...
    @overload
    def ScrollTo(self, x: int, y: int) -> None: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @StatusBarText.setter
    def StatusBarText(self, value: System.Void): ...
    @property
    def Error(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Load(self): ...
    @property
    def LostFocus(self): ...
    @property
    def Resize(self): ...
    @property
    def Scroll(self): ...
    @property
    def Unload(self): ...

class HtmlWindowCollection(object):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HtmlWindow: ...
    @property
    def Item(self) -> HtmlWindow: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class IBindableComponent:
    """    """
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...

class IButtonControl:
    """    """
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    def NotifyDefault(self, value: bool) -> None: ...
    @overload
    def PerformClick() -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: System.Void): ...

class ICommandExecutor:
    """    """
    @overload
    def Execute() -> None: ...

class IComponentEditorPageSite:
    """    """
    @overload
    def GetControl() -> Control: ...
    @overload
    def SetDirty() -> None: ...

class IContainerControl:
    """    """
    @overload
    def ActivateControl(self, active: Control) -> bool: ...
    @property
    def ActiveControl(self) -> Control: ...
    @ActiveControl.setter
    def ActiveControl(self, value: System.Void): ...

class ICurrencyManagerProvider:
    """    """
    @property
    def CurrencyManager(self) -> CurrencyManager: ...
    @overload
    def GetRelatedCurrencyManager(self, dataMember: str) -> CurrencyManager: ...

class IDataGridColumnStyleEditingNotificationService:
    """    """
    @overload
    def ColumnStartedEditing(self, editingControl: Control) -> None: ...

class IDataObject:
    """    """
    @overload
    def GetData(self, format_: str) -> object: ...
    @overload
    def GetData(self, format_: System.Type) -> object: ...
    @overload
    def GetData(self, format_: str, autoConvert: bool) -> object: ...
    @overload
    def GetDataPresent(self, format_: str) -> bool: ...
    @overload
    def GetDataPresent(self, format_: System.Type) -> bool: ...
    @overload
    def GetDataPresent(self, format_: str, autoConvert: bool) -> bool: ...
    @overload
    def GetFormats() -> System.System.Array[str]: ...
    @overload
    def GetFormats(self, autoConvert: bool) -> System.System.Array[str]: ...
    @overload
    def SetData(self, data: object) -> None: ...
    @overload
    def SetData(self, format_: str, data: object) -> None: ...
    @overload
    def SetData(self, format_: System.Type, data: object) -> None: ...
    @overload
    def SetData(self, format_: str, autoConvert: bool, data: object) -> None: ...

class IFeatureSupport:
    """    """
    @overload
    def GetVersionPresent(self, feature: object) -> System.Version: ...
    @overload
    def IsPresent(self, feature: object) -> bool: ...
    @overload
    def IsPresent(self, feature: object, minimumVersion: System.Version) -> bool: ...

class IFileReaderService:
    """    """
    @overload
    def OpenFileFromSource(self, relativePath: str) -> IO.Stream: ...

class ImageIndexConverter(ComponentModel.Int32Converter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class ImageKeyConverter(ComponentModel.StringConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class ImageLayout(enum.Enum):
    None_ = 0
    Tile = 1
    Center = 2
    Stretch = 3
    Zoom = 4

class ImageList(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @overload
    def Draw(self, g: Drawing.Graphics, pt: Drawing.Point, index: int) -> None: ...
    @overload
    def Draw(self, g: Drawing.Graphics, x: int, y: int, index: int) -> None: ...
    @overload
    def Draw(self, g: Drawing.Graphics, x: int, y: int, width: int, height: int, index: int) -> None: ...
    @property
    def ColorDepth(self) -> ColorDepth: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HandleCreated(self) -> bool: ...
    @property
    def Images(self) -> ImageCollection: ...
    @property
    def ImageSize(self) -> Drawing.Size: ...
    @property
    def ImageStream(self) -> ImageListStreamer: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TransparentColor(self) -> Drawing.Color: ...
    @ColorDepth.setter
    def ColorDepth(self, value: System.Void): ...
    @ImageSize.setter
    def ImageSize(self, value: System.Void): ...
    @ImageStream.setter
    def ImageStream(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @TransparentColor.setter
    def TransparentColor(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def RecreateHandle(self): ...
    @property
    def Disposed(self): ...

class ImageListStreamer(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def GetObjectData(self, si: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ImeMode(enum.Enum):
    NoControl = 0
    On = 1
    Off = 2
    Disable = 3
    Hiragana = 4
    Katakana = 5
    KatakanaHalf = 6
    AlphaFull = 7
    Alpha = 8
    HangulFull = 9
    Hangul = 10
    Close = 11
    OnHalf = 12
    Inherit = -1

class IMessageFilter:
    """    """
    @overload
    def PreFilterMessage() -> (bool, Message): ...

class InputLanguage(object):
    """    """
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    @staticmethod
    def FromCulture(culture: Globalization.CultureInfo) -> InputLanguage: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def CurrentInputLanguage(self) -> InputLanguage: ...
    @property
    def DefaultInputLanguage(self) -> InputLanguage: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def InstalledInputLanguages(self) -> InputLanguageCollection: ...
    @property
    def LayoutName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @CurrentInputLanguage.setter
    def CurrentInputLanguage(self, value: System.Void): ...

class InputLanguageChangedEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, culture: Globalization.CultureInfo, charSet: System.Byte): ...
    @overload
    def __init__(self, inputLanguage: InputLanguage, charSet: System.Byte): ...
    @property
    def CharSet(self) -> System.Byte: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def InputLanguage(self) -> InputLanguage: ...

class InputLanguageChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: InputLanguageChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: InputLanguageChangedEventArgs) -> None: ...

class InputLanguageChangingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    @overload
    def __init__(self, culture: Globalization.CultureInfo, sysCharSet: bool): ...
    @overload
    def __init__(self, inputLanguage: InputLanguage, sysCharSet: bool): ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def InputLanguage(self) -> InputLanguage: ...
    @property
    def SysCharSet(self) -> bool: ...

class InputLanguageChangingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: InputLanguageChangingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: InputLanguageChangingEventArgs) -> None: ...

class InputLanguageCollection(Collections.ReadOnlyCollectionBase):
    """    """
    @overload
    def Contains(self, value: InputLanguage) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[InputLanguage], index: int) -> None: ...
    @property
    def Item(self) -> InputLanguage: ...
    @overload
    def IndexOf(self, value: InputLanguage) -> int: ...

class InsertKeyMode(enum.Enum):
    Default = 0
    Insert = 1
    Overwrite = 2

class InvalidateEventArgs(System.EventArgs):
    """    """
    def __init__(self, invalidRect: Drawing.Rectangle): ...
    @property
    def InvalidRect(self) -> Drawing.Rectangle: ...

class InvalidateEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: InvalidateEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: InvalidateEventArgs) -> None: ...

class IDropTarget:
    """    """
    @overload
    def OnDragDrop(self, e: DragEventArgs) -> None: ...
    @overload
    def OnDragEnter(self, e: DragEventArgs) -> None: ...
    @overload
    def OnDragLeave(self, e: System.EventArgs) -> None: ...
    @overload
    def OnDragOver(self, e: DragEventArgs) -> None: ...

class ItemActivation(enum.Enum):
    Standard = 0
    OneClick = 1
    TwoClick = 2

class ItemBoundsPortion(enum.Enum):
    Entire = 0
    Icon = 1
    Label = 2
    ItemOnly = 3

class ItemChangedEventArgs(System.EventArgs):
    """    """
    @property
    def Index(self) -> int: ...

class ItemChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ItemChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ItemChangedEventArgs) -> None: ...

class ItemCheckedEventArgs(System.EventArgs):
    """    """
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...

class ItemCheckedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ItemCheckedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ItemCheckedEventArgs) -> None: ...

class ItemCheckEventArgs(System.EventArgs):
    """    """
    def __init__(self, index: int, newCheckValue: CheckState, currentValue: CheckState): ...
    @property
    def CurrentValue(self) -> CheckState: ...
    @property
    def Index(self) -> int: ...
    @property
    def NewValue(self) -> CheckState: ...
    @NewValue.setter
    def NewValue(self, value: System.Void): ...

class ItemCheckEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ItemCheckEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ItemCheckEventArgs) -> None: ...

class ItemDragEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, button: MouseButtons): ...
    @overload
    def __init__(self, button: MouseButtons, item: object): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Item(self) -> object: ...

class ItemDragEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ItemDragEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ItemDragEventArgs) -> None: ...

class IWin32Window:
    """    """
    @property
    def Handle(self) -> System.IntPtr: ...

class IWindowTarget:
    """    """
    @overload
    def OnHandleChange(self, newHandle: System.IntPtr) -> None: ...
    @overload
    def OnMessage() -> (Message): ...

class KeyEventArgs(System.EventArgs):
    """    """
    def __init__(self, keyData: Keys): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def KeyCode(self) -> Keys: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyValue(self) -> int: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    @property
    def SuppressKeyPress(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...
    @SuppressKeyPress.setter
    def SuppressKeyPress(self, value: System.Void): ...

class KeyEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: KeyEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: KeyEventArgs) -> None: ...

class KeyPressEventArgs(System.EventArgs):
    """    """
    def __init__(self, keyChar: System.Char): ...
    @property
    def Handled(self) -> bool: ...
    @property
    def KeyChar(self) -> System.Char: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...
    @KeyChar.setter
    def KeyChar(self, value: System.Void): ...

class KeyPressEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: KeyPressEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: KeyPressEventArgs) -> None: ...

class Keys(enum.Enum):
    None_ = 0
    LButton = 1
    RButton = 2
    Cancel = 3
    MButton = 4
    XButton1 = 5
    XButton2 = 6
    Back = 8
    Tab = 9
    LineFeed = 10
    Clear = 12
    Enter = 13
    Return = 13
    ShiftKey = 16
    ControlKey = 17
    Menu = 18
    Pause = 19
    CapsLock = 20
    Capital = 20
    HangulMode = 21
    HanguelMode = 21
    KanaMode = 21
    JunjaMode = 23
    FinalMode = 24
    KanjiMode = 25
    HanjaMode = 25
    Escape = 27
    IMEConvert = 28
    IMENonconvert = 29
    IMEAccept = 30
    IMEAceept = 30
    IMEModeChange = 31
    Space = 32
    Prior = 33
    PageUp = 33
    PageDown = 34
    Next = 34
    End = 35
    Home = 36
    Left = 37
    Up = 38
    Right = 39
    Down = 40
    Select = 41
    Print = 42
    Execute = 43
    Snapshot = 44
    PrintScreen = 44
    Insert = 45
    Delete = 46
    Help = 47
    D0 = 48
    D1 = 49
    D2 = 50
    D3 = 51
    D4 = 52
    D5 = 53
    D6 = 54
    D7 = 55
    D8 = 56
    D9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    LWin = 91
    RWin = 92
    Apps = 93
    Sleep = 95
    NumPad0 = 96
    NumPad1 = 97
    NumPad2 = 98
    NumPad3 = 99
    NumPad4 = 100
    NumPad5 = 101
    NumPad6 = 102
    NumPad7 = 103
    NumPad8 = 104
    NumPad9 = 105
    Multiply = 106
    Add = 107
    Separator = 108
    Subtract = 109
    Decimal = 110
    Divide = 111
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    F13 = 124
    F14 = 125
    F15 = 126
    F16 = 127
    F17 = 128
    F18 = 129
    F19 = 130
    F20 = 131
    F21 = 132
    F22 = 133
    F23 = 134
    F24 = 135
    NumLock = 144
    Scroll = 145
    LShiftKey = 160
    RShiftKey = 161
    LControlKey = 162
    RControlKey = 163
    LMenu = 164
    RMenu = 165
    BrowserBack = 166
    BrowserForward = 167
    BrowserRefresh = 168
    BrowserStop = 169
    BrowserSearch = 170
    BrowserFavorites = 171
    BrowserHome = 172
    VolumeMute = 173
    VolumeDown = 174
    VolumeUp = 175
    MediaNextTrack = 176
    MediaPreviousTrack = 177
    MediaStop = 178
    MediaPlayPause = 179
    LaunchMail = 180
    SelectMedia = 181
    LaunchApplication1 = 182
    LaunchApplication2 = 183
    OemSemicolon = 186
    Oem1 = 186
    Oemplus = 187
    Oemcomma = 188
    OemMinus = 189
    OemPeriod = 190
    Oem2 = 191
    OemQuestion = 191
    Oem3 = 192
    Oemtilde = 192
    Oem4 = 219
    OemOpenBrackets = 219
    OemPipe = 220
    Oem5 = 220
    OemCloseBrackets = 221
    Oem6 = 221
    OemQuotes = 222
    Oem7 = 222
    Oem8 = 223
    Oem102 = 226
    OemBackslash = 226
    ProcessKey = 229
    Packet = 231
    Attn = 246
    Crsel = 247
    Exsel = 248
    EraseEof = 249
    Play = 250
    Zoom = 251
    NoName = 252
    Pa1 = 253
    OemClear = 254
    KeyCode = 65535
    Shift = 65536
    Control = 131072
    Alt = 262144
    Modifiers = -65536

class KeysConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def Compare(self, a: object, b: object) -> int: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class Label(Control):
    """    """
    def __init__(self): ...
    @property
    def AutoEllipsis(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LiveSetting(self) -> Automation.AutomationLiveSetting: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def PreferredWidth(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def UseMnemonic(self) -> bool: ...
    @overload
    def GetPreferredSize(self, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @AutoEllipsis.setter
    def AutoEllipsis(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageAlign.setter
    def ImageAlign(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @ImageList.setter
    def ImageList(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @LiveSetting.setter
    def LiveSetting(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @UseMnemonic.setter
    def UseMnemonic(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextAlignChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class LabelEditEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, item: int): ...
    @overload
    def __init__(self, item: int, label: str): ...
    @property
    def CancelEdit(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @property
    def Label(self) -> str: ...
    @CancelEdit.setter
    def CancelEdit(self, value: System.Void): ...

class LabelEditEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: LabelEditEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: LabelEditEventArgs) -> None: ...

class LayoutEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, affectedComponent: ComponentModel.IComponent, affectedProperty: str): ...
    @overload
    def __init__(self, affectedControl: Control, affectedProperty: str): ...
    @property
    def AffectedComponent(self) -> ComponentModel.IComponent: ...
    @property
    def AffectedControl(self) -> Control: ...
    @property
    def AffectedProperty(self) -> str: ...

class LayoutEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: LayoutEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: LayoutEventArgs) -> None: ...

class LayoutSettings(object):
    """    """
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...

class LeftRightAlignment(enum.Enum):
    Left = 0
    Right = 1

class LinkArea(System.ValueType):
    """    """
    def __init__(self, start: int, length: int): ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def Equals(self, other: LinkArea) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @Length.setter
    def Length(self, value: System.Void): ...
    @Start.setter
    def Start(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class LinkBehavior(enum.Enum):
    SystemDefault = 0
    AlwaysUnderline = 1
    HoverUnderline = 2
    NeverUnderline = 3

class LinkClickedEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, linkText: str): ...
    @overload
    def __init__(self, linkText: str, linkStart: int, linkLength: int): ...
    @property
    def LinkLength(self) -> int: ...
    @property
    def LinkStart(self) -> int: ...
    @property
    def LinkText(self) -> str: ...

class LinkClickedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: LinkClickedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: LinkClickedEventArgs) -> None: ...

class LinkConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class LinkLabel(Label):
    """    """
    def __init__(self): ...
    @property
    def ActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def DisabledLinkColor(self) -> Drawing.Color: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def LinkArea(self) -> LinkArea: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Drawing.Color: ...
    @property
    def Links(self) -> LinkCollection: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Drawing.Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: System.Void): ...
    @DisabledLinkColor.setter
    def DisabledLinkColor(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @LinkArea.setter
    def LinkArea(self, value: System.Void): ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: System.Void): ...
    @LinkColor.setter
    def LinkColor(self, value: System.Void): ...
    @LinkVisited.setter
    def LinkVisited(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: System.Void): ...
    @property
    def TabStopChanged(self): ...
    @property
    def LinkClicked(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextAlignChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class LinkLabelLinkClickedEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, link: Link): ...
    @overload
    def __init__(self, link: Link, button: MouseButtons): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Link(self) -> Link: ...

class LinkLabelLinkClickedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: LinkLabelLinkClickedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: LinkLabelLinkClickedEventArgs) -> None: ...

class LinkState(enum.Enum):
    Normal = 0
    Hover = 1
    Active = 2
    Visited = 4

class ListView(Control):
    """    """
    def __init__(self): ...
    @overload
    def ArrangeIcons() -> None: ...
    @overload
    def ArrangeIcons(self, value: ListViewAlignment) -> None: ...
    @overload
    def AutoResizeColumn(self, columnIndex: int, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    @overload
    def AutoResizeColumns(self, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    @overload
    def BeginUpdate() -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def EndUpdate() -> None: ...
    @overload
    def EnsureVisible(self, index: int) -> None: ...
    @overload
    def FindItemWithText(self, text: str) -> ListViewItem: ...
    @overload
    def FindItemWithText(self, text: str, includeSubItemsInSearch: bool, startIndex: int) -> ListViewItem: ...
    @overload
    def FindItemWithText(self, text: str, includeSubItemsInSearch: bool, startIndex: int, isPrefixSearch: bool) -> ListViewItem: ...
    @overload
    def FindNearestItem(self, dir_: SearchDirectionHint, point: Drawing.Point) -> ListViewItem: ...
    @overload
    def FindNearestItem(self, searchDirection: SearchDirectionHint, x: int, y: int) -> ListViewItem: ...
    @property
    def Activation(self) -> ItemActivation: ...
    @property
    def Alignment(self) -> ListViewAlignment: ...
    @property
    def AllowColumnReorder(self) -> bool: ...
    @property
    def AutoArrange(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BackgroundImageTiled(self) -> bool: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CheckBoxes(self) -> bool: ...
    @property
    def CheckedIndices(self) -> CheckedIndexCollection: ...
    @property
    def CheckedItems(self) -> CheckedListViewItemCollection: ...
    @property
    def Columns(self) -> ColumnHeaderCollection: ...
    @property
    def FocusedItem(self) -> ListViewItem: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def FullRowSelect(self) -> bool: ...
    @property
    def GridLines(self) -> bool: ...
    @property
    def GroupImageList(self) -> ImageList: ...
    @property
    def Groups(self) -> ListViewGroupCollection: ...
    @property
    def HeaderStyle(self) -> ColumnHeaderStyle: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def HotTracking(self) -> bool: ...
    @property
    def HoverSelection(self) -> bool: ...
    @property
    def InsertionMark(self) -> ListViewInsertionMark: ...
    @property
    def Items(self) -> ListViewItemCollection: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def LabelWrap(self) -> bool: ...
    @property
    def LargeImageList(self) -> ImageList: ...
    @property
    def ListViewItemSorter(self) -> Collections.IComparer: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def OwnerDraw(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Scrollable(self) -> bool: ...
    @property
    def SelectedIndices(self) -> SelectedIndexCollection: ...
    @property
    def SelectedItems(self) -> SelectedListViewItemCollection: ...
    @property
    def ShowGroups(self) -> bool: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def SmallImageList(self) -> ImageList: ...
    @property
    def Sorting(self) -> SortOrder: ...
    @property
    def StateImageList(self) -> ImageList: ...
    @property
    def Text(self) -> str: ...
    @property
    def TileSize(self) -> Drawing.Size: ...
    @property
    def TopItem(self) -> ListViewItem: ...
    @property
    def UseCompatibleStateImageBehavior(self) -> bool: ...
    @property
    def View(self) -> View: ...
    @property
    def VirtualListSize(self) -> int: ...
    @property
    def VirtualMode(self) -> bool: ...
    @overload
    def GetItemAt(self, x: int, y: int) -> ListViewItem: ...
    @overload
    def GetItemRect(self, index: int) -> Drawing.Rectangle: ...
    @overload
    def GetItemRect(self, index: int, portion: ItemBoundsPortion) -> Drawing.Rectangle: ...
    @overload
    def HitTest(self, point: Drawing.Point) -> ListViewHitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> ListViewHitTestInfo: ...
    @overload
    def RedrawItems(self, startIndex: int, endIndex: int, invalidateOnly: bool) -> None: ...
    @Activation.setter
    def Activation(self, value: System.Void): ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @AllowColumnReorder.setter
    def AllowColumnReorder(self, value: System.Void): ...
    @AutoArrange.setter
    def AutoArrange(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BackgroundImageTiled.setter
    def BackgroundImageTiled(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CheckBoxes.setter
    def CheckBoxes(self, value: System.Void): ...
    @FocusedItem.setter
    def FocusedItem(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @FullRowSelect.setter
    def FullRowSelect(self, value: System.Void): ...
    @GridLines.setter
    def GridLines(self, value: System.Void): ...
    @GroupImageList.setter
    def GroupImageList(self, value: System.Void): ...
    @HeaderStyle.setter
    def HeaderStyle(self, value: System.Void): ...
    @HideSelection.setter
    def HideSelection(self, value: System.Void): ...
    @HotTracking.setter
    def HotTracking(self, value: System.Void): ...
    @HoverSelection.setter
    def HoverSelection(self, value: System.Void): ...
    @LabelEdit.setter
    def LabelEdit(self, value: System.Void): ...
    @LabelWrap.setter
    def LabelWrap(self, value: System.Void): ...
    @LargeImageList.setter
    def LargeImageList(self, value: System.Void): ...
    @ListViewItemSorter.setter
    def ListViewItemSorter(self, value: System.Void): ...
    @MultiSelect.setter
    def MultiSelect(self, value: System.Void): ...
    @OwnerDraw.setter
    def OwnerDraw(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @Scrollable.setter
    def Scrollable(self, value: System.Void): ...
    @ShowGroups.setter
    def ShowGroups(self, value: System.Void): ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: System.Void): ...
    @SmallImageList.setter
    def SmallImageList(self, value: System.Void): ...
    @Sorting.setter
    def Sorting(self, value: System.Void): ...
    @StateImageList.setter
    def StateImageList(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TileSize.setter
    def TileSize(self, value: System.Void): ...
    @TopItem.setter
    def TopItem(self, value: System.Void): ...
    @UseCompatibleStateImageBehavior.setter
    def UseCompatibleStateImageBehavior(self, value: System.Void): ...
    @View.setter
    def View(self, value: System.Void): ...
    @VirtualListSize.setter
    def VirtualListSize(self, value: System.Void): ...
    @VirtualMode.setter
    def VirtualMode(self, value: System.Void): ...
    @overload
    def Sort() -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def AfterLabelEdit(self): ...
    @property
    def BeforeLabelEdit(self): ...
    @property
    def CacheVirtualItems(self): ...
    @property
    def ColumnClick(self): ...
    @property
    def GroupTaskLinkClick(self): ...
    @property
    def ColumnReordered(self): ...
    @property
    def ColumnWidthChanged(self): ...
    @property
    def ColumnWidthChanging(self): ...
    @property
    def DrawColumnHeader(self): ...
    @property
    def DrawItem(self): ...
    @property
    def DrawSubItem(self): ...
    @property
    def ItemActivate(self): ...
    @property
    def ItemCheck(self): ...
    @property
    def ItemChecked(self): ...
    @property
    def ItemDrag(self): ...
    @property
    def ItemMouseHover(self): ...
    @property
    def ItemSelectionChanged(self): ...
    @property
    def GroupCollapsedStateChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def RetrieveVirtualItem(self): ...
    @property
    def SearchForVirtualItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def VirtualItemsSelectionRangeChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ListBindingConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class ListBindingHelper(object):
    """    """
    @overload
    @staticmethod
    def GetList(list_: object) -> object: ...
    @overload
    @staticmethod
    def GetList(dataSource: object, dataMember: str) -> object: ...
    @overload
    @staticmethod
    def GetListItemProperties(list_: object) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetListItemProperties(list_: object, listAccessors: ComponentModel.System.Array[ComponentModel.PropertyDescriptor]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetListItemProperties(dataSource: object, dataMember: str, listAccessors: ComponentModel.System.Array[ComponentModel.PropertyDescriptor]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    @staticmethod
    def GetListItemType(list_: object) -> System.Type: ...
    @overload
    @staticmethod
    def GetListItemType(dataSource: object, dataMember: str) -> System.Type: ...
    @overload
    @staticmethod
    def GetListName(list_: object, listAccessors: ComponentModel.System.Array[ComponentModel.PropertyDescriptor]) -> str: ...

class ListBox(ListControl):
    """    """
    def __init__(self): ...
    @property
    def NoMatches(self) -> int: ...
    @property
    def DefaultItemHeight(self) -> int: ...
    @overload
    def BeginUpdate() -> None: ...
    @overload
    def ClearSelected() -> None: ...
    @overload
    def EndUpdate() -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def ColumnWidth(self) -> int: ...
    @property
    def CustomTabOffsets(self) -> IntegerCollection: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def HorizontalExtent(self) -> int: ...
    @property
    def HorizontalScrollbar(self) -> bool: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MultiColumn(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ScrollAlwaysVisible(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndices(self) -> SelectedIndexCollection: ...
    @property
    def SelectedItem(self) -> object: ...
    @property
    def SelectedItems(self) -> SelectedObjectCollection: ...
    @property
    def SelectionMode(self) -> SelectionMode: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopIndex(self) -> int: ...
    @property
    def UseCustomTabOffsets(self) -> bool: ...
    @property
    def UseTabStops(self) -> bool: ...
    @overload
    def GetItemHeight(self, index: int) -> int: ...
    @overload
    def GetItemRectangle(self, index: int) -> Drawing.Rectangle: ...
    @overload
    def GetSelected(self, index: int) -> bool: ...
    @overload
    def IndexFromPoint(self, p: Drawing.Point) -> int: ...
    @overload
    def IndexFromPoint(self, x: int, y: int) -> int: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def ResetBackColor() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @ColumnWidth.setter
    def ColumnWidth(self, value: System.Void): ...
    @DrawMode.setter
    def DrawMode(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @HorizontalExtent.setter
    def HorizontalExtent(self, value: System.Void): ...
    @HorizontalScrollbar.setter
    def HorizontalScrollbar(self, value: System.Void): ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: System.Void): ...
    @ItemHeight.setter
    def ItemHeight(self, value: System.Void): ...
    @MultiColumn.setter
    def MultiColumn(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @ScrollAlwaysVisible.setter
    def ScrollAlwaysVisible(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @SelectionMode.setter
    def SelectionMode(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TopIndex.setter
    def TopIndex(self, value: System.Void): ...
    @UseCustomTabOffsets.setter
    def UseCustomTabOffsets(self, value: System.Void): ...
    @UseTabStops.setter
    def UseTabStops(self, value: System.Void): ...
    @overload
    def SetSelected(self, index: int, value: bool) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def DrawItem(self): ...
    @property
    def MeasureItem(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DisplayMemberChanged(self): ...
    @property
    def Format(self): ...
    @property
    def FormatInfoChanged(self): ...
    @property
    def FormatStringChanged(self): ...
    @property
    def FormattingEnabledChanged(self): ...
    @property
    def ValueMemberChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ListControl(Control):
    """    """
    @property
    def DataSource(self) -> object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def FormatInfo(self) -> System.IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def FormattingEnabled(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedValue(self) -> object: ...
    @property
    def ValueMember(self) -> str: ...
    @overload
    def GetItemText(self, item: object) -> str: ...
    @DataSource.setter
    def DataSource(self, value: System.Void): ...
    @DisplayMember.setter
    def DisplayMember(self, value: System.Void): ...
    @FormatInfo.setter
    def FormatInfo(self, value: System.Void): ...
    @FormatString.setter
    def FormatString(self, value: System.Void): ...
    @FormattingEnabled.setter
    def FormattingEnabled(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedValue.setter
    def SelectedValue(self, value: System.Void): ...
    @ValueMember.setter
    def ValueMember(self, value: System.Void): ...
    @property
    def DataSourceChanged(self): ...
    @property
    def DisplayMemberChanged(self): ...
    @property
    def Format(self): ...
    @property
    def FormatInfoChanged(self): ...
    @property
    def FormatStringChanged(self): ...
    @property
    def FormattingEnabledChanged(self): ...
    @property
    def ValueMemberChanged(self): ...
    @property
    def SelectedValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ListControlConvertEventArgs(ConvertEventArgs):
    """    """
    def __init__(self, value: object, desiredType: System.Type, listItem: object): ...
    @property
    def ListItem(self) -> object: ...

class ListControlConvertEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ListControlConvertEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ListControlConvertEventArgs) -> None: ...

class ListViewAlignment(enum.Enum):
    Default = 0
    Left = 1
    Top = 2
    SnapToGrid = 5

class ListViewGroup(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, header: str): ...
    @overload
    def __init__(self, key: str, headerText: str): ...
    @overload
    def __init__(self, header: str, headerAlignment: HorizontalAlignment): ...
    @property
    def CollapsedState(self) -> ListViewGroupCollapsedState: ...
    @property
    def Footer(self) -> str: ...
    @property
    def FooterAlignment(self) -> HorizontalAlignment: ...
    @property
    def Header(self) -> str: ...
    @property
    def HeaderAlignment(self) -> HorizontalAlignment: ...
    @property
    def Items(self) -> ListViewItemCollection: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Subtitle(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TaskLink(self) -> str: ...
    @property
    def TitleImageIndex(self) -> int: ...
    @property
    def TitleImageKey(self) -> str: ...
    @CollapsedState.setter
    def CollapsedState(self, value: System.Void): ...
    @Footer.setter
    def Footer(self, value: System.Void): ...
    @FooterAlignment.setter
    def FooterAlignment(self, value: System.Void): ...
    @Header.setter
    def Header(self, value: System.Void): ...
    @HeaderAlignment.setter
    def HeaderAlignment(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Subtitle.setter
    def Subtitle(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @TaskLink.setter
    def TaskLink(self, value: System.Void): ...
    @TitleImageIndex.setter
    def TitleImageIndex(self, value: System.Void): ...
    @TitleImageKey.setter
    def TitleImageKey(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ListViewGroupCollapsedState(enum.Enum):
    Default = 0
    Expanded = 1
    Collapsed = 2

class ListViewGroupCollection(object):
    """    """
    @overload
    def Add(self, group: ListViewGroup) -> int: ...
    @overload
    def Add(self, key: str, headerText: str) -> ListViewGroup: ...
    @overload
    def AddRange(self, groups: ListViewGroupCollection) -> None: ...
    @overload
    def AddRange(self, groups: System.Array[ListViewGroup]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: ListViewGroup) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ListViewGroup: ...
    @property
    def Item(self) -> ListViewGroup: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: ListViewGroup) -> int: ...
    @overload
    def Insert(self, index: int, group: ListViewGroup) -> None: ...
    @overload
    def Remove(self, group: ListViewGroup) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ListViewGroupEventArgs(System.EventArgs):
    """    """
    def __init__(self, groupIndex: int): ...
    @property
    def GroupIndex(self) -> int: ...

class ListViewHitTestInfo(object):
    """    """
    def __init__(self, hitItem: ListViewItem, hitSubItem: ListViewSubItem, hitLocation: ListViewHitTestLocations): ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Location(self) -> ListViewHitTestLocations: ...
    @property
    def SubItem(self) -> ListViewSubItem: ...

class ListViewHitTestLocations(enum.Enum):
    None_ = 1
    Image = 2
    Label = 4
    BelowClientArea = 16
    RightOfClientArea = 32
    LeftOfClientArea = 64
    AboveClientArea = 256
    StateImage = 512

class ListViewInsertionMark(object):
    """    """
    @property
    def AppearsAfterItem(self) -> bool: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Color(self) -> Drawing.Color: ...
    @property
    def Index(self) -> int: ...
    @overload
    def NearestIndex(self, pt: Drawing.Point) -> int: ...
    @AppearsAfterItem.setter
    def AppearsAfterItem(self, value: System.Void): ...
    @Color.setter
    def Color(self, value: System.Void): ...
    @Index.setter
    def Index(self, value: System.Void): ...

class ListViewItem(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, items: System.System.Array[str]): ...
    @overload
    def __init__(self, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: System.Array[ListViewSubItem], imageKey: str): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageKey: str): ...
    @overload
    def __init__(self, text: str, imageKey: str): ...
    @overload
    def __init__(self, text: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int): ...
    @overload
    def __init__(self, subItems: System.Array[ListViewSubItem], imageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: System.Array[ListViewSubItem], imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, text: str, imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: System.Array[ListViewSubItem], imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageIndex: int, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageKey: str, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageKey: str, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font, group: ListViewGroup): ...
    @overload
    def __init__(self, items: System.System.Array[str], imageIndex: int, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font, group: ListViewGroup): ...
    @overload
    def BeginEdit() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    def EnsureVisible() -> None: ...
    @overload
    def FindNearestItem(self, searchDirection: SearchDirectionHint) -> ListViewItem: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Group(self) -> ListViewGroup: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def IndentCount(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> Drawing.Point: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def StateImageIndex(self) -> int: ...
    @property
    def SubItems(self) -> ListViewSubItemCollection: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def UseItemStyleForSubItems(self) -> bool: ...
    @overload
    def GetBounds(self, portion: ItemBoundsPortion) -> Drawing.Rectangle: ...
    @overload
    def GetSubItemAt(self, x: int, y: int) -> ListViewSubItem: ...
    @overload
    def Remove() -> None: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Focused.setter
    def Focused(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Group.setter
    def Group(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @IndentCount.setter
    def IndentCount(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @Selected.setter
    def Selected(self, value: System.Void): ...
    @StateImageIndex.setter
    def StateImageIndex(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @UseItemStyleForSubItems.setter
    def UseItemStyleForSubItems(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ListViewItemConverter(ComponentModel.ExpandableObjectConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class ListViewItemMouseHoverEventArgs(System.EventArgs):
    """    """
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...

class ListViewItemMouseHoverEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ListViewItemMouseHoverEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ListViewItemMouseHoverEventArgs) -> None: ...

class ListViewItemSelectionChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, item: ListViewItem, itemIndex: int, isSelected: bool): ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...

class ListViewItemSelectionChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ListViewItemSelectionChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ListViewItemSelectionChangedEventArgs) -> None: ...

class ListViewItemStates(enum.Enum):
    Selected = 1
    Grayed = 2
    Checked = 8
    Focused = 16
    Default = 32
    Hot = 64
    Marked = 128
    Indeterminate = 256
    ShowKeyboardCues = 512

class ListViewItemStateImageIndexConverter(ImageIndexConverter):
    """    """
    def __init__(self): ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...

class ListViewVirtualItemsSelectionRangeChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, startIndex: int, endIndex: int, isSelected: bool): ...
    @property
    def EndIndex(self) -> int: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def StartIndex(self) -> int: ...

class ListViewVirtualItemsSelectionRangeChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs) -> None: ...

class MaskedTextBox(TextBoxBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mask: str): ...
    @overload
    def __init__(self, maskedTextProvider: ComponentModel.MaskedTextProvider): ...
    @overload
    def ClearUndo() -> None: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def BeepOnError(self) -> bool: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def Culture(self) -> Globalization.CultureInfo: ...
    @property
    def CutCopyMaskFormat(self) -> MaskFormat: ...
    @property
    def FormatProvider(self) -> System.IFormatProvider: ...
    @property
    def HidePromptOnLeave(self) -> bool: ...
    @property
    def InsertKeyMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwriteMode(self) -> bool: ...
    @property
    def Lines(self) -> System.System.Array[str]: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskedTextProvider(self) -> ComponentModel.MaskedTextProvider: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def PromptChar(self) -> System.Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def RejectInputOnFirstFailure(self) -> bool: ...
    @property
    def ResetOnPrompt(self) -> bool: ...
    @property
    def ResetOnSpace(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def TextMaskFormat(self) -> MaskFormat: ...
    @property
    def UseSystemPasswordChar(self) -> bool: ...
    @property
    def ValidatingType(self) -> System.Type: ...
    @property
    def WordWrap(self) -> bool: ...
    @overload
    def GetCharFromPosition(self, pt: Drawing.Point) -> System.Char: ...
    @overload
    def GetCharIndexFromPosition(self, pt: Drawing.Point) -> int: ...
    @overload
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    @overload
    def GetFirstCharIndexOfCurrentLine() -> int: ...
    @overload
    def GetLineFromCharIndex(self, index: int) -> int: ...
    @overload
    def GetPositionFromCharIndex(self, index: int) -> Drawing.Point: ...
    @overload
    def ScrollToCaret() -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: System.Void): ...
    @AllowPromptAsInput.setter
    def AllowPromptAsInput(self, value: System.Void): ...
    @AsciiOnly.setter
    def AsciiOnly(self, value: System.Void): ...
    @BeepOnError.setter
    def BeepOnError(self, value: System.Void): ...
    @Culture.setter
    def Culture(self, value: System.Void): ...
    @CutCopyMaskFormat.setter
    def CutCopyMaskFormat(self, value: System.Void): ...
    @FormatProvider.setter
    def FormatProvider(self, value: System.Void): ...
    @HidePromptOnLeave.setter
    def HidePromptOnLeave(self, value: System.Void): ...
    @InsertKeyMode.setter
    def InsertKeyMode(self, value: System.Void): ...
    @Lines.setter
    def Lines(self, value: System.Void): ...
    @Mask.setter
    def Mask(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @PromptChar.setter
    def PromptChar(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @RejectInputOnFirstFailure.setter
    def RejectInputOnFirstFailure(self, value: System.Void): ...
    @ResetOnPrompt.setter
    def ResetOnPrompt(self, value: System.Void): ...
    @ResetOnSpace.setter
    def ResetOnSpace(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @TextMaskFormat.setter
    def TextMaskFormat(self, value: System.Void): ...
    @UseSystemPasswordChar.setter
    def UseSystemPasswordChar(self, value: System.Void): ...
    @ValidatingType.setter
    def ValidatingType(self, value: System.Void): ...
    @WordWrap.setter
    def WordWrap(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def Undo() -> None: ...
    @overload
    def ValidateText() -> object: ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def IsOverwriteModeChanged(self): ...
    @property
    def MaskChanged(self): ...
    @property
    def MaskInputRejected(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def TextAlignChanged(self): ...
    @property
    def TypeValidationCompleted(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class MaskFormat(enum.Enum):
    ExcludePromptAndLiterals = 0
    IncludePrompt = 1
    IncludeLiterals = 2
    IncludePromptAndLiterals = 3

class MaskInputRejectedEventArgs(System.EventArgs):
    """    """
    def __init__(self, position: int, rejectionHint: ComponentModel.MaskedTextResultHint): ...
    @property
    def Position(self) -> int: ...
    @property
    def RejectionHint(self) -> ComponentModel.MaskedTextResultHint: ...

class MaskInputRejectedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: MaskInputRejectedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: MaskInputRejectedEventArgs) -> None: ...

class MdiClient(Control):
    """    """
    def __init__(self): ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def MdiChildren(self) -> System.Array[Form]: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class MdiLayout(enum.Enum):
    Cascade = 0
    TileHorizontal = 1
    TileVertical = 2
    ArrangeIcons = 3

class MeasureItemEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, graphics: Drawing.Graphics, index: int): ...
    @overload
    def __init__(self, graphics: Drawing.Graphics, index: int, itemHeight: int): ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Index(self) -> int: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def ItemWidth(self) -> int: ...
    @ItemHeight.setter
    def ItemHeight(self, value: System.Void): ...
    @ItemWidth.setter
    def ItemWidth(self, value: System.Void): ...

class MeasureItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: MeasureItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: MeasureItemEventArgs) -> None: ...

class MenuGlyph(enum.Enum):
    Arrow = 0
    Min = 0
    Checkmark = 1
    Bullet = 2
    Max = 2

class MenuStrip(ToolStrip):
    """    """
    def __init__(self): ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def MdiWindowListItem(self) -> ToolStripMenuItem: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    @CanOverflow.setter
    def CanOverflow(self, value: System.Void): ...
    @GripStyle.setter
    def GripStyle(self, value: System.Void): ...
    @MdiWindowListItem.setter
    def MdiWindowListItem(self, value: System.Void): ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: System.Void): ...
    @Stretch.setter
    def Stretch(self, value: System.Void): ...
    @property
    def MenuActivate(self): ...
    @property
    def MenuDeactivate(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class MergeAction(enum.Enum):
    Append = 0
    Insert = 1
    Replace = 2
    Remove = 3
    MatchOnly = 4

class MessageBox(object):
    """    """
    @overload
    @staticmethod
    def Show(text: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, displayHelpButton: bool) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: object) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: object) -> DialogResult: ...

class MessageBoxButtons(enum.Enum):
    OK = 0
    OKCancel = 1
    AbortRetryIgnore = 2
    YesNoCancel = 3
    YesNo = 4
    RetryCancel = 5
    CancelTryContinue = 6

class MessageBoxDefaultButton(enum.Enum):
    Button1 = 0
    Button2 = 256
    Button3 = 512
    Button4 = 768

class MessageBoxIcon(enum.Enum):
    None_ = 0
    Hand = 16
    Error = 16
    Stop = 16
    Question = 32
    Exclamation = 48
    Warning = 48
    Asterisk = 64
    Information = 64

class MessageBoxOptions(enum.Enum):
    DefaultDesktopOnly = 131072
    RightAlign = 524288
    RtlReading = 1048576
    ServiceNotification = 2097152

class MethodInvoker(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class MouseButtons(enum.Enum):
    None_ = 0
    Left = 1048576
    Right = 2097152
    Middle = 4194304
    XButton1 = 8388608
    XButton2 = 16777216

class MouseEventArgs(System.EventArgs):
    """    """
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Clicks(self) -> int: ...
    @property
    def Delta(self) -> int: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...

class MouseEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: MouseEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: MouseEventArgs) -> None: ...

class NativeWindow(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def AssignHandle(self, handle: System.IntPtr) -> None: ...
    @overload
    def CreateHandle(self, cp: CreateParams) -> None: ...
    @overload
    def DefWndProc() -> (Message): ...
    @overload
    def DestroyHandle() -> None: ...
    @overload
    @staticmethod
    def FromHandle(handle: System.IntPtr) -> NativeWindow: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @overload
    def ReleaseHandle() -> None: ...

class NavigateEventArgs(System.EventArgs):
    """    """
    def __init__(self, isForward: bool): ...
    @property
    def Forward(self) -> bool: ...

class NavigateEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, ne: NavigateEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, ne: NavigateEventArgs) -> None: ...

class NodeLabelEditEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, node: TreeNode): ...
    @overload
    def __init__(self, node: TreeNode, label: str): ...
    @property
    def CancelEdit(self) -> bool: ...
    @property
    def Label(self) -> str: ...
    @property
    def Node(self) -> TreeNode: ...
    @CancelEdit.setter
    def CancelEdit(self, value: System.Void): ...

class NodeLabelEditEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: NodeLabelEditEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: NodeLabelEditEventArgs) -> None: ...

class NotifyIcon(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @property
    def BalloonTipIcon(self) -> ToolTipIcon: ...
    @property
    def BalloonTipText(self) -> str: ...
    @property
    def BalloonTipTitle(self) -> str: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @BalloonTipIcon.setter
    def BalloonTipIcon(self, value: System.Void): ...
    @BalloonTipText.setter
    def BalloonTipText(self, value: System.Void): ...
    @BalloonTipTitle.setter
    def BalloonTipTitle(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def ShowBalloonTip(self, timeout: int) -> None: ...
    @overload
    def ShowBalloonTip(self, timeout: int, tipTitle: str, tipText: str, tipIcon: ToolTipIcon) -> None: ...
    @property
    def BalloonTipClicked(self): ...
    @property
    def BalloonTipClosed(self): ...
    @property
    def BalloonTipShown(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def Disposed(self): ...

class NumericUpDown(UpDownBase):
    """    """
    def __init__(self): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def DownButton() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def Accelerations(self) -> NumericUpDownAccelerationCollection: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def Hexadecimal(self) -> bool: ...
    @property
    def Increment(self) -> System.Decimal: ...
    @property
    def Maximum(self) -> System.Decimal: ...
    @property
    def Minimum(self) -> System.Decimal: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Text(self) -> str: ...
    @property
    def ThousandsSeparator(self) -> bool: ...
    @property
    def Value(self) -> System.Decimal: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: System.Void): ...
    @Hexadecimal.setter
    def Hexadecimal(self, value: System.Void): ...
    @Increment.setter
    def Increment(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ThousandsSeparator.setter
    def ThousandsSeparator(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def UpButton() -> None: ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class NumericUpDownAcceleration(object):
    """    """
    def __init__(self, seconds: int, increment: System.Decimal): ...
    @property
    def Increment(self) -> System.Decimal: ...
    @property
    def Seconds(self) -> int: ...
    @Increment.setter
    def Increment(self, value: System.Void): ...
    @Seconds.setter
    def Seconds(self, value: System.Void): ...

class NumericUpDownAccelerationCollection(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, acceleration: NumericUpDownAcceleration) -> None: ...
    @overload
    def AddRange(self, accelerations: System.Array[NumericUpDownAcceleration]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, acceleration: NumericUpDownAcceleration) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[NumericUpDownAcceleration], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> NumericUpDownAcceleration: ...
    @overload
    def Remove(self, acceleration: NumericUpDownAcceleration) -> bool: ...

class OpacityConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class OpenFileDialog(FileDialog):
    """    """
    def __init__(self): ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def Multiselect(self) -> bool: ...
    @property
    def ReadOnlyChecked(self) -> bool: ...
    @property
    def SafeFileName(self) -> str: ...
    @property
    def SafeFileNames(self) -> System.System.Array[str]: ...
    @property
    def SelectReadOnly(self) -> bool: ...
    @property
    def ShowPreview(self) -> bool: ...
    @property
    def ShowReadOnly(self) -> bool: ...
    @overload
    def OpenFile() -> IO.Stream: ...
    @overload
    def Reset() -> None: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: System.Void): ...
    @Multiselect.setter
    def Multiselect(self, value: System.Void): ...
    @ReadOnlyChecked.setter
    def ReadOnlyChecked(self, value: System.Void): ...
    @SelectReadOnly.setter
    def SelectReadOnly(self, value: System.Void): ...
    @ShowPreview.setter
    def ShowPreview(self, value: System.Void): ...
    @ShowReadOnly.setter
    def ShowReadOnly(self, value: System.Void): ...
    @property
    def FileOk(self): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class Orientation(enum.Enum):
    Horizontal = 0
    Vertical = 1

class OSFeature(FeatureSupport):
    """    """
    @property
    def LayeredWindows(self) -> object: ...
    @property
    def Themes(self) -> object: ...
    @property
    def Feature(self) -> OSFeature: ...
    @overload
    def GetVersionPresent(self, feature: object) -> System.Version: ...
    @overload
    @staticmethod
    def IsPresent(enumVal: SystemParameter) -> bool: ...

class OwnerDrawPropertyBag(System.MarshalByRefObject):
    """    """
    @overload
    @staticmethod
    def Copy(value: OwnerDrawPropertyBag) -> OwnerDrawPropertyBag: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @overload
    def IsEmpty() -> bool: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...

class PaintEventArgs(System.EventArgs):
    """    """
    def __init__(self, graphics: Drawing.Graphics, clipRect: Drawing.Rectangle): ...
    @overload
    def Dispose() -> None: ...
    @property
    def ClipRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...

class PaintEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PaintEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PaintEventArgs) -> None: ...

class Panel(ScrollableControl):
    """    """
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class PictureBox(Control):
    """    """
    def __init__(self): ...
    @overload
    def CancelAsync() -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ErrorImage(self) -> Drawing.Image: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageLocation(self) -> str: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InitialImage(self) -> Drawing.Image: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def SizeMode(self) -> PictureBoxSizeMode: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def WaitOnLoad(self) -> bool: ...
    @overload
    def Load() -> None: ...
    @overload
    def Load(self, url: str) -> None: ...
    @overload
    def LoadAsync() -> None: ...
    @overload
    def LoadAsync(self, url: str) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @ErrorImage.setter
    def ErrorImage(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageLocation.setter
    def ImageLocation(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @InitialImage.setter
    def InitialImage(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @SizeMode.setter
    def SizeMode(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @WaitOnLoad.setter
    def WaitOnLoad(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def LoadCompleted(self): ...
    @property
    def LoadProgressChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeModeChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def Leave(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class PictureBoxSizeMode(enum.Enum):
    Normal = 0
    StretchImage = 1
    AutoSize = 2
    CenterImage = 3
    Zoom = 4

class PopupEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, associatedWindow: IWin32Window, associatedControl: Control, isBalloon: bool, size: Drawing.Size): ...
    @property
    def AssociatedControl(self) -> Control: ...
    @property
    def AssociatedWindow(self) -> IWin32Window: ...
    @property
    def IsBalloon(self) -> bool: ...
    @property
    def ToolTipSize(self) -> Drawing.Size: ...
    @ToolTipSize.setter
    def ToolTipSize(self, value: System.Void): ...

class PopupEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PopupEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PopupEventArgs) -> None: ...

class PowerLineStatus(enum.Enum):
    Offline = 0
    Online = 1
    Unknown = 255

class PowerState(enum.Enum):
    Suspend = 0
    Hibernate = 1

class PowerStatus(object):
    """    """
    @property
    def BatteryChargeStatus(self) -> BatteryChargeStatus: ...
    @property
    def BatteryFullLifetime(self) -> int: ...
    @property
    def BatteryLifePercent(self) -> System.Single: ...
    @property
    def BatteryLifeRemaining(self) -> int: ...
    @property
    def PowerLineStatus(self) -> PowerLineStatus: ...

class PreProcessControlState(enum.Enum):
    MessageProcessed = 0
    MessageNeeded = 1
    MessageNotNeeded = 2

class PreviewKeyDownEventArgs(System.EventArgs):
    """    """
    def __init__(self, keyData: Keys): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def IsInputKey(self) -> bool: ...
    @property
    def KeyCode(self) -> Keys: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyValue(self) -> int: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    @IsInputKey.setter
    def IsInputKey(self, value: System.Void): ...

class PreviewKeyDownEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: PreviewKeyDownEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: PreviewKeyDownEventArgs) -> None: ...

class PageSetupDialog(CommonDialog):
    """    """
    def __init__(self): ...
    @property
    def AllowMargins(self) -> bool: ...
    @property
    def AllowOrientation(self) -> bool: ...
    @property
    def AllowPaper(self) -> bool: ...
    @property
    def AllowPrinter(self) -> bool: ...
    @property
    def Document(self) -> Printing.PrintDocument: ...
    @property
    def EnableMetric(self) -> bool: ...
    @property
    def MinMargins(self) -> Printing.Margins: ...
    @property
    def PageSettings(self) -> Printing.PageSettings: ...
    @property
    def PrinterSettings(self) -> Printing.PrinterSettings: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def ShowNetwork(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AllowMargins.setter
    def AllowMargins(self, value: System.Void): ...
    @AllowOrientation.setter
    def AllowOrientation(self, value: System.Void): ...
    @AllowPaper.setter
    def AllowPaper(self, value: System.Void): ...
    @AllowPrinter.setter
    def AllowPrinter(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @EnableMetric.setter
    def EnableMetric(self, value: System.Void): ...
    @MinMargins.setter
    def MinMargins(self, value: System.Void): ...
    @PageSettings.setter
    def PageSettings(self, value: System.Void): ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: System.Void): ...
    @ShowHelp.setter
    def ShowHelp(self, value: System.Void): ...
    @ShowNetwork.setter
    def ShowNetwork(self, value: System.Void): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class PrintControllerWithStatusDialog(Printing.PrintController):
    """    """
    @overload
    def __init__(self, underlyingController: Printing.PrintController): ...
    @overload
    def __init__(self, underlyingController: Printing.PrintController, dialogTitle: str): ...
    @property
    def IsPreview(self) -> bool: ...
    @overload
    def OnEndPage(self, document: Printing.PrintDocument, e: Printing.PrintPageEventArgs) -> None: ...
    @overload
    def OnEndPrint(self, document: Printing.PrintDocument, e: Printing.PrintEventArgs) -> None: ...
    @overload
    def OnStartPage(self, document: Printing.PrintDocument, e: Printing.PrintPageEventArgs) -> Drawing.Graphics: ...
    @overload
    def OnStartPrint(self, document: Printing.PrintDocument, e: Printing.PrintEventArgs) -> None: ...

class PrintDialog(CommonDialog):
    """    """
    def __init__(self): ...
    @property
    def AllowCurrentPage(self) -> bool: ...
    @property
    def AllowPrintToFile(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def AllowSomePages(self) -> bool: ...
    @property
    def Document(self) -> Printing.PrintDocument: ...
    @property
    def PrinterSettings(self) -> Printing.PrinterSettings: ...
    @property
    def PrintToFile(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def ShowNetwork(self) -> bool: ...
    @property
    def UseEXDialog(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @AllowCurrentPage.setter
    def AllowCurrentPage(self, value: System.Void): ...
    @AllowPrintToFile.setter
    def AllowPrintToFile(self, value: System.Void): ...
    @AllowSelection.setter
    def AllowSelection(self, value: System.Void): ...
    @AllowSomePages.setter
    def AllowSomePages(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: System.Void): ...
    @PrintToFile.setter
    def PrintToFile(self, value: System.Void): ...
    @ShowHelp.setter
    def ShowHelp(self, value: System.Void): ...
    @ShowNetwork.setter
    def ShowNetwork(self, value: System.Void): ...
    @UseEXDialog.setter
    def UseEXDialog(self, value: System.Void): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class PrintPreviewControl(Control):
    """    """
    def __init__(self): ...
    @property
    def AutoZoom(self) -> bool: ...
    @property
    def Columns(self) -> int: ...
    @property
    def Document(self) -> Printing.PrintDocument: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Rows(self) -> int: ...
    @property
    def StartPage(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseAntiAlias(self) -> bool: ...
    @property
    def Zoom(self) -> float: ...
    @overload
    def InvalidatePreview() -> None: ...
    @overload
    def ResetBackColor() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @AutoZoom.setter
    def AutoZoom(self, value: System.Void): ...
    @Columns.setter
    def Columns(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Rows.setter
    def Rows(self, value: System.Void): ...
    @StartPage.setter
    def StartPage(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @UseAntiAlias.setter
    def UseAntiAlias(self, value: System.Void): ...
    @Zoom.setter
    def Zoom(self, value: System.Void): ...
    @property
    def TextChanged(self): ...
    @property
    def StartPageChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class PrintPreviewDialog(Form):
    """    """
    def __init__(self): ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Drawing.Size: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Document(self) -> Printing.PrintDocument: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def Icon(self) -> Drawing.Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PrintPreviewControl(self) -> PrintPreviewControl: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Drawing.Color: ...
    @property
    def UseAntiAlias(self) -> bool: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @AcceptButton.setter
    def AcceptButton(self, value: System.Void): ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: System.Void): ...
    @AccessibleName.setter
    def AccessibleName(self, value: System.Void): ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: System.Void): ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoScale.setter
    def AutoScale(self, value: System.Void): ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: System.Void): ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoValidate.setter
    def AutoValidate(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @CancelButton.setter
    def CancelButton(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @ControlBox.setter
    def ControlBox(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Document.setter
    def Document(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: System.Void): ...
    @HelpButton.setter
    def HelpButton(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: System.Void): ...
    @KeyPreview.setter
    def KeyPreview(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Margin.setter
    def Margin(self, value: System.Void): ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Opacity.setter
    def Opacity(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: System.Void): ...
    @StartPosition.setter
    def StartPosition(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TopMost.setter
    def TopMost(self, value: System.Void): ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: System.Void): ...
    @UseAntiAlias.setter
    def UseAntiAlias(self, value: System.Void): ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @WindowState.setter
    def WindowState(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ProfessionalColors(object):
    """    """
    @property
    def ButtonCheckedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def ButtonPressedBorder(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonPressedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonPressedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedBorder(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def CheckBackground(self) -> Drawing.Color: ...
    @property
    def CheckPressedBackground(self) -> Drawing.Color: ...
    @property
    def CheckSelectedBackground(self) -> Drawing.Color: ...
    @property
    def GripDark(self) -> Drawing.Color: ...
    @property
    def GripLight(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientBegin(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientEnd(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def MenuBorder(self) -> Drawing.Color: ...
    @property
    def MenuItemBorder(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientEnd(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def MenuItemSelected(self) -> Drawing.Color: ...
    @property
    def MenuItemSelectedGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuItemSelectedGradientEnd(self) -> Drawing.Color: ...
    @property
    def MenuStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientBegin(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientEnd(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientMiddle(self) -> Drawing.Color: ...
    @property
    def RaftingContainerGradientBegin(self) -> Drawing.Color: ...
    @property
    def RaftingContainerGradientEnd(self) -> Drawing.Color: ...
    @property
    def SeparatorDark(self) -> Drawing.Color: ...
    @property
    def SeparatorLight(self) -> Drawing.Color: ...
    @property
    def StatusStripBorder(self) -> Drawing.Color: ...
    @property
    def StatusStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def StatusStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripBorder(self) -> Drawing.Color: ...
    @property
    def ToolStripContentPanelGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripContentPanelGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripDropDownBackground(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ToolStripPanelGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripPanelGradientEnd(self) -> Drawing.Color: ...

class ProfessionalColorTable(object):
    """    """
    def __init__(self): ...
    @property
    def ButtonCheckedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonCheckedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def ButtonPressedBorder(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonPressedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonPressedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonPressedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedBorder(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedHighlight(self) -> Drawing.Color: ...
    @property
    def ButtonSelectedHighlightBorder(self) -> Drawing.Color: ...
    @property
    def CheckBackground(self) -> Drawing.Color: ...
    @property
    def CheckPressedBackground(self) -> Drawing.Color: ...
    @property
    def CheckSelectedBackground(self) -> Drawing.Color: ...
    @property
    def GripDark(self) -> Drawing.Color: ...
    @property
    def GripLight(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientBegin(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientEnd(self) -> Drawing.Color: ...
    @property
    def ImageMarginGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientBegin(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientEnd(self) -> Drawing.Color: ...
    @property
    def ImageMarginRevealedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def MenuBorder(self) -> Drawing.Color: ...
    @property
    def MenuItemBorder(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientEnd(self) -> Drawing.Color: ...
    @property
    def MenuItemPressedGradientMiddle(self) -> Drawing.Color: ...
    @property
    def MenuItemSelected(self) -> Drawing.Color: ...
    @property
    def MenuItemSelectedGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuItemSelectedGradientEnd(self) -> Drawing.Color: ...
    @property
    def MenuStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def MenuStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientBegin(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientEnd(self) -> Drawing.Color: ...
    @property
    def OverflowButtonGradientMiddle(self) -> Drawing.Color: ...
    @property
    def RaftingContainerGradientBegin(self) -> Drawing.Color: ...
    @property
    def RaftingContainerGradientEnd(self) -> Drawing.Color: ...
    @property
    def SeparatorDark(self) -> Drawing.Color: ...
    @property
    def SeparatorLight(self) -> Drawing.Color: ...
    @property
    def StatusStripBorder(self) -> Drawing.Color: ...
    @property
    def StatusStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def StatusStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripBorder(self) -> Drawing.Color: ...
    @property
    def ToolStripContentPanelGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripContentPanelGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripDropDownBackground(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientEnd(self) -> Drawing.Color: ...
    @property
    def ToolStripGradientMiddle(self) -> Drawing.Color: ...
    @property
    def ToolStripPanelGradientBegin(self) -> Drawing.Color: ...
    @property
    def ToolStripPanelGradientEnd(self) -> Drawing.Color: ...
    @property
    def UseSystemColors(self) -> bool: ...
    @UseSystemColors.setter
    def UseSystemColors(self, value: System.Void): ...

class ProgressBar(Control):
    """    """
    def __init__(self): ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MarqueeAnimationSpeed(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Step(self) -> int: ...
    @property
    def Style(self) -> ProgressBarStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    @overload
    def Increment(self, value: int) -> None: ...
    @overload
    def PerformStep() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @MarqueeAnimationSpeed.setter
    def MarqueeAnimationSpeed(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @Step.setter
    def Step(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def Enter(self): ...
    @property
    def Leave(self): ...
    @property
    def Paint(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ProgressBarRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawHorizontalBar(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalChunks(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalBar(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalChunks(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @property
    def ChunkSpaceThickness(self) -> int: ...
    @property
    def ChunkThickness(self) -> int: ...
    @property
    def IsSupported(self) -> bool: ...

class ProgressBarStyle(enum.Enum):
    Blocks = 0
    Continuous = 1
    Marquee = 2

class PropertyGrid(ContainerControl):
    """    """
    def __init__(self): ...
    @overload
    def CollapseAllGridItems() -> None: ...
    @overload
    def ExpandAllGridItems() -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BrowsableAttributes(self) -> ComponentModel.AttributeCollection: ...
    @property
    def CanShowCommands(self) -> bool: ...
    @property
    def CanShowVisualStyleGlyphs(self) -> bool: ...
    @property
    def CategoryForeColor(self) -> Drawing.Color: ...
    @property
    def CategorySplitterColor(self) -> Drawing.Color: ...
    @property
    def CommandsActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def CommandsBackColor(self) -> Drawing.Color: ...
    @property
    def CommandsBorderColor(self) -> Drawing.Color: ...
    @property
    def CommandsDisabledLinkColor(self) -> Drawing.Color: ...
    @property
    def CommandsForeColor(self) -> Drawing.Color: ...
    @property
    def CommandsLinkColor(self) -> Drawing.Color: ...
    @property
    def CommandsVisible(self) -> bool: ...
    @property
    def CommandsVisibleIfAvailable(self) -> bool: ...
    @property
    def ContextMenuDefaultLocation(self) -> Drawing.Point: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def DisabledItemForeColor(self) -> Drawing.Color: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def HelpBackColor(self) -> Drawing.Color: ...
    @property
    def HelpBorderColor(self) -> Drawing.Color: ...
    @property
    def HelpForeColor(self) -> Drawing.Color: ...
    @property
    def HelpVisible(self) -> bool: ...
    @property
    def LargeButtons(self) -> bool: ...
    @property
    def LineColor(self) -> Drawing.Color: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropertySort(self) -> PropertySort: ...
    @property
    def PropertyTabs(self) -> PropertyTabCollection: ...
    @property
    def SelectedGridItem(self) -> GridItem: ...
    @property
    def SelectedItemWithFocusBackColor(self) -> Drawing.Color: ...
    @property
    def SelectedItemWithFocusForeColor(self) -> Drawing.Color: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> System.System.Array[object]: ...
    @property
    def SelectedTab(self) -> Design.PropertyTab: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolbarVisible(self) -> bool: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def ViewBackColor(self) -> Drawing.Color: ...
    @property
    def ViewBorderColor(self) -> Drawing.Color: ...
    @property
    def ViewForeColor(self) -> Drawing.Color: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def RefreshTabs(self, tabScope: ComponentModel.PropertyTabScope) -> None: ...
    @overload
    def ResetSelectedProperty() -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BrowsableAttributes.setter
    def BrowsableAttributes(self, value: System.Void): ...
    @CanShowVisualStyleGlyphs.setter
    def CanShowVisualStyleGlyphs(self, value: System.Void): ...
    @CategoryForeColor.setter
    def CategoryForeColor(self, value: System.Void): ...
    @CategorySplitterColor.setter
    def CategorySplitterColor(self, value: System.Void): ...
    @CommandsActiveLinkColor.setter
    def CommandsActiveLinkColor(self, value: System.Void): ...
    @CommandsBackColor.setter
    def CommandsBackColor(self, value: System.Void): ...
    @CommandsBorderColor.setter
    def CommandsBorderColor(self, value: System.Void): ...
    @CommandsDisabledLinkColor.setter
    def CommandsDisabledLinkColor(self, value: System.Void): ...
    @CommandsForeColor.setter
    def CommandsForeColor(self, value: System.Void): ...
    @CommandsLinkColor.setter
    def CommandsLinkColor(self, value: System.Void): ...
    @CommandsVisibleIfAvailable.setter
    def CommandsVisibleIfAvailable(self, value: System.Void): ...
    @DisabledItemForeColor.setter
    def DisabledItemForeColor(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @HelpBackColor.setter
    def HelpBackColor(self, value: System.Void): ...
    @HelpBorderColor.setter
    def HelpBorderColor(self, value: System.Void): ...
    @HelpForeColor.setter
    def HelpForeColor(self, value: System.Void): ...
    @HelpVisible.setter
    def HelpVisible(self, value: System.Void): ...
    @LargeButtons.setter
    def LargeButtons(self, value: System.Void): ...
    @LineColor.setter
    def LineColor(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @PropertySort.setter
    def PropertySort(self, value: System.Void): ...
    @SelectedGridItem.setter
    def SelectedGridItem(self, value: System.Void): ...
    @SelectedItemWithFocusBackColor.setter
    def SelectedItemWithFocusBackColor(self, value: System.Void): ...
    @SelectedItemWithFocusForeColor.setter
    def SelectedItemWithFocusForeColor(self, value: System.Void): ...
    @SelectedObject.setter
    def SelectedObject(self, value: System.Void): ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolbarVisible.setter
    def ToolbarVisible(self, value: System.Void): ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: System.Void): ...
    @ViewBackColor.setter
    def ViewBackColor(self, value: System.Void): ...
    @ViewBorderColor.setter
    def ViewBorderColor(self, value: System.Void): ...
    @ViewForeColor.setter
    def ViewForeColor(self, value: System.Void): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def PropertyValueChanged(self): ...
    @property
    def PropertyTabChanged(self): ...
    @property
    def PropertySortChanged(self): ...
    @property
    def SelectedGridItemChanged(self): ...
    @property
    def SelectedObjectsChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class PropertyManager(BindingManagerBase):
    """    """
    def __init__(self): ...
    @overload
    def AddNew() -> None: ...
    @overload
    def CancelCurrentEdit() -> None: ...
    @overload
    def EndCurrentEdit() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> object: ...
    @property
    def Position(self) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def ResumeBinding() -> None: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SuspendBinding() -> None: ...
    @property
    def BindingComplete(self): ...
    @property
    def CurrentChanged(self): ...
    @property
    def CurrentItemChanged(self): ...
    @property
    def DataError(self): ...
    @property
    def PositionChanged(self): ...

class PropertySort(enum.Enum):
    NoSort = 0
    Alphabetical = 1
    Categorized = 2
    CategorizedAlphabetical = 3

class PropertyTabChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, oldTab: Design.PropertyTab, newTab: Design.PropertyTab): ...
    @property
    def NewTab(self) -> Design.PropertyTab: ...
    @property
    def OldTab(self) -> Design.PropertyTab: ...

class PropertyTabChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, s: object, e: PropertyTabChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, s: object, e: PropertyTabChangedEventArgs) -> None: ...

class PropertyValueChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, changedItem: GridItem, oldValue: object): ...
    @property
    def ChangedItem(self) -> GridItem: ...
    @property
    def OldValue(self) -> object: ...

class PropertyValueChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, s: object, e: PropertyValueChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, s: object, e: PropertyValueChangedEventArgs) -> None: ...

class QueryAccessibilityHelpEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, helpNamespace: str, helpString: str, helpKeyword: str): ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def HelpNamespace(self) -> str: ...
    @property
    def HelpString(self) -> str: ...
    @HelpKeyword.setter
    def HelpKeyword(self, value: System.Void): ...
    @HelpNamespace.setter
    def HelpNamespace(self, value: System.Void): ...
    @HelpString.setter
    def HelpString(self, value: System.Void): ...

class QueryAccessibilityHelpEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: QueryAccessibilityHelpEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: QueryAccessibilityHelpEventArgs) -> None: ...

class QueryContinueDragEventArgs(System.EventArgs):
    """    """
    def __init__(self, keyState: int, escapePressed: bool, action: DragAction): ...
    @property
    def Action(self) -> DragAction: ...
    @property
    def EscapePressed(self) -> bool: ...
    @property
    def KeyState(self) -> int: ...
    @Action.setter
    def Action(self, value: System.Void): ...

class QueryContinueDragEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: QueryContinueDragEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: QueryContinueDragEventArgs) -> None: ...

class QuestionEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, response: bool): ...
    @property
    def Response(self) -> bool: ...
    @Response.setter
    def Response(self, value: System.Void): ...

class QuestionEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: QuestionEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: QuestionEventArgs) -> None: ...

class RadioButton(ButtonBase):
    """    """
    def __init__(self): ...
    @property
    def Appearance(self) -> Appearance: ...
    @property
    def AutoCheck(self) -> bool: ...
    @property
    def CheckAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @overload
    def PerformClick() -> None: ...
    @Appearance.setter
    def Appearance(self, value: System.Void): ...
    @AutoCheck.setter
    def AutoCheck(self, value: System.Void): ...
    @CheckAlign.setter
    def CheckAlign(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AppearanceChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def CheckedChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class RadioButtonRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawParentBackground(g: Drawing.Graphics, bounds: Drawing.Rectangle, childControl: Control) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(g: Drawing.Graphics, glyphLocation: Drawing.Point, state: VisualStyles.RadioButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, radioButtonText: str, font: Drawing.Font, focused: bool, state: VisualStyles.RadioButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, radioButtonText: str, font: Drawing.Font, flags: TextFormatFlags, focused: bool, state: VisualStyles.RadioButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, radioButtonText: str, font: Drawing.Font, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.RadioButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawRadioButton(g: Drawing.Graphics, glyphLocation: Drawing.Point, textBounds: Drawing.Rectangle, radioButtonText: str, font: Drawing.Font, flags: TextFormatFlags, image: Drawing.Image, imageBounds: Drawing.Rectangle, focused: bool, state: VisualStyles.RadioButtonState) -> None: ...
    @property
    def RenderMatchingApplicationState(self) -> bool: ...
    @overload
    @staticmethod
    def GetGlyphSize(g: Drawing.Graphics, state: VisualStyles.RadioButtonState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def IsBackgroundPartiallyTransparent(state: VisualStyles.RadioButtonState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(self, value: System.Void): ...

class RelatedImageListAttribute(System.Attribute):
    """    """
    def __init__(self, relatedImageList: str): ...
    @property
    def RelatedImageList(self) -> str: ...

class RetrieveVirtualItemEventArgs(System.EventArgs):
    """    """
    def __init__(self, itemIndex: int): ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class RetrieveVirtualItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: RetrieveVirtualItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: RetrieveVirtualItemEventArgs) -> None: ...

class RichTextBox(TextBoxBase):
    """    """
    def __init__(self): ...
    @overload
    def CanPaste(self, clipFormat: Format) -> bool: ...
    @overload
    def DrawToBitmap(self, bitmap: Drawing.Bitmap, targetBounds: Drawing.Rectangle) -> None: ...
    @overload
    def Find(self, characterSet: System.System.Array[System.Char]) -> int: ...
    @overload
    def Find(self, str_: str) -> int: ...
    @overload
    def Find(self, str_: str, options: RichTextBoxFinds) -> int: ...
    @overload
    def Find(self, characterSet: System.System.Array[System.Char], start: int) -> int: ...
    @overload
    def Find(self, characterSet: System.System.Array[System.Char], start: int, end: int) -> int: ...
    @overload
    def Find(self, str_: str, start: int, options: RichTextBoxFinds) -> int: ...
    @overload
    def Find(self, str_: str, start: int, end: int, options: RichTextBoxFinds) -> int: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoWordSelection(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BulletIndent(self) -> int: ...
    @property
    def CanRedo(self) -> bool: ...
    @property
    def DetectUrls(self) -> bool: ...
    @property
    def EnableAutoDragDrop(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def LanguageOption(self) -> RichTextBoxLanguageOptions: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def RedoActionName(self) -> str: ...
    @property
    def RichTextShortcutsEnabled(self) -> bool: ...
    @property
    def RightMargin(self) -> int: ...
    @property
    def Rtf(self) -> str: ...
    @property
    def ScrollBars(self) -> RichTextBoxScrollBars: ...
    @property
    def SelectedRtf(self) -> str: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionAlignment(self) -> HorizontalAlignment: ...
    @property
    def SelectionBackColor(self) -> Drawing.Color: ...
    @property
    def SelectionBullet(self) -> bool: ...
    @property
    def SelectionCharOffset(self) -> int: ...
    @property
    def SelectionColor(self) -> Drawing.Color: ...
    @property
    def SelectionFont(self) -> Drawing.Font: ...
    @property
    def SelectionHangingIndent(self) -> int: ...
    @property
    def SelectionIndent(self) -> int: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionProtected(self) -> bool: ...
    @property
    def SelectionRightIndent(self) -> int: ...
    @property
    def SelectionTabs(self) -> System.System.Array[int]: ...
    @property
    def SelectionType(self) -> RichTextBoxSelectionTypes: ...
    @property
    def ShowSelectionMargin(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def UndoActionName(self) -> str: ...
    @property
    def ZoomFactor(self) -> System.Single: ...
    @overload
    def GetCharIndexFromPosition(self, pt: Drawing.Point) -> int: ...
    @overload
    def GetLineFromCharIndex(self, index: int) -> int: ...
    @overload
    def GetPositionFromCharIndex(self, index: int) -> Drawing.Point: ...
    @overload
    def LoadFile(self, path: str) -> None: ...
    @overload
    def LoadFile(self, data: IO.Stream, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def LoadFile(self, path: str, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def Paste(self, clipFormat: Format) -> None: ...
    @overload
    def Redo() -> None: ...
    @overload
    def SaveFile(self, path: str) -> None: ...
    @overload
    def SaveFile(self, path: str, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def SaveFile(self, data: IO.Stream, fileType: RichTextBoxStreamType) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoWordSelection.setter
    def AutoWordSelection(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BulletIndent.setter
    def BulletIndent(self, value: System.Void): ...
    @DetectUrls.setter
    def DetectUrls(self, value: System.Void): ...
    @EnableAutoDragDrop.setter
    def EnableAutoDragDrop(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @LanguageOption.setter
    def LanguageOption(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @RichTextShortcutsEnabled.setter
    def RichTextShortcutsEnabled(self, value: System.Void): ...
    @RightMargin.setter
    def RightMargin(self, value: System.Void): ...
    @Rtf.setter
    def Rtf(self, value: System.Void): ...
    @ScrollBars.setter
    def ScrollBars(self, value: System.Void): ...
    @SelectedRtf.setter
    def SelectedRtf(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SelectionAlignment.setter
    def SelectionAlignment(self, value: System.Void): ...
    @SelectionBackColor.setter
    def SelectionBackColor(self, value: System.Void): ...
    @SelectionBullet.setter
    def SelectionBullet(self, value: System.Void): ...
    @SelectionCharOffset.setter
    def SelectionCharOffset(self, value: System.Void): ...
    @SelectionColor.setter
    def SelectionColor(self, value: System.Void): ...
    @SelectionFont.setter
    def SelectionFont(self, value: System.Void): ...
    @SelectionHangingIndent.setter
    def SelectionHangingIndent(self, value: System.Void): ...
    @SelectionIndent.setter
    def SelectionIndent(self, value: System.Void): ...
    @SelectionLength.setter
    def SelectionLength(self, value: System.Void): ...
    @SelectionProtected.setter
    def SelectionProtected(self, value: System.Void): ...
    @SelectionRightIndent.setter
    def SelectionRightIndent(self, value: System.Void): ...
    @SelectionTabs.setter
    def SelectionTabs(self, value: System.Void): ...
    @ShowSelectionMargin.setter
    def ShowSelectionMargin(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ZoomFactor.setter
    def ZoomFactor(self, value: System.Void): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ContentsResized(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragLeave(self): ...
    @property
    def DragOver(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def HScroll(self): ...
    @property
    def LinkClicked(self): ...
    @property
    def ImeChange(self): ...
    @property
    def Protected(self): ...
    @property
    def SelectionChanged(self): ...
    @property
    def VScroll(self): ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class RichTextBoxFinds(enum.Enum):
    None_ = 0
    WholeWord = 2
    MatchCase = 4
    NoHighlight = 8
    Reverse = 16

class RichTextBoxLanguageOptions(enum.Enum):
    AutoKeyboard = 1
    AutoFont = 2
    ImeCancelComplete = 4
    ImeAlwaysSendNotify = 8
    AutoFontSizeAdjust = 16
    UIFonts = 32
    DualFont = 128

class RichTextBoxScrollBars(enum.Enum):
    None_ = 0
    Horizontal = 1
    Vertical = 2
    Both = 3
    ForcedHorizontal = 17
    ForcedVertical = 18
    ForcedBoth = 19

class RichTextBoxSelectionAttribute(enum.Enum):
    None_ = 0
    All = 1
    Mixed = -1

class RichTextBoxSelectionTypes(enum.Enum):
    Empty = 0
    Text = 1
    Object = 2
    MultiChar = 4
    MultiObject = 8

class RichTextBoxStreamType(enum.Enum):
    RichText = 0
    PlainText = 1
    RichNoOleObjs = 2
    TextTextOleObjs = 3
    UnicodePlainText = 4

class RichTextBoxWordPunctuations(enum.Enum):
    Level1 = 128
    Level2 = 256
    Custom = 512
    All = 896

class RightToLeft(enum.Enum):
    No = 0
    Yes = 1
    Inherit = 2

class RowStyle(TableLayoutStyle):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sizeType: SizeType): ...
    @overload
    def __init__(self, sizeType: SizeType, height: System.Single): ...
    @property
    def Height(self) -> System.Single: ...
    @Height.setter
    def Height(self, value: System.Void): ...

class SaveFileDialog(FileDialog):
    """    """
    def __init__(self): ...
    @property
    def CheckWriteAccess(self) -> bool: ...
    @property
    def CreatePrompt(self) -> bool: ...
    @property
    def ExpandedMode(self) -> bool: ...
    @property
    def OverwritePrompt(self) -> bool: ...
    @overload
    def OpenFile() -> IO.Stream: ...
    @overload
    def Reset() -> None: ...
    @CheckWriteAccess.setter
    def CheckWriteAccess(self, value: System.Void): ...
    @CreatePrompt.setter
    def CreatePrompt(self, value: System.Void): ...
    @ExpandedMode.setter
    def ExpandedMode(self, value: System.Void): ...
    @OverwritePrompt.setter
    def OverwritePrompt(self, value: System.Void): ...
    @property
    def FileOk(self): ...
    @property
    def HelpRequest(self): ...
    @property
    def Disposed(self): ...

class Screen(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromControl(control: Control) -> Screen: ...
    @overload
    @staticmethod
    def FromHandle(hwnd: System.IntPtr) -> Screen: ...
    @overload
    @staticmethod
    def FromPoint(point: Drawing.Point) -> Screen: ...
    @overload
    @staticmethod
    def FromRectangle(rect: Drawing.Rectangle) -> Screen: ...
    @property
    def AllScreens(self) -> System.Array[Screen]: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DeviceName(self) -> str: ...
    @property
    def Primary(self) -> bool: ...
    @property
    def PrimaryScreen(self) -> Screen: ...
    @property
    def WorkingArea(self) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetBounds(pt: Drawing.Point) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetBounds(rect: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetBounds(ctl: Control) -> Drawing.Rectangle: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetWorkingArea(pt: Drawing.Point) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetWorkingArea(rect: Drawing.Rectangle) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetWorkingArea(ctl: Control) -> Drawing.Rectangle: ...
    @overload
    def ToString() -> str: ...

class ScrollableControl(Control):
    """    """
    def __init__(self): ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoScrollPosition(self) -> Drawing.Point: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: System.Void): ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @property
    def Scroll(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ScrollBar(Control):
    """    """
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def ScaleScrollBarForDpiChange(self) -> bool: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @LargeChange.setter
    def LargeChange(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @ScaleScrollBarForDpiChange.setter
    def ScaleScrollBarForDpiChange(self, value: System.Void): ...
    @SmallChange.setter
    def SmallChange(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def Paint(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def Scroll(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ScrollBarRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawArrowButton(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarArrowButtonState) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalThumbGrip(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawLeftHorizontalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawLowerVerticalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawRightHorizontalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawSizeBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarSizeBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawUpperVerticalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalThumbGrip(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.ScrollBarState) -> None: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def GetSizeBoxSize(g: Drawing.Graphics, state: VisualStyles.ScrollBarState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetThumbGripSize(g: Drawing.Graphics, state: VisualStyles.ScrollBarState) -> Drawing.Size: ...

class ScrollBars(enum.Enum):
    None_ = 0
    Horizontal = 1
    Vertical = 2
    Both = 3

class ScrollButton(enum.Enum):
    Min = 0
    Up = 0
    Down = 1
    Left = 2
    Right = 3
    Max = 3

class ScrollEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, type_: ScrollEventType, newValue: int): ...
    @overload
    def __init__(self, type_: ScrollEventType, newValue: int, scroll: ScrollOrientation): ...
    @overload
    def __init__(self, type_: ScrollEventType, oldValue: int, newValue: int): ...
    @overload
    def __init__(self, type_: ScrollEventType, oldValue: int, newValue: int, scroll: ScrollOrientation): ...
    @property
    def NewValue(self) -> int: ...
    @property
    def OldValue(self) -> int: ...
    @property
    def ScrollOrientation(self) -> ScrollOrientation: ...
    @property
    def Type(self) -> ScrollEventType: ...
    @NewValue.setter
    def NewValue(self, value: System.Void): ...

class ScrollEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ScrollEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ScrollEventArgs) -> None: ...

class ScrollEventType(enum.Enum):
    SmallDecrement = 0
    SmallIncrement = 1
    LargeDecrement = 2
    LargeIncrement = 3
    ThumbPosition = 4
    ThumbTrack = 5
    First = 6
    Last = 7
    EndScroll = 8

class ScrollOrientation(enum.Enum):
    HorizontalScroll = 0
    VerticalScroll = 1

class ScrollProperties(object):
    """    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @LargeChange.setter
    def LargeChange(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @SmallChange.setter
    def SmallChange(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...

class SearchDirectionHint(enum.Enum):
    Left = 37
    Up = 38
    Right = 39
    Down = 40

class SearchForVirtualItemEventArgs(System.EventArgs):
    """    """
    def __init__(self, isTextSearch: bool, isPrefixSearch: bool, includeSubItemsInSearch: bool, text: str, startingPoint: Drawing.Point, direction: SearchDirectionHint, startIndex: int): ...
    @property
    def Direction(self) -> SearchDirectionHint: ...
    @property
    def IncludeSubItemsInSearch(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsPrefixSearch(self) -> bool: ...
    @property
    def IsTextSearch(self) -> bool: ...
    @property
    def StartIndex(self) -> int: ...
    @property
    def StartingPoint(self) -> Drawing.Point: ...
    @property
    def Text(self) -> str: ...
    @Index.setter
    def Index(self, value: System.Void): ...

class SearchForVirtualItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SearchForVirtualItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SearchForVirtualItemEventArgs) -> None: ...

class SecurityIDType(enum.Enum):
    User = 1
    Group = 2
    Domain = 3
    Alias = 4
    WellKnownGroup = 5
    DeletedAccount = 6
    Invalid = 7
    Unknown = 8
    Computer = 9

class SelectedGridItemChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, oldSel: GridItem, newSel: GridItem): ...
    @property
    def NewSelection(self) -> GridItem: ...
    @property
    def OldSelection(self) -> GridItem: ...

class SelectedGridItemChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SelectedGridItemChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SelectedGridItemChangedEventArgs) -> None: ...

class SelectionMode(enum.Enum):
    None_ = 0
    One = 1
    MultiSimple = 2
    MultiExtended = 3

class SelectionRange(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, range_: SelectionRange): ...
    @overload
    def __init__(self, lower: System.DateTime, upper: System.DateTime): ...
    @property
    def End(self) -> System.DateTime: ...
    @property
    def Start(self) -> System.DateTime: ...
    @End.setter
    def End(self, value: System.Void): ...
    @Start.setter
    def Start(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SelectionRangeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class SendKeys(object):
    """    """
    @overload
    @staticmethod
    def Flush() -> None: ...
    @overload
    @staticmethod
    def Send(keys: str) -> None: ...
    @overload
    @staticmethod
    def SendWait(keys: str) -> None: ...

class Shortcut(enum.Enum):
    None_ = 0
    Ins = 45
    Del = 46
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    ShiftIns = 65581
    ShiftDel = 65582
    ShiftF1 = 65648
    ShiftF2 = 65649
    ShiftF3 = 65650
    ShiftF4 = 65651
    ShiftF5 = 65652
    ShiftF6 = 65653
    ShiftF7 = 65654
    ShiftF8 = 65655
    ShiftF9 = 65656
    ShiftF10 = 65657
    ShiftF11 = 65658
    ShiftF12 = 65659
    CtrlIns = 131117
    CtrlDel = 131118
    Ctrl0 = 131120
    Ctrl1 = 131121
    Ctrl2 = 131122
    Ctrl3 = 131123
    Ctrl4 = 131124
    Ctrl5 = 131125
    Ctrl6 = 131126
    Ctrl7 = 131127
    Ctrl8 = 131128
    Ctrl9 = 131129
    CtrlA = 131137
    CtrlB = 131138
    CtrlC = 131139
    CtrlD = 131140
    CtrlE = 131141
    CtrlF = 131142
    CtrlG = 131143
    CtrlH = 131144
    CtrlI = 131145
    CtrlJ = 131146
    CtrlK = 131147
    CtrlL = 131148
    CtrlM = 131149
    CtrlN = 131150
    CtrlO = 131151
    CtrlP = 131152
    CtrlQ = 131153
    CtrlR = 131154
    CtrlS = 131155
    CtrlT = 131156
    CtrlU = 131157
    CtrlV = 131158
    CtrlW = 131159
    CtrlX = 131160
    CtrlY = 131161
    CtrlZ = 131162
    CtrlF1 = 131184
    CtrlF2 = 131185
    CtrlF3 = 131186
    CtrlF4 = 131187
    CtrlF5 = 131188
    CtrlF6 = 131189
    CtrlF7 = 131190
    CtrlF8 = 131191
    CtrlF9 = 131192
    CtrlF10 = 131193
    CtrlF11 = 131194
    CtrlF12 = 131195
    CtrlShift0 = 196656
    CtrlShift1 = 196657
    CtrlShift2 = 196658
    CtrlShift3 = 196659
    CtrlShift4 = 196660
    CtrlShift5 = 196661
    CtrlShift6 = 196662
    CtrlShift7 = 196663
    CtrlShift8 = 196664
    CtrlShift9 = 196665
    CtrlShiftA = 196673
    CtrlShiftB = 196674
    CtrlShiftC = 196675
    CtrlShiftD = 196676
    CtrlShiftE = 196677
    CtrlShiftF = 196678
    CtrlShiftG = 196679
    CtrlShiftH = 196680
    CtrlShiftI = 196681
    CtrlShiftJ = 196682
    CtrlShiftK = 196683
    CtrlShiftL = 196684
    CtrlShiftM = 196685
    CtrlShiftN = 196686
    CtrlShiftO = 196687
    CtrlShiftP = 196688
    CtrlShiftQ = 196689
    CtrlShiftR = 196690
    CtrlShiftS = 196691
    CtrlShiftT = 196692
    CtrlShiftU = 196693
    CtrlShiftV = 196694
    CtrlShiftW = 196695
    CtrlShiftX = 196696
    CtrlShiftY = 196697
    CtrlShiftZ = 196698
    CtrlShiftF1 = 196720
    CtrlShiftF2 = 196721
    CtrlShiftF3 = 196722
    CtrlShiftF4 = 196723
    CtrlShiftF5 = 196724
    CtrlShiftF6 = 196725
    CtrlShiftF7 = 196726
    CtrlShiftF8 = 196727
    CtrlShiftF9 = 196728
    CtrlShiftF10 = 196729
    CtrlShiftF11 = 196730
    CtrlShiftF12 = 196731
    AltBksp = 262152
    AltLeftArrow = 262181
    AltUpArrow = 262182
    AltRightArrow = 262183
    AltDownArrow = 262184
    Alt0 = 262192
    Alt1 = 262193
    Alt2 = 262194
    Alt3 = 262195
    Alt4 = 262196
    Alt5 = 262197
    Alt6 = 262198
    Alt7 = 262199
    Alt8 = 262200
    Alt9 = 262201
    AltF1 = 262256
    AltF2 = 262257
    AltF3 = 262258
    AltF4 = 262259
    AltF5 = 262260
    AltF6 = 262261
    AltF7 = 262262
    AltF8 = 262263
    AltF9 = 262264
    AltF10 = 262265
    AltF11 = 262266
    AltF12 = 262267

class SizeGripStyle(enum.Enum):
    Auto = 0
    Show = 1
    Hide = 2

class SizeType(enum.Enum):
    AutoSize = 0
    Absolute = 1
    Percent = 2

class SortOrder(enum.Enum):
    None_ = 0
    Ascending = 1
    Descending = 2

class SplitContainer(ContainerControl):
    """    """
    def __init__(self): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoScrollOffset(self) -> Drawing.Point: ...
    @property
    def AutoScrollPosition(self) -> Drawing.Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def FixedPanel(self) -> FixedPanel: ...
    @property
    def IsSplitterFixed(self) -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Panel1(self) -> SplitterPanel: ...
    @property
    def Panel1Collapsed(self) -> bool: ...
    @property
    def Panel1MinSize(self) -> int: ...
    @property
    def Panel2(self) -> SplitterPanel: ...
    @property
    def Panel2Collapsed(self) -> bool: ...
    @property
    def Panel2MinSize(self) -> int: ...
    @property
    def SplitterDistance(self) -> int: ...
    @property
    def SplitterIncrement(self) -> int: ...
    @property
    def SplitterRectangle(self) -> Drawing.Rectangle: ...
    @property
    def SplitterWidth(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def OnSplitterMoved(self, e: SplitterEventArgs) -> None: ...
    @overload
    def OnSplitterMoving(self, e: SplitterCancelEventArgs) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: System.Void): ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @FixedPanel.setter
    def FixedPanel(self, value: System.Void): ...
    @IsSplitterFixed.setter
    def IsSplitterFixed(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @Panel1Collapsed.setter
    def Panel1Collapsed(self, value: System.Void): ...
    @Panel1MinSize.setter
    def Panel1MinSize(self, value: System.Void): ...
    @Panel2Collapsed.setter
    def Panel2Collapsed(self, value: System.Void): ...
    @Panel2MinSize.setter
    def Panel2MinSize(self, value: System.Void): ...
    @SplitterDistance.setter
    def SplitterDistance(self, value: System.Void): ...
    @SplitterIncrement.setter
    def SplitterIncrement(self, value: System.Void): ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def SplitterMoving(self): ...
    @property
    def SplitterMoved(self): ...
    @property
    def TextChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class Splitter(Control):
    """    """
    def __init__(self): ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MinExtra(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def SplitPosition(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @MinExtra.setter
    def MinExtra(self, value: System.Void): ...
    @MinSize.setter
    def MinSize(self, value: System.Void): ...
    @SplitPosition.setter
    def SplitPosition(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def ForeColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def Leave(self): ...
    @property
    def SplitterMoving(self): ...
    @property
    def SplitterMoved(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class SplitterCancelEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, mouseCursorX: int, mouseCursorY: int, splitX: int, splitY: int): ...
    @property
    def MouseCursorX(self) -> int: ...
    @property
    def MouseCursorY(self) -> int: ...
    @property
    def SplitX(self) -> int: ...
    @property
    def SplitY(self) -> int: ...
    @SplitX.setter
    def SplitX(self, value: System.Void): ...
    @SplitY.setter
    def SplitY(self, value: System.Void): ...

class SplitterCancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SplitterCancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SplitterCancelEventArgs) -> None: ...

class SplitterEventArgs(System.EventArgs):
    """    """
    def __init__(self, x: int, y: int, splitX: int, splitY: int): ...
    @property
    def SplitX(self) -> int: ...
    @property
    def SplitY(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @SplitX.setter
    def SplitX(self, value: System.Void): ...
    @SplitY.setter
    def SplitY(self, value: System.Void): ...

class SplitterEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SplitterEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SplitterEventArgs) -> None: ...

class SplitterPanel(Panel):
    """    """
    def __init__(self, owner: SplitContainer): ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Height(self) -> int: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class StatusStrip(ToolStrip):
    """    """
    def __init__(self): ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def SizeGripBounds(self) -> Drawing.Rectangle: ...
    @property
    def SizingGrip(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    @CanOverflow.setter
    def CanOverflow(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @GripStyle.setter
    def GripStyle(self, value: System.Void): ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: System.Void): ...
    @SizingGrip.setter
    def SizingGrip(self, value: System.Void): ...
    @Stretch.setter
    def Stretch(self, value: System.Void): ...
    @property
    def PaddingChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class StructFormat(enum.Enum):
    Ansi = 1
    Unicode = 2
    Auto = 3

class SystemInformation(object):
    """    """
    @property
    def ActiveWindowTrackingDelay(self) -> int: ...
    @property
    def ArrangeDirection(self) -> ArrangeDirection: ...
    @property
    def ArrangeStartingPosition(self) -> ArrangeStartingPosition: ...
    @property
    def BootMode(self) -> BootMode: ...
    @property
    def Border3DSize(self) -> Drawing.Size: ...
    @property
    def BorderMultiplierFactor(self) -> int: ...
    @property
    def BorderSize(self) -> Drawing.Size: ...
    @property
    def CaptionButtonSize(self) -> Drawing.Size: ...
    @property
    def CaptionHeight(self) -> int: ...
    @property
    def CaretBlinkTime(self) -> int: ...
    @property
    def CaretWidth(self) -> int: ...
    @property
    def ComputerName(self) -> str: ...
    @property
    def CursorSize(self) -> Drawing.Size: ...
    @property
    def DbcsEnabled(self) -> bool: ...
    @property
    def DebugOS(self) -> bool: ...
    @property
    def DoubleClickSize(self) -> Drawing.Size: ...
    @property
    def DoubleClickTime(self) -> int: ...
    @property
    def DragFullWindows(self) -> bool: ...
    @property
    def DragSize(self) -> Drawing.Size: ...
    @property
    def FixedFrameBorderSize(self) -> Drawing.Size: ...
    @property
    def FontSmoothingContrast(self) -> int: ...
    @property
    def FontSmoothingType(self) -> int: ...
    @property
    def FrameBorderSize(self) -> Drawing.Size: ...
    @property
    def HighContrast(self) -> bool: ...
    @property
    def HorizontalFocusThickness(self) -> int: ...
    @property
    def HorizontalResizeBorderThickness(self) -> int: ...
    @property
    def HorizontalScrollBarArrowWidth(self) -> int: ...
    @property
    def HorizontalScrollBarHeight(self) -> int: ...
    @property
    def HorizontalScrollBarThumbWidth(self) -> int: ...
    @property
    def IconHorizontalSpacing(self) -> int: ...
    @property
    def IconSize(self) -> Drawing.Size: ...
    @property
    def IconSpacingSize(self) -> Drawing.Size: ...
    @property
    def IconVerticalSpacing(self) -> int: ...
    @property
    def IsActiveWindowTrackingEnabled(self) -> bool: ...
    @property
    def IsComboBoxAnimationEnabled(self) -> bool: ...
    @property
    def IsDropShadowEnabled(self) -> bool: ...
    @property
    def IsFlatMenuEnabled(self) -> bool: ...
    @property
    def IsFontSmoothingEnabled(self) -> bool: ...
    @property
    def IsHotTrackingEnabled(self) -> bool: ...
    @property
    def IsIconTitleWrappingEnabled(self) -> bool: ...
    @property
    def IsKeyboardPreferred(self) -> bool: ...
    @property
    def IsListBoxSmoothScrollingEnabled(self) -> bool: ...
    @property
    def IsMenuAnimationEnabled(self) -> bool: ...
    @property
    def IsMenuFadeEnabled(self) -> bool: ...
    @property
    def IsMinimizeRestoreAnimationEnabled(self) -> bool: ...
    @property
    def IsSelectionFadeEnabled(self) -> bool: ...
    @property
    def IsSnapToDefaultEnabled(self) -> bool: ...
    @property
    def IsTitleBarGradientEnabled(self) -> bool: ...
    @property
    def IsToolTipAnimationEnabled(self) -> bool: ...
    @property
    def KanjiWindowHeight(self) -> int: ...
    @property
    def KeyboardDelay(self) -> int: ...
    @property
    def KeyboardSpeed(self) -> int: ...
    @property
    def MaxWindowTrackSize(self) -> Drawing.Size: ...
    @property
    def MenuAccessKeysUnderlined(self) -> bool: ...
    @property
    def MenuBarButtonSize(self) -> Drawing.Size: ...
    @property
    def MenuButtonSize(self) -> Drawing.Size: ...
    @property
    def MenuCheckSize(self) -> Drawing.Size: ...
    @property
    def MenuFont(self) -> Drawing.Font: ...
    @property
    def MenuHeight(self) -> int: ...
    @property
    def MenuShowDelay(self) -> int: ...
    @property
    def MidEastEnabled(self) -> bool: ...
    @property
    def MinimizedWindowSize(self) -> Drawing.Size: ...
    @property
    def MinimizedWindowSpacingSize(self) -> Drawing.Size: ...
    @property
    def MinimumWindowSize(self) -> Drawing.Size: ...
    @property
    def MinWindowTrackSize(self) -> Drawing.Size: ...
    @property
    def MonitorCount(self) -> int: ...
    @property
    def MonitorsSameDisplayFormat(self) -> bool: ...
    @property
    def MouseButtons(self) -> int: ...
    @property
    def MouseButtonsSwapped(self) -> bool: ...
    @property
    def MouseHoverSize(self) -> Drawing.Size: ...
    @property
    def MouseHoverTime(self) -> int: ...
    @property
    def MousePresent(self) -> bool: ...
    @property
    def MouseSpeed(self) -> int: ...
    @property
    def MouseWheelPresent(self) -> bool: ...
    @property
    def MouseWheelScrollDelta(self) -> int: ...
    @property
    def MouseWheelScrollLines(self) -> int: ...
    @property
    def NativeMouseWheelSupport(self) -> bool: ...
    @property
    def Network(self) -> bool: ...
    @property
    def PenWindows(self) -> bool: ...
    @property
    def PopupMenuAlignment(self) -> LeftRightAlignment: ...
    @property
    def PowerStatus(self) -> PowerStatus: ...
    @property
    def PrimaryMonitorMaximizedWindowSize(self) -> Drawing.Size: ...
    @property
    def PrimaryMonitorSize(self) -> Drawing.Size: ...
    @property
    def RightAlignedMenus(self) -> bool: ...
    @property
    def ScreenOrientation(self) -> ScreenOrientation: ...
    @property
    def Secure(self) -> bool: ...
    @property
    def ShowSounds(self) -> bool: ...
    @property
    def SizingBorderWidth(self) -> int: ...
    @property
    def SmallCaptionButtonSize(self) -> Drawing.Size: ...
    @property
    def SmallIconSize(self) -> Drawing.Size: ...
    @property
    def TerminalServerSession(self) -> bool: ...
    @property
    def ToolWindowCaptionButtonSize(self) -> Drawing.Size: ...
    @property
    def ToolWindowCaptionHeight(self) -> int: ...
    @property
    def UIEffectsEnabled(self) -> bool: ...
    @property
    def UserDomainName(self) -> str: ...
    @property
    def UserInteractive(self) -> bool: ...
    @property
    def UserName(self) -> str: ...
    @property
    def VerticalFocusThickness(self) -> int: ...
    @property
    def VerticalResizeBorderThickness(self) -> int: ...
    @property
    def VerticalScrollBarArrowHeight(self) -> int: ...
    @property
    def VerticalScrollBarThumbHeight(self) -> int: ...
    @property
    def VerticalScrollBarWidth(self) -> int: ...
    @property
    def VirtualScreen(self) -> Drawing.Rectangle: ...
    @property
    def WorkingArea(self) -> Drawing.Rectangle: ...
    @overload
    @staticmethod
    def GetBorderSizeForDpi(dpi: int) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetHorizontalScrollBarArrowWidthForDpi(dpi: int) -> int: ...
    @overload
    @staticmethod
    def GetHorizontalScrollBarHeightForDpi(dpi: int) -> int: ...
    @overload
    @staticmethod
    def GetMenuFontForDpi(dpi: int) -> Drawing.Font: ...
    @overload
    @staticmethod
    def GetVerticalScrollBarWidthForDpi(dpi: int) -> int: ...
    @overload
    @staticmethod
    def VerticalScrollBarArrowHeightForDpi(dpi: int) -> int: ...

class SystemParameter(enum.Enum):
    DropShadow = 0
    FlatMenu = 1
    FontSmoothingContrastMetric = 2
    FontSmoothingTypeMetric = 3
    MenuFadeEnabled = 4
    SelectionFade = 5
    ToolTipAnimationMetric = 6
    UIEffects = 7
    CaretWidthMetric = 8
    VerticalFocusThicknessMetric = 9
    HorizontalFocusThicknessMetric = 10

class TabAlignment(enum.Enum):
    Top = 0
    Bottom = 1
    Left = 2
    Right = 3

class TabAppearance(enum.Enum):
    Normal = 0
    Buttons = 1
    FlatButtons = 2

class TabControl(Control):
    """    """
    def __init__(self): ...
    @overload
    def DeselectTab(self, tabPageName: str) -> None: ...
    @overload
    def DeselectTab(self, tabPage: TabPage) -> None: ...
    @overload
    def DeselectTab(self, index: int) -> None: ...
    @property
    def Alignment(self) -> TabAlignment: ...
    @property
    def Appearance(self) -> TabAppearance: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DrawMode(self) -> TabDrawMode: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def HotTrack(self) -> bool: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ItemSize(self) -> Drawing.Size: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def Padding(self) -> Drawing.Point: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedTab(self) -> TabPage: ...
    @property
    def ShowToolTips(self) -> bool: ...
    @property
    def SizeMode(self) -> TabSizeMode: ...
    @property
    def TabCount(self) -> int: ...
    @property
    def TabPages(self) -> TabPageCollection: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetControl(self, index: int) -> Control: ...
    @overload
    def GetTabRect(self, index: int) -> Drawing.Rectangle: ...
    @overload
    def SelectTab(self, tabPage: TabPage) -> None: ...
    @overload
    def SelectTab(self, tabPageName: str) -> None: ...
    @overload
    def SelectTab(self, index: int) -> None: ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @Appearance.setter
    def Appearance(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @DrawMode.setter
    def DrawMode(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @HotTrack.setter
    def HotTrack(self, value: System.Void): ...
    @ImageList.setter
    def ImageList(self, value: System.Void): ...
    @ItemSize.setter
    def ItemSize(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedTab.setter
    def SelectedTab(self, value: System.Void): ...
    @ShowToolTips.setter
    def ShowToolTips(self, value: System.Void): ...
    @SizeMode.setter
    def SizeMode(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def DrawItem(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def Selecting(self): ...
    @property
    def Selected(self): ...
    @property
    def Deselecting(self): ...
    @property
    def Deselected(self): ...
    @property
    def Paint(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TabControlAction(enum.Enum):
    Selecting = 0
    Selected = 1
    Deselecting = 2
    Deselected = 3

class TabControlCancelEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, tabPage: TabPage, tabPageIndex: int, cancel: bool, action: TabControlAction): ...
    @property
    def Action(self) -> TabControlAction: ...
    @property
    def TabPage(self) -> TabPage: ...
    @property
    def TabPageIndex(self) -> int: ...

class TabControlCancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TabControlCancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TabControlCancelEventArgs) -> None: ...

class TabControlEventArgs(System.EventArgs):
    """    """
    def __init__(self, tabPage: TabPage, tabPageIndex: int, action: TabControlAction): ...
    @property
    def Action(self) -> TabControlAction: ...
    @property
    def TabPage(self) -> TabPage: ...
    @property
    def TabPageIndex(self) -> int: ...

class TabControlEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TabControlEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TabControlEventArgs) -> None: ...

class TabDrawMode(enum.Enum):
    Normal = 0
    OwnerDrawFixed = 1

class TableLayoutCellPaintEventArgs(PaintEventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, clipRectangle: Drawing.Rectangle, cellBounds: Drawing.Rectangle, column: int, row: int): ...
    @property
    def CellBounds(self) -> Drawing.Rectangle: ...
    @property
    def Column(self) -> int: ...
    @property
    def Row(self) -> int: ...

class TableLayoutCellPaintEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TableLayoutCellPaintEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TableLayoutCellPaintEventArgs) -> None: ...

class TableLayoutColumnStyleCollection(TableLayoutStyleCollection):
    """    """
    @overload
    def Add(self, columnStyle: ColumnStyle) -> int: ...
    @overload
    def Contains(self, columnStyle: ColumnStyle) -> bool: ...
    @property
    def Item(self) -> ColumnStyle: ...
    @overload
    def IndexOf(self, columnStyle: ColumnStyle) -> int: ...
    @overload
    def Insert(self, index: int, columnStyle: ColumnStyle) -> None: ...
    @overload
    def Remove(self, columnStyle: ColumnStyle) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TableLayoutControlCollection(ControlCollection):
    """    """
    def __init__(self, container: TableLayoutPanel): ...
    @overload
    def Add(self, control: Control, column: int, row: int) -> None: ...
    @property
    def Container(self) -> TableLayoutPanel: ...

class TableLayoutPanel(Panel):
    """    """
    def __init__(self): ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CellBorderStyle(self) -> TableLayoutPanelCellBorderStyle: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection: ...
    @property
    def Controls(self) -> TableLayoutControlCollection: ...
    @property
    def GrowStyle(self) -> TableLayoutPanelGrowStyle: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def LayoutSettings(self) -> TableLayoutSettings: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowStyles(self) -> TableLayoutRowStyleCollection: ...
    @overload
    def GetCellPosition(self, control: Control) -> TableLayoutPanelCellPosition: ...
    @overload
    def GetColumn(self, control: Control) -> int: ...
    @overload
    def GetColumnSpan(self, control: Control) -> int: ...
    @overload
    def GetColumnWidths() -> System.System.Array[int]: ...
    @overload
    def GetControlFromPosition(self, column: int, row: int) -> Control: ...
    @overload
    def GetPositionFromControl(self, control: Control) -> TableLayoutPanelCellPosition: ...
    @overload
    def GetRow(self, control: Control) -> int: ...
    @overload
    def GetRowHeights() -> System.System.Array[int]: ...
    @overload
    def GetRowSpan(self, control: Control) -> int: ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CellBorderStyle.setter
    def CellBorderStyle(self, value: System.Void): ...
    @ColumnCount.setter
    def ColumnCount(self, value: System.Void): ...
    @GrowStyle.setter
    def GrowStyle(self, value: System.Void): ...
    @LayoutSettings.setter
    def LayoutSettings(self, value: System.Void): ...
    @RowCount.setter
    def RowCount(self, value: System.Void): ...
    @overload
    def SetCellPosition(self, control: Control, position: TableLayoutPanelCellPosition) -> None: ...
    @overload
    def SetColumn(self, control: Control, column: int) -> None: ...
    @overload
    def SetColumnSpan(self, control: Control, value: int) -> None: ...
    @overload
    def SetRow(self, control: Control, row: int) -> None: ...
    @overload
    def SetRowSpan(self, control: Control, value: int) -> None: ...
    @property
    def CellPaint(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TableLayoutPanelCellBorderStyle(enum.Enum):
    None_ = 0
    Single = 1
    Inset = 2
    InsetDouble = 3
    Outset = 4
    OutsetDouble = 5
    OutsetPartial = 6

class TableLayoutPanelCellPosition(System.ValueType):
    """    """
    def __init__(self, column: int, row: int): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: TableLayoutPanelCellPosition) -> bool: ...
    @property
    def Column(self) -> int: ...
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @Column.setter
    def Column(self, value: System.Void): ...
    @Row.setter
    def Row(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class TableLayoutPanelGrowStyle(enum.Enum):
    FixedSize = 0
    AddRows = 1
    AddColumns = 2

class TableLayoutRowStyleCollection(TableLayoutStyleCollection):
    """    """
    @overload
    def Add(self, rowStyle: RowStyle) -> int: ...
    @overload
    def Contains(self, rowStyle: RowStyle) -> bool: ...
    @property
    def Item(self) -> RowStyle: ...
    @overload
    def IndexOf(self, rowStyle: RowStyle) -> int: ...
    @overload
    def Insert(self, index: int, rowStyle: RowStyle) -> None: ...
    @overload
    def Remove(self, rowStyle: RowStyle) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TableLayoutSettings(LayoutSettings):
    """    """
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection: ...
    @property
    def GrowStyle(self) -> TableLayoutPanelGrowStyle: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowStyles(self) -> TableLayoutRowStyleCollection: ...
    @overload
    def GetCellPosition(self, control: object) -> TableLayoutPanelCellPosition: ...
    @overload
    def GetColumn(self, control: object) -> int: ...
    @overload
    def GetColumnSpan(self, control: object) -> int: ...
    @overload
    def GetRow(self, control: object) -> int: ...
    @overload
    def GetRowSpan(self, control: object) -> int: ...
    @ColumnCount.setter
    def ColumnCount(self, value: System.Void): ...
    @GrowStyle.setter
    def GrowStyle(self, value: System.Void): ...
    @RowCount.setter
    def RowCount(self, value: System.Void): ...
    @overload
    def SetCellPosition(self, control: object, cellPosition: TableLayoutPanelCellPosition) -> None: ...
    @overload
    def SetColumn(self, control: object, column: int) -> None: ...
    @overload
    def SetColumnSpan(self, control: object, value: int) -> None: ...
    @overload
    def SetRow(self, control: object, row: int) -> None: ...
    @overload
    def SetRowSpan(self, control: object, value: int) -> None: ...

class TableLayoutStyle(object):
    """    """
    @property
    def SizeType(self) -> SizeType: ...
    @SizeType.setter
    def SizeType(self, value: System.Void): ...

class TableLayoutStyleCollection(object):
    """    """
    @overload
    def Add(self, style: TableLayoutStyle) -> int: ...
    @overload
    def Clear() -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TableLayoutStyle: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TabPage(Panel):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def PreferredSize(self) -> Drawing.Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def UseVisualStyleBackColor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    @staticmethod
    def GetTabPageOfComponent(comp: object) -> TabPage: ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @UseVisualStyleBackColor.setter
    def UseVisualStyleBackColor(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TabRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, tabItemText: str, font: Drawing.Font, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, tabItemText: str, font: Drawing.Font, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, image: Drawing.Image, imageRectangle: Drawing.Rectangle, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, tabItemText: str, font: Drawing.Font, flags: TextFormatFlags, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, tabItemText: str, font: Drawing.Font, image: Drawing.Image, imageRectangle: Drawing.Rectangle, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabItem(g: Drawing.Graphics, bounds: Drawing.Rectangle, tabItemText: str, font: Drawing.Font, flags: TextFormatFlags, image: Drawing.Image, imageRectangle: Drawing.Rectangle, focused: bool, state: VisualStyles.TabItemState) -> None: ...
    @overload
    @staticmethod
    def DrawTabPage(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @property
    def IsSupported(self) -> bool: ...

class TabSizeMode(enum.Enum):
    Normal = 0
    FillToRight = 1
    Fixed = 2

class TaskDialog(object):
    """    """
    @overload
    def Close() -> None: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @overload
    @staticmethod
    def ShowDialog(page: TaskDialogPage, startupLocation: TaskDialogStartupLocation) -> TaskDialogButton: ...
    @overload
    @staticmethod
    def ShowDialog(owner: IWin32Window, page: TaskDialogPage, startupLocation: TaskDialogStartupLocation) -> TaskDialogButton: ...
    @overload
    @staticmethod
    def ShowDialog(hwndOwner: System.IntPtr, page: TaskDialogPage, startupLocation: TaskDialogStartupLocation) -> TaskDialogButton: ...

class TaskDialogButton(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str, enabled: bool, allowCloseDialog: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Abort(self) -> TaskDialogButton: ...
    @property
    def AllowCloseDialog(self) -> bool: ...
    @property
    def Cancel(self) -> TaskDialogButton: ...
    @property
    def Close(self) -> TaskDialogButton: ...
    @property
    def Continue(self) -> TaskDialogButton: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Help(self) -> TaskDialogButton: ...
    @property
    def Ignore(self) -> TaskDialogButton: ...
    @property
    def No(self) -> TaskDialogButton: ...
    @property
    def OK(self) -> TaskDialogButton: ...
    @property
    def Retry(self) -> TaskDialogButton: ...
    @property
    def ShowShieldIcon(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TryAgain(self) -> TaskDialogButton: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Yes(self) -> TaskDialogButton: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def PerformClick() -> None: ...
    @AllowCloseDialog.setter
    def AllowCloseDialog(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @ShowShieldIcon.setter
    def ShowShieldIcon(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def Click(self): ...

class TaskDialogButtonCollection(ObjectModel.Collection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, text: str, enabled: bool, allowCloseDialog: bool) -> TaskDialogButton: ...

class TaskDialogCommandLinkButton(TaskDialogButton):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str, descriptionText: str, enabled: bool, allowCloseDialog: bool): ...
    @property
    def DescriptionText(self) -> str: ...
    @DescriptionText.setter
    def DescriptionText(self, value: System.Void): ...
    @property
    def Click(self): ...

class TaskDialogControl(object):
    """    """
    @property
    def BoundPage(self) -> TaskDialogPage: ...
    @property
    def Tag(self) -> object: ...
    @Tag.setter
    def Tag(self, value: System.Void): ...

class TaskDialogExpander(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def CollapsedButtonText(self) -> str: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def ExpandedButtonText(self) -> str: ...
    @property
    def Position(self) -> TaskDialogExpanderPosition: ...
    @property
    def Text(self) -> str: ...
    @CollapsedButtonText.setter
    def CollapsedButtonText(self, value: System.Void): ...
    @Expanded.setter
    def Expanded(self, value: System.Void): ...
    @ExpandedButtonText.setter
    def ExpandedButtonText(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def ExpandedChanged(self): ...

class TaskDialogExpanderPosition(enum.Enum):
    AfterText = 0
    AfterFootnote = 1

class TaskDialogFootnote(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def Icon(self) -> TaskDialogIcon: ...
    @property
    def Text(self) -> str: ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class TaskDialogIcon(object):
    """    """
    @overload
    def __init__(self, image: Drawing.Bitmap): ...
    @overload
    def __init__(self, icon: Drawing.Icon): ...
    @overload
    def __init__(self, iconHandle: System.IntPtr): ...
    @property
    def None_(self) -> TaskDialogIcon: ...
    @property
    def Information(self) -> TaskDialogIcon: ...
    @property
    def Warning(self) -> TaskDialogIcon: ...
    @property
    def Error(self) -> TaskDialogIcon: ...
    @property
    def Shield(self) -> TaskDialogIcon: ...
    @property
    def ShieldBlueBar(self) -> TaskDialogIcon: ...
    @property
    def ShieldGrayBar(self) -> TaskDialogIcon: ...
    @property
    def ShieldWarningYellowBar(self) -> TaskDialogIcon: ...
    @property
    def ShieldErrorRedBar(self) -> TaskDialogIcon: ...
    @property
    def ShieldSuccessGreenBar(self) -> TaskDialogIcon: ...
    @overload
    def Dispose() -> None: ...
    @property
    def IconHandle(self) -> System.IntPtr: ...

class TaskDialogPage(object):
    """    """
    def __init__(self): ...
    @property
    def AllowCancel(self) -> bool: ...
    @property
    def AllowMinimize(self) -> bool: ...
    @property
    def BoundDialog(self) -> TaskDialog: ...
    @property
    def Buttons(self) -> TaskDialogButtonCollection: ...
    @property
    def Caption(self) -> str: ...
    @property
    def DefaultButton(self) -> TaskDialogButton: ...
    @property
    def Expander(self) -> TaskDialogExpander: ...
    @property
    def Footnote(self) -> TaskDialogFootnote: ...
    @property
    def Heading(self) -> str: ...
    @property
    def Icon(self) -> TaskDialogIcon: ...
    @property
    def ProgressBar(self) -> TaskDialogProgressBar: ...
    @property
    def RadioButtons(self) -> TaskDialogRadioButtonCollection: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def SizeToContent(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Verification(self) -> TaskDialogVerificationCheckBox: ...
    @overload
    def Navigate(self, page: TaskDialogPage) -> None: ...
    @AllowCancel.setter
    def AllowCancel(self, value: System.Void): ...
    @AllowMinimize.setter
    def AllowMinimize(self, value: System.Void): ...
    @Buttons.setter
    def Buttons(self, value: System.Void): ...
    @Caption.setter
    def Caption(self, value: System.Void): ...
    @DefaultButton.setter
    def DefaultButton(self, value: System.Void): ...
    @Expander.setter
    def Expander(self, value: System.Void): ...
    @Footnote.setter
    def Footnote(self, value: System.Void): ...
    @Heading.setter
    def Heading(self, value: System.Void): ...
    @Icon.setter
    def Icon(self, value: System.Void): ...
    @ProgressBar.setter
    def ProgressBar(self, value: System.Void): ...
    @RadioButtons.setter
    def RadioButtons(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @SizeToContent.setter
    def SizeToContent(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Verification.setter
    def Verification(self, value: System.Void): ...
    @property
    def Created(self): ...
    @property
    def Destroyed(self): ...
    @property
    def HelpRequest(self): ...

class TaskDialogProgressBar(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: TaskDialogProgressBarState): ...
    @property
    def MarqueeSpeed(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def State(self) -> TaskDialogProgressBarState: ...
    @property
    def Value(self) -> int: ...
    @MarqueeSpeed.setter
    def MarqueeSpeed(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @State.setter
    def State(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class TaskDialogProgressBarState(enum.Enum):
    Normal = 0
    Paused = 1
    Error = 2
    Marquee = 3
    MarqueePaused = 4
    None_ = 5

class TaskDialogRadioButton(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def CheckedChanged(self): ...

class TaskDialogRadioButtonCollection(ObjectModel.Collection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, text: str) -> TaskDialogRadioButton: ...

class TaskDialogStartupLocation(enum.Enum):
    CenterScreen = 0
    CenterOwner = 1

class TaskDialogVerificationCheckBox(TaskDialogControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str, isChecked: bool): ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def CheckedChanged(self): ...

class TextBox(TextBoxBase):
    """    """
    def __init__(self): ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def CharacterCasing(self) -> CharacterCasing: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def PasswordChar(self) -> System.Char: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ScrollBars(self) -> ScrollBars: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def UseSystemPasswordChar(self) -> bool: ...
    @overload
    def Paste(self, text: str) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: System.Void): ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: System.Void): ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: System.Void): ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: System.Void): ...
    @CharacterCasing.setter
    def CharacterCasing(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @PasswordChar.setter
    def PasswordChar(self, value: System.Void): ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: System.Void): ...
    @ScrollBars.setter
    def ScrollBars(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @UseSystemPasswordChar.setter
    def UseSystemPasswordChar(self, value: System.Void): ...
    @property
    def TextAlignChanged(self): ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TextBoxBase(Control):
    """    """
    @overload
    def AppendText(self, text: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ClearUndo() -> None: ...
    @overload
    def Copy() -> None: ...
    @overload
    def Cut() -> None: ...
    @overload
    def DeselectAll() -> None: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def Lines(self) -> System.System.Array[str]: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def ShortcutsEnabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def WordWrap(self) -> bool: ...
    @overload
    def GetCharFromPosition(self, pt: Drawing.Point) -> System.Char: ...
    @overload
    def GetCharIndexFromPosition(self, pt: Drawing.Point) -> int: ...
    @overload
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    @overload
    def GetFirstCharIndexOfCurrentLine() -> int: ...
    @overload
    def GetLineFromCharIndex(self, index: int) -> int: ...
    @overload
    def GetPositionFromCharIndex(self, index: int) -> Drawing.Point: ...
    @overload
    def Paste() -> None: ...
    @overload
    def ScrollToCaret() -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @HideSelection.setter
    def HideSelection(self, value: System.Void): ...
    @Lines.setter
    def Lines(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @Modified.setter
    def Modified(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SelectionLength.setter
    def SelectionLength(self, value: System.Void): ...
    @SelectionStart.setter
    def SelectionStart(self, value: System.Void): ...
    @ShortcutsEnabled.setter
    def ShortcutsEnabled(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @WordWrap.setter
    def WordWrap(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def Undo() -> None: ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def MouseClick(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TextBoxRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TextBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, textBoxText: str, font: Drawing.Font, state: VisualStyles.TextBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, textBoxText: str, font: Drawing.Font, textBounds: Drawing.Rectangle, state: VisualStyles.TextBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, textBoxText: str, font: Drawing.Font, flags: TextFormatFlags, state: VisualStyles.TextBoxState) -> None: ...
    @overload
    @staticmethod
    def DrawTextBox(g: Drawing.Graphics, bounds: Drawing.Rectangle, textBoxText: str, font: Drawing.Font, textBounds: Drawing.Rectangle, flags: TextFormatFlags, state: VisualStyles.TextBoxState) -> None: ...
    @property
    def IsSupported(self) -> bool: ...

class TextDataFormat(enum.Enum):
    Text = 0
    UnicodeText = 1
    Rtf = 2
    Html = 3
    CommaSeparatedValue = 4

class TextFormatFlags(enum.Enum):
    GlyphOverhangPadding = 0
    Left = 0
    Default = 0
    Top = 0
    HorizontalCenter = 1
    Right = 2
    VerticalCenter = 4
    Bottom = 8
    WordBreak = 16
    SingleLine = 32
    ExpandTabs = 64
    NoClipping = 256
    ExternalLeading = 512
    NoPrefix = 2048
    Internal = 4096
    TextBoxControl = 8192
    PathEllipsis = 16384
    EndEllipsis = 32768
    ModifyString = 65536
    RightToLeft = 131072
    WordEllipsis = 262144
    NoFullWidthCharacterBreak = 524288
    HidePrefix = 1048576
    PrefixOnly = 2097152
    PreserveGraphicsClipping = 16777216
    PreserveGraphicsTranslateTransform = 33554432
    NoPadding = 268435456
    LeftAndRightPadding = 536870912

class TextImageRelation(enum.Enum):
    Overlay = 0
    ImageAboveText = 1
    TextAboveImage = 2
    ImageBeforeText = 4
    TextBeforeImage = 8

class TextRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, backColor: Drawing.Color) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, backColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, bounds: Drawing.Rectangle, foreColor: Drawing.Color, backColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, backColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def DrawText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, pt: Drawing.Point, foreColor: Drawing.Color, backColor: Drawing.Color, flags: TextFormatFlags) -> None: ...
    @overload
    @staticmethod
    def MeasureText(text: str, font: Drawing.Font) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(text: System.ReadOnlySpan, font: Drawing.Font) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(text: str, font: Drawing.Font, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(text: System.ReadOnlySpan, font: Drawing.Font, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(text: str, font: Drawing.Font, proposedSize: Drawing.Size, flags: TextFormatFlags) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(text: System.ReadOnlySpan, font: Drawing.Font, proposedSize: Drawing.Size, flags: TextFormatFlags) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, proposedSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: str, font: Drawing.Font, proposedSize: Drawing.Size, flags: TextFormatFlags) -> Drawing.Size: ...
    @overload
    @staticmethod
    def MeasureText(dc: Drawing.IDeviceContext, text: System.ReadOnlySpan, font: Drawing.Font, proposedSize: Drawing.Size, flags: TextFormatFlags) -> Drawing.Size: ...

class ThreadExceptionDialog(Form):
    """    """
    def __init__(self, t: System.Exception): ...
    @property
    def AutoSize(self) -> bool: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def HelpButtonClicked(self): ...
    @property
    def MaximizedBoundsChanged(self): ...
    @property
    def MaximumSizeChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def MinimumSizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def Activated(self): ...
    @property
    def Closing(self): ...
    @property
    def Closed(self): ...
    @property
    def Deactivate(self): ...
    @property
    def FormClosing(self): ...
    @property
    def FormClosed(self): ...
    @property
    def Load(self): ...
    @property
    def MdiChildActivate(self): ...
    @property
    def MenuComplete(self): ...
    @property
    def MenuStart(self): ...
    @property
    def InputLanguageChanged(self): ...
    @property
    def InputLanguageChanging(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Shown(self): ...
    @property
    def DpiChanged(self): ...
    @property
    def ResizeBegin(self): ...
    @property
    def ResizeEnd(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TickStyle(enum.Enum):
    None_ = 0
    TopLeft = 1
    BottomRight = 2
    Both = 3

class Timer(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Interval(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Interval.setter
    def Interval(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @overload
    def Start() -> None: ...
    @overload
    def Stop() -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def Tick(self): ...
    @property
    def Disposed(self): ...

class ToolStrip(ScrollableControl):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: System.Array[ToolStripItem]): ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowItemReorder(self) -> bool: ...
    @property
    def AllowMerge(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoScrollPosition(self) -> Drawing.Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DefaultDropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripMargin(self) -> Padding: ...
    @property
    def GripRectangle(self) -> Drawing.Rectangle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImageScalingSize(self) -> Drawing.Size: ...
    @property
    def IsCurrentlyDragging(self) -> bool: ...
    @property
    def IsDropDown(self) -> bool: ...
    @property
    def Items(self) -> ToolStripItemCollection: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def LayoutSettings(self) -> LayoutSettings: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def OverflowButton(self) -> ToolStripOverflowButton: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    def GetChildAtPoint(self, point: Drawing.Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Drawing.Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetItemAt(self, point: Drawing.Point) -> ToolStripItem: ...
    @overload
    def GetItemAt(self, x: int, y: int) -> ToolStripItem: ...
    @overload
    def GetNextItem(self, start: ToolStripItem, direction: ArrowDirection) -> ToolStripItem: ...
    @overload
    def ResetMinimumSize() -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @AllowItemReorder.setter
    def AllowItemReorder(self, value: System.Void): ...
    @AllowMerge.setter
    def AllowMerge(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BindingContext.setter
    def BindingContext(self, value: System.Void): ...
    @CanOverflow.setter
    def CanOverflow(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @DefaultDropDownDirection.setter
    def DefaultDropDownDirection(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @GripMargin.setter
    def GripMargin(self, value: System.Void): ...
    @GripStyle.setter
    def GripStyle(self, value: System.Void): ...
    @ImageList.setter
    def ImageList(self, value: System.Void): ...
    @ImageScalingSize.setter
    def ImageScalingSize(self, value: System.Void): ...
    @LayoutSettings.setter
    def LayoutSettings(self, value: System.Void): ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: System.Void): ...
    @Renderer.setter
    def Renderer(self, value: System.Void): ...
    @RenderMode.setter
    def RenderMode(self, value: System.Void): ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: System.Void): ...
    @Stretch.setter
    def Stretch(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripArrowRenderEventArgs(System.EventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, toolStripItem: ToolStripItem, arrowRectangle: Drawing.Rectangle, arrowColor: Drawing.Color, arrowDirection: ArrowDirection): ...
    @property
    def ArrowColor(self) -> Drawing.Color: ...
    @property
    def ArrowRectangle(self) -> Drawing.Rectangle: ...
    @property
    def Direction(self) -> ArrowDirection: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @ArrowColor.setter
    def ArrowColor(self, value: System.Void): ...
    @ArrowRectangle.setter
    def ArrowRectangle(self, value: System.Void): ...
    @Direction.setter
    def Direction(self, value: System.Void): ...

class ToolStripArrowRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripArrowRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripArrowRenderEventArgs) -> None: ...

class ToolStripButton(ToolStripItem):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, name: str): ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: System.Void): ...
    @CheckState.setter
    def CheckState(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def CheckStateChanged(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripComboBox(ToolStripControlHost):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, c: Control): ...
    @overload
    def BeginUpdate() -> None: ...
    @overload
    def EndUpdate() -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def ComboBox(self) -> ComboBox: ...
    @property
    def DropDownHeight(self) -> int: ...
    @property
    def DropDownStyle(self) -> ComboBoxStyle: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def DroppedDown(self) -> bool: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> object: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @overload
    def GetItemHeight(self, index: int) -> int: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: System.Void): ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: System.Void): ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @DropDownHeight.setter
    def DropDownHeight(self, value: System.Void): ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: System.Void): ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: System.Void): ...
    @DroppedDown.setter
    def DroppedDown(self, value: System.Void): ...
    @FlatStyle.setter
    def FlatStyle(self, value: System.Void): ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: System.Void): ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: System.Void): ...
    @SelectedItem.setter
    def SelectedItem(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SelectionLength.setter
    def SelectionLength(self, value: System.Void): ...
    @SelectionStart.setter
    def SelectionStart(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def DoubleClick(self): ...
    @property
    def DropDown(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownStyleChanged(self): ...
    @property
    def SelectedIndexChanged(self): ...
    @property
    def TextUpdate(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripContainer(ContainerControl):
    """    """
    def __init__(self): ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BottomToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def BottomToolStripPanelVisible(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ContentPanel(self) -> ToolStripContentPanel: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def LeftToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def LeftToolStripPanelVisible(self) -> bool: ...
    @property
    def RightToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def RightToolStripPanelVisible(self) -> bool: ...
    @property
    def TopToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def TopToolStripPanelVisible(self) -> bool: ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BottomToolStripPanelVisible.setter
    def BottomToolStripPanelVisible(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @LeftToolStripPanelVisible.setter
    def LeftToolStripPanelVisible(self, value: System.Void): ...
    @RightToolStripPanelVisible.setter
    def RightToolStripPanelVisible(self, value: System.Void): ...
    @TopToolStripPanelVisible.setter
    def TopToolStripPanelVisible(self, value: System.Void): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripContentPanel(Panel):
    """    """
    def __init__(self): ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def Name(self) -> str: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Renderer.setter
    def Renderer(self, value: System.Void): ...
    @RenderMode.setter
    def RenderMode(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def Load(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def KeyUp(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripContentPanelRenderEventArgs(System.EventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, contentPanel: ToolStripContentPanel): ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def ToolStripContentPanel(self) -> ToolStripContentPanel: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class ToolStripContentPanelRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripContentPanelRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripContentPanelRenderEventArgs) -> None: ...

class ToolStripControlHost(ToolStripItem):
    """    """
    @overload
    def __init__(self, c: Control): ...
    @overload
    def __init__(self, c: Control, name: str): ...
    @overload
    def Focus() -> None: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Drawing.Color: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def ResetBackColor() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @CausesValidation.setter
    def CausesValidation(self, value: System.Void): ...
    @ControlAlign.setter
    def ControlAlign(self, value: System.Void): ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: System.Void): ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageAlign.setter
    def ImageAlign(self, value: System.Void): ...
    @ImageScaling.setter
    def ImageScaling(self, value: System.Void): ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: System.Void): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripDropDown(ToolStrip):
    """    """
    def __init__(self): ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, reason: ToolStripDropDownCloseReason) -> None: ...
    @property
    def AllowItemReorder(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoClose(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultDropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DropShadowEnabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripMargin(self) -> Padding: ...
    @property
    def GripRectangle(self) -> Drawing.Rectangle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def IsAutoGenerated(self) -> bool: ...
    @property
    def Location(self) -> Drawing.Point: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OverflowButton(self) -> ToolStripOverflowButton: ...
    @property
    def OwnerItem(self) -> ToolStripItem: ...
    @property
    def Region(self) -> Drawing.Region: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Stretch(self) -> bool: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @AllowItemReorder.setter
    def AllowItemReorder(self, value: System.Void): ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoClose.setter
    def AutoClose(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @CanOverflow.setter
    def CanOverflow(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @DefaultDropDownDirection.setter
    def DefaultDropDownDirection(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @DropShadowEnabled.setter
    def DropShadowEnabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @GripMargin.setter
    def GripMargin(self, value: System.Void): ...
    @GripStyle.setter
    def GripStyle(self, value: System.Void): ...
    @Location.setter
    def Location(self, value: System.Void): ...
    @Opacity.setter
    def Opacity(self, value: System.Void): ...
    @OwnerItem.setter
    def OwnerItem(self, value: System.Void): ...
    @Region.setter
    def Region(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Stretch.setter
    def Stretch(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @TopLevel.setter
    def TopLevel(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @overload
    def Show() -> None: ...
    @overload
    def Show(self, screenLocation: Drawing.Point) -> None: ...
    @overload
    def Show(self, control: Control, position: Drawing.Point) -> None: ...
    @overload
    def Show(self, x: int, y: int) -> None: ...
    @overload
    def Show(self, position: Drawing.Point, direction: ToolStripDropDownDirection) -> None: ...
    @overload
    def Show(self, control: Control, position: Drawing.Point, direction: ToolStripDropDownDirection) -> None: ...
    @overload
    def Show(self, control: Control, x: int, y: int) -> None: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Enter(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Leave(self): ...
    @property
    def Opening(self): ...
    @property
    def Opened(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def Validated(self): ...
    @property
    def Validating(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripDropDownButton(ToolStripDropDownItem):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, dropDownItems: System.Array[ToolStripItem]): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, name: str): ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def ShowDropDownArrow(self) -> bool: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: System.Void): ...
    @ShowDropDownArrow.setter
    def ShowDropDownArrow(self, value: System.Void): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownOpened(self): ...
    @property
    def DropDownItemClicked(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripDropDownClosedEventArgs(System.EventArgs):
    """    """
    def __init__(self, reason: ToolStripDropDownCloseReason): ...
    @property
    def CloseReason(self) -> ToolStripDropDownCloseReason: ...

class ToolStripDropDownClosedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripDropDownClosedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripDropDownClosedEventArgs) -> None: ...

class ToolStripDropDownCloseReason(enum.Enum):
    AppFocusChange = 0
    AppClicked = 1
    ItemClicked = 2
    Keyboard = 3
    CloseCalled = 4

class ToolStripDropDownClosingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, reason: ToolStripDropDownCloseReason): ...
    @property
    def CloseReason(self) -> ToolStripDropDownCloseReason: ...

class ToolStripDropDownClosingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripDropDownClosingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripDropDownClosingEventArgs) -> None: ...

class ToolStripDropDownDirection(enum.Enum):
    AboveLeft = 0
    AboveRight = 1
    BelowLeft = 2
    BelowRight = 3
    Left = 4
    Right = 5
    Default = 7

class ToolStripDropDownItem(ToolStripItem):
    """    """
    @property
    def DropDown(self) -> ToolStripDropDown: ...
    @property
    def DropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def DropDownItems(self) -> ToolStripItemCollection: ...
    @property
    def HasDropDown(self) -> bool: ...
    @property
    def HasDropDownItems(self) -> bool: ...
    @property
    def Pressed(self) -> bool: ...
    @overload
    def HideDropDown() -> None: ...
    @DropDown.setter
    def DropDown(self, value: System.Void): ...
    @DropDownDirection.setter
    def DropDownDirection(self, value: System.Void): ...
    @overload
    def ShowDropDown() -> None: ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownOpened(self): ...
    @property
    def DropDownItemClicked(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripDropDownItemAccessibleObject(ToolStripItemAccessibleObject):
    """    """
    def __init__(self, item: ToolStripDropDownItem): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @overload
    def GetChild(self, index: int) -> AccessibleObject: ...
    @overload
    def GetChildCount() -> int: ...

class ToolStripDropDownMenu(ToolStripDropDown):
    """    """
    def __init__(self): ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def ShowCheckMargin(self) -> bool: ...
    @property
    def ShowImageMargin(self) -> bool: ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: System.Void): ...
    @ShowCheckMargin.setter
    def ShowCheckMargin(self, value: System.Void): ...
    @ShowImageMargin.setter
    def ShowImageMargin(self, value: System.Void): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Enter(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Leave(self): ...
    @property
    def Opening(self): ...
    @property
    def Opened(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def Validated(self): ...
    @property
    def Validating(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripGripDisplayStyle(enum.Enum):
    Horizontal = 0
    Vertical = 1

class ToolStripGripRenderEventArgs(ToolStripRenderEventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, toolStrip: ToolStrip): ...
    @property
    def GripBounds(self) -> Drawing.Rectangle: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...

class ToolStripGripRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripGripRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripGripRenderEventArgs) -> None: ...

class ToolStripGripStyle(enum.Enum):
    Hidden = 0
    Visible = 1

class ToolStripItem(BindableComponent):
    """    """
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects, dragImage: Drawing.Bitmap, cursorOffset: Drawing.Point, useDefaultDragImage: bool) -> DragDropEffects: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def Alignment(self) -> ToolStripItemAlignment: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def Available(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Command(self) -> Input.ICommand: ...
    @property
    def CommandParameter(self) -> object: ...
    @property
    def ContentRectangle(self) -> Drawing.Rectangle: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Height(self) -> int: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Drawing.Color: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsOnDropDown(self) -> bool: ...
    @property
    def IsOnOverflow(self) -> bool: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MergeAction(self) -> MergeAction: ...
    @property
    def MergeIndex(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Overflow(self) -> ToolStripItemOverflow: ...
    @property
    def Owner(self) -> ToolStrip: ...
    @property
    def OwnerItem(self) -> ToolStripItem: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Placement(self) -> ToolStripItemPlacement: ...
    @property
    def Pressed(self) -> bool: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetCurrentParent() -> ToolStrip: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def Invalidate() -> None: ...
    @overload
    def Invalidate(self, r: Drawing.Rectangle) -> None: ...
    @overload
    def PerformClick() -> None: ...
    @overload
    def ResetBackColor() -> None: ...
    @overload
    def ResetDisplayStyle() -> None: ...
    @overload
    def ResetFont() -> None: ...
    @overload
    def ResetForeColor() -> None: ...
    @overload
    def ResetImage() -> None: ...
    @overload
    def ResetMargin() -> None: ...
    @overload
    def ResetPadding() -> None: ...
    @overload
    def ResetRightToLeft() -> None: ...
    @overload
    def ResetTextDirection() -> None: ...
    @overload
    def Select() -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: System.Void): ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: System.Void): ...
    @AccessibleName.setter
    def AccessibleName(self, value: System.Void): ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: System.Void): ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @Anchor.setter
    def Anchor(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: System.Void): ...
    @Available.setter
    def Available(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @Command.setter
    def Command(self, value: System.Void): ...
    @CommandParameter.setter
    def CommandParameter(self, value: System.Void): ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Height.setter
    def Height(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageAlign.setter
    def ImageAlign(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @ImageScaling.setter
    def ImageScaling(self, value: System.Void): ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: System.Void): ...
    @Margin.setter
    def Margin(self, value: System.Void): ...
    @MergeAction.setter
    def MergeAction(self, value: System.Void): ...
    @MergeIndex.setter
    def MergeIndex(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Overflow.setter
    def Overflow(self, value: System.Void): ...
    @Owner.setter
    def Owner(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: System.Void): ...
    @Size.setter
    def Size(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @Visible.setter
    def Visible(self, value: System.Void): ...
    @Width.setter
    def Width(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripItemAlignment(enum.Enum):
    Left = 0
    Right = 1

class ToolStripItemClickedEventArgs(System.EventArgs):
    """    """
    def __init__(self, clickedItem: ToolStripItem): ...
    @property
    def ClickedItem(self) -> ToolStripItem: ...

class ToolStripItemClickedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripItemClickedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripItemClickedEventArgs) -> None: ...

class ToolStripItemCollection(Layout.ArrangedElementCollection):
    """    """
    def __init__(self, owner: ToolStrip, value: System.Array[ToolStripItem]): ...
    @overload
    def Add(self, text: str) -> ToolStripItem: ...
    @overload
    def Add(self, image: Drawing.Image) -> ToolStripItem: ...
    @overload
    def Add(self, value: ToolStripItem) -> int: ...
    @overload
    def Add(self, text: str, image: Drawing.Image) -> ToolStripItem: ...
    @overload
    def Add(self, text: str, image: Drawing.Image, onClick: System.EventHandler) -> ToolStripItem: ...
    @overload
    def AddRange(self, toolStripItems: System.Array[ToolStripItem]) -> None: ...
    @overload
    def AddRange(self, toolStripItems: ToolStripItemCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: ToolStripItem) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[ToolStripItem], index: int) -> None: ...
    @overload
    def Find(self, key: str, searchAllChildren: bool) -> System.Array[ToolStripItem]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @overload
    def IndexOf(self, value: ToolStripItem) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, value: ToolStripItem) -> None: ...
    @overload
    def Remove(self, value: ToolStripItem) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...

class ToolStripItemDisplayStyle(enum.Enum):
    None_ = 0
    Text = 1
    Image = 2
    ImageAndText = 3

class ToolStripItemEventArgs(System.EventArgs):
    """    """
    def __init__(self, item: ToolStripItem): ...
    @property
    def Item(self) -> ToolStripItem: ...

class ToolStripItemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripItemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripItemEventArgs) -> None: ...

class ToolStripItemImageRenderEventArgs(ToolStripItemRenderEventArgs):
    """    """
    @overload
    def __init__(self, g: Drawing.Graphics, item: ToolStripItem, imageRectangle: Drawing.Rectangle): ...
    @overload
    def __init__(self, g: Drawing.Graphics, item: ToolStripItem, image: Drawing.Image, imageRectangle: Drawing.Rectangle): ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageRectangle(self) -> Drawing.Rectangle: ...

class ToolStripItemImageRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripItemImageRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripItemImageRenderEventArgs) -> None: ...

class ToolStripItemImageScaling(enum.Enum):
    None_ = 0
    SizeToFit = 1

class ToolStripItemOverflow(enum.Enum):
    Never = 0
    Always = 1
    AsNeeded = 2

class ToolStripItemPlacement(enum.Enum):
    Main = 0
    Overflow = 1
    None_ = 2

class ToolStripItemRenderEventArgs(System.EventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, item: ToolStripItem): ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @property
    def ToolStrip(self) -> ToolStrip: ...

class ToolStripItemRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripItemRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripItemRenderEventArgs) -> None: ...

class ToolStripItemTextRenderEventArgs(ToolStripItemRenderEventArgs):
    """    """
    @overload
    def __init__(self, g: Drawing.Graphics, item: ToolStripItem, text: str, textRectangle: Drawing.Rectangle, textColor: Drawing.Color, textFont: Drawing.Font, format_: TextFormatFlags): ...
    @overload
    def __init__(self, g: Drawing.Graphics, item: ToolStripItem, text: str, textRectangle: Drawing.Rectangle, textColor: Drawing.Color, textFont: Drawing.Font, textAlign: Drawing.ContentAlignment): ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Drawing.Color: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextFont(self) -> Drawing.Font: ...
    @property
    def TextFormat(self) -> TextFormatFlags: ...
    @property
    def TextRectangle(self) -> Drawing.Rectangle: ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextColor.setter
    def TextColor(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @TextFont.setter
    def TextFont(self, value: System.Void): ...
    @TextFormat.setter
    def TextFormat(self, value: System.Void): ...
    @TextRectangle.setter
    def TextRectangle(self, value: System.Void): ...

class ToolStripItemTextRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripItemTextRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripItemTextRenderEventArgs) -> None: ...

class ToolStripLabel(ToolStripItem):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, isLink: bool): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, isLink: bool, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, isLink: bool, onClick: System.EventHandler, name: str): ...
    @property
    def ActiveLinkColor(self) -> Drawing.Color: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def IsLink(self) -> bool: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Drawing.Color: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Drawing.Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: System.Void): ...
    @IsLink.setter
    def IsLink(self, value: System.Void): ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: System.Void): ...
    @LinkColor.setter
    def LinkColor(self, value: System.Void): ...
    @LinkVisited.setter
    def LinkVisited(self, value: System.Void): ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: System.Void): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripLayoutStyle(enum.Enum):
    StackWithOverflow = 0
    HorizontalStackWithOverflow = 1
    VerticalStackWithOverflow = 2
    Flow = 3
    Table = 4

class ToolStripManager(object):
    """    """
    @overload
    @staticmethod
    def FindToolStrip(toolStripName: str) -> ToolStrip: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripManagerRenderMode: ...
    @property
    def VisualStylesEnabled(self) -> bool: ...
    @overload
    @staticmethod
    def IsShortcutDefined(shortcut: Keys) -> bool: ...
    @overload
    @staticmethod
    def IsValidShortcut(shortcut: Keys) -> bool: ...
    @overload
    @staticmethod
    def LoadSettings(targetForm: Form) -> None: ...
    @overload
    @staticmethod
    def LoadSettings(targetForm: Form, key: str) -> None: ...
    @overload
    @staticmethod
    def Merge(sourceToolStrip: ToolStrip, targetToolStrip: ToolStrip) -> bool: ...
    @overload
    @staticmethod
    def Merge(sourceToolStrip: ToolStrip, targetName: str) -> bool: ...
    @overload
    @staticmethod
    def RevertMerge(targetToolStrip: ToolStrip) -> bool: ...
    @overload
    @staticmethod
    def RevertMerge(targetName: str) -> bool: ...
    @overload
    @staticmethod
    def RevertMerge(targetToolStrip: ToolStrip, sourceToolStrip: ToolStrip) -> bool: ...
    @overload
    @staticmethod
    def SaveSettings(sourceForm: Form) -> None: ...
    @overload
    @staticmethod
    def SaveSettings(sourceForm: Form, key: str) -> None: ...
    @Renderer.setter
    def Renderer(self, value: System.Void): ...
    @RenderMode.setter
    def RenderMode(self, value: System.Void): ...
    @VisualStylesEnabled.setter
    def VisualStylesEnabled(self, value: System.Void): ...
    @property
    def RendererChanged(self): ...

class ToolStripManagerRenderMode(enum.Enum):
    Custom = 0
    System = 1
    Professional = 2

class ToolStripMenuItem(ToolStripDropDownItem):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, dropDownItems: System.Array[ToolStripItem]): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, name: str): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, shortcutKeys: Keys): ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsMdiWindowListEntry(self) -> bool: ...
    @property
    def Overflow(self) -> ToolStripItemOverflow: ...
    @property
    def ShortcutKeyDisplayString(self) -> str: ...
    @property
    def ShortcutKeys(self) -> Keys: ...
    @property
    def ShowShortcutKeys(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: System.Void): ...
    @CheckState.setter
    def CheckState(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Overflow.setter
    def Overflow(self, value: System.Void): ...
    @ShortcutKeyDisplayString.setter
    def ShortcutKeyDisplayString(self, value: System.Void): ...
    @ShortcutKeys.setter
    def ShortcutKeys(self, value: System.Void): ...
    @ShowShortcutKeys.setter
    def ShowShortcutKeys(self, value: System.Void): ...
    @property
    def CheckedChanged(self): ...
    @property
    def CheckStateChanged(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownOpened(self): ...
    @property
    def DropDownItemClicked(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripOverflow(ToolStripDropDown):
    """    """
    def __init__(self, parentItem: ToolStripItem): ...
    @property
    def Items(self) -> ToolStripItemCollection: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Enter(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Leave(self): ...
    @property
    def Opening(self): ...
    @property
    def Opened(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def Validated(self): ...
    @property
    def Validating(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BeginDrag(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def EndDrag(self): ...
    @property
    def ItemAdded(self): ...
    @property
    def ItemClicked(self): ...
    @property
    def ItemRemoved(self): ...
    @property
    def LayoutCompleted(self): ...
    @property
    def LayoutStyleChanged(self): ...
    @property
    def PaintGrip(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Layout(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripOverflowButton(ToolStripDropDownButton):
    """    """
    @property
    def HasDropDownItems(self) -> bool: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: System.Void): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownOpened(self): ...
    @property
    def DropDownItemClicked(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripPanel(ContainerControl):
    """    """
    def __init__(self): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def RowMargin(self) -> Padding: ...
    @property
    def Rows(self) -> System.Array[ToolStripPanelRow]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, location: Drawing.Point) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, row: int) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, x: int, y: int) -> None: ...
    @overload
    def PointToRow(self, clientLocation: Drawing.Point) -> ToolStripPanelRow: ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @Dock.setter
    def Dock(self, value: System.Void): ...
    @Locked.setter
    def Locked(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Renderer.setter
    def Renderer(self, value: System.Void): ...
    @RenderMode.setter
    def RenderMode(self, value: System.Void): ...
    @RowMargin.setter
    def RowMargin(self, value: System.Void): ...
    @TabIndex.setter
    def TabIndex(self, value: System.Void): ...
    @TabStop.setter
    def TabStop(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def RendererChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripPanelRenderEventArgs(System.EventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, toolStripPanel: ToolStripPanel): ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def ToolStripPanel(self) -> ToolStripPanel: ...
    @Handled.setter
    def Handled(self, value: System.Void): ...

class ToolStripPanelRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripPanelRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripPanelRenderEventArgs) -> None: ...

class ToolStripPanelRow(ComponentModel.Component):
    """    """
    def __init__(self, parent: ToolStripPanel): ...
    @overload
    def CanMove(self, toolStripToDrag: ToolStrip) -> bool: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Controls(self) -> System.Array[Control]: ...
    @property
    def DisplayRectangle(self) -> Drawing.Rectangle: ...
    @property
    def LayoutEngine(self) -> Layout.LayoutEngine: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ToolStripPanel(self) -> ToolStripPanel: ...
    @Margin.setter
    def Margin(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class ToolStripProfessionalRenderer(ToolStripRenderer):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, professionalColorTable: ProfessionalColorTable): ...
    @property
    def ColorTable(self) -> ProfessionalColorTable: ...
    @property
    def RoundedEdges(self) -> bool: ...
    @RoundedEdges.setter
    def RoundedEdges(self, value: System.Void): ...
    @property
    def RenderArrow(self): ...
    @property
    def RenderToolStripBackground(self): ...
    @property
    def RenderToolStripPanelBackground(self): ...
    @property
    def RenderToolStripContentPanelBackground(self): ...
    @property
    def RenderToolStripBorder(self): ...
    @property
    def RenderButtonBackground(self): ...
    @property
    def RenderDropDownButtonBackground(self): ...
    @property
    def RenderOverflowButtonBackground(self): ...
    @property
    def RenderGrip(self): ...
    @property
    def RenderItemBackground(self): ...
    @property
    def RenderItemImage(self): ...
    @property
    def RenderItemCheck(self): ...
    @property
    def RenderItemText(self): ...
    @property
    def RenderImageMargin(self): ...
    @property
    def RenderLabelBackground(self): ...
    @property
    def RenderMenuItemBackground(self): ...
    @property
    def RenderToolStripStatusLabelBackground(self): ...
    @property
    def RenderStatusStripSizingGrip(self): ...
    @property
    def RenderSplitButtonBackground(self): ...
    @property
    def RenderSeparator(self): ...

class ToolStripProgressBar(ToolStripControlHost):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def MarqueeAnimationSpeed(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def ProgressBar(self) -> ProgressBar: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Step(self) -> int: ...
    @property
    def Style(self) -> ProgressBarStyle: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    @overload
    def Increment(self, value: int) -> None: ...
    @overload
    def PerformStep() -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @MarqueeAnimationSpeed.setter
    def MarqueeAnimationSpeed(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @Step.setter
    def Step(self, value: System.Void): ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Validated(self): ...
    @property
    def Validating(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripRenderer(object):
    """    """
    @overload
    @staticmethod
    def CreateDisabledImage(normalImage: Drawing.Image) -> Drawing.Image: ...
    @overload
    def DrawArrow(self, e: ToolStripArrowRenderEventArgs) -> None: ...
    @overload
    def DrawButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawDropDownButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawGrip(self, e: ToolStripGripRenderEventArgs) -> None: ...
    @overload
    def DrawImageMargin(self, e: ToolStripRenderEventArgs) -> None: ...
    @overload
    def DrawItemBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawItemCheck(self, e: ToolStripItemImageRenderEventArgs) -> None: ...
    @overload
    def DrawItemImage(self, e: ToolStripItemImageRenderEventArgs) -> None: ...
    @overload
    def DrawItemText(self, e: ToolStripItemTextRenderEventArgs) -> None: ...
    @overload
    def DrawLabelBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawMenuItemBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawOverflowButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawSeparator(self, e: ToolStripSeparatorRenderEventArgs) -> None: ...
    @overload
    def DrawSplitButton(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @overload
    def DrawStatusStripSizingGrip(self, e: ToolStripRenderEventArgs) -> None: ...
    @overload
    def DrawToolStripBackground(self, e: ToolStripRenderEventArgs) -> None: ...
    @overload
    def DrawToolStripBorder(self, e: ToolStripRenderEventArgs) -> None: ...
    @overload
    def DrawToolStripContentPanelBackground(self, e: ToolStripContentPanelRenderEventArgs) -> None: ...
    @overload
    def DrawToolStripPanelBackground(self, e: ToolStripPanelRenderEventArgs) -> None: ...
    @overload
    def DrawToolStripStatusLabelBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    @property
    def RenderArrow(self): ...
    @property
    def RenderToolStripBackground(self): ...
    @property
    def RenderToolStripPanelBackground(self): ...
    @property
    def RenderToolStripContentPanelBackground(self): ...
    @property
    def RenderToolStripBorder(self): ...
    @property
    def RenderButtonBackground(self): ...
    @property
    def RenderDropDownButtonBackground(self): ...
    @property
    def RenderOverflowButtonBackground(self): ...
    @property
    def RenderGrip(self): ...
    @property
    def RenderItemBackground(self): ...
    @property
    def RenderItemImage(self): ...
    @property
    def RenderItemCheck(self): ...
    @property
    def RenderItemText(self): ...
    @property
    def RenderImageMargin(self): ...
    @property
    def RenderLabelBackground(self): ...
    @property
    def RenderMenuItemBackground(self): ...
    @property
    def RenderToolStripStatusLabelBackground(self): ...
    @property
    def RenderStatusStripSizingGrip(self): ...
    @property
    def RenderSplitButtonBackground(self): ...
    @property
    def RenderSeparator(self): ...

class ToolStripRenderEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, g: Drawing.Graphics, toolStrip: ToolStrip): ...
    @overload
    def __init__(self, g: Drawing.Graphics, toolStrip: ToolStrip, affectedBounds: Drawing.Rectangle, backColor: Drawing.Color): ...
    @property
    def AffectedBounds(self) -> Drawing.Rectangle: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def ConnectedArea(self) -> Drawing.Rectangle: ...
    @property
    def Graphics(self) -> Drawing.Graphics: ...
    @property
    def ToolStrip(self) -> ToolStrip: ...

class ToolStripRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripRenderEventArgs) -> None: ...

class ToolStripRenderMode(enum.Enum):
    Custom = 0
    System = 1
    Professional = 2
    ManagerRenderMode = 3

class ToolStripSeparator(ToolStripItem):
    """    """
    def __init__(self): ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def Image(self) -> Drawing.Image: ...
    @property
    def ImageAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Drawing.Color: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> Drawing.ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def ToolTipText(self) -> str: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: System.Void): ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @Image.setter
    def Image(self, value: System.Void): ...
    @ImageAlign.setter
    def ImageAlign(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @ImageScaling.setter
    def ImageScaling(self, value: System.Void): ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: System.Void): ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @TextDirection.setter
    def TextDirection(self, value: System.Void): ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @property
    def EnabledChanged(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripSeparatorRenderEventArgs(ToolStripItemRenderEventArgs):
    """    """
    def __init__(self, g: Drawing.Graphics, separator: ToolStripSeparator, vertical: bool): ...
    @property
    def Vertical(self) -> bool: ...

class ToolStripSeparatorRenderEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ToolStripSeparatorRenderEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ToolStripSeparatorRenderEventArgs) -> None: ...

class ToolStripSplitButton(ToolStripDropDownItem):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, dropDownItems: System.Array[ToolStripItem]): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, name: str): ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def ButtonBounds(self) -> Drawing.Rectangle: ...
    @property
    def ButtonPressed(self) -> bool: ...
    @property
    def ButtonSelected(self) -> bool: ...
    @property
    def DefaultItem(self) -> ToolStripItem: ...
    @property
    def DropDownButtonBounds(self) -> Drawing.Rectangle: ...
    @property
    def DropDownButtonPressed(self) -> bool: ...
    @property
    def DropDownButtonSelected(self) -> bool: ...
    @property
    def DropDownButtonWidth(self) -> int: ...
    @property
    def SplitterBounds(self) -> Drawing.Rectangle: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def OnButtonDoubleClick(self, e: System.EventArgs) -> None: ...
    @overload
    def PerformButtonClick() -> None: ...
    @overload
    def ResetDropDownButtonWidth() -> None: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: System.Void): ...
    @DefaultItem.setter
    def DefaultItem(self, value: System.Void): ...
    @DropDownButtonWidth.setter
    def DropDownButtonWidth(self, value: System.Void): ...
    @property
    def ButtonClick(self): ...
    @property
    def ButtonDoubleClick(self): ...
    @property
    def DefaultItemChanged(self): ...
    @property
    def DropDownClosed(self): ...
    @property
    def DropDownOpening(self): ...
    @property
    def DropDownOpened(self): ...
    @property
    def DropDownItemClicked(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripStatusLabel(ToolStripLabel):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler): ...
    @overload
    def __init__(self, text: str, image: Drawing.Image, onClick: System.EventHandler, name: str): ...
    @property
    def Alignment(self) -> ToolStripItemAlignment: ...
    @property
    def BorderSides(self) -> ToolStripStatusLabelBorderSides: ...
    @property
    def BorderStyle(self) -> Border3DStyle: ...
    @property
    def LiveSetting(self) -> Automation.AutomationLiveSetting: ...
    @property
    def Spring(self) -> bool: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @Alignment.setter
    def Alignment(self, value: System.Void): ...
    @BorderSides.setter
    def BorderSides(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @LiveSetting.setter
    def LiveSetting(self, value: System.Void): ...
    @Spring.setter
    def Spring(self, value: System.Void): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripStatusLabelBorderSides(enum.Enum):
    None_ = 0
    Left = 1
    Top = 2
    Right = 4
    Bottom = 8
    All = 15

class ToolStripSystemRenderer(ToolStripRenderer):
    """    """
    def __init__(self): ...
    @property
    def RenderArrow(self): ...
    @property
    def RenderToolStripBackground(self): ...
    @property
    def RenderToolStripPanelBackground(self): ...
    @property
    def RenderToolStripContentPanelBackground(self): ...
    @property
    def RenderToolStripBorder(self): ...
    @property
    def RenderButtonBackground(self): ...
    @property
    def RenderDropDownButtonBackground(self): ...
    @property
    def RenderOverflowButtonBackground(self): ...
    @property
    def RenderGrip(self): ...
    @property
    def RenderItemBackground(self): ...
    @property
    def RenderItemImage(self): ...
    @property
    def RenderItemCheck(self): ...
    @property
    def RenderItemText(self): ...
    @property
    def RenderImageMargin(self): ...
    @property
    def RenderLabelBackground(self): ...
    @property
    def RenderMenuItemBackground(self): ...
    @property
    def RenderToolStripStatusLabelBackground(self): ...
    @property
    def RenderStatusStripSizingGrip(self): ...
    @property
    def RenderSplitButtonBackground(self): ...
    @property
    def RenderSeparator(self): ...

class ToolStripTextBox(ToolStripControlHost):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, c: Control): ...
    @overload
    def AppendText(self, text: str) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ClearUndo() -> None: ...
    @overload
    def Copy() -> None: ...
    @overload
    def Cut() -> None: ...
    @overload
    def DeselectAll() -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def CharacterCasing(self) -> CharacterCasing: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def Lines(self) -> System.System.Array[str]: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def ShortcutsEnabled(self) -> bool: ...
    @property
    def TextBox(self) -> TextBox: ...
    @property
    def TextBoxTextAlign(self) -> HorizontalAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def WordWrap(self) -> bool: ...
    @overload
    def GetCharFromPosition(self, pt: Drawing.Point) -> System.Char: ...
    @overload
    def GetCharIndexFromPosition(self, pt: Drawing.Point) -> int: ...
    @overload
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    @overload
    def GetFirstCharIndexOfCurrentLine() -> int: ...
    @overload
    def GetLineFromCharIndex(self, index: int) -> int: ...
    @overload
    def GetPositionFromCharIndex(self, index: int) -> Drawing.Point: ...
    @overload
    def GetPreferredSize(self, constrainingSize: Drawing.Size) -> Drawing.Size: ...
    @overload
    def Paste() -> None: ...
    @overload
    def ScrollToCaret() -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @overload
    def SelectAll() -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: System.Void): ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: System.Void): ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: System.Void): ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: System.Void): ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CharacterCasing.setter
    def CharacterCasing(self, value: System.Void): ...
    @HideSelection.setter
    def HideSelection(self, value: System.Void): ...
    @Lines.setter
    def Lines(self, value: System.Void): ...
    @MaxLength.setter
    def MaxLength(self, value: System.Void): ...
    @Modified.setter
    def Modified(self, value: System.Void): ...
    @Multiline.setter
    def Multiline(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @SelectedText.setter
    def SelectedText(self, value: System.Void): ...
    @SelectionLength.setter
    def SelectionLength(self, value: System.Void): ...
    @SelectionStart.setter
    def SelectionStart(self, value: System.Void): ...
    @ShortcutsEnabled.setter
    def ShortcutsEnabled(self, value: System.Void): ...
    @TextBoxTextAlign.setter
    def TextBoxTextAlign(self, value: System.Void): ...
    @WordWrap.setter
    def WordWrap(self, value: System.Void): ...
    @overload
    def Undo() -> None: ...
    @property
    def AcceptsTabChanged(self): ...
    @property
    def BorderStyleChanged(self): ...
    @property
    def HideSelectionChanged(self): ...
    @property
    def ModifiedChanged(self): ...
    @property
    def MultilineChanged(self): ...
    @property
    def ReadOnlyChanged(self): ...
    @property
    def TextBoxTextAlignChanged(self): ...
    @property
    def DisplayStyleChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def AvailableChanged(self): ...
    @property
    def CommandCanExecuteChanged(self): ...
    @property
    def CommandChanged(self): ...
    @property
    def CommandParameterChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def OwnerChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def Disposed(self): ...

class ToolStripTextDirection(enum.Enum):
    Inherit = 0
    Horizontal = 1
    Vertical90 = 2
    Vertical270 = 3

class ToolTip(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cont: ComponentModel.IContainer): ...
    @overload
    def CanExtend(self, target: object) -> bool: ...
    @property
    def Active(self) -> bool: ...
    @property
    def AutomaticDelay(self) -> int: ...
    @property
    def AutoPopDelay(self) -> int: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def InitialDelay(self) -> int: ...
    @property
    def IsBalloon(self) -> bool: ...
    @property
    def OwnerDraw(self) -> bool: ...
    @property
    def ReshowDelay(self) -> int: ...
    @property
    def ShowAlways(self) -> bool: ...
    @property
    def StripAmpersands(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolTipIcon(self) -> ToolTipIcon: ...
    @property
    def ToolTipTitle(self) -> str: ...
    @property
    def UseAnimation(self) -> bool: ...
    @property
    def UseFading(self) -> bool: ...
    @overload
    def GetToolTip(self, control: Control) -> str: ...
    @overload
    def Hide(self, win: IWin32Window) -> None: ...
    @overload
    def RemoveAll() -> None: ...
    @Active.setter
    def Active(self, value: System.Void): ...
    @AutomaticDelay.setter
    def AutomaticDelay(self, value: System.Void): ...
    @AutoPopDelay.setter
    def AutoPopDelay(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @InitialDelay.setter
    def InitialDelay(self, value: System.Void): ...
    @IsBalloon.setter
    def IsBalloon(self, value: System.Void): ...
    @OwnerDraw.setter
    def OwnerDraw(self, value: System.Void): ...
    @ReshowDelay.setter
    def ReshowDelay(self, value: System.Void): ...
    @ShowAlways.setter
    def ShowAlways(self, value: System.Void): ...
    @StripAmpersands.setter
    def StripAmpersands(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @ToolTipIcon.setter
    def ToolTipIcon(self, value: System.Void): ...
    @ToolTipTitle.setter
    def ToolTipTitle(self, value: System.Void): ...
    @UseAnimation.setter
    def UseAnimation(self, value: System.Void): ...
    @UseFading.setter
    def UseFading(self, value: System.Void): ...
    @overload
    def SetToolTip(self, control: Control, caption: str) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, point: Drawing.Point) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, duration: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, x: int, y: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, point: Drawing.Point, duration: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, x: int, y: int, duration: int) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def Draw(self): ...
    @property
    def Popup(self): ...
    @property
    def Disposed(self): ...

class ToolTipIcon(enum.Enum):
    None_ = 0
    Info = 1
    Warning = 2
    Error = 3

class TrackBar(Control):
    """    """
    def __init__(self): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def TickStyle(self) -> TickStyle: ...
    @property
    def Value(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @LargeChange.setter
    def LargeChange(self, value: System.Void): ...
    @Maximum.setter
    def Maximum(self, value: System.Void): ...
    @Minimum.setter
    def Minimum(self, value: System.Void): ...
    @Orientation.setter
    def Orientation(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @SmallChange.setter
    def SmallChange(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TickFrequency.setter
    def TickFrequency(self, value: System.Void): ...
    @TickStyle.setter
    def TickStyle(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def SetRange(self, minValue: int, maxValue: int) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def Paint(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class TrackBarRenderer(object):
    """    """
    @overload
    @staticmethod
    def DrawBottomPointingThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalTicks(g: Drawing.Graphics, bounds: Drawing.Rectangle, numTicks: int, edgeStyle: VisualStyles.EdgeStyle) -> None: ...
    @overload
    @staticmethod
    def DrawHorizontalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @overload
    @staticmethod
    def DrawLeftPointingThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawRightPointingThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawTopPointingThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalThumb(g: Drawing.Graphics, bounds: Drawing.Rectangle, state: VisualStyles.TrackBarThumbState) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalTicks(g: Drawing.Graphics, bounds: Drawing.Rectangle, numTicks: int, edgeStyle: VisualStyles.EdgeStyle) -> None: ...
    @overload
    @staticmethod
    def DrawVerticalTrack(g: Drawing.Graphics, bounds: Drawing.Rectangle) -> None: ...
    @property
    def IsSupported(self) -> bool: ...
    @overload
    @staticmethod
    def GetBottomPointingThumbSize(g: Drawing.Graphics, state: VisualStyles.TrackBarThumbState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetLeftPointingThumbSize(g: Drawing.Graphics, state: VisualStyles.TrackBarThumbState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetRightPointingThumbSize(g: Drawing.Graphics, state: VisualStyles.TrackBarThumbState) -> Drawing.Size: ...
    @overload
    @staticmethod
    def GetTopPointingThumbSize(g: Drawing.Graphics, state: VisualStyles.TrackBarThumbState) -> Drawing.Size: ...

class TreeNode(System.MarshalByRefObject):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, children: System.Array[TreeNode]): ...
    @overload
    def __init__(self, text: str, imageIndex: int, selectedImageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int, selectedImageIndex: int, children: System.Array[TreeNode]): ...
    @overload
    def BeginEdit() -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    def Collapse() -> None: ...
    @overload
    def Collapse(self, ignoreChildren: bool) -> None: ...
    @overload
    def EndEdit(self, cancel: bool) -> None: ...
    @overload
    def EnsureVisible() -> None: ...
    @overload
    def Expand() -> None: ...
    @overload
    def ExpandAll() -> None: ...
    @overload
    @staticmethod
    def FromHandle(tree: TreeView, handle: System.IntPtr) -> TreeNode: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def FirstNode(self) -> TreeNode: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsExpanded(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LastNode(self) -> TreeNode: ...
    @property
    def Level(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextNode(self) -> TreeNode: ...
    @property
    def NextVisibleNode(self) -> TreeNode: ...
    @property
    def NodeFont(self) -> Drawing.Font: ...
    @property
    def Nodes(self) -> TreeNodeCollection: ...
    @property
    def Parent(self) -> TreeNode: ...
    @property
    def PrevNode(self) -> TreeNode: ...
    @property
    def PrevVisibleNode(self) -> TreeNode: ...
    @property
    def SelectedImageIndex(self) -> int: ...
    @property
    def SelectedImageKey(self) -> str: ...
    @property
    def StateImageIndex(self) -> int: ...
    @property
    def StateImageKey(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def TreeView(self) -> TreeView: ...
    @overload
    def GetNodeCount(self, includeSubTrees: bool) -> int: ...
    @overload
    def Remove() -> None: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Checked.setter
    def Checked(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @NodeFont.setter
    def NodeFont(self, value: System.Void): ...
    @SelectedImageIndex.setter
    def SelectedImageIndex(self, value: System.Void): ...
    @SelectedImageKey.setter
    def SelectedImageKey(self, value: System.Void): ...
    @StateImageIndex.setter
    def StateImageIndex(self, value: System.Void): ...
    @StateImageKey.setter
    def StateImageKey(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @ToolTipText.setter
    def ToolTipText(self, value: System.Void): ...
    @overload
    def Toggle() -> None: ...
    @overload
    def ToString() -> str: ...

class TreeNodeCollection(object):
    """    """
    @overload
    def Add(self, node: TreeNode) -> int: ...
    @overload
    def Add(self, text: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int, selectedImageIndex: int) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str, selectedImageKey: str) -> TreeNode: ...
    @overload
    def AddRange(self, nodes: System.Array[TreeNode]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, node: TreeNode) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @overload
    def Find(self, key: str, searchAllChildren: bool) -> System.Array[TreeNode]: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TreeNode: ...
    @property
    def Item(self) -> TreeNode: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, node: TreeNode) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, node: TreeNode) -> None: ...
    @overload
    def Insert(self, index: int, text: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int, selectedImageIndex: int) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str, selectedImageKey: str) -> TreeNode: ...
    @overload
    def Remove(self, node: TreeNode) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TreeNodeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class TreeNodeMouseClickEventArgs(MouseEventArgs):
    """    """
    def __init__(self, node: TreeNode, button: MouseButtons, clicks: int, x: int, y: int): ...
    @property
    def Node(self) -> TreeNode: ...

class TreeNodeMouseClickEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TreeNodeMouseClickEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TreeNodeMouseClickEventArgs) -> None: ...

class TreeNodeMouseHoverEventArgs(System.EventArgs):
    """    """
    def __init__(self, node: TreeNode): ...
    @property
    def Node(self) -> TreeNode: ...

class TreeNodeMouseHoverEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TreeNodeMouseHoverEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TreeNodeMouseHoverEventArgs) -> None: ...

class TreeNodeStates(enum.Enum):
    Selected = 1
    Grayed = 2
    Checked = 8
    Focused = 16
    Default = 32
    Hot = 64
    Marked = 128
    Indeterminate = 256
    ShowKeyboardCues = 512

class TreeView(Control):
    """    """
    def __init__(self): ...
    @overload
    def BeginUpdate() -> None: ...
    @overload
    def CollapseAll() -> None: ...
    @overload
    def EndUpdate() -> None: ...
    @overload
    def ExpandAll() -> None: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CheckBoxes(self) -> bool: ...
    @property
    def DrawMode(self) -> TreeViewDrawMode: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def FullRowSelect(self) -> bool: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def HotTracking(self) -> bool: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def Indent(self) -> int: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def LineColor(self) -> Drawing.Color: ...
    @property
    def Nodes(self) -> TreeNodeCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PathSeparator(self) -> str: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Scrollable(self) -> bool: ...
    @property
    def SelectedImageIndex(self) -> int: ...
    @property
    def SelectedImageKey(self) -> str: ...
    @property
    def SelectedNode(self) -> TreeNode: ...
    @property
    def ShowLines(self) -> bool: ...
    @property
    def ShowNodeToolTips(self) -> bool: ...
    @property
    def ShowPlusMinus(self) -> bool: ...
    @property
    def ShowRootLines(self) -> bool: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def StateImageList(self) -> ImageList: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopNode(self) -> TreeNode: ...
    @property
    def TreeViewNodeSorter(self) -> Collections.IComparer: ...
    @property
    def VisibleCount(self) -> int: ...
    @overload
    def GetNodeAt(self, pt: Drawing.Point) -> TreeNode: ...
    @overload
    def GetNodeAt(self, x: int, y: int) -> TreeNode: ...
    @overload
    def GetNodeCount(self, includeSubTrees: bool) -> int: ...
    @overload
    def HitTest(self, pt: Drawing.Point) -> TreeViewHitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> TreeViewHitTestInfo: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @CheckBoxes.setter
    def CheckBoxes(self, value: System.Void): ...
    @DrawMode.setter
    def DrawMode(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @FullRowSelect.setter
    def FullRowSelect(self, value: System.Void): ...
    @HideSelection.setter
    def HideSelection(self, value: System.Void): ...
    @HotTracking.setter
    def HotTracking(self, value: System.Void): ...
    @ImageIndex.setter
    def ImageIndex(self, value: System.Void): ...
    @ImageKey.setter
    def ImageKey(self, value: System.Void): ...
    @ImageList.setter
    def ImageList(self, value: System.Void): ...
    @Indent.setter
    def Indent(self, value: System.Void): ...
    @ItemHeight.setter
    def ItemHeight(self, value: System.Void): ...
    @LabelEdit.setter
    def LabelEdit(self, value: System.Void): ...
    @LineColor.setter
    def LineColor(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @PathSeparator.setter
    def PathSeparator(self, value: System.Void): ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: System.Void): ...
    @Scrollable.setter
    def Scrollable(self, value: System.Void): ...
    @SelectedImageIndex.setter
    def SelectedImageIndex(self, value: System.Void): ...
    @SelectedImageKey.setter
    def SelectedImageKey(self, value: System.Void): ...
    @SelectedNode.setter
    def SelectedNode(self, value: System.Void): ...
    @ShowLines.setter
    def ShowLines(self, value: System.Void): ...
    @ShowNodeToolTips.setter
    def ShowNodeToolTips(self, value: System.Void): ...
    @ShowPlusMinus.setter
    def ShowPlusMinus(self, value: System.Void): ...
    @ShowRootLines.setter
    def ShowRootLines(self, value: System.Void): ...
    @Sorted.setter
    def Sorted(self, value: System.Void): ...
    @StateImageList.setter
    def StateImageList(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TopNode.setter
    def TopNode(self, value: System.Void): ...
    @TreeViewNodeSorter.setter
    def TreeViewNodeSorter(self, value: System.Void): ...
    @overload
    def Sort() -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def BeforeLabelEdit(self): ...
    @property
    def AfterLabelEdit(self): ...
    @property
    def BeforeCheck(self): ...
    @property
    def AfterCheck(self): ...
    @property
    def BeforeCollapse(self): ...
    @property
    def AfterCollapse(self): ...
    @property
    def BeforeExpand(self): ...
    @property
    def AfterExpand(self): ...
    @property
    def DrawNode(self): ...
    @property
    def ItemDrag(self): ...
    @property
    def NodeMouseHover(self): ...
    @property
    def BeforeSelect(self): ...
    @property
    def AfterSelect(self): ...
    @property
    def Paint(self): ...
    @property
    def NodeMouseClick(self): ...
    @property
    def NodeMouseDoubleClick(self): ...
    @property
    def RightToLeftLayoutChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class TreeViewAction(enum.Enum):
    Unknown = 0
    ByKeyboard = 1
    ByMouse = 2
    Collapse = 3
    Expand = 4

class TreeViewCancelEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, node: TreeNode, cancel: bool, action: TreeViewAction): ...
    @property
    def Action(self) -> TreeViewAction: ...
    @property
    def Node(self) -> TreeNode: ...

class TreeViewCancelEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TreeViewCancelEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TreeViewCancelEventArgs) -> None: ...

class TreeViewDrawMode(enum.Enum):
    Normal = 0
    OwnerDrawText = 1
    OwnerDrawAll = 2

class TreeViewEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self, node: TreeNode): ...
    @overload
    def __init__(self, node: TreeNode, action: TreeViewAction): ...
    @property
    def Action(self) -> TreeViewAction: ...
    @property
    def Node(self) -> TreeNode: ...

class TreeViewEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TreeViewEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TreeViewEventArgs) -> None: ...

class TreeViewHitTestInfo(object):
    """    """
    def __init__(self, hitNode: TreeNode, hitLocation: TreeViewHitTestLocations): ...
    @property
    def Location(self) -> TreeViewHitTestLocations: ...
    @property
    def Node(self) -> TreeNode: ...

class TreeViewHitTestLocations(enum.Enum):
    None_ = 1
    Image = 2
    Label = 4
    Indent = 8
    PlusMinus = 16
    RightOfLabel = 32
    StateImage = 64
    AboveClientArea = 256
    BelowClientArea = 512
    RightOfClientArea = 1024
    LeftOfClientArea = 2048

class TreeViewImageIndexConverter(ImageIndexConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def GetStandardValues(self, context: ComponentModel.ITypeDescriptorContext) -> ComponentModel.StandardValuesCollection: ...

class TreeViewImageKeyConverter(ImageKeyConverter):
    """    """
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class TypeValidationEventArgs(System.EventArgs):
    """    """
    def __init__(self, validatingType: System.Type, isValidInput: bool, returnValue: object, message: str): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def IsValidInput(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def ReturnValue(self) -> object: ...
    @property
    def ValidatingType(self) -> System.Type: ...
    @Cancel.setter
    def Cancel(self, value: System.Void): ...

class TypeValidationEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TypeValidationEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TypeValidationEventArgs) -> None: ...

class UICues(enum.Enum):
    None_ = 0
    ShowFocus = 1
    ShowKeyboard = 2
    Shown = 3
    ChangeFocus = 4
    ChangeKeyboard = 8
    Changed = 12

class UICuesEventArgs(System.EventArgs):
    """    """
    def __init__(self, uicues: UICues): ...
    @property
    def Changed(self) -> UICues: ...
    @property
    def ChangeFocus(self) -> bool: ...
    @property
    def ChangeKeyboard(self) -> bool: ...
    @property
    def ShowFocus(self) -> bool: ...
    @property
    def ShowKeyboard(self) -> bool: ...

class UICuesEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UICuesEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UICuesEventArgs) -> None: ...

class UnhandledExceptionMode(enum.Enum):
    Automatic = 0
    ThrowException = 1
    CatchException = 2

class UpDownBase(ContainerControl):
    """    """
    def __init__(self): ...
    @overload
    def DownButton() -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Drawing.Size: ...
    @property
    def AutoScrollMinSize(self) -> Drawing.Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def InterceptArrowKeys(self) -> bool: ...
    @property
    def MaximumSize(self) -> Drawing.Size: ...
    @property
    def MinimumSize(self) -> Drawing.Size: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def UpDownAlign(self) -> LeftRightAlignment: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: System.Void): ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: System.Void): ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: System.Void): ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @InterceptArrowKeys.setter
    def InterceptArrowKeys(self, value: System.Void): ...
    @MaximumSize.setter
    def MaximumSize(self, value: System.Void): ...
    @MinimumSize.setter
    def MinimumSize(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @TextAlign.setter
    def TextAlign(self, value: System.Void): ...
    @UpDownAlign.setter
    def UpDownAlign(self, value: System.Void): ...
    @overload
    def UpButton() -> None: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class UpDownEventArgs(System.EventArgs):
    """    """
    def __init__(self, buttonPushed: int): ...
    @property
    def ButtonID(self) -> int: ...

class UpDownEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, source: object, e: UpDownEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, source: object, e: UpDownEventArgs) -> None: ...

class UserControl(ContainerControl):
    """    """
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Text(self) -> str: ...
    @AutoSize.setter
    def AutoSize(self, value: System.Void): ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: System.Void): ...
    @AutoValidate.setter
    def AutoValidate(self, value: System.Void): ...
    @BorderStyle.setter
    def BorderStyle(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ValidateChildren() -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def AutoValidateChanged(self): ...
    @property
    def Load(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Scroll(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def Click(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def Disposed(self): ...

class ValidationConstraints(enum.Enum):
    None_ = 0
    Selectable = 1
    Enabled = 2
    Visible = 4
    TabStop = 8
    ImmediateChildren = 16

class View(enum.Enum):
    LargeIcon = 0
    Details = 1
    SmallIcon = 2
    List = 3
    Tile = 4

class VScrollBar(ScrollBar):
    """    """
    def __init__(self): ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def Paint(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseMove(self): ...
    @property
    def Scroll(self): ...
    @property
    def ValueChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def Enter(self): ...
    @property
    def GotFocus(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def Leave(self): ...
    @property
    def LostFocus(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class VScrollProperties(ScrollProperties):
    """    """
    def __init__(self, container: ScrollableControl): ...

class WebBrowser(WebBrowserBase):
    """    """
    def __init__(self): ...
    @property
    def AllowNavigation(self) -> bool: ...
    @property
    def AllowWebBrowserDrop(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DocumentStream(self) -> IO.Stream: ...
    @property
    def DocumentText(self) -> str: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def DocumentType(self) -> str: ...
    @property
    def EncryptionLevel(self) -> WebBrowserEncryptionLevel: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def IsBusy(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def IsWebBrowserContextMenuEnabled(self) -> bool: ...
    @property
    def ObjectForScripting(self) -> object: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ReadyState(self) -> WebBrowserReadyState: ...
    @property
    def ScriptErrorsSuppressed(self) -> bool: ...
    @property
    def ScrollBarsEnabled(self) -> bool: ...
    @property
    def StatusText(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...
    @property
    def Version(self) -> System.Version: ...
    @property
    def WebBrowserShortcutsEnabled(self) -> bool: ...
    @overload
    def GoBack() -> bool: ...
    @overload
    def GoForward() -> bool: ...
    @overload
    def GoHome() -> None: ...
    @overload
    def GoSearch() -> None: ...
    @overload
    def Navigate(self, url: System.Uri) -> None: ...
    @overload
    def Navigate(self, urlString: str) -> None: ...
    @overload
    def Navigate(self, urlString: str, newWindow: bool) -> None: ...
    @overload
    def Navigate(self, url: System.Uri, newWindow: bool) -> None: ...
    @overload
    def Navigate(self, urlString: str, targetFrameName: str) -> None: ...
    @overload
    def Navigate(self, url: System.Uri, targetFrameName: str) -> None: ...
    @overload
    def Navigate(self, url: System.Uri, targetFrameName: str, postData: System.System.Array[System.Byte], additionalHeaders: str) -> None: ...
    @overload
    def Navigate(self, urlString: str, targetFrameName: str, postData: System.System.Array[System.Byte], additionalHeaders: str) -> None: ...
    @overload
    def Print() -> None: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def Refresh(self, opt: WebBrowserRefreshOption) -> None: ...
    @AllowNavigation.setter
    def AllowNavigation(self, value: System.Void): ...
    @AllowWebBrowserDrop.setter
    def AllowWebBrowserDrop(self, value: System.Void): ...
    @DocumentStream.setter
    def DocumentStream(self, value: System.Void): ...
    @DocumentText.setter
    def DocumentText(self, value: System.Void): ...
    @IsWebBrowserContextMenuEnabled.setter
    def IsWebBrowserContextMenuEnabled(self, value: System.Void): ...
    @ObjectForScripting.setter
    def ObjectForScripting(self, value: System.Void): ...
    @Padding.setter
    def Padding(self, value: System.Void): ...
    @ScriptErrorsSuppressed.setter
    def ScriptErrorsSuppressed(self, value: System.Void): ...
    @ScrollBarsEnabled.setter
    def ScrollBarsEnabled(self, value: System.Void): ...
    @Url.setter
    def Url(self, value: System.Void): ...
    @WebBrowserShortcutsEnabled.setter
    def WebBrowserShortcutsEnabled(self, value: System.Void): ...
    @overload
    def ShowPageSetupDialog() -> None: ...
    @overload
    def ShowPrintDialog() -> None: ...
    @overload
    def ShowPrintPreviewDialog() -> None: ...
    @overload
    def ShowPropertiesDialog() -> None: ...
    @overload
    def ShowSaveAsDialog() -> None: ...
    @overload
    def Stop() -> None: ...
    @property
    def PaddingChanged(self): ...
    @property
    def CanGoBackChanged(self): ...
    @property
    def CanGoForwardChanged(self): ...
    @property
    def DocumentCompleted(self): ...
    @property
    def DocumentTitleChanged(self): ...
    @property
    def EncryptionLevelChanged(self): ...
    @property
    def FileDownload(self): ...
    @property
    def Navigated(self): ...
    @property
    def Navigating(self): ...
    @property
    def NewWindow(self): ...
    @property
    def ProgressChanged(self): ...
    @property
    def StatusTextChanged(self): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def Leave(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class WebBrowserBase(Control):
    """    """
    @overload
    def DrawToBitmap(self, bitmap: Drawing.Bitmap, targetBounds: Drawing.Rectangle) -> None: ...
    @property
    def ActiveXInstance(self) -> object: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def BackgroundImage(self) -> Drawing.Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    def PreProcessMessage() -> (bool, Message): ...
    @AllowDrop.setter
    def AllowDrop(self, value: System.Void): ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: System.Void): ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: System.Void): ...
    @Cursor.setter
    def Cursor(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @ImeMode.setter
    def ImeMode(self, value: System.Void): ...
    @RightToLeft.setter
    def RightToLeft(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: System.Void): ...
    @property
    def BackgroundImageLayoutChanged(self): ...
    @property
    def Enter(self): ...
    @property
    def Leave(self): ...
    @property
    def MouseCaptureChanged(self): ...
    @property
    def MouseClick(self): ...
    @property
    def MouseDoubleClick(self): ...
    @property
    def BackColorChanged(self): ...
    @property
    def BackgroundImageChanged(self): ...
    @property
    def BindingContextChanged(self): ...
    @property
    def CursorChanged(self): ...
    @property
    def EnabledChanged(self): ...
    @property
    def FontChanged(self): ...
    @property
    def ForeColorChanged(self): ...
    @property
    def RightToLeftChanged(self): ...
    @property
    def TextChanged(self): ...
    @property
    def Click(self): ...
    @property
    def DragDrop(self): ...
    @property
    def DragEnter(self): ...
    @property
    def DragOver(self): ...
    @property
    def DragLeave(self): ...
    @property
    def GiveFeedback(self): ...
    @property
    def HelpRequested(self): ...
    @property
    def Paint(self): ...
    @property
    def QueryContinueDrag(self): ...
    @property
    def QueryAccessibilityHelp(self): ...
    @property
    def DoubleClick(self): ...
    @property
    def ImeModeChanged(self): ...
    @property
    def KeyDown(self): ...
    @property
    def KeyPress(self): ...
    @property
    def KeyUp(self): ...
    @property
    def Layout(self): ...
    @property
    def MouseDown(self): ...
    @property
    def MouseEnter(self): ...
    @property
    def MouseLeave(self): ...
    @property
    def MouseHover(self): ...
    @property
    def MouseMove(self): ...
    @property
    def MouseUp(self): ...
    @property
    def MouseWheel(self): ...
    @property
    def ChangeUICues(self): ...
    @property
    def StyleChanged(self): ...
    @property
    def AutoSizeChanged(self): ...
    @property
    def CausesValidationChanged(self): ...
    @property
    def ClientSizeChanged(self): ...
    @property
    def ContextMenuStripChanged(self): ...
    @property
    def DockChanged(self): ...
    @property
    def LocationChanged(self): ...
    @property
    def MarginChanged(self): ...
    @property
    def RegionChanged(self): ...
    @property
    def SizeChanged(self): ...
    @property
    def TabIndexChanged(self): ...
    @property
    def TabStopChanged(self): ...
    @property
    def VisibleChanged(self): ...
    @property
    def ControlAdded(self): ...
    @property
    def ControlRemoved(self): ...
    @property
    def DataContextChanged(self): ...
    @property
    def HandleCreated(self): ...
    @property
    def HandleDestroyed(self): ...
    @property
    def Invalidated(self): ...
    @property
    def PaddingChanged(self): ...
    @property
    def GotFocus(self): ...
    @property
    def LostFocus(self): ...
    @property
    def DpiChangedBeforeParent(self): ...
    @property
    def DpiChangedAfterParent(self): ...
    @property
    def Move(self): ...
    @property
    def PreviewKeyDown(self): ...
    @property
    def Resize(self): ...
    @property
    def SystemColorsChanged(self): ...
    @property
    def Validating(self): ...
    @property
    def Validated(self): ...
    @property
    def ParentChanged(self): ...
    @property
    def Disposed(self): ...

class WebBrowserDocumentCompletedEventArgs(System.EventArgs):
    """    """
    def __init__(self, url: System.Uri): ...
    @property
    def Url(self) -> System.Uri: ...

class WebBrowserDocumentCompletedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: WebBrowserDocumentCompletedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: WebBrowserDocumentCompletedEventArgs) -> None: ...

class WebBrowserEncryptionLevel(enum.Enum):
    Insecure = 0
    Mixed = 1
    Unknown = 2
    Bit40 = 3
    Bit56 = 4
    Fortezza = 5
    Bit128 = 6

class WebBrowserNavigatedEventArgs(System.EventArgs):
    """    """
    def __init__(self, url: System.Uri): ...
    @property
    def Url(self) -> System.Uri: ...

class WebBrowserNavigatedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: WebBrowserNavigatedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: WebBrowserNavigatedEventArgs) -> None: ...

class WebBrowserNavigatingEventArgs(ComponentModel.CancelEventArgs):
    """    """
    def __init__(self, url: System.Uri, targetFrameName: str): ...
    @property
    def TargetFrameName(self) -> str: ...
    @property
    def Url(self) -> System.Uri: ...

class WebBrowserNavigatingEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: WebBrowserNavigatingEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: WebBrowserNavigatingEventArgs) -> None: ...

class WebBrowserProgressChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, currentProgress: System.Int64, maximumProgress: System.Int64): ...
    @property
    def CurrentProgress(self) -> System.Int64: ...
    @property
    def MaximumProgress(self) -> System.Int64: ...

class WebBrowserProgressChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: WebBrowserProgressChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: WebBrowserProgressChangedEventArgs) -> None: ...

class WebBrowserReadyState(enum.Enum):
    Uninitialized = 0
    Loading = 1
    Loaded = 2
    Interactive = 3
    Complete = 4

class WebBrowserRefreshOption(enum.Enum):
    Normal = 0
    IfExpired = 1
    Continue = 2
    Completely = 3

class WebBrowserSiteBase(object):
    """    """
    @overload
    def Dispose() -> None: ...

class WindowsFormsSection(object):
    """    """
    def __init__(self): ...
    @property
    def JitDebugging(self) -> bool: ...
    @JitDebugging.setter
    def JitDebugging(self, value: System.Void): ...

class WindowsFormsSynchronizationContext(Threading.SynchronizationContext):
    """    """
    def __init__(self): ...
    @overload
    def CreateCopy() -> Threading.SynchronizationContext: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AutoInstall(self) -> bool: ...
    @overload
    def Post(self, d: Threading.SendOrPostCallback, state: object) -> None: ...
    @overload
    def Send(self, d: Threading.SendOrPostCallback, state: object) -> None: ...
    @AutoInstall.setter
    def AutoInstall(self, value: System.Void): ...
    @overload
    @staticmethod
    def Uninstall() -> None: ...

class MessageLoopCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke() -> bool: ...

class ActiveXInvokeKind(enum.Enum):
    MethodInvoke = 0
    PropertyGet = 1
    PropertySet = 2

class AxComponentEditor(Design.WindowsFormsComponentEditor):
    """    """
    def __init__(self): ...
    @overload
    def EditComponent(self, context: ComponentModel.ITypeDescriptorContext, obj: object, parent: IWin32Window) -> bool: ...

class ClsidAttribute(System.Attribute):
    """    """
    def __init__(self, clsid: str): ...
    @property
    def Value(self) -> str: ...

class ConnectionPointCookie(object):
    """    """
    def __init__(self, source: object, sink: object, eventInterface: System.Type): ...
    @overload
    def Disconnect() -> None: ...

class InvalidActiveXStateException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, kind: ActiveXInvokeKind): ...
    @overload
    def ToString() -> str: ...

class State(object):
    """    """
    def __init__(self, ms: IO.Stream, storageType: int, manualUpdate: bool, licKey: str): ...

class StateConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

class TypeLibraryTimeStampAttribute(System.Attribute):
    """    """
    def __init__(self, timestamp: str): ...
    @property
    def Value(self) -> System.DateTime: ...

class ButtonBaseAccessibleObject(ControlAccessibleObject):
    """    """
    def __init__(self, owner: Control): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def State(self) -> AccessibleStates: ...

class CheckBoxAccessibleObject(ButtonBaseAccessibleObject):
    """    """
    def __init__(self, owner: Control): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...

class CheckedIndexCollection(object):
    """    """
    @overload
    def Contains(self, index: int) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, index: int) -> int: ...

class CheckedItemCollection(object):
    """    """
    @overload
    def Contains(self, item: object) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, item: object) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ObjectCollection(ObjectCollection):
    """    """
    def __init__(self, owner: CheckedListBox): ...
    @overload
    def Add(self, item: object, isChecked: bool) -> int: ...
    @overload
    def Add(self, item: object, check: CheckState) -> int: ...

class ChildAccessibleObject(AccessibleObject):
    """    """
    def __init__(self, owner: ComboBox, handle: System.IntPtr): ...
    @property
    def Name(self) -> str: ...

class ObjectCollection(object):
    """    """
    def __init__(self, owner: ComboBox): ...
    @overload
    def Add(self, item: object) -> int: ...
    @overload
    def AddRange(self, items: System.System.Array[object]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, destination: System.System.Array[object], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def Insert(self, index: int, item: object) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ControlAccessibleObject(AccessibleObject):
    """    """
    def __init__(self, ownerControl: Control): ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> Control: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @overload
    def GetHelpTopic() -> (int, str): ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents) -> None: ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents, childID: int) -> None: ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents, objectID: int, childID: int) -> None: ...
    @overload
    def RaiseLiveRegionChanged() -> bool: ...
    @Handle.setter
    def Handle(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ControlCollection(Layout.ArrangedElementCollection):
    """    """
    def __init__(self, owner: Control): ...
    @overload
    def Add(self, value: Control) -> None: ...
    @overload
    def AddRange(self, controls: System.Array[Control]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, control: Control) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def Find(self, key: str, searchAllChildren: bool) -> System.Array[Control]: ...
    @property
    def Item(self) -> Control: ...
    @property
    def Item(self) -> Control: ...
    @property
    def Owner(self) -> Control: ...
    @overload
    def GetChildIndex(self, child: Control) -> int: ...
    @overload
    def GetChildIndex(self, child: Control, throwException: bool) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, control: Control) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Remove(self, value: Control) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @overload
    def SetChildIndex(self, child: Control, newIndex: int) -> None: ...

class Format(object):
    """    """
    def __init__(self, name: str, id_: int): ...
    @property
    def Id(self) -> int: ...
    @property
    def Name(self) -> str: ...

class DataGridViewControlCollection(ControlCollection):
    """    """
    def __init__(self, owner: DataGridView): ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyTo(self, array: System.Array[Control], index: int) -> None: ...
    @overload
    def Insert(self, index: int, value: Control) -> None: ...
    @overload
    def Remove(self, value: Control) -> None: ...

class HitTestInfo(object):
    """    """
    @property
    def Nowhere(self) -> HitTestInfo: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ColumnX(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def RowY(self) -> int: ...
    @property
    def Type(self) -> DataGridViewHitTestType: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ObjectCollection(object):
    """    """
    def __init__(self, owner: DataGridViewComboBoxCell): ...
    @overload
    def Add(self, item: object) -> int: ...
    @overload
    def AddRange(self, items: System.System.Array[object]) -> None: ...
    @overload
    def AddRange(self, value: ObjectCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, destination: System.System.Array[object], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def Insert(self, index: int, item: object) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class DateTimePickerAccessibleObject(ControlAccessibleObject):
    """    """
    def __init__(self, owner: DateTimePicker): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @property
    def Value(self) -> str: ...

class DomainUpDownItemCollection(Collections.ArrayList):
    """    """
    @overload
    def Add(self, item: object) -> int: ...
    @property
    def Item(self) -> object: ...
    @overload
    def Insert(self, index: int, item: object) -> None: ...
    @overload
    def Remove(self, item: object) -> None: ...
    @overload
    def RemoveAt(self, item: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ControlCollection(ControlCollection):
    """    """
    def __init__(self, owner: Form): ...
    @overload
    def Add(self, value: Control) -> None: ...
    @overload
    def Remove(self, value: Control) -> None: ...

class HitArea(enum.Enum):
    Nowhere = 0
    TitleBackground = 1
    TitleMonth = 2
    TitleYear = 3
    NextMonthButton = 4
    PrevMonthButton = 5
    CalendarBackground = 6
    Date = 7
    NextMonthDate = 8
    PrevMonthDate = 9
    DayOfWeek = 10
    WeekNumbers = 11
    TodayLink = 12

class HitTestInfo(object):
    """    """
    @property
    def HitArea(self) -> HitArea: ...
    @property
    def Point(self) -> Drawing.Point: ...
    @property
    def Time(self) -> System.DateTime: ...

class ImageCollection(object):
    """    """
    @overload
    def Add(self, value: Drawing.Icon) -> None: ...
    @overload
    def Add(self, value: Drawing.Image) -> None: ...
    @overload
    def Add(self, key: str, image: Drawing.Image) -> None: ...
    @overload
    def Add(self, key: str, icon: Drawing.Icon) -> None: ...
    @overload
    def Add(self, value: Drawing.Image, transparentColor: Drawing.Color) -> int: ...
    @overload
    def AddRange(self, images: Drawing.System.Array[Drawing.Image]) -> None: ...
    @overload
    def AddStrip(self, value: Drawing.Image) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, image: Drawing.Image) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Empty(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Drawing.Image: ...
    @property
    def Item(self) -> Drawing.Image: ...
    @property
    def Keys(self) -> Specialized.StringCollection: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, image: Drawing.Image) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Remove(self, image: Drawing.Image) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SetKeyName(self, index: int, name: str) -> None: ...

class LinkAreaConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class Link(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, start: int, length: int): ...
    @overload
    def __init__(self, start: int, length: int, linkData: object): ...
    @property
    def Description(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def LinkData(self) -> object: ...
    @property
    def Name(self) -> str: ...
    @property
    def Start(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Visited(self) -> bool: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @Length.setter
    def Length(self, value: System.Void): ...
    @LinkData.setter
    def LinkData(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Start.setter
    def Start(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Visited.setter
    def Visited(self, value: System.Void): ...

class LinkCollection(object):
    """    """
    def __init__(self, owner: LinkLabel): ...
    @overload
    def Add(self, value: Link) -> int: ...
    @overload
    def Add(self, start: int, length: int) -> Link: ...
    @overload
    def Add(self, start: int, length: int, linkData: object) -> Link: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, link: Link) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Link: ...
    @property
    def Item(self) -> Link: ...
    @property
    def LinksAdded(self) -> bool: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, link: Link) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Remove(self, value: Link) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CheckedIndexCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Contains(self, checkedIndex: int) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, checkedIndex: int) -> int: ...

class CheckedListViewItemCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Contains(self, item: ListViewItem) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Item(self) -> ListViewItem: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, item: ListViewItem) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...

class ColumnHeaderCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Add(self, value: ColumnHeader) -> int: ...
    @overload
    def Add(self, text: str) -> ColumnHeader: ...
    @overload
    def Add(self, text: str, width: int) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str) -> ColumnHeader: ...
    @overload
    def Add(self, text: str, width: int, textAlign: HorizontalAlignment) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageKey: str) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageIndex: int) -> ColumnHeader: ...
    @overload
    def AddRange(self, values: System.Array[ColumnHeader]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: ColumnHeader) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ColumnHeader: ...
    @property
    def Item(self) -> ColumnHeader: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: ColumnHeader) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, value: ColumnHeader) -> None: ...
    @overload
    def Insert(self, index: int, text: str) -> None: ...
    @overload
    def Insert(self, index: int, text: str, width: int) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int) -> None: ...
    @overload
    def Insert(self, index: int, text: str, width: int, textAlign: HorizontalAlignment) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageKey: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageIndex: int) -> None: ...
    @overload
    def Remove(self, column: ColumnHeader) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...

class ListViewItemCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Add(self, text: str) -> ListViewItem: ...
    @overload
    def Add(self, value: ListViewItem) -> ListViewItem: ...
    @overload
    def Add(self, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Add(self, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def AddRange(self, items: System.Array[ListViewItem]) -> None: ...
    @overload
    def AddRange(self, items: ListViewItemCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: ListViewItem) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @overload
    def Find(self, key: str, searchAllSubItems: bool) -> System.Array[ListViewItem]: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Item(self) -> ListViewItem: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, item: ListViewItem) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, item: ListViewItem) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Remove(self, item: ListViewItem) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class SelectedIndexCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Add(self, itemIndex: int) -> int: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, selectedIndex: int) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, selectedIndex: int) -> int: ...
    @overload
    def Remove(self, itemIndex: int) -> None: ...

class SelectedListViewItemCollection(object):
    """    """
    def __init__(self, owner: ListView): ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: ListViewItem) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, dest: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Item(self) -> ListViewItem: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, item: ListViewItem) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...

class IntegerCollection(object):
    """    """
    def __init__(self, owner: ListBox): ...
    @overload
    def Add(self, item: int) -> int: ...
    @overload
    def AddRange(self, items: System.System.Array[int]) -> None: ...
    @overload
    def AddRange(self, value: IntegerCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: int) -> bool: ...
    @overload
    def CopyTo(self, destination: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> int: ...
    @overload
    def IndexOf(self, item: int) -> int: ...
    @overload
    def Remove(self, item: int) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ObjectCollection(object):
    """    """
    @overload
    def __init__(self, owner: ListBox): ...
    @overload
    def __init__(self, owner: ListBox, value: ObjectCollection): ...
    @overload
    def __init__(self, owner: ListBox, value: System.System.Array[object]): ...
    @overload
    def Add(self, item: object) -> int: ...
    @overload
    def AddRange(self, value: ObjectCollection) -> None: ...
    @overload
    def AddRange(self, items: System.System.Array[object]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: object) -> bool: ...
    @overload
    def CopyTo(self, destination: System.System.Array[object], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, value: object) -> int: ...
    @overload
    def Insert(self, index: int, item: object) -> None: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class SelectedIndexCollection(object):
    """    """
    def __init__(self, owner: ListBox): ...
    @overload
    def Add(self, index: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, selectedIndex: int) -> bool: ...
    @overload
    def CopyTo(self, destination: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, selectedIndex: int) -> int: ...
    @overload
    def Remove(self, index: int) -> None: ...

class SelectedObjectCollection(object):
    """    """
    def __init__(self, owner: ListBox): ...
    @overload
    def Add(self, value: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, selectedObject: object) -> bool: ...
    @overload
    def CopyTo(self, destination: System.Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, selectedObject: object) -> int: ...
    @overload
    def Remove(self, value: object) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ListViewSubItem(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, owner: ListViewItem, text: str): ...
    @overload
    def __init__(self, owner: ListViewItem, text: str, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font): ...
    @property
    def BackColor(self) -> Drawing.Color: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def Font(self) -> Drawing.Font: ...
    @property
    def ForeColor(self) -> Drawing.Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @overload
    def ResetStyle() -> None: ...
    @BackColor.setter
    def BackColor(self, value: System.Void): ...
    @Font.setter
    def Font(self, value: System.Void): ...
    @ForeColor.setter
    def ForeColor(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Tag.setter
    def Tag(self, value: System.Void): ...
    @Text.setter
    def Text(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ListViewSubItemCollection(object):
    """    """
    def __init__(self, owner: ListViewItem): ...
    @overload
    def Add(self, item: ListViewSubItem) -> ListViewSubItem: ...
    @overload
    def Add(self, text: str) -> ListViewSubItem: ...
    @overload
    def Add(self, text: str, foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font) -> ListViewSubItem: ...
    @overload
    def AddRange(self, items: System.Array[ListViewSubItem]) -> None: ...
    @overload
    def AddRange(self, items: System.System.Array[str]) -> None: ...
    @overload
    def AddRange(self, items: System.System.Array[str], foreColor: Drawing.Color, backColor: Drawing.Color, font: Drawing.Font) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, subItem: ListViewSubItem) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> ListViewSubItem: ...
    @property
    def Item(self) -> ListViewSubItem: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, subItem: ListViewSubItem) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, item: ListViewSubItem) -> None: ...
    @overload
    def Remove(self, item: ListViewSubItem) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class ControlCollection(ControlCollection):
    """    """
    def __init__(self, owner: MdiClient): ...
    @overload
    def Add(self, value: Control) -> None: ...
    @overload
    def Remove(self, value: Control) -> None: ...

class PropertyTabCollection(object):
    """    """
    @overload
    def AddTabType(self, propertyTabType: System.Type) -> None: ...
    @overload
    def AddTabType(self, propertyTabType: System.Type, tabScope: ComponentModel.PropertyTabScope) -> None: ...
    @overload
    def Clear(self, tabScope: ComponentModel.PropertyTabScope) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Design.PropertyTab: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def RemoveTabType(self, propertyTabType: System.Type) -> None: ...

class RadioButtonAccessibleObject(ControlAccessibleObject):
    """    """
    def __init__(self, owner: RadioButton): ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...

class DockPaddingEdgesConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class DockPaddingEdges(object):
    """    """
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def All(self) -> int: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Top(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @All.setter
    def All(self, value: System.Void): ...
    @Bottom.setter
    def Bottom(self, value: System.Void): ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Right.setter
    def Right(self, value: System.Void): ...
    @Top.setter
    def Top(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ControlCollection(ControlCollection):
    """    """
    def __init__(self, owner: TabControl): ...
    @overload
    def Add(self, value: Control) -> None: ...
    @overload
    def Remove(self, value: Control) -> None: ...

class TabPageCollection(object):
    """    """
    def __init__(self, owner: TabControl): ...
    @overload
    def Add(self, value: TabPage) -> None: ...
    @overload
    def Add(self, text: str) -> None: ...
    @overload
    def Add(self, key: str, text: str) -> None: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> None: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> None: ...
    @overload
    def AddRange(self, pages: System.Array[TabPage]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, page: TabPage) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> TabPage: ...
    @property
    def Item(self) -> TabPage: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, page: TabPage) -> int: ...
    @overload
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, text: str) -> None: ...
    @overload
    def Insert(self, index: int, tabPage: TabPage) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> None: ...
    @overload
    def Remove(self, value: TabPage) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TabPageControlCollection(ControlCollection):
    """    """
    def __init__(self, owner: TabPage): ...
    @overload
    def Add(self, value: Control) -> None: ...

class ToolStripAccessibleObject(ControlAccessibleObject):
    """    """
    def __init__(self, owner: ToolStrip): ...
    @property
    def Role(self) -> AccessibleRole: ...
    @overload
    def GetChild(self, index: int) -> AccessibleObject: ...
    @overload
    def GetChildCount() -> int: ...
    @overload
    def HitTest(self, x: int, y: int) -> AccessibleObject: ...

class ToolStripHostedControlAccessibleObject(ControlAccessibleObject):
    """    """
    def __init__(self, toolStripHostedControl: Control, toolStripControlHost: ToolStripControlHost): ...

class ToolStripDropDownAccessibleObject(ToolStripAccessibleObject):
    """    """
    def __init__(self, owner: ToolStripDropDown): ...
    @property
    def Name(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class ToolStripItemAccessibleObject(AccessibleObject):
    """    """
    def __init__(self, ownerItem: ToolStripItem): ...
    @overload
    def AddState(self, state: AccessibleStates) -> None: ...
    @overload
    def DoDefaultAction() -> None: ...
    @property
    def Bounds(self) -> Drawing.Rectangle: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @overload
    def GetHelpTopic() -> (int, str): ...
    @overload
    def Navigate(self, navigationDirection: AccessibleNavigation) -> AccessibleObject: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ToolStripPanelRowCollection(Layout.ArrangedElementCollection):
    """    """
    @overload
    def __init__(self, owner: ToolStripPanel): ...
    @overload
    def __init__(self, owner: ToolStripPanel, value: System.Array[ToolStripPanelRow]): ...
    @overload
    def Add(self, value: ToolStripPanelRow) -> int: ...
    @overload
    def AddRange(self, value: System.Array[ToolStripPanelRow]) -> None: ...
    @overload
    def AddRange(self, value: ToolStripPanelRowCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: ToolStripPanelRow) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[ToolStripPanelRow], index: int) -> None: ...
    @property
    def Item(self) -> ToolStripPanelRow: ...
    @overload
    def IndexOf(self, value: ToolStripPanelRow) -> int: ...
    @overload
    def Insert(self, index: int, value: ToolStripPanelRow) -> None: ...
    @overload
    def Remove(self, value: ToolStripPanelRow) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...

class ToolStripSplitButtonAccessibleObject(ToolStripItemAccessibleObject):
    """    """
    def __init__(self, item: ToolStripSplitButton): ...
    @overload
    def DoDefaultAction() -> None: ...

# endregion

# region: System.Windows.Forms.Primitives, Version=7.0.0.0

class FileDialogCustomPlace(object):
    """    """
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, knownFolderGuid: System.Guid): ...
    @property
    def KnownFolderGuid(self) -> System.Guid: ...
    @property
    def Path(self) -> str: ...
    @KnownFolderGuid.setter
    def KnownFolderGuid(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class FileDialogCustomPlacesCollection(ObjectModel.Collection):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, path: str) -> None: ...
    @overload
    def Add(self, knownFolderGuid: System.Guid) -> None: ...

class HighDpiMode(enum.Enum):
    DpiUnaware = 0
    SystemAware = 1
    PerMonitor = 2
    PerMonitorV2 = 3
    DpiUnawareGdiScaled = 4

class Message(System.ValueType):
    """    """
    @overload
    @staticmethod
    def Create(hWnd: System.IntPtr, msg: int, wparam: System.IntPtr, lparam: System.IntPtr) -> Message: ...
    @overload
    def Equals(self, other: Message) -> bool: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def HWnd(self) -> System.IntPtr: ...
    @property
    def LParam(self) -> System.IntPtr: ...
    @property
    def Msg(self) -> int: ...
    @property
    def Result(self) -> System.IntPtr: ...
    @property
    def WParam(self) -> System.IntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLParam(self, cls: System.Type) -> object: ...
    @HWnd.setter
    def HWnd(self, value: System.Void): ...
    @LParam.setter
    def LParam(self, value: System.Void): ...
    @Msg.setter
    def Msg(self, value: System.Void): ...
    @Result.setter
    def Result(self, value: System.Void): ...
    @WParam.setter
    def WParam(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class Padding(System.ValueType):
    """    """
    @overload
    def __init__(self, all_: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    @property
    def Empty(self) -> Padding: ...
    @overload
    @staticmethod
    def Add(p1: Padding, p2: Padding) -> Padding: ...
    @overload
    def Equals(self, other: Padding) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def All(self) -> int: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Horizontal(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Drawing.Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Vertical(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @All.setter
    def All(self, value: System.Void): ...
    @Bottom.setter
    def Bottom(self, value: System.Void): ...
    @Left.setter
    def Left(self, value: System.Void): ...
    @Right.setter
    def Right(self, value: System.Void): ...
    @Top.setter
    def Top(self, value: System.Void): ...
    @overload
    @staticmethod
    def Subtract(p1: Padding, p2: Padding) -> Padding: ...
    @overload
    def ToString() -> str: ...

class PaddingConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...
    @overload
    def CreateInstance(self, context: ComponentModel.ITypeDescriptorContext, propertyValues: Collections.IDictionary) -> object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ComponentModel.ITypeDescriptorContext, value: object, attributes: System.System.Array[System.Attribute]) -> ComponentModel.PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ComponentModel.ITypeDescriptorContext) -> bool: ...

class ScreenOrientation(enum.Enum):
    Angle0 = 0
    Angle90 = 1
    Angle180 = 2
    Angle270 = 3

# endregion
