"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Sources", "ConcurrentExclusiveSchedulerPair", "Task", "TaskFactory", "TaskStatus", "TaskCreationOptions", "TaskContinuationOptions", "TaskAsyncEnumerableExtensions", "TaskCanceledException", "TaskCompletionSource", "TaskExtensions", "TaskScheduler", "UnobservedTaskExceptionEventArgs", "TaskSchedulerException", "ValueTask"]
# endregion

# region: Imports
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Threading.Tasks import Sources
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ParallelOptions", "Parallel", "ParallelLoopState", "ParallelLoopResult"]
# endregion

# region: Imports
from System import Threading
from System.Collections import Concurrent
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Threading.Tasks.Parallel, Version=7.0.0.0

class ParallelOptions(object):
    """    """
    def __init__(self): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def MaxDegreeOfParallelism(self) -> int: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @CancellationToken.setter
    def CancellationToken(self, value: System.Void): ...
    @MaxDegreeOfParallelism.setter
    def MaxDegreeOfParallelism(self, value: System.Void): ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: System.Void): ...

class Parallel(object):
    """    """
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def For(fromInclusive: System.Int64, toExclusive: System.Int64, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.OrderablePartitioner, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.OrderablePartitioner, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, parallelOptions: ParallelOptions, body: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.OrderablePartitioner, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.Partitioner, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Concurrent.OrderablePartitioner, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEach(source: Generic.IEnumerable, parallelOptions: ParallelOptions, localInit: System.Func, body: System.Func, localFinally: System.Action) -> ParallelLoopResult: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IAsyncEnumerable, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IEnumerable, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IAsyncEnumerable, parallelOptions: ParallelOptions, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IEnumerable, cancellationToken: Threading.CancellationToken, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IEnumerable, parallelOptions: ParallelOptions, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def ForEachAsync(source: Generic.IAsyncEnumerable, cancellationToken: Threading.CancellationToken, body: System.Func) -> Task: ...
    @overload
    @staticmethod
    def Invoke(actions: System.System.Array[System.Action]) -> None: ...
    @overload
    @staticmethod
    def Invoke(parallelOptions: ParallelOptions, actions: System.System.Array[System.Action]) -> None: ...

class ParallelLoopState(object):
    """    """
    @overload
    def Break() -> None: ...
    @property
    def IsExceptional(self) -> bool: ...
    @property
    def IsStopped(self) -> bool: ...
    @property
    def LowestBreakIteration(self) -> System.Nullable: ...
    @property
    def ShouldExitCurrentIteration(self) -> bool: ...
    @overload
    def Stop() -> None: ...

class ParallelLoopResult(System.ValueType):
    """    """
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def LowestBreakIteration(self) -> System.Nullable: ...

# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class ConcurrentExclusiveSchedulerPair(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, taskScheduler: TaskScheduler): ...
    @overload
    def __init__(self, taskScheduler: TaskScheduler, maxConcurrencyLevel: int): ...
    @overload
    def __init__(self, taskScheduler: TaskScheduler, maxConcurrencyLevel: int, maxItemsPerTask: int): ...
    @overload
    def Complete() -> None: ...
    @property
    def Completion(self) -> Task: ...
    @property
    def ConcurrentScheduler(self) -> TaskScheduler: ...
    @property
    def ExclusiveScheduler(self) -> TaskScheduler: ...

class Task(Task):
    """    Task[TResult]
    """
    @overload
    def __init__(self, function: System.Func): ...
    @overload
    def __init__(self, function: System.Func, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, function: System.Func, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, function: System.Func, state: object): ...
    @overload
    def __init__(self, function: System.Func, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, function: System.Func, state: object, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions): ...
    @overload
    def ConfigureAwait(self, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredTaskAwaitable: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @property
    def Factory(self) -> TaskFactory: ...
    @property
    def Result(self) -> TResult: ...
    @overload
    def GetAwaiter() -> CompilerServices.TaskAwaiter: ...
    @overload
    def WaitAsync(self, timeout: System.TimeSpan) -> Task: ...
    @overload
    def WaitAsync(self, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def WaitAsync(self, timeout: System.TimeSpan, cancellationToken: Threading.CancellationToken) -> Task: ...

class TaskFactory(object):
    """    TaskFactory[TResult]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, scheduler: TaskScheduler): ...
    @overload
    def __init__(self, creationOptions: TaskCreationOptions, continuationOptions: TaskContinuationOptions): ...
    @overload
    def __init__(self, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler): ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def ContinuationOptions(self) -> TaskContinuationOptions: ...
    @property
    def CreationOptions(self) -> TaskCreationOptions: ...
    @property
    def Scheduler(self) -> TaskScheduler: ...
    @overload
    def StartNew(self, function: System.Func) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...

class TaskStatus(enum.Enum):
    Created = 0
    WaitingForActivation = 1
    WaitingToRun = 2
    Running = 3
    WaitingForChildrenToComplete = 4
    RanToCompletion = 5
    Canceled = 6
    Faulted = 7

class Task(object):
    """    """
    @overload
    def __init__(self, action: System.Action): ...
    @overload
    def __init__(self, action: System.Action, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, action: System.Action, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, action: System.Action, state: object): ...
    @overload
    def __init__(self, action: System.Action, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, action: System.Action, state: object, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, action: System.Action, state: object, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, action: System.Action, state: object, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions): ...
    @overload
    def ConfigureAwait(self, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredTaskAwaitable: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationAction: System.Action, state: object, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWith(self, continuationFunction: System.Func, state: object, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    @staticmethod
    def Delay(delay: System.TimeSpan) -> Task: ...
    @overload
    @staticmethod
    def Delay(millisecondsDelay: int) -> Task: ...
    @overload
    @staticmethod
    def Delay(delay: System.TimeSpan, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def Delay(millisecondsDelay: int, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def FromCanceled(cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def FromCanceled(cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def FromException(exception: System.Exception) -> Task: ...
    @overload
    @staticmethod
    def FromException(exception: System.Exception) -> Task: ...
    @overload
    @staticmethod
    def FromResult(result: TResult) -> Task: ...
    @property
    def AsyncState(self) -> object: ...
    @property
    def CompletedTask(self) -> Task: ...
    @property
    def CreationOptions(self) -> TaskCreationOptions: ...
    @property
    def CurrentId(self) -> System.Nullable: ...
    @property
    def Exception(self) -> System.AggregateException: ...
    @property
    def Factory(self) -> TaskFactory: ...
    @property
    def Id(self) -> int: ...
    @property
    def IsCanceled(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def IsCompletedSuccessfully(self) -> bool: ...
    @property
    def IsFaulted(self) -> bool: ...
    @property
    def Status(self) -> TaskStatus: ...
    @overload
    def GetAwaiter() -> CompilerServices.TaskAwaiter: ...
    @overload
    @staticmethod
    def Run(function: System.Func) -> Task: ...
    @overload
    @staticmethod
    def Run(function: System.Func) -> Task: ...
    @overload
    @staticmethod
    def Run(function: System.Func) -> Task: ...
    @overload
    @staticmethod
    def Run(action: System.Action) -> Task: ...
    @overload
    @staticmethod
    def Run(function: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def Run(function: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def Run(function: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def Run(action: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def RunSynchronously() -> None: ...
    @overload
    def RunSynchronously(self, scheduler: TaskScheduler) -> None: ...
    @overload
    def Start() -> None: ...
    @overload
    def Start(self, scheduler: TaskScheduler) -> None: ...
    @overload
    def Wait() -> None: ...
    @overload
    def Wait(self, millisecondsTimeout: int) -> bool: ...
    @overload
    def Wait(self, cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    def Wait(self, timeout: System.TimeSpan) -> bool: ...
    @overload
    def Wait(self, millisecondsTimeout: int, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def Wait(self, timeout: System.TimeSpan, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    @staticmethod
    def WaitAll(tasks: System.Array[Task]) -> None: ...
    @overload
    @staticmethod
    def WaitAll(tasks: System.Array[Task], cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    @staticmethod
    def WaitAll(tasks: System.Array[Task], millisecondsTimeout: int) -> bool: ...
    @overload
    @staticmethod
    def WaitAll(tasks: System.Array[Task], timeout: System.TimeSpan) -> bool: ...
    @overload
    @staticmethod
    def WaitAll(tasks: System.Array[Task], millisecondsTimeout: int, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    @staticmethod
    def WaitAny(tasks: System.Array[Task]) -> int: ...
    @overload
    @staticmethod
    def WaitAny(tasks: System.Array[Task], timeout: System.TimeSpan) -> int: ...
    @overload
    @staticmethod
    def WaitAny(tasks: System.Array[Task], cancellationToken: Threading.CancellationToken) -> int: ...
    @overload
    @staticmethod
    def WaitAny(tasks: System.Array[Task], millisecondsTimeout: int) -> int: ...
    @overload
    @staticmethod
    def WaitAny(tasks: System.Array[Task], millisecondsTimeout: int, cancellationToken: Threading.CancellationToken) -> int: ...
    @overload
    def WaitAsync(self, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def WaitAsync(self, timeout: System.TimeSpan) -> Task: ...
    @overload
    def WaitAsync(self, timeout: System.TimeSpan, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    @staticmethod
    def WhenAll(tasks: Generic.IEnumerable) -> Task: ...
    @overload
    @staticmethod
    def WhenAll(tasks: System.Array[Task]) -> Task: ...
    @overload
    @staticmethod
    def WhenAll(tasks: Generic.IEnumerable) -> Task: ...
    @overload
    @staticmethod
    def WhenAll(tasks: System.Array[Task]) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(tasks: System.Array[Task]) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(tasks: Generic.IEnumerable) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(tasks: System.Array[Task]) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(tasks: Generic.IEnumerable) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(task1: Task, task2: Task) -> Task: ...
    @overload
    @staticmethod
    def WhenAny(task1: Task, task2: Task) -> Task: ...
    @overload
    @staticmethod
    def Yield() -> CompilerServices.YieldAwaitable: ...

class TaskCreationOptions(enum.Enum):
    None_ = 0
    PreferFairness = 1
    LongRunning = 2
    AttachedToParent = 4
    DenyChildAttach = 8
    HideScheduler = 16
    RunContinuationsAsynchronously = 64

class TaskContinuationOptions(enum.Enum):
    None_ = 0
    PreferFairness = 1
    LongRunning = 2
    AttachedToParent = 4
    DenyChildAttach = 8
    HideScheduler = 16
    LazyCancellation = 32
    RunContinuationsAsynchronously = 64
    NotOnRanToCompletion = 65536
    NotOnFaulted = 131072
    OnlyOnCanceled = 196608
    NotOnCanceled = 262144
    OnlyOnFaulted = 327680
    OnlyOnRanToCompletion = 393216
    ExecuteSynchronously = 524288

class TaskAsyncEnumerableExtensions(object):
    """    """
    @overload
    @staticmethod
    def ConfigureAwait(source: System.IAsyncDisposable, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredAsyncDisposable: ...
    @overload
    @staticmethod
    def ConfigureAwait(source: Generic.IAsyncEnumerable, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredCancelableAsyncEnumerable: ...
    @overload
    @staticmethod
    def ToBlockingEnumerable(source: Generic.IAsyncEnumerable, cancellationToken: Threading.CancellationToken) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def WithCancellation(source: Generic.IAsyncEnumerable, cancellationToken: Threading.CancellationToken) -> CompilerServices.ConfiguredCancelableAsyncEnumerable: ...

class TaskCanceledException(System.OperationCanceledException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, task: Task): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, token: Threading.CancellationToken): ...
    @property
    def Task(self) -> Task: ...

class TaskCompletionSource(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, state: object): ...
    @overload
    def __init__(self, state: object, creationOptions: TaskCreationOptions): ...
    @property
    def Task(self) -> Task: ...
    @overload
    def SetCanceled() -> None: ...
    @overload
    def SetCanceled(self, cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetException(self, exceptions: Generic.IEnumerable) -> None: ...
    @overload
    def SetResult() -> None: ...
    @overload
    def TrySetCanceled() -> bool: ...
    @overload
    def TrySetCanceled(self, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def TrySetException(self, exception: System.Exception) -> bool: ...
    @overload
    def TrySetException(self, exceptions: Generic.IEnumerable) -> bool: ...
    @overload
    def TrySetResult() -> bool: ...

class TaskCompletionSource(object):
    """    TaskCompletionSource[TResult]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, creationOptions: TaskCreationOptions): ...
    @overload
    def __init__(self, state: object): ...
    @overload
    def __init__(self, state: object, creationOptions: TaskCreationOptions): ...
    @property
    def Task(self) -> Task: ...
    @overload
    def SetCanceled() -> None: ...
    @overload
    def SetCanceled(self, cancellationToken: Threading.CancellationToken) -> None: ...
    @overload
    def SetException(self, exception: System.Exception) -> None: ...
    @overload
    def SetException(self, exceptions: Generic.IEnumerable) -> None: ...
    @overload
    def SetResult(self, result: TResult) -> None: ...
    @overload
    def TrySetCanceled() -> bool: ...
    @overload
    def TrySetCanceled(self, cancellationToken: Threading.CancellationToken) -> bool: ...
    @overload
    def TrySetException(self, exception: System.Exception) -> bool: ...
    @overload
    def TrySetException(self, exceptions: Generic.IEnumerable) -> bool: ...
    @overload
    def TrySetResult(self, result: TResult) -> bool: ...

class TaskExtensions(object):
    """    """
    @overload
    @staticmethod
    def Unwrap(task: Task) -> Task: ...
    @overload
    @staticmethod
    def Unwrap(task: Task) -> Task: ...

class TaskFactory(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cancellationToken: Threading.CancellationToken): ...
    @overload
    def __init__(self, scheduler: TaskScheduler): ...
    @overload
    def __init__(self, creationOptions: TaskCreationOptions, continuationOptions: TaskContinuationOptions): ...
    @overload
    def __init__(self, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler): ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAll(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, continuationOptions: TaskContinuationOptions) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationFunction: System.Func, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def ContinueWhenAny(self, tasks: System.Array[Task], continuationAction: System.Action, cancellationToken: Threading.CancellationToken, continuationOptions: TaskContinuationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Action) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, state: object) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Action, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Func, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, state: object) -> Task: ...
    @overload
    def FromAsync(self, asyncResult: System.IAsyncResult, endMethod: System.Action, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, arg2: TArg2, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, arg2: TArg2, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Action, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def FromAsync(self, beginMethod: System.Func, endMethod: System.Func, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...
    @property
    def ContinuationOptions(self) -> TaskContinuationOptions: ...
    @property
    def CreationOptions(self) -> TaskCreationOptions: ...
    @property
    def Scheduler(self) -> TaskScheduler: ...
    @overload
    def StartNew(self, action: System.Action) -> Task: ...
    @overload
    def StartNew(self, function: System.Func) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, state: object) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, state: object, cancellationToken: Threading.CancellationToken) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, creationOptions: TaskCreationOptions) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def StartNew(self, function: System.Func, state: object, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...
    @overload
    def StartNew(self, action: System.Action, state: object, cancellationToken: Threading.CancellationToken, creationOptions: TaskCreationOptions, scheduler: TaskScheduler) -> Task: ...

class TaskScheduler(object):
    """    """
    @overload
    @staticmethod
    def FromCurrentSynchronizationContext() -> TaskScheduler: ...
    @property
    def Current(self) -> TaskScheduler: ...
    @property
    def Default(self) -> TaskScheduler: ...
    @property
    def Id(self) -> int: ...
    @property
    def MaximumConcurrencyLevel(self) -> int: ...
    @property
    def UnobservedTaskException(self): ...

class UnobservedTaskExceptionEventArgs(System.EventArgs):
    """    """
    def __init__(self, exception: System.AggregateException): ...
    @property
    def Exception(self) -> System.AggregateException: ...
    @property
    def Observed(self) -> bool: ...
    @overload
    def SetObserved() -> None: ...

class TaskSchedulerException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ValueTask(System.ValueType):
    """    """
    @overload
    def __init__(self, task: Task): ...
    @overload
    def __init__(self, source: Sources.IValueTaskSource, token: System.Int16): ...
    @overload
    def AsTask() -> Task: ...
    @overload
    def ConfigureAwait(self, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredValueTaskAwaitable: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTask) -> bool: ...
    @overload
    @staticmethod
    def FromCanceled(cancellationToken: Threading.CancellationToken) -> ValueTask: ...
    @overload
    @staticmethod
    def FromCanceled(cancellationToken: Threading.CancellationToken) -> ValueTask: ...
    @overload
    @staticmethod
    def FromException(exception: System.Exception) -> ValueTask: ...
    @overload
    @staticmethod
    def FromException(exception: System.Exception) -> ValueTask: ...
    @overload
    @staticmethod
    def FromResult(result: TResult) -> ValueTask: ...
    @property
    def CompletedTask(self) -> ValueTask: ...
    @property
    def IsCanceled(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def IsCompletedSuccessfully(self) -> bool: ...
    @property
    def IsFaulted(self) -> bool: ...
    @overload
    def GetAwaiter() -> CompilerServices.ValueTaskAwaiter: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Preserve() -> ValueTask: ...

class ValueTask(System.ValueType):
    """    ValueTask[TResult]
    """
    @overload
    def __init__(self, result: TResult): ...
    @overload
    def __init__(self, task: Task): ...
    @overload
    def __init__(self, source: Sources.IValueTaskSource, token: System.Int16): ...
    @overload
    def AsTask() -> Task: ...
    @overload
    def ConfigureAwait(self, continueOnCapturedContext: bool) -> CompilerServices.ConfiguredValueTaskAwaitable: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTask) -> bool: ...
    @property
    def IsCanceled(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def IsCompletedSuccessfully(self) -> bool: ...
    @property
    def IsFaulted(self) -> bool: ...
    @property
    def Result(self) -> TResult: ...
    @overload
    def GetAwaiter() -> CompilerServices.ValueTaskAwaiter: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Preserve() -> ValueTask: ...
    @overload
    def ToString() -> str: ...

# endregion
