"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IResourceWriter", "ResourceWriter"]
# endregion

# region: Imports
from System import IO
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Extensions"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IResourceReader", "MissingManifestResourceException", "MissingSatelliteAssemblyException", "NeutralResourcesLanguageAttribute", "ResourceManager", "ResourceReader", "ResourceSet", "SatelliteContractVersionAttribute", "UltimateResourceFallbackLocation"]
# endregion

# region: Imports
from System import Collections
from System import Globalization
from System import IO
from System import Reflection
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ResXDataNode", "ResXFileRef", "ResXResourceReader", "ResXResourceSet", "ResXResourceWriter", "Converter"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System import Drawing
from System import Globalization
from System import IO
from System import Reflection
from System import Text
from System.ComponentModel import Design
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Windows.Forms, Version=7.0.0.0

class ResXDataNode(object):
    """    """
    @overload
    def __init__(self, name: str, value: object): ...
    @overload
    def __init__(self, name: str, fileRef: ResXFileRef): ...
    @overload
    def __init__(self, name: str, value: object, typeNameConverter: System.Func): ...
    @overload
    def __init__(self, name: str, fileRef: ResXFileRef, typeNameConverter: System.Func): ...
    @property
    def Comment(self) -> str: ...
    @property
    def FileRef(self) -> ResXFileRef: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetNodePosition() -> Drawing.Point: ...
    @overload
    def GetValue(self, typeResolver: Design.ITypeResolutionService) -> object: ...
    @overload
    def GetValue(self, names: Reflection.System.Array[Reflection.AssemblyName]) -> object: ...
    @overload
    def GetValueTypeName(self, typeResolver: Design.ITypeResolutionService) -> str: ...
    @overload
    def GetValueTypeName(self, names: Reflection.System.Array[Reflection.AssemblyName]) -> str: ...
    @Comment.setter
    def Comment(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class ResXFileRef(object):
    """    """
    @overload
    def __init__(self, fileName: str, typeName: str): ...
    @overload
    def __init__(self, fileName: str, typeName: str, textFileEncoding: Text.Encoding): ...
    @property
    def FileName(self) -> str: ...
    @property
    def TextFileEncoding(self) -> Text.Encoding: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def ToString() -> str: ...

class ResXResourceReader(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, reader: IO.TextReader): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, fileName: str, typeResolver: Design.ITypeResolutionService): ...
    @overload
    def __init__(self, reader: IO.TextReader, typeResolver: Design.ITypeResolutionService): ...
    @overload
    def __init__(self, stream: IO.Stream, typeResolver: Design.ITypeResolutionService): ...
    @overload
    def __init__(self, stream: IO.Stream, assemblyNames: Reflection.System.Array[Reflection.AssemblyName]): ...
    @overload
    def __init__(self, reader: IO.TextReader, assemblyNames: Reflection.System.Array[Reflection.AssemblyName]): ...
    @overload
    def __init__(self, fileName: str, assemblyNames: Reflection.System.Array[Reflection.AssemblyName]): ...
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def FromFileContents(fileContents: str) -> ResXResourceReader: ...
    @overload
    @staticmethod
    def FromFileContents(fileContents: str, typeResolver: Design.ITypeResolutionService) -> ResXResourceReader: ...
    @overload
    @staticmethod
    def FromFileContents(fileContents: str, assemblyNames: Reflection.System.Array[Reflection.AssemblyName]) -> ResXResourceReader: ...
    @property
    def BasePath(self) -> str: ...
    @property
    def UseResXDataNodes(self) -> bool: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def GetMetadataEnumerator() -> Collections.IDictionaryEnumerator: ...
    @BasePath.setter
    def BasePath(self, value: System.Void): ...
    @UseResXDataNodes.setter
    def UseResXDataNodes(self, value: System.Void): ...

class ResXResourceSet(ResourceSet):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def GetDefaultReader() -> System.Type: ...
    @overload
    def GetDefaultWriter() -> System.Type: ...

class ResXResourceWriter(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, textWriter: IO.TextWriter): ...
    @overload
    def __init__(self, fileName: str, typeNameConverter: System.Func): ...
    @overload
    def __init__(self, stream: IO.Stream, typeNameConverter: System.Func): ...
    @overload
    def __init__(self, textWriter: IO.TextWriter, typeNameConverter: System.Func): ...
    @property
    def BinSerializedObjectMimeType(self) -> str: ...
    @property
    def SoapSerializedObjectMimeType(self) -> str: ...
    @property
    def DefaultSerializedObjectMimeType(self) -> str: ...
    @property
    def ByteArraySerializedObjectMimeType(self) -> str: ...
    @property
    def ResMimeType(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def ResourceSchema(self) -> str: ...
    @overload
    def AddAlias(self, aliasName: str, assemblyName: Reflection.AssemblyName) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: str) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: object) -> None: ...
    @overload
    def AddResource(self, node: ResXDataNode) -> None: ...
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def AddResource(self, name: str, value: object) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Generate() -> None: ...
    @property
    def BasePath(self) -> str: ...
    @BasePath.setter
    def BasePath(self, value: System.Void): ...

class Converter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: System.Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: System.Type) -> object: ...

# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class IResourceReader:
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...

class MissingManifestResourceException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class MissingSatelliteAssemblyException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, cultureName: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @property
    def CultureName(self) -> str: ...

class NeutralResourcesLanguageAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, cultureName: str): ...
    @overload
    def __init__(self, cultureName: str, location: UltimateResourceFallbackLocation): ...
    @property
    def CultureName(self) -> str: ...
    @property
    def Location(self) -> UltimateResourceFallbackLocation: ...

class ResourceManager(object):
    """    """
    @overload
    def __init__(self, resourceSource: System.Type): ...
    @overload
    def __init__(self, baseName: str, assembly: Reflection.Assembly): ...
    @overload
    def __init__(self, baseName: str, assembly: Reflection.Assembly, usingResourceSet: System.Type): ...
    @property
    def MagicNumber(self) -> int: ...
    @property
    def HeaderVersionNumber(self) -> int: ...
    @overload
    @staticmethod
    def CreateFileBasedResourceManager(baseName: str, resourceDir: str, usingResourceSet: System.Type) -> ResourceManager: ...
    @property
    def BaseName(self) -> str: ...
    @property
    def IgnoreCase(self) -> bool: ...
    @property
    def ResourceSetType(self) -> System.Type: ...
    @overload
    def GetObject(self, name: str) -> object: ...
    @overload
    def GetObject(self, name: str, culture: Globalization.CultureInfo) -> object: ...
    @overload
    def GetResourceSet(self, culture: Globalization.CultureInfo, createIfNotExists: bool, tryParents: bool) -> ResourceSet: ...
    @overload
    def GetStream(self, name: str) -> IO.UnmanagedMemoryStream: ...
    @overload
    def GetStream(self, name: str, culture: Globalization.CultureInfo) -> IO.UnmanagedMemoryStream: ...
    @overload
    def GetString(self, name: str) -> str: ...
    @overload
    def GetString(self, name: str, culture: Globalization.CultureInfo) -> str: ...
    @overload
    def ReleaseAllResources() -> None: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: System.Void): ...

class ResourceReader(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def GetResourceData(self, resourceName: str) -> (str, System.System.Array[System.Byte]): ...

class ResourceSet(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, reader: IResourceReader): ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def GetDefaultReader() -> System.Type: ...
    @overload
    def GetDefaultWriter() -> System.Type: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...
    @overload
    def GetObject(self, name: str) -> object: ...
    @overload
    def GetObject(self, name: str, ignoreCase: bool) -> object: ...
    @overload
    def GetString(self, name: str) -> str: ...
    @overload
    def GetString(self, name: str, ignoreCase: bool) -> str: ...

class SatelliteContractVersionAttribute(System.Attribute):
    """    """
    def __init__(self, version: str): ...
    @property
    def Version(self) -> str: ...

class UltimateResourceFallbackLocation(enum.Enum):
    MainAssembly = 0
    Satellite = 1

# endregion

# region: System.Resources.Writer, Version=7.0.0.0

class IResourceWriter:
    """    """
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: object) -> None: ...
    @overload
    def AddResource(self, name: str, value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Generate() -> None: ...

class ResourceWriter(object):
    """    """
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def AddResource(self, name: str, value: IO.Stream) -> None: ...
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: object) -> None: ...
    @overload
    def AddResource(self, name: str, value: System.System.Array[System.Byte]) -> None: ...
    @overload
    def AddResource(self, name: str, value: IO.Stream, closeAfterWrite: bool) -> None: ...
    @overload
    def AddResourceData(self, name: str, typeName: str, serializedData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Generate() -> None: ...
    @property
    def TypeNameConverter(self) -> System.Func: ...
    @TypeNameConverter.setter
    def TypeNameConverter(self, value: System.Void): ...

# endregion
