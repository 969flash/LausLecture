"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Metadata", "JsonAttribute", "JsonIgnoreCondition", "JsonKnownNamingPolicy", "JsonNumberHandling", "JsonSerializableAttribute", "JsonSourceGenerationMode", "JsonSourceGenerationOptionsAttribute", "JsonConstructorAttribute", "JsonConverterAttribute", "JsonDerivedTypeAttribute", "JsonExtensionDataAttribute", "JsonIgnoreAttribute", "JsonIncludeAttribute", "JsonNumberHandlingAttribute", "JsonPolymorphicAttribute", "JsonPropertyNameAttribute", "JsonRequiredAttribute", "JsonPropertyOrderAttribute", "IJsonOnDeserialized", "IJsonOnDeserializing", "IJsonOnSerialized", "IJsonOnSerializing", "JsonSerializerContext", "JsonUnknownDerivedTypeHandling", "JsonConverter", "JsonConverterFactory", "JsonStringEnumConverter", "JsonUnknownTypeHandling", "ReferenceHandler", "ReferenceResolver"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Text import Json
from System.Text.Json.Serialization import Metadata
from typing import overload
import enum
import System
# endregion

# region: System.Text.Json, Version=7.0.0.0

class JsonAttribute(System.Attribute):
    """    """

class JsonIgnoreCondition(enum.Enum):
    Never = 0
    Always = 1
    WhenWritingDefault = 2
    WhenWritingNull = 3

class JsonKnownNamingPolicy(enum.Enum):
    Unspecified = 0
    CamelCase = 1

class JsonNumberHandling(enum.Enum):
    Strict = 0
    AllowReadingFromString = 1
    WriteAsString = 2
    AllowNamedFloatingPointLiterals = 4

class JsonSerializableAttribute(JsonAttribute):
    """    """
    def __init__(self, type_: System.Type): ...
    @property
    def GenerationMode(self) -> JsonSourceGenerationMode: ...
    @property
    def TypeInfoPropertyName(self) -> str: ...
    @GenerationMode.setter
    def GenerationMode(self, value: System.Void): ...
    @TypeInfoPropertyName.setter
    def TypeInfoPropertyName(self, value: System.Void): ...

class JsonSourceGenerationMode(enum.Enum):
    Default = 0
    Metadata = 1
    Serialization = 2

class JsonSourceGenerationOptionsAttribute(JsonAttribute):
    """    """
    def __init__(self): ...
    @property
    def DefaultIgnoreCondition(self) -> JsonIgnoreCondition: ...
    @property
    def GenerationMode(self) -> JsonSourceGenerationMode: ...
    @property
    def IgnoreReadOnlyFields(self) -> bool: ...
    @property
    def IgnoreReadOnlyProperties(self) -> bool: ...
    @property
    def IncludeFields(self) -> bool: ...
    @property
    def PropertyNamingPolicy(self) -> JsonKnownNamingPolicy: ...
    @property
    def WriteIndented(self) -> bool: ...
    @DefaultIgnoreCondition.setter
    def DefaultIgnoreCondition(self, value: System.Void): ...
    @GenerationMode.setter
    def GenerationMode(self, value: System.Void): ...
    @IgnoreReadOnlyFields.setter
    def IgnoreReadOnlyFields(self, value: System.Void): ...
    @IgnoreReadOnlyProperties.setter
    def IgnoreReadOnlyProperties(self, value: System.Void): ...
    @IncludeFields.setter
    def IncludeFields(self, value: System.Void): ...
    @PropertyNamingPolicy.setter
    def PropertyNamingPolicy(self, value: System.Void): ...
    @WriteIndented.setter
    def WriteIndented(self, value: System.Void): ...

class JsonConstructorAttribute(JsonAttribute):
    """    """
    def __init__(self): ...

class JsonConverterAttribute(JsonAttribute):
    """    """
    def __init__(self, converterType: System.Type): ...
    @overload
    def CreateConverter(self, typeToConvert: System.Type) -> JsonConverter: ...
    @property
    def ConverterType(self) -> System.Type: ...

class JsonDerivedTypeAttribute(JsonAttribute):
    """    """
    @overload
    def __init__(self, derivedType: System.Type): ...
    @overload
    def __init__(self, derivedType: System.Type, typeDiscriminator: str): ...
    @overload
    def __init__(self, derivedType: System.Type, typeDiscriminator: int): ...
    @property
    def DerivedType(self) -> System.Type: ...
    @property
    def TypeDiscriminator(self) -> object: ...

class JsonExtensionDataAttribute(JsonAttribute):
    """    """
    def __init__(self): ...

class JsonIgnoreAttribute(JsonAttribute):
    """    """
    def __init__(self): ...
    @property
    def Condition(self) -> JsonIgnoreCondition: ...
    @Condition.setter
    def Condition(self, value: System.Void): ...

class JsonIncludeAttribute(JsonAttribute):
    """    """
    def __init__(self): ...

class JsonNumberHandlingAttribute(JsonAttribute):
    """    """
    def __init__(self, handling: JsonNumberHandling): ...
    @property
    def Handling(self) -> JsonNumberHandling: ...

class JsonPolymorphicAttribute(JsonAttribute):
    """    """
    def __init__(self): ...
    @property
    def IgnoreUnrecognizedTypeDiscriminators(self) -> bool: ...
    @property
    def TypeDiscriminatorPropertyName(self) -> str: ...
    @property
    def UnknownDerivedTypeHandling(self) -> JsonUnknownDerivedTypeHandling: ...
    @IgnoreUnrecognizedTypeDiscriminators.setter
    def IgnoreUnrecognizedTypeDiscriminators(self, value: System.Void): ...
    @TypeDiscriminatorPropertyName.setter
    def TypeDiscriminatorPropertyName(self, value: System.Void): ...
    @UnknownDerivedTypeHandling.setter
    def UnknownDerivedTypeHandling(self, value: System.Void): ...

class JsonPropertyNameAttribute(JsonAttribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class JsonRequiredAttribute(JsonAttribute):
    """    """
    def __init__(self): ...

class JsonPropertyOrderAttribute(JsonAttribute):
    """    """
    def __init__(self, order: int): ...
    @property
    def Order(self) -> int: ...

class IJsonOnDeserialized:
    """    """
    @overload
    def OnDeserialized() -> None: ...

class IJsonOnDeserializing:
    """    """
    @overload
    def OnDeserializing() -> None: ...

class IJsonOnSerialized:
    """    """
    @overload
    def OnSerialized() -> None: ...

class IJsonOnSerializing:
    """    """
    @overload
    def OnSerializing() -> None: ...

class JsonSerializerContext(object):
    """    """
    @property
    def Options(self) -> Json.JsonSerializerOptions: ...
    @overload
    def GetTypeInfo(self, type_: System.Type) -> Metadata.JsonTypeInfo: ...

class JsonUnknownDerivedTypeHandling(enum.Enum):
    FailSerialization = 0
    FallBackToBaseType = 1
    FallBackToNearestAncestor = 2

class JsonConverter(object):
    """    """
    @overload
    def CanConvert(self, typeToConvert: System.Type) -> bool: ...

class JsonConverterFactory(JsonConverter):
    """    """
    @overload
    def CreateConverter(self, typeToConvert: System.Type, options: Json.JsonSerializerOptions) -> JsonConverter: ...

class JsonConverter(JsonConverter):
    """    JsonConverter[T]
    """
    @overload
    def CanConvert(self, typeToConvert: System.Type) -> bool: ...
    @property
    def HandleNull(self) -> bool: ...
    @overload
    def Read(self, typeToConvert: System.Type, options: Json.JsonSerializerOptions) -> (T, Json.Utf8JsonReader): ...
    @overload
    def ReadAsPropertyName(self, typeToConvert: System.Type, options: Json.JsonSerializerOptions) -> (T, Json.Utf8JsonReader): ...
    @overload
    def Write(self, writer: Json.Utf8JsonWriter, value: T, options: Json.JsonSerializerOptions) -> None: ...
    @overload
    def WriteAsPropertyName(self, writer: Json.Utf8JsonWriter, value: T, options: Json.JsonSerializerOptions) -> None: ...

class JsonStringEnumConverter(JsonConverterFactory):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, namingPolicy: Json.JsonNamingPolicy, allowIntegerValues: bool): ...
    @overload
    def CanConvert(self, typeToConvert: System.Type) -> bool: ...
    @overload
    def CreateConverter(self, typeToConvert: System.Type, options: Json.JsonSerializerOptions) -> JsonConverter: ...

class JsonUnknownTypeHandling(enum.Enum):
    JsonElement = 0
    JsonNode = 1

class ReferenceHandler(object):
    """    """
    @overload
    def CreateResolver() -> ReferenceResolver: ...
    @property
    def IgnoreCycles(self) -> ReferenceHandler: ...
    @property
    def Preserve(self) -> ReferenceHandler: ...

class ReferenceHandler(ReferenceHandler):
    """    ReferenceHandler[T]
    """
    def __init__(self): ...
    @overload
    def CreateResolver() -> ReferenceResolver: ...

class ReferenceResolver(object):
    """    """
    @overload
    def AddReference(self, referenceId: str, value: object) -> None: ...
    @overload
    def GetReference(self, value: object) -> (str, bool): ...
    @overload
    def ResolveReference(self, referenceId: str) -> object: ...

# endregion
