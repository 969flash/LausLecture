"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Unicode", "Encodings"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Json"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["RegularExpressions"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["EncodingExtensions"]
# endregion

# region: Imports
from System import Buffers
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["CodePagesEncodingProvider"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Unicode", "StringBuilder", "ChunkEnumerator", "AppendInterpolatedStringHandler", "ASCIIEncoding", "Decoder", "DecoderExceptionFallback", "DecoderExceptionFallbackBuffer", "DecoderFallbackException", "DecoderFallback", "DecoderFallbackBuffer", "DecoderReplacementFallback", "DecoderReplacementFallbackBuffer", "Encoder", "EncoderExceptionFallback", "EncoderExceptionFallbackBuffer", "EncoderFallbackException", "EncoderFallback", "EncoderFallbackBuffer", "EncoderReplacementFallback", "EncoderReplacementFallbackBuffer", "Encoding", "EncodingInfo", "EncodingProvider", "NormalizationForm", "Rune", "StringRuneEnumerator", "UnicodeEncoding", "UTF32Encoding", "UTF7Encoding", "UTF8Encoding"]
# endregion

# region: Imports
from System import Buffers
from System import Globalization
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class StringBuilder(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: str, capacity: int): ...
    @overload
    def __init__(self, capacity: int, maxCapacity: int): ...
    @overload
    def __init__(self, value: str, startIndex: int, length: int, capacity: int): ...
    @overload
    def Append(self, value: System.Char) -> StringBuilder: ...
    @overload
    def Append(self, value: System.ReadOnlyMemory) -> StringBuilder: ...
    @overload
    def Append(self, value: System.ReadOnlySpan) -> StringBuilder: ...
    @overload
    def Append(self, value: bool) -> StringBuilder: ...
    @overload
    def Append(self, value: System.System.Array[System.Char]) -> StringBuilder: ...
    @overload
    def Append(self, value: System.SByte) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Byte) -> StringBuilder: ...
    @overload
    def Append() -> (StringBuilder, AppendInterpolatedStringHandler): ...
    @overload
    def Append(self, value: System.Int16) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Int64) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Single) -> StringBuilder: ...
    @overload
    def Append(self, value: float) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Decimal) -> StringBuilder: ...
    @overload
    def Append(self, value: System.UInt16) -> StringBuilder: ...
    @overload
    def Append(self, value: System.UInt32) -> StringBuilder: ...
    @overload
    def Append(self, value: int) -> StringBuilder: ...
    @overload
    def Append(self, value: System.UInt64) -> StringBuilder: ...
    @overload
    def Append(self, value: object) -> StringBuilder: ...
    @overload
    def Append(self, value: StringBuilder) -> StringBuilder: ...
    @overload
    def Append(self, value: str) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Char, valueCount: int) -> StringBuilder: ...
    @overload
    def Append(self, value: System.Char, repeatCount: int) -> StringBuilder: ...
    @overload
    def Append(self, provider: System.IFormatProvider) -> (StringBuilder, AppendInterpolatedStringHandler): ...
    @overload
    def Append(self, value: System.System.Array[System.Char], startIndex: int, charCount: int) -> StringBuilder: ...
    @overload
    def Append(self, value: StringBuilder, startIndex: int, count: int) -> StringBuilder: ...
    @overload
    def Append(self, value: str, startIndex: int, count: int) -> StringBuilder: ...
    @overload
    def AppendFormat(self, format_: str, arg0: object) -> StringBuilder: ...
    @overload
    def AppendFormat(self, format_: str, args: System.System.Array[object]) -> StringBuilder: ...
    @overload
    def AppendFormat(self, provider: System.IFormatProvider, format_: str, args: System.System.Array[object]) -> StringBuilder: ...
    @overload
    def AppendFormat(self, format_: str, arg0: object, arg1: object) -> StringBuilder: ...
    @overload
    def AppendFormat(self, provider: System.IFormatProvider, format_: str, arg0: object) -> StringBuilder: ...
    @overload
    def AppendFormat(self, format_: str, arg0: object, arg1: object, arg2: object) -> StringBuilder: ...
    @overload
    def AppendFormat(self, provider: System.IFormatProvider, format_: str, arg0: object, arg1: object) -> StringBuilder: ...
    @overload
    def AppendFormat(self, provider: System.IFormatProvider, format_: str, arg0: object, arg1: object, arg2: object) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: str, values: System.System.Array[object]) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: str, values: Generic.IEnumerable) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: str, values: System.System.Array[str]) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: System.Char, values: System.System.Array[object]) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: System.Char, values: System.System.Array[str]) -> StringBuilder: ...
    @overload
    def AppendJoin(self, separator: System.Char, values: Generic.IEnumerable) -> StringBuilder: ...
    @overload
    def AppendLine() -> StringBuilder: ...
    @overload
    def AppendLine(self, value: str) -> StringBuilder: ...
    @overload
    def AppendLine() -> (StringBuilder, AppendInterpolatedStringHandler): ...
    @overload
    def AppendLine(self, provider: System.IFormatProvider) -> (StringBuilder, AppendInterpolatedStringHandler): ...
    @overload
    def Clear() -> StringBuilder: ...
    @overload
    def CopyTo(self, sourceIndex: int, destination: System.Span, count: int) -> None: ...
    @overload
    def CopyTo(self, sourceIndex: int, destination: System.System.Array[System.Char], destinationIndex: int, count: int) -> None: ...
    @overload
    def EnsureCapacity(self, capacity: int) -> int: ...
    @overload
    def Equals(self, sb: StringBuilder) -> bool: ...
    @overload
    def Equals(self, span: System.ReadOnlySpan) -> bool: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Chars(self) -> System.Char: ...
    @property
    def Length(self) -> int: ...
    @property
    def MaxCapacity(self) -> int: ...
    @overload
    def GetChunks() -> ChunkEnumerator: ...
    @overload
    def Insert(self, index: int, value: str) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.ReadOnlySpan) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: object) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.UInt64) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.UInt32) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.UInt16) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: bool) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: float) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.SByte) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Byte) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Decimal) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Char) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.System.Array[System.Char]) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Int16) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: int) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Int64) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.Single) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: str, count: int) -> StringBuilder: ...
    @overload
    def Insert(self, index: int, value: System.System.Array[System.Char], startIndex: int, charCount: int) -> StringBuilder: ...
    @overload
    def Remove(self, startIndex: int, length: int) -> StringBuilder: ...
    @overload
    def Replace(self, oldValue: str, newValue: str) -> StringBuilder: ...
    @overload
    def Replace(self, oldChar: System.Char, newChar: System.Char) -> StringBuilder: ...
    @overload
    def Replace(self, oldValue: str, newValue: str, startIndex: int, count: int) -> StringBuilder: ...
    @overload
    def Replace(self, oldChar: System.Char, newChar: System.Char, startIndex: int, count: int) -> StringBuilder: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Chars.setter
    def Chars(self, value: System.Void): ...
    @Length.setter
    def Length(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, startIndex: int, length: int) -> str: ...

class ChunkEnumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> System.ReadOnlyMemory: ...
    @overload
    def GetEnumerator() -> ChunkEnumerator: ...
    @overload
    def MoveNext() -> bool: ...

class AppendInterpolatedStringHandler(System.ValueType):
    """    """
    @overload
    def __init__(self, literalLength: int, formattedCount: int, stringBuilder: StringBuilder): ...
    @overload
    def __init__(self, literalLength: int, formattedCount: int, stringBuilder: StringBuilder, provider: System.IFormatProvider): ...
    @overload
    def AppendFormatted(self, value: T) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan) -> None: ...
    @overload
    def AppendFormatted(self, value: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: str, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: object, alignment: int, format_: str) -> None: ...
    @overload
    def AppendLiteral(self, value: str) -> None: ...

class ASCIIEncoding(Encoding):
    """    """
    def __init__(self): ...
    @property
    def IsSingleByte(self) -> bool: ...
    @overload
    def GetByteCount(self, chars: System.ReadOnlySpan) -> int: ...
    @overload
    def GetByteCount(self, chars: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.ReadOnlySpan, bytes_: System.Span) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, chars: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.ReadOnlySpan) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.ReadOnlySpan, chars: System.Span) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int) -> str: ...

class Decoder(object):
    """    """
    @overload
    def Convert(self, bytes_: System.ReadOnlySpan, chars: System.Span, flush: bool) -> (int, int, bool): ...
    @overload
    def Convert(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int, flush: bool) -> (int, int, bool): ...
    @overload
    def Convert(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int, charCount: int, flush: bool) -> (int, int, bool): ...
    @property
    def Fallback(self) -> DecoderFallback: ...
    @property
    def FallbackBuffer(self) -> DecoderFallbackBuffer: ...
    @overload
    def GetCharCount(self, bytes_: System.ReadOnlySpan, flush: bool) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int, flush: bool) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int, flush: bool) -> int: ...
    @overload
    def GetChars(self, bytes_: System.ReadOnlySpan, chars: System.Span, flush: bool) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int, flush: bool) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int, flush: bool) -> int: ...
    @overload
    def Reset() -> None: ...
    @Fallback.setter
    def Fallback(self, value: System.Void): ...

class DecoderExceptionFallback(DecoderFallback):
    """    """
    def __init__(self): ...
    @overload
    def CreateFallbackBuffer() -> DecoderFallbackBuffer: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def MaxCharCount(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class DecoderExceptionFallbackBuffer(DecoderFallbackBuffer):
    """    """
    def __init__(self): ...
    @overload
    def Fallback(self, bytesUnknown: System.System.Array[System.Byte], index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...

class DecoderFallbackException(System.ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, bytesUnknown: System.System.Array[System.Byte], index: int): ...
    @property
    def BytesUnknown(self) -> System.System.Array[System.Byte]: ...
    @property
    def Index(self) -> int: ...

class DecoderFallback(object):
    """    """
    @overload
    def CreateFallbackBuffer() -> DecoderFallbackBuffer: ...
    @property
    def ExceptionFallback(self) -> DecoderFallback: ...
    @property
    def MaxCharCount(self) -> int: ...
    @property
    def ReplacementFallback(self) -> DecoderFallback: ...

class DecoderFallbackBuffer(object):
    """    """
    @overload
    def Fallback(self, bytesUnknown: System.System.Array[System.Byte], index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...
    @overload
    def Reset() -> None: ...

class DecoderReplacementFallback(DecoderFallback):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, replacement: str): ...
    @overload
    def CreateFallbackBuffer() -> DecoderFallbackBuffer: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def DefaultString(self) -> str: ...
    @property
    def MaxCharCount(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class DecoderReplacementFallbackBuffer(DecoderFallbackBuffer):
    """    """
    def __init__(self, fallback: DecoderReplacementFallback): ...
    @overload
    def Fallback(self, bytesUnknown: System.System.Array[System.Byte], index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...
    @overload
    def Reset() -> None: ...

class Encoder(object):
    """    """
    @overload
    def Convert(self, chars: System.ReadOnlySpan, bytes_: System.Span, flush: bool) -> (int, int, bool): ...
    @overload
    def Convert(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int, flush: bool) -> (int, int, bool): ...
    @overload
    def Convert(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, flush: bool) -> (int, int, bool): ...
    @property
    def Fallback(self) -> EncoderFallback: ...
    @property
    def FallbackBuffer(self) -> EncoderFallbackBuffer: ...
    @overload
    def GetByteCount(self, chars: System.ReadOnlySpan, flush: bool) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int, flush: bool) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int, flush: bool) -> int: ...
    @overload
    def GetBytes(self, chars: System.ReadOnlySpan, bytes_: System.Span, flush: bool) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int, flush: bool) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int, flush: bool) -> int: ...
    @overload
    def Reset() -> None: ...
    @Fallback.setter
    def Fallback(self, value: System.Void): ...

class EncoderExceptionFallback(EncoderFallback):
    """    """
    def __init__(self): ...
    @overload
    def CreateFallbackBuffer() -> EncoderFallbackBuffer: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def MaxCharCount(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class EncoderExceptionFallbackBuffer(EncoderFallbackBuffer):
    """    """
    def __init__(self): ...
    @overload
    def Fallback(self, charUnknown: System.Char, index: int) -> bool: ...
    @overload
    def Fallback(self, charUnknownHigh: System.Char, charUnknownLow: System.Char, index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...

class EncoderFallbackException(System.ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def CharUnknown(self) -> System.Char: ...
    @property
    def CharUnknownHigh(self) -> System.Char: ...
    @property
    def CharUnknownLow(self) -> System.Char: ...
    @property
    def Index(self) -> int: ...
    @overload
    def IsUnknownSurrogate() -> bool: ...

class EncoderFallback(object):
    """    """
    @overload
    def CreateFallbackBuffer() -> EncoderFallbackBuffer: ...
    @property
    def ExceptionFallback(self) -> EncoderFallback: ...
    @property
    def MaxCharCount(self) -> int: ...
    @property
    def ReplacementFallback(self) -> EncoderFallback: ...

class EncoderFallbackBuffer(object):
    """    """
    @overload
    def Fallback(self, charUnknown: System.Char, index: int) -> bool: ...
    @overload
    def Fallback(self, charUnknownHigh: System.Char, charUnknownLow: System.Char, index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...
    @overload
    def Reset() -> None: ...

class EncoderReplacementFallback(EncoderFallback):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, replacement: str): ...
    @overload
    def CreateFallbackBuffer() -> EncoderFallbackBuffer: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def DefaultString(self) -> str: ...
    @property
    def MaxCharCount(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class EncoderReplacementFallbackBuffer(EncoderFallbackBuffer):
    """    """
    def __init__(self, fallback: EncoderReplacementFallback): ...
    @overload
    def Fallback(self, charUnknown: System.Char, index: int) -> bool: ...
    @overload
    def Fallback(self, charUnknownHigh: System.Char, charUnknownLow: System.Char, index: int) -> bool: ...
    @property
    def Remaining(self) -> int: ...
    @overload
    def GetNextChar() -> System.Char: ...
    @overload
    def MovePrevious() -> bool: ...
    @overload
    def Reset() -> None: ...

class Encoding(object):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    @staticmethod
    def Convert(srcEncoding: Encoding, dstEncoding: Encoding, bytes_: System.System.Array[System.Byte]) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def Convert(srcEncoding: Encoding, dstEncoding: Encoding, bytes_: System.System.Array[System.Byte], index: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def CreateTranscodingStream(innerStream: IO.Stream, innerStreamEncoding: Encoding, outerStreamEncoding: Encoding, leaveOpen: bool) -> IO.Stream: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def ASCII(self) -> Encoding: ...
    @property
    def BigEndianUnicode(self) -> Encoding: ...
    @property
    def BodyName(self) -> str: ...
    @property
    def CodePage(self) -> int: ...
    @property
    def DecoderFallback(self) -> DecoderFallback: ...
    @property
    def Default(self) -> Encoding: ...
    @property
    def EncoderFallback(self) -> EncoderFallback: ...
    @property
    def EncodingName(self) -> str: ...
    @property
    def HeaderName(self) -> str: ...
    @property
    def IsBrowserDisplay(self) -> bool: ...
    @property
    def IsBrowserSave(self) -> bool: ...
    @property
    def IsMailNewsDisplay(self) -> bool: ...
    @property
    def IsMailNewsSave(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSingleByte(self) -> bool: ...
    @property
    def Latin1(self) -> Encoding: ...
    @property
    def Preamble(self) -> System.ReadOnlySpan: ...
    @property
    def Unicode(self) -> Encoding: ...
    @property
    def UTF32(self) -> Encoding: ...
    @property
    def UTF7(self) -> Encoding: ...
    @property
    def UTF8(self) -> Encoding: ...
    @property
    def WebName(self) -> str: ...
    @property
    def WindowsCodePage(self) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char]) -> int: ...
    @overload
    def GetByteCount(self, s: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.ReadOnlySpan) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetByteCount(self, s: str, index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char]) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, s: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, chars: System.ReadOnlySpan, bytes_: System.Span) -> int: ...
    @overload
    def GetBytes(self, s: str, index: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], index: int, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, s: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte]) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.ReadOnlySpan) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte]) -> System.System.Array[System.Char]: ...
    @overload
    def GetChars(self, bytes_: System.ReadOnlySpan, chars: System.Span) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> System.System.Array[System.Char]: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    @staticmethod
    def GetEncoding(codepage: int) -> Encoding: ...
    @overload
    @staticmethod
    def GetEncoding(name: str) -> Encoding: ...
    @overload
    @staticmethod
    def GetEncoding(name: str, encoderFallback: EncoderFallback, decoderFallback: DecoderFallback) -> Encoding: ...
    @overload
    @staticmethod
    def GetEncoding(codepage: int, encoderFallback: EncoderFallback, decoderFallback: DecoderFallback) -> Encoding: ...
    @overload
    @staticmethod
    def GetEncodings() -> System.Array[EncodingInfo]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetPreamble() -> System.System.Array[System.Byte]: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte]) -> str: ...
    @overload
    def GetString(self, bytes_: System.ReadOnlySpan) -> str: ...
    @overload
    def GetString(self, bytes_: System.Byte, byteCount: int) -> str: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> str: ...
    @overload
    def IsAlwaysNormalized() -> bool: ...
    @overload
    def IsAlwaysNormalized(self, form: NormalizationForm) -> bool: ...
    @overload
    @staticmethod
    def RegisterProvider(provider: EncodingProvider) -> None: ...
    @DecoderFallback.setter
    def DecoderFallback(self, value: System.Void): ...
    @EncoderFallback.setter
    def EncoderFallback(self, value: System.Void): ...

class EncodingInfo(object):
    """    """
    def __init__(self, provider: EncodingProvider, codePage: int, name: str, displayName: str): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def CodePage(self) -> int: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetEncoding() -> Encoding: ...
    @overload
    def GetHashCode() -> int: ...

class EncodingProvider(object):
    """    """
    def __init__(self): ...
    @overload
    def GetEncoding(self, name: str) -> Encoding: ...
    @overload
    def GetEncoding(self, codepage: int) -> Encoding: ...
    @overload
    def GetEncoding(self, name: str, encoderFallback: EncoderFallback, decoderFallback: DecoderFallback) -> Encoding: ...
    @overload
    def GetEncoding(self, codepage: int, encoderFallback: EncoderFallback, decoderFallback: DecoderFallback) -> Encoding: ...
    @overload
    def GetEncodings() -> Generic.IEnumerable: ...

class NormalizationForm(enum.Enum):
    FormC = 1
    FormD = 2
    FormKC = 5
    FormKD = 6

class Rune(System.ValueType):
    """    """
    @overload
    def __init__(self, ch: System.Char): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: System.UInt32): ...
    @overload
    def __init__(self, highSurrogate: System.Char, lowSurrogate: System.Char): ...
    @overload
    def CompareTo(self, other: Rune) -> int: ...
    @overload
    @staticmethod
    def DecodeFromUtf16(source: System.ReadOnlySpan) -> (Buffers.OperationStatus, Rune, int): ...
    @overload
    @staticmethod
    def DecodeFromUtf8(source: System.ReadOnlySpan) -> (Buffers.OperationStatus, Rune, int): ...
    @overload
    @staticmethod
    def DecodeLastFromUtf16(source: System.ReadOnlySpan) -> (Buffers.OperationStatus, Rune, int): ...
    @overload
    @staticmethod
    def DecodeLastFromUtf8(source: System.ReadOnlySpan) -> (Buffers.OperationStatus, Rune, int): ...
    @overload
    def EncodeToUtf16(self, destination: System.Span) -> int: ...
    @overload
    def EncodeToUtf8(self, destination: System.Span) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Rune) -> bool: ...
    @property
    def IsAscii(self) -> bool: ...
    @property
    def IsBmp(self) -> bool: ...
    @property
    def Plane(self) -> int: ...
    @property
    def ReplacementChar(self) -> Rune: ...
    @property
    def Utf16SequenceLength(self) -> int: ...
    @property
    def Utf8SequenceLength(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetNumericValue(value: Rune) -> float: ...
    @overload
    @staticmethod
    def GetRuneAt(input_: str, index: int) -> Rune: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(value: Rune) -> Globalization.UnicodeCategory: ...
    @overload
    @staticmethod
    def IsControl(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsDigit(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsLetter(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsLetterOrDigit(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsLower(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsNumber(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuation(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsSeparator(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsSymbol(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsUpper(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def IsValid(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsValid(value: System.UInt32) -> bool: ...
    @overload
    @staticmethod
    def IsWhiteSpace(value: Rune) -> bool: ...
    @overload
    @staticmethod
    def ToLower(value: Rune, culture: Globalization.CultureInfo) -> Rune: ...
    @overload
    @staticmethod
    def ToLowerInvariant(value: Rune) -> Rune: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def ToUpper(value: Rune, culture: Globalization.CultureInfo) -> Rune: ...
    @overload
    @staticmethod
    def ToUpperInvariant(value: Rune) -> Rune: ...
    @overload
    @staticmethod
    def TryCreate(ch: System.Char) -> (bool, Rune): ...
    @overload
    @staticmethod
    def TryCreate(value: System.UInt32) -> (bool, Rune): ...
    @overload
    @staticmethod
    def TryCreate(value: int) -> (bool, Rune): ...
    @overload
    @staticmethod
    def TryCreate(highSurrogate: System.Char, lowSurrogate: System.Char) -> (bool, Rune): ...
    @overload
    def TryEncodeToUtf16(self, destination: System.Span) -> (bool, int): ...
    @overload
    def TryEncodeToUtf8(self, destination: System.Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryGetRuneAt(input_: str, index: int) -> (bool, Rune): ...

class StringRuneEnumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> Rune: ...
    @overload
    def GetEnumerator() -> StringRuneEnumerator: ...
    @overload
    def MoveNext() -> bool: ...

class UnicodeEncoding(Encoding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bigEndian: bool, byteOrderMark: bool): ...
    @overload
    def __init__(self, bigEndian: bool, byteOrderMark: bool, throwOnInvalidBytes: bool): ...
    @property
    def CharSize(self) -> int: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def Preamble(self) -> System.ReadOnlySpan: ...
    @overload
    def GetByteCount(self, s: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, s: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetPreamble() -> System.System.Array[System.Byte]: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> str: ...

class UTF32Encoding(Encoding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bigEndian: bool, byteOrderMark: bool): ...
    @overload
    def __init__(self, bigEndian: bool, byteOrderMark: bool, throwOnInvalidCharacters: bool): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def Preamble(self) -> System.ReadOnlySpan: ...
    @overload
    def GetByteCount(self, s: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, s: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetPreamble() -> System.System.Array[System.Byte]: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> str: ...

class UTF7Encoding(Encoding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, allowOptionals: bool): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def GetByteCount(self, s: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, s: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> str: ...

class UTF8Encoding(Encoding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encoderShouldEmitUTF8Identifier: bool): ...
    @overload
    def __init__(self, encoderShouldEmitUTF8Identifier: bool, throwOnInvalidBytes: bool): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @property
    def Preamble(self) -> System.ReadOnlySpan: ...
    @overload
    def GetByteCount(self, chars: System.ReadOnlySpan) -> int: ...
    @overload
    def GetByteCount(self, chars: str) -> int: ...
    @overload
    def GetByteCount(self, chars: System.Char, count: int) -> int: ...
    @overload
    def GetByteCount(self, chars: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.ReadOnlySpan, bytes_: System.Span) -> int: ...
    @overload
    def GetBytes(self, chars: System.Char, charCount: int, bytes_: System.Byte, byteCount: int) -> int: ...
    @overload
    def GetBytes(self, s: str, charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetBytes(self, chars: System.System.Array[System.Char], charIndex: int, charCount: int, bytes_: System.System.Array[System.Byte], byteIndex: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.ReadOnlySpan) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.Byte, count: int) -> int: ...
    @overload
    def GetCharCount(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.ReadOnlySpan, chars: System.Span) -> int: ...
    @overload
    def GetChars(self, bytes_: System.Byte, byteCount: int, chars: System.Char, charCount: int) -> int: ...
    @overload
    def GetChars(self, bytes_: System.System.Array[System.Byte], byteIndex: int, byteCount: int, chars: System.System.Array[System.Char], charIndex: int) -> int: ...
    @overload
    def GetDecoder() -> Decoder: ...
    @overload
    def GetEncoder() -> Encoder: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMaxByteCount(self, charCount: int) -> int: ...
    @overload
    def GetMaxCharCount(self, byteCount: int) -> int: ...
    @overload
    def GetPreamble() -> System.System.Array[System.Byte]: ...
    @overload
    def GetString(self, bytes_: System.System.Array[System.Byte], index: int, count: int) -> str: ...

# endregion

# region: System.Text.Encoding.CodePages, Version=7.0.0.0

class CodePagesEncodingProvider(EncodingProvider):
    """    """
    @property
    def Instance(self) -> EncodingProvider: ...
    @overload
    def GetEncoding(self, codepage: int) -> Encoding: ...
    @overload
    def GetEncoding(self, name: str) -> Encoding: ...
    @overload
    def GetEncodings() -> Generic.IEnumerable: ...

# endregion

# region: System.Memory, Version=7.0.0.0

class EncodingExtensions(object):
    """    """
    @overload
    @staticmethod
    def Convert(encoder: Encoder, chars: System.ReadOnlySpan, writer: Buffers.IBufferWriter, flush: bool) -> (System.Int64, bool): ...
    @overload
    @staticmethod
    def Convert(encoder: Encoder, writer: Buffers.IBufferWriter, flush: bool) -> (Buffers.ReadOnlySequence, System.Int64, bool): ...
    @overload
    @staticmethod
    def Convert(decoder: Decoder, bytes_: System.ReadOnlySpan, writer: Buffers.IBufferWriter, flush: bool) -> (System.Int64, bool): ...
    @overload
    @staticmethod
    def Convert(decoder: Decoder, writer: Buffers.IBufferWriter, flush: bool) -> (Buffers.ReadOnlySequence, System.Int64, bool): ...
    @overload
    @staticmethod
    def GetBytes(encoding: Encoding) -> (System.System.Array[System.Byte], Buffers.ReadOnlySequence): ...
    @overload
    @staticmethod
    def GetBytes(encoding: Encoding, chars: System.ReadOnlySpan, writer: Buffers.IBufferWriter) -> System.Int64: ...
    @overload
    @staticmethod
    def GetBytes(encoding: Encoding, writer: Buffers.IBufferWriter) -> (System.Int64, Buffers.ReadOnlySequence): ...
    @overload
    @staticmethod
    def GetBytes(encoding: Encoding, bytes_: System.Span) -> (int, Buffers.ReadOnlySequence): ...
    @overload
    @staticmethod
    def GetChars(encoding: Encoding, bytes_: System.ReadOnlySpan, writer: Buffers.IBufferWriter) -> System.Int64: ...
    @overload
    @staticmethod
    def GetChars(encoding: Encoding, writer: Buffers.IBufferWriter) -> (System.Int64, Buffers.ReadOnlySequence): ...
    @overload
    @staticmethod
    def GetChars(encoding: Encoding, chars: System.Span) -> (int, Buffers.ReadOnlySequence): ...
    @overload
    @staticmethod
    def GetString(encoding: Encoding) -> (str, Buffers.ReadOnlySequence): ...

# endregion

