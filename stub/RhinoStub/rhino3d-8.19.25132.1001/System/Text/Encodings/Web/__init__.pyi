"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["HtmlEncoder", "JavaScriptEncoder", "TextEncoder", "TextEncoderSettings", "UrlEncoder"]
# endregion

# region: Imports
from System import Buffers
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Text import Unicode
from typing import overload
import System
# endregion

# region: System.Text.Encodings.Web, Version=7.0.0.0

class HtmlEncoder(TextEncoder):
    """    """
    @overload
    @staticmethod
    def Create(settings: TextEncoderSettings) -> HtmlEncoder: ...
    @overload
    @staticmethod
    def Create(allowedRanges: Unicode.System.Array[Unicode.UnicodeRange]) -> HtmlEncoder: ...
    @property
    def Default(self) -> HtmlEncoder: ...

class JavaScriptEncoder(TextEncoder):
    """    """
    @overload
    @staticmethod
    def Create(settings: TextEncoderSettings) -> JavaScriptEncoder: ...
    @overload
    @staticmethod
    def Create(allowedRanges: Unicode.System.Array[Unicode.UnicodeRange]) -> JavaScriptEncoder: ...
    @property
    def Default(self) -> JavaScriptEncoder: ...
    @property
    def UnsafeRelaxedJsonEscaping(self) -> JavaScriptEncoder: ...

class TextEncoder(object):
    """    """
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: IO.TextWriter, value: str) -> None: ...
    @overload
    def Encode(self, output: IO.TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: IO.TextWriter, value: System.System.Array[System.Char], startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, source: System.ReadOnlySpan, destination: System.Span, isFinalBlock: bool) -> (Buffers.OperationStatus, int, int): ...
    @overload
    def EncodeUtf8(self, utf8Source: System.ReadOnlySpan, utf8Destination: System.Span, isFinalBlock: bool) -> (Buffers.OperationStatus, int, int): ...
    @overload
    def FindFirstCharacterToEncode(self, text: System.Char, textLength: int) -> int: ...
    @overload
    def FindFirstCharacterToEncodeUtf8(self, utf8Text: System.ReadOnlySpan) -> int: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    @overload
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: System.Char, bufferLength: int) -> (bool, int): ...
    @overload
    def WillEncode(self, unicodeScalar: int) -> bool: ...

class TextEncoderSettings(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: TextEncoderSettings): ...
    @overload
    def __init__(self, allowedRanges: Unicode.System.Array[Unicode.UnicodeRange]): ...
    @overload
    def AllowCharacter(self, character: System.Char) -> None: ...
    @overload
    def AllowCharacters(self, characters: System.System.Array[System.Char]) -> None: ...
    @overload
    def AllowCodePoints(self, codePoints: Generic.IEnumerable) -> None: ...
    @overload
    def AllowRange(self, range_: Unicode.UnicodeRange) -> None: ...
    @overload
    def AllowRanges(self, ranges: Unicode.System.Array[Unicode.UnicodeRange]) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ForbidCharacter(self, character: System.Char) -> None: ...
    @overload
    def ForbidCharacters(self, characters: System.System.Array[System.Char]) -> None: ...
    @overload
    def ForbidRange(self, range_: Unicode.UnicodeRange) -> None: ...
    @overload
    def ForbidRanges(self, ranges: Unicode.System.Array[Unicode.UnicodeRange]) -> None: ...
    @overload
    def GetAllowedCodePoints() -> Generic.IEnumerable: ...

class UrlEncoder(TextEncoder):
    """    """
    @overload
    @staticmethod
    def Create(settings: TextEncoderSettings) -> UrlEncoder: ...
    @overload
    @staticmethod
    def Create(allowedRanges: Unicode.System.Array[Unicode.UnicodeRange]) -> UrlEncoder: ...
    @property
    def Default(self) -> UrlEncoder: ...

# endregion
