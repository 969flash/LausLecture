"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Capture", "CaptureCollection", "Group", "GroupCollection", "Match", "MatchCollection", "Regex", "MatchEvaluator", "GeneratedRegexAttribute", "RegexMatchTimeoutException", "RegexOptions", "RegexParseError", "RegexParseException", "RegexRunner", "RegexRunnerFactory"]
# endregion

# region: Imports
from System import Collections
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Text.RegularExpressions, Version=7.0.0.0

class Capture(object):
    """    """
    @property
    def Index(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueSpan(self) -> System.ReadOnlySpan: ...
    @overload
    def ToString() -> str: ...

class CaptureCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[Capture], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> Capture: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class Group(Capture):
    """    """
    @property
    def Captures(self) -> CaptureCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Success(self) -> bool: ...
    @overload
    @staticmethod
    def Synchronized(inner: Group) -> Group: ...

class GroupCollection(object):
    """    """
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[Group], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array, arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> Group: ...
    @property
    def Item(self) -> Group: ...
    @property
    def Keys(self) -> Generic.IEnumerable: ...
    @property
    def SyncRoot(self) -> object: ...
    @property
    def Values(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def TryGetValue(self, key: str) -> (bool, Group): ...

class Match(Group):
    """    """
    @property
    def Empty(self) -> Match: ...
    @property
    def Groups(self) -> GroupCollection: ...
    @overload
    def NextMatch() -> Match: ...
    @overload
    def Result(self, replacement: str) -> str: ...
    @overload
    @staticmethod
    def Synchronized(inner: Match) -> Match: ...

class MatchCollection(object):
    """    """
    @overload
    def CopyTo(self, array: System.Array, arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[Match], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self) -> Match: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class Regex(object):
    """    """
    @overload
    def __init__(self, pattern: str): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan): ...
    @property
    def InfiniteMatchTimeout(self) -> System.TimeSpan: ...
    @overload
    def Count(self, input_: str) -> int: ...
    @overload
    def Count(self, input_: System.ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def Count(input_: str, pattern: str) -> int: ...
    @overload
    def Count(self, input_: System.ReadOnlySpan, startat: int) -> int: ...
    @overload
    @staticmethod
    def Count(input_: System.ReadOnlySpan, pattern: str) -> int: ...
    @overload
    @staticmethod
    def Count(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions) -> int: ...
    @overload
    @staticmethod
    def Count(input_: str, pattern: str, options: RegexOptions) -> int: ...
    @overload
    @staticmethod
    def Count(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> int: ...
    @overload
    @staticmethod
    def Count(input_: str, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> int: ...
    @overload
    def EnumerateMatches(self, input_: System.ReadOnlySpan) -> ValueMatchEnumerator: ...
    @overload
    def EnumerateMatches(self, input_: System.ReadOnlySpan, startat: int) -> ValueMatchEnumerator: ...
    @overload
    @staticmethod
    def EnumerateMatches(input_: System.ReadOnlySpan, pattern: str) -> ValueMatchEnumerator: ...
    @overload
    @staticmethod
    def EnumerateMatches(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions) -> ValueMatchEnumerator: ...
    @overload
    @staticmethod
    def EnumerateMatches(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> ValueMatchEnumerator: ...
    @overload
    @staticmethod
    def Escape(str_: str) -> str: ...
    @property
    def CacheSize(self) -> int: ...
    @property
    def MatchTimeout(self) -> System.TimeSpan: ...
    @property
    def Options(self) -> RegexOptions: ...
    @property
    def RightToLeft(self) -> bool: ...
    @overload
    def GetGroupNames() -> System.System.Array[str]: ...
    @overload
    def GetGroupNumbers() -> System.System.Array[int]: ...
    @overload
    def GroupNameFromNumber(self, i: int) -> str: ...
    @overload
    def GroupNumberFromName(self, name: str) -> int: ...
    @overload
    def IsMatch(self, input_: str) -> bool: ...
    @overload
    def IsMatch(self, input_: System.ReadOnlySpan) -> bool: ...
    @overload
    def IsMatch(self, input_: str, startat: int) -> bool: ...
    @overload
    def IsMatch(self, input_: System.ReadOnlySpan, startat: int) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: str, pattern: str) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: System.ReadOnlySpan, pattern: str) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: str, pattern: str, options: RegexOptions) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: System.ReadOnlySpan, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> bool: ...
    @overload
    @staticmethod
    def IsMatch(input_: str, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> bool: ...
    @overload
    def Match(self, input_: str) -> Match: ...
    @overload
    def Match(self, input_: str, startat: int) -> Match: ...
    @overload
    @staticmethod
    def Match(input_: str, pattern: str) -> Match: ...
    @overload
    def Match(self, input_: str, beginning: int, length: int) -> Match: ...
    @overload
    @staticmethod
    def Match(input_: str, pattern: str, options: RegexOptions) -> Match: ...
    @overload
    @staticmethod
    def Match(input_: str, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> Match: ...
    @overload
    def Matches(self, input_: str) -> MatchCollection: ...
    @overload
    @staticmethod
    def Matches(input_: str, pattern: str) -> MatchCollection: ...
    @overload
    def Matches(self, input_: str, startat: int) -> MatchCollection: ...
    @overload
    @staticmethod
    def Matches(input_: str, pattern: str, options: RegexOptions) -> MatchCollection: ...
    @overload
    @staticmethod
    def Matches(input_: str, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> MatchCollection: ...
    @overload
    def Replace(self, input_: str, replacement: str) -> str: ...
    @overload
    def Replace(self, input_: str, evaluator: MatchEvaluator) -> str: ...
    @overload
    def Replace(self, input_: str, replacement: str, count: int) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, evaluator: MatchEvaluator) -> str: ...
    @overload
    def Replace(self, input_: str, evaluator: MatchEvaluator, count: int) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, replacement: str) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, replacement: str, options: RegexOptions) -> str: ...
    @overload
    def Replace(self, input_: str, evaluator: MatchEvaluator, count: int, startat: int) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, evaluator: MatchEvaluator, options: RegexOptions) -> str: ...
    @overload
    def Replace(self, input_: str, replacement: str, count: int, startat: int) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, evaluator: MatchEvaluator, options: RegexOptions, matchTimeout: System.TimeSpan) -> str: ...
    @overload
    @staticmethod
    def Replace(input_: str, pattern: str, replacement: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> str: ...
    @CacheSize.setter
    def CacheSize(self, value: System.Void): ...
    @overload
    def Split(self, input_: str) -> System.System.Array[str]: ...
    @overload
    def Split(self, input_: str, count: int) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def Split(input_: str, pattern: str) -> System.System.Array[str]: ...
    @overload
    def Split(self, input_: str, count: int, startat: int) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def Split(input_: str, pattern: str, options: RegexOptions) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def Split(input_: str, pattern: str, options: RegexOptions, matchTimeout: System.TimeSpan) -> System.System.Array[str]: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def Unescape(str_: str) -> str: ...

class MatchEvaluator(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, match: Match, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> str: ...
    @overload
    def Invoke(self, match: Match) -> str: ...

class GeneratedRegexAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, pattern: str): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, cultureName: str): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, matchTimeoutMilliseconds: int): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, matchTimeoutMilliseconds: int, cultureName: str): ...
    @property
    def CultureName(self) -> str: ...
    @property
    def MatchTimeoutMilliseconds(self) -> int: ...
    @property
    def Options(self) -> RegexOptions: ...
    @property
    def Pattern(self) -> str: ...

class RegexMatchTimeoutException(System.TimeoutException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, regexInput: str, regexPattern: str, matchTimeout: System.TimeSpan): ...
    @property
    def Input(self) -> str: ...
    @property
    def MatchTimeout(self) -> System.TimeSpan: ...
    @property
    def Pattern(self) -> str: ...

class RegexOptions(enum.Enum):
    None_ = 0
    IgnoreCase = 1
    Multiline = 2
    ExplicitCapture = 4
    Compiled = 8
    Singleline = 16
    IgnorePatternWhitespace = 32
    RightToLeft = 64
    ECMAScript = 256
    CultureInvariant = 512
    NonBacktracking = 1024

class RegexParseError(enum.Enum):
    Unknown = 0
    AlternationHasTooManyConditions = 1
    AlternationHasMalformedCondition = 2
    InvalidUnicodePropertyEscape = 3
    MalformedUnicodePropertyEscape = 4
    UnrecognizedEscape = 5
    UnrecognizedControlCharacter = 6
    MissingControlCharacter = 7
    InsufficientOrInvalidHexDigits = 8
    QuantifierOrCaptureGroupOutOfRange = 9
    UndefinedNamedReference = 10
    UndefinedNumberedReference = 11
    MalformedNamedReference = 12
    UnescapedEndingBackslash = 13
    UnterminatedComment = 14
    InvalidGroupingConstruct = 15
    AlternationHasNamedCapture = 16
    AlternationHasComment = 17
    AlternationHasMalformedReference = 18
    AlternationHasUndefinedReference = 19
    CaptureGroupNameInvalid = 20
    CaptureGroupOfZero = 21
    UnterminatedBracket = 22
    ExclusionGroupNotLast = 23
    ReversedCharacterRange = 24
    ShorthandClassInCharacterRange = 25
    InsufficientClosingParentheses = 26
    ReversedQuantifierRange = 27
    NestedQuantifiersNotParenthesized = 28
    QuantifierAfterNothing = 29
    InsufficientOpeningParentheses = 30
    UnrecognizedUnicodeProperty = 31

class RegexParseException(System.ArgumentException):
    """    """
    @property
    def Error(self) -> RegexParseError: ...
    @property
    def Offset(self) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class RegexRunner(object):
    """    """

class RegexRunnerFactory(object):
    """    """

# endregion
