"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["OrderedParallelQuery", "ParallelQuery", "ParallelEnumerable", "ParallelExecutionMode", "ParallelMergeOptions"]
# endregion

# region: Imports
from System import Collections
from System import Threading
from System.Collections import Concurrent
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["EnumerableExecutor", "EnumerableQuery", "Queryable"]
# endregion

# region: Imports
from System import Collections
from System.Collections import Generic
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Expressions", "IQueryable", "IQueryProvider", "IOrderedQueryable"]
# endregion

# region: Imports
from System.Linq import Expressions
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["ImmutableArrayExtensions"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Collections import Immutable
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Enumerable", "Lookup", "IGrouping", "Grouping", "ILookup", "IOrderedEnumerable"]
# endregion

# region: Imports
from System import Collections
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Linq, Version=7.0.0.0

class Enumerable(object):
    """    """
    @overload
    @staticmethod
    def Aggregate(source: Generic.IEnumerable, func: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def Aggregate(source: Generic.IEnumerable, seed: TAccumulate, func: System.Func) -> TAccumulate: ...
    @overload
    @staticmethod
    def Aggregate(source: Generic.IEnumerable, seed: TAccumulate, func: System.Func, resultSelector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def All(source: Generic.IEnumerable, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def Any(source: Generic.IEnumerable) -> bool: ...
    @overload
    @staticmethod
    def Any(source: Generic.IEnumerable, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def Append(source: Generic.IEnumerable, element: TSource) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def AsEnumerable(source: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: Generic.IEnumerable, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Cast(source: Collections.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Chunk(source: Generic.IEnumerable, size: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Concat(first: Generic.IEnumerable, second: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Contains(source: Generic.IEnumerable, value: TSource) -> bool: ...
    @overload
    @staticmethod
    def Contains(source: Generic.IEnumerable, value: TSource, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Count(source: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def Count(source: Generic.IEnumerable, predicate: System.Func) -> int: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: Generic.IEnumerable, defaultValue: TSource) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Distinct(source: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Distinct(source: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def DistinctBy(source: Generic.IEnumerable, keySelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def DistinctBy(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ElementAt(source: Generic.IEnumerable, index: System.Index) -> TSource: ...
    @overload
    @staticmethod
    def ElementAt(source: Generic.IEnumerable, index: int) -> TSource: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: Generic.IEnumerable, index: int) -> TSource: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: Generic.IEnumerable, index: System.Index) -> TSource: ...
    @overload
    @staticmethod
    def Empty() -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Except(first: Generic.IEnumerable, second: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Except(first: Generic.IEnumerable, second: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ExceptBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ExceptBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def First(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def First(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: Generic.IEnumerable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: Generic.IEnumerable, predicate: System.Func, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupBy(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupJoin(outer: Generic.IEnumerable, inner: Generic.IEnumerable, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GroupJoin(outer: Generic.IEnumerable, inner: Generic.IEnumerable, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Intersect(first: Generic.IEnumerable, second: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Intersect(first: Generic.IEnumerable, second: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IntersectBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IntersectBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Join(outer: Generic.IEnumerable, inner: Generic.IEnumerable, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Join(outer: Generic.IEnumerable, inner: Generic.IEnumerable, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Last(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def Last(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: Generic.IEnumerable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: Generic.IEnumerable, predicate: System.Func, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def LongCount(source: Generic.IEnumerable) -> System.Int64: ...
    @overload
    @staticmethod
    def LongCount(source: Generic.IEnumerable, predicate: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Single: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def Max(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def MaxBy(source: Generic.IEnumerable, keySelector: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def MaxBy(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Single: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Int64: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def MinBy(source: Generic.IEnumerable, keySelector: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def MinBy(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def OfType(source: Collections.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Order(source: Generic.IEnumerable) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def Order(source: Generic.IEnumerable, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderBy(source: Generic.IEnumerable, keySelector: System.Func) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderBy(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderByDescending(source: Generic.IEnumerable, keySelector: System.Func) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderByDescending(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderDescending(source: Generic.IEnumerable) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def OrderDescending(source: Generic.IEnumerable, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def Prepend(source: Generic.IEnumerable, element: TSource) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Range(start: int, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Repeat(element: TResult, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Reverse(source: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Select(source: Generic.IEnumerable, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Select(source: Generic.IEnumerable, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SelectMany(source: Generic.IEnumerable, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SelectMany(source: Generic.IEnumerable, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SelectMany(source: Generic.IEnumerable, collectionSelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SelectMany(source: Generic.IEnumerable, collectionSelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SequenceEqual(first: Generic.IEnumerable, second: Generic.IEnumerable) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(first: Generic.IEnumerable, second: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Single(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def Single(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: Generic.IEnumerable) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: Generic.IEnumerable, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: Generic.IEnumerable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: Generic.IEnumerable, predicate: System.Func, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def Skip(source: Generic.IEnumerable, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SkipLast(source: Generic.IEnumerable, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SkipWhile(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SkipWhile(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> float: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Int64: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> int: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def Sum(source: Generic.IEnumerable, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Take(source: Generic.IEnumerable, range_: System.Range) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Take(source: Generic.IEnumerable, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def TakeLast(source: Generic.IEnumerable, count: int) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def TakeWhile(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def TakeWhile(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ThenBy(source: IOrderedEnumerable, keySelector: System.Func) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def ThenBy(source: IOrderedEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def ThenByDescending(source: IOrderedEnumerable, keySelector: System.Func) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def ThenByDescending(source: IOrderedEnumerable, keySelector: System.Func, comparer: Generic.IComparer) -> IOrderedEnumerable: ...
    @overload
    @staticmethod
    def ToArray(source: Generic.IEnumerable) -> System.Array[TSource]: ...
    @overload
    @staticmethod
    def ToDictionary(source: Generic.IEnumerable, keySelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToHashSet(source: Generic.IEnumerable) -> Generic.HashSet: ...
    @overload
    @staticmethod
    def ToHashSet(source: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> Generic.HashSet: ...
    @overload
    @staticmethod
    def ToList(source: Generic.IEnumerable) -> Generic.List: ...
    @overload
    @staticmethod
    def ToLookup(source: Generic.IEnumerable, keySelector: System.Func) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: Generic.IEnumerable, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> ILookup: ...
    @overload
    @staticmethod
    def TryGetNonEnumeratedCount(source: Generic.IEnumerable) -> (bool, int): ...
    @overload
    @staticmethod
    def Union(first: Generic.IEnumerable, second: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Union(first: Generic.IEnumerable, second: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def UnionBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def UnionBy(first: Generic.IEnumerable, second: Generic.IEnumerable, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Where(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Where(source: Generic.IEnumerable, predicate: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Zip(first: Generic.IEnumerable, second: Generic.IEnumerable) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Zip(first: Generic.IEnumerable, second: Generic.IEnumerable, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Zip(first: Generic.IEnumerable, second: Generic.IEnumerable, third: Generic.IEnumerable) -> Generic.IEnumerable: ...

class Lookup(object):
    """    Lookup[TKey, TElement]
    """
    @overload
    def ApplyResultSelector(self, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    def Contains(self, key: TKey) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Generic.IEnumerable: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class IGrouping:
    """    IGrouping[TKey, TElement]
    """
    @property
    def Key(self) -> TKey: ...

class Grouping(object):
    """    Grouping[TKey, TElement]
    """
    @property
    def Key(self) -> TKey: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class ILookup:
    """    ILookup[TKey, TElement]
    """
    @overload
    def Contains(self, key: TKey) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Generic.IEnumerable: ...

class IOrderedEnumerable:
    """    IOrderedEnumerable[TElement]
    """
    @overload
    def CreateOrderedEnumerable(self, keySelector: System.Func, comparer: Generic.IComparer, descending: bool) -> IOrderedEnumerable: ...

# endregion

# region: System.Collections.Immutable, Version=7.0.0.0

class ImmutableArrayExtensions(object):
    """    """
    @overload
    @staticmethod
    def Aggregate(immutableArray: Immutable.ImmutableArray, func: System.Func) -> T: ...
    @overload
    @staticmethod
    def Aggregate(immutableArray: Immutable.ImmutableArray, seed: TAccumulate, func: System.Func) -> TAccumulate: ...
    @overload
    @staticmethod
    def Aggregate(immutableArray: Immutable.ImmutableArray, seed: TAccumulate, func: System.Func, resultSelector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def All(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def Any(builder: Immutable.Builder) -> bool: ...
    @overload
    @staticmethod
    def Any(immutableArray: Immutable.ImmutableArray) -> bool: ...
    @overload
    @staticmethod
    def Any(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def ElementAt(immutableArray: Immutable.ImmutableArray, index: int) -> T: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(immutableArray: Immutable.ImmutableArray, index: int) -> T: ...
    @overload
    @staticmethod
    def First(builder: Immutable.Builder) -> T: ...
    @overload
    @staticmethod
    def First(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def First(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def FirstOrDefault(builder: Immutable.Builder) -> T: ...
    @overload
    @staticmethod
    def FirstOrDefault(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def FirstOrDefault(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def Last(builder: Immutable.Builder) -> T: ...
    @overload
    @staticmethod
    def Last(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def Last(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def LastOrDefault(builder: Immutable.Builder) -> T: ...
    @overload
    @staticmethod
    def LastOrDefault(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def LastOrDefault(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def Select(immutableArray: Immutable.ImmutableArray, selector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SelectMany(immutableArray: Immutable.ImmutableArray, collectionSelector: System.Func, resultSelector: System.Func) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def SequenceEqual(immutableArray: Immutable.ImmutableArray, items: Immutable.ImmutableArray, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(immutableArray: Immutable.ImmutableArray, items: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(immutableArray: Immutable.ImmutableArray, items: Immutable.ImmutableArray, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Single(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def Single(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def SingleOrDefault(immutableArray: Immutable.ImmutableArray) -> T: ...
    @overload
    @staticmethod
    def SingleOrDefault(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> T: ...
    @overload
    @staticmethod
    def ToArray(immutableArray: Immutable.ImmutableArray) -> System.Array[T]: ...
    @overload
    @staticmethod
    def ToDictionary(immutableArray: Immutable.ImmutableArray, keySelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(immutableArray: Immutable.ImmutableArray, keySelector: System.Func, elementSelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(immutableArray: Immutable.ImmutableArray, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(immutableArray: Immutable.ImmutableArray, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def Where(immutableArray: Immutable.ImmutableArray, predicate: System.Func) -> Generic.IEnumerable: ...

# endregion

# region: System.Linq.Expressions, Version=7.0.0.0

class IQueryable:
    """    """
    @property
    def ElementType(self) -> System.Type: ...
    @property
    def Expression(self) -> Expressions.Expression: ...
    @property
    def Provider(self) -> IQueryProvider: ...

class IQueryable:
    """    IQueryable[T]
    """

class IQueryProvider:
    """    """
    @overload
    def CreateQuery(self, expression: Expressions.Expression) -> IQueryable: ...
    @overload
    def CreateQuery(self, expression: Expressions.Expression) -> IQueryable: ...
    @overload
    def Execute(self, expression: Expressions.Expression) -> object: ...
    @overload
    def Execute(self, expression: Expressions.Expression) -> TResult: ...

class IOrderedQueryable:
    """    """

class IOrderedQueryable:
    """    IOrderedQueryable[T]
    """

# endregion

# region: System.Linq.Queryable, Version=7.0.0.0

class EnumerableExecutor(object):
    """    """

class EnumerableExecutor(EnumerableExecutor):
    """    EnumerableExecutor[T]
    """
    def __init__(self, expression: Expressions.Expression): ...

class EnumerableQuery(object):
    """    """

class EnumerableQuery(EnumerableQuery):
    """    EnumerableQuery[T]
    """
    @overload
    def __init__(self, enumerable: Generic.IEnumerable): ...
    @overload
    def __init__(self, expression: Expressions.Expression): ...
    @overload
    def ToString() -> str: ...

class Queryable(object):
    """    """
    @overload
    @staticmethod
    def Aggregate(source: IQueryable, func: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def Aggregate(source: IQueryable, seed: TAccumulate, func: Expressions.Expression) -> TAccumulate: ...
    @overload
    @staticmethod
    def Aggregate(source: IQueryable, seed: TAccumulate, func: Expressions.Expression, selector: Expressions.Expression) -> TResult: ...
    @overload
    @staticmethod
    def All(source: IQueryable, predicate: Expressions.Expression) -> bool: ...
    @overload
    @staticmethod
    def Any(source: IQueryable) -> bool: ...
    @overload
    @staticmethod
    def Any(source: IQueryable, predicate: Expressions.Expression) -> bool: ...
    @overload
    @staticmethod
    def Append(source: IQueryable, element: TSource) -> IQueryable: ...
    @overload
    @staticmethod
    def AsQueryable(source: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def AsQueryable(source: Collections.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> float: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Decimal: ...
    @overload
    @staticmethod
    def Average(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Cast(source: IQueryable) -> IQueryable: ...
    @overload
    @staticmethod
    def Chunk(source: IQueryable, size: int) -> IQueryable: ...
    @overload
    @staticmethod
    def Concat(source1: IQueryable, source2: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Contains(source: IQueryable, item: TSource) -> bool: ...
    @overload
    @staticmethod
    def Contains(source: IQueryable, item: TSource, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Count(source: IQueryable) -> int: ...
    @overload
    @staticmethod
    def Count(source: IQueryable, predicate: Expressions.Expression) -> int: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: IQueryable) -> IQueryable: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: IQueryable, defaultValue: TSource) -> IQueryable: ...
    @overload
    @staticmethod
    def Distinct(source: IQueryable) -> IQueryable: ...
    @overload
    @staticmethod
    def Distinct(source: IQueryable, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def DistinctBy(source: IQueryable, keySelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def DistinctBy(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def ElementAt(source: IQueryable, index: int) -> TSource: ...
    @overload
    @staticmethod
    def ElementAt(source: IQueryable, index: System.Index) -> TSource: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: IQueryable, index: int) -> TSource: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: IQueryable, index: System.Index) -> TSource: ...
    @overload
    @staticmethod
    def Except(source1: IQueryable, source2: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Except(source1: IQueryable, source2: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def ExceptBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def ExceptBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def First(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def First(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: IQueryable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: IQueryable, predicate: Expressions.Expression, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, elementSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, elementSelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, elementSelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, resultSelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupBy(source: IQueryable, keySelector: Expressions.Expression, elementSelector: Expressions.Expression, resultSelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupJoin(outer: IQueryable, inner: Generic.IEnumerable, outerKeySelector: Expressions.Expression, innerKeySelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def GroupJoin(outer: IQueryable, inner: Generic.IEnumerable, outerKeySelector: Expressions.Expression, innerKeySelector: Expressions.Expression, resultSelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def Intersect(source1: IQueryable, source2: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Intersect(source1: IQueryable, source2: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def IntersectBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def IntersectBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def Join(outer: IQueryable, inner: Generic.IEnumerable, outerKeySelector: Expressions.Expression, innerKeySelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Join(outer: IQueryable, inner: Generic.IEnumerable, outerKeySelector: Expressions.Expression, innerKeySelector: Expressions.Expression, resultSelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def Last(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def Last(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: IQueryable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: IQueryable, predicate: Expressions.Expression, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def LongCount(source: IQueryable) -> System.Int64: ...
    @overload
    @staticmethod
    def LongCount(source: IQueryable, predicate: Expressions.Expression) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def Max(source: IQueryable, selector: Expressions.Expression) -> TResult: ...
    @overload
    @staticmethod
    def Max(source: IQueryable, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def MaxBy(source: IQueryable, keySelector: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def MaxBy(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: IQueryable, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: IQueryable, selector: Expressions.Expression) -> TResult: ...
    @overload
    @staticmethod
    def MinBy(source: IQueryable, keySelector: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def MinBy(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> TSource: ...
    @overload
    @staticmethod
    def OfType(source: IQueryable) -> IQueryable: ...
    @overload
    @staticmethod
    def Order(source: IQueryable) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def Order(source: IQueryable, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderBy(source: IQueryable, keySelector: Expressions.Expression) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderBy(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderByDescending(source: IQueryable, keySelector: Expressions.Expression) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderByDescending(source: IQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderDescending(source: IQueryable) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def OrderDescending(source: IQueryable, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def Prepend(source: IQueryable, element: TSource) -> IQueryable: ...
    @overload
    @staticmethod
    def Reverse(source: IQueryable) -> IQueryable: ...
    @overload
    @staticmethod
    def Select(source: IQueryable, selector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Select(source: IQueryable, selector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SelectMany(source: IQueryable, selector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SelectMany(source: IQueryable, selector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SelectMany(source: IQueryable, collectionSelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SelectMany(source: IQueryable, collectionSelector: Expressions.Expression, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SequenceEqual(source1: IQueryable, source2: Generic.IEnumerable) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(source1: IQueryable, source2: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Single(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def Single(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: IQueryable) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: IQueryable, predicate: Expressions.Expression) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: IQueryable, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: IQueryable, predicate: Expressions.Expression, defaultValue: TSource) -> TSource: ...
    @overload
    @staticmethod
    def Skip(source: IQueryable, count: int) -> IQueryable: ...
    @overload
    @staticmethod
    def SkipLast(source: IQueryable, count: int) -> IQueryable: ...
    @overload
    @staticmethod
    def SkipWhile(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def SkipWhile(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> int: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Int64: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> float: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Int64: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> float: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: IQueryable, selector: Expressions.Expression) -> int: ...
    @overload
    @staticmethod
    def Take(source: IQueryable, range_: System.Range) -> IQueryable: ...
    @overload
    @staticmethod
    def Take(source: IQueryable, count: int) -> IQueryable: ...
    @overload
    @staticmethod
    def TakeLast(source: IQueryable, count: int) -> IQueryable: ...
    @overload
    @staticmethod
    def TakeWhile(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def TakeWhile(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def ThenBy(source: IOrderedQueryable, keySelector: Expressions.Expression) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def ThenBy(source: IOrderedQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def ThenByDescending(source: IOrderedQueryable, keySelector: Expressions.Expression) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def ThenByDescending(source: IOrderedQueryable, keySelector: Expressions.Expression, comparer: Generic.IComparer) -> IOrderedQueryable: ...
    @overload
    @staticmethod
    def Union(source1: IQueryable, source2: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Union(source1: IQueryable, source2: Generic.IEnumerable, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def UnionBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def UnionBy(source1: IQueryable, source2: Generic.IEnumerable, keySelector: Expressions.Expression, comparer: Generic.IEqualityComparer) -> IQueryable: ...
    @overload
    @staticmethod
    def Where(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Where(source: IQueryable, predicate: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Zip(source1: IQueryable, source2: Generic.IEnumerable) -> IQueryable: ...
    @overload
    @staticmethod
    def Zip(source1: IQueryable, source2: Generic.IEnumerable, resultSelector: Expressions.Expression) -> IQueryable: ...
    @overload
    @staticmethod
    def Zip(source1: IQueryable, source2: Generic.IEnumerable, source3: Generic.IEnumerable) -> IQueryable: ...

# endregion

# region: System.Linq.Parallel, Version=7.0.0.0

class OrderedParallelQuery(ParallelQuery):
    """    OrderedParallelQuery[TSource]
    """
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class ParallelQuery(object):
    """    """

class ParallelQuery(ParallelQuery):
    """    ParallelQuery[TSource]
    """
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class ParallelEnumerable(object):
    """    """
    @overload
    @staticmethod
    def Aggregate(source: ParallelQuery, func: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def Aggregate(source: ParallelQuery, seed: TAccumulate, func: System.Func) -> TAccumulate: ...
    @overload
    @staticmethod
    def Aggregate(source: ParallelQuery, seed: TAccumulate, func: System.Func, resultSelector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Aggregate(source: ParallelQuery, seedFactory: System.Func, updateAccumulatorFunc: System.Func, combineAccumulatorsFunc: System.Func, resultSelector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Aggregate(source: ParallelQuery, seed: TAccumulate, updateAccumulatorFunc: System.Func, combineAccumulatorsFunc: System.Func, resultSelector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def All(source: ParallelQuery, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def Any(source: ParallelQuery) -> bool: ...
    @overload
    @staticmethod
    def Any(source: ParallelQuery, predicate: System.Func) -> bool: ...
    @overload
    @staticmethod
    def AsEnumerable(source: ParallelQuery) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def AsOrdered(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def AsOrdered(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def AsParallel(source: Generic.IEnumerable) -> ParallelQuery: ...
    @overload
    @staticmethod
    def AsParallel(source: Collections.IEnumerable) -> ParallelQuery: ...
    @overload
    @staticmethod
    def AsParallel(source: Concurrent.Partitioner) -> ParallelQuery: ...
    @overload
    @staticmethod
    def AsSequential(source: ParallelQuery) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def AsUnordered(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Decimal: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Average(source: ParallelQuery, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Cast(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Concat(first: ParallelQuery, second: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Contains(source: ParallelQuery, value: TSource) -> bool: ...
    @overload
    @staticmethod
    def Contains(source: ParallelQuery, value: TSource, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Count(source: ParallelQuery) -> int: ...
    @overload
    @staticmethod
    def Count(source: ParallelQuery, predicate: System.Func) -> int: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def DefaultIfEmpty(source: ParallelQuery, defaultValue: TSource) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Distinct(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Distinct(source: ParallelQuery, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def ElementAt(source: ParallelQuery, index: int) -> TSource: ...
    @overload
    @staticmethod
    def ElementAtOrDefault(source: ParallelQuery, index: int) -> TSource: ...
    @overload
    @staticmethod
    def Empty() -> ParallelQuery: ...
    @overload
    @staticmethod
    def Except(first: ParallelQuery, second: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Except(first: ParallelQuery, second: ParallelQuery, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def First(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def First(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def FirstOrDefault(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def ForAll(source: ParallelQuery, action: System.Action) -> None: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupBy(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupJoin(outer: ParallelQuery, inner: ParallelQuery, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def GroupJoin(outer: ParallelQuery, inner: ParallelQuery, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Intersect(first: ParallelQuery, second: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Intersect(first: ParallelQuery, second: ParallelQuery, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Join(outer: ParallelQuery, inner: ParallelQuery, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Join(outer: ParallelQuery, inner: ParallelQuery, outerKeySelector: System.Func, innerKeySelector: System.Func, resultSelector: System.Func, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Last(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def Last(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def LastOrDefault(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def LongCount(source: ParallelQuery) -> System.Int64: ...
    @overload
    @staticmethod
    def LongCount(source: ParallelQuery, predicate: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Single: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> int: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery) -> System.Decimal: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def Max(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Decimal: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Int64: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> int: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery) -> System.Single: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> TResult: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Min(source: ParallelQuery, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def OfType(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def OrderBy(source: ParallelQuery, keySelector: System.Func) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def OrderBy(source: ParallelQuery, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def OrderByDescending(source: ParallelQuery, keySelector: System.Func) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def OrderByDescending(source: ParallelQuery, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def Range(start: int, count: int) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Repeat(element: TResult, count: int) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Reverse(source: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Select(source: ParallelQuery, selector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Select(source: ParallelQuery, selector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SelectMany(source: ParallelQuery, selector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SelectMany(source: ParallelQuery, selector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SelectMany(source: ParallelQuery, collectionSelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SelectMany(source: ParallelQuery, collectionSelector: System.Func, resultSelector: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SequenceEqual(first: ParallelQuery, second: ParallelQuery) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(first: ParallelQuery, second: ParallelQuery, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Single(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def Single(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: ParallelQuery) -> TSource: ...
    @overload
    @staticmethod
    def SingleOrDefault(source: ParallelQuery, predicate: System.Func) -> TSource: ...
    @overload
    @staticmethod
    def Skip(source: ParallelQuery, count: int) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SkipWhile(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def SkipWhile(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Int64: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> float: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> int: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> int: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Decimal: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Int64: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Single: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> float: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Sum(source: ParallelQuery, selector: System.Func) -> System.Nullable: ...
    @overload
    @staticmethod
    def Take(source: ParallelQuery, count: int) -> ParallelQuery: ...
    @overload
    @staticmethod
    def TakeWhile(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def TakeWhile(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def ThenBy(source: OrderedParallelQuery, keySelector: System.Func) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def ThenBy(source: OrderedParallelQuery, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def ThenByDescending(source: OrderedParallelQuery, keySelector: System.Func) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def ThenByDescending(source: OrderedParallelQuery, keySelector: System.Func, comparer: Generic.IComparer) -> OrderedParallelQuery: ...
    @overload
    @staticmethod
    def ToArray(source: ParallelQuery) -> System.Array[TSource]: ...
    @overload
    @staticmethod
    def ToDictionary(source: ParallelQuery, keySelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: ParallelQuery, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToDictionary(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> Generic.Dictionary: ...
    @overload
    @staticmethod
    def ToList(source: ParallelQuery) -> Generic.List: ...
    @overload
    @staticmethod
    def ToLookup(source: ParallelQuery, keySelector: System.Func) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: ParallelQuery, keySelector: System.Func, comparer: Generic.IEqualityComparer) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func) -> ILookup: ...
    @overload
    @staticmethod
    def ToLookup(source: ParallelQuery, keySelector: System.Func, elementSelector: System.Func, comparer: Generic.IEqualityComparer) -> ILookup: ...
    @overload
    @staticmethod
    def Union(first: ParallelQuery, second: ParallelQuery) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Union(first: ParallelQuery, second: ParallelQuery, comparer: Generic.IEqualityComparer) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Where(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Where(source: ParallelQuery, predicate: System.Func) -> ParallelQuery: ...
    @overload
    @staticmethod
    def WithCancellation(source: ParallelQuery, cancellationToken: Threading.CancellationToken) -> ParallelQuery: ...
    @overload
    @staticmethod
    def WithDegreeOfParallelism(source: ParallelQuery, degreeOfParallelism: int) -> ParallelQuery: ...
    @overload
    @staticmethod
    def WithExecutionMode(source: ParallelQuery, executionMode: ParallelExecutionMode) -> ParallelQuery: ...
    @overload
    @staticmethod
    def WithMergeOptions(source: ParallelQuery, mergeOptions: ParallelMergeOptions) -> ParallelQuery: ...
    @overload
    @staticmethod
    def Zip(first: ParallelQuery, second: ParallelQuery, resultSelector: System.Func) -> ParallelQuery: ...

class ParallelExecutionMode(enum.Enum):
    Default = 0
    ForceParallelism = 1

class ParallelMergeOptions(enum.Enum):
    Default = 0
    NotBuffered = 1
    AutoBuffered = 2
    FullyBuffered = 3

# endregion
