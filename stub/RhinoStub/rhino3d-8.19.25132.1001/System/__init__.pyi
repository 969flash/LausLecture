"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ComponentModel"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["ServiceModel"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Resources"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Console", "ConsoleCancelEventHandler", "ConsoleCancelEventArgs", "ConsoleColor", "ConsoleSpecialKey", "ConsoleKey", "ConsoleKeyInfo", "ConsoleModifiers"]
# endregion

# region: Imports
from System import IO
from System import Text
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["CodeDom"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Windows"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Collections", "IdentityModel", "Runtime", "ServiceModel"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Transactions"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Linq"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Linq"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Resources"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Threading"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Web"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Reflection"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml", "Data"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Runtime", "Linq", "Dynamic"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing", "Resources", "Windows"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Reflection"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml", "Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Management"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Numerics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Linq", "Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Drawing", "Timers", "ComponentModel", "UriTypeConverter"]
# endregion

# region: Imports
from System import ComponentModel
from System import Globalization
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Linq"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["ComponentModel"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Formats"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xaml", "Media", "Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text", "Runtime", "Buffers", "SequencePosition"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics", "Drawing", "Configuration", "UriIdnScope"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Windows"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["ComponentModel", "IServiceProvider"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Windows", "Reflection", "ComponentModel", "Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["GenericUriParserOptions", "GenericUriParser", "Uri", "UriBuilder", "UriCreationOptions", "UriKind", "UriComponents", "UriFormat", "UriFormatException", "UriHostNameType", "HttpStyleUriParser", "FtpStyleUriParser", "FileStyleUriParser", "NewsStyleUriParser", "GopherStyleUriParser", "LdapStyleUriParser", "NetPipeStyleUriParser", "NetTcpStyleUriParser", "UriPartial", "UriParser"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["ComponentModel"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xaml", "Windows"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Threading"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Collections"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xml"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Threading"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Net"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Xaml", "Web", "Transactions", "ServiceProcess", "Security", "Net", "Drawing", "Diagnostics", "Data", "Configuration", "ApplicationIdentity"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Diagnostics"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Text"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Runtime"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Numerics", "Net", "Globalization", "Configuration", "ComponentModel", "CodeDom", "Buffers", "Threading", "Text", "Security", "Runtime", "Resources", "Reflection", "IO", "Diagnostics", "Collections", "ArgIterator", "Array", "Attribute", "BadImageFormatException", "Buffer", "Decimal", "Delegate", "Enum", "Environment", "SpecialFolder", "SpecialFolderOption", "Exception", "GCCollectionMode", "GCNotificationStatus", "GC", "Math", "MathF", "MulticastDelegate", "object", "RuntimeArgumentHandle", "RuntimeTypeHandle", "RuntimeMethodHandle", "RuntimeFieldHandle", "ModuleHandle", "str", "Type", "TypedReference", "TypeLoadException", "ValueType", "WeakReference", "AccessViolationException", "Action", "Comparison", "Converter", "Predicate", "Activator", "AggregateException", "AppContext", "AppDomain", "AppDomainSetup", "AppDomainUnloadedException", "ApplicationException", "ApplicationId", "ArgumentException", "ArgumentNullException", "ArgumentOutOfRangeException", "ArithmeticException", "ArraySegment", "Enumerator", "ArrayTypeMismatchException", "AssemblyLoadEventArgs", "AssemblyLoadEventHandler", "AsyncCallback", "AttributeTargets", "AttributeUsageAttribute", "BitConverter", "bool", "Byte", "CannotUnloadAppDomainException", "Char", "CharEnumerator", "CLSCompliantAttribute", "ContextBoundObject", "ContextMarshalException", "ContextStaticAttribute", "Convert", "Base64FormattingOptions", "DataMisalignedException", "DateOnly", "DateTime", "DateTimeKind", "DateTimeOffset", "DayOfWeek", "DBNull", "DivideByZeroException", "DllNotFoundException", "float", "DuplicateWaitObjectException", "EntryPointNotFoundException", "EnvironmentVariableTarget", "EventArgs", "EventHandler", "FieldAccessException", "FlagsAttribute", "FormatException", "FormattableString", "Func", "GCGenerationInfo", "GCKind", "GCMemoryInfo", "Guid", "Half", "HashCode", "IAsyncDisposable", "IAsyncResult", "ICloneable", "IComparable", "IConvertible", "ICustomFormatter", "IDisposable", "IEquatable", "IFormatProvider", "IFormattable", "Index", "IndexOutOfRangeException", "InsufficientExecutionStackException", "InsufficientMemoryException", "Int16", "int", "Int64", "Int128", "IntPtr", "InvalidCastException", "InvalidOperationException", "InvalidProgramException", "InvalidTimeZoneException", "IObservable", "IObserver", "IProgress", "ISpanFormattable", "Lazy", "LoaderOptimization", "LoaderOptimizationAttribute", "LocalDataStoreSlot", "MarshalByRefObject", "MemberAccessException", "Memory", "MemoryExtensions", "MethodAccessException", "MidpointRounding", "MissingFieldException", "MissingMemberException", "MissingMethodException", "MulticastNotSupportedException", "NonSerializedAttribute", "NotFiniteNumberException", "NotImplementedException", "NotSupportedException", "Nullable", "NullReferenceException", "ObjectDisposedException", "ObsoleteAttribute", "OperatingSystem", "OperationCanceledException", "OutOfMemoryException", "OverflowException", "ParamArrayAttribute", "PlatformID", "PlatformNotSupportedException", "Progress", "Random", "Range", "RankException", "ReadOnlyMemory", "ResolveEventArgs", "ResolveEventHandler", "SByte", "SerializableAttribute", "Single", "StackOverflowException", "StringComparer", "CultureAwareComparer", "OrdinalComparer", "StringComparison", "StringNormalizationExtensions", "StringSplitOptions", "SystemException", "STAThreadAttribute", "MTAThreadAttribute", "ThreadStaticAttribute", "TimeOnly", "TimeoutException", "TimeSpan", "TimeZoneInfo", "AdjustmentRule", "TransitionTime", "TimeZoneNotFoundException", "Tuple", "TupleExtensions", "TypeAccessException", "TypeCode", "TypeInitializationException", "TypeUnloadedException", "UInt16", "UInt32", "UInt64", "UInt128", "UIntPtr", "UnauthorizedAccessException", "UnhandledExceptionEventArgs", "UnhandledExceptionEventHandler", "UnitySerializationHolder", "ValueTuple", "Version", "Void", "IParsable", "ISpanParsable"]
# endregion

# region: Imports
from System import Buffers
from System import Collections
from System import Globalization
from System import Reflection
from System import Security
from System import Text
from System import Threading
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Runtime import Remoting
from System.Runtime import Serialization
from System.Security import Principal
from System.Threading import Tasks
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["IO"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing", "Resources", "Windows"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Drawing"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Threading"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class ArgIterator(ValueType):
    """    """
    @overload
    def __init__(self, arglist: RuntimeArgumentHandle): ...
    @overload
    def __init__(self, arglist: RuntimeArgumentHandle, ptr: Void): ...
    @overload
    def End() -> None: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetNextArg() -> TypedReference: ...
    @overload
    def GetNextArg(self, rth: RuntimeTypeHandle) -> TypedReference: ...
    @overload
    def GetNextArgType() -> RuntimeTypeHandle: ...
    @overload
    def GetRemainingCount() -> int: ...

class Array(object):
    """    """
    @overload
    @staticmethod
    def AsReadOnly(array: Array[T]) -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array, value: object) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array[T], value: T) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array[T], value: T, comparer: Generic.IComparer) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array, value: object, comparer: Collections.IComparer) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array[T], index: int, length: int, value: T) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array, index: int, length: int, value: object) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array[T], index: int, length: int, value: T, comparer: Generic.IComparer) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(array: Array, index: int, length: int, value: object, comparer: Collections.IComparer) -> int: ...
    @overload
    @staticmethod
    def Clear(array: Array) -> None: ...
    @overload
    @staticmethod
    def Clear(array: Array, index: int, length: int) -> None: ...
    @overload
    def Clone() -> object: ...
    @overload
    @staticmethod
    def ConstrainedCopy(sourceArray: Array, sourceIndex: int, destinationArray: Array, destinationIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def ConvertAll(array: Array[TInput], converter: Converter) -> Array[TOutput]: ...
    @overload
    @staticmethod
    def Copy(sourceArray: Array, destinationArray: Array, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(sourceArray: Array, destinationArray: Array, length: Int64) -> None: ...
    @overload
    @staticmethod
    def Copy(sourceArray: Array, sourceIndex: int, destinationArray: Array, destinationIndex: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Copy(sourceArray: Array, sourceIndex: Int64, destinationArray: Array, destinationIndex: Int64, length: Int64) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: Int64) -> None: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, lengths: Array[int]) -> Array: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, lengths: Array[Int64]) -> Array: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, length: int) -> Array: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, lengths: Array[int], lowerBounds: Array[int]) -> Array: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, length1: int, length2: int) -> Array: ...
    @overload
    @staticmethod
    def CreateInstance(elementType: Type, length1: int, length2: int, length3: int) -> Array: ...
    @overload
    @staticmethod
    def Empty() -> Array[T]: ...
    @overload
    @staticmethod
    def Exists(array: Array[T], match: Predicate) -> bool: ...
    @overload
    @staticmethod
    def Fill(array: Array[T], value: T) -> None: ...
    @overload
    @staticmethod
    def Fill(array: Array[T], value: T, startIndex: int, count: int) -> None: ...
    @overload
    @staticmethod
    def Find(array: Array[T], match: Predicate) -> T: ...
    @overload
    @staticmethod
    def FindAll(array: Array[T], match: Predicate) -> Array[T]: ...
    @overload
    @staticmethod
    def FindIndex(array: Array[T], match: Predicate) -> int: ...
    @overload
    @staticmethod
    def FindIndex(array: Array[T], startIndex: int, match: Predicate) -> int: ...
    @overload
    @staticmethod
    def FindIndex(array: Array[T], startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    @staticmethod
    def FindLast(array: Array[T], match: Predicate) -> T: ...
    @overload
    @staticmethod
    def FindLastIndex(array: Array[T], match: Predicate) -> int: ...
    @overload
    @staticmethod
    def FindLastIndex(array: Array[T], startIndex: int, match: Predicate) -> int: ...
    @overload
    @staticmethod
    def FindLastIndex(array: Array[T], startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    @staticmethod
    def ForEach(array: Array[T], action: Action) -> None: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def LongLength(self) -> Int64: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Rank(self) -> int: ...
    @property
    def SyncRoot(self) -> object: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetLength(self, dimension: int) -> int: ...
    @overload
    def GetLongLength(self, dimension: int) -> Int64: ...
    @overload
    def GetLowerBound(self, dimension: int) -> int: ...
    @overload
    def GetUpperBound(self, dimension: int) -> int: ...
    @overload
    def GetValue(self, index: Int64) -> object: ...
    @overload
    def GetValue(self, indices: Array[Int64]) -> object: ...
    @overload
    def GetValue(self, index: int) -> object: ...
    @overload
    def GetValue(self, indices: Array[int]) -> object: ...
    @overload
    def GetValue(self, index1: Int64, index2: Int64) -> object: ...
    @overload
    def GetValue(self, index1: int, index2: int) -> object: ...
    @overload
    def GetValue(self, index1: Int64, index2: Int64, index3: Int64) -> object: ...
    @overload
    def GetValue(self, index1: int, index2: int, index3: int) -> object: ...
    @overload
    @staticmethod
    def IndexOf(array: Array, value: object) -> int: ...
    @overload
    @staticmethod
    def IndexOf(array: Array[T], value: T) -> int: ...
    @overload
    @staticmethod
    def IndexOf(array: Array, value: object, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def IndexOf(array: Array[T], value: T, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def IndexOf(array: Array, value: object, startIndex: int, count: int) -> int: ...
    @overload
    @staticmethod
    def IndexOf(array: Array[T], value: T, startIndex: int, count: int) -> int: ...
    @overload
    def Initialize() -> None: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array, value: object) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array[T], value: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array, value: object, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array[T], value: T, startIndex: int) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array, value: object, startIndex: int, count: int) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(array: Array[T], value: T, startIndex: int, count: int) -> int: ...
    @overload
    @staticmethod
    def Resize(newSize: int) -> (Array[T]): ...
    @overload
    @staticmethod
    def Reverse(array: Array[T]) -> None: ...
    @overload
    @staticmethod
    def Reverse(array: Array) -> None: ...
    @overload
    @staticmethod
    def Reverse(array: Array[T], index: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Reverse(array: Array, index: int, length: int) -> None: ...
    @overload
    def SetValue(self, value: object, indices: Array[Int64]) -> None: ...
    @overload
    def SetValue(self, value: object, indices: Array[int]) -> None: ...
    @overload
    def SetValue(self, value: object, index: Int64) -> None: ...
    @overload
    def SetValue(self, value: object, index: int) -> None: ...
    @overload
    def SetValue(self, value: object, index1: Int64, index2: Int64) -> None: ...
    @overload
    def SetValue(self, value: object, index1: int, index2: int) -> None: ...
    @overload
    def SetValue(self, value: object, index1: int, index2: int, index3: int) -> None: ...
    @overload
    def SetValue(self, value: object, index1: Int64, index2: Int64, index3: Int64) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array[T]) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array, comparer: Collections.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array[TKey], items: Array[TValue]) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array[T], comparison: Comparison) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array, items: Array) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array[T], comparer: Generic.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array[TKey], items: Array[TValue], comparer: Generic.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array, index: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array[T], index: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array, items: Array, comparer: Collections.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array[T], index: int, length: int, comparer: Generic.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(array: Array, index: int, length: int, comparer: Collections.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array[TKey], items: Array[TValue], index: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array, items: Array, index: int, length: int) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array[TKey], items: Array[TValue], index: int, length: int, comparer: Generic.IComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Array, items: Array, index: int, length: int, comparer: Collections.IComparer) -> None: ...
    @overload
    @staticmethod
    def TrueForAll(array: Array[T], match: Predicate) -> bool: ...

class Attribute(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.Module, attributeType: Type) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.MemberInfo, attributeType: Type) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.Assembly, attributeType: Type) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.ParameterInfo, attributeType: Type) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.Assembly, attributeType: Type, inherit: bool) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.MemberInfo, attributeType: Type, inherit: bool) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.Module, attributeType: Type, inherit: bool) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Reflection.ParameterInfo, attributeType: Type, inherit: bool) -> Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.MemberInfo) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.ParameterInfo) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Module) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Assembly) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Assembly, attributeType: Type) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Module, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.ParameterInfo, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Assembly, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.ParameterInfo, attributeType: Type) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.MemberInfo, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Module, attributeType: Type) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.MemberInfo, attributeType: Type) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Assembly, attributeType: Type, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.Module, attributeType: Type, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.ParameterInfo, attributeType: Type, inherit: bool) -> Array[Attribute]: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Reflection.MemberInfo, attributeType: Type, inherit: bool) -> Array[Attribute]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsDefaultAttribute() -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.Module, attributeType: Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.ParameterInfo, attributeType: Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.Assembly, attributeType: Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.MemberInfo, attributeType: Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.ParameterInfo, attributeType: Type, inherit: bool) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.Assembly, attributeType: Type, inherit: bool) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.MemberInfo, attributeType: Type, inherit: bool) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Reflection.Module, attributeType: Type, inherit: bool) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...

class BadImageFormatException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, fileName: str): ...
    @overload
    def __init__(self, message: str, fileName: str, inner: Exception): ...
    @property
    def FileName(self) -> str: ...
    @property
    def FusionLog(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class Buffer(object):
    """    """
    @overload
    @staticmethod
    def BlockCopy(src: Array, srcOffset: int, dst: Array, dstOffset: int, count: int) -> None: ...
    @overload
    @staticmethod
    def ByteLength(array: Array) -> int: ...
    @overload
    @staticmethod
    def GetByte(array: Array, index: int) -> Byte: ...
    @overload
    @staticmethod
    def MemoryCopy(source: Void, destination: Void, destinationSizeInBytes: Int64, sourceBytesToCopy: Int64) -> None: ...
    @overload
    @staticmethod
    def MemoryCopy(source: Void, destination: Void, destinationSizeInBytes: UInt64, sourceBytesToCopy: UInt64) -> None: ...
    @overload
    @staticmethod
    def SetByte(array: Array, index: int, value: Byte) -> None: ...

class Decimal(ValueType):
    """    """
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: UInt32): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: UInt64): ...
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, bits: Array[int]): ...
    @overload
    def __init__(self, bits: ReadOnlySpan): ...
    @overload
    def __init__(self, lo: int, mid: int, hi: int, isNegative: bool, scale: Byte): ...
    @property
    def Zero(self) -> Decimal: ...
    @property
    def One(self) -> Decimal: ...
    @property
    def MinusOne(self) -> Decimal: ...
    @property
    def MaxValue(self) -> Decimal: ...
    @property
    def MinValue(self) -> Decimal: ...
    @overload
    @staticmethod
    def Abs(value: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Add(d1: Decimal, d2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Ceiling(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Clamp(value: Decimal, min_: Decimal, max_: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Compare(d1: Decimal, d2: Decimal) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Decimal) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Decimal, sign: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Decimal: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Decimal: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Decimal: ...
    @overload
    @staticmethod
    def Divide(d1: Decimal, d2: Decimal) -> Decimal: ...
    @overload
    def Equals(self, value: Decimal) -> bool: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    @staticmethod
    def Equals(d1: Decimal, d2: Decimal) -> bool: ...
    @overload
    @staticmethod
    def Floor(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def FromOACurrency(cy: Int64) -> Decimal: ...
    @property
    def Scale(self) -> Byte: ...
    @overload
    @staticmethod
    def GetBits(d: Decimal) -> Array[int]: ...
    @overload
    @staticmethod
    def GetBits(d: Decimal, destination: Span) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsCanonical(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def Max(x: Decimal, y: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Decimal, y: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Min(x: Decimal, y: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Decimal, y: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Multiply(d1: Decimal, d2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Negate(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def Remainder(d1: Decimal, d2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Round(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Round(d: Decimal, mode: MidpointRounding) -> Decimal: ...
    @overload
    @staticmethod
    def Round(d: Decimal, decimals: int) -> Decimal: ...
    @overload
    @staticmethod
    def Round(d: Decimal, decimals: int, mode: MidpointRounding) -> Decimal: ...
    @overload
    @staticmethod
    def Sign(d: Decimal) -> int: ...
    @overload
    @staticmethod
    def Subtract(d1: Decimal, d2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def ToByte(value: Decimal) -> Byte: ...
    @overload
    @staticmethod
    def ToDouble(d: Decimal) -> float: ...
    @overload
    @staticmethod
    def ToInt16(value: Decimal) -> Int16: ...
    @overload
    @staticmethod
    def ToInt32(d: Decimal) -> int: ...
    @overload
    @staticmethod
    def ToInt64(d: Decimal) -> Int64: ...
    @overload
    @staticmethod
    def ToOACurrency(value: Decimal) -> Int64: ...
    @overload
    @staticmethod
    def ToSByte(value: Decimal) -> SByte: ...
    @overload
    @staticmethod
    def ToSingle(d: Decimal) -> Single: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToUInt16(value: Decimal) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt32(d: Decimal) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt64(d: Decimal) -> UInt64: ...
    @overload
    @staticmethod
    def Truncate(d: Decimal) -> Decimal: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryGetBits(d: Decimal, destination: Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Decimal): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Decimal): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Decimal): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Decimal): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Decimal): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Decimal): ...

class Delegate(object):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    @staticmethod
    def Combine(delegates: Array[Delegate]) -> Delegate: ...
    @overload
    @staticmethod
    def Combine(a: Delegate, b: Delegate) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, method: Reflection.MethodInfo) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: object, method: str) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, method: Reflection.MethodInfo, throwOnBindFailure: bool) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, firstArgument: object, method: Reflection.MethodInfo) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: Type, method: str) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: Type, method: str, ignoreCase: bool) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, firstArgument: object, method: Reflection.MethodInfo, throwOnBindFailure: bool) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: object, method: str, ignoreCase: bool) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: object, method: str, ignoreCase: bool, throwOnBindFailure: bool) -> Delegate: ...
    @overload
    @staticmethod
    def CreateDelegate(type_: Type, target: Type, method: str, ignoreCase: bool, throwOnBindFailure: bool) -> Delegate: ...
    @overload
    def DynamicInvoke(self, args: Array[object]) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> Reflection.MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetInvocationList() -> Array[Delegate]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def Remove(source: Delegate, value: Delegate) -> Delegate: ...
    @overload
    @staticmethod
    def RemoveAll(source: Delegate, value: Delegate) -> Delegate: ...

class Enum(ValueType):
    """    """
    @overload
    def CompareTo(self, target: object) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Format(enumType: Type, value: object, format_: str) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetName(value: TEnum) -> str: ...
    @overload
    @staticmethod
    def GetName(enumType: Type, value: object) -> str: ...
    @overload
    @staticmethod
    def GetNames() -> Array[str]: ...
    @overload
    @staticmethod
    def GetNames(enumType: Type) -> Array[str]: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def GetUnderlyingType(enumType: Type) -> Type: ...
    @overload
    @staticmethod
    def GetValues() -> Array[TEnum]: ...
    @overload
    @staticmethod
    def GetValues(enumType: Type) -> Array: ...
    @overload
    @staticmethod
    def GetValuesAsUnderlyingType() -> Array: ...
    @overload
    @staticmethod
    def GetValuesAsUnderlyingType(enumType: Type) -> Array: ...
    @overload
    def HasFlag(self, flag: Enum) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(value: TEnum) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(enumType: Type, value: object) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: str) -> TEnum: ...
    @overload
    @staticmethod
    def Parse(value: ReadOnlySpan) -> TEnum: ...
    @overload
    @staticmethod
    def Parse(value: ReadOnlySpan, ignoreCase: bool) -> TEnum: ...
    @overload
    @staticmethod
    def Parse(enumType: Type, value: ReadOnlySpan) -> object: ...
    @overload
    @staticmethod
    def Parse(enumType: Type, value: str) -> object: ...
    @overload
    @staticmethod
    def Parse(value: str, ignoreCase: bool) -> TEnum: ...
    @overload
    @staticmethod
    def Parse(enumType: Type, value: str, ignoreCase: bool) -> object: ...
    @overload
    @staticmethod
    def Parse(enumType: Type, value: ReadOnlySpan, ignoreCase: bool) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: object) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: SByte) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: int) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: Int16) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: UInt64) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: UInt16) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: UInt32) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: Int64) -> object: ...
    @overload
    @staticmethod
    def ToObject(enumType: Type, value: Byte) -> object: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    @staticmethod
    def TryParse(value: ReadOnlySpan) -> (bool, TEnum): ...
    @overload
    @staticmethod
    def TryParse(value: str) -> (bool, TEnum): ...
    @overload
    @staticmethod
    def TryParse(value: ReadOnlySpan, ignoreCase: bool) -> (bool, TEnum): ...
    @overload
    @staticmethod
    def TryParse(enumType: Type, value: ReadOnlySpan) -> (bool, object): ...
    @overload
    @staticmethod
    def TryParse(enumType: Type, value: str) -> (bool, object): ...
    @overload
    @staticmethod
    def TryParse(value: str, ignoreCase: bool) -> (bool, TEnum): ...
    @overload
    @staticmethod
    def TryParse(enumType: Type, value: str, ignoreCase: bool) -> (bool, object): ...
    @overload
    @staticmethod
    def TryParse(enumType: Type, value: ReadOnlySpan, ignoreCase: bool) -> (bool, object): ...

class Environment(object):
    """    """
    @overload
    @staticmethod
    def Exit(exitCode: int) -> None: ...
    @overload
    @staticmethod
    def ExpandEnvironmentVariables(name: str) -> str: ...
    @overload
    @staticmethod
    def FailFast(message: str) -> None: ...
    @overload
    @staticmethod
    def FailFast(message: str, exception: Exception) -> None: ...
    @overload
    @staticmethod
    def FailFast(message: str, exception: Exception, errorMessage: str) -> None: ...
    @property
    def CommandLine(self) -> str: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def CurrentManagedThreadId(self) -> int: ...
    @property
    def ExitCode(self) -> int: ...
    @property
    def HasShutdownStarted(self) -> bool: ...
    @property
    def Is64BitOperatingSystem(self) -> bool: ...
    @property
    def Is64BitProcess(self) -> bool: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def NewLine(self) -> str: ...
    @property
    def OSVersion(self) -> OperatingSystem: ...
    @property
    def ProcessId(self) -> int: ...
    @property
    def ProcessorCount(self) -> int: ...
    @property
    def ProcessPath(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def SystemDirectory(self) -> str: ...
    @property
    def SystemPageSize(self) -> int: ...
    @property
    def TickCount(self) -> int: ...
    @property
    def TickCount64(self) -> Int64: ...
    @property
    def UserDomainName(self) -> str: ...
    @property
    def UserInteractive(self) -> bool: ...
    @property
    def UserName(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @property
    def WorkingSet(self) -> Int64: ...
    @overload
    @staticmethod
    def GetCommandLineArgs() -> Array[str]: ...
    @overload
    @staticmethod
    def GetEnvironmentVariable(variable: str) -> str: ...
    @overload
    @staticmethod
    def GetEnvironmentVariable(variable: str, target: EnvironmentVariableTarget) -> str: ...
    @overload
    @staticmethod
    def GetEnvironmentVariables() -> Collections.IDictionary: ...
    @overload
    @staticmethod
    def GetEnvironmentVariables(target: EnvironmentVariableTarget) -> Collections.IDictionary: ...
    @overload
    @staticmethod
    def GetFolderPath(folder: SpecialFolder) -> str: ...
    @overload
    @staticmethod
    def GetFolderPath(folder: SpecialFolder, option: SpecialFolderOption) -> str: ...
    @overload
    @staticmethod
    def GetLogicalDrives() -> Array[str]: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: Void): ...
    @ExitCode.setter
    def ExitCode(self, value: Void): ...
    @overload
    @staticmethod
    def SetEnvironmentVariable(variable: str, value: str) -> None: ...
    @overload
    @staticmethod
    def SetEnvironmentVariable(variable: str, value: str, target: EnvironmentVariableTarget) -> None: ...

class SpecialFolder(enum.Enum):
    Desktop = 0
    Programs = 2
    MyDocuments = 5
    Personal = 5
    Favorites = 6
    Startup = 7
    Recent = 8
    SendTo = 9
    StartMenu = 11
    MyMusic = 13
    MyVideos = 14
    DesktopDirectory = 16
    MyComputer = 17
    NetworkShortcuts = 19
    Fonts = 20
    Templates = 21
    CommonStartMenu = 22
    CommonPrograms = 23
    CommonStartup = 24
    CommonDesktopDirectory = 25
    ApplicationData = 26
    PrinterShortcuts = 27
    LocalApplicationData = 28
    InternetCache = 32
    Cookies = 33
    History = 34
    CommonApplicationData = 35
    Windows = 36
    System = 37
    ProgramFiles = 38
    MyPictures = 39
    UserProfile = 40
    SystemX86 = 41
    ProgramFilesX86 = 42
    CommonProgramFiles = 43
    CommonProgramFilesX86 = 44
    CommonTemplates = 45
    CommonDocuments = 46
    CommonAdminTools = 47
    AdminTools = 48
    CommonMusic = 53
    CommonPictures = 54
    CommonVideos = 55
    Resources = 56
    LocalizedResources = 57
    CommonOemLinks = 58
    CDBurning = 59

class SpecialFolderOption(enum.Enum):
    None_ = 0
    DoNotVerify = 16384
    Create = 32768

class Exception(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Data(self) -> Collections.IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> Reflection.MethodBase: ...
    @overload
    def GetBaseException() -> Exception: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetType() -> Type: ...
    @HelpLink.setter
    def HelpLink(self, value: Void): ...
    @HResult.setter
    def HResult(self, value: Void): ...
    @Source.setter
    def Source(self, value: Void): ...
    @overload
    def ToString() -> str: ...

class GCCollectionMode(enum.Enum):
    Default = 0
    Forced = 1
    Optimized = 2
    Aggressive = 3

class GCNotificationStatus(enum.Enum):
    Succeeded = 0
    Failed = 1
    Canceled = 2
    Timeout = 3
    NotApplicable = 4

class GC(object):
    """    """
    @overload
    @staticmethod
    def AddMemoryPressure(bytesAllocated: Int64) -> None: ...
    @overload
    @staticmethod
    def AllocateArray(length: int, pinned: bool) -> Array[T]: ...
    @overload
    @staticmethod
    def AllocateUninitializedArray(length: int, pinned: bool) -> Array[T]: ...
    @overload
    @staticmethod
    def CancelFullGCNotification() -> None: ...
    @overload
    @staticmethod
    def Collect() -> None: ...
    @overload
    @staticmethod
    def Collect(generation: int) -> None: ...
    @overload
    @staticmethod
    def Collect(generation: int, mode: GCCollectionMode) -> None: ...
    @overload
    @staticmethod
    def Collect(generation: int, mode: GCCollectionMode, blocking: bool) -> None: ...
    @overload
    @staticmethod
    def Collect(generation: int, mode: GCCollectionMode, blocking: bool, compacting: bool) -> None: ...
    @overload
    @staticmethod
    def CollectionCount(generation: int) -> int: ...
    @overload
    @staticmethod
    def EndNoGCRegion() -> None: ...
    @property
    def MaxGeneration(self) -> int: ...
    @overload
    @staticmethod
    def GetAllocatedBytesForCurrentThread() -> Int64: ...
    @overload
    @staticmethod
    def GetConfigurationVariables() -> Generic.IReadOnlyDictionary: ...
    @overload
    @staticmethod
    def GetGCMemoryInfo() -> GCMemoryInfo: ...
    @overload
    @staticmethod
    def GetGCMemoryInfo(kind: GCKind) -> GCMemoryInfo: ...
    @overload
    @staticmethod
    def GetGeneration(obj: object) -> int: ...
    @overload
    @staticmethod
    def GetGeneration(wo: WeakReference) -> int: ...
    @overload
    @staticmethod
    def GetTotalAllocatedBytes(precise: bool) -> Int64: ...
    @overload
    @staticmethod
    def GetTotalMemory(forceFullCollection: bool) -> Int64: ...
    @overload
    @staticmethod
    def GetTotalPauseDuration() -> TimeSpan: ...
    @overload
    @staticmethod
    def KeepAlive(obj: object) -> None: ...
    @overload
    @staticmethod
    def RegisterForFullGCNotification(maxGenerationThreshold: int, largeObjectHeapThreshold: int) -> None: ...
    @overload
    @staticmethod
    def RemoveMemoryPressure(bytesAllocated: Int64) -> None: ...
    @overload
    @staticmethod
    def ReRegisterForFinalize(obj: object) -> None: ...
    @overload
    @staticmethod
    def SuppressFinalize(obj: object) -> None: ...
    @overload
    @staticmethod
    def TryStartNoGCRegion(totalSize: Int64) -> bool: ...
    @overload
    @staticmethod
    def TryStartNoGCRegion(totalSize: Int64, lohSize: Int64) -> bool: ...
    @overload
    @staticmethod
    def TryStartNoGCRegion(totalSize: Int64, disallowFullBlockingGC: bool) -> bool: ...
    @overload
    @staticmethod
    def TryStartNoGCRegion(totalSize: Int64, lohSize: Int64, disallowFullBlockingGC: bool) -> bool: ...
    @overload
    @staticmethod
    def WaitForFullGCApproach() -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForFullGCApproach(millisecondsTimeout: int) -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForFullGCApproach(timeout: TimeSpan) -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForFullGCComplete() -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForFullGCComplete(timeout: TimeSpan) -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForFullGCComplete(millisecondsTimeout: int) -> GCNotificationStatus: ...
    @overload
    @staticmethod
    def WaitForPendingFinalizers() -> None: ...

class Math(object):
    """    """
    @property
    def E(self) -> float: ...
    @property
    def PI(self) -> float: ...
    @property
    def Tau(self) -> float: ...
    @overload
    @staticmethod
    def Abs(value: Single) -> Single: ...
    @overload
    @staticmethod
    def Abs(value: int) -> int: ...
    @overload
    @staticmethod
    def Abs(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Abs(value: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Abs(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Abs(value: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Abs(value: float) -> float: ...
    @overload
    @staticmethod
    def Abs(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Acos(d: float) -> float: ...
    @overload
    @staticmethod
    def Acosh(d: float) -> float: ...
    @overload
    @staticmethod
    def Asin(d: float) -> float: ...
    @overload
    @staticmethod
    def Asinh(d: float) -> float: ...
    @overload
    @staticmethod
    def Atan(d: float) -> float: ...
    @overload
    @staticmethod
    def Atan2(y: float, x: float) -> float: ...
    @overload
    @staticmethod
    def Atanh(d: float) -> float: ...
    @overload
    @staticmethod
    def BigMul(a: int, b: int) -> Int64: ...
    @overload
    @staticmethod
    def BigMul(a: UInt64, b: UInt64) -> (UInt64, UInt64): ...
    @overload
    @staticmethod
    def BigMul(a: Int64, b: Int64) -> (Int64, Int64): ...
    @overload
    @staticmethod
    def BitDecrement(x: float) -> float: ...
    @overload
    @staticmethod
    def BitIncrement(x: float) -> float: ...
    @overload
    @staticmethod
    def Cbrt(d: float) -> float: ...
    @overload
    @staticmethod
    def Ceiling(a: float) -> float: ...
    @overload
    @staticmethod
    def Ceiling(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Clamp(value: float, min_: float, max_: float) -> float: ...
    @overload
    @staticmethod
    def Clamp(value: UIntPtr, min_: UIntPtr, max_: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Clamp(value: UInt64, min_: UInt64, max_: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Clamp(value: UInt32, min_: UInt32, max_: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Clamp(value: SByte, min_: SByte, max_: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Clamp(value: int, min_: int, max_: int) -> int: ...
    @overload
    @staticmethod
    def Clamp(value: IntPtr, min_: IntPtr, max_: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Clamp(value: Int64, min_: Int64, max_: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Clamp(value: Byte, min_: Byte, max_: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Clamp(value: Decimal, min_: Decimal, max_: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Clamp(value: Single, min_: Single, max_: Single) -> Single: ...
    @overload
    @staticmethod
    def Clamp(value: Int16, min_: Int16, max_: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Clamp(value: UInt16, min_: UInt16, max_: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def CopySign(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Cos(d: float) -> float: ...
    @overload
    @staticmethod
    def Cosh(value: float) -> float: ...
    @overload
    @staticmethod
    def DivRem(left: Int64, right: Int64) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: UIntPtr, right: UIntPtr) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: IntPtr, right: IntPtr) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: UInt64, right: UInt64) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: int, right: int) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: UInt32, right: UInt32) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: Int16, right: Int16) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: Byte, right: Byte) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: SByte, right: SByte) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(left: UInt16, right: UInt16) -> ValueTuple: ...
    @overload
    @staticmethod
    def DivRem(a: Int64, b: Int64) -> (Int64, Int64): ...
    @overload
    @staticmethod
    def DivRem(a: int, b: int) -> (int, int): ...
    @overload
    @staticmethod
    def Exp(d: float) -> float: ...
    @overload
    @staticmethod
    def Floor(d: float) -> float: ...
    @overload
    @staticmethod
    def Floor(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(x: float, y: float, z: float) -> float: ...
    @overload
    @staticmethod
    def IEEERemainder(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def ILogB(x: float) -> int: ...
    @overload
    @staticmethod
    def Log(d: float) -> float: ...
    @overload
    @staticmethod
    def Log(a: float, newBase: float) -> float: ...
    @overload
    @staticmethod
    def Log10(d: float) -> float: ...
    @overload
    @staticmethod
    def Log2(x: float) -> float: ...
    @overload
    @staticmethod
    def Max(val1: SByte, val2: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Max(val1: IntPtr, val2: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Max(val1: UInt16, val2: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Max(val1: Int64, val2: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Max(val1: UInt64, val2: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Max(val1: UIntPtr, val2: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Max(val1: Single, val2: Single) -> Single: ...
    @overload
    @staticmethod
    def Max(val1: int, val2: int) -> int: ...
    @overload
    @staticmethod
    def Max(val1: UInt32, val2: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Max(val1: float, val2: float) -> float: ...
    @overload
    @staticmethod
    def Max(val1: Decimal, val2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Max(val1: Byte, val2: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Max(val1: Int16, val2: Int16) -> Int16: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Min(val1: Single, val2: Single) -> Single: ...
    @overload
    @staticmethod
    def Min(val1: SByte, val2: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Min(val1: IntPtr, val2: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Min(val1: Int64, val2: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Min(val1: int, val2: int) -> int: ...
    @overload
    @staticmethod
    def Min(val1: Int16, val2: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Min(val1: Byte, val2: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Min(val1: Decimal, val2: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Min(val1: UInt16, val2: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Min(val1: UInt64, val2: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Min(val1: UIntPtr, val2: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Min(val1: float, val2: float) -> float: ...
    @overload
    @staticmethod
    def Min(val1: UInt32, val2: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def MinMagnitude(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Pow(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(d: float) -> float: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(d: float) -> float: ...
    @overload
    @staticmethod
    def Round(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Round(a: float) -> float: ...
    @overload
    @staticmethod
    def Round(value: float, digits: int) -> float: ...
    @overload
    @staticmethod
    def Round(d: Decimal, decimals: int) -> Decimal: ...
    @overload
    @staticmethod
    def Round(d: Decimal, mode: MidpointRounding) -> Decimal: ...
    @overload
    @staticmethod
    def Round(value: float, mode: MidpointRounding) -> float: ...
    @overload
    @staticmethod
    def Round(d: Decimal, decimals: int, mode: MidpointRounding) -> Decimal: ...
    @overload
    @staticmethod
    def Round(value: float, digits: int, mode: MidpointRounding) -> float: ...
    @overload
    @staticmethod
    def ScaleB(x: float, n: int) -> float: ...
    @overload
    @staticmethod
    def Sign(value: Int64) -> int: ...
    @overload
    @staticmethod
    def Sign(value: int) -> int: ...
    @overload
    @staticmethod
    def Sign(value: Int16) -> int: ...
    @overload
    @staticmethod
    def Sign(value: float) -> int: ...
    @overload
    @staticmethod
    def Sign(value: Decimal) -> int: ...
    @overload
    @staticmethod
    def Sign(value: IntPtr) -> int: ...
    @overload
    @staticmethod
    def Sign(value: Single) -> int: ...
    @overload
    @staticmethod
    def Sign(value: SByte) -> int: ...
    @overload
    @staticmethod
    def Sin(a: float) -> float: ...
    @overload
    @staticmethod
    def SinCos(x: float) -> ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(value: float) -> float: ...
    @overload
    @staticmethod
    def Sqrt(d: float) -> float: ...
    @overload
    @staticmethod
    def Tan(a: float) -> float: ...
    @overload
    @staticmethod
    def Tanh(value: float) -> float: ...
    @overload
    @staticmethod
    def Truncate(d: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def Truncate(d: float) -> float: ...

class MathF(object):
    """    """
    @property
    def E(self) -> Single: ...
    @property
    def PI(self) -> Single: ...
    @property
    def Tau(self) -> Single: ...
    @overload
    @staticmethod
    def Abs(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Acos(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Acosh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Asin(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Asinh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atan(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atan2(y: Single, x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atanh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def BitDecrement(x: Single) -> Single: ...
    @overload
    @staticmethod
    def BitIncrement(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Cbrt(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Ceiling(x: Single) -> Single: ...
    @overload
    @staticmethod
    def CopySign(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Cos(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Cosh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Exp(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Floor(x: Single) -> Single: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(x: Single, y: Single, z: Single) -> Single: ...
    @overload
    @staticmethod
    def IEEERemainder(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def ILogB(x: Single) -> int: ...
    @overload
    @staticmethod
    def Log(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Log(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Log10(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Log2(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Max(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Min(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Pow(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: Single) -> Single: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, digits: int) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, mode: MidpointRounding) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, digits: int, mode: MidpointRounding) -> Single: ...
    @overload
    @staticmethod
    def ScaleB(x: Single, n: int) -> Single: ...
    @overload
    @staticmethod
    def Sign(x: Single) -> int: ...
    @overload
    @staticmethod
    def Sin(x: Single) -> Single: ...
    @overload
    @staticmethod
    def SinCos(x: Single) -> ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Sqrt(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Tan(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Tanh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Truncate(x: Single) -> Single: ...

class MulticastDelegate(Delegate):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetInvocationList() -> Array[Delegate]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class object:
    """    """
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Equals(objA: object, objB: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetType() -> Type: ...
    @overload
    @staticmethod
    def ReferenceEquals(objA: object, objB: object) -> bool: ...
    @overload
    def ToString() -> str: ...

class RuntimeArgumentHandle(ValueType):
    """    """

class RuntimeTypeHandle(ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, handle: RuntimeTypeHandle) -> bool: ...
    @overload
    @staticmethod
    def FromIntPtr(value: IntPtr) -> RuntimeTypeHandle: ...
    @property
    def Value(self) -> IntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetModuleHandle() -> ModuleHandle: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def ToIntPtr(value: RuntimeTypeHandle) -> IntPtr: ...

class RuntimeMethodHandle(ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, handle: RuntimeMethodHandle) -> bool: ...
    @overload
    @staticmethod
    def FromIntPtr(value: IntPtr) -> RuntimeMethodHandle: ...
    @property
    def Value(self) -> IntPtr: ...
    @overload
    def GetFunctionPointer() -> IntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def ToIntPtr(value: RuntimeMethodHandle) -> IntPtr: ...

class RuntimeFieldHandle(ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, handle: RuntimeFieldHandle) -> bool: ...
    @overload
    @staticmethod
    def FromIntPtr(value: IntPtr) -> RuntimeFieldHandle: ...
    @property
    def Value(self) -> IntPtr: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def ToIntPtr(value: RuntimeFieldHandle) -> IntPtr: ...

class ModuleHandle(ValueType):
    """    """
    @property
    def EmptyHandle(self) -> ModuleHandle: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, handle: ModuleHandle) -> bool: ...
    @property
    def MDStreamVersion(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetRuntimeFieldHandleFromMetadataToken(self, fieldToken: int) -> RuntimeFieldHandle: ...
    @overload
    def GetRuntimeMethodHandleFromMetadataToken(self, methodToken: int) -> RuntimeMethodHandle: ...
    @overload
    def GetRuntimeTypeHandleFromMetadataToken(self, typeToken: int) -> RuntimeTypeHandle: ...
    @overload
    def ResolveFieldHandle(self, fieldToken: int) -> RuntimeFieldHandle: ...
    @overload
    def ResolveFieldHandle(self, fieldToken: int, typeInstantiationContext: Array[RuntimeTypeHandle], methodInstantiationContext: Array[RuntimeTypeHandle]) -> RuntimeFieldHandle: ...
    @overload
    def ResolveMethodHandle(self, methodToken: int) -> RuntimeMethodHandle: ...
    @overload
    def ResolveMethodHandle(self, methodToken: int, typeInstantiationContext: Array[RuntimeTypeHandle], methodInstantiationContext: Array[RuntimeTypeHandle]) -> RuntimeMethodHandle: ...
    @overload
    def ResolveTypeHandle(self, typeToken: int) -> RuntimeTypeHandle: ...
    @overload
    def ResolveTypeHandle(self, typeToken: int, typeInstantiationContext: Array[RuntimeTypeHandle], methodInstantiationContext: Array[RuntimeTypeHandle]) -> RuntimeTypeHandle: ...

class str(object):
    """    """
    @overload
    def __init__(self, value: Array[Char]): ...
    @overload
    def __init__(self, value: Char): ...
    @overload
    def __init__(self, value: SByte): ...
    @overload
    def __init__(self, value: ReadOnlySpan): ...
    @overload
    def __init__(self, c: Char, count: int): ...
    @overload
    def __init__(self, value: Array[Char], startIndex: int, length: int): ...
    @overload
    def __init__(self, value: Char, startIndex: int, length: int): ...
    @overload
    def __init__(self, value: SByte, startIndex: int, length: int): ...
    @overload
    def __init__(self, value: SByte, startIndex: int, length: int, enc: Text.Encoding): ...
    @property
    def Empty(self) -> str: ...
    @overload
    def Clone() -> object: ...
    @overload
    @staticmethod
    def Compare(strA: str, strB: str) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, strB: str, ignoreCase: bool) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, strB: str, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, strB: str, culture: Globalization.CultureInfo, options: Globalization.CompareOptions) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, strB: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, indexA: int, strB: str, indexB: int, length: int) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, indexA: int, strB: str, indexB: int, length: int, ignoreCase: bool) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, indexA: int, strB: str, indexB: int, length: int, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, indexA: int, strB: str, indexB: int, length: int, ignoreCase: bool, culture: Globalization.CultureInfo) -> int: ...
    @overload
    @staticmethod
    def Compare(strA: str, indexA: int, strB: str, indexB: int, length: int, culture: Globalization.CultureInfo, options: Globalization.CompareOptions) -> int: ...
    @overload
    @staticmethod
    def CompareOrdinal(strA: str, strB: str) -> int: ...
    @overload
    @staticmethod
    def CompareOrdinal(strA: str, indexA: int, strB: str, indexB: int, length: int) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, strB: str) -> int: ...
    @overload
    @staticmethod
    def Concat(values: Array[str]) -> str: ...
    @overload
    @staticmethod
    def Concat(values: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def Concat(args: Array[object]) -> str: ...
    @overload
    @staticmethod
    def Concat(arg0: object) -> str: ...
    @overload
    @staticmethod
    def Concat(values: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: str, str1: str) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: ReadOnlySpan, str1: ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def Concat(arg0: object, arg1: object) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: str, str1: str, str2: str) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: ReadOnlySpan, str1: ReadOnlySpan, str2: ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def Concat(arg0: object, arg1: object, arg2: object) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: str, str1: str, str2: str, str3: str) -> str: ...
    @overload
    @staticmethod
    def Concat(str0: ReadOnlySpan, str1: ReadOnlySpan, str2: ReadOnlySpan, str3: ReadOnlySpan) -> str: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def Contains(self, value: Char) -> bool: ...
    @overload
    def Contains(self, value: Char, comparisonType: StringComparison) -> bool: ...
    @overload
    def Contains(self, value: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def CopyTo(self, destination: Span) -> None: ...
    @overload
    def CopyTo(self, sourceIndex: int, destination: Array[Char], destinationIndex: int, count: int) -> None: ...
    @overload
    @staticmethod
    def Create(provider: IFormatProvider) -> (str, CompilerServices.DefaultInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def Create(length: int, state: TState, action: Buffers.SpanAction) -> str: ...
    @overload
    @staticmethod
    def Create(provider: IFormatProvider, initialBuffer: Span) -> (str, CompilerServices.DefaultInterpolatedStringHandler): ...
    @overload
    def EndsWith(self, value: Char) -> bool: ...
    @overload
    def EndsWith(self, value: str) -> bool: ...
    @overload
    def EndsWith(self, value: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def EndsWith(self, value: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    def EnumerateRunes() -> Text.StringRuneEnumerator: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, value: str) -> bool: ...
    @overload
    @staticmethod
    def Equals(a: str, b: str) -> bool: ...
    @overload
    def Equals(self, value: str, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def Equals(a: str, b: str, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def Format(format_: str, arg0: object) -> str: ...
    @overload
    @staticmethod
    def Format(format_: str, args: Array[object]) -> str: ...
    @overload
    @staticmethod
    def Format(provider: IFormatProvider, format_: str, arg0: object) -> str: ...
    @overload
    @staticmethod
    def Format(provider: IFormatProvider, format_: str, args: Array[object]) -> str: ...
    @overload
    @staticmethod
    def Format(format_: str, arg0: object, arg1: object) -> str: ...
    @overload
    @staticmethod
    def Format(provider: IFormatProvider, format_: str, arg0: object, arg1: object) -> str: ...
    @overload
    @staticmethod
    def Format(format_: str, arg0: object, arg1: object, arg2: object) -> str: ...
    @overload
    @staticmethod
    def Format(provider: IFormatProvider, format_: str, arg0: object, arg1: object, arg2: object) -> str: ...
    @property
    def Chars(self) -> Char: ...
    @property
    def Length(self) -> int: ...
    @overload
    def GetEnumerator() -> CharEnumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def GetHashCode(value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def GetHashCode(value: ReadOnlySpan, comparisonType: StringComparison) -> int: ...
    @overload
    def GetPinnableReference() -> Char: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    def IndexOf(self, value: str) -> int: ...
    @overload
    def IndexOf(self, value: Char) -> int: ...
    @overload
    def IndexOf(self, value: Char, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, value: Char, comparisonType: StringComparison) -> int: ...
    @overload
    def IndexOf(self, value: str, startIndex: int) -> int: ...
    @overload
    def IndexOf(self, value: str, comparisonType: StringComparison) -> int: ...
    @overload
    def IndexOf(self, value: Char, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, value: str, startIndex: int, count: int) -> int: ...
    @overload
    def IndexOf(self, value: str, startIndex: int, comparisonType: StringComparison) -> int: ...
    @overload
    def IndexOf(self, value: str, startIndex: int, count: int, comparisonType: StringComparison) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Array[Char]) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Array[Char], startIndex: int) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Array[Char], startIndex: int, count: int) -> int: ...
    @overload
    def Insert(self, startIndex: int, value: str) -> str: ...
    @overload
    @staticmethod
    def Intern(str_: str) -> str: ...
    @overload
    @staticmethod
    def IsInterned(str_: str) -> str: ...
    @overload
    def IsNormalized() -> bool: ...
    @overload
    def IsNormalized(self, normalizationForm: Text.NormalizationForm) -> bool: ...
    @overload
    @staticmethod
    def IsNullOrEmpty(value: str) -> bool: ...
    @overload
    @staticmethod
    def IsNullOrWhiteSpace(value: str) -> bool: ...
    @overload
    @staticmethod
    def Join(separator: Char, value: Array[str]) -> str: ...
    @overload
    @staticmethod
    def Join(separator: str, value: Array[str]) -> str: ...
    @overload
    @staticmethod
    def Join(separator: str, values: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def Join(separator: Char, values: Array[object]) -> str: ...
    @overload
    @staticmethod
    def Join(separator: str, values: Array[object]) -> str: ...
    @overload
    @staticmethod
    def Join(separator: Char, values: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def Join(separator: str, values: Generic.IEnumerable) -> str: ...
    @overload
    @staticmethod
    def Join(separator: str, value: Array[str], startIndex: int, count: int) -> str: ...
    @overload
    @staticmethod
    def Join(separator: Char, value: Array[str], startIndex: int, count: int) -> str: ...
    @overload
    def LastIndexOf(self, value: str) -> int: ...
    @overload
    def LastIndexOf(self, value: Char) -> int: ...
    @overload
    def LastIndexOf(self, value: str, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, value: Char, startIndex: int) -> int: ...
    @overload
    def LastIndexOf(self, value: str, comparisonType: StringComparison) -> int: ...
    @overload
    def LastIndexOf(self, value: Char, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, value: str, startIndex: int, count: int) -> int: ...
    @overload
    def LastIndexOf(self, value: str, startIndex: int, comparisonType: StringComparison) -> int: ...
    @overload
    def LastIndexOf(self, value: str, startIndex: int, count: int, comparisonType: StringComparison) -> int: ...
    @overload
    def LastIndexOfAny(self, anyOf: Array[Char]) -> int: ...
    @overload
    def LastIndexOfAny(self, anyOf: Array[Char], startIndex: int) -> int: ...
    @overload
    def LastIndexOfAny(self, anyOf: Array[Char], startIndex: int, count: int) -> int: ...
    @overload
    def Normalize() -> str: ...
    @overload
    def Normalize(self, normalizationForm: Text.NormalizationForm) -> str: ...
    @overload
    def PadLeft(self, totalWidth: int) -> str: ...
    @overload
    def PadLeft(self, totalWidth: int, paddingChar: Char) -> str: ...
    @overload
    def PadRight(self, totalWidth: int) -> str: ...
    @overload
    def PadRight(self, totalWidth: int, paddingChar: Char) -> str: ...
    @overload
    def Remove(self, startIndex: int) -> str: ...
    @overload
    def Remove(self, startIndex: int, count: int) -> str: ...
    @overload
    def Replace(self, oldValue: str, newValue: str) -> str: ...
    @overload
    def Replace(self, oldChar: Char, newChar: Char) -> str: ...
    @overload
    def Replace(self, oldValue: str, newValue: str, comparisonType: StringComparison) -> str: ...
    @overload
    def Replace(self, oldValue: str, newValue: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> str: ...
    @overload
    def ReplaceLineEndings() -> str: ...
    @overload
    def ReplaceLineEndings(self, replacementText: str) -> str: ...
    @overload
    def Split(self, separator: Array[Char]) -> Array[str]: ...
    @overload
    def Split(self, separator: str, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Char, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Array[Char], options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Array[str], options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Array[Char], count: int) -> Array[str]: ...
    @overload
    def Split(self, separator: Char, count: int, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Array[Char], count: int, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: Array[str], count: int, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def Split(self, separator: str, count: int, options: StringSplitOptions) -> Array[str]: ...
    @overload
    def StartsWith(self, value: Char) -> bool: ...
    @overload
    def StartsWith(self, value: str) -> bool: ...
    @overload
    def StartsWith(self, value: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def StartsWith(self, value: str, ignoreCase: bool, culture: Globalization.CultureInfo) -> bool: ...
    @overload
    def Substring(self, startIndex: int) -> str: ...
    @overload
    def Substring(self, startIndex: int, length: int) -> str: ...
    @overload
    def ToCharArray() -> Array[Char]: ...
    @overload
    def ToCharArray(self, startIndex: int, length: int) -> Array[Char]: ...
    @overload
    def ToLower() -> str: ...
    @overload
    def ToLower(self, culture: Globalization.CultureInfo) -> str: ...
    @overload
    def ToLowerInvariant() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToUpper() -> str: ...
    @overload
    def ToUpper(self, culture: Globalization.CultureInfo) -> str: ...
    @overload
    def ToUpperInvariant() -> str: ...
    @overload
    def Trim() -> str: ...
    @overload
    def Trim(self, trimChar: Char) -> str: ...
    @overload
    def Trim(self, trimChars: Array[Char]) -> str: ...
    @overload
    def TrimEnd() -> str: ...
    @overload
    def TrimEnd(self, trimChar: Char) -> str: ...
    @overload
    def TrimEnd(self, trimChars: Array[Char]) -> str: ...
    @overload
    def TrimStart() -> str: ...
    @overload
    def TrimStart(self, trimChar: Char) -> str: ...
    @overload
    def TrimStart(self, trimChars: Array[Char]) -> str: ...
    @overload
    def TryCopyTo(self, destination: Span) -> bool: ...

class Type(Reflection.MemberInfo):
    """    """
    @property
    def Delimiter(self) -> Char: ...
    @property
    def EmptyTypes(self) -> Array[Type]: ...
    @property
    def Missing(self) -> object: ...
    @property
    def FilterAttribute(self) -> Reflection.MemberFilter: ...
    @property
    def FilterName(self) -> Reflection.MemberFilter: ...
    @property
    def FilterNameIgnoreCase(self) -> Reflection.MemberFilter: ...
    @overload
    def Equals(self, o: Type) -> bool: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FindInterfaces(self, filter_: Reflection.TypeFilter, filterCriteria: object) -> Array[Type]: ...
    @overload
    def FindMembers(self, memberType: Reflection.MemberTypes, bindingAttr: Reflection.BindingFlags, filter_: Reflection.MemberFilter, filterCriteria: object) -> Reflection.Array[Reflection.MemberInfo]: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def AssemblyQualifiedName(self) -> str: ...
    @property
    def Attributes(self) -> Reflection.TypeAttributes: ...
    @property
    def BaseType(self) -> Type: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def DeclaringMethod(self) -> Reflection.MethodBase: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def DefaultBinder(self) -> Reflection.Binder: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GenericParameterAttributes(self) -> Reflection.GenericParameterAttributes: ...
    @property
    def GenericParameterPosition(self) -> int: ...
    @property
    def GenericTypeArguments(self) -> Array[Type]: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def HasElementType(self) -> bool: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsAnsiClass(self) -> bool: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsAutoClass(self) -> bool: ...
    @property
    def IsAutoLayout(self) -> bool: ...
    @property
    def IsByRef(self) -> bool: ...
    @property
    def IsByRefLike(self) -> bool: ...
    @property
    def IsClass(self) -> bool: ...
    @property
    def IsCOMObject(self) -> bool: ...
    @property
    def IsConstructedGenericType(self) -> bool: ...
    @property
    def IsContextful(self) -> bool: ...
    @property
    def IsEnum(self) -> bool: ...
    @property
    def IsExplicitLayout(self) -> bool: ...
    @property
    def IsGenericMethodParameter(self) -> bool: ...
    @property
    def IsGenericParameter(self) -> bool: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsGenericTypeDefinition(self) -> bool: ...
    @property
    def IsGenericTypeParameter(self) -> bool: ...
    @property
    def IsImport(self) -> bool: ...
    @property
    def IsInterface(self) -> bool: ...
    @property
    def IsLayoutSequential(self) -> bool: ...
    @property
    def IsMarshalByRef(self) -> bool: ...
    @property
    def IsNested(self) -> bool: ...
    @property
    def IsNestedAssembly(self) -> bool: ...
    @property
    def IsNestedFamANDAssem(self) -> bool: ...
    @property
    def IsNestedFamily(self) -> bool: ...
    @property
    def IsNestedFamORAssem(self) -> bool: ...
    @property
    def IsNestedPrivate(self) -> bool: ...
    @property
    def IsNestedPublic(self) -> bool: ...
    @property
    def IsNotPublic(self) -> bool: ...
    @property
    def IsPointer(self) -> bool: ...
    @property
    def IsPrimitive(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsSealed(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def IsSerializable(self) -> bool: ...
    @property
    def IsSignatureType(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def IsUnicodeClass(self) -> bool: ...
    @property
    def IsValueType(self) -> bool: ...
    @property
    def IsVariableBoundArray(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def MemberType(self) -> Reflection.MemberTypes: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @property
    def StructLayoutAttribute(self) -> InteropServices.StructLayoutAttribute: ...
    @property
    def TypeHandle(self) -> RuntimeTypeHandle: ...
    @property
    def TypeInitializer(self) -> Reflection.ConstructorInfo: ...
    @property
    def UnderlyingSystemType(self) -> Type: ...
    @overload
    def GetArrayRank() -> int: ...
    @overload
    def GetConstructor(self, types: Array[Type]) -> Reflection.ConstructorInfo: ...
    @overload
    def GetConstructor(self, bindingAttr: Reflection.BindingFlags, types: Array[Type]) -> Reflection.ConstructorInfo: ...
    @overload
    def GetConstructor(self, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.ConstructorInfo: ...
    @overload
    def GetConstructor(self, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, callConvention: Reflection.CallingConventions, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.ConstructorInfo: ...
    @overload
    def GetConstructors() -> Reflection.Array[Reflection.ConstructorInfo]: ...
    @overload
    def GetConstructors(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.ConstructorInfo]: ...
    @overload
    def GetDefaultMembers() -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetElementType() -> Type: ...
    @overload
    def GetEnumName(self, value: object) -> str: ...
    @overload
    def GetEnumNames() -> Array[str]: ...
    @overload
    def GetEnumUnderlyingType() -> Type: ...
    @overload
    def GetEnumValues() -> Array: ...
    @overload
    def GetEnumValuesAsUnderlyingType() -> Array: ...
    @overload
    def GetEvent(self, name: str) -> Reflection.EventInfo: ...
    @overload
    def GetEvent(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.EventInfo: ...
    @overload
    def GetEvents() -> Reflection.Array[Reflection.EventInfo]: ...
    @overload
    def GetEvents(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.EventInfo]: ...
    @overload
    def GetField(self, name: str) -> Reflection.FieldInfo: ...
    @overload
    def GetField(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    def GetFields() -> Reflection.Array[Reflection.FieldInfo]: ...
    @overload
    def GetFields(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.FieldInfo]: ...
    @overload
    def GetGenericArguments() -> Array[Type]: ...
    @overload
    def GetGenericParameterConstraints() -> Array[Type]: ...
    @overload
    def GetGenericTypeDefinition() -> Type: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetInterface(self, name: str) -> Type: ...
    @overload
    def GetInterface(self, name: str, ignoreCase: bool) -> Type: ...
    @overload
    def GetInterfaceMap(self, interfaceType: Type) -> Reflection.InterfaceMapping: ...
    @overload
    def GetInterfaces() -> Array[Type]: ...
    @overload
    def GetMember(self, name: str) -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMember(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMember(self, name: str, type_: Reflection.MemberTypes, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMembers() -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMemberWithSameMetadataDefinitionAs(self, member: Reflection.MemberInfo) -> Reflection.MemberInfo: ...
    @overload
    def GetMethod(self, name: str) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, types: Array[Type]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, genericParameterCount: int, types: Array[Type]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: Reflection.BindingFlags, types: Array[Type]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, genericParameterCount: int, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, callConvention: Reflection.CallingConventions, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, genericParameterCount: int, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethod(self, name: str, genericParameterCount: int, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, callConvention: Reflection.CallingConventions, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.MethodInfo: ...
    @overload
    def GetMethods() -> Reflection.Array[Reflection.MethodInfo]: ...
    @overload
    def GetMethods(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.MethodInfo]: ...
    @overload
    def GetNestedType(self, name: str) -> Type: ...
    @overload
    def GetNestedType(self, name: str, bindingAttr: Reflection.BindingFlags) -> Type: ...
    @overload
    def GetNestedTypes() -> Array[Type]: ...
    @overload
    def GetNestedTypes(self, bindingAttr: Reflection.BindingFlags) -> Array[Type]: ...
    @overload
    def GetProperties() -> Reflection.Array[Reflection.PropertyInfo]: ...
    @overload
    def GetProperties(self, bindingAttr: Reflection.BindingFlags) -> Reflection.Array[Reflection.PropertyInfo]: ...
    @overload
    def GetProperty(self, name: str) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, types: Array[Type]) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, returnType: Type) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, returnType: Type, types: Array[Type]) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, returnType: Type, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, returnType: Type, types: Array[Type], modifiers: Reflection.Array[Reflection.ParameterModifier]) -> Reflection.PropertyInfo: ...
    @overload
    def GetType() -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str) -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str, throwOnError: bool, ignoreCase: bool) -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str, assemblyResolver: Func, typeResolver: Func) -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str, assemblyResolver: Func, typeResolver: Func, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetType(typeName: str, assemblyResolver: Func, typeResolver: Func, throwOnError: bool, ignoreCase: bool) -> Type: ...
    @overload
    @staticmethod
    def GetTypeArray(args: Array[object]) -> Array[Type]: ...
    @overload
    @staticmethod
    def GetTypeCode(type_: Type) -> TypeCode: ...
    @overload
    @staticmethod
    def GetTypeFromCLSID(clsid: Guid) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromCLSID(clsid: Guid, server: str) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromCLSID(clsid: Guid, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromCLSID(clsid: Guid, server: str, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromHandle(handle: RuntimeTypeHandle) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromProgID(progID: str) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromProgID(progID: str, server: str) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromProgID(progID: str, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetTypeFromProgID(progID: str, server: str, throwOnError: bool) -> Type: ...
    @overload
    @staticmethod
    def GetTypeHandle(o: object) -> RuntimeTypeHandle: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: Array[object]) -> object: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: Array[object], modifiers: Reflection.Array[Reflection.ParameterModifier], culture: Globalization.CultureInfo, namedParameters: Array[str]) -> object: ...
    @overload
    def IsAssignableFrom(self, c: Type) -> bool: ...
    @overload
    def IsAssignableTo(self, targetType: Type) -> bool: ...
    @overload
    def IsEnumDefined(self, value: object) -> bool: ...
    @overload
    def IsEquivalentTo(self, other: Type) -> bool: ...
    @overload
    def IsInstanceOfType(self, o: object) -> bool: ...
    @overload
    def IsSubclassOf(self, c: Type) -> bool: ...
    @overload
    def MakeArrayType() -> Type: ...
    @overload
    def MakeArrayType(self, rank: int) -> Type: ...
    @overload
    def MakeByRefType() -> Type: ...
    @overload
    @staticmethod
    def MakeGenericMethodParameter(position: int) -> Type: ...
    @overload
    @staticmethod
    def MakeGenericSignatureType(genericTypeDefinition: Type, typeArguments: Array[Type]) -> Type: ...
    @overload
    def MakeGenericType(self, typeArguments: Array[Type]) -> Type: ...
    @overload
    def MakePointerType() -> Type: ...
    @overload
    def ToString() -> str: ...

class TypedReference(ValueType):
    """    """
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetTargetType(value: TypedReference) -> Type: ...
    @overload
    @staticmethod
    def MakeTypedReference(target: object, flds: Reflection.Array[Reflection.FieldInfo]) -> TypedReference: ...
    @overload
    @staticmethod
    def SetTypedReference(target: TypedReference, value: object) -> None: ...
    @overload
    @staticmethod
    def TargetTypeToken(value: TypedReference) -> RuntimeTypeHandle: ...
    @overload
    @staticmethod
    def ToObject(value: TypedReference) -> object: ...

class TypeLoadException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @property
    def Message(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ValueType(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class WeakReference(object):
    """    """
    @overload
    def __init__(self, target: object): ...
    @overload
    def __init__(self, target: object, trackResurrection: bool): ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def Target(self) -> object: ...
    @property
    def TrackResurrection(self) -> bool: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @Target.setter
    def Target(self, value: Void): ...

class WeakReference(object):
    """    WeakReference[T]
    """
    @overload
    def __init__(self, target: T): ...
    @overload
    def __init__(self, target: T, trackResurrection: bool): ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def SetTarget(self, target: T) -> None: ...
    @overload
    def TryGetTarget() -> (bool, T): ...

class AccessViolationException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class Action(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class Action(MulticastDelegate):
    """    Action[T]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, obj: T, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, obj: T) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15) -> None: ...

class Action(MulticastDelegate):
    """    Action[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16) -> None: ...

class Comparison(MulticastDelegate):
    """    Comparison[T]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, x: T, y: T, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> int: ...
    @overload
    def Invoke(self, x: T, y: T) -> int: ...

class Converter(MulticastDelegate):
    """    Converter[TInput, TOutput]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, input_: TInput, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TOutput: ...
    @overload
    def Invoke(self, input_: TInput) -> TOutput: ...

class Predicate(MulticastDelegate):
    """    Predicate[T]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, obj: T, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, obj: T) -> bool: ...

class Activator(object):
    """    """
    @overload
    @staticmethod
    def CreateInstance() -> T: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(assemblyName: str, typeName: str) -> Remoting.ObjectHandle: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type, args: Array[object]) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type, nonPublic: bool) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type, args: Array[object], activationAttributes: Array[object]) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(assemblyName: str, typeName: str, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(type_: Type, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> object: ...
    @overload
    @staticmethod
    def CreateInstance(assemblyName: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    @staticmethod
    def CreateInstanceFrom(assemblyFile: str, typeName: str) -> Remoting.ObjectHandle: ...
    @overload
    @staticmethod
    def CreateInstanceFrom(assemblyFile: str, typeName: str, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    @staticmethod
    def CreateInstanceFrom(assemblyFile: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...

class AggregateException(Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerExceptions: Generic.IEnumerable): ...
    @overload
    def __init__(self, innerExceptions: Array[Exception]): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerExceptions: Generic.IEnumerable): ...
    @overload
    def __init__(self, message: str, innerExceptions: Array[Exception]): ...
    @overload
    def Flatten() -> AggregateException: ...
    @property
    def InnerExceptions(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetBaseException() -> Exception: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def Handle(self, predicate: Func) -> None: ...
    @overload
    def ToString() -> str: ...

class AppContext(object):
    """    """
    @property
    def BaseDirectory(self) -> str: ...
    @property
    def TargetFrameworkName(self) -> str: ...
    @overload
    @staticmethod
    def GetData(name: str) -> object: ...
    @overload
    @staticmethod
    def SetData(name: str, data: object) -> None: ...
    @overload
    @staticmethod
    def SetSwitch(switchName: str, isEnabled: bool) -> None: ...
    @overload
    @staticmethod
    def TryGetSwitch(switchName: str) -> (bool, bool): ...
    @property
    def UnhandledException(self): ...
    @property
    def FirstChanceException(self): ...
    @property
    def ProcessExit(self): ...

class AppDomain(MarshalByRefObject):
    """    """
    @overload
    def ApplyPolicy(self, assemblyName: str) -> str: ...
    @overload
    def CreateInstance(self, assemblyName: str, typeName: str) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstance(self, assemblyName: str, typeName: str, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstance(self, assemblyName: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstanceAndUnwrap(self, assemblyName: str, typeName: str) -> object: ...
    @overload
    def CreateInstanceAndUnwrap(self, assemblyName: str, typeName: str, activationAttributes: Array[object]) -> object: ...
    @overload
    def CreateInstanceAndUnwrap(self, assemblyName: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> object: ...
    @overload
    def CreateInstanceFrom(self, assemblyFile: str, typeName: str) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstanceFrom(self, assemblyFile: str, typeName: str, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstanceFrom(self, assemblyFile: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> Remoting.ObjectHandle: ...
    @overload
    def CreateInstanceFromAndUnwrap(self, assemblyFile: str, typeName: str) -> object: ...
    @overload
    def CreateInstanceFromAndUnwrap(self, assemblyFile: str, typeName: str, activationAttributes: Array[object]) -> object: ...
    @overload
    def CreateInstanceFromAndUnwrap(self, assemblyFile: str, typeName: str, ignoreCase: bool, bindingAttr: Reflection.BindingFlags, binder: Reflection.Binder, args: Array[object], culture: Globalization.CultureInfo, activationAttributes: Array[object]) -> object: ...
    @overload
    def ExecuteAssembly(self, assemblyFile: str) -> int: ...
    @overload
    def ExecuteAssembly(self, assemblyFile: str, args: Array[str]) -> int: ...
    @overload
    def ExecuteAssemblyByName(self, assemblyName: str) -> int: ...
    @overload
    def ExecuteAssemblyByName(self, assemblyName: Reflection.AssemblyName, args: Array[str]) -> int: ...
    @overload
    def ExecuteAssemblyByName(self, assemblyName: str, args: Array[str]) -> int: ...
    @property
    def BaseDirectory(self) -> str: ...
    @property
    def CurrentDomain(self) -> AppDomain: ...
    @property
    def DynamicDirectory(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def Id(self) -> int: ...
    @property
    def IsFullyTrusted(self) -> bool: ...
    @property
    def IsHomogenous(self) -> bool: ...
    @property
    def MonitoringIsEnabled(self) -> bool: ...
    @property
    def MonitoringSurvivedMemorySize(self) -> Int64: ...
    @property
    def MonitoringSurvivedProcessMemorySize(self) -> Int64: ...
    @property
    def MonitoringTotalAllocatedMemorySize(self) -> Int64: ...
    @property
    def MonitoringTotalProcessorTime(self) -> TimeSpan: ...
    @property
    def PermissionSet(self) -> Security.PermissionSet: ...
    @property
    def RelativeSearchPath(self) -> str: ...
    @property
    def SetupInformation(self) -> AppDomainSetup: ...
    @property
    def ShadowCopyFiles(self) -> bool: ...
    @overload
    def GetAssemblies() -> Reflection.Array[Reflection.Assembly]: ...
    @overload
    def GetData(self, name: str) -> object: ...
    @overload
    def IsCompatibilitySwitchSet(self, value: str) -> Nullable: ...
    @overload
    def IsDefaultAppDomain() -> bool: ...
    @overload
    def IsFinalizingForUnload() -> bool: ...
    @overload
    def Load(self, rawAssembly: Array[Byte]) -> Reflection.Assembly: ...
    @overload
    def Load(self, assemblyRef: Reflection.AssemblyName) -> Reflection.Assembly: ...
    @overload
    def Load(self, assemblyString: str) -> Reflection.Assembly: ...
    @overload
    def Load(self, rawAssembly: Array[Byte], rawSymbolStore: Array[Byte]) -> Reflection.Assembly: ...
    @overload
    def ReflectionOnlyGetAssemblies() -> Reflection.Array[Reflection.Assembly]: ...
    @MonitoringIsEnabled.setter
    def MonitoringIsEnabled(self, value: Void): ...
    @overload
    def SetData(self, name: str, data: object) -> None: ...
    @overload
    def SetPrincipalPolicy(self, policy: Principal.PrincipalPolicy) -> None: ...
    @overload
    def SetThreadPrincipal(self, principal: Principal.IPrincipal) -> None: ...
    @overload
    def ToString() -> str: ...
    @property
    def UnhandledException(self): ...
    @property
    def DomainUnload(self): ...
    @property
    def FirstChanceException(self): ...
    @property
    def ProcessExit(self): ...
    @property
    def AssemblyLoad(self): ...
    @property
    def AssemblyResolve(self): ...
    @property
    def ReflectionOnlyAssemblyResolve(self): ...
    @property
    def TypeResolve(self): ...
    @property
    def ResourceResolve(self): ...

class AppDomainSetup(object):
    """    """
    @property
    def ApplicationBase(self) -> str: ...
    @property
    def TargetFrameworkName(self) -> str: ...

class AppDomainUnloadedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ApplicationException(Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ApplicationId(object):
    """    """
    def __init__(self, publicKeyToken: Array[Byte], name: str, version: Version, processorArchitecture: str, culture: str): ...
    @overload
    def Copy() -> ApplicationId: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Culture(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProcessorArchitecture(self) -> str: ...
    @property
    def PublicKeyToken(self) -> Array[Byte]: ...
    @property
    def Version(self) -> Version: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ArgumentException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, paramName: str): ...
    @overload
    def __init__(self, message: str, paramName: str, innerException: Exception): ...
    @property
    def Message(self) -> str: ...
    @property
    def ParamName(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def ThrowIfNullOrEmpty(argument: str, paramName: str) -> None: ...

class ArgumentNullException(ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, paramName: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, paramName: str, message: str): ...
    @overload
    @staticmethod
    def ThrowIfNull(argument: Void, paramName: str) -> None: ...
    @overload
    @staticmethod
    def ThrowIfNull(argument: object, paramName: str) -> None: ...

class ArgumentOutOfRangeException(ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, paramName: str): ...
    @overload
    def __init__(self, paramName: str, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, paramName: str, actualValue: object, message: str): ...
    @property
    def ActualValue(self) -> object: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ArithmeticException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ArraySegment(ValueType):
    """    ArraySegment[T]
    """
    @overload
    def __init__(self, array: Array[T]): ...
    @overload
    def __init__(self, array: Array[T], offset: int, count: int): ...
    @overload
    def CopyTo(self, destination: ArraySegment) -> None: ...
    @overload
    def CopyTo(self, destination: Array[T]) -> None: ...
    @overload
    def CopyTo(self, destination: Array[T], destinationIndex: int) -> None: ...
    @overload
    def Equals(self, obj: ArraySegment) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Array(self) -> Array[T]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Empty(self) -> ArraySegment: ...
    @property
    def Item(self) -> T: ...
    @property
    def Offset(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def GetHashCode() -> int: ...
    @Item.setter
    def Item(self, value: Void): ...
    @overload
    def Slice(self, index: int) -> ArraySegment: ...
    @overload
    def Slice(self, index: int, count: int) -> ArraySegment: ...
    @overload
    def ToArray() -> Array[T]: ...

class Enumerator(ValueType):
    """    Enumerator[T]
    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> T: ...
    @overload
    def MoveNext() -> bool: ...

class ArrayTypeMismatchException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class AssemblyLoadEventArgs(EventArgs):
    """    """
    def __init__(self, loadedAssembly: Reflection.Assembly): ...
    @property
    def LoadedAssembly(self) -> Reflection.Assembly: ...

class AssemblyLoadEventHandler(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, args: AssemblyLoadEventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, args: AssemblyLoadEventArgs) -> None: ...

class AsyncCallback(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, ar: IAsyncResult, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, ar: IAsyncResult) -> None: ...

class AttributeTargets(enum.Enum):
    Assembly = 1
    Module = 2
    Class = 4
    Struct = 8
    Enum = 16
    Constructor = 32
    Method = 64
    Property = 128
    Field = 256
    Event = 512
    Interface = 1024
    Parameter = 2048
    Delegate = 4096
    ReturnValue = 8192
    GenericParameter = 16384
    All = 32767

class AttributeUsageAttribute(Attribute):
    """    """
    def __init__(self, validOn: AttributeTargets): ...
    @property
    def AllowMultiple(self) -> bool: ...
    @property
    def Inherited(self) -> bool: ...
    @property
    def ValidOn(self) -> AttributeTargets: ...
    @AllowMultiple.setter
    def AllowMultiple(self, value: Void): ...
    @Inherited.setter
    def Inherited(self, value: Void): ...

class BitConverter(object):
    """    """
    @property
    def IsLittleEndian(self) -> bool: ...
    @overload
    @staticmethod
    def DoubleToInt64Bits(value: float) -> Int64: ...
    @overload
    @staticmethod
    def DoubleToUInt64Bits(value: float) -> UInt64: ...
    @overload
    @staticmethod
    def GetBytes(value: bool) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: Char) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: Int16) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: int) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: float) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: Int64) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: Single) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: UInt16) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: Half) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: UInt32) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetBytes(value: UInt64) -> Array[Byte]: ...
    @overload
    @staticmethod
    def HalfToInt16Bits(value: Half) -> Int16: ...
    @overload
    @staticmethod
    def HalfToUInt16Bits(value: Half) -> UInt16: ...
    @overload
    @staticmethod
    def Int16BitsToHalf(value: Int16) -> Half: ...
    @overload
    @staticmethod
    def Int32BitsToSingle(value: int) -> Single: ...
    @overload
    @staticmethod
    def Int64BitsToDouble(value: Int64) -> float: ...
    @overload
    @staticmethod
    def SingleToInt32Bits(value: Single) -> int: ...
    @overload
    @staticmethod
    def SingleToUInt32Bits(value: Single) -> UInt32: ...
    @overload
    @staticmethod
    def ToBoolean(value: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Array[Byte], startIndex: int) -> bool: ...
    @overload
    @staticmethod
    def ToChar(value: ReadOnlySpan) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Array[Byte], startIndex: int) -> Char: ...
    @overload
    @staticmethod
    def ToDouble(value: ReadOnlySpan) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Array[Byte], startIndex: int) -> float: ...
    @overload
    @staticmethod
    def ToHalf(value: ReadOnlySpan) -> Half: ...
    @overload
    @staticmethod
    def ToHalf(value: Array[Byte], startIndex: int) -> Half: ...
    @overload
    @staticmethod
    def ToInt16(value: ReadOnlySpan) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Array[Byte], startIndex: int) -> Int16: ...
    @overload
    @staticmethod
    def ToInt32(value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Array[Byte], startIndex: int) -> int: ...
    @overload
    @staticmethod
    def ToInt64(value: ReadOnlySpan) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Array[Byte], startIndex: int) -> Int64: ...
    @overload
    @staticmethod
    def ToSingle(value: ReadOnlySpan) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Array[Byte], startIndex: int) -> Single: ...
    @overload
    @staticmethod
    def ToString(value: Array[Byte]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Array[Byte], startIndex: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Array[Byte], startIndex: int, length: int) -> str: ...
    @overload
    @staticmethod
    def ToUInt16(value: ReadOnlySpan) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Array[Byte], startIndex: int) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt32(value: ReadOnlySpan) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Array[Byte], startIndex: int) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt64(value: ReadOnlySpan) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Array[Byte], startIndex: int) -> UInt64: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: UInt16) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: Half) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: Int64) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: Single) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: bool) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: int) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: float) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: Int16) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: Char) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: UInt32) -> bool: ...
    @overload
    @staticmethod
    def TryWriteBytes(destination: Span, value: UInt64) -> bool: ...
    @overload
    @staticmethod
    def UInt16BitsToHalf(value: UInt16) -> Half: ...
    @overload
    @staticmethod
    def UInt32BitsToSingle(value: UInt32) -> Single: ...
    @overload
    @staticmethod
    def UInt64BitsToDouble(value: UInt64) -> float: ...

class bool(ValueType):
    """    """
    @property
    def TrueString(self) -> str: ...
    @property
    def FalseString(self) -> str: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, value: bool) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: bool) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def Parse(value: str) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: ReadOnlySpan) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def TryFormat(self, destination: Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(value: str) -> (bool, bool): ...
    @overload
    @staticmethod
    def TryParse(value: ReadOnlySpan) -> (bool, bool): ...

class Byte(ValueType):
    """    """
    @property
    def MaxValue(self) -> Byte: ...
    @property
    def MinValue(self) -> Byte: ...
    @overload
    @staticmethod
    def Clamp(value: Byte, min_: Byte, max_: Byte) -> Byte: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Byte) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Byte: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Byte: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Byte: ...
    @overload
    @staticmethod
    def DivRem(left: Byte, right: Byte) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Byte) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Byte) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Byte) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Byte) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Log2(value: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Max(x: Byte, y: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Min(x: Byte, y: Byte) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def PopCount(value: Byte) -> Byte: ...
    @overload
    @staticmethod
    def RotateLeft(value: Byte, rotateAmount: int) -> Byte: ...
    @overload
    @staticmethod
    def RotateRight(value: Byte, rotateAmount: int) -> Byte: ...
    @overload
    @staticmethod
    def Sign(value: Byte) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: Byte) -> Byte: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Byte): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Byte): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Byte): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Byte): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Byte): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Byte): ...

class CannotUnloadAppDomainException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class Char(ValueType):
    """    """
    @property
    def MaxValue(self) -> Char: ...
    @property
    def MinValue(self) -> Char: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Char) -> int: ...
    @overload
    @staticmethod
    def ConvertFromUtf32(utf32: int) -> str: ...
    @overload
    @staticmethod
    def ConvertToUtf32(highSurrogate: Char, lowSurrogate: Char) -> int: ...
    @overload
    @staticmethod
    def ConvertToUtf32(s: str, index: int) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Char) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetNumericValue(c: Char) -> float: ...
    @overload
    @staticmethod
    def GetNumericValue(s: str, index: int) -> float: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(c: Char) -> Globalization.UnicodeCategory: ...
    @overload
    @staticmethod
    def GetUnicodeCategory(s: str, index: int) -> Globalization.UnicodeCategory: ...
    @overload
    @staticmethod
    def IsAscii(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiDigit(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiHexDigit(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiHexDigitLower(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiHexDigitUpper(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiLetter(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiLetterLower(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiLetterOrDigit(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsAsciiLetterUpper(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsBetween(c: Char, minInclusive: Char, maxInclusive: Char) -> bool: ...
    @overload
    @staticmethod
    def IsControl(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsControl(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsDigit(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsDigit(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsHighSurrogate(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsHighSurrogate(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsLetter(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsLetter(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsLetterOrDigit(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsLetterOrDigit(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsLower(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsLower(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsLowSurrogate(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsLowSurrogate(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsNumber(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsNumber(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuation(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsPunctuation(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsSeparator(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsSeparator(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsSurrogate(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsSurrogate(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsSurrogatePair(highSurrogate: Char, lowSurrogate: Char) -> bool: ...
    @overload
    @staticmethod
    def IsSurrogatePair(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsSymbol(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsSymbol(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsUpper(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsUpper(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def IsWhiteSpace(c: Char) -> bool: ...
    @overload
    @staticmethod
    def IsWhiteSpace(s: str, index: int) -> bool: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Char: ...
    @overload
    @staticmethod
    def ToLower(c: Char) -> Char: ...
    @overload
    @staticmethod
    def ToLower(c: Char, culture: Globalization.CultureInfo) -> Char: ...
    @overload
    @staticmethod
    def ToLowerInvariant(c: Char) -> Char: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(c: Char) -> str: ...
    @overload
    @staticmethod
    def ToUpper(c: Char) -> Char: ...
    @overload
    @staticmethod
    def ToUpper(c: Char, culture: Globalization.CultureInfo) -> Char: ...
    @overload
    @staticmethod
    def ToUpperInvariant(c: Char) -> Char: ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Char): ...

class CharEnumerator(object):
    """    """
    @overload
    def Clone() -> object: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Char: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class CLSCompliantAttribute(Attribute):
    """    """
    def __init__(self, isCompliant: bool): ...
    @property
    def IsCompliant(self) -> bool: ...

class ContextBoundObject(MarshalByRefObject):
    """    """

class ContextMarshalException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class ContextStaticAttribute(Attribute):
    """    """
    def __init__(self): ...

class Convert(object):
    """    """
    @property
    def DBNull(self) -> object: ...
    @overload
    @staticmethod
    def ChangeType(value: object, typeCode: TypeCode) -> object: ...
    @overload
    @staticmethod
    def ChangeType(value: object, conversionType: Type) -> object: ...
    @overload
    @staticmethod
    def ChangeType(value: object, typeCode: TypeCode, provider: IFormatProvider) -> object: ...
    @overload
    @staticmethod
    def ChangeType(value: object, conversionType: Type, provider: IFormatProvider) -> object: ...
    @overload
    @staticmethod
    def FromBase64CharArray(inArray: Array[Char], offset: int, length: int) -> Array[Byte]: ...
    @overload
    @staticmethod
    def FromBase64String(s: str) -> Array[Byte]: ...
    @overload
    @staticmethod
    def FromHexString(chars: ReadOnlySpan) -> Array[Byte]: ...
    @overload
    @staticmethod
    def FromHexString(s: str) -> Array[Byte]: ...
    @overload
    @staticmethod
    def GetTypeCode(value: object) -> TypeCode: ...
    @overload
    @staticmethod
    def IsDBNull(value: object) -> bool: ...
    @overload
    @staticmethod
    def ToBase64CharArray(inArray: Array[Byte], offsetIn: int, length: int, outArray: Array[Char], offsetOut: int) -> int: ...
    @overload
    @staticmethod
    def ToBase64CharArray(inArray: Array[Byte], offsetIn: int, length: int, outArray: Array[Char], offsetOut: int, options: Base64FormattingOptions) -> int: ...
    @overload
    @staticmethod
    def ToBase64String(inArray: Array[Byte]) -> str: ...
    @overload
    @staticmethod
    def ToBase64String(bytes_: ReadOnlySpan, options: Base64FormattingOptions) -> str: ...
    @overload
    @staticmethod
    def ToBase64String(inArray: Array[Byte], options: Base64FormattingOptions) -> str: ...
    @overload
    @staticmethod
    def ToBase64String(inArray: Array[Byte], offset: int, length: int) -> str: ...
    @overload
    @staticmethod
    def ToBase64String(inArray: Array[Byte], offset: int, length: int, options: Base64FormattingOptions) -> str: ...
    @overload
    @staticmethod
    def ToBoolean(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: bool) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: object) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Byte) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: UInt16) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: int) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: UInt32) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: UInt64) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: DateTime) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: str) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Single) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: float) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Decimal) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: Char) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: object, provider: IFormatProvider) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(value: str, provider: IFormatProvider) -> bool: ...
    @overload
    @staticmethod
    def ToByte(value: DateTime) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: bool) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Byte) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Char) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: SByte) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Int16) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: UInt16) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Int64) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: UInt64) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Single) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: float) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: Decimal) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: str) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: object) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: UInt32) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: int) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: str, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: str, fromBase: int) -> Byte: ...
    @overload
    @staticmethod
    def ToByte(value: object, provider: IFormatProvider) -> Byte: ...
    @overload
    @staticmethod
    def ToChar(value: Char) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Byte) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Int16) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: UInt16) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: int) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: UInt32) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Int64) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: bool) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: UInt64) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Single) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: float) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: object) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: Decimal) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: DateTime) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: str) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: SByte) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: str, provider: IFormatProvider) -> Char: ...
    @overload
    @staticmethod
    def ToChar(value: object, provider: IFormatProvider) -> Char: ...
    @overload
    @staticmethod
    def ToDateTime(value: Char) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: bool) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: object) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: UInt64) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: Single) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: float) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: Int64) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: str) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: UInt32) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: int) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: UInt16) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: Decimal) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: Int16) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: Byte) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: SByte) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: object, provider: IFormatProvider) -> DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(value: str, provider: IFormatProvider) -> DateTime: ...
    @overload
    @staticmethod
    def ToDecimal(value: Int16) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: UInt64) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: Byte) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: SByte) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: object) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: UInt16) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: int) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: UInt32) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: Int64) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: Single) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: float) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: str) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: bool) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: Decimal) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: Char) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: DateTime) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: object, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def ToDecimal(value: str, provider: IFormatProvider) -> Decimal: ...
    @overload
    @staticmethod
    def ToDouble(value: DateTime) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: bool) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: str) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Decimal) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: float) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Single) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: UInt64) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Int64) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: UInt32) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: int) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: UInt16) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Char) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Int16) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: Byte) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: SByte) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: object) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: object, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: str, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def ToHexString(bytes_: ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def ToHexString(inArray: Array[Byte]) -> str: ...
    @overload
    @staticmethod
    def ToHexString(inArray: Array[Byte], offset: int, length: int) -> str: ...
    @overload
    @staticmethod
    def ToInt16(value: float) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: UInt64) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Int64) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: UInt32) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: UInt16) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Decimal) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Byte) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: SByte) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Char) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: bool) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: object) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: int) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: str) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: Single) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: DateTime) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: str, fromBase: int) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: object, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def ToInt16(value: str, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def ToInt32(value: Decimal) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: str) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: DateTime) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: UInt64) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Int64) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: UInt32) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: int) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Int16) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Byte) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: SByte) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Char) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: bool) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: object) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: Single) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: UInt16) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: float) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: object, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: str, fromBase: int) -> int: ...
    @overload
    @staticmethod
    def ToInt32(value: str, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def ToInt64(value: DateTime) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: object) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: bool) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Char) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: SByte) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Int16) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: UInt16) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: int) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: UInt32) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: UInt64) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Single) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: float) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Decimal) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: str) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: Byte) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: str, fromBase: int) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: object, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def ToInt64(value: str, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def ToSByte(value: UInt16) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Decimal) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: float) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Int64) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: UInt32) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: int) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Int16) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Byte) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Char) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: bool) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: object) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: Single) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: str) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: DateTime) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: UInt64) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: object, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: str, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def ToSByte(value: str, fromBase: int) -> SByte: ...
    @overload
    @staticmethod
    def ToSingle(value: object) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: bool) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Byte) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Char) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Int16) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: UInt16) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: DateTime) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: int) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: SByte) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Int64) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: UInt32) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Single) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: float) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: Decimal) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: str) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: UInt64) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: str, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def ToSingle(value: object, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def ToString(value: UInt32) -> str: ...
    @overload
    @staticmethod
    def ToString(value: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: UInt16) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int64) -> str: ...
    @overload
    @staticmethod
    def ToString(value: SByte) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Byte) -> str: ...
    @overload
    @staticmethod
    def ToString(value: object) -> str: ...
    @overload
    @staticmethod
    def ToString(value: bool) -> str: ...
    @overload
    @staticmethod
    def ToString(value: UInt64) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int16) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Single) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Char) -> str: ...
    @overload
    @staticmethod
    def ToString(value: str) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Decimal) -> str: ...
    @overload
    @staticmethod
    def ToString(value: DateTime) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @overload
    @staticmethod
    def ToString(value: bool, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: object, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int64, toBase: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Char, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: int, toBase: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: SByte, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Byte, toBase: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Byte, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Single, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: UInt16, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: DateTime, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: int, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: UInt32, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Decimal, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int64, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: UInt64, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int16, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Int16, toBase: int) -> str: ...
    @overload
    @staticmethod
    def ToUInt16(value: UInt64) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: bool) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Char) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: SByte) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Byte) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Int16) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: int) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: UInt32) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Int64) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: object) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Single) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: float) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: Decimal) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: str) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: DateTime) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: object, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: str, fromBase: int) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt16(value: str, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def ToUInt32(value: object) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: str) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Decimal) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: float) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Single) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: UInt64) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Int64) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: DateTime) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: UInt16) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Int16) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: int) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Byte) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: SByte) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: bool) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: Char) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: object, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: str, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt32(value: str, fromBase: int) -> UInt32: ...
    @overload
    @staticmethod
    def ToUInt64(value: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Int16) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: UInt16) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: int) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: UInt32) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: SByte) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Int64) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Byte) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Single) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: str) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: float) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Decimal) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: DateTime) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: object) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: bool) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: Char) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: str, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: object, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def ToUInt64(value: str, fromBase: int) -> UInt64: ...
    @overload
    @staticmethod
    def TryFromBase64Chars(chars: ReadOnlySpan, bytes_: Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryFromBase64String(s: str, bytes_: Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryToBase64Chars(bytes_: ReadOnlySpan, chars: Span, options: Base64FormattingOptions) -> (bool, int): ...

class Base64FormattingOptions(enum.Enum):
    None_ = 0
    InsertLineBreaks = 1

class DataMisalignedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class DateOnly(ValueType):
    """    """
    @overload
    def __init__(self, year: int, month: int, day: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, calendar: Globalization.Calendar): ...
    @overload
    def AddDays(self, value: int) -> DateOnly: ...
    @overload
    def AddMonths(self, value: int) -> DateOnly: ...
    @overload
    def AddYears(self, value: int) -> DateOnly: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: DateOnly) -> int: ...
    @overload
    def Equals(self, value: DateOnly) -> bool: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    @staticmethod
    def FromDateTime(dateTime: DateTime) -> DateOnly: ...
    @overload
    @staticmethod
    def FromDayNumber(dayNumber: int) -> DateOnly: ...
    @property
    def Day(self) -> int: ...
    @property
    def DayNumber(self) -> int: ...
    @property
    def DayOfWeek(self) -> DayOfWeek: ...
    @property
    def DayOfYear(self) -> int: ...
    @property
    def MaxValue(self) -> DateOnly: ...
    @property
    def MinValue(self) -> DateOnly: ...
    @property
    def Month(self) -> int: ...
    @property
    def Year(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(s: str) -> DateOnly: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> DateOnly: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> DateOnly: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, formats: Array[str]) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, formats: Array[str]) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateOnly: ...
    @overload
    def ToDateTime(self, time: TimeOnly) -> DateTime: ...
    @overload
    def ToDateTime(self, time: TimeOnly, kind: DateTimeKind) -> DateTime: ...
    @overload
    def ToLongDateString() -> str: ...
    @overload
    def ToShortDateString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, formats: Array[str]) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, format_: str) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, formats: Array[str]) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, format_: ReadOnlySpan) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateOnly): ...

class DateTime(ValueType):
    """    """
    @overload
    def __init__(self, ticks: Int64): ...
    @overload
    def __init__(self, ticks: Int64, kind: DateTimeKind): ...
    @overload
    def __init__(self, year: int, month: int, day: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, calendar: Globalization.Calendar): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, kind: DateTimeKind): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, calendar: Globalization.Calendar): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, kind: DateTimeKind): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, calendar: Globalization.Calendar): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, calendar: Globalization.Calendar, kind: DateTimeKind): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int, kind: DateTimeKind): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int, calendar: Globalization.Calendar): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int, calendar: Globalization.Calendar, kind: DateTimeKind): ...
    @property
    def MinValue(self) -> DateTime: ...
    @property
    def MaxValue(self) -> DateTime: ...
    @property
    def UnixEpoch(self) -> DateTime: ...
    @overload
    def Add(self, value: TimeSpan) -> DateTime: ...
    @overload
    def AddDays(self, value: float) -> DateTime: ...
    @overload
    def AddHours(self, value: float) -> DateTime: ...
    @overload
    def AddMicroseconds(self, value: float) -> DateTime: ...
    @overload
    def AddMilliseconds(self, value: float) -> DateTime: ...
    @overload
    def AddMinutes(self, value: float) -> DateTime: ...
    @overload
    def AddMonths(self, months: int) -> DateTime: ...
    @overload
    def AddSeconds(self, value: float) -> DateTime: ...
    @overload
    def AddTicks(self, value: Int64) -> DateTime: ...
    @overload
    def AddYears(self, value: int) -> DateTime: ...
    @overload
    @staticmethod
    def Compare(t1: DateTime, t2: DateTime) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: DateTime) -> int: ...
    @overload
    @staticmethod
    def DaysInMonth(year: int, month: int) -> int: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def Equals(self, value: DateTime) -> bool: ...
    @overload
    @staticmethod
    def Equals(t1: DateTime, t2: DateTime) -> bool: ...
    @overload
    @staticmethod
    def FromBinary(dateData: Int64) -> DateTime: ...
    @overload
    @staticmethod
    def FromFileTime(fileTime: Int64) -> DateTime: ...
    @overload
    @staticmethod
    def FromFileTimeUtc(fileTime: Int64) -> DateTime: ...
    @overload
    @staticmethod
    def FromOADate(d: float) -> DateTime: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def Day(self) -> int: ...
    @property
    def DayOfWeek(self) -> DayOfWeek: ...
    @property
    def DayOfYear(self) -> int: ...
    @property
    def Hour(self) -> int: ...
    @property
    def Kind(self) -> DateTimeKind: ...
    @property
    def Microsecond(self) -> int: ...
    @property
    def Millisecond(self) -> int: ...
    @property
    def Minute(self) -> int: ...
    @property
    def Month(self) -> int: ...
    @property
    def Nanosecond(self) -> int: ...
    @property
    def Now(self) -> DateTime: ...
    @property
    def Second(self) -> int: ...
    @property
    def Ticks(self) -> Int64: ...
    @property
    def TimeOfDay(self) -> TimeSpan: ...
    @property
    def Today(self) -> DateTime: ...
    @property
    def UtcNow(self) -> DateTime: ...
    @property
    def Year(self) -> int: ...
    @overload
    def GetDateTimeFormats() -> Array[str]: ...
    @overload
    def GetDateTimeFormats(self, provider: IFormatProvider) -> Array[str]: ...
    @overload
    def GetDateTimeFormats(self, format_: Char) -> Array[str]: ...
    @overload
    def GetDateTimeFormats(self, format_: Char, provider: IFormatProvider) -> Array[str]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    def IsDaylightSavingTime() -> bool: ...
    @overload
    @staticmethod
    def IsLeapYear(year: int) -> bool: ...
    @overload
    @staticmethod
    def Parse(s: str) -> DateTime: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> DateTime: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> DateTime: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str, provider: IFormatProvider) -> DateTime: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def ParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> DateTime: ...
    @overload
    @staticmethod
    def SpecifyKind(value: DateTime, kind: DateTimeKind) -> DateTime: ...
    @overload
    def Subtract(self, value: DateTime) -> TimeSpan: ...
    @overload
    def Subtract(self, value: TimeSpan) -> DateTime: ...
    @overload
    def ToBinary() -> Int64: ...
    @overload
    def ToFileTime() -> Int64: ...
    @overload
    def ToFileTimeUtc() -> Int64: ...
    @overload
    def ToLocalTime() -> DateTime: ...
    @overload
    def ToLongDateString() -> str: ...
    @overload
    def ToLongTimeString() -> str: ...
    @overload
    def ToOADate() -> float: ...
    @overload
    def ToShortDateString() -> str: ...
    @overload
    def ToShortTimeString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    def ToUniversalTime() -> DateTime: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateTime): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, DateTime): ...

class DateTimeKind(enum.Enum):
    Unspecified = 0
    Utc = 1
    Local = 2

class DateTimeOffset(ValueType):
    """    """
    @overload
    def __init__(self, dateTime: DateTime): ...
    @overload
    def __init__(self, ticks: Int64, offset: TimeSpan): ...
    @overload
    def __init__(self, dateTime: DateTime, offset: TimeSpan): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, offset: TimeSpan): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, offset: TimeSpan): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, calendar: Globalization.Calendar, offset: TimeSpan): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int, offset: TimeSpan): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, microsecond: int, calendar: Globalization.Calendar, offset: TimeSpan): ...
    @property
    def MinValue(self) -> DateTimeOffset: ...
    @property
    def MaxValue(self) -> DateTimeOffset: ...
    @property
    def UnixEpoch(self) -> DateTimeOffset: ...
    @overload
    def Add(self, timeSpan: TimeSpan) -> DateTimeOffset: ...
    @overload
    def AddDays(self, days: float) -> DateTimeOffset: ...
    @overload
    def AddHours(self, hours: float) -> DateTimeOffset: ...
    @overload
    def AddMicroseconds(self, microseconds: float) -> DateTimeOffset: ...
    @overload
    def AddMilliseconds(self, milliseconds: float) -> DateTimeOffset: ...
    @overload
    def AddMinutes(self, minutes: float) -> DateTimeOffset: ...
    @overload
    def AddMonths(self, months: int) -> DateTimeOffset: ...
    @overload
    def AddSeconds(self, seconds: float) -> DateTimeOffset: ...
    @overload
    def AddTicks(self, ticks: Int64) -> DateTimeOffset: ...
    @overload
    def AddYears(self, years: int) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def Compare(first: DateTimeOffset, second: DateTimeOffset) -> int: ...
    @overload
    def CompareTo(self, other: DateTimeOffset) -> int: ...
    @overload
    def Equals(self, other: DateTimeOffset) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Equals(first: DateTimeOffset, second: DateTimeOffset) -> bool: ...
    @overload
    def EqualsExact(self, other: DateTimeOffset) -> bool: ...
    @overload
    @staticmethod
    def FromFileTime(fileTime: Int64) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def FromUnixTimeMilliseconds(milliseconds: Int64) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def FromUnixTimeSeconds(seconds: Int64) -> DateTimeOffset: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def DateTime(self) -> DateTime: ...
    @property
    def Day(self) -> int: ...
    @property
    def DayOfWeek(self) -> DayOfWeek: ...
    @property
    def DayOfYear(self) -> int: ...
    @property
    def Hour(self) -> int: ...
    @property
    def LocalDateTime(self) -> DateTime: ...
    @property
    def Microsecond(self) -> int: ...
    @property
    def Millisecond(self) -> int: ...
    @property
    def Minute(self) -> int: ...
    @property
    def Month(self) -> int: ...
    @property
    def Nanosecond(self) -> int: ...
    @property
    def Now(self) -> DateTimeOffset: ...
    @property
    def Offset(self) -> TimeSpan: ...
    @property
    def Second(self) -> int: ...
    @property
    def Ticks(self) -> Int64: ...
    @property
    def TimeOfDay(self) -> TimeSpan: ...
    @property
    def UtcDateTime(self) -> DateTime: ...
    @property
    def UtcNow(self) -> DateTimeOffset: ...
    @property
    def UtcTicks(self) -> Int64: ...
    @property
    def Year(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(input_: str) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def Parse(input_: str, formatProvider: IFormatProvider) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def Parse(input_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def Parse(input_: str, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, format_: str, formatProvider: IFormatProvider) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ParseExact(input_: ReadOnlySpan, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, format_: str, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> DateTimeOffset: ...
    @overload
    def Subtract(self, value: TimeSpan) -> DateTimeOffset: ...
    @overload
    def Subtract(self, value: DateTimeOffset) -> TimeSpan: ...
    @overload
    def ToFileTime() -> Int64: ...
    @overload
    def ToLocalTime() -> DateTimeOffset: ...
    @overload
    def ToOffset(self, offset: TimeSpan) -> DateTimeOffset: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, formatProvider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: IFormatProvider) -> str: ...
    @overload
    def ToUniversalTime() -> DateTimeOffset: ...
    @overload
    def ToUnixTimeMilliseconds() -> Int64: ...
    @overload
    def ToUnixTimeSeconds() -> Int64: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, formatProvider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(input_: ReadOnlySpan) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParse(input_: str) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParse(input_: str, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParse(input_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, format_: str, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.DateTimeStyles) -> (bool, DateTimeOffset): ...

class DayOfWeek(enum.Enum):
    Sunday = 0
    Monday = 1
    Tuesday = 2
    Wednesday = 3
    Thursday = 4
    Friday = 5
    Saturday = 6

class DBNull(object):
    """    """
    @property
    def Value(self) -> DBNull: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...

class DivideByZeroException(ArithmeticException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class DllNotFoundException(TypeLoadException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class float(ValueType):
    """    """
    @property
    def MinValue(self) -> float: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def Epsilon(self) -> float: ...
    @property
    def NegativeInfinity(self) -> float: ...
    @property
    def PositiveInfinity(self) -> float: ...
    @property
    def NaN(self) -> float: ...
    @property
    def NegativeZero(self) -> float: ...
    @property
    def E(self) -> float: ...
    @property
    def Pi(self) -> float: ...
    @property
    def Tau(self) -> float: ...
    @overload
    @staticmethod
    def Abs(value: float) -> float: ...
    @overload
    @staticmethod
    def Acos(x: float) -> float: ...
    @overload
    @staticmethod
    def Acosh(x: float) -> float: ...
    @overload
    @staticmethod
    def AcosPi(x: float) -> float: ...
    @overload
    @staticmethod
    def Asin(x: float) -> float: ...
    @overload
    @staticmethod
    def Asinh(x: float) -> float: ...
    @overload
    @staticmethod
    def AsinPi(x: float) -> float: ...
    @overload
    @staticmethod
    def Atan(x: float) -> float: ...
    @overload
    @staticmethod
    def Atan2(y: float, x: float) -> float: ...
    @overload
    @staticmethod
    def Atan2Pi(y: float, x: float) -> float: ...
    @overload
    @staticmethod
    def Atanh(x: float) -> float: ...
    @overload
    @staticmethod
    def AtanPi(x: float) -> float: ...
    @overload
    @staticmethod
    def BitDecrement(x: float) -> float: ...
    @overload
    @staticmethod
    def BitIncrement(x: float) -> float: ...
    @overload
    @staticmethod
    def Cbrt(x: float) -> float: ...
    @overload
    @staticmethod
    def Ceiling(x: float) -> float: ...
    @overload
    @staticmethod
    def Clamp(value: float, min_: float, max_: float) -> float: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: float) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: float, sign: float) -> float: ...
    @overload
    @staticmethod
    def Cos(x: float) -> float: ...
    @overload
    @staticmethod
    def Cosh(x: float) -> float: ...
    @overload
    @staticmethod
    def CosPi(x: float) -> float: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> float: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> float: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> float: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: float) -> bool: ...
    @overload
    @staticmethod
    def Exp(x: float) -> float: ...
    @overload
    @staticmethod
    def Exp10(x: float) -> float: ...
    @overload
    @staticmethod
    def Exp10M1(x: float) -> float: ...
    @overload
    @staticmethod
    def Exp2(x: float) -> float: ...
    @overload
    @staticmethod
    def Exp2M1(x: float) -> float: ...
    @overload
    @staticmethod
    def ExpM1(x: float) -> float: ...
    @overload
    @staticmethod
    def Floor(x: float) -> float: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(left: float, right: float, addend: float) -> float: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def Hypot(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Ieee754Remainder(left: float, right: float) -> float: ...
    @overload
    @staticmethod
    def ILogB(x: float) -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(d: float) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: float) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(d: float) -> bool: ...
    @overload
    @staticmethod
    def Log(x: float) -> float: ...
    @overload
    @staticmethod
    def Log(x: float, newBase: float) -> float: ...
    @overload
    @staticmethod
    def Log10(x: float) -> float: ...
    @overload
    @staticmethod
    def Log10P1(x: float) -> float: ...
    @overload
    @staticmethod
    def Log2(value: float) -> float: ...
    @overload
    @staticmethod
    def Log2P1(x: float) -> float: ...
    @overload
    @staticmethod
    def LogP1(x: float) -> float: ...
    @overload
    @staticmethod
    def Max(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MaxMagnitudeNumber(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MaxNumber(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Min(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MinMagnitude(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MinMagnitudeNumber(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def MinNumber(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def Parse(s: str) -> float: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> float: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> float: ...
    @overload
    @staticmethod
    def Pow(x: float, y: float) -> float: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: float) -> float: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: float) -> float: ...
    @overload
    @staticmethod
    def RootN(x: float, n: int) -> float: ...
    @overload
    @staticmethod
    def Round(x: float) -> float: ...
    @overload
    @staticmethod
    def Round(x: float, digits: int) -> float: ...
    @overload
    @staticmethod
    def Round(x: float, mode: MidpointRounding) -> float: ...
    @overload
    @staticmethod
    def Round(x: float, digits: int, mode: MidpointRounding) -> float: ...
    @overload
    @staticmethod
    def ScaleB(x: float, n: int) -> float: ...
    @overload
    @staticmethod
    def Sign(value: float) -> int: ...
    @overload
    @staticmethod
    def Sin(x: float) -> float: ...
    @overload
    @staticmethod
    def SinCos(x: float) -> ValueTuple: ...
    @overload
    @staticmethod
    def SinCosPi(x: float) -> ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(x: float) -> float: ...
    @overload
    @staticmethod
    def SinPi(x: float) -> float: ...
    @overload
    @staticmethod
    def Sqrt(x: float) -> float: ...
    @overload
    @staticmethod
    def Tan(x: float) -> float: ...
    @overload
    @staticmethod
    def Tanh(x: float) -> float: ...
    @overload
    @staticmethod
    def TanPi(x: float) -> float: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Truncate(x: float) -> float: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, float): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, float): ...

class DuplicateWaitObjectException(ArgumentException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parameterName: str): ...
    @overload
    def __init__(self, parameterName: str, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class EntryPointNotFoundException(TypeLoadException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class EnvironmentVariableTarget(enum.Enum):
    Process = 0
    User = 1
    Machine = 2

class EventArgs(object):
    """    """
    def __init__(self): ...
    @property
    def Empty(self) -> EventArgs: ...

class EventHandler(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: EventArgs) -> None: ...

class EventHandler(MulticastDelegate):
    """    EventHandler[TEventArgs]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: TEventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: TEventArgs) -> None: ...

class FieldAccessException(MemberAccessException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class FlagsAttribute(Attribute):
    """    """
    def __init__(self): ...

class FormatException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class FormattableString(object):
    """    """
    @overload
    @staticmethod
    def CurrentCulture(formattable: FormattableString) -> str: ...
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Format(self) -> str: ...
    @overload
    def GetArgument(self, index: int) -> object: ...
    @overload
    def GetArguments() -> Array[object]: ...
    @overload
    @staticmethod
    def Invariant(formattable: FormattableString) -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, formatProvider: IFormatProvider) -> str: ...

class Func(MulticastDelegate):
    """    Func[TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke() -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg: T, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg: T) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15) -> TResult: ...

class Func(MulticastDelegate):
    """    Func[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult]
    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> TResult: ...
    @overload
    def Invoke(self, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16) -> TResult: ...

class GCGenerationInfo(ValueType):
    """    """
    @property
    def FragmentationAfterBytes(self) -> Int64: ...
    @property
    def FragmentationBeforeBytes(self) -> Int64: ...
    @property
    def SizeAfterBytes(self) -> Int64: ...
    @property
    def SizeBeforeBytes(self) -> Int64: ...

class GCKind(enum.Enum):
    Any = 0
    Ephemeral = 1
    FullBlocking = 2
    Background = 3

class GCMemoryInfo(ValueType):
    """    """
    @property
    def Compacted(self) -> bool: ...
    @property
    def Concurrent(self) -> bool: ...
    @property
    def FinalizationPendingCount(self) -> Int64: ...
    @property
    def FragmentedBytes(self) -> Int64: ...
    @property
    def Generation(self) -> int: ...
    @property
    def GenerationInfo(self) -> ReadOnlySpan: ...
    @property
    def HeapSizeBytes(self) -> Int64: ...
    @property
    def HighMemoryLoadThresholdBytes(self) -> Int64: ...
    @property
    def Index(self) -> Int64: ...
    @property
    def MemoryLoadBytes(self) -> Int64: ...
    @property
    def PauseDurations(self) -> ReadOnlySpan: ...
    @property
    def PauseTimePercentage(self) -> float: ...
    @property
    def PinnedObjectsCount(self) -> Int64: ...
    @property
    def PromotedBytes(self) -> Int64: ...
    @property
    def TotalAvailableMemoryBytes(self) -> Int64: ...
    @property
    def TotalCommittedBytes(self) -> Int64: ...

class Guid(ValueType):
    """    """
    @overload
    def __init__(self, b: Array[Byte]): ...
    @overload
    def __init__(self, b: ReadOnlySpan): ...
    @overload
    def __init__(self, g: str): ...
    @overload
    def __init__(self, a: int, b: Int16, c: Int16, d: Array[Byte]): ...
    @overload
    def __init__(self, a: UInt32, b: UInt16, c: UInt16, d: Byte, e: Byte, f: Byte, g: Byte, h: Byte, i: Byte, j: Byte, k: Byte): ...
    @overload
    def __init__(self, a: int, b: Int16, c: Int16, d: Byte, e: Byte, f: Byte, g: Byte, h: Byte, i: Byte, j: Byte, k: Byte): ...
    @property
    def Empty(self) -> Guid: ...
    @overload
    def CompareTo(self, value: Guid) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def Equals(self, g: Guid) -> bool: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def NewGuid() -> Guid: ...
    @overload
    @staticmethod
    def Parse(input_: str) -> Guid: ...
    @overload
    @staticmethod
    def Parse(input_: ReadOnlySpan) -> Guid: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Guid: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Guid: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, format_: str) -> Guid: ...
    @overload
    @staticmethod
    def ParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan) -> Guid: ...
    @overload
    def ToByteArray() -> Array[Byte]: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(input_: str) -> (bool, Guid): ...
    @overload
    @staticmethod
    def TryParse(input_: ReadOnlySpan) -> (bool, Guid): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Guid): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Guid): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan) -> (bool, Guid): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, format_: str) -> (bool, Guid): ...
    @overload
    def TryWriteBytes(self, destination: Span) -> bool: ...

class Half(ValueType):
    """    """
    @overload
    @staticmethod
    def Abs(value: Half) -> Half: ...
    @overload
    @staticmethod
    def Acos(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Acosh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def AcosPi(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Asin(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Asinh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def AsinPi(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Atan(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Atan2(y: Half, x: Half) -> Half: ...
    @overload
    @staticmethod
    def Atan2Pi(y: Half, x: Half) -> Half: ...
    @overload
    @staticmethod
    def Atanh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def AtanPi(x: Half) -> Half: ...
    @overload
    @staticmethod
    def BitDecrement(x: Half) -> Half: ...
    @overload
    @staticmethod
    def BitIncrement(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Cbrt(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Ceiling(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Clamp(value: Half, min_: Half, max_: Half) -> Half: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Half) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Half, sign: Half) -> Half: ...
    @overload
    @staticmethod
    def Cos(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Cosh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def CosPi(x: Half) -> Half: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Half: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Half: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Half: ...
    @overload
    def Equals(self, other: Half) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Exp(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Exp10(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Exp10M1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Exp2(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Exp2M1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def ExpM1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Floor(x: Half) -> Half: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(left: Half, right: Half, addend: Half) -> Half: ...
    @property
    def E(self) -> Half: ...
    @property
    def Epsilon(self) -> Half: ...
    @property
    def MaxValue(self) -> Half: ...
    @property
    def MinValue(self) -> Half: ...
    @property
    def MultiplicativeIdentity(self) -> Half: ...
    @property
    def NaN(self) -> Half: ...
    @property
    def NegativeInfinity(self) -> Half: ...
    @property
    def NegativeOne(self) -> Half: ...
    @property
    def NegativeZero(self) -> Half: ...
    @property
    def One(self) -> Half: ...
    @property
    def Pi(self) -> Half: ...
    @property
    def PositiveInfinity(self) -> Half: ...
    @property
    def Tau(self) -> Half: ...
    @property
    def Zero(self) -> Half: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Hypot(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def Ieee754Remainder(left: Half, right: Half) -> Half: ...
    @overload
    @staticmethod
    def ILogB(x: Half) -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: Half) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(value: Half) -> bool: ...
    @overload
    @staticmethod
    def Log(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Log(x: Half, newBase: Half) -> Half: ...
    @overload
    @staticmethod
    def Log10(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Log10P1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Log2(value: Half) -> Half: ...
    @overload
    @staticmethod
    def Log2P1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def LogP1(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Max(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MaxMagnitudeNumber(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MaxNumber(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def Min(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MinMagnitudeNumber(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def MinNumber(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Half: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Half: ...
    @overload
    @staticmethod
    def Pow(x: Half, y: Half) -> Half: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: Half) -> Half: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: Half) -> Half: ...
    @overload
    @staticmethod
    def RootN(x: Half, n: int) -> Half: ...
    @overload
    @staticmethod
    def Round(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Round(x: Half, mode: MidpointRounding) -> Half: ...
    @overload
    @staticmethod
    def Round(x: Half, digits: int) -> Half: ...
    @overload
    @staticmethod
    def Round(x: Half, digits: int, mode: MidpointRounding) -> Half: ...
    @overload
    @staticmethod
    def ScaleB(x: Half, n: int) -> Half: ...
    @overload
    @staticmethod
    def Sign(value: Half) -> int: ...
    @overload
    @staticmethod
    def Sin(x: Half) -> Half: ...
    @overload
    @staticmethod
    def SinCos(x: Half) -> ValueTuple: ...
    @overload
    @staticmethod
    def SinCosPi(x: Half) -> ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def SinPi(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Sqrt(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Tan(x: Half) -> Half: ...
    @overload
    @staticmethod
    def Tanh(x: Half) -> Half: ...
    @overload
    @staticmethod
    def TanPi(x: Half) -> Half: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Truncate(x: Half) -> Half: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Half): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Half): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Half): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Half): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Half): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Half): ...

class HashCode(ValueType):
    """    """
    @overload
    def Add(self, value: T) -> None: ...
    @overload
    def Add(self, value: T, comparer: Generic.IEqualityComparer) -> None: ...
    @overload
    def AddBytes(self, value: ReadOnlySpan) -> None: ...
    @overload
    @staticmethod
    def Combine(value1: T1) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3, value4: T4) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3, value4: T4, value5: T5) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3, value4: T4, value5: T5, value6: T6) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3, value4: T4, value5: T5, value6: T6, value7: T7) -> int: ...
    @overload
    @staticmethod
    def Combine(value1: T1, value2: T2, value3: T3, value4: T4, value5: T5, value6: T6, value7: T7, value8: T8) -> int: ...
    @overload
    def ToHashCode() -> int: ...

class IAsyncDisposable:
    """    """
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...

class IAsyncResult:
    """    """
    @property
    def AsyncState(self) -> object: ...
    @property
    def AsyncWaitHandle(self) -> Threading.WaitHandle: ...
    @property
    def CompletedSynchronously(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...

class ICloneable:
    """    """
    @overload
    def Clone() -> object: ...

class IComparable:
    """    """
    @overload
    def CompareTo(self, obj: object) -> int: ...

class IComparable:
    """    IComparable[T]
    """
    @overload
    def CompareTo(self, other: T) -> int: ...

class IConvertible:
    """    """
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    def ToBoolean(self, provider: IFormatProvider) -> bool: ...
    @overload
    def ToByte(self, provider: IFormatProvider) -> Byte: ...
    @overload
    def ToChar(self, provider: IFormatProvider) -> Char: ...
    @overload
    def ToDateTime(self, provider: IFormatProvider) -> DateTime: ...
    @overload
    def ToDecimal(self, provider: IFormatProvider) -> Decimal: ...
    @overload
    def ToDouble(self, provider: IFormatProvider) -> float: ...
    @overload
    def ToInt16(self, provider: IFormatProvider) -> Int16: ...
    @overload
    def ToInt32(self, provider: IFormatProvider) -> int: ...
    @overload
    def ToInt64(self, provider: IFormatProvider) -> Int64: ...
    @overload
    def ToSByte(self, provider: IFormatProvider) -> SByte: ...
    @overload
    def ToSingle(self, provider: IFormatProvider) -> Single: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToType(self, conversionType: Type, provider: IFormatProvider) -> object: ...
    @overload
    def ToUInt16(self, provider: IFormatProvider) -> UInt16: ...
    @overload
    def ToUInt32(self, provider: IFormatProvider) -> UInt32: ...
    @overload
    def ToUInt64(self, provider: IFormatProvider) -> UInt64: ...

class ICustomFormatter:
    """    """
    @overload
    def Format(self, format_: str, arg: object, formatProvider: IFormatProvider) -> str: ...

class IDisposable:
    """    """
    @overload
    def Dispose() -> None: ...

class IEquatable:
    """    IEquatable[T]
    """
    @overload
    def Equals(self, other: T) -> bool: ...

class IFormatProvider:
    """    """
    @overload
    def GetFormat(self, formatType: Type) -> object: ...

class IFormattable:
    """    """
    @overload
    def ToString(self, format_: str, formatProvider: IFormatProvider) -> str: ...

class Index(ValueType):
    """    """
    def __init__(self, value: int, fromEnd: bool): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def Equals(self, other: Index) -> bool: ...
    @overload
    @staticmethod
    def FromEnd(value: int) -> Index: ...
    @overload
    @staticmethod
    def FromStart(value: int) -> Index: ...
    @property
    def End(self) -> Index: ...
    @property
    def IsFromEnd(self) -> bool: ...
    @property
    def Start(self) -> Index: ...
    @property
    def Value(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetOffset(self, length: int) -> int: ...
    @overload
    def ToString() -> str: ...

class IndexOutOfRangeException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class InsufficientExecutionStackException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class InsufficientMemoryException(OutOfMemoryException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class Int16(ValueType):
    """    """
    @property
    def MaxValue(self) -> Int16: ...
    @property
    def MinValue(self) -> Int16: ...
    @overload
    @staticmethod
    def Abs(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Clamp(value: Int16, min_: Int16, max_: Int16) -> Int16: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Int16) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Int16, sign: Int16) -> Int16: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Int16: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Int16: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Int16: ...
    @overload
    @staticmethod
    def DivRem(left: Int16, right: Int16) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Int16) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Int16) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Log2(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Max(x: Int16, y: Int16) -> Int16: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Int16, y: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Min(x: Int16, y: Int16) -> Int16: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Int16, y: Int16) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int16: ...
    @overload
    @staticmethod
    def PopCount(value: Int16) -> Int16: ...
    @overload
    @staticmethod
    def RotateLeft(value: Int16, rotateAmount: int) -> Int16: ...
    @overload
    @staticmethod
    def RotateRight(value: Int16, rotateAmount: int) -> Int16: ...
    @overload
    @staticmethod
    def Sign(value: Int16) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: Int16) -> Int16: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Int16): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Int16): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Int16): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Int16): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int16): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int16): ...

class int(ValueType):
    """    """
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @overload
    @staticmethod
    def Abs(value: int) -> int: ...
    @overload
    @staticmethod
    def Clamp(value: int, min_: int, max_: int) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: int) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: int, sign: int) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> int: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> int: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> int: ...
    @overload
    @staticmethod
    def DivRem(left: int, right: int) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: int) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: int) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: int) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: int) -> int: ...
    @overload
    @staticmethod
    def Log2(value: int) -> int: ...
    @overload
    @staticmethod
    def Max(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def Min(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def MinMagnitude(x: int, y: int) -> int: ...
    @overload
    @staticmethod
    def Parse(s: str) -> int: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> int: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> int: ...
    @overload
    @staticmethod
    def PopCount(value: int) -> int: ...
    @overload
    @staticmethod
    def RotateLeft(value: int, rotateAmount: int) -> int: ...
    @overload
    @staticmethod
    def RotateRight(value: int, rotateAmount: int) -> int: ...
    @overload
    @staticmethod
    def Sign(value: int) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: int) -> int: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, int): ...

class Int64(ValueType):
    """    """
    @property
    def MaxValue(self) -> Int64: ...
    @property
    def MinValue(self) -> Int64: ...
    @overload
    @staticmethod
    def Abs(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Clamp(value: Int64, min_: Int64, max_: Int64) -> Int64: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Int64) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Int64, sign: Int64) -> Int64: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Int64: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Int64: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Int64: ...
    @overload
    @staticmethod
    def DivRem(left: Int64, right: Int64) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Int64) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Int64) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Log2(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Max(x: Int64, y: Int64) -> Int64: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Int64, y: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Min(x: Int64, y: Int64) -> Int64: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Int64, y: Int64) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int64: ...
    @overload
    @staticmethod
    def PopCount(value: Int64) -> Int64: ...
    @overload
    @staticmethod
    def RotateLeft(value: Int64, rotateAmount: int) -> Int64: ...
    @overload
    @staticmethod
    def RotateRight(value: Int64, rotateAmount: int) -> Int64: ...
    @overload
    @staticmethod
    def Sign(value: Int64) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: Int64) -> Int64: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Int64): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Int64): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Int64): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Int64): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int64): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int64): ...

class Int128(ValueType):
    """    """
    def __init__(self, upper: UInt64, lower: UInt64): ...
    @overload
    @staticmethod
    def Abs(value: Int128) -> Int128: ...
    @overload
    @staticmethod
    def Clamp(value: Int128, min_: Int128, max_: Int128) -> Int128: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Int128) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Int128, sign: Int128) -> Int128: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Int128: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Int128: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Int128: ...
    @overload
    @staticmethod
    def DivRem(left: Int128, right: Int128) -> ValueTuple: ...
    @overload
    def Equals(self, other: Int128) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def MaxValue(self) -> Int128: ...
    @property
    def MinValue(self) -> Int128: ...
    @property
    def NegativeOne(self) -> Int128: ...
    @property
    def One(self) -> Int128: ...
    @property
    def Zero(self) -> Int128: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Int128) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: Int128) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Int128) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Int128) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Int128) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: Int128) -> Int128: ...
    @overload
    @staticmethod
    def Log2(value: Int128) -> Int128: ...
    @overload
    @staticmethod
    def Max(x: Int128, y: Int128) -> Int128: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Int128, y: Int128) -> Int128: ...
    @overload
    @staticmethod
    def Min(x: Int128, y: Int128) -> Int128: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Int128, y: Int128) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int128: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Int128: ...
    @overload
    @staticmethod
    def PopCount(value: Int128) -> Int128: ...
    @overload
    @staticmethod
    def RotateLeft(value: Int128, rotateAmount: int) -> Int128: ...
    @overload
    @staticmethod
    def RotateRight(value: Int128, rotateAmount: int) -> Int128: ...
    @overload
    @staticmethod
    def Sign(value: Int128) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: Int128) -> Int128: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Int128): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Int128): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Int128): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Int128): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int128): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Int128): ...

class IntPtr(ValueType):
    """    """
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: Void): ...
    @property
    def Zero(self) -> IntPtr: ...
    @overload
    @staticmethod
    def Abs(value: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Add(pointer: IntPtr, offset: int) -> IntPtr: ...
    @overload
    @staticmethod
    def Clamp(value: IntPtr, min_: IntPtr, max_: IntPtr) -> IntPtr: ...
    @overload
    def CompareTo(self, value: IntPtr) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: IntPtr, sign: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> IntPtr: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> IntPtr: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> IntPtr: ...
    @overload
    @staticmethod
    def DivRem(left: IntPtr, right: IntPtr) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: IntPtr) -> bool: ...
    @property
    def MaxValue(self) -> IntPtr: ...
    @property
    def MinValue(self) -> IntPtr: ...
    @property
    def Size(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: IntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: IntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: IntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: IntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: IntPtr) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Log2(value: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Max(x: IntPtr, y: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: IntPtr, y: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Min(x: IntPtr, y: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def MinMagnitude(x: IntPtr, y: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> IntPtr: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> IntPtr: ...
    @overload
    @staticmethod
    def PopCount(value: IntPtr) -> IntPtr: ...
    @overload
    @staticmethod
    def RotateLeft(value: IntPtr, rotateAmount: int) -> IntPtr: ...
    @overload
    @staticmethod
    def RotateRight(value: IntPtr, rotateAmount: int) -> IntPtr: ...
    @overload
    @staticmethod
    def Sign(value: IntPtr) -> int: ...
    @overload
    @staticmethod
    def Subtract(pointer: IntPtr, offset: int) -> IntPtr: ...
    @overload
    def ToInt32() -> int: ...
    @overload
    def ToInt64() -> Int64: ...
    @overload
    def ToPointer() -> Void: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: IntPtr) -> IntPtr: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, IntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, IntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, IntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, IntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, IntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, IntPtr): ...

class InvalidCastException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...

class InvalidOperationException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class InvalidProgramException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class InvalidTimeZoneException(Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class IObservable:
    """    IObservable[T]
    """
    @overload
    def Subscribe(self, observer: IObserver) -> IDisposable: ...

class IObserver:
    """    IObserver[T]
    """
    @overload
    def OnCompleted() -> None: ...
    @overload
    def OnError(self, error: Exception) -> None: ...
    @overload
    def OnNext(self, value: T) -> None: ...

class IProgress:
    """    IProgress[T]
    """
    @overload
    def Report(self, value: T) -> None: ...

class ISpanFormattable:
    """    """
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...

class Lazy(object):
    """    Lazy[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: T): ...
    @overload
    def __init__(self, valueFactory: Func): ...
    @overload
    def __init__(self, isThreadSafe: bool): ...
    @overload
    def __init__(self, mode: Threading.LazyThreadSafetyMode): ...
    @overload
    def __init__(self, valueFactory: Func, isThreadSafe: bool): ...
    @overload
    def __init__(self, valueFactory: Func, mode: Threading.LazyThreadSafetyMode): ...
    @property
    def IsValueCreated(self) -> bool: ...
    @property
    def Value(self) -> T: ...
    @overload
    def ToString() -> str: ...

class Lazy(Lazy):
    """    Lazy[T, TMetadata]
    """
    @overload
    def __init__(self, metadata: TMetadata): ...
    @overload
    def __init__(self, valueFactory: Func, metadata: TMetadata): ...
    @overload
    def __init__(self, metadata: TMetadata, isThreadSafe: bool): ...
    @overload
    def __init__(self, metadata: TMetadata, mode: Threading.LazyThreadSafetyMode): ...
    @overload
    def __init__(self, valueFactory: Func, metadata: TMetadata, isThreadSafe: bool): ...
    @overload
    def __init__(self, valueFactory: Func, metadata: TMetadata, mode: Threading.LazyThreadSafetyMode): ...
    @property
    def Metadata(self) -> TMetadata: ...

class LoaderOptimization(enum.Enum):
    NotSpecified = 0
    SingleDomain = 1
    MultiDomain = 2
    DomainMask = 3
    MultiDomainHost = 3
    DisallowBindings = 4

class LoaderOptimizationAttribute(Attribute):
    """    """
    @overload
    def __init__(self, value: Byte): ...
    @overload
    def __init__(self, value: LoaderOptimization): ...
    @property
    def Value(self) -> LoaderOptimization: ...

class LocalDataStoreSlot(object):
    """    """

class MarshalByRefObject(object):
    """    """

class MemberAccessException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class Memory(ValueType):
    """    Memory[T]
    """
    @overload
    def __init__(self, array: Array[T]): ...
    @overload
    def __init__(self, array: Array[T], start: int, length: int): ...
    @overload
    def CopyTo(self, destination: Memory) -> None: ...
    @overload
    def Equals(self, other: Memory) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Empty(self) -> Memory: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Span(self) -> Span: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Pin() -> Buffers.MemoryHandle: ...
    @overload
    def Slice(self, start: int) -> Memory: ...
    @overload
    def Slice(self, start: int, length: int) -> Memory: ...
    @overload
    def ToArray() -> Array[T]: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryCopyTo(self, destination: Memory) -> bool: ...

class MemoryExtensions(object):
    """    """
    @overload
    @staticmethod
    def AsMemory(array: Array[T]) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(segment: ArraySegment) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(text: str) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def AsMemory(array: Array[T], startIndex: Index) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(text: str, range_: Range) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def AsMemory(array: Array[T], start: int) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(text: str, start: int) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def AsMemory(text: str, startIndex: Index) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def AsMemory(segment: ArraySegment, start: int) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(array: Array[T], range_: Range) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(text: str, start: int, length: int) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def AsMemory(array: Array[T], start: int, length: int) -> Memory: ...
    @overload
    @staticmethod
    def AsMemory(segment: ArraySegment, start: int, length: int) -> Memory: ...
    @overload
    @staticmethod
    def AsSpan(text: str) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def AsSpan(array: Array[T]) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(segment: ArraySegment) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(array: Array[T], start: int) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(segment: ArraySegment, start: int) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(segment: ArraySegment, startIndex: Index) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(text: str, start: int) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def AsSpan(array: Array[T], range_: Range) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(array: Array[T], startIndex: Index) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(segment: ArraySegment, range_: Range) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(segment: ArraySegment, start: int, length: int) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(array: Array[T], start: int, length: int) -> Span: ...
    @overload
    @staticmethod
    def AsSpan(text: str, start: int, length: int) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def BinarySearch(span: Span, comparable: IComparable) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(span: ReadOnlySpan, comparable: TComparable) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(span: ReadOnlySpan, comparable: IComparable) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(span: Span, comparable: TComparable) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(span: ReadOnlySpan, value: T, comparer: TComparer) -> int: ...
    @overload
    @staticmethod
    def BinarySearch(span: Span, value: T, comparer: TComparer) -> int: ...
    @overload
    @staticmethod
    def CommonPrefixLength(span: Span, other: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def CommonPrefixLength(span: ReadOnlySpan, other: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def CommonPrefixLength(span: Span, other: ReadOnlySpan, comparer: Generic.IEqualityComparer) -> int: ...
    @overload
    @staticmethod
    def CommonPrefixLength(span: ReadOnlySpan, other: ReadOnlySpan, comparer: Generic.IEqualityComparer) -> int: ...
    @overload
    @staticmethod
    def CompareTo(span: ReadOnlySpan, other: ReadOnlySpan, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def Contains(span: Span, value: T) -> bool: ...
    @overload
    @staticmethod
    def Contains(span: ReadOnlySpan, value: T) -> bool: ...
    @overload
    @staticmethod
    def Contains(span: ReadOnlySpan, value: ReadOnlySpan, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def CopyTo(source: Array[T], destination: Span) -> None: ...
    @overload
    @staticmethod
    def CopyTo(source: Array[T], destination: Memory) -> None: ...
    @overload
    @staticmethod
    def EndsWith(span: ReadOnlySpan, value: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def EndsWith(span: Span, value: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def EndsWith(span: ReadOnlySpan, value: ReadOnlySpan, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def EnumerateLines(span: ReadOnlySpan) -> Text.SpanLineEnumerator: ...
    @overload
    @staticmethod
    def EnumerateLines(span: Span) -> Text.SpanLineEnumerator: ...
    @overload
    @staticmethod
    def EnumerateRunes(span: ReadOnlySpan) -> Text.SpanRuneEnumerator: ...
    @overload
    @staticmethod
    def EnumerateRunes(span: Span) -> Text.SpanRuneEnumerator: ...
    @overload
    @staticmethod
    def Equals(span: ReadOnlySpan, other: ReadOnlySpan, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def IndexOf(span: Span, value: T) -> int: ...
    @overload
    @staticmethod
    def IndexOf(span: Span, value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOf(span: ReadOnlySpan, value: T) -> int: ...
    @overload
    @staticmethod
    def IndexOf(span: ReadOnlySpan, value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOf(span: ReadOnlySpan, value: ReadOnlySpan, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: Span, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: ReadOnlySpan, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: Span, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: ReadOnlySpan, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: Span, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAny(span: ReadOnlySpan, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: Span, value: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: ReadOnlySpan, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: ReadOnlySpan, value: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: Span, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: ReadOnlySpan, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: Span, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: Span, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def IndexOfAnyExcept(span: ReadOnlySpan, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def IsWhiteSpace(span: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def LastIndexOf(span: Span, value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(span: Span, value: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(span: ReadOnlySpan, value: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(span: ReadOnlySpan, value: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOf(span: ReadOnlySpan, value: ReadOnlySpan, comparisonType: StringComparison) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: Span, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: ReadOnlySpan, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: Span, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: ReadOnlySpan, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: ReadOnlySpan, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAny(span: Span, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: Span, value: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: ReadOnlySpan, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: Span, values: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: ReadOnlySpan, value: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: ReadOnlySpan, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: Span, value0: T, value1: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: Span, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def LastIndexOfAnyExcept(span: ReadOnlySpan, value0: T, value1: T, value2: T) -> int: ...
    @overload
    @staticmethod
    def Overlaps(span: ReadOnlySpan, other: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def Overlaps(span: Span, other: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def Overlaps(span: Span, other: ReadOnlySpan) -> (bool, int): ...
    @overload
    @staticmethod
    def Overlaps(span: ReadOnlySpan, other: ReadOnlySpan) -> (bool, int): ...
    @overload
    @staticmethod
    def Reverse(span: Span) -> None: ...
    @overload
    @staticmethod
    def SequenceCompareTo(span: Span, other: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def SequenceCompareTo(span: ReadOnlySpan, other: ReadOnlySpan) -> int: ...
    @overload
    @staticmethod
    def SequenceEqual(span: ReadOnlySpan, other: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(span: Span, other: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(span: Span, other: ReadOnlySpan, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def SequenceEqual(span: ReadOnlySpan, other: ReadOnlySpan, comparer: Generic.IEqualityComparer) -> bool: ...
    @overload
    @staticmethod
    def Sort(span: Span) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Span, items: Span) -> None: ...
    @overload
    @staticmethod
    def Sort(span: Span, comparison: Comparison) -> None: ...
    @overload
    @staticmethod
    def Sort(span: Span, comparer: TComparer) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Span, items: Span, comparison: Comparison) -> None: ...
    @overload
    @staticmethod
    def Sort(keys: Span, items: Span, comparer: TComparer) -> None: ...
    @overload
    @staticmethod
    def StartsWith(span: ReadOnlySpan, value: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def StartsWith(span: Span, value: ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def StartsWith(span: ReadOnlySpan, value: ReadOnlySpan, comparisonType: StringComparison) -> bool: ...
    @overload
    @staticmethod
    def ToLower(source: ReadOnlySpan, destination: Span, culture: Globalization.CultureInfo) -> int: ...
    @overload
    @staticmethod
    def ToLowerInvariant(source: ReadOnlySpan, destination: Span) -> int: ...
    @overload
    @staticmethod
    def ToUpper(source: ReadOnlySpan, destination: Span, culture: Globalization.CultureInfo) -> int: ...
    @overload
    @staticmethod
    def ToUpperInvariant(source: ReadOnlySpan, destination: Span) -> int: ...
    @overload
    @staticmethod
    def Trim(memory: Memory) -> Memory: ...
    @overload
    @staticmethod
    def Trim(span: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def Trim(span: Span) -> Span: ...
    @overload
    @staticmethod
    def Trim(memory: ReadOnlyMemory) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def Trim(span: Span, trimElements: ReadOnlySpan) -> Span: ...
    @overload
    @staticmethod
    def Trim(memory: ReadOnlyMemory, trimElements: ReadOnlySpan) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def Trim(memory: Memory, trimElements: ReadOnlySpan) -> Memory: ...
    @overload
    @staticmethod
    def Trim(span: ReadOnlySpan, trimChar: Char) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def Trim(memory: ReadOnlyMemory, trimElement: T) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def Trim(span: Span, trimElement: T) -> Span: ...
    @overload
    @staticmethod
    def Trim(span: ReadOnlySpan, trimChars: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def Trim(memory: Memory, trimElement: T) -> Memory: ...
    @overload
    @staticmethod
    def Trim(span: ReadOnlySpan, trimElement: T) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def Trim(span: ReadOnlySpan, trimElements: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(memory: ReadOnlyMemory) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimEnd(span: Span) -> Span: ...
    @overload
    @staticmethod
    def TrimEnd(memory: Memory) -> Memory: ...
    @overload
    @staticmethod
    def TrimEnd(span: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(span: ReadOnlySpan, trimElements: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(span: ReadOnlySpan, trimChar: Char) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(memory: ReadOnlyMemory, trimElements: ReadOnlySpan) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimEnd(span: ReadOnlySpan, trimChars: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(memory: Memory, trimElements: ReadOnlySpan) -> Memory: ...
    @overload
    @staticmethod
    def TrimEnd(span: ReadOnlySpan, trimElement: T) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimEnd(span: Span, trimElement: T) -> Span: ...
    @overload
    @staticmethod
    def TrimEnd(memory: ReadOnlyMemory, trimElement: T) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimEnd(memory: Memory, trimElement: T) -> Memory: ...
    @overload
    @staticmethod
    def TrimEnd(span: Span, trimElements: ReadOnlySpan) -> Span: ...
    @overload
    @staticmethod
    def TrimStart(memory: Memory) -> Memory: ...
    @overload
    @staticmethod
    def TrimStart(memory: ReadOnlyMemory) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimStart(span: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimStart(span: Span) -> Span: ...
    @overload
    @staticmethod
    def TrimStart(span: ReadOnlySpan, trimChars: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimStart(memory: ReadOnlyMemory, trimElements: ReadOnlySpan) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimStart(span: ReadOnlySpan, trimElements: ReadOnlySpan) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimStart(span: Span, trimElements: ReadOnlySpan) -> Span: ...
    @overload
    @staticmethod
    def TrimStart(memory: Memory, trimElements: ReadOnlySpan) -> Memory: ...
    @overload
    @staticmethod
    def TrimStart(span: ReadOnlySpan, trimElement: T) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TrimStart(span: Span, trimElement: T) -> Span: ...
    @overload
    @staticmethod
    def TrimStart(memory: ReadOnlyMemory, trimElement: T) -> ReadOnlyMemory: ...
    @overload
    @staticmethod
    def TrimStart(memory: Memory, trimElement: T) -> Memory: ...
    @overload
    @staticmethod
    def TrimStart(span: ReadOnlySpan, trimChar: Char) -> ReadOnlySpan: ...
    @overload
    @staticmethod
    def TryWrite(destination: Span) -> (bool, TryWriteInterpolatedStringHandler, int): ...
    @overload
    @staticmethod
    def TryWrite(destination: Span, provider: IFormatProvider) -> (bool, TryWriteInterpolatedStringHandler, int): ...

class MethodAccessException(MemberAccessException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class MidpointRounding(enum.Enum):
    ToEven = 0
    AwayFromZero = 1
    ToZero = 2
    ToNegativeInfinity = 3
    ToPositiveInfinity = 4

class MissingFieldException(MissingMemberException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, className: str, fieldName: str): ...
    @property
    def Message(self) -> str: ...

class MissingMemberException(MemberAccessException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, className: str, memberName: str): ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class MissingMethodException(MissingMemberException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, className: str, methodName: str): ...
    @property
    def Message(self) -> str: ...

class MulticastNotSupportedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class NonSerializedAttribute(Attribute):
    """    """
    def __init__(self): ...

class NotFiniteNumberException(ArithmeticException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, offendingNumber: float): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, offendingNumber: float): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, offendingNumber: float, innerException: Exception): ...
    @property
    def OffendingNumber(self) -> float: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class NotImplementedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class NotSupportedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class Nullable(ValueType):
    """    Nullable[T]
    """
    def __init__(self, value: T): ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def Value(self) -> T: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetValueOrDefault() -> T: ...
    @overload
    def GetValueOrDefault(self, defaultValue: T) -> T: ...
    @overload
    def ToString() -> str: ...

class Nullable(object):
    """    """
    @overload
    @staticmethod
    def Compare(n1: Nullable, n2: Nullable) -> int: ...
    @overload
    @staticmethod
    def Equals(n1: Nullable, n2: Nullable) -> bool: ...
    @overload
    @staticmethod
    def GetUnderlyingType(nullableType: Type) -> Type: ...
    @overload
    @staticmethod
    def GetValueRefOrDefaultRef() -> (T, Nullable): ...

class NullReferenceException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ObjectDisposedException(InvalidOperationException):
    """    """
    @overload
    def __init__(self, objectName: str): ...
    @overload
    def __init__(self, objectName: str, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Message(self) -> str: ...
    @property
    def ObjectName(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def ThrowIf(condition: bool, type_: Type) -> None: ...
    @overload
    @staticmethod
    def ThrowIf(condition: bool, instance: object) -> None: ...

class ObsoleteAttribute(Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, error: bool): ...
    @property
    def DiagnosticId(self) -> str: ...
    @property
    def IsError(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def UrlFormat(self) -> str: ...
    @DiagnosticId.setter
    def DiagnosticId(self, value: Void): ...
    @UrlFormat.setter
    def UrlFormat(self, value: Void): ...

class OperatingSystem(object):
    """    """
    def __init__(self, platform: PlatformID, version: Version): ...
    @overload
    def Clone() -> object: ...
    @property
    def Platform(self) -> PlatformID: ...
    @property
    def ServicePack(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @property
    def VersionString(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    @staticmethod
    def IsAndroid() -> bool: ...
    @overload
    @staticmethod
    def IsAndroidVersionAtLeast(major: int, minor: int, build: int, revision: int) -> bool: ...
    @overload
    @staticmethod
    def IsBrowser() -> bool: ...
    @overload
    @staticmethod
    def IsFreeBSD() -> bool: ...
    @overload
    @staticmethod
    def IsFreeBSDVersionAtLeast(major: int, minor: int, build: int, revision: int) -> bool: ...
    @overload
    @staticmethod
    def IsIOS() -> bool: ...
    @overload
    @staticmethod
    def IsIOSVersionAtLeast(major: int, minor: int, build: int) -> bool: ...
    @overload
    @staticmethod
    def IsLinux() -> bool: ...
    @overload
    @staticmethod
    def IsMacCatalyst() -> bool: ...
    @overload
    @staticmethod
    def IsMacCatalystVersionAtLeast(major: int, minor: int, build: int) -> bool: ...
    @overload
    @staticmethod
    def IsMacOS() -> bool: ...
    @overload
    @staticmethod
    def IsMacOSVersionAtLeast(major: int, minor: int, build: int) -> bool: ...
    @overload
    @staticmethod
    def IsOSPlatform(platform: str) -> bool: ...
    @overload
    @staticmethod
    def IsOSPlatformVersionAtLeast(platform: str, major: int, minor: int, build: int, revision: int) -> bool: ...
    @overload
    @staticmethod
    def IsTvOS() -> bool: ...
    @overload
    @staticmethod
    def IsTvOSVersionAtLeast(major: int, minor: int, build: int) -> bool: ...
    @overload
    @staticmethod
    def IsWatchOS() -> bool: ...
    @overload
    @staticmethod
    def IsWatchOSVersionAtLeast(major: int, minor: int, build: int) -> bool: ...
    @overload
    @staticmethod
    def IsWindows() -> bool: ...
    @overload
    @staticmethod
    def IsWindowsVersionAtLeast(major: int, minor: int, build: int, revision: int) -> bool: ...
    @overload
    def ToString() -> str: ...

class OperationCanceledException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, token: Threading.CancellationToken): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, token: Threading.CancellationToken): ...
    @overload
    def __init__(self, message: str, innerException: Exception, token: Threading.CancellationToken): ...
    @property
    def CancellationToken(self) -> Threading.CancellationToken: ...

class OutOfMemoryException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class OverflowException(ArithmeticException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ParamArrayAttribute(Attribute):
    """    """
    def __init__(self): ...

class PlatformID(enum.Enum):
    Win32S = 0
    Win32Windows = 1
    Win32NT = 2
    WinCE = 3
    Unix = 4
    Xbox = 5
    MacOSX = 6
    Other = 7

class PlatformNotSupportedException(NotSupportedException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class Progress(object):
    """    Progress[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: Action): ...
    @property
    def ProgressChanged(self): ...

class Random(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, Seed: int): ...
    @property
    def Shared(self) -> Random: ...
    @overload
    def Next() -> int: ...
    @overload
    def Next(self, maxValue: int) -> int: ...
    @overload
    def Next(self, minValue: int, maxValue: int) -> int: ...
    @overload
    def NextBytes(self, buffer: Array[Byte]) -> None: ...
    @overload
    def NextBytes(self, buffer: Span) -> None: ...
    @overload
    def NextDouble() -> float: ...
    @overload
    def NextInt64() -> Int64: ...
    @overload
    def NextInt64(self, maxValue: Int64) -> Int64: ...
    @overload
    def NextInt64(self, minValue: Int64, maxValue: Int64) -> Int64: ...
    @overload
    def NextSingle() -> Single: ...

class Range(ValueType):
    """    """
    def __init__(self, start: Index, end: Index): ...
    @overload
    @staticmethod
    def EndAt(end: Index) -> Range: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def Equals(self, other: Range) -> bool: ...
    @property
    def All(self) -> Range: ...
    @property
    def End(self) -> Index: ...
    @property
    def Start(self) -> Index: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetOffsetAndLength(self, length: int) -> ValueTuple: ...
    @overload
    @staticmethod
    def StartAt(start: Index) -> Range: ...
    @overload
    def ToString() -> str: ...

class RankException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class ReadOnlyMemory(ValueType):
    """    ReadOnlyMemory[T]
    """
    @overload
    def __init__(self, array: Array[T]): ...
    @overload
    def __init__(self, array: Array[T], start: int, length: int): ...
    @overload
    def CopyTo(self, destination: Memory) -> None: ...
    @overload
    def Equals(self, other: ReadOnlyMemory) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Empty(self) -> ReadOnlyMemory: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Span(self) -> ReadOnlySpan: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Pin() -> Buffers.MemoryHandle: ...
    @overload
    def Slice(self, start: int) -> ReadOnlyMemory: ...
    @overload
    def Slice(self, start: int, length: int) -> ReadOnlyMemory: ...
    @overload
    def ToArray() -> Array[T]: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryCopyTo(self, destination: Memory) -> bool: ...

class ResolveEventArgs(EventArgs):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, requestingAssembly: Reflection.Assembly): ...
    @property
    def Name(self) -> str: ...
    @property
    def RequestingAssembly(self) -> Reflection.Assembly: ...

class ResolveEventHandler(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, args: ResolveEventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> Reflection.Assembly: ...
    @overload
    def Invoke(self, sender: object, args: ResolveEventArgs) -> Reflection.Assembly: ...

class SByte(ValueType):
    """    """
    @property
    def MaxValue(self) -> SByte: ...
    @property
    def MinValue(self) -> SByte: ...
    @overload
    @staticmethod
    def Abs(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Clamp(value: SByte, min_: SByte, max_: SByte) -> SByte: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, value: SByte) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: SByte, sign: SByte) -> SByte: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> SByte: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> SByte: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> SByte: ...
    @overload
    @staticmethod
    def DivRem(left: SByte, right: SByte) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: SByte) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: SByte) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Log2(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Max(x: SByte, y: SByte) -> SByte: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: SByte, y: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Min(x: SByte, y: SByte) -> SByte: ...
    @overload
    @staticmethod
    def MinMagnitude(x: SByte, y: SByte) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: str) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> SByte: ...
    @overload
    @staticmethod
    def PopCount(value: SByte) -> SByte: ...
    @overload
    @staticmethod
    def RotateLeft(value: SByte, rotateAmount: int) -> SByte: ...
    @overload
    @staticmethod
    def RotateRight(value: SByte, rotateAmount: int) -> SByte: ...
    @overload
    @staticmethod
    def Sign(value: SByte) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: SByte) -> SByte: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, SByte): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, SByte): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, SByte): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, SByte): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, SByte): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, SByte): ...

class SerializableAttribute(Attribute):
    """    """
    def __init__(self): ...

class Single(ValueType):
    """    """
    @property
    def MinValue(self) -> Single: ...
    @property
    def MaxValue(self) -> Single: ...
    @property
    def Epsilon(self) -> Single: ...
    @property
    def NegativeInfinity(self) -> Single: ...
    @property
    def PositiveInfinity(self) -> Single: ...
    @property
    def NaN(self) -> Single: ...
    @property
    def NegativeZero(self) -> Single: ...
    @property
    def E(self) -> Single: ...
    @property
    def Pi(self) -> Single: ...
    @property
    def Tau(self) -> Single: ...
    @overload
    @staticmethod
    def Abs(value: Single) -> Single: ...
    @overload
    @staticmethod
    def Acos(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Acosh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def AcosPi(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Asin(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Asinh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def AsinPi(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atan(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atan2(y: Single, x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atan2Pi(y: Single, x: Single) -> Single: ...
    @overload
    @staticmethod
    def Atanh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def AtanPi(x: Single) -> Single: ...
    @overload
    @staticmethod
    def BitDecrement(x: Single) -> Single: ...
    @overload
    @staticmethod
    def BitIncrement(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Cbrt(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Ceiling(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Clamp(value: Single, min_: Single, max_: Single) -> Single: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: Single) -> int: ...
    @overload
    @staticmethod
    def CopySign(value: Single, sign: Single) -> Single: ...
    @overload
    @staticmethod
    def Cos(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Cosh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def CosPi(x: Single) -> Single: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> Single: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> Single: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> Single: ...
    @overload
    def Equals(self, obj: Single) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Exp(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Exp10(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Exp10M1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Exp2(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Exp2M1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def ExpM1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Floor(x: Single) -> Single: ...
    @overload
    @staticmethod
    def FusedMultiplyAdd(left: Single, right: Single, addend: Single) -> Single: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def Hypot(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Ieee754Remainder(left: Single, right: Single) -> Single: ...
    @overload
    @staticmethod
    def ILogB(x: Single) -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsFinite(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsInfinity(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsInteger(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsNaN(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsNegative(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsNegativeInfinity(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsNormal(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsPositive(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsPositiveInfinity(f: Single) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsRealNumber(value: Single) -> bool: ...
    @overload
    @staticmethod
    def IsSubnormal(f: Single) -> bool: ...
    @overload
    @staticmethod
    def Log(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Log(x: Single, newBase: Single) -> Single: ...
    @overload
    @staticmethod
    def Log10(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Log10P1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Log2(value: Single) -> Single: ...
    @overload
    @staticmethod
    def Log2P1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def LogP1(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Max(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MaxMagnitude(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MaxMagnitudeNumber(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MaxNumber(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Min(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MinMagnitude(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MinMagnitudeNumber(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def MinNumber(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: str) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> Single: ...
    @overload
    @staticmethod
    def Pow(x: Single, y: Single) -> Single: ...
    @overload
    @staticmethod
    def ReciprocalEstimate(x: Single) -> Single: ...
    @overload
    @staticmethod
    def ReciprocalSqrtEstimate(x: Single) -> Single: ...
    @overload
    @staticmethod
    def RootN(x: Single, n: int) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, digits: int) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, mode: MidpointRounding) -> Single: ...
    @overload
    @staticmethod
    def Round(x: Single, digits: int, mode: MidpointRounding) -> Single: ...
    @overload
    @staticmethod
    def ScaleB(x: Single, n: int) -> Single: ...
    @overload
    @staticmethod
    def Sign(value: Single) -> int: ...
    @overload
    @staticmethod
    def Sin(x: Single) -> Single: ...
    @overload
    @staticmethod
    def SinCos(x: Single) -> ValueTuple: ...
    @overload
    @staticmethod
    def SinCosPi(x: Single) -> ValueTuple: ...
    @overload
    @staticmethod
    def Sinh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def SinPi(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Sqrt(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Tan(x: Single) -> Single: ...
    @overload
    @staticmethod
    def Tanh(x: Single) -> Single: ...
    @overload
    @staticmethod
    def TanPi(x: Single) -> Single: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def Truncate(x: Single) -> Single: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, Single): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, Single): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, Single): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, Single): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Single): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, Single): ...

class StackOverflowException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class StringComparer(object):
    """    """
    @overload
    def Compare(self, x: object, y: object) -> int: ...
    @overload
    def Compare(self, x: str, y: str) -> int: ...
    @overload
    @staticmethod
    def Create(culture: Globalization.CultureInfo, ignoreCase: bool) -> StringComparer: ...
    @overload
    @staticmethod
    def Create(culture: Globalization.CultureInfo, options: Globalization.CompareOptions) -> StringComparer: ...
    @overload
    def Equals(self, x: str, y: str) -> bool: ...
    @overload
    def Equals(self, x: object, y: object) -> bool: ...
    @overload
    @staticmethod
    def FromComparison(comparisonType: StringComparison) -> StringComparer: ...
    @property
    def CurrentCulture(self) -> StringComparer: ...
    @property
    def CurrentCultureIgnoreCase(self) -> StringComparer: ...
    @property
    def InvariantCulture(self) -> StringComparer: ...
    @property
    def InvariantCultureIgnoreCase(self) -> StringComparer: ...
    @property
    def Ordinal(self) -> StringComparer: ...
    @property
    def OrdinalIgnoreCase(self) -> StringComparer: ...
    @overload
    def GetHashCode(self, obj: str) -> int: ...
    @overload
    def GetHashCode(self, obj: object) -> int: ...
    @overload
    @staticmethod
    def IsWellKnownCultureAwareComparer(comparer: Generic.IEqualityComparer) -> (bool, Globalization.CompareInfo, Globalization.CompareOptions): ...
    @overload
    @staticmethod
    def IsWellKnownOrdinalComparer(comparer: Generic.IEqualityComparer) -> (bool, bool): ...

class CultureAwareComparer(StringComparer):
    """    """
    @overload
    def Compare(self, x: str, y: str) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: str, y: str) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: str) -> int: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class OrdinalComparer(StringComparer):
    """    """
    @overload
    def Compare(self, x: str, y: str) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, x: str, y: str) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetHashCode(self, obj: str) -> int: ...

class StringComparison(enum.Enum):
    CurrentCulture = 0
    CurrentCultureIgnoreCase = 1
    InvariantCulture = 2
    InvariantCultureIgnoreCase = 3
    Ordinal = 4
    OrdinalIgnoreCase = 5

class StringNormalizationExtensions(object):
    """    """
    @overload
    @staticmethod
    def IsNormalized(strInput: str) -> bool: ...
    @overload
    @staticmethod
    def IsNormalized(strInput: str, normalizationForm: Text.NormalizationForm) -> bool: ...
    @overload
    @staticmethod
    def Normalize(strInput: str) -> str: ...
    @overload
    @staticmethod
    def Normalize(strInput: str, normalizationForm: Text.NormalizationForm) -> str: ...

class StringSplitOptions(enum.Enum):
    None_ = 0
    RemoveEmptyEntries = 1
    TrimEntries = 2

class SystemException(Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class STAThreadAttribute(Attribute):
    """    """
    def __init__(self): ...

class MTAThreadAttribute(Attribute):
    """    """
    def __init__(self): ...

class ThreadStaticAttribute(Attribute):
    """    """
    def __init__(self): ...

class TimeOnly(ValueType):
    """    """
    @overload
    def __init__(self, ticks: Int64): ...
    @overload
    def __init__(self, hour: int, minute: int): ...
    @overload
    def __init__(self, hour: int, minute: int, second: int): ...
    @overload
    def __init__(self, hour: int, minute: int, second: int, millisecond: int): ...
    @overload
    def __init__(self, hour: int, minute: int, second: int, millisecond: int, microsecond: int): ...
    @overload
    def Add(self, value: TimeSpan) -> TimeOnly: ...
    @overload
    def Add(self, value: TimeSpan) -> (TimeOnly, int): ...
    @overload
    def AddHours(self, value: float) -> TimeOnly: ...
    @overload
    def AddHours(self, value: float) -> (TimeOnly, int): ...
    @overload
    def AddMinutes(self, value: float) -> TimeOnly: ...
    @overload
    def AddMinutes(self, value: float) -> (TimeOnly, int): ...
    @overload
    def CompareTo(self, value: TimeOnly) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def Equals(self, value: TimeOnly) -> bool: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    @staticmethod
    def FromDateTime(dateTime: DateTime) -> TimeOnly: ...
    @overload
    @staticmethod
    def FromTimeSpan(timeSpan: TimeSpan) -> TimeOnly: ...
    @property
    def Hour(self) -> int: ...
    @property
    def MaxValue(self) -> TimeOnly: ...
    @property
    def Microsecond(self) -> int: ...
    @property
    def Millisecond(self) -> int: ...
    @property
    def Minute(self) -> int: ...
    @property
    def MinValue(self) -> TimeOnly: ...
    @property
    def Nanosecond(self) -> int: ...
    @property
    def Second(self) -> int: ...
    @property
    def Ticks(self) -> Int64: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def IsBetween(self, start: TimeOnly, end: TimeOnly) -> bool: ...
    @overload
    @staticmethod
    def Parse(s: str) -> TimeOnly: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> TimeOnly: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> TimeOnly: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, formats: Array[str]) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, formats: Array[str]) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    @staticmethod
    def ParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> TimeOnly: ...
    @overload
    def ToLongTimeString() -> str: ...
    @overload
    def ToShortTimeString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    def ToTimeSpan() -> TimeSpan: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, format_: ReadOnlySpan) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, format_: str) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, formats: Array[str]) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, formats: Array[str]) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, format_: str, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: ReadOnlySpan, format_: ReadOnlySpan, provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...
    @overload
    @staticmethod
    def TryParseExact(s: str, formats: Array[str], provider: IFormatProvider, style: Globalization.DateTimeStyles) -> (bool, TimeOnly): ...

class TimeoutException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class TimeSpan(ValueType):
    """    """
    @overload
    def __init__(self, ticks: Int64): ...
    @overload
    def __init__(self, hours: int, minutes: int, seconds: int): ...
    @overload
    def __init__(self, days: int, hours: int, minutes: int, seconds: int): ...
    @overload
    def __init__(self, days: int, hours: int, minutes: int, seconds: int, milliseconds: int): ...
    @overload
    def __init__(self, days: int, hours: int, minutes: int, seconds: int, milliseconds: int, microseconds: int): ...
    @property
    def Zero(self) -> TimeSpan: ...
    @property
    def MaxValue(self) -> TimeSpan: ...
    @property
    def MinValue(self) -> TimeSpan: ...
    @property
    def NanosecondsPerTick(self) -> Int64: ...
    @property
    def TicksPerMicrosecond(self) -> Int64: ...
    @property
    def TicksPerMillisecond(self) -> Int64: ...
    @property
    def TicksPerSecond(self) -> Int64: ...
    @property
    def TicksPerMinute(self) -> Int64: ...
    @property
    def TicksPerHour(self) -> Int64: ...
    @property
    def TicksPerDay(self) -> Int64: ...
    @overload
    def Add(self, ts: TimeSpan) -> TimeSpan: ...
    @overload
    @staticmethod
    def Compare(t1: TimeSpan, t2: TimeSpan) -> int: ...
    @overload
    def CompareTo(self, value: TimeSpan) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def Divide(self, ts: TimeSpan) -> float: ...
    @overload
    def Divide(self, divisor: float) -> TimeSpan: ...
    @overload
    def Duration() -> TimeSpan: ...
    @overload
    def Equals(self, obj: TimeSpan) -> bool: ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    @staticmethod
    def Equals(t1: TimeSpan, t2: TimeSpan) -> bool: ...
    @overload
    @staticmethod
    def FromDays(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromHours(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromMicroseconds(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromMilliseconds(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromMinutes(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromSeconds(value: float) -> TimeSpan: ...
    @overload
    @staticmethod
    def FromTicks(value: Int64) -> TimeSpan: ...
    @property
    def Days(self) -> int: ...
    @property
    def Hours(self) -> int: ...
    @property
    def Microseconds(self) -> int: ...
    @property
    def Milliseconds(self) -> int: ...
    @property
    def Minutes(self) -> int: ...
    @property
    def Nanoseconds(self) -> int: ...
    @property
    def Seconds(self) -> int: ...
    @property
    def Ticks(self) -> Int64: ...
    @property
    def TotalDays(self) -> float: ...
    @property
    def TotalHours(self) -> float: ...
    @property
    def TotalMicroseconds(self) -> float: ...
    @property
    def TotalMilliseconds(self) -> float: ...
    @property
    def TotalMinutes(self) -> float: ...
    @property
    def TotalNanoseconds(self) -> float: ...
    @property
    def TotalSeconds(self) -> float: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Multiply(self, factor: float) -> TimeSpan: ...
    @overload
    def Negate() -> TimeSpan: ...
    @overload
    @staticmethod
    def Parse(s: str) -> TimeSpan: ...
    @overload
    @staticmethod
    def Parse(input_: ReadOnlySpan, formatProvider: IFormatProvider) -> TimeSpan: ...
    @overload
    @staticmethod
    def Parse(input_: str, formatProvider: IFormatProvider) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, format_: str, formatProvider: IFormatProvider) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: str, format_: str, formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> TimeSpan: ...
    @overload
    @staticmethod
    def ParseExact(input_: ReadOnlySpan, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> TimeSpan: ...
    @overload
    def Subtract(self, ts: TimeSpan) -> TimeSpan: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, formatProvider: IFormatProvider) -> str: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, formatProvider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParse(input_: ReadOnlySpan, formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParse(input_: str, formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, formats: Array[str], formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan, formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, format_: str, formatProvider: IFormatProvider) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, formats: Array[str], formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: str, format_: str, formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> (bool, TimeSpan): ...
    @overload
    @staticmethod
    def TryParseExact(input_: ReadOnlySpan, format_: ReadOnlySpan, formatProvider: IFormatProvider, styles: Globalization.TimeSpanStyles) -> (bool, TimeSpan): ...

class TimeZoneInfo(object):
    """    """
    @overload
    @staticmethod
    def ClearCachedData() -> None: ...
    @overload
    @staticmethod
    def ConvertTime(dateTimeOffset: DateTimeOffset, destinationTimeZone: TimeZoneInfo) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ConvertTime(dateTime: DateTime, destinationTimeZone: TimeZoneInfo) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTime(dateTime: DateTime, sourceTimeZone: TimeZoneInfo, destinationTimeZone: TimeZoneInfo) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTimeBySystemTimeZoneId(dateTime: DateTime, destinationTimeZoneId: str) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTimeBySystemTimeZoneId(dateTimeOffset: DateTimeOffset, destinationTimeZoneId: str) -> DateTimeOffset: ...
    @overload
    @staticmethod
    def ConvertTimeBySystemTimeZoneId(dateTime: DateTime, sourceTimeZoneId: str, destinationTimeZoneId: str) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTimeFromUtc(dateTime: DateTime, destinationTimeZone: TimeZoneInfo) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTimeToUtc(dateTime: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def ConvertTimeToUtc(dateTime: DateTime, sourceTimeZone: TimeZoneInfo) -> DateTime: ...
    @overload
    @staticmethod
    def CreateCustomTimeZone(id_: str, baseUtcOffset: TimeSpan, displayName: str, standardDisplayName: str) -> TimeZoneInfo: ...
    @overload
    @staticmethod
    def CreateCustomTimeZone(id_: str, baseUtcOffset: TimeSpan, displayName: str, standardDisplayName: str, daylightDisplayName: str, adjustmentRules: Array[AdjustmentRule]) -> TimeZoneInfo: ...
    @overload
    @staticmethod
    def CreateCustomTimeZone(id_: str, baseUtcOffset: TimeSpan, displayName: str, standardDisplayName: str, daylightDisplayName: str, adjustmentRules: Array[AdjustmentRule], disableDaylightSavingTime: bool) -> TimeZoneInfo: ...
    @overload
    def Equals(self, other: TimeZoneInfo) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindSystemTimeZoneById(id_: str) -> TimeZoneInfo: ...
    @overload
    @staticmethod
    def FromSerializedString(source: str) -> TimeZoneInfo: ...
    @property
    def BaseUtcOffset(self) -> TimeSpan: ...
    @property
    def DaylightName(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def HasIanaId(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def Local(self) -> TimeZoneInfo: ...
    @property
    def StandardName(self) -> str: ...
    @property
    def SupportsDaylightSavingTime(self) -> bool: ...
    @property
    def Utc(self) -> TimeZoneInfo: ...
    @overload
    def GetAdjustmentRules() -> Array[AdjustmentRule]: ...
    @overload
    def GetAmbiguousTimeOffsets(self, dateTime: DateTime) -> Array[TimeSpan]: ...
    @overload
    def GetAmbiguousTimeOffsets(self, dateTimeOffset: DateTimeOffset) -> Array[TimeSpan]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetSystemTimeZones() -> ObjectModel.ReadOnlyCollection: ...
    @overload
    def GetUtcOffset(self, dateTime: DateTime) -> TimeSpan: ...
    @overload
    def GetUtcOffset(self, dateTimeOffset: DateTimeOffset) -> TimeSpan: ...
    @overload
    def HasSameRules(self, other: TimeZoneInfo) -> bool: ...
    @overload
    def IsAmbiguousTime(self, dateTime: DateTime) -> bool: ...
    @overload
    def IsAmbiguousTime(self, dateTimeOffset: DateTimeOffset) -> bool: ...
    @overload
    def IsDaylightSavingTime(self, dateTime: DateTime) -> bool: ...
    @overload
    def IsDaylightSavingTime(self, dateTimeOffset: DateTimeOffset) -> bool: ...
    @overload
    def IsInvalidTime(self, dateTime: DateTime) -> bool: ...
    @overload
    def ToSerializedString() -> str: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryConvertIanaIdToWindowsId(ianaId: str) -> (bool, str): ...
    @overload
    @staticmethod
    def TryConvertWindowsIdToIanaId(windowsId: str) -> (bool, str): ...
    @overload
    @staticmethod
    def TryConvertWindowsIdToIanaId(windowsId: str, region: str) -> (bool, str): ...

class AdjustmentRule(object):
    """    """
    @overload
    @staticmethod
    def CreateAdjustmentRule(dateStart: DateTime, dateEnd: DateTime, daylightDelta: TimeSpan, daylightTransitionStart: TransitionTime, daylightTransitionEnd: TransitionTime) -> AdjustmentRule: ...
    @overload
    @staticmethod
    def CreateAdjustmentRule(dateStart: DateTime, dateEnd: DateTime, daylightDelta: TimeSpan, daylightTransitionStart: TransitionTime, daylightTransitionEnd: TransitionTime, baseUtcOffsetDelta: TimeSpan) -> AdjustmentRule: ...
    @overload
    def Equals(self, other: AdjustmentRule) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BaseUtcOffsetDelta(self) -> TimeSpan: ...
    @property
    def DateEnd(self) -> DateTime: ...
    @property
    def DateStart(self) -> DateTime: ...
    @property
    def DaylightDelta(self) -> TimeSpan: ...
    @property
    def DaylightTransitionEnd(self) -> TransitionTime: ...
    @property
    def DaylightTransitionStart(self) -> TransitionTime: ...
    @overload
    def GetHashCode() -> int: ...

class TransitionTime(ValueType):
    """    """
    @overload
    @staticmethod
    def CreateFixedDateRule(timeOfDay: DateTime, month: int, day: int) -> TransitionTime: ...
    @overload
    @staticmethod
    def CreateFloatingDateRule(timeOfDay: DateTime, month: int, week: int, dayOfWeek: DayOfWeek) -> TransitionTime: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TransitionTime) -> bool: ...
    @property
    def Day(self) -> int: ...
    @property
    def DayOfWeek(self) -> DayOfWeek: ...
    @property
    def IsFixedDateRule(self) -> bool: ...
    @property
    def Month(self) -> int: ...
    @property
    def TimeOfDay(self) -> DateTime: ...
    @property
    def Week(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class TimeZoneNotFoundException(Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class Tuple(object):
    """    """
    @overload
    @staticmethod
    def Create(item1: T1) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7) -> Tuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8) -> Tuple: ...

class Tuple(object):
    """    Tuple[T1]
    """
    def __init__(self, item1: T1): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2]
    """
    def __init__(self, item1: T1, item2: T2): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3, T4]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3, T4, T5]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3, T4, T5, T6]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3, T4, T5, T6, T7]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @property
    def Item7(self) -> T7: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Tuple(object):
    """    Tuple[T1, T2, T3, T4, T5, T6, T7, TRest]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, rest: TRest): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @property
    def Item7(self) -> T7: ...
    @property
    def Rest(self) -> TRest: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class TupleExtensions(object):
    """    """
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20): ...
    @overload
    @staticmethod
    def Deconstruct(value: Tuple) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21): ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToTuple(value: ValueTuple) -> Tuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...
    @overload
    @staticmethod
    def ToValueTuple(value: Tuple) -> ValueTuple: ...

class TypeAccessException(TypeLoadException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class TypeCode(enum.Enum):
    Empty = 0
    Object = 1
    DBNull = 2
    Boolean = 3
    Char = 4
    SByte = 5
    Byte = 6
    Int16 = 7
    UInt16 = 8
    Int32 = 9
    UInt32 = 10
    Int64 = 11
    UInt64 = 12
    Single = 13
    Double = 14
    Decimal = 15
    DateTime = 16
    String = 18

class TypeInitializationException(SystemException):
    """    """
    def __init__(self, fullTypeName: str, innerException: Exception): ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class TypeUnloadedException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...

class UInt16(ValueType):
    """    """
    @property
    def MaxValue(self) -> UInt16: ...
    @property
    def MinValue(self) -> UInt16: ...
    @overload
    @staticmethod
    def Clamp(value: UInt16, min_: UInt16, max_: UInt16) -> UInt16: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: UInt16) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> UInt16: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> UInt16: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> UInt16: ...
    @overload
    @staticmethod
    def DivRem(left: UInt16, right: UInt16) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: UInt16) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: UInt16) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: UInt16) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: UInt16) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Log2(value: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Max(x: UInt16, y: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Min(x: UInt16, y: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: str) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt16: ...
    @overload
    @staticmethod
    def PopCount(value: UInt16) -> UInt16: ...
    @overload
    @staticmethod
    def RotateLeft(value: UInt16, rotateAmount: int) -> UInt16: ...
    @overload
    @staticmethod
    def RotateRight(value: UInt16, rotateAmount: int) -> UInt16: ...
    @overload
    @staticmethod
    def Sign(value: UInt16) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: UInt16) -> UInt16: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, UInt16): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, UInt16): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, UInt16): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, UInt16): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt16): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt16): ...

class UInt32(ValueType):
    """    """
    @property
    def MaxValue(self) -> UInt32: ...
    @property
    def MinValue(self) -> UInt32: ...
    @overload
    @staticmethod
    def Clamp(value: UInt32, min_: UInt32, max_: UInt32) -> UInt32: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: UInt32) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> UInt32: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> UInt32: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> UInt32: ...
    @overload
    @staticmethod
    def DivRem(left: UInt32, right: UInt32) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: UInt32) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: UInt32) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: UInt32) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: UInt32) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Log2(value: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Max(x: UInt32, y: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Min(x: UInt32, y: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: str) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt32: ...
    @overload
    @staticmethod
    def PopCount(value: UInt32) -> UInt32: ...
    @overload
    @staticmethod
    def RotateLeft(value: UInt32, rotateAmount: int) -> UInt32: ...
    @overload
    @staticmethod
    def RotateRight(value: UInt32, rotateAmount: int) -> UInt32: ...
    @overload
    @staticmethod
    def Sign(value: UInt32) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: UInt32) -> UInt32: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, UInt32): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, UInt32): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, UInt32): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, UInt32): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt32): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt32): ...

class UInt64(ValueType):
    """    """
    @property
    def MaxValue(self) -> UInt64: ...
    @property
    def MinValue(self) -> UInt64: ...
    @overload
    @staticmethod
    def Clamp(value: UInt64, min_: UInt64, max_: UInt64) -> UInt64: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: UInt64) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> UInt64: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> UInt64: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> UInt64: ...
    @overload
    @staticmethod
    def DivRem(left: UInt64, right: UInt64) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: UInt64) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetTypeCode() -> TypeCode: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: UInt64) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: UInt64) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: UInt64) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Log2(value: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Max(x: UInt64, y: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Min(x: UInt64, y: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: str) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt64: ...
    @overload
    @staticmethod
    def PopCount(value: UInt64) -> UInt64: ...
    @overload
    @staticmethod
    def RotateLeft(value: UInt64, rotateAmount: int) -> UInt64: ...
    @overload
    @staticmethod
    def RotateRight(value: UInt64, rotateAmount: int) -> UInt64: ...
    @overload
    @staticmethod
    def Sign(value: UInt64) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: UInt64) -> UInt64: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, UInt64): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, UInt64): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, UInt64): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, UInt64): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt64): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt64): ...

class UInt128(ValueType):
    """    """
    def __init__(self, upper: UInt64, lower: UInt64): ...
    @overload
    @staticmethod
    def Clamp(value: UInt128, min_: UInt128, max_: UInt128) -> UInt128: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    def CompareTo(self, value: UInt128) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> UInt128: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> UInt128: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> UInt128: ...
    @overload
    @staticmethod
    def DivRem(left: UInt128, right: UInt128) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: UInt128) -> bool: ...
    @property
    def MaxValue(self) -> UInt128: ...
    @property
    def MinValue(self) -> UInt128: ...
    @property
    def One(self) -> UInt128: ...
    @property
    def Zero(self) -> UInt128: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: UInt128) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: UInt128) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: UInt128) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: UInt128) -> UInt128: ...
    @overload
    @staticmethod
    def Log2(value: UInt128) -> UInt128: ...
    @overload
    @staticmethod
    def Max(x: UInt128, y: UInt128) -> UInt128: ...
    @overload
    @staticmethod
    def Min(x: UInt128, y: UInt128) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: str) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt128: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> UInt128: ...
    @overload
    @staticmethod
    def PopCount(value: UInt128) -> UInt128: ...
    @overload
    @staticmethod
    def RotateLeft(value: UInt128, rotateAmount: int) -> UInt128: ...
    @overload
    @staticmethod
    def RotateRight(value: UInt128, rotateAmount: int) -> UInt128: ...
    @overload
    @staticmethod
    def Sign(value: UInt128) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: UInt128) -> UInt128: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, UInt128): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, UInt128): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, UInt128): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, UInt128): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt128): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UInt128): ...

class UIntPtr(ValueType):
    """    """
    @overload
    def __init__(self, value: UInt32): ...
    @overload
    def __init__(self, value: UInt64): ...
    @overload
    def __init__(self, value: Void): ...
    @property
    def Zero(self) -> UIntPtr: ...
    @overload
    @staticmethod
    def Add(pointer: UIntPtr, offset: int) -> UIntPtr: ...
    @overload
    @staticmethod
    def Clamp(value: UIntPtr, min_: UIntPtr, max_: UIntPtr) -> UIntPtr: ...
    @overload
    def CompareTo(self, value: UIntPtr) -> int: ...
    @overload
    def CompareTo(self, value: object) -> int: ...
    @overload
    @staticmethod
    def CreateChecked(value: TOther) -> UIntPtr: ...
    @overload
    @staticmethod
    def CreateSaturating(value: TOther) -> UIntPtr: ...
    @overload
    @staticmethod
    def CreateTruncating(value: TOther) -> UIntPtr: ...
    @overload
    @staticmethod
    def DivRem(left: UIntPtr, right: UIntPtr) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: UIntPtr) -> bool: ...
    @property
    def MaxValue(self) -> UIntPtr: ...
    @property
    def MinValue(self) -> UIntPtr: ...
    @property
    def Size(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def IsEvenInteger(value: UIntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsOddInteger(value: UIntPtr) -> bool: ...
    @overload
    @staticmethod
    def IsPow2(value: UIntPtr) -> bool: ...
    @overload
    @staticmethod
    def LeadingZeroCount(value: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Log2(value: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Max(x: UIntPtr, y: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Min(x: UIntPtr, y: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> UIntPtr: ...
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> UIntPtr: ...
    @overload
    @staticmethod
    def PopCount(value: UIntPtr) -> UIntPtr: ...
    @overload
    @staticmethod
    def RotateLeft(value: UIntPtr, rotateAmount: int) -> UIntPtr: ...
    @overload
    @staticmethod
    def RotateRight(value: UIntPtr, rotateAmount: int) -> UIntPtr: ...
    @overload
    @staticmethod
    def Sign(value: UIntPtr) -> int: ...
    @overload
    @staticmethod
    def Subtract(pointer: UIntPtr, offset: int) -> UIntPtr: ...
    @overload
    def ToPointer() -> Void: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, format_: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format_: str, provider: IFormatProvider) -> str: ...
    @overload
    def ToUInt32() -> UInt32: ...
    @overload
    def ToUInt64() -> UInt64: ...
    @overload
    @staticmethod
    def TrailingZeroCount(value: UIntPtr) -> UIntPtr: ...
    @overload
    def TryFormat(self, destination: Span, format_: ReadOnlySpan, provider: IFormatProvider) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan) -> (bool, UIntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str) -> (bool, UIntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, UIntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, UIntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UIntPtr): ...
    @overload
    @staticmethod
    def TryParse(s: str, style: Globalization.NumberStyles, provider: IFormatProvider) -> (bool, UIntPtr): ...

class UnauthorizedAccessException(SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...

class UnhandledExceptionEventArgs(EventArgs):
    """    """
    def __init__(self, exception: object, isTerminating: bool): ...
    @property
    def ExceptionObject(self) -> object: ...
    @property
    def IsTerminating(self) -> bool: ...

class UnhandledExceptionEventHandler(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UnhandledExceptionEventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UnhandledExceptionEventArgs) -> None: ...

class UnitySerializationHolder(object):
    """    """
    def __init__(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext): ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetRealObject(self, context: Serialization.StreamingContext) -> object: ...

class ValueTuple(ValueType):
    """    """
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    @staticmethod
    def Create() -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7) -> ValueTuple: ...
    @overload
    @staticmethod
    def Create(item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, item8: T8) -> ValueTuple: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1]
    """
    def __init__(self, item1: T1): ...
    @property
    def Item1(self) -> T1: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2]
    """
    def __init__(self, item1: T1, item2: T2): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3, T4]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3, T4, T5]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3, T4, T5, T6]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3, T4, T5, T6, T7]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @property
    def Item7(self) -> T7: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class ValueTuple(ValueType):
    """    ValueTuple[T1, T2, T3, T4, T5, T6, T7, TRest]
    """
    def __init__(self, item1: T1, item2: T2, item3: T3, item4: T4, item5: T5, item6: T6, item7: T7, rest: TRest): ...
    @property
    def Item1(self) -> T1: ...
    @property
    def Item2(self) -> T2: ...
    @property
    def Item3(self) -> T3: ...
    @property
    def Item4(self) -> T4: ...
    @property
    def Item5(self) -> T5: ...
    @property
    def Item6(self) -> T6: ...
    @property
    def Item7(self) -> T7: ...
    @property
    def Rest(self) -> TRest: ...
    @overload
    def CompareTo(self, other: ValueTuple) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ValueTuple) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class Version(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, version: str): ...
    @overload
    def __init__(self, major: int, minor: int): ...
    @overload
    def __init__(self, major: int, minor: int, build: int): ...
    @overload
    def __init__(self, major: int, minor: int, build: int, revision: int): ...
    @overload
    def Clone() -> object: ...
    @overload
    def CompareTo(self, version: object) -> int: ...
    @overload
    def CompareTo(self, value: Version) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Version) -> bool: ...
    @property
    def Build(self) -> int: ...
    @property
    def Major(self) -> int: ...
    @property
    def MajorRevision(self) -> Int16: ...
    @property
    def Minor(self) -> int: ...
    @property
    def MinorRevision(self) -> Int16: ...
    @property
    def Revision(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(input_: str) -> Version: ...
    @overload
    @staticmethod
    def Parse(input_: ReadOnlySpan) -> Version: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ToString(self, fieldCount: int) -> str: ...
    @overload
    def TryFormat(self, destination: Span) -> (bool, int): ...
    @overload
    def TryFormat(self, destination: Span, fieldCount: int) -> (bool, int): ...
    @overload
    @staticmethod
    def TryParse(input_: str) -> (bool, Version): ...
    @overload
    @staticmethod
    def TryParse(input_: ReadOnlySpan) -> (bool, Version): ...

class Void(ValueType):
    """    """

class IParsable:
    """    IParsable[TSelf]
    """
    @overload
    @staticmethod
    def Parse(s: str, provider: IFormatProvider) -> TSelf: ...
    @overload
    @staticmethod
    def TryParse(s: str, provider: IFormatProvider) -> (bool, TSelf): ...

class ISpanParsable:
    """    ISpanParsable[TSelf]
    """
    @overload
    @staticmethod
    def Parse(s: ReadOnlySpan, provider: IFormatProvider) -> TSelf: ...
    @overload
    @staticmethod
    def TryParse(s: ReadOnlySpan, provider: IFormatProvider) -> (bool, TSelf): ...

# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class ApplicationIdentity(object):
    """    """
    def __init__(self, applicationIdentityFullName: str): ...
    @property
    def CodeBase(self) -> str: ...
    @property
    def FullName(self) -> str: ...
    @overload
    def ToString() -> str: ...

# endregion

# region: System.Private.Uri, Version=7.0.0.0

class GenericUriParserOptions(enum.Enum):
    Default = 0
    GenericAuthority = 1
    AllowEmptyAuthority = 2
    NoUserInfo = 4
    NoPort = 8
    NoQuery = 16
    NoFragment = 32
    DontConvertPathBackslashes = 64
    DontCompressPath = 128
    DontUnescapePathDotsAndSlashes = 256
    Idn = 512
    IriParsing = 1024

class GenericUriParser(UriParser):
    """    """
    def __init__(self, options: GenericUriParserOptions): ...

class Uri(object):
    """    """
    @overload
    def __init__(self, uriString: str): ...
    @overload
    def __init__(self, uriString: str, dontEscape: bool): ...
    @overload
    def __init__(self, uriString: str, uriKind: UriKind): ...
    @overload
    def __init__(self, uriString: str, creationOptions: UriCreationOptions): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: str): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: Uri): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: str, dontEscape: bool): ...
    @property
    def UriSchemeFile(self) -> str: ...
    @property
    def UriSchemeFtp(self) -> str: ...
    @property
    def UriSchemeSftp(self) -> str: ...
    @property
    def UriSchemeFtps(self) -> str: ...
    @property
    def UriSchemeGopher(self) -> str: ...
    @property
    def UriSchemeHttp(self) -> str: ...
    @property
    def UriSchemeHttps(self) -> str: ...
    @property
    def UriSchemeWs(self) -> str: ...
    @property
    def UriSchemeWss(self) -> str: ...
    @property
    def UriSchemeMailto(self) -> str: ...
    @property
    def UriSchemeNews(self) -> str: ...
    @property
    def UriSchemeNntp(self) -> str: ...
    @property
    def UriSchemeSsh(self) -> str: ...
    @property
    def UriSchemeTelnet(self) -> str: ...
    @property
    def UriSchemeNetTcp(self) -> str: ...
    @property
    def UriSchemeNetPipe(self) -> str: ...
    @property
    def SchemeDelimiter(self) -> str: ...
    @overload
    @staticmethod
    def CheckHostName(name: str) -> UriHostNameType: ...
    @overload
    @staticmethod
    def CheckSchemeName(schemeName: str) -> bool: ...
    @overload
    @staticmethod
    def Compare(uri1: Uri, uri2: Uri, partsToCompare: UriComponents, compareFormat: UriFormat, comparisonType: StringComparison) -> int: ...
    @overload
    def Equals(self, comparand: object) -> bool: ...
    @overload
    @staticmethod
    def EscapeDataString(stringToEscape: str) -> str: ...
    @overload
    @staticmethod
    def FromHex(digit: Char) -> int: ...
    @property
    def AbsolutePath(self) -> str: ...
    @property
    def AbsoluteUri(self) -> str: ...
    @property
    def Authority(self) -> str: ...
    @property
    def DnsSafeHost(self) -> str: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def HostNameType(self) -> UriHostNameType: ...
    @property
    def IdnHost(self) -> str: ...
    @property
    def IsAbsoluteUri(self) -> bool: ...
    @property
    def IsDefaultPort(self) -> bool: ...
    @property
    def IsFile(self) -> bool: ...
    @property
    def IsLoopback(self) -> bool: ...
    @property
    def IsUnc(self) -> bool: ...
    @property
    def LocalPath(self) -> str: ...
    @property
    def OriginalString(self) -> str: ...
    @property
    def PathAndQuery(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Query(self) -> str: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def Segments(self) -> Array[str]: ...
    @property
    def UserEscaped(self) -> bool: ...
    @property
    def UserInfo(self) -> str: ...
    @overload
    def GetComponents(self, components: UriComponents, format_: UriFormat) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLeftPart(self, part: UriPartial) -> str: ...
    @overload
    @staticmethod
    def HexEscape(character: Char) -> str: ...
    @overload
    @staticmethod
    def HexUnescape(pattern: str) -> (Char, int): ...
    @overload
    def IsBaseOf(self, uri: Uri) -> bool: ...
    @overload
    @staticmethod
    def IsHexDigit(character: Char) -> bool: ...
    @overload
    @staticmethod
    def IsHexEncoding(pattern: str, index: int) -> bool: ...
    @overload
    def IsWellFormedOriginalString() -> bool: ...
    @overload
    @staticmethod
    def IsWellFormedUriString(uriString: str, uriKind: UriKind) -> bool: ...
    @overload
    def MakeRelativeUri(self, uri: Uri) -> Uri: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def TryCreate(uriString: str, uriKind: UriKind) -> (bool, Uri): ...
    @overload
    @staticmethod
    def TryCreate(uriString: str) -> (bool, UriCreationOptions, Uri): ...
    @overload
    @staticmethod
    def TryCreate(baseUri: Uri, relativeUri: str) -> (bool, Uri): ...
    @overload
    @staticmethod
    def TryCreate(baseUri: Uri, relativeUri: Uri) -> (bool, Uri): ...
    @overload
    @staticmethod
    def UnescapeDataString(stringToUnescape: str) -> str: ...

class UriBuilder(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: Uri): ...
    @overload
    def __init__(self, schemeName: str, hostName: str): ...
    @overload
    def __init__(self, scheme: str, host: str, portNumber: int): ...
    @overload
    def __init__(self, scheme: str, host: str, port: int, pathValue: str): ...
    @overload
    def __init__(self, scheme: str, host: str, port: int, path: str, extraValue: str): ...
    @overload
    def Equals(self, rparam: object) -> bool: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Query(self) -> str: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def Uri(self) -> Uri: ...
    @property
    def UserName(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @Fragment.setter
    def Fragment(self, value: Void): ...
    @Host.setter
    def Host(self, value: Void): ...
    @Password.setter
    def Password(self, value: Void): ...
    @Path.setter
    def Path(self, value: Void): ...
    @Port.setter
    def Port(self, value: Void): ...
    @Query.setter
    def Query(self, value: Void): ...
    @Scheme.setter
    def Scheme(self, value: Void): ...
    @UserName.setter
    def UserName(self, value: Void): ...
    @overload
    def ToString() -> str: ...

class UriCreationOptions(ValueType):
    """    """
    @property
    def DangerousDisablePathAndQueryCanonicalization(self) -> bool: ...
    @DangerousDisablePathAndQueryCanonicalization.setter
    def DangerousDisablePathAndQueryCanonicalization(self, value: Void): ...

class UriKind(enum.Enum):
    RelativeOrAbsolute = 0
    Absolute = 1
    Relative = 2

class UriComponents(enum.Enum):
    Scheme = 1
    UserInfo = 2
    Host = 4
    Port = 8
    SchemeAndServer = 13
    Path = 16
    Query = 32
    PathAndQuery = 48
    HttpRequestUrl = 61
    Fragment = 64
    AbsoluteUri = 127
    StrongPort = 128
    HostAndPort = 132
    StrongAuthority = 134
    NormalizedHost = 256
    KeepDelimiter = 1073741824
    SerializationInfoString = -2147483648

class UriFormat(enum.Enum):
    UriEscaped = 1
    Unescaped = 2
    SafeUnescaped = 3

class UriFormatException(FormatException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, textString: str): ...
    @overload
    def __init__(self, textString: str, e: Exception): ...

class UriHostNameType(enum.Enum):
    Unknown = 0
    Basic = 1
    Dns = 2
    IPv4 = 3
    IPv6 = 4

class HttpStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class FtpStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class FileStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class NewsStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class GopherStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class LdapStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class NetPipeStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class NetTcpStyleUriParser(UriParser):
    """    """
    def __init__(self): ...

class UriPartial(enum.Enum):
    Scheme = 0
    Authority = 1
    Path = 2
    Query = 3

class UriParser(object):
    """    """
    @overload
    @staticmethod
    def IsKnownScheme(schemeName: str) -> bool: ...
    @overload
    @staticmethod
    def Register(uriParser: UriParser, schemeName: str, defaultPort: int) -> None: ...

# endregion

# region: System.ComponentModel, Version=7.0.0.0

class IServiceProvider:
    """    """
    @overload
    def GetService(self, serviceType: Type) -> object: ...

# endregion

# region: System.Configuration.ConfigurationManager, Version=7.0.0.0

class UriIdnScope(enum.Enum):
    None_ = 0
    AllExceptIntranet = 1
    All = 2

# endregion

# region: System.Memory, Version=7.0.0.0

class SequencePosition(ValueType):
    """    """
    def __init__(self, object_: object, integer: int): ...
    @overload
    def Equals(self, other: SequencePosition) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetInteger() -> int: ...
    @overload
    def GetObject() -> object: ...

# endregion

# region: System.ComponentModel.TypeConverter, Version=7.0.0.0

class UriTypeConverter(ComponentModel.TypeConverter):
    """    """
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ComponentModel.ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object) -> object: ...
    @overload
    def ConvertTo(self, context: ComponentModel.ITypeDescriptorContext, culture: Globalization.CultureInfo, value: object, destinationType: Type) -> object: ...
    @overload
    def IsValid(self, context: ComponentModel.ITypeDescriptorContext, value: object) -> bool: ...

# endregion

# region: System.Console, Version=7.0.0.0

class Console(object):
    """    """
    @overload
    @staticmethod
    def Beep() -> None: ...
    @overload
    @staticmethod
    def Beep(frequency: int, duration: int) -> None: ...
    @overload
    @staticmethod
    def Clear() -> None: ...
    @property
    def BackgroundColor(self) -> ConsoleColor: ...
    @property
    def BufferHeight(self) -> int: ...
    @property
    def BufferWidth(self) -> int: ...
    @property
    def CapsLock(self) -> bool: ...
    @property
    def CursorLeft(self) -> int: ...
    @property
    def CursorSize(self) -> int: ...
    @property
    def CursorTop(self) -> int: ...
    @property
    def CursorVisible(self) -> bool: ...
    @property
    def Error(self) -> IO.TextWriter: ...
    @property
    def ForegroundColor(self) -> ConsoleColor: ...
    @property
    def In(self) -> IO.TextReader: ...
    @property
    def InputEncoding(self) -> Text.Encoding: ...
    @property
    def IsErrorRedirected(self) -> bool: ...
    @property
    def IsInputRedirected(self) -> bool: ...
    @property
    def IsOutputRedirected(self) -> bool: ...
    @property
    def KeyAvailable(self) -> bool: ...
    @property
    def LargestWindowHeight(self) -> int: ...
    @property
    def LargestWindowWidth(self) -> int: ...
    @property
    def NumberLock(self) -> bool: ...
    @property
    def Out(self) -> IO.TextWriter: ...
    @property
    def OutputEncoding(self) -> Text.Encoding: ...
    @property
    def Title(self) -> str: ...
    @property
    def TreatControlCAsInput(self) -> bool: ...
    @property
    def WindowHeight(self) -> int: ...
    @property
    def WindowLeft(self) -> int: ...
    @property
    def WindowTop(self) -> int: ...
    @property
    def WindowWidth(self) -> int: ...
    @overload
    @staticmethod
    def GetCursorPosition() -> ValueTuple: ...
    @overload
    @staticmethod
    def MoveBufferArea(sourceLeft: int, sourceTop: int, sourceWidth: int, sourceHeight: int, targetLeft: int, targetTop: int) -> None: ...
    @overload
    @staticmethod
    def MoveBufferArea(sourceLeft: int, sourceTop: int, sourceWidth: int, sourceHeight: int, targetLeft: int, targetTop: int, sourceChar: Char, sourceForeColor: ConsoleColor, sourceBackColor: ConsoleColor) -> None: ...
    @overload
    @staticmethod
    def OpenStandardError() -> IO.Stream: ...
    @overload
    @staticmethod
    def OpenStandardError(bufferSize: int) -> IO.Stream: ...
    @overload
    @staticmethod
    def OpenStandardInput() -> IO.Stream: ...
    @overload
    @staticmethod
    def OpenStandardInput(bufferSize: int) -> IO.Stream: ...
    @overload
    @staticmethod
    def OpenStandardOutput() -> IO.Stream: ...
    @overload
    @staticmethod
    def OpenStandardOutput(bufferSize: int) -> IO.Stream: ...
    @overload
    @staticmethod
    def Read() -> int: ...
    @overload
    @staticmethod
    def ReadKey() -> ConsoleKeyInfo: ...
    @overload
    @staticmethod
    def ReadKey(intercept: bool) -> ConsoleKeyInfo: ...
    @overload
    @staticmethod
    def ReadLine() -> str: ...
    @overload
    @staticmethod
    def ResetColor() -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Void): ...
    @BufferHeight.setter
    def BufferHeight(self, value: Void): ...
    @BufferWidth.setter
    def BufferWidth(self, value: Void): ...
    @CursorLeft.setter
    def CursorLeft(self, value: Void): ...
    @CursorSize.setter
    def CursorSize(self, value: Void): ...
    @CursorTop.setter
    def CursorTop(self, value: Void): ...
    @CursorVisible.setter
    def CursorVisible(self, value: Void): ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: Void): ...
    @InputEncoding.setter
    def InputEncoding(self, value: Void): ...
    @OutputEncoding.setter
    def OutputEncoding(self, value: Void): ...
    @Title.setter
    def Title(self, value: Void): ...
    @TreatControlCAsInput.setter
    def TreatControlCAsInput(self, value: Void): ...
    @WindowHeight.setter
    def WindowHeight(self, value: Void): ...
    @WindowLeft.setter
    def WindowLeft(self, value: Void): ...
    @WindowTop.setter
    def WindowTop(self, value: Void): ...
    @WindowWidth.setter
    def WindowWidth(self, value: Void): ...
    @overload
    @staticmethod
    def SetBufferSize(width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def SetCursorPosition(left: int, top: int) -> None: ...
    @overload
    @staticmethod
    def SetError(newError: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def SetIn(newIn: IO.TextReader) -> None: ...
    @overload
    @staticmethod
    def SetOut(newOut: IO.TextWriter) -> None: ...
    @overload
    @staticmethod
    def SetWindowPosition(left: int, top: int) -> None: ...
    @overload
    @staticmethod
    def SetWindowSize(width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def Write(value: str) -> None: ...
    @overload
    @staticmethod
    def Write(value: object) -> None: ...
    @overload
    @staticmethod
    def Write(value: UInt64) -> None: ...
    @overload
    @staticmethod
    def Write(value: Int64) -> None: ...
    @overload
    @staticmethod
    def Write(value: int) -> None: ...
    @overload
    @staticmethod
    def Write(value: Single) -> None: ...
    @overload
    @staticmethod
    def Write(value: Decimal) -> None: ...
    @overload
    @staticmethod
    def Write(value: float) -> None: ...
    @overload
    @staticmethod
    def Write(buffer: Array[Char]) -> None: ...
    @overload
    @staticmethod
    def Write(value: Char) -> None: ...
    @overload
    @staticmethod
    def Write(value: bool) -> None: ...
    @overload
    @staticmethod
    def Write(value: UInt32) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg: Array[object]) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def Write(buffer: Array[Char], index: int, count: int) -> None: ...
    @overload
    @staticmethod
    def Write(format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine() -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: UInt32) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: Char) -> None: ...
    @overload
    @staticmethod
    def WriteLine(buffer: Array[Char]) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: Decimal) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: float) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: Single) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: int) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: bool) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: Int64) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: UInt64) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg: Array[object]) -> None: ...
    @overload
    @staticmethod
    def WriteLine(buffer: Array[Char], index: int, count: int) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @property
    def CancelKeyPress(self): ...

class ConsoleCancelEventHandler(MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ConsoleCancelEventArgs, callback: AsyncCallback, object_: object) -> IAsyncResult: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ConsoleCancelEventArgs) -> None: ...

class ConsoleCancelEventArgs(EventArgs):
    """    """
    @property
    def Cancel(self) -> bool: ...
    @property
    def SpecialKey(self) -> ConsoleSpecialKey: ...
    @Cancel.setter
    def Cancel(self, value: Void): ...

class ConsoleColor(enum.Enum):
    Black = 0
    DarkBlue = 1
    DarkGreen = 2
    DarkCyan = 3
    DarkRed = 4
    DarkMagenta = 5
    DarkYellow = 6
    Gray = 7
    DarkGray = 8
    Blue = 9
    Green = 10
    Cyan = 11
    Red = 12
    Magenta = 13
    Yellow = 14
    White = 15

class ConsoleSpecialKey(enum.Enum):
    ControlC = 0
    ControlBreak = 1

class ConsoleKey(enum.Enum):
    Backspace = 8
    Tab = 9
    Clear = 12
    Enter = 13
    Pause = 19
    Escape = 27
    Spacebar = 32
    PageUp = 33
    PageDown = 34
    End = 35
    Home = 36
    LeftArrow = 37
    UpArrow = 38
    RightArrow = 39
    DownArrow = 40
    Select = 41
    Print = 42
    Execute = 43
    PrintScreen = 44
    Insert = 45
    Delete = 46
    Help = 47
    D0 = 48
    D1 = 49
    D2 = 50
    D3 = 51
    D4 = 52
    D5 = 53
    D6 = 54
    D7 = 55
    D8 = 56
    D9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    LeftWindows = 91
    RightWindows = 92
    Applications = 93
    Sleep = 95
    NumPad0 = 96
    NumPad1 = 97
    NumPad2 = 98
    NumPad3 = 99
    NumPad4 = 100
    NumPad5 = 101
    NumPad6 = 102
    NumPad7 = 103
    NumPad8 = 104
    NumPad9 = 105
    Multiply = 106
    Add = 107
    Separator = 108
    Subtract = 109
    Decimal = 110
    Divide = 111
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    F13 = 124
    F14 = 125
    F15 = 126
    F16 = 127
    F17 = 128
    F18 = 129
    F19 = 130
    F20 = 131
    F21 = 132
    F22 = 133
    F23 = 134
    F24 = 135
    BrowserBack = 166
    BrowserForward = 167
    BrowserRefresh = 168
    BrowserStop = 169
    BrowserSearch = 170
    BrowserFavorites = 171
    BrowserHome = 172
    VolumeMute = 173
    VolumeDown = 174
    VolumeUp = 175
    MediaNext = 176
    MediaPrevious = 177
    MediaStop = 178
    MediaPlay = 179
    LaunchMail = 180
    LaunchMediaSelect = 181
    LaunchApp1 = 182
    LaunchApp2 = 183
    Oem1 = 186
    OemPlus = 187
    OemComma = 188
    OemMinus = 189
    OemPeriod = 190
    Oem2 = 191
    Oem3 = 192
    Oem4 = 219
    Oem5 = 220
    Oem6 = 221
    Oem7 = 222
    Oem8 = 223
    Oem102 = 226
    Process = 229
    Packet = 231
    Attention = 246
    CrSel = 247
    ExSel = 248
    EraseEndOfFile = 249
    Play = 250
    Zoom = 251
    NoName = 252
    Pa1 = 253
    OemClear = 254

class ConsoleKeyInfo(ValueType):
    """    """
    def __init__(self, keyChar: Char, key: ConsoleKey, shift: bool, alt: bool, control: bool): ...
    @overload
    def Equals(self, value: object) -> bool: ...
    @overload
    def Equals(self, obj: ConsoleKeyInfo) -> bool: ...
    @property
    def Key(self) -> ConsoleKey: ...
    @property
    def KeyChar(self) -> Char: ...
    @property
    def Modifiers(self) -> ConsoleModifiers: ...
    @overload
    def GetHashCode() -> int: ...

class ConsoleModifiers(enum.Enum):
    Alt = 1
    Shift = 2
    Control = 4

# endregion

