"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Handshake", "Parity", "SerialData", "SerialDataReceivedEventArgs", "SerialDataReceivedEventHandler", "SerialError", "SerialErrorReceivedEventArgs", "SerialErrorReceivedEventHandler", "SerialPinChange", "SerialPinChangedEventArgs", "SerialPinChangedEventHandler", "SerialPort", "StopBits"]
# endregion

# region: Imports
from System import ComponentModel
from System import IO
from System import Text
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.IO.Ports, Version=7.0.0.0

class Handshake(enum.Enum):
    None_ = 0
    XOnXOff = 1
    RequestToSend = 2
    RequestToSendXOnXOff = 3

class Parity(enum.Enum):
    None_ = 0
    Odd = 1
    Even = 2
    Mark = 3
    Space = 4

class SerialData(enum.Enum):
    Chars = 1
    Eof = 2

class SerialDataReceivedEventArgs(System.EventArgs):
    """    """
    @property
    def EventType(self) -> SerialData: ...

class SerialDataReceivedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SerialDataReceivedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SerialDataReceivedEventArgs) -> None: ...

class SerialError(enum.Enum):
    RXOver = 1
    Overrun = 2
    RXParity = 4
    Frame = 8
    TXFull = 256

class SerialErrorReceivedEventArgs(System.EventArgs):
    """    """
    @property
    def EventType(self) -> SerialError: ...

class SerialErrorReceivedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SerialErrorReceivedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SerialErrorReceivedEventArgs) -> None: ...

class SerialPinChange(enum.Enum):
    CtsChanged = 8
    DsrChanged = 16
    CDChanged = 32
    Break = 64
    Ring = 256

class SerialPinChangedEventArgs(System.EventArgs):
    """    """
    @property
    def EventType(self) -> SerialPinChange: ...

class SerialPinChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: SerialPinChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: SerialPinChangedEventArgs) -> None: ...

class SerialPort(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: ComponentModel.IContainer): ...
    @overload
    def __init__(self, portName: str): ...
    @overload
    def __init__(self, portName: str, baudRate: int): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity, dataBits: int): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity, dataBits: int, stopBits: StopBits): ...
    @property
    def InfiniteTimeout(self) -> int: ...
    @overload
    def Close() -> None: ...
    @overload
    def DiscardInBuffer() -> None: ...
    @overload
    def DiscardOutBuffer() -> None: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def BaudRate(self) -> int: ...
    @property
    def BreakState(self) -> bool: ...
    @property
    def BytesToRead(self) -> int: ...
    @property
    def BytesToWrite(self) -> int: ...
    @property
    def CDHolding(self) -> bool: ...
    @property
    def CtsHolding(self) -> bool: ...
    @property
    def DataBits(self) -> int: ...
    @property
    def DiscardNull(self) -> bool: ...
    @property
    def DsrHolding(self) -> bool: ...
    @property
    def DtrEnable(self) -> bool: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def Handshake(self) -> Handshake: ...
    @property
    def IsOpen(self) -> bool: ...
    @property
    def NewLine(self) -> str: ...
    @property
    def Parity(self) -> Parity: ...
    @property
    def ParityReplace(self) -> System.Byte: ...
    @property
    def PortName(self) -> str: ...
    @property
    def ReadBufferSize(self) -> int: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def ReceivedBytesThreshold(self) -> int: ...
    @property
    def RtsEnable(self) -> bool: ...
    @property
    def StopBits(self) -> StopBits: ...
    @property
    def WriteBufferSize(self) -> int: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    @staticmethod
    def GetPortNames() -> System.System.Array[str]: ...
    @overload
    def Open() -> None: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], offset: int, count: int) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def ReadChar() -> int: ...
    @overload
    def ReadExisting() -> str: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadTo(self, value: str) -> str: ...
    @BaudRate.setter
    def BaudRate(self, value: System.Void): ...
    @BreakState.setter
    def BreakState(self, value: System.Void): ...
    @DataBits.setter
    def DataBits(self, value: System.Void): ...
    @DiscardNull.setter
    def DiscardNull(self, value: System.Void): ...
    @DtrEnable.setter
    def DtrEnable(self, value: System.Void): ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @Handshake.setter
    def Handshake(self, value: System.Void): ...
    @NewLine.setter
    def NewLine(self, value: System.Void): ...
    @Parity.setter
    def Parity(self, value: System.Void): ...
    @ParityReplace.setter
    def ParityReplace(self, value: System.Void): ...
    @PortName.setter
    def PortName(self, value: System.Void): ...
    @ReadBufferSize.setter
    def ReadBufferSize(self, value: System.Void): ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: System.Void): ...
    @ReceivedBytesThreshold.setter
    def ReceivedBytesThreshold(self, value: System.Void): ...
    @RtsEnable.setter
    def RtsEnable(self, value: System.Void): ...
    @StopBits.setter
    def StopBits(self, value: System.Void): ...
    @WriteBufferSize.setter
    def WriteBufferSize(self, value: System.Void): ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: System.Void): ...
    @overload
    def Write(self, text: str) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], offset: int, count: int) -> None: ...
    @overload
    def WriteLine(self, text: str) -> None: ...
    @property
    def ErrorReceived(self): ...
    @property
    def PinChanged(self): ...
    @property
    def DataReceived(self): ...
    @property
    def Disposed(self): ...

class StopBits(enum.Enum):
    None_ = 0
    One = 1
    Two = 2
    OnePointFive = 3

# endregion
