"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IsolatedStorageException", "IsolatedStorageFile", "IsolatedStorageFileStream", "IsolatedStorage", "IsolatedStorageScope", "INormalizeForIsolatedStorage"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Collections
from System import IO
from System import Threading
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.IO.IsolatedStorage, Version=7.0.0.0

class IsolatedStorageException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class IsolatedStorageFile(IsolatedStorage):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def CreateDirectory(self, dir_: str) -> None: ...
    @overload
    def CreateFile(self, path: str) -> IsolatedStorageFileStream: ...
    @overload
    def DeleteDirectory(self, dir_: str) -> None: ...
    @overload
    def DeleteFile(self, file: str) -> None: ...
    @overload
    def DirectoryExists(self, path: str) -> bool: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def FileExists(self, path: str) -> bool: ...
    @property
    def AvailableFreeSpace(self) -> System.Int64: ...
    @property
    def CurrentSize(self) -> System.UInt64: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def MaximumSize(self) -> System.UInt64: ...
    @property
    def Quota(self) -> System.Int64: ...
    @property
    def UsedSize(self) -> System.Int64: ...
    @overload
    def GetCreationTime(self, path: str) -> System.DateTimeOffset: ...
    @overload
    def GetDirectoryNames() -> System.System.Array[str]: ...
    @overload
    def GetDirectoryNames(self, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetEnumerator(scope: IsolatedStorageScope) -> Collections.IEnumerator: ...
    @overload
    def GetFileNames() -> System.System.Array[str]: ...
    @overload
    def GetFileNames(self, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    def GetLastAccessTime(self, path: str) -> System.DateTimeOffset: ...
    @overload
    def GetLastWriteTime(self, path: str) -> System.DateTimeOffset: ...
    @overload
    @staticmethod
    def GetMachineStoreForApplication() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetMachineStoreForAssembly() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetMachineStoreForDomain() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetStore(scope: IsolatedStorageScope, applicationEvidenceType: System.Type) -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetStore(scope: IsolatedStorageScope, applicationIdentity: object) -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetStore(scope: IsolatedStorageScope, domainEvidenceType: System.Type, assemblyEvidenceType: System.Type) -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetStore(scope: IsolatedStorageScope, domainIdentity: object, assemblyIdentity: object) -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetUserStoreForApplication() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetUserStoreForAssembly() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetUserStoreForDomain() -> IsolatedStorageFile: ...
    @overload
    @staticmethod
    def GetUserStoreForSite() -> IsolatedStorageFile: ...
    @overload
    def IncreaseQuotaTo(self, newQuotaSize: System.Int64) -> bool: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def OpenFile(self, path: str, mode: IO.FileMode) -> IsolatedStorageFileStream: ...
    @overload
    def OpenFile(self, path: str, mode: IO.FileMode, access: IO.FileAccess) -> IsolatedStorageFileStream: ...
    @overload
    def OpenFile(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare) -> IsolatedStorageFileStream: ...
    @overload
    def Remove() -> None: ...
    @overload
    @staticmethod
    def Remove(scope: IsolatedStorageScope) -> None: ...

class IsolatedStorageFileStream(IO.FileStream):
    """    """
    @overload
    def __init__(self, path: str, mode: IO.FileMode): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare, bufferSize: int): ...
    @overload
    def __init__(self, path: str, mode: IO.FileMode, access: IO.FileAccess, share: IO.FileShare, bufferSize: int, isf: IsolatedStorageFile): ...
    @overload
    def BeginRead(self, array: System.System.Array[System.Byte], offset: int, numBytes: int, userCallback: System.AsyncCallback, stateObject: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, array: System.System.Array[System.Byte], offset: int, numBytes: int, userCallback: System.AsyncCallback, stateObject: object) -> System.IAsyncResult: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def Flush(self, flushToDisk: bool) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def SafeFileHandle(self) -> SafeHandles.SafeFileHandle: ...
    @overload
    def Lock(self, position: System.Int64, length: System.Int64) -> None: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Unlock(self, position: System.Int64, length: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class IsolatedStorage(System.MarshalByRefObject):
    """    """
    @property
    def ApplicationIdentity(self) -> object: ...
    @property
    def AssemblyIdentity(self) -> object: ...
    @property
    def AvailableFreeSpace(self) -> System.Int64: ...
    @property
    def CurrentSize(self) -> System.UInt64: ...
    @property
    def DomainIdentity(self) -> object: ...
    @property
    def MaximumSize(self) -> System.UInt64: ...
    @property
    def Quota(self) -> System.Int64: ...
    @property
    def Scope(self) -> IsolatedStorageScope: ...
    @property
    def UsedSize(self) -> System.Int64: ...
    @overload
    def IncreaseQuotaTo(self, newQuotaSize: System.Int64) -> bool: ...
    @overload
    def Remove() -> None: ...

class IsolatedStorageScope(enum.Enum):
    None_ = 0
    User = 1
    Domain = 2
    Assembly = 4
    Roaming = 8
    Machine = 16
    Application = 32

class INormalizeForIsolatedStorage:
    """    """
    @overload
    def Normalize() -> object: ...

# endregion
