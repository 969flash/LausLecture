"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ZipFile", "ZipFileExtensions"]
# endregion

# region: Imports
from System import Text
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["ZipArchive", "ZipArchiveEntry", "ZipArchiveMode", "DeflateStream", "ZLibException", "CompressionLevel", "CompressionMode", "GZipStream", "ZLibStream"]
# endregion

# region: Imports
from System import IO
from System import Text
from System import Threading
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["BrotliStream", "BrotliDecoder", "BrotliEncoder"]
# endregion

# region: Imports
from System import Buffers
from System import IO
from System import Threading
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import System
# endregion

# region: System.IO.Compression.Brotli, Version=7.0.0.0

class BrotliStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode, leaveOpen: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class BrotliDecoder(System.ValueType):
    """    """
    @overload
    def Decompress(self, source: System.ReadOnlySpan, destination: System.Span) -> (Buffers.OperationStatus, int, int): ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def TryDecompress(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class BrotliEncoder(System.ValueType):
    """    """
    def __init__(self, quality: int, window: int): ...
    @overload
    def Compress(self, source: System.ReadOnlySpan, destination: System.Span, isFinalBlock: bool) -> (Buffers.OperationStatus, int, int): ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Flush(self, destination: System.Span) -> (Buffers.OperationStatus, int): ...
    @overload
    @staticmethod
    def GetMaxCompressedLength(inputSize: int) -> int: ...
    @overload
    @staticmethod
    def TryCompress(source: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryCompress(source: System.ReadOnlySpan, destination: System.Span, quality: int, window: int) -> (bool, int): ...

# endregion

# region: System.IO.Compression, Version=7.0.0.0

class ZipArchive(object):
    """    """
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: ZipArchiveMode): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: ZipArchiveMode, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: ZipArchiveMode, leaveOpen: bool, entryNameEncoding: Text.Encoding): ...
    @overload
    def CreateEntry(self, entryName: str) -> ZipArchiveEntry: ...
    @overload
    def CreateEntry(self, entryName: str, compressionLevel: CompressionLevel) -> ZipArchiveEntry: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Comment(self) -> str: ...
    @property
    def Entries(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def Mode(self) -> ZipArchiveMode: ...
    @overload
    def GetEntry(self, entryName: str) -> ZipArchiveEntry: ...
    @Comment.setter
    def Comment(self, value: System.Void): ...

class ZipArchiveEntry(object):
    """    """
    @overload
    def Delete() -> None: ...
    @property
    def Archive(self) -> ZipArchive: ...
    @property
    def Comment(self) -> str: ...
    @property
    def CompressedLength(self) -> System.Int64: ...
    @property
    def Crc32(self) -> System.UInt32: ...
    @property
    def ExternalAttributes(self) -> int: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsEncrypted(self) -> bool: ...
    @property
    def LastWriteTime(self) -> System.DateTimeOffset: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Name(self) -> str: ...
    @overload
    def Open() -> IO.Stream: ...
    @Comment.setter
    def Comment(self, value: System.Void): ...
    @ExternalAttributes.setter
    def ExternalAttributes(self, value: System.Void): ...
    @LastWriteTime.setter
    def LastWriteTime(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ZipArchiveMode(enum.Enum):
    Read = 0
    Create = 1
    Update = 2

class DeflateStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel, leaveOpen: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def CopyTo(self, destination: IO.Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: IO.Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class ZLibException(IO.IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, zlibErrorContext: str, zlibErrorCode: int, zlibErrorMessage: str): ...

class CompressionLevel(enum.Enum):
    Optimal = 0
    Fastest = 1
    NoCompression = 2
    SmallestSize = 3

class CompressionMode(enum.Enum):
    Decompress = 0
    Compress = 1

class GZipStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel, leaveOpen: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def CopyTo(self, destination: IO.Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: IO.Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class ZLibStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel): ...
    @overload
    def __init__(self, stream: IO.Stream, mode: CompressionMode, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: IO.Stream, compressionLevel: CompressionLevel, leaveOpen: bool): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, asyncCallback: System.AsyncCallback, asyncState: object) -> System.IAsyncResult: ...
    @overload
    def CopyTo(self, destination: IO.Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: IO.Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

# endregion

# region: System.IO.Compression.ZipFile, Version=7.0.0.0

class ZipFile(object):
    """    """
    @overload
    @staticmethod
    def CreateFromDirectory(sourceDirectoryName: str, destinationArchiveFileName: str) -> None: ...
    @overload
    @staticmethod
    def CreateFromDirectory(sourceDirectoryName: str, destinationArchiveFileName: str, compressionLevel: CompressionLevel, includeBaseDirectory: bool) -> None: ...
    @overload
    @staticmethod
    def CreateFromDirectory(sourceDirectoryName: str, destinationArchiveFileName: str, compressionLevel: CompressionLevel, includeBaseDirectory: bool, entryNameEncoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def ExtractToDirectory(sourceArchiveFileName: str, destinationDirectoryName: str) -> None: ...
    @overload
    @staticmethod
    def ExtractToDirectory(sourceArchiveFileName: str, destinationDirectoryName: str, overwriteFiles: bool) -> None: ...
    @overload
    @staticmethod
    def ExtractToDirectory(sourceArchiveFileName: str, destinationDirectoryName: str, entryNameEncoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def ExtractToDirectory(sourceArchiveFileName: str, destinationDirectoryName: str, entryNameEncoding: Text.Encoding, overwriteFiles: bool) -> None: ...
    @overload
    @staticmethod
    def Open(archiveFileName: str, mode: ZipArchiveMode) -> ZipArchive: ...
    @overload
    @staticmethod
    def Open(archiveFileName: str, mode: ZipArchiveMode, entryNameEncoding: Text.Encoding) -> ZipArchive: ...
    @overload
    @staticmethod
    def OpenRead(archiveFileName: str) -> ZipArchive: ...

class ZipFileExtensions(object):
    """    """
    @overload
    @staticmethod
    def CreateEntryFromFile(destination: ZipArchive, sourceFileName: str, entryName: str) -> ZipArchiveEntry: ...
    @overload
    @staticmethod
    def CreateEntryFromFile(destination: ZipArchive, sourceFileName: str, entryName: str, compressionLevel: CompressionLevel) -> ZipArchiveEntry: ...
    @overload
    @staticmethod
    def ExtractToDirectory(source: ZipArchive, destinationDirectoryName: str) -> None: ...
    @overload
    @staticmethod
    def ExtractToDirectory(source: ZipArchive, destinationDirectoryName: str, overwriteFiles: bool) -> None: ...
    @overload
    @staticmethod
    def ExtractToFile(source: ZipArchiveEntry, destinationFileName: str) -> None: ...
    @overload
    @staticmethod
    def ExtractToFile(source: ZipArchiveEntry, destinationFileName: str, overwrite: bool) -> None: ...

# endregion
