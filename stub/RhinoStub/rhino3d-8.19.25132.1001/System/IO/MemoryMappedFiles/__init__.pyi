"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["MemoryMappedFileOptions", "MemoryMappedFileAccess", "MemoryMappedFile", "MemoryMappedViewAccessor", "MemoryMappedViewStream", "MemoryMappedFileRights"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import IO
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.IO.MemoryMappedFiles, Version=7.0.0.0

class MemoryMappedFileOptions(enum.Enum):
    None_ = 0
    DelayAllocatePages = 67108864

class MemoryMappedFileAccess(enum.Enum):
    ReadWrite = 0
    Read = 1
    Write = 2
    CopyOnWrite = 3
    ReadExecute = 4
    ReadWriteExecute = 5

class MemoryMappedFile(object):
    """    """
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str, mode: IO.FileMode) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str, mode: IO.FileMode, mapName: str) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str, mode: IO.FileMode, mapName: str, capacity: System.Int64) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str, mode: IO.FileMode, mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateFromFile(fileStream: IO.FileStream, mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess, inheritability: IO.HandleInheritability, leaveOpen: bool) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateNew(mapName: str, capacity: System.Int64) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateNew(mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateNew(mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess, options: MemoryMappedFileOptions, inheritability: IO.HandleInheritability) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateOrOpen(mapName: str, capacity: System.Int64) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateOrOpen(mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def CreateOrOpen(mapName: str, capacity: System.Int64, access: MemoryMappedFileAccess, options: MemoryMappedFileOptions, inheritability: IO.HandleInheritability) -> MemoryMappedFile: ...
    @overload
    def CreateViewAccessor() -> MemoryMappedViewAccessor: ...
    @overload
    def CreateViewAccessor(self, offset: System.Int64, size: System.Int64) -> MemoryMappedViewAccessor: ...
    @overload
    def CreateViewAccessor(self, offset: System.Int64, size: System.Int64, access: MemoryMappedFileAccess) -> MemoryMappedViewAccessor: ...
    @overload
    def CreateViewStream() -> MemoryMappedViewStream: ...
    @overload
    def CreateViewStream(self, offset: System.Int64, size: System.Int64) -> MemoryMappedViewStream: ...
    @overload
    def CreateViewStream(self, offset: System.Int64, size: System.Int64, access: MemoryMappedFileAccess) -> MemoryMappedViewStream: ...
    @overload
    def Dispose() -> None: ...
    @property
    def SafeMemoryMappedFileHandle(self) -> SafeHandles.SafeMemoryMappedFileHandle: ...
    @overload
    @staticmethod
    def OpenExisting(mapName: str) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def OpenExisting(mapName: str, desiredAccessRights: MemoryMappedFileRights) -> MemoryMappedFile: ...
    @overload
    @staticmethod
    def OpenExisting(mapName: str, desiredAccessRights: MemoryMappedFileRights, inheritability: IO.HandleInheritability) -> MemoryMappedFile: ...

class MemoryMappedViewAccessor(IO.UnmanagedMemoryAccessor):
    """    """
    @overload
    def Flush() -> None: ...
    @property
    def PointerOffset(self) -> System.Int64: ...
    @property
    def SafeMemoryMappedViewHandle(self) -> SafeHandles.SafeMemoryMappedViewHandle: ...

class MemoryMappedViewStream(IO.UnmanagedMemoryStream):
    """    """
    @overload
    def Flush() -> None: ...
    @property
    def PointerOffset(self) -> System.Int64: ...
    @property
    def SafeMemoryMappedViewHandle(self) -> SafeHandles.SafeMemoryMappedViewHandle: ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...

class MemoryMappedFileRights(enum.Enum):
    CopyOnWrite = 1
    Write = 2
    Read = 4
    ReadWrite = 6
    Execute = 8
    ReadExecute = 12
    ReadWriteExecute = 14
    Delete = 65536
    ReadPermissions = 131072
    ChangePermissions = 262144
    TakeOwnership = 524288
    FullControl = 983055
    AccessSystemSecurity = 16777216

# endregion
