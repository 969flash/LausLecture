"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CompressionOption", "EncryptionOption", "Package", "PackagePart", "PackagePartCollection", "PackageProperties", "PackageRelationship", "PackageRelationshipCollection", "PackageRelationshipSelector", "PackageRelationshipSelectorType", "PackUriHelper", "TargetMode", "ZipPackage", "ZipPackagePart"]
# endregion

# region: Imports
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.IO.Packaging, Version=7.0.0.0

class CompressionOption(enum.Enum):
    Normal = 0
    Maximum = 1
    Fast = 2
    SuperFast = 3
    NotCompressed = -1

class EncryptionOption(enum.Enum):
    None_ = 0
    RightsManagement = 1

class Package(object):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CreatePart(self, partUri: System.Uri, contentType: str) -> PackagePart: ...
    @overload
    def CreatePart(self, partUri: System.Uri, contentType: str, compressionOption: CompressionOption) -> PackagePart: ...
    @overload
    def CreateRelationship(self, targetUri: System.Uri, targetMode: TargetMode, relationshipType: str) -> PackageRelationship: ...
    @overload
    def CreateRelationship(self, targetUri: System.Uri, targetMode: TargetMode, relationshipType: str, id_: str) -> PackageRelationship: ...
    @overload
    def DeletePart(self, partUri: System.Uri) -> None: ...
    @overload
    def DeleteRelationship(self, id_: str) -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def FileOpenAccess(self) -> IO.FileAccess: ...
    @property
    def PackageProperties(self) -> PackageProperties: ...
    @overload
    def GetPart(self, partUri: System.Uri) -> PackagePart: ...
    @overload
    def GetParts() -> PackagePartCollection: ...
    @overload
    def GetRelationship(self, id_: str) -> PackageRelationship: ...
    @overload
    def GetRelationships() -> PackageRelationshipCollection: ...
    @overload
    def GetRelationshipsByType(self, relationshipType: str) -> PackageRelationshipCollection: ...
    @overload
    @staticmethod
    def Open(path: str) -> Package: ...
    @overload
    @staticmethod
    def Open(stream: IO.Stream) -> Package: ...
    @overload
    @staticmethod
    def Open(stream: IO.Stream, packageMode: IO.FileMode) -> Package: ...
    @overload
    @staticmethod
    def Open(path: str, packageMode: IO.FileMode) -> Package: ...
    @overload
    @staticmethod
    def Open(path: str, packageMode: IO.FileMode, packageAccess: IO.FileAccess) -> Package: ...
    @overload
    @staticmethod
    def Open(stream: IO.Stream, packageMode: IO.FileMode, packageAccess: IO.FileAccess) -> Package: ...
    @overload
    @staticmethod
    def Open(path: str, packageMode: IO.FileMode, packageAccess: IO.FileAccess, packageShare: IO.FileShare) -> Package: ...
    @overload
    def PartExists(self, partUri: System.Uri) -> bool: ...
    @overload
    def RelationshipExists(self, id_: str) -> bool: ...

class PackagePart(object):
    """    """
    @overload
    def CreateRelationship(self, targetUri: System.Uri, targetMode: TargetMode, relationshipType: str) -> PackageRelationship: ...
    @overload
    def CreateRelationship(self, targetUri: System.Uri, targetMode: TargetMode, relationshipType: str, id_: str) -> PackageRelationship: ...
    @overload
    def DeleteRelationship(self, id_: str) -> None: ...
    @property
    def CompressionOption(self) -> CompressionOption: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Package(self) -> Package: ...
    @property
    def Uri(self) -> System.Uri: ...
    @overload
    def GetRelationship(self, id_: str) -> PackageRelationship: ...
    @overload
    def GetRelationships() -> PackageRelationshipCollection: ...
    @overload
    def GetRelationshipsByType(self, relationshipType: str) -> PackageRelationshipCollection: ...
    @overload
    def GetStream() -> IO.Stream: ...
    @overload
    def GetStream(self, mode: IO.FileMode) -> IO.Stream: ...
    @overload
    def GetStream(self, mode: IO.FileMode, access: IO.FileAccess) -> IO.Stream: ...
    @overload
    def RelationshipExists(self, id_: str) -> bool: ...

class PackagePartCollection(object):
    """    """
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class PackageProperties(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Category(self) -> str: ...
    @property
    def ContentStatus(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Created(self) -> System.Nullable: ...
    @property
    def Creator(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def Keywords(self) -> str: ...
    @property
    def Language(self) -> str: ...
    @property
    def LastModifiedBy(self) -> str: ...
    @property
    def LastPrinted(self) -> System.Nullable: ...
    @property
    def Modified(self) -> System.Nullable: ...
    @property
    def Revision(self) -> str: ...
    @property
    def Subject(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Category.setter
    def Category(self, value: System.Void): ...
    @ContentStatus.setter
    def ContentStatus(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @Created.setter
    def Created(self, value: System.Void): ...
    @Creator.setter
    def Creator(self, value: System.Void): ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Identifier.setter
    def Identifier(self, value: System.Void): ...
    @Keywords.setter
    def Keywords(self, value: System.Void): ...
    @Language.setter
    def Language(self, value: System.Void): ...
    @LastModifiedBy.setter
    def LastModifiedBy(self, value: System.Void): ...
    @LastPrinted.setter
    def LastPrinted(self, value: System.Void): ...
    @Modified.setter
    def Modified(self, value: System.Void): ...
    @Revision.setter
    def Revision(self, value: System.Void): ...
    @Subject.setter
    def Subject(self, value: System.Void): ...
    @Title.setter
    def Title(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...

class PackageRelationship(object):
    """    """
    @property
    def Id(self) -> str: ...
    @property
    def Package(self) -> Package: ...
    @property
    def RelationshipType(self) -> str: ...
    @property
    def SourceUri(self) -> System.Uri: ...
    @property
    def TargetMode(self) -> TargetMode: ...
    @property
    def TargetUri(self) -> System.Uri: ...

class PackageRelationshipCollection(object):
    """    """
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...

class PackageRelationshipSelector(object):
    """    """
    def __init__(self, sourceUri: System.Uri, selectorType: PackageRelationshipSelectorType, selectionCriteria: str): ...
    @property
    def SelectionCriteria(self) -> str: ...
    @property
    def SelectorType(self) -> PackageRelationshipSelectorType: ...
    @property
    def SourceUri(self) -> System.Uri: ...
    @overload
    def Select(self, package: Package) -> Generic.List: ...

class PackageRelationshipSelectorType(enum.Enum):
    Id = 0
    Type = 1

class PackUriHelper(object):
    """    """
    @property
    def UriSchemePack(self) -> str: ...
    @overload
    @staticmethod
    def ComparePackUri(firstPackUri: System.Uri, secondPackUri: System.Uri) -> int: ...
    @overload
    @staticmethod
    def ComparePartUri(firstPartUri: System.Uri, secondPartUri: System.Uri) -> int: ...
    @overload
    @staticmethod
    def Create(packageUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def Create(packageUri: System.Uri, partUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def Create(packageUri: System.Uri, partUri: System.Uri, fragment: str) -> System.Uri: ...
    @overload
    @staticmethod
    def CreatePartUri(partUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetNormalizedPartUri(partUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetPackageUri(packUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetPartUri(packUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetRelationshipPartUri(partUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetRelativeUri(sourcePartUri: System.Uri, targetPartUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def GetSourcePartUriFromRelationshipPartUri(relationshipPartUri: System.Uri) -> System.Uri: ...
    @overload
    @staticmethod
    def IsRelationshipPartUri(partUri: System.Uri) -> bool: ...
    @overload
    @staticmethod
    def ResolvePartUri(sourcePartUri: System.Uri, targetUri: System.Uri) -> System.Uri: ...

class TargetMode(enum.Enum):
    Internal = 0
    External = 1

class ZipPackage(Package):
    """    """

class ZipPackagePart(PackagePart):
    """    """

# endregion
