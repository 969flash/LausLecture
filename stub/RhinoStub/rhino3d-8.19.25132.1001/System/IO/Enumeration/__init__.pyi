"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["FileSystemEnumerator", "FileSystemEnumerable", "FindPredicate", "FindTransform", "FileSystemName"]
# endregion

# region: Imports
from System import IO
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import ConstrainedExecution
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class FileSystemEnumerator(ConstrainedExecution.CriticalFinalizerObject):
    """    FileSystemEnumerator[TResult]
    """
    def __init__(self, directory: str, options: IO.EnumerationOptions): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> TResult: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class FileSystemEnumerable(object):
    """    FileSystemEnumerable[TResult]
    """
    def __init__(self, directory: str, transform: FindTransform, options: IO.EnumerationOptions): ...
    @property
    def ShouldIncludePredicate(self) -> FindPredicate: ...
    @property
    def ShouldRecursePredicate(self) -> FindPredicate: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @ShouldIncludePredicate.setter
    def ShouldIncludePredicate(self, value: System.Void): ...
    @ShouldRecursePredicate.setter
    def ShouldRecursePredicate(self, value: System.Void): ...

class FindPredicate(System.MulticastDelegate):
    """    FindPredicate[TResult]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, FileSystemEntry): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (bool, FileSystemEntry): ...
    @overload
    def Invoke() -> (bool, FileSystemEntry): ...

class FindTransform(System.MulticastDelegate):
    """    FindTransform[TResult]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, FileSystemEntry): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (TResult, FileSystemEntry): ...
    @overload
    def Invoke() -> (TResult, FileSystemEntry): ...

class FileSystemName(object):
    """    """
    @overload
    @staticmethod
    def MatchesSimpleExpression(expression: System.ReadOnlySpan, name: System.ReadOnlySpan, ignoreCase: bool) -> bool: ...
    @overload
    @staticmethod
    def MatchesWin32Expression(expression: System.ReadOnlySpan, name: System.ReadOnlySpan, ignoreCase: bool) -> bool: ...
    @overload
    @staticmethod
    def TranslateWin32Expression(expression: str) -> str: ...

# endregion
