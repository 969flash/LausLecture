"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AnonymousPipeClientStream", "AnonymousPipeServerStream", "NamedPipeClientStream", "NamedPipeServerStream", "PipeStreamImpersonationWorker", "PipeDirection", "PipeOptions", "PipeStream", "PipeTransmissionMode", "AnonymousPipeServerStreamAcl", "NamedPipeServerStreamAcl", "PipeAccessRights", "PipeAccessRule", "PipeAuditRule", "PipesAclExtensions", "PipeSecurity"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import IO
from System import Threading
from System.Runtime import CompilerServices
from System.Security import AccessControl
from System.Security import Principal
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.IO.Pipes, Version=7.0.0.0

class AnonymousPipeClientStream(PipeStream):
    """    """
    @overload
    def __init__(self, pipeHandleAsString: str): ...
    @overload
    def __init__(self, direction: PipeDirection, pipeHandleAsString: str): ...
    @overload
    def __init__(self, direction: PipeDirection, safePipeHandle: SafeHandles.SafePipeHandle): ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    @ReadMode.setter
    def ReadMode(self, value: System.Void): ...

class AnonymousPipeServerStream(PipeStream):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, direction: PipeDirection): ...
    @overload
    def __init__(self, direction: PipeDirection, inheritability: IO.HandleInheritability): ...
    @overload
    def __init__(self, direction: PipeDirection, serverSafePipeHandle: SafeHandles.SafePipeHandle, clientSafePipeHandle: SafeHandles.SafePipeHandle): ...
    @overload
    def __init__(self, direction: PipeDirection, inheritability: IO.HandleInheritability, bufferSize: int): ...
    @overload
    def DisposeLocalCopyOfClientHandle() -> None: ...
    @property
    def ClientSafePipeHandle(self) -> SafeHandles.SafePipeHandle: ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    @overload
    def GetClientHandleAsString() -> str: ...
    @ReadMode.setter
    def ReadMode(self, value: System.Void): ...

class NamedPipeClientStream(PipeStream):
    """    """
    @overload
    def __init__(self, pipeName: str): ...
    @overload
    def __init__(self, serverName: str, pipeName: str): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions): ...
    @overload
    def __init__(self, direction: PipeDirection, isAsync: bool, isConnected: bool, safePipeHandle: SafeHandles.SafePipeHandle): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions, impersonationLevel: Principal.TokenImpersonationLevel): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions, impersonationLevel: Principal.TokenImpersonationLevel, inheritability: IO.HandleInheritability): ...
    @overload
    def Connect() -> None: ...
    @overload
    def Connect(self, timeout: int) -> None: ...
    @overload
    def Connect(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def ConnectAsync() -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, timeout: int) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, timeout: System.TimeSpan, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ConnectAsync(self, timeout: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def NumberOfServerInstances(self) -> int: ...

class NamedPipeServerStream(PipeStream):
    """    """
    @overload
    def __init__(self, pipeName: str): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode): ...
    @overload
    def __init__(self, direction: PipeDirection, isAsync: bool, isConnected: bool, safePipeHandle: SafeHandles.SafePipeHandle): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions, inBufferSize: int, outBufferSize: int): ...
    @property
    def MaxAllowedServerInstances(self) -> int: ...
    @overload
    def BeginWaitForConnection(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Disconnect() -> None: ...
    @overload
    def EndWaitForConnection(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def GetImpersonationUserName() -> str: ...
    @overload
    def RunAsClient(self, impersonationWorker: PipeStreamImpersonationWorker) -> None: ...
    @overload
    def WaitForConnection() -> None: ...
    @overload
    def WaitForConnectionAsync() -> Tasks.Task: ...
    @overload
    def WaitForConnectionAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class PipeStreamImpersonationWorker(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke() -> None: ...

class PipeDirection(enum.Enum):
    In = 1
    Out = 2
    InOut = 3

class PipeOptions(enum.Enum):
    None_ = 0
    CurrentUserOnly = 536870912
    Asynchronous = 1073741824
    WriteThrough = -2147483648

class PipeStream(IO.Stream):
    """    """
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def InBufferSize(self) -> int: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsMessageComplete(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def OutBufferSize(self) -> int: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def ReadMode(self) -> PipeTransmissionMode: ...
    @property
    def SafePipeHandle(self) -> SafeHandles.SafePipeHandle: ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @ReadMode.setter
    def ReadMode(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def WaitForPipeDrain() -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class PipeTransmissionMode(enum.Enum):
    Byte = 0
    Message = 1

class AnonymousPipeServerStreamAcl(object):
    """    """
    @overload
    @staticmethod
    def Create(direction: PipeDirection, inheritability: IO.HandleInheritability, bufferSize: int, pipeSecurity: PipeSecurity) -> AnonymousPipeServerStream: ...

class NamedPipeServerStreamAcl(object):
    """    """
    @overload
    @staticmethod
    def Create(pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions, inBufferSize: int, outBufferSize: int, pipeSecurity: PipeSecurity, inheritability: IO.HandleInheritability, additionalAccessRights: PipeAccessRights) -> NamedPipeServerStream: ...

class PipeAccessRights(enum.Enum):
    ReadData = 1
    WriteData = 2
    CreateNewInstance = 4
    ReadExtendedAttributes = 8
    WriteExtendedAttributes = 16
    ReadAttributes = 128
    WriteAttributes = 256
    Write = 274
    Delete = 65536
    ReadPermissions = 131072
    Read = 131209
    ReadWrite = 131483
    ChangePermissions = 262144
    TakeOwnership = 524288
    Synchronize = 1048576
    FullControl = 2032031
    AccessSystemSecurity = 16777216

class PipeAccessRule(AccessControl.AccessRule):
    """    """
    @overload
    def __init__(self, identity: str, rights: PipeAccessRights, type_: AccessControl.AccessControlType): ...
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: PipeAccessRights, type_: AccessControl.AccessControlType): ...
    @property
    def PipeAccessRights(self) -> PipeAccessRights: ...

class PipeAuditRule(AccessControl.AuditRule):
    """    """
    @overload
    def __init__(self, identity: Principal.IdentityReference, rights: PipeAccessRights, flags: AccessControl.AuditFlags): ...
    @overload
    def __init__(self, identity: str, rights: PipeAccessRights, flags: AccessControl.AuditFlags): ...
    @property
    def PipeAccessRights(self) -> PipeAccessRights: ...

class PipesAclExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetAccessControl(stream: PipeStream) -> PipeSecurity: ...
    @overload
    @staticmethod
    def SetAccessControl(stream: PipeStream, pipeSecurity: PipeSecurity) -> None: ...

class PipeSecurity(AccessControl.NativeObjectSecurity):
    """    """
    def __init__(self): ...
    @overload
    def AccessRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: AccessControl.InheritanceFlags, propagationFlags: AccessControl.PropagationFlags, type_: AccessControl.AccessControlType) -> AccessControl.AccessRule: ...
    @overload
    def AddAccessRule(self, rule: PipeAccessRule) -> None: ...
    @overload
    def AddAuditRule(self, rule: PipeAuditRule) -> None: ...
    @overload
    def AuditRuleFactory(self, identityReference: Principal.IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: AccessControl.InheritanceFlags, propagationFlags: AccessControl.PropagationFlags, flags: AccessControl.AuditFlags) -> AccessControl.AuditRule: ...
    @property
    def AccessRightType(self) -> System.Type: ...
    @property
    def AccessRuleType(self) -> System.Type: ...
    @property
    def AuditRuleType(self) -> System.Type: ...
    @overload
    def RemoveAccessRule(self, rule: PipeAccessRule) -> bool: ...
    @overload
    def RemoveAccessRuleSpecific(self, rule: PipeAccessRule) -> None: ...
    @overload
    def RemoveAuditRule(self, rule: PipeAuditRule) -> bool: ...
    @overload
    def RemoveAuditRuleAll(self, rule: PipeAuditRule) -> None: ...
    @overload
    def RemoveAuditRuleSpecific(self, rule: PipeAuditRule) -> None: ...
    @overload
    def ResetAccessRule(self, rule: PipeAccessRule) -> None: ...
    @overload
    def SetAccessRule(self, rule: PipeAccessRule) -> None: ...
    @overload
    def SetAuditRule(self, rule: PipeAuditRule) -> None: ...

# endregion
