"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Compression"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Compression"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["IsolatedStorage"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Compression"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Pipes"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["MemoryMappedFiles"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Packaging", "FileFormatException"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["ErrorEventArgs", "ErrorEventHandler", "FileSystemEventArgs", "FileSystemEventHandler", "FileSystemWatcher", "InternalBufferOverflowException", "NotifyFilters", "RenamedEventArgs", "RenamedEventHandler", "WatcherChangeTypes", "WaitForChangedResult"]
# endregion

# region: Imports
from System import ComponentModel
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Ports"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Enumeration", "FileLoadException", "FileNotFoundException", "BinaryReader", "BinaryWriter", "BufferedStream", "Directory", "DirectoryInfo", "DirectoryNotFoundException", "EnumerationOptions", "EndOfStreamException", "File", "FileAccess", "FileAttributes", "FileInfo", "FileMode", "FileOptions", "FileShare", "FileStream", "FileStreamOptions", "FileSystemInfo", "HandleInheritability", "InvalidDataException", "IOException", "MatchCasing", "MatchType", "MemoryStream", "Path", "PathTooLongException", "RandomAccess", "SearchOption", "SeekOrigin", "Stream", "StreamReader", "StreamWriter", "StringReader", "StringWriter", "TextReader", "TextWriter", "UnixFileMode", "UnmanagedMemoryAccessor", "UnmanagedMemoryStream"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Text
from System import Threading
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from System.Runtime import Serialization
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["DriveInfo", "DriveNotFoundException", "DriveType"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.IO.FileSystem.DriveInfo, Version=7.0.0.0

class DriveInfo(object):
    """    """
    def __init__(self, driveName: str): ...
    @property
    def AvailableFreeSpace(self) -> System.Int64: ...
    @property
    def DriveFormat(self) -> str: ...
    @property
    def DriveType(self) -> DriveType: ...
    @property
    def IsReady(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RootDirectory(self) -> DirectoryInfo: ...
    @property
    def TotalFreeSpace(self) -> System.Int64: ...
    @property
    def TotalSize(self) -> System.Int64: ...
    @property
    def VolumeLabel(self) -> str: ...
    @overload
    @staticmethod
    def GetDrives() -> System.Array[DriveInfo]: ...
    @VolumeLabel.setter
    def VolumeLabel(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class DriveNotFoundException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class DriveType(enum.Enum):
    Unknown = 0
    NoRootDirectory = 1
    Removable = 2
    Fixed = 3
    Network = 4
    CDRom = 5
    Ram = 6

# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class FileLoadException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, fileName: str): ...
    @overload
    def __init__(self, message: str, fileName: str, inner: System.Exception): ...
    @property
    def FileName(self) -> str: ...
    @property
    def FusionLog(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class FileNotFoundException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, fileName: str): ...
    @overload
    def __init__(self, message: str, fileName: str, innerException: System.Exception): ...
    @property
    def FileName(self) -> str: ...
    @property
    def FusionLog(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class BinaryReader(object):
    """    """
    @overload
    def __init__(self, input_: Stream): ...
    @overload
    def __init__(self, input_: Stream, encoding: Text.Encoding): ...
    @overload
    def __init__(self, input_: Stream, encoding: Text.Encoding, leaveOpen: bool): ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def BaseStream(self) -> Stream: ...
    @overload
    def PeekChar() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def Read7BitEncodedInt() -> int: ...
    @overload
    def Read7BitEncodedInt64() -> System.Int64: ...
    @overload
    def ReadBoolean() -> bool: ...
    @overload
    def ReadByte() -> System.Byte: ...
    @overload
    def ReadBytes(self, count: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ReadChar() -> System.Char: ...
    @overload
    def ReadChars(self, count: int) -> System.System.Array[System.Char]: ...
    @overload
    def ReadDecimal() -> System.Decimal: ...
    @overload
    def ReadDouble() -> float: ...
    @overload
    def ReadHalf() -> System.Half: ...
    @overload
    def ReadInt16() -> System.Int16: ...
    @overload
    def ReadInt32() -> int: ...
    @overload
    def ReadInt64() -> System.Int64: ...
    @overload
    def ReadSByte() -> System.SByte: ...
    @overload
    def ReadSingle() -> System.Single: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ReadUInt16() -> System.UInt16: ...
    @overload
    def ReadUInt32() -> System.UInt32: ...
    @overload
    def ReadUInt64() -> System.UInt64: ...

class BinaryWriter(object):
    """    """
    @overload
    def __init__(self, output: Stream): ...
    @overload
    def __init__(self, output: Stream, encoding: Text.Encoding): ...
    @overload
    def __init__(self, output: Stream, encoding: Text.Encoding, leaveOpen: bool): ...
    @property
    def Null(self) -> BinaryWriter: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def Flush() -> None: ...
    @property
    def BaseStream(self) -> Stream: ...
    @overload
    def Seek(self, offset: int, origin: SeekOrigin) -> System.Int64: ...
    @overload
    def Write(self, value: System.Byte) -> None: ...
    @overload
    def Write(self, chars: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: System.Half) -> None: ...
    @overload
    def Write(self, value: System.Single) -> None: ...
    @overload
    def Write(self, value: System.UInt64) -> None: ...
    @overload
    def Write(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, value: bool) -> None: ...
    @overload
    def Write(self, value: System.UInt32) -> None: ...
    @overload
    def Write(self, value: System.UInt16) -> None: ...
    @overload
    def Write(self, value: System.Decimal) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, chars: System.System.Array[System.Char]) -> None: ...
    @overload
    def Write(self, ch: System.Char) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte]) -> None: ...
    @overload
    def Write(self, value: System.SByte) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: System.Int16) -> None: ...
    @overload
    def Write(self, chars: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def Write7BitEncodedInt(self, value: int) -> None: ...
    @overload
    def Write7BitEncodedInt64(self, value: System.Int64) -> None: ...

class BufferedStream(Stream):
    """    """
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, stream: Stream, bufferSize: int): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CopyTo(self, destination: Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def UnderlyingStream(self) -> Stream: ...
    @overload
    def Read(self, destination: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class Directory(object):
    """    """
    @overload
    @staticmethod
    def CreateDirectory(path: str) -> DirectoryInfo: ...
    @overload
    @staticmethod
    def CreateDirectory(path: str, unixCreateMode: UnixFileMode) -> DirectoryInfo: ...
    @overload
    @staticmethod
    def CreateSymbolicLink(path: str, pathToTarget: str) -> FileSystemInfo: ...
    @overload
    @staticmethod
    def CreateTempSubdirectory(prefix: str) -> DirectoryInfo: ...
    @overload
    @staticmethod
    def Delete(path: str) -> None: ...
    @overload
    @staticmethod
    def Delete(path: str, recursive: bool) -> None: ...
    @overload
    @staticmethod
    def EnumerateDirectories(path: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateDirectories(path: str, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateDirectories(path: str, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateDirectories(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFiles(path: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFiles(path: str, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFiles(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFiles(path: str, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFileSystemEntries(path: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFileSystemEntries(path: str, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFileSystemEntries(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def EnumerateFileSystemEntries(path: str, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def Exists(path: str) -> bool: ...
    @overload
    @staticmethod
    def GetCreationTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetCreationTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetCurrentDirectory() -> str: ...
    @overload
    @staticmethod
    def GetDirectories(path: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetDirectories(path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetDirectories(path: str, searchPattern: str, searchOption: SearchOption) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetDirectories(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetDirectoryRoot(path: str) -> str: ...
    @overload
    @staticmethod
    def GetFiles(path: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFiles(path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFiles(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFiles(path: str, searchPattern: str, searchOption: SearchOption) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFileSystemEntries(path: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFileSystemEntries(path: str, searchPattern: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFileSystemEntries(path: str, searchPattern: str, searchOption: SearchOption) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetFileSystemEntries(path: str, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetLastAccessTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastAccessTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLogicalDrives() -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def GetParent(path: str) -> DirectoryInfo: ...
    @overload
    @staticmethod
    def Move(sourceDirName: str, destDirName: str) -> None: ...
    @overload
    @staticmethod
    def ResolveLinkTarget(linkPath: str, returnFinalTarget: bool) -> FileSystemInfo: ...
    @overload
    @staticmethod
    def SetCreationTime(path: str, creationTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetCreationTimeUtc(path: str, creationTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetCurrentDirectory(path: str) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTime(path: str, lastAccessTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTimeUtc(path: str, lastAccessTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTime(path: str, lastWriteTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTimeUtc(path: str, lastWriteTimeUtc: System.DateTime) -> None: ...

class DirectoryInfo(FileSystemInfo):
    """    """
    def __init__(self, path: str): ...
    @overload
    def Create() -> None: ...
    @overload
    def CreateSubdirectory(self, path: str) -> DirectoryInfo: ...
    @overload
    def Delete() -> None: ...
    @overload
    def Delete(self, recursive: bool) -> None: ...
    @overload
    def EnumerateDirectories() -> Generic.IEnumerable: ...
    @overload
    def EnumerateDirectories(self, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    def EnumerateDirectories(self, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    def EnumerateDirectories(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFiles() -> Generic.IEnumerable: ...
    @overload
    def EnumerateFiles(self, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFiles(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFiles(self, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFileSystemInfos() -> Generic.IEnumerable: ...
    @overload
    def EnumerateFileSystemInfos(self, searchPattern: str) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFileSystemInfos(self, searchPattern: str, searchOption: SearchOption) -> Generic.IEnumerable: ...
    @overload
    def EnumerateFileSystemInfos(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> Generic.IEnumerable: ...
    @property
    def Parent(self) -> DirectoryInfo: ...
    @property
    def Root(self) -> DirectoryInfo: ...
    @overload
    def GetDirectories() -> System.Array[DirectoryInfo]: ...
    @overload
    def GetDirectories(self, searchPattern: str) -> System.Array[DirectoryInfo]: ...
    @overload
    def GetDirectories(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.Array[DirectoryInfo]: ...
    @overload
    def GetDirectories(self, searchPattern: str, searchOption: SearchOption) -> System.Array[DirectoryInfo]: ...
    @overload
    def GetFiles() -> System.Array[FileInfo]: ...
    @overload
    def GetFiles(self, searchPattern: str) -> System.Array[FileInfo]: ...
    @overload
    def GetFiles(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.Array[FileInfo]: ...
    @overload
    def GetFiles(self, searchPattern: str, searchOption: SearchOption) -> System.Array[FileInfo]: ...
    @overload
    def GetFileSystemInfos() -> System.Array[FileSystemInfo]: ...
    @overload
    def GetFileSystemInfos(self, searchPattern: str) -> System.Array[FileSystemInfo]: ...
    @overload
    def GetFileSystemInfos(self, searchPattern: str, enumerationOptions: EnumerationOptions) -> System.Array[FileSystemInfo]: ...
    @overload
    def GetFileSystemInfos(self, searchPattern: str, searchOption: SearchOption) -> System.Array[FileSystemInfo]: ...
    @overload
    def MoveTo(self, destDirName: str) -> None: ...

class DirectoryNotFoundException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EnumerationOptions(object):
    """    """
    def __init__(self): ...
    @property
    def AttributesToSkip(self) -> FileAttributes: ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def IgnoreInaccessible(self) -> bool: ...
    @property
    def MatchCasing(self) -> MatchCasing: ...
    @property
    def MatchType(self) -> MatchType: ...
    @property
    def MaxRecursionDepth(self) -> int: ...
    @property
    def RecurseSubdirectories(self) -> bool: ...
    @property
    def ReturnSpecialDirectories(self) -> bool: ...
    @AttributesToSkip.setter
    def AttributesToSkip(self, value: System.Void): ...
    @BufferSize.setter
    def BufferSize(self, value: System.Void): ...
    @IgnoreInaccessible.setter
    def IgnoreInaccessible(self, value: System.Void): ...
    @MatchCasing.setter
    def MatchCasing(self, value: System.Void): ...
    @MatchType.setter
    def MatchType(self, value: System.Void): ...
    @MaxRecursionDepth.setter
    def MaxRecursionDepth(self, value: System.Void): ...
    @RecurseSubdirectories.setter
    def RecurseSubdirectories(self, value: System.Void): ...
    @ReturnSpecialDirectories.setter
    def ReturnSpecialDirectories(self, value: System.Void): ...

class EndOfStreamException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class File(object):
    """    """
    @overload
    @staticmethod
    def AppendAllLines(path: str, contents: Generic.IEnumerable) -> None: ...
    @overload
    @staticmethod
    def AppendAllLines(path: str, contents: Generic.IEnumerable, encoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def AppendAllLinesAsync(path: str, contents: Generic.IEnumerable, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def AppendAllLinesAsync(path: str, contents: Generic.IEnumerable, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def AppendAllText(path: str, contents: str) -> None: ...
    @overload
    @staticmethod
    def AppendAllText(path: str, contents: str, encoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def AppendAllTextAsync(path: str, contents: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def AppendAllTextAsync(path: str, contents: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def AppendText(path: str) -> StreamWriter: ...
    @overload
    @staticmethod
    def Copy(sourceFileName: str, destFileName: str) -> None: ...
    @overload
    @staticmethod
    def Copy(sourceFileName: str, destFileName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def Create(path: str) -> FileStream: ...
    @overload
    @staticmethod
    def Create(path: str, bufferSize: int) -> FileStream: ...
    @overload
    @staticmethod
    def Create(path: str, bufferSize: int, options: FileOptions) -> FileStream: ...
    @overload
    @staticmethod
    def CreateSymbolicLink(path: str, pathToTarget: str) -> FileSystemInfo: ...
    @overload
    @staticmethod
    def CreateText(path: str) -> StreamWriter: ...
    @overload
    @staticmethod
    def Decrypt(path: str) -> None: ...
    @overload
    @staticmethod
    def Delete(path: str) -> None: ...
    @overload
    @staticmethod
    def Encrypt(path: str) -> None: ...
    @overload
    @staticmethod
    def Exists(path: str) -> bool: ...
    @overload
    @staticmethod
    def GetAttributes(path: str) -> FileAttributes: ...
    @overload
    @staticmethod
    def GetAttributes(fileHandle: SafeHandles.SafeFileHandle) -> FileAttributes: ...
    @overload
    @staticmethod
    def GetCreationTime(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetCreationTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetCreationTimeUtc(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetCreationTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastAccessTime(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastAccessTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastAccessTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastAccessTimeUtc(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTime(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTime(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTimeUtc(path: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetLastWriteTimeUtc(fileHandle: SafeHandles.SafeFileHandle) -> System.DateTime: ...
    @overload
    @staticmethod
    def GetUnixFileMode(fileHandle: SafeHandles.SafeFileHandle) -> UnixFileMode: ...
    @overload
    @staticmethod
    def GetUnixFileMode(path: str) -> UnixFileMode: ...
    @overload
    @staticmethod
    def Move(sourceFileName: str, destFileName: str) -> None: ...
    @overload
    @staticmethod
    def Move(sourceFileName: str, destFileName: str, overwrite: bool) -> None: ...
    @overload
    @staticmethod
    def Open(path: str, mode: FileMode) -> FileStream: ...
    @overload
    @staticmethod
    def Open(path: str, options: FileStreamOptions) -> FileStream: ...
    @overload
    @staticmethod
    def Open(path: str, mode: FileMode, access: FileAccess) -> FileStream: ...
    @overload
    @staticmethod
    def Open(path: str, mode: FileMode, access: FileAccess, share: FileShare) -> FileStream: ...
    @overload
    @staticmethod
    def OpenHandle(path: str, mode: FileMode, access: FileAccess, share: FileShare, options: FileOptions, preallocationSize: System.Int64) -> SafeHandles.SafeFileHandle: ...
    @overload
    @staticmethod
    def OpenRead(path: str) -> FileStream: ...
    @overload
    @staticmethod
    def OpenText(path: str) -> StreamReader: ...
    @overload
    @staticmethod
    def OpenWrite(path: str) -> FileStream: ...
    @overload
    @staticmethod
    def ReadAllBytes(path: str) -> System.System.Array[System.Byte]: ...
    @overload
    @staticmethod
    def ReadAllBytesAsync(path: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReadAllLines(path: str) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ReadAllLines(path: str, encoding: Text.Encoding) -> System.System.Array[str]: ...
    @overload
    @staticmethod
    def ReadAllLinesAsync(path: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReadAllLinesAsync(path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReadAllText(path: str) -> str: ...
    @overload
    @staticmethod
    def ReadAllText(path: str, encoding: Text.Encoding) -> str: ...
    @overload
    @staticmethod
    def ReadAllTextAsync(path: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReadAllTextAsync(path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ReadLines(path: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ReadLines(path: str, encoding: Text.Encoding) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ReadLinesAsync(path: str, cancellationToken: Threading.CancellationToken) -> Generic.IAsyncEnumerable: ...
    @overload
    @staticmethod
    def ReadLinesAsync(path: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Generic.IAsyncEnumerable: ...
    @overload
    @staticmethod
    def Replace(sourceFileName: str, destinationFileName: str, destinationBackupFileName: str) -> None: ...
    @overload
    @staticmethod
    def Replace(sourceFileName: str, destinationFileName: str, destinationBackupFileName: str, ignoreMetadataErrors: bool) -> None: ...
    @overload
    @staticmethod
    def ResolveLinkTarget(linkPath: str, returnFinalTarget: bool) -> FileSystemInfo: ...
    @overload
    @staticmethod
    def SetAttributes(fileHandle: SafeHandles.SafeFileHandle, fileAttributes: FileAttributes) -> None: ...
    @overload
    @staticmethod
    def SetAttributes(path: str, fileAttributes: FileAttributes) -> None: ...
    @overload
    @staticmethod
    def SetCreationTime(path: str, creationTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetCreationTime(fileHandle: SafeHandles.SafeFileHandle, creationTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetCreationTimeUtc(path: str, creationTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetCreationTimeUtc(fileHandle: SafeHandles.SafeFileHandle, creationTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTime(path: str, lastAccessTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTime(fileHandle: SafeHandles.SafeFileHandle, lastAccessTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTimeUtc(fileHandle: SafeHandles.SafeFileHandle, lastAccessTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastAccessTimeUtc(path: str, lastAccessTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTime(fileHandle: SafeHandles.SafeFileHandle, lastWriteTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTime(path: str, lastWriteTime: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTimeUtc(fileHandle: SafeHandles.SafeFileHandle, lastWriteTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetLastWriteTimeUtc(path: str, lastWriteTimeUtc: System.DateTime) -> None: ...
    @overload
    @staticmethod
    def SetUnixFileMode(path: str, mode: UnixFileMode) -> None: ...
    @overload
    @staticmethod
    def SetUnixFileMode(fileHandle: SafeHandles.SafeFileHandle, mode: UnixFileMode) -> None: ...
    @overload
    @staticmethod
    def WriteAllBytes(path: str, bytes_: System.System.Array[System.Byte]) -> None: ...
    @overload
    @staticmethod
    def WriteAllBytesAsync(path: str, bytes_: System.System.Array[System.Byte], cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def WriteAllLines(path: str, contents: System.System.Array[str]) -> None: ...
    @overload
    @staticmethod
    def WriteAllLines(path: str, contents: Generic.IEnumerable) -> None: ...
    @overload
    @staticmethod
    def WriteAllLines(path: str, contents: Generic.IEnumerable, encoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def WriteAllLines(path: str, contents: System.System.Array[str], encoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def WriteAllLinesAsync(path: str, contents: Generic.IEnumerable, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def WriteAllLinesAsync(path: str, contents: Generic.IEnumerable, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def WriteAllText(path: str, contents: str) -> None: ...
    @overload
    @staticmethod
    def WriteAllText(path: str, contents: str, encoding: Text.Encoding) -> None: ...
    @overload
    @staticmethod
    def WriteAllTextAsync(path: str, contents: str, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def WriteAllTextAsync(path: str, contents: str, encoding: Text.Encoding, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class FileAccess(enum.Enum):
    Read = 1
    Write = 2
    ReadWrite = 3

class FileAttributes(enum.Enum):
    ReadOnly = 1
    Hidden = 2
    System = 4
    Directory = 16
    Archive = 32
    Device = 64
    Normal = 128
    Temporary = 256
    SparseFile = 512
    ReparsePoint = 1024
    Compressed = 2048
    Offline = 4096
    NotContentIndexed = 8192
    Encrypted = 16384
    IntegrityStream = 32768
    NoScrubData = 131072

class FileInfo(FileSystemInfo):
    """    """
    def __init__(self, fileName: str): ...
    @overload
    def AppendText() -> StreamWriter: ...
    @overload
    def CopyTo(self, destFileName: str) -> FileInfo: ...
    @overload
    def CopyTo(self, destFileName: str, overwrite: bool) -> FileInfo: ...
    @overload
    def Create() -> FileStream: ...
    @overload
    def CreateText() -> StreamWriter: ...
    @overload
    def Decrypt() -> None: ...
    @overload
    def Delete() -> None: ...
    @overload
    def Encrypt() -> None: ...
    @property
    def Directory(self) -> DirectoryInfo: ...
    @property
    def DirectoryName(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @overload
    def MoveTo(self, destFileName: str) -> None: ...
    @overload
    def MoveTo(self, destFileName: str, overwrite: bool) -> None: ...
    @overload
    def Open(self, options: FileStreamOptions) -> FileStream: ...
    @overload
    def Open(self, mode: FileMode) -> FileStream: ...
    @overload
    def Open(self, mode: FileMode, access: FileAccess) -> FileStream: ...
    @overload
    def Open(self, mode: FileMode, access: FileAccess, share: FileShare) -> FileStream: ...
    @overload
    def OpenRead() -> FileStream: ...
    @overload
    def OpenText() -> StreamReader: ...
    @overload
    def OpenWrite() -> FileStream: ...
    @overload
    def Replace(self, destinationFileName: str, destinationBackupFileName: str) -> FileInfo: ...
    @overload
    def Replace(self, destinationFileName: str, destinationBackupFileName: str, ignoreMetadataErrors: bool) -> FileInfo: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: System.Void): ...

class FileMode(enum.Enum):
    CreateNew = 1
    Create = 2
    Open = 3
    OpenOrCreate = 4
    Truncate = 5
    Append = 6

class FileOptions(enum.Enum):
    None_ = 0
    Encrypted = 16384
    DeleteOnClose = 67108864
    SequentialScan = 134217728
    RandomAccess = 268435456
    Asynchronous = 1073741824
    WriteThrough = -2147483648

class FileShare(enum.Enum):
    None_ = 0
    Read = 1
    Write = 2
    ReadWrite = 3
    Delete = 4
    Inheritable = 16

class FileStream(Stream):
    """    """
    @overload
    def __init__(self, handle: System.IntPtr, access: FileAccess): ...
    @overload
    def __init__(self, handle: SafeHandles.SafeFileHandle, access: FileAccess): ...
    @overload
    def __init__(self, path: str, mode: FileMode): ...
    @overload
    def __init__(self, path: str, options: FileStreamOptions): ...
    @overload
    def __init__(self, handle: System.IntPtr, access: FileAccess, ownsHandle: bool): ...
    @overload
    def __init__(self, handle: SafeHandles.SafeFileHandle, access: FileAccess, bufferSize: int): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess): ...
    @overload
    def __init__(self, handle: System.IntPtr, access: FileAccess, ownsHandle: bool, bufferSize: int): ...
    @overload
    def __init__(self, handle: SafeHandles.SafeFileHandle, access: FileAccess, bufferSize: int, isAsync: bool): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare): ...
    @overload
    def __init__(self, handle: System.IntPtr, access: FileAccess, ownsHandle: bool, bufferSize: int, isAsync: bool): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int, useAsync: bool): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int, options: FileOptions): ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CopyTo(self, destination: Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def Flush(self, flushToDisk: bool) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def SafeFileHandle(self) -> SafeHandles.SafeFileHandle: ...
    @overload
    def Lock(self, position: System.Int64, length: System.Int64) -> None: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Unlock(self, position: System.Int64, length: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class FileStreamOptions(object):
    """    """
    def __init__(self): ...
    @property
    def Access(self) -> FileAccess: ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def Mode(self) -> FileMode: ...
    @property
    def Options(self) -> FileOptions: ...
    @property
    def PreallocationSize(self) -> System.Int64: ...
    @property
    def Share(self) -> FileShare: ...
    @property
    def UnixCreateMode(self) -> System.Nullable: ...
    @Access.setter
    def Access(self, value: System.Void): ...
    @BufferSize.setter
    def BufferSize(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Options.setter
    def Options(self, value: System.Void): ...
    @PreallocationSize.setter
    def PreallocationSize(self, value: System.Void): ...
    @Share.setter
    def Share(self, value: System.Void): ...
    @UnixCreateMode.setter
    def UnixCreateMode(self, value: System.Void): ...

class FileSystemInfo(System.MarshalByRefObject):
    """    """
    @overload
    def CreateAsSymbolicLink(self, pathToTarget: str) -> None: ...
    @overload
    def Delete() -> None: ...
    @property
    def Attributes(self) -> FileAttributes: ...
    @property
    def CreationTime(self) -> System.DateTime: ...
    @property
    def CreationTimeUtc(self) -> System.DateTime: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def Extension(self) -> str: ...
    @property
    def FullName(self) -> str: ...
    @property
    def LastAccessTime(self) -> System.DateTime: ...
    @property
    def LastAccessTimeUtc(self) -> System.DateTime: ...
    @property
    def LastWriteTime(self) -> System.DateTime: ...
    @property
    def LastWriteTimeUtc(self) -> System.DateTime: ...
    @property
    def LinkTarget(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def UnixFileMode(self) -> UnixFileMode: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def Refresh() -> None: ...
    @overload
    def ResolveLinkTarget(self, returnFinalTarget: bool) -> FileSystemInfo: ...
    @Attributes.setter
    def Attributes(self, value: System.Void): ...
    @CreationTime.setter
    def CreationTime(self, value: System.Void): ...
    @CreationTimeUtc.setter
    def CreationTimeUtc(self, value: System.Void): ...
    @LastAccessTime.setter
    def LastAccessTime(self, value: System.Void): ...
    @LastAccessTimeUtc.setter
    def LastAccessTimeUtc(self, value: System.Void): ...
    @LastWriteTime.setter
    def LastWriteTime(self, value: System.Void): ...
    @LastWriteTimeUtc.setter
    def LastWriteTimeUtc(self, value: System.Void): ...
    @UnixFileMode.setter
    def UnixFileMode(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class HandleInheritability(enum.Enum):
    None_ = 0
    Inheritable = 1

class InvalidDataException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class IOException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, hresult: int): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class MatchCasing(enum.Enum):
    PlatformDefault = 0
    CaseSensitive = 1
    CaseInsensitive = 2

class MatchType(enum.Enum):
    Simple = 0
    Win32 = 1

class MemoryStream(Stream):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], writable: bool): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], index: int, count: int): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], index: int, count: int, writable: bool): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], index: int, count: int, writable: bool, publiclyVisible: bool): ...
    @overload
    def CopyTo(self, destination: Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def GetBuffer() -> System.System.Array[System.Byte]: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, loc: SeekOrigin) -> System.Int64: ...
    @Capacity.setter
    def Capacity(self, value: System.Void): ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def ToArray() -> System.System.Array[System.Byte]: ...
    @overload
    def TryGetBuffer() -> (bool, System.ArraySegment): ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...
    @overload
    def WriteTo(self, stream: Stream) -> None: ...

class Path(object):
    """    """
    @property
    def DirectorySeparatorChar(self) -> System.Char: ...
    @property
    def AltDirectorySeparatorChar(self) -> System.Char: ...
    @property
    def VolumeSeparatorChar(self) -> System.Char: ...
    @property
    def PathSeparator(self) -> System.Char: ...
    @property
    def InvalidPathChars(self) -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def ChangeExtension(path: str, extension: str) -> str: ...
    @overload
    @staticmethod
    def Combine(paths: System.System.Array[str]) -> str: ...
    @overload
    @staticmethod
    def Combine(path1: str, path2: str) -> str: ...
    @overload
    @staticmethod
    def Combine(path1: str, path2: str, path3: str) -> str: ...
    @overload
    @staticmethod
    def Combine(path1: str, path2: str, path3: str, path4: str) -> str: ...
    @overload
    @staticmethod
    def EndsInDirectorySeparator(path: str) -> bool: ...
    @overload
    @staticmethod
    def EndsInDirectorySeparator(path: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def Exists(path: str) -> bool: ...
    @overload
    @staticmethod
    def GetDirectoryName(path: str) -> str: ...
    @overload
    @staticmethod
    def GetDirectoryName(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetExtension(path: str) -> str: ...
    @overload
    @staticmethod
    def GetExtension(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetFileName(path: str) -> str: ...
    @overload
    @staticmethod
    def GetFileName(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetFileNameWithoutExtension(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetFileNameWithoutExtension(path: str) -> str: ...
    @overload
    @staticmethod
    def GetFullPath(path: str) -> str: ...
    @overload
    @staticmethod
    def GetFullPath(path: str, basePath: str) -> str: ...
    @overload
    @staticmethod
    def GetInvalidFileNameChars() -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def GetInvalidPathChars() -> System.System.Array[System.Char]: ...
    @overload
    @staticmethod
    def GetPathRoot(path: str) -> str: ...
    @overload
    @staticmethod
    def GetPathRoot(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def GetRandomFileName() -> str: ...
    @overload
    @staticmethod
    def GetRelativePath(relativeTo: str, path: str) -> str: ...
    @overload
    @staticmethod
    def GetTempFileName() -> str: ...
    @overload
    @staticmethod
    def GetTempPath() -> str: ...
    @overload
    @staticmethod
    def HasExtension(path: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def HasExtension(path: str) -> bool: ...
    @overload
    @staticmethod
    def IsPathFullyQualified(path: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def IsPathFullyQualified(path: str) -> bool: ...
    @overload
    @staticmethod
    def IsPathRooted(path: System.ReadOnlySpan) -> bool: ...
    @overload
    @staticmethod
    def IsPathRooted(path: str) -> bool: ...
    @overload
    @staticmethod
    def Join(paths: System.System.Array[str]) -> str: ...
    @overload
    @staticmethod
    def Join(path1: str, path2: str) -> str: ...
    @overload
    @staticmethod
    def Join(path1: System.ReadOnlySpan, path2: System.ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def Join(path1: System.ReadOnlySpan, path2: System.ReadOnlySpan, path3: System.ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def Join(path1: str, path2: str, path3: str) -> str: ...
    @overload
    @staticmethod
    def Join(path1: str, path2: str, path3: str, path4: str) -> str: ...
    @overload
    @staticmethod
    def Join(path1: System.ReadOnlySpan, path2: System.ReadOnlySpan, path3: System.ReadOnlySpan, path4: System.ReadOnlySpan) -> str: ...
    @overload
    @staticmethod
    def TrimEndingDirectorySeparator(path: str) -> str: ...
    @overload
    @staticmethod
    def TrimEndingDirectorySeparator(path: System.ReadOnlySpan) -> System.ReadOnlySpan: ...
    @overload
    @staticmethod
    def TryJoin(path1: System.ReadOnlySpan, path2: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...
    @overload
    @staticmethod
    def TryJoin(path1: System.ReadOnlySpan, path2: System.ReadOnlySpan, path3: System.ReadOnlySpan, destination: System.Span) -> (bool, int): ...

class PathTooLongException(IOException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class RandomAccess(object):
    """    """
    @overload
    @staticmethod
    def GetLength(handle: SafeHandles.SafeFileHandle) -> System.Int64: ...
    @overload
    @staticmethod
    def Read(handle: SafeHandles.SafeFileHandle, buffer: System.Span, fileOffset: System.Int64) -> int: ...
    @overload
    @staticmethod
    def Read(handle: SafeHandles.SafeFileHandle, buffers: Generic.IReadOnlyList, fileOffset: System.Int64) -> System.Int64: ...
    @overload
    @staticmethod
    def ReadAsync(handle: SafeHandles.SafeFileHandle, buffer: System.Memory, fileOffset: System.Int64, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def ReadAsync(handle: SafeHandles.SafeFileHandle, buffers: Generic.IReadOnlyList, fileOffset: System.Int64, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def SetLength(handle: SafeHandles.SafeFileHandle, length: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Write(handle: SafeHandles.SafeFileHandle, buffer: System.ReadOnlySpan, fileOffset: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Write(handle: SafeHandles.SafeFileHandle, buffers: Generic.IReadOnlyList, fileOffset: System.Int64) -> None: ...
    @overload
    @staticmethod
    def WriteAsync(handle: SafeHandles.SafeFileHandle, buffer: System.ReadOnlyMemory, fileOffset: System.Int64, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    @staticmethod
    def WriteAsync(handle: SafeHandles.SafeFileHandle, buffers: Generic.IReadOnlyList, fileOffset: System.Int64, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...

class SearchOption(enum.Enum):
    TopDirectoryOnly = 0
    AllDirectories = 1

class SeekOrigin(enum.Enum):
    Begin = 0
    Current = 1
    End = 2

class Stream(System.MarshalByRefObject):
    """    """
    @property
    def Null(self) -> Stream: ...
    @overload
    def BeginRead(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def CopyTo(self, destination: Stream) -> None: ...
    @overload
    def CopyTo(self, destination: Stream, bufferSize: int) -> None: ...
    @overload
    def CopyToAsync(self, destination: Stream) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, destination: Stream, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, destination: Stream, bufferSize: int) -> Tasks.Task: ...
    @overload
    def CopyToAsync(self, destination: Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    @overload
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadAtLeast(self, buffer: System.Span, minimumBytes: int, throwOnEndOfStream: bool) -> int: ...
    @overload
    def ReadAtLeastAsync(self, buffer: System.Memory, minimumBytes: int, throwOnEndOfStream: bool, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def ReadExactly(self, buffer: System.Span) -> None: ...
    @overload
    def ReadExactly(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def ReadExactlyAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadExactlyAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def Seek(self, offset: System.Int64, origin: SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: System.Void): ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    @staticmethod
    def Synchronized(stream: Stream) -> Stream: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class StreamReader(TextReader):
    """    """
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, stream: Stream, detectEncodingFromByteOrderMarks: bool): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding): ...
    @overload
    def __init__(self, path: str, detectEncodingFromByteOrderMarks: bool): ...
    @overload
    def __init__(self, path: str, encoding: Text.Encoding): ...
    @overload
    def __init__(self, path: str, options: FileStreamOptions): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool): ...
    @overload
    def __init__(self, path: str, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, bufferSize: int): ...
    @overload
    def __init__(self, path: str, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, bufferSize: int): ...
    @overload
    def __init__(self, path: str, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, options: FileStreamOptions): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, bufferSize: int, leaveOpen: bool): ...
    @property
    def Null(self) -> StreamReader: ...
    @overload
    def Close() -> None: ...
    @overload
    def DiscardBufferedData() -> None: ...
    @property
    def BaseStream(self) -> Stream: ...
    @property
    def CurrentEncoding(self) -> Text.Encoding: ...
    @property
    def EndOfStream(self) -> bool: ...
    @overload
    def Peek() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadBlock(self, buffer: System.Span) -> int: ...
    @overload
    def ReadBlock(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadBlockAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadBlockAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadLineAsync() -> Tasks.Task: ...
    @overload
    def ReadLineAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadToEnd() -> str: ...
    @overload
    def ReadToEndAsync() -> Tasks.Task: ...
    @overload
    def ReadToEndAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class StreamWriter(TextWriter):
    """    """
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding): ...
    @overload
    def __init__(self, path: str, append: bool): ...
    @overload
    def __init__(self, path: str, options: FileStreamOptions): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding, bufferSize: int): ...
    @overload
    def __init__(self, path: str, append: bool, encoding: Text.Encoding): ...
    @overload
    def __init__(self, path: str, encoding: Text.Encoding, options: FileStreamOptions): ...
    @overload
    def __init__(self, stream: Stream, encoding: Text.Encoding, bufferSize: int, leaveOpen: bool): ...
    @overload
    def __init__(self, path: str, append: bool, encoding: Text.Encoding, bufferSize: int): ...
    @property
    def Null(self) -> StreamWriter: ...
    @overload
    def Close() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @property
    def AutoFlush(self) -> bool: ...
    @property
    def BaseStream(self) -> Stream: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @AutoFlush.setter
    def AutoFlush(self, value: System.Void): ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char]) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object) -> None: ...
    @overload
    def Write(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteLine(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteLineAsync() -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...

class StringReader(TextReader):
    """    """
    def __init__(self, s: str): ...
    @overload
    def Close() -> None: ...
    @overload
    def Peek() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadBlock(self, buffer: System.Span) -> int: ...
    @overload
    def ReadBlockAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadBlockAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadLineAsync() -> Tasks.Task: ...
    @overload
    def ReadLineAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadToEnd() -> str: ...
    @overload
    def ReadToEndAsync() -> Tasks.Task: ...
    @overload
    def ReadToEndAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...

class StringWriter(TextWriter):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, formatProvider: System.IFormatProvider): ...
    @overload
    def __init__(self, sb: Text.StringBuilder): ...
    @overload
    def __init__(self, sb: Text.StringBuilder, formatProvider: System.IFormatProvider): ...
    @overload
    def Close() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @overload
    def GetStringBuilder() -> Text.StringBuilder: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: Text.StringBuilder) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteLine(self, value: Text.StringBuilder) -> None: ...
    @overload
    def WriteLine(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def WriteLineAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...

class TextReader(System.MarshalByRefObject):
    """    """
    @property
    def Null(self) -> TextReader: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Peek() -> int: ...
    @overload
    def Read() -> int: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadBlock(self, buffer: System.Span) -> int: ...
    @overload
    def ReadBlock(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadBlockAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadBlockAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadLine() -> str: ...
    @overload
    def ReadLineAsync() -> Tasks.Task: ...
    @overload
    def ReadLineAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadToEnd() -> str: ...
    @overload
    def ReadToEndAsync() -> Tasks.Task: ...
    @overload
    def ReadToEndAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    @staticmethod
    def Synchronized(reader: TextReader) -> TextReader: ...

class TextWriter(System.MarshalByRefObject):
    """    """
    @property
    def Null(self) -> TextWriter: ...
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def FormatProvider(self) -> System.IFormatProvider: ...
    @property
    def NewLine(self) -> str: ...
    @NewLine.setter
    def NewLine(self, value: System.Void): ...
    @overload
    @staticmethod
    def Synchronized(writer: TextWriter) -> TextWriter: ...
    @overload
    def Write(self, value: object) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char]) -> None: ...
    @overload
    def Write(self, value: Text.StringBuilder) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: System.Char) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, value: System.Single) -> None: ...
    @overload
    def Write(self, value: System.UInt64) -> None: ...
    @overload
    def Write(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, value: System.UInt32) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: bool) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, value: System.Decimal) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object) -> None: ...
    @overload
    def Write(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def Write(self, format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Char]) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteLine() -> None: ...
    @overload
    def WriteLine(self, value: float) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, value: System.Char) -> None: ...
    @overload
    def WriteLine(self, buffer: System.System.Array[System.Char]) -> None: ...
    @overload
    def WriteLine(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def WriteLine(self, value: Text.StringBuilder) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, value: System.Decimal) -> None: ...
    @overload
    def WriteLine(self, value: System.Single) -> None: ...
    @overload
    def WriteLine(self, value: System.UInt64) -> None: ...
    @overload
    def WriteLine(self, value: System.Int64) -> None: ...
    @overload
    def WriteLine(self, value: bool) -> None: ...
    @overload
    def WriteLine(self, value: System.UInt32) -> None: ...
    @overload
    def WriteLine(self, value: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg: System.System.Array[object]) -> None: ...
    @overload
    def WriteLine(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object, arg1: object) -> None: ...
    @overload
    def WriteLine(self, format_: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteLineAsync() -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: System.Char) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.System.Array[System.Char]) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, value: Text.StringBuilder, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteLineAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...

class UnixFileMode(enum.Enum):
    None_ = 0
    OtherExecute = 1
    OtherWrite = 2
    OtherRead = 4
    GroupExecute = 8
    GroupWrite = 16
    GroupRead = 32
    UserExecute = 64
    UserWrite = 128
    UserRead = 256
    StickyBit = 512
    SetGroup = 1024
    SetUser = 2048

class UnmanagedMemoryAccessor(object):
    """    """
    @overload
    def __init__(self, buffer: InteropServices.SafeBuffer, offset: System.Int64, capacity: System.Int64): ...
    @overload
    def __init__(self, buffer: InteropServices.SafeBuffer, offset: System.Int64, capacity: System.Int64, access: FileAccess): ...
    @overload
    def Dispose() -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Capacity(self) -> System.Int64: ...
    @overload
    def Read(self, position: System.Int64) -> (T): ...
    @overload
    def ReadArray(self, position: System.Int64, array: System.Array[T], offset: int, count: int) -> int: ...
    @overload
    def ReadBoolean(self, position: System.Int64) -> bool: ...
    @overload
    def ReadByte(self, position: System.Int64) -> System.Byte: ...
    @overload
    def ReadChar(self, position: System.Int64) -> System.Char: ...
    @overload
    def ReadDecimal(self, position: System.Int64) -> System.Decimal: ...
    @overload
    def ReadDouble(self, position: System.Int64) -> float: ...
    @overload
    def ReadInt16(self, position: System.Int64) -> System.Int16: ...
    @overload
    def ReadInt32(self, position: System.Int64) -> int: ...
    @overload
    def ReadInt64(self, position: System.Int64) -> System.Int64: ...
    @overload
    def ReadSByte(self, position: System.Int64) -> System.SByte: ...
    @overload
    def ReadSingle(self, position: System.Int64) -> System.Single: ...
    @overload
    def ReadUInt16(self, position: System.Int64) -> System.UInt16: ...
    @overload
    def ReadUInt32(self, position: System.Int64) -> System.UInt32: ...
    @overload
    def ReadUInt64(self, position: System.Int64) -> System.UInt64: ...
    @overload
    def Write(self, position: System.Int64) -> (T): ...
    @overload
    def Write(self, position: System.Int64, value: System.UInt64) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.UInt32) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.UInt16) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.SByte) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Int64) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Single) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Decimal) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: int) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Int16) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Byte) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: bool) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: float) -> None: ...
    @overload
    def Write(self, position: System.Int64, value: System.Char) -> None: ...
    @overload
    def WriteArray(self, position: System.Int64, array: System.Array[T], offset: int, count: int) -> None: ...

class UnmanagedMemoryStream(Stream):
    """    """
    @overload
    def __init__(self, pointer: System.Byte, length: System.Int64): ...
    @overload
    def __init__(self, buffer: InteropServices.SafeBuffer, offset: System.Int64, length: System.Int64): ...
    @overload
    def __init__(self, buffer: InteropServices.SafeBuffer, offset: System.Int64, length: System.Int64, access: FileAccess): ...
    @overload
    def __init__(self, pointer: System.Byte, length: System.Int64, capacity: System.Int64, access: FileAccess): ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Capacity(self) -> System.Int64: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def PositionPointer(self) -> System.Byte: ...
    @overload
    def Read(self, buffer: System.Span) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.Memory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, loc: SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @PositionPointer.setter
    def PositionPointer(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.ReadOnlyMemory, cancellationToken: Threading.CancellationToken) -> Tasks.ValueTask: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

# endregion

# region: System.IO.FileSystem.Watcher, Version=7.0.0.0

class ErrorEventArgs(System.EventArgs):
    """    """
    def __init__(self, exception: System.Exception): ...
    @overload
    def GetException() -> System.Exception: ...

class ErrorEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ErrorEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ErrorEventArgs) -> None: ...

class FileSystemEventArgs(System.EventArgs):
    """    """
    def __init__(self, changeType: WatcherChangeTypes, directory: str, name: str): ...
    @property
    def ChangeType(self) -> WatcherChangeTypes: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Name(self) -> str: ...

class FileSystemEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: FileSystemEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: FileSystemEventArgs) -> None: ...

class FileSystemWatcher(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, filter_: str): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def EndInit() -> None: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Filters(self) -> ObjectModel.Collection: ...
    @property
    def IncludeSubdirectories(self) -> bool: ...
    @property
    def InternalBufferSize(self) -> int: ...
    @property
    def NotifyFilter(self) -> NotifyFilters: ...
    @property
    def Path(self) -> str: ...
    @property
    def Site(self) -> ComponentModel.ISite: ...
    @property
    def SynchronizingObject(self) -> ComponentModel.ISynchronizeInvoke: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: System.Void): ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @IncludeSubdirectories.setter
    def IncludeSubdirectories(self, value: System.Void): ...
    @InternalBufferSize.setter
    def InternalBufferSize(self, value: System.Void): ...
    @NotifyFilter.setter
    def NotifyFilter(self, value: System.Void): ...
    @Path.setter
    def Path(self, value: System.Void): ...
    @Site.setter
    def Site(self, value: System.Void): ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: System.Void): ...
    @overload
    def WaitForChanged(self, changeType: WatcherChangeTypes) -> WaitForChangedResult: ...
    @overload
    def WaitForChanged(self, changeType: WatcherChangeTypes, timeout: System.TimeSpan) -> WaitForChangedResult: ...
    @overload
    def WaitForChanged(self, changeType: WatcherChangeTypes, timeout: int) -> WaitForChangedResult: ...
    @property
    def Changed(self): ...
    @property
    def Created(self): ...
    @property
    def Deleted(self): ...
    @property
    def Error(self): ...
    @property
    def Renamed(self): ...
    @property
    def Disposed(self): ...

class InternalBufferOverflowException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class NotifyFilters(enum.Enum):
    FileName = 1
    DirectoryName = 2
    Attributes = 4
    Size = 8
    LastWrite = 16
    LastAccess = 32
    CreationTime = 64
    Security = 256

class RenamedEventArgs(FileSystemEventArgs):
    """    """
    def __init__(self, changeType: WatcherChangeTypes, directory: str, name: str, oldName: str): ...
    @property
    def OldFullPath(self) -> str: ...
    @property
    def OldName(self) -> str: ...

class RenamedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: RenamedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: RenamedEventArgs) -> None: ...

class WatcherChangeTypes(enum.Enum):
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 8
    All = 15

class WaitForChangedResult(System.ValueType):
    """    """
    @property
    def ChangeType(self) -> WatcherChangeTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def OldName(self) -> str: ...
    @property
    def TimedOut(self) -> bool: ...
    @ChangeType.setter
    def ChangeType(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @OldName.setter
    def OldName(self, value: System.Void): ...
    @TimedOut.setter
    def TimedOut(self, value: System.Void): ...

# endregion

# region: System.IO.Packaging, Version=7.0.0.0

class FileFormatException(System.FormatException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, sourceUri: System.Uri): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, sourceUri: System.Uri, message: str): ...
    @overload
    def __init__(self, sourceUri: System.Uri, innerException: System.Exception): ...
    @overload
    def __init__(self, sourceUri: System.Uri, message: str, innerException: System.Exception): ...
    @property
    def SourceUri(self) -> System.Uri: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

# endregion

