"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ClientCredentials", "ContractDescription", "DataContractSerializerOperationBehavior", "FaultDescription", "FaultDescriptionCollection", "IContractBehavior", "IEndpointBehavior", "IOperationBehavior", "ListenUriMode", "MessageBodyDescription", "MessageDescription", "MessageDescriptionCollection", "MessageDirection", "MessageHeaderDescription", "MessageHeaderDescriptionCollection", "MessagePartDescription", "MessagePartDescriptionCollection", "MessagePropertyDescription", "MessagePropertyDescriptionCollection", "MetadataConversionError", "MetadataLocation", "OperationDescription", "OperationDescriptionCollection", "PolicyVersion", "PrincipalPermissionMode", "ServiceEndpoint", "ServiceEndpointCollection", "TypedMessageConverter", "XmlSerializerOperationBehavior"]
# endregion

# region: Imports
from System import Reflection
from System import ServiceModel
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.IdentityModel import Selectors
from System.Net import Security
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.ServiceModel import Channels
from System.ServiceModel import Dispatcher
from System.ServiceModel import Security
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class ClientCredentials(Security.SecurityCredentialsManager):
    """    """
    def __init__(self): ...
    @overload
    def ApplyClientBehavior(self, serviceEndpoint: ServiceEndpoint, behavior: Dispatcher.ClientRuntime) -> None: ...
    @overload
    def Clone() -> ClientCredentials: ...
    @overload
    def CreateSecurityTokenManager() -> Selectors.SecurityTokenManager: ...
    @property
    def ClientCertificate(self) -> Security.X509CertificateInitiatorClientCredential: ...
    @property
    def HttpDigest(self) -> Security.HttpDigestClientCredential: ...
    @property
    def ServiceCertificate(self) -> Security.X509CertificateRecipientClientCredential: ...
    @property
    def UserName(self) -> Security.UserNamePasswordClientCredential: ...
    @property
    def Windows(self) -> Security.WindowsClientCredential: ...

class ContractDescription(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    @property
    def Behaviors(self) -> Generic.KeyedByTypeCollection: ...
    @property
    def CallbackContractType(self) -> System.Type: ...
    @property
    def ConfigurationName(self) -> str: ...
    @property
    def ContractBehaviors(self) -> ObjectModel.KeyedCollection: ...
    @property
    def ContractType(self) -> System.Type: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Operations(self) -> OperationDescriptionCollection: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SessionMode(self) -> ServiceModel.SessionMode: ...
    @overload
    @staticmethod
    def GetContract(contractType: System.Type) -> ContractDescription: ...
    @overload
    @staticmethod
    def GetContract(contractType: System.Type, serviceImplementation: object) -> ContractDescription: ...
    @overload
    @staticmethod
    def GetContract(contractType: System.Type, serviceType: System.Type) -> ContractDescription: ...
    @overload
    def GetInheritedContracts() -> ObjectModel.Collection: ...
    @CallbackContractType.setter
    def CallbackContractType(self, value: System.Void): ...
    @ConfigurationName.setter
    def ConfigurationName(self, value: System.Void): ...
    @ContractType.setter
    def ContractType(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @SessionMode.setter
    def SessionMode(self, value: System.Void): ...
    @overload
    def ShouldSerializeProtectionLevel() -> bool: ...

class DataContractSerializerOperationBehavior(object):
    """    """
    @overload
    def __init__(self, operation: OperationDescription): ...
    @overload
    def __init__(self, operation: OperationDescription, dataContractFormatAttribute: ServiceModel.DataContractFormatAttribute): ...
    @overload
    def CreateSerializer(self, type_: System.Type, name: str, ns: str, knownTypes: Generic.IList) -> Serialization.XmlObjectSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, name: Xml.XmlDictionaryString, ns: Xml.XmlDictionaryString, knownTypes: Generic.IList) -> Serialization.XmlObjectSerializer: ...
    @property
    def DataContractFormatAttribute(self) -> ServiceModel.DataContractFormatAttribute: ...
    @property
    def DataContractResolver(self) -> Serialization.DataContractResolver: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def SerializationSurrogateProvider(self) -> Serialization.ISerializationSurrogateProvider: ...
    @DataContractResolver.setter
    def DataContractResolver(self, value: System.Void): ...
    @IgnoreExtensionDataObject.setter
    def IgnoreExtensionDataObject(self, value: System.Void): ...
    @MaxItemsInObjectGraph.setter
    def MaxItemsInObjectGraph(self, value: System.Void): ...
    @SerializationSurrogateProvider.setter
    def SerializationSurrogateProvider(self, value: System.Void): ...

class FaultDescription(object):
    """    """
    def __init__(self, action: str): ...
    @property
    def Action(self) -> str: ...
    @property
    def DetailType(self) -> System.Type: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @DetailType.setter
    def DetailType(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @overload
    def ShouldSerializeProtectionLevel() -> bool: ...

class FaultDescriptionCollection(ObjectModel.Collection):
    """    """
    @overload
    def Find(self, action: str) -> FaultDescription: ...
    @overload
    def FindAll(self, action: str) -> ObjectModel.Collection: ...

class IContractBehavior:
    """    """
    @overload
    def AddBindingParameters(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, bindingParameters: Channels.BindingParameterCollection) -> None: ...
    @overload
    def ApplyClientBehavior(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, clientRuntime: Dispatcher.ClientRuntime) -> None: ...
    @overload
    def ApplyDispatchBehavior(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, dispatchRuntime: Dispatcher.DispatchRuntime) -> None: ...
    @overload
    def Validate(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint) -> None: ...

class IEndpointBehavior:
    """    """
    @overload
    def AddBindingParameters(self, endpoint: ServiceEndpoint, bindingParameters: Channels.BindingParameterCollection) -> None: ...
    @overload
    def ApplyClientBehavior(self, endpoint: ServiceEndpoint, clientRuntime: Dispatcher.ClientRuntime) -> None: ...
    @overload
    def ApplyDispatchBehavior(self, endpoint: ServiceEndpoint, endpointDispatcher: Dispatcher.EndpointDispatcher) -> None: ...
    @overload
    def Validate(self, endpoint: ServiceEndpoint) -> None: ...

class IOperationBehavior:
    """    """
    @overload
    def AddBindingParameters(self, operationDescription: OperationDescription, bindingParameters: Channels.BindingParameterCollection) -> None: ...
    @overload
    def ApplyClientBehavior(self, operationDescription: OperationDescription, clientOperation: Dispatcher.ClientOperation) -> None: ...
    @overload
    def ApplyDispatchBehavior(self, operationDescription: OperationDescription, dispatchOperation: Dispatcher.DispatchOperation) -> None: ...
    @overload
    def Validate(self, operationDescription: OperationDescription) -> None: ...

class ListenUriMode(enum.Enum):
    Explicit = 0
    Unique = 1

class MessageBodyDescription(object):
    """    """
    def __init__(self): ...
    @property
    def Parts(self) -> MessagePartDescriptionCollection: ...
    @property
    def ReturnValue(self) -> MessagePartDescription: ...
    @property
    def WrapperName(self) -> str: ...
    @property
    def WrapperNamespace(self) -> str: ...
    @ReturnValue.setter
    def ReturnValue(self, value: System.Void): ...
    @WrapperName.setter
    def WrapperName(self, value: System.Void): ...
    @WrapperNamespace.setter
    def WrapperNamespace(self, value: System.Void): ...

class MessageDescription(object):
    """    """
    def __init__(self, action: str, direction: MessageDirection): ...
    @property
    def Action(self) -> str: ...
    @property
    def Body(self) -> MessageBodyDescription: ...
    @property
    def Direction(self) -> MessageDirection: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Headers(self) -> MessageHeaderDescriptionCollection: ...
    @property
    def MessageType(self) -> System.Type: ...
    @property
    def Properties(self) -> MessagePropertyDescriptionCollection: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @MessageType.setter
    def MessageType(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @overload
    def ShouldSerializeProtectionLevel() -> bool: ...

class MessageDescriptionCollection(ObjectModel.Collection):
    """    """
    @overload
    def Find(self, action: str) -> MessageDescription: ...
    @overload
    def FindAll(self, action: str) -> ObjectModel.Collection: ...

class MessageDirection(enum.Enum):
    Input = 0
    Output = 1

class MessageHeaderDescription(MessagePartDescription):
    """    """
    def __init__(self, name: str, ns: str): ...
    @property
    def Actor(self) -> str: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Relay(self) -> bool: ...
    @property
    def TypedHeader(self) -> bool: ...
    @Actor.setter
    def Actor(self, value: System.Void): ...
    @MustUnderstand.setter
    def MustUnderstand(self, value: System.Void): ...
    @Relay.setter
    def Relay(self, value: System.Void): ...
    @TypedHeader.setter
    def TypedHeader(self, value: System.Void): ...

class MessageHeaderDescriptionCollection(ObjectModel.KeyedCollection):
    """    """

class MessagePartDescription(object):
    """    """
    def __init__(self, name: str, ns: str): ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def MemberInfo(self) -> Reflection.MemberInfo: ...
    @property
    def Multiple(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def Type(self) -> System.Type: ...
    @Index.setter
    def Index(self, value: System.Void): ...
    @MemberInfo.setter
    def MemberInfo(self, value: System.Void): ...
    @Multiple.setter
    def Multiple(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class MessagePartDescriptionCollection(ObjectModel.KeyedCollection):
    """    """

class MessagePropertyDescription(MessagePartDescription):
    """    """
    def __init__(self, name: str): ...

class MessagePropertyDescriptionCollection(ObjectModel.KeyedCollection):
    """    """

class MetadataConversionError(object):
    """    """
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, isWarning: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsWarning(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...

class MetadataLocation(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, location: str): ...
    @property
    def Location(self) -> str: ...
    @Location.setter
    def Location(self, value: System.Void): ...

class OperationDescription(object):
    """    """
    def __init__(self, name: str, declaringContract: ContractDescription): ...
    @property
    def BeginMethod(self) -> Reflection.MethodInfo: ...
    @property
    def Behaviors(self) -> Generic.KeyedByTypeCollection: ...
    @property
    def DeclaringContract(self) -> ContractDescription: ...
    @property
    def EndMethod(self) -> Reflection.MethodInfo: ...
    @property
    def Faults(self) -> FaultDescriptionCollection: ...
    @property
    def IsInitiating(self) -> bool: ...
    @property
    def IsOneWay(self) -> bool: ...
    @property
    def IsTerminating(self) -> bool: ...
    @property
    def KnownTypes(self) -> ObjectModel.Collection: ...
    @property
    def Messages(self) -> MessageDescriptionCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def OperationBehaviors(self) -> ObjectModel.KeyedCollection: ...
    @property
    def SyncMethod(self) -> Reflection.MethodInfo: ...
    @property
    def TaskMethod(self) -> Reflection.MethodInfo: ...
    @BeginMethod.setter
    def BeginMethod(self, value: System.Void): ...
    @DeclaringContract.setter
    def DeclaringContract(self, value: System.Void): ...
    @EndMethod.setter
    def EndMethod(self, value: System.Void): ...
    @IsInitiating.setter
    def IsInitiating(self, value: System.Void): ...
    @IsTerminating.setter
    def IsTerminating(self, value: System.Void): ...
    @SyncMethod.setter
    def SyncMethod(self, value: System.Void): ...
    @TaskMethod.setter
    def TaskMethod(self, value: System.Void): ...

class OperationDescriptionCollection(ObjectModel.Collection):
    """    """
    @overload
    def Find(self, name: str) -> OperationDescription: ...
    @overload
    def FindAll(self, name: str) -> ObjectModel.Collection: ...

class PolicyVersion(object):
    """    """
    @property
    def Default(self) -> PolicyVersion: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Policy12(self) -> PolicyVersion: ...
    @property
    def Policy15(self) -> PolicyVersion: ...
    @overload
    def ToString() -> str: ...

class PrincipalPermissionMode(enum.Enum):
    None_ = 0
    UseWindowsGroups = 1
    UseAspNetRoles = 2
    Custom = 3
    Always = 4

class ServiceEndpoint(object):
    """    """
    @overload
    def __init__(self, contract: ContractDescription): ...
    @overload
    def __init__(self, contract: ContractDescription, binding: Channels.Binding, address: ServiceModel.EndpointAddress): ...
    @property
    def Address(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Behaviors(self) -> Generic.KeyedByTypeCollection: ...
    @property
    def Binding(self) -> Channels.Binding: ...
    @property
    def Contract(self) -> ContractDescription: ...
    @property
    def EndpointBehaviors(self) -> ObjectModel.KeyedCollection: ...
    @property
    def IsSystemEndpoint(self) -> bool: ...
    @property
    def ListenUri(self) -> System.Uri: ...
    @property
    def ListenUriMode(self) -> ListenUriMode: ...
    @property
    def Name(self) -> str: ...
    @Address.setter
    def Address(self, value: System.Void): ...
    @Binding.setter
    def Binding(self, value: System.Void): ...
    @Contract.setter
    def Contract(self, value: System.Void): ...
    @IsSystemEndpoint.setter
    def IsSystemEndpoint(self, value: System.Void): ...
    @ListenUri.setter
    def ListenUri(self, value: System.Void): ...
    @ListenUriMode.setter
    def ListenUriMode(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class ServiceEndpointCollection(ObjectModel.Collection):
    """    """
    @overload
    def Find(self, contractType: System.Type) -> ServiceEndpoint: ...
    @overload
    def Find(self, address: System.Uri) -> ServiceEndpoint: ...
    @overload
    def Find(self, contractName: Xml.XmlQualifiedName) -> ServiceEndpoint: ...
    @overload
    def Find(self, contractName: Xml.XmlQualifiedName, bindingName: Xml.XmlQualifiedName) -> ServiceEndpoint: ...
    @overload
    def Find(self, contractType: System.Type, bindingName: Xml.XmlQualifiedName) -> ServiceEndpoint: ...
    @overload
    def FindAll(self, contractName: Xml.XmlQualifiedName) -> ObjectModel.Collection: ...
    @overload
    def FindAll(self, contractType: System.Type) -> ObjectModel.Collection: ...

class TypedMessageConverter(object):
    """    """
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str) -> TypedMessageConverter: ...
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str, defaultNamespace: str) -> TypedMessageConverter: ...
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str, formatterAttribute: ServiceModel.XmlSerializerFormatAttribute) -> TypedMessageConverter: ...
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str, formatterAttribute: ServiceModel.DataContractFormatAttribute) -> TypedMessageConverter: ...
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str, defaultNamespace: str, formatterAttribute: ServiceModel.XmlSerializerFormatAttribute) -> TypedMessageConverter: ...
    @overload
    @staticmethod
    def Create(messageContract: System.Type, action: str, defaultNamespace: str, formatterAttribute: ServiceModel.DataContractFormatAttribute) -> TypedMessageConverter: ...
    @overload
    def FromMessage(self, message: Channels.Message) -> object: ...
    @overload
    def ToMessage(self, typedMessage: object) -> Channels.Message: ...
    @overload
    def ToMessage(self, typedMessage: object, version: Channels.MessageVersion) -> Channels.Message: ...

class XmlSerializerOperationBehavior(object):
    """    """
    @overload
    def __init__(self, operation: OperationDescription): ...
    @overload
    def __init__(self, operation: OperationDescription, attribute: ServiceModel.XmlSerializerFormatAttribute): ...
    @property
    def XmlSerializerFormatAttribute(self) -> ServiceModel.XmlSerializerFormatAttribute: ...
    @overload
    def GetXmlMappings() -> ObjectModel.Collection: ...

# endregion
