"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AddressHeader", "AddressHeaderCollection", "AddressingVersion", "ApplicationContainerSettings", "BinaryMessageEncodingBindingElement", "BinaryVersion", "Binding", "BindingContext", "BindingElement", "BindingElementCollection", "BindingParameterCollection", "BodyWriter", "BufferedReadStream", "BufferManager", "ChannelBase", "ChannelFactoryBase", "ChannelManagerBase", "ChannelParameterCollection", "ClientWebSocketFactory", "CommunicationObject", "CommunicationObjectInternal", "CompressionFormat", "IConnection", "IConnectionInitiator", "ConnectionOrientedTransportBindingElement", "CommunicationPool", "ConnectionPool", "ConnectionPoolRegistry", "CustomBinding", "DelegatingStream", "FaultConverter", "HttpMessageHandlerFactory", "HttpRequestMessageExtensionMethods", "HttpRequestMessageProperty", "HttpResponseMessageProperty", "HttpsTransportBindingElement", "HttpTransportBindingElement", "IAsyncChannelFactory", "IBindingDeliveryCapabilities", "IBindingMulticastCapabilities", "IBindingRuntimePreferences", "IChannel", "IChannelFactory", "IChannelListener", "IdlingCommunicationPool", "IDuplexChannel", "IDuplexSession", "IDuplexSessionChannel", "IHttpCookieContainerManager", "IInputChannel", "IAsyncInputChannel", "IInputSession", "IInputSessionChannel", "IMessageProperty", "IMessageSource", "IOutputChannel", "IAsyncOutputChannel", "IOutputSession", "IOutputSessionChannel", "IAsyncOutputSessionChannel", "IReceiveContextSettings", "IReplyChannel", "IReplySessionChannel", "IRequestChannel", "IRequestSessionChannel", "ISecurityCapabilities", "ISession", "ISessionChannel", "ITransportCompressionSupport", "IConnectionOrientedConnectionSettings", "ITransportFactorySettings", "IConnectionOrientedTransportFactorySettings", "IConnectionOrientedTransportChannelFactorySettings", "ITcpChannelFactorySettings", "LocalClientSecuritySettings", "MaxMessageSizeStream", "Message", "MessageBuffer", "MessageEncoder", "MessageEncoderFactory", "MessageEncodingBindingElement", "MessageFault", "XmlObjectSerializerFault", "MessageHeader", "MessageHeaderInfo", "MessageHeaders", "MessageProperties", "MessageState", "MessageVersion", "MtomMessageEncodingBindingElement", "NamedPipeSettings", "OutputChannel", "ReliableSessionBindingElement", "RequestChannel", "IRequestBase", "IAsyncRequest", "RequestContext", "SecurityBindingElement", "SecurityCapabilities", "SecurityHeaderLayout", "ServiceChannelProxy", "SslStreamSecurityBindingElement", "StreamSecurityUpgradeInitiator", "StreamSecurityUpgradeProvider", "StreamUpgradeBindingElement", "StreamUpgradeInitiator", "StreamUpgradeProvider", "SupportedAddressingMode", "TcpConnectionPoolSettings", "TcpTransportBindingElement", "TextMessageEncodingBindingElement", "TransportBindingElement", "TransportChannelFactory", "TransportDuplexSessionChannel", "TransportOutputChannel", "TransportSecurityBindingElement", "UnderstoodHeaders", "WebSocketTransportSettings", "WebSocketTransportUsage", "WindowsStreamSecurityBindingElement", "ConnectionDuplexSession"]
# endregion

# region: Imports
from System import IO
from System import Net
from System import Reflection
from System import Runtime
from System import ServiceModel
from System import Text
from System import Threading
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Net import Http
from System.Net import Security
from System.Runtime import CompilerServices
from System.Runtime import Diagnostics
from System.Runtime import Serialization
from System.Security import Authentication
from System.Security.Authentication import ExtendedProtection
from System.ServiceModel import Description
from System.ServiceModel import Security
from System.ServiceModel.Security import Tokens
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class AddressHeader(object):
    """    """
    @overload
    @staticmethod
    def CreateAddressHeader(value: object) -> AddressHeader: ...
    @overload
    @staticmethod
    def CreateAddressHeader(value: object, serializer: Serialization.XmlObjectSerializer) -> AddressHeader: ...
    @overload
    @staticmethod
    def CreateAddressHeader(name: str, ns: str, value: object) -> AddressHeader: ...
    @overload
    @staticmethod
    def CreateAddressHeader(name: str, ns: str, value: object, serializer: Serialization.XmlObjectSerializer) -> AddressHeader: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @overload
    def GetAddressHeaderReader() -> Xml.XmlDictionaryReader: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetValue() -> T: ...
    @overload
    def GetValue(self, serializer: Serialization.XmlObjectSerializer) -> T: ...
    @overload
    def ToMessageHeader() -> MessageHeader: ...
    @overload
    def WriteAddressHeader(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteAddressHeader(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteAddressHeaderContents(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteStartAddressHeader(self, writer: Xml.XmlDictionaryWriter) -> None: ...

class AddressHeaderCollection(ObjectModel.ReadOnlyCollection):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, addressHeaders: Generic.IEnumerable): ...
    @overload
    def AddHeadersTo(self, message: Message) -> None: ...
    @overload
    def FindAll(self, name: str, ns: str) -> System.Array[AddressHeader]: ...
    @overload
    def FindHeader(self, name: str, ns: str) -> AddressHeader: ...

class AddressingVersion(object):
    """    """
    @property
    def None_(self) -> AddressingVersion: ...
    @property
    def WSAddressing10(self) -> AddressingVersion: ...
    @property
    def WSAddressingAugust2004(self) -> AddressingVersion: ...
    @overload
    def ToString() -> str: ...

class ApplicationContainerSettings(object):
    """    """
    @property
    def CurrentSession(self) -> int: ...
    @property
    def ServiceSession(self) -> int: ...
    @property
    def PackageFullName(self) -> str: ...
    @property
    def SessionId(self) -> int: ...
    @PackageFullName.setter
    def PackageFullName(self, value: System.Void): ...
    @SessionId.setter
    def SessionId(self, value: System.Void): ...

class BinaryMessageEncodingBindingElement(MessageEncodingBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def Clone() -> BindingElement: ...
    @overload
    def CreateMessageEncoderFactory() -> MessageEncoderFactory: ...
    @property
    def CompressionFormat(self) -> CompressionFormat: ...
    @property
    def MaxReadPoolSize(self) -> int: ...
    @property
    def MaxSessionSize(self) -> int: ...
    @property
    def MaxWritePoolSize(self) -> int: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @CompressionFormat.setter
    def CompressionFormat(self, value: System.Void): ...
    @MaxReadPoolSize.setter
    def MaxReadPoolSize(self, value: System.Void): ...
    @MaxSessionSize.setter
    def MaxSessionSize(self, value: System.Void): ...
    @MaxWritePoolSize.setter
    def MaxWritePoolSize(self, value: System.Void): ...
    @MessageVersion.setter
    def MessageVersion(self, value: System.Void): ...
    @ReaderQuotas.setter
    def ReaderQuotas(self, value: System.Void): ...
    @overload
    def ShouldSerializeMessageVersion() -> bool: ...
    @overload
    def ShouldSerializeReaderQuotas() -> bool: ...

class BinaryVersion(object):
    """    """
    @property
    def Version1(self) -> BinaryVersion: ...
    @property
    def GZipVersion1(self) -> BinaryVersion: ...
    @property
    def DeflateVersion1(self) -> BinaryVersion: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def CurrentVersion(self) -> BinaryVersion: ...
    @property
    def Dictionary(self) -> Xml.IXmlDictionary: ...
    @property
    def SessionContentType(self) -> str: ...

class Binding(object):
    """    """
    @overload
    def BuildChannelFactory(self, parameters: BindingParameterCollection) -> IChannelFactory: ...
    @overload
    def BuildChannelFactory(self, parameters: System.System.Array[object]) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, parameters: BindingParameterCollection) -> bool: ...
    @overload
    def CanBuildChannelFactory(self, parameters: System.System.Array[object]) -> bool: ...
    @overload
    def CreateBindingElements() -> BindingElementCollection: ...
    @property
    def CloseTimeout(self) -> System.TimeSpan: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OpenTimeout(self) -> System.TimeSpan: ...
    @property
    def ReceiveTimeout(self) -> System.TimeSpan: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def SendTimeout(self) -> System.TimeSpan: ...
    @overload
    def GetProperty(self, parameters: BindingParameterCollection) -> T: ...
    @CloseTimeout.setter
    def CloseTimeout(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @OpenTimeout.setter
    def OpenTimeout(self, value: System.Void): ...
    @ReceiveTimeout.setter
    def ReceiveTimeout(self, value: System.Void): ...
    @SendTimeout.setter
    def SendTimeout(self, value: System.Void): ...

class BindingContext(object):
    """    """
    def __init__(self, binding: CustomBinding, parameters: BindingParameterCollection): ...
    @overload
    def BuildInnerChannelFactory() -> IChannelFactory: ...
    @overload
    def CanBuildInnerChannelFactory() -> bool: ...
    @overload
    def Clone() -> BindingContext: ...
    @property
    def Binding(self) -> CustomBinding: ...
    @property
    def BindingParameters(self) -> BindingParameterCollection: ...
    @property
    def ListenUriBaseAddress(self) -> System.Uri: ...
    @property
    def ListenUriMode(self) -> Description.ListenUriMode: ...
    @property
    def ListenUriRelativeAddress(self) -> str: ...
    @property
    def RemainingBindingElements(self) -> BindingElementCollection: ...
    @overload
    def GetInnerProperty() -> T: ...
    @ListenUriBaseAddress.setter
    def ListenUriBaseAddress(self, value: System.Void): ...
    @ListenUriMode.setter
    def ListenUriMode(self, value: System.Void): ...
    @ListenUriRelativeAddress.setter
    def ListenUriRelativeAddress(self, value: System.Void): ...

class BindingElement(object):
    """    """
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...

class BindingElementCollection(ObjectModel.Collection):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elements: Generic.IEnumerable): ...
    @overload
    def __init__(self, elements: System.Array[BindingElement]): ...
    @overload
    def AddRange(self, elements: System.Array[BindingElement]) -> None: ...
    @overload
    def Clone() -> BindingElementCollection: ...
    @overload
    def Contains(self, bindingElementType: System.Type) -> bool: ...
    @overload
    def Find() -> T: ...
    @overload
    def FindAll() -> ObjectModel.Collection: ...
    @overload
    def Remove() -> T: ...
    @overload
    def RemoveAll() -> ObjectModel.Collection: ...

class BindingParameterCollection(Generic.KeyedByTypeCollection):
    """    """
    def __init__(self): ...

class BodyWriter(object):
    """    """
    @overload
    def BeginWriteBodyContents(self, writer: Xml.XmlDictionaryWriter, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CreateBufferedCopy(self, maxBufferSize: int) -> BodyWriter: ...
    @overload
    def EndWriteBodyContents(self, result: System.IAsyncResult) -> None: ...
    @property
    def IsBuffered(self) -> bool: ...
    @overload
    def WriteBodyContents(self, writer: Xml.XmlDictionaryWriter) -> None: ...

class BufferedReadStream(IO.Stream):
    """    """
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, stream: IO.Stream, bufferManager: BufferManager): ...
    @overload
    def __init__(self, stream: IO.Stream, bufferManager: BufferManager, bufferSize: int): ...
    @property
    def BufferedReadStreamPropertyName(self) -> str: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def IsBufferEmpty(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @overload
    def PreReadBufferAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def PreReadBufferAsync(self, preBufferedByte: System.Byte, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Read(self, array: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class BufferManager(object):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    @staticmethod
    def CreateBufferManager(maxBufferPoolSize: System.Int64, maxBufferSize: int) -> BufferManager: ...
    @overload
    def ReturnBuffer(self, buffer: System.System.Array[System.Byte]) -> None: ...
    @overload
    def TakeBuffer(self, bufferSize: int) -> System.System.Array[System.Byte]: ...

class ChannelBase(CommunicationObject):
    """    """
    @overload
    def GetProperty() -> T: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelFactoryBase(ChannelManagerBase):
    """    """
    @overload
    def GetProperty() -> T: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelFactoryBase(ChannelFactoryBase):
    """    ChannelFactoryBase[TChannel]
    """
    @overload
    def CreateChannel(self, address: ServiceModel.EndpointAddress) -> TChannel: ...
    @overload
    def CreateChannel(self, address: ServiceModel.EndpointAddress, via: System.Uri) -> TChannel: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelManagerBase(CommunicationObject):
    """    """
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelParameterCollection(ObjectModel.Collection):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, channel: IChannel): ...
    @overload
    def PropagateChannelParameters(self, innerChannel: IChannel) -> None: ...

class ClientWebSocketFactory(object):
    """    """
    @overload
    def CreateWebSocketAsync(self, address: System.Uri, headers: Net.WebHeaderCollection, credentials: Net.ICredentials, settings: WebSocketTransportSettings, timeoutHelper: Runtime.TimeoutHelper) -> Tasks.Task: ...
    @overload
    @staticmethod
    def GetFactory() -> ClientWebSocketFactory: ...

class CommunicationObject(object):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginClose(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginClose(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginOpen(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginOpen(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndClose(self, result: System.IAsyncResult) -> None: ...
    @overload
    def EndOpen(self, result: System.IAsyncResult) -> None: ...
    @property
    def State(self) -> ServiceModel.CommunicationState: ...
    @overload
    def Open() -> None: ...
    @overload
    def Open(self, timeout: System.TimeSpan) -> None: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class CommunicationObjectInternal(object):
    """    """
    @overload
    @staticmethod
    def GetInternalCloseTimeout(communicationObject: CommunicationObject) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def OnBeginClose(communicationObject: CommunicationObject, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def OnBeginOpen(communicationObject: CommunicationObject, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    @staticmethod
    def OnClose(communicationObject: CommunicationObject, timeout: System.TimeSpan) -> None: ...
    @overload
    @staticmethod
    def OnCloseAsyncInternal(communicationObject: CommunicationObject, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    @staticmethod
    def OnEnd(result: System.IAsyncResult) -> None: ...
    @overload
    @staticmethod
    def OnOpen(communicationObject: CommunicationObject, timeout: System.TimeSpan) -> None: ...
    @overload
    @staticmethod
    def OnOpenAsyncInternal(communicationObject: CommunicationObject, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    @staticmethod
    def ThrowIfClosed(communicationObject: CommunicationObject) -> None: ...
    @overload
    @staticmethod
    def ThrowIfClosedOrOpened(communicationObject: CommunicationObject) -> None: ...
    @overload
    @staticmethod
    def ThrowIfDisposed(communicationObject: CommunicationObject) -> None: ...
    @overload
    @staticmethod
    def ThrowIfDisposedOrNotOpen(communicationObject: CommunicationObject) -> None: ...

class CompressionFormat(enum.Enum):
    None_ = 0
    GZip = 1
    Deflate = 2

class IConnection:
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginRead(self, offset: int, size: int, timeout: System.TimeSpan, callback: System.Action, state: object) -> Runtime.AsyncCompletionResult: ...
    @overload
    def BeginWrite(self, buffer: System.System.Array[System.Byte], offset: int, size: int, immediate: bool, timeout: System.TimeSpan, callback: System.Action, state: object) -> Runtime.AsyncCompletionResult: ...
    @overload
    def Close(self, timeout: System.TimeSpan, asyncAndLinger: bool) -> None: ...
    @overload
    def EndRead() -> int: ...
    @overload
    def EndWrite() -> None: ...
    @property
    def AsyncReadBuffer(self) -> System.System.Array[System.Byte]: ...
    @property
    def AsyncReadBufferSize(self) -> int: ...
    @overload
    def GetCoreTransport() -> object: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, size: int, timeout: System.TimeSpan) -> int: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, size: int, immediate: bool, timeout: System.TimeSpan) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, size: int, immediate: bool, timeout: System.TimeSpan, bufferManager: BufferManager) -> None: ...

class IConnectionInitiator:
    """    """
    @overload
    def Connect(self, uri: System.Uri, timeout: System.TimeSpan) -> IConnection: ...
    @overload
    def ConnectAsync(self, uri: System.Uri, timeout: System.TimeSpan) -> Tasks.Task: ...

class ConnectionOrientedTransportBindingElement(TransportBindingElement):
    """    """
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @property
    def ConnectionBufferSize(self) -> int: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def TransferMode(self) -> ServiceModel.TransferMode: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @ConnectionBufferSize.setter
    def ConnectionBufferSize(self, value: System.Void): ...
    @MaxBufferSize.setter
    def MaxBufferSize(self, value: System.Void): ...
    @TransferMode.setter
    def TransferMode(self, value: System.Void): ...

class CommunicationPool(object):
    """    CommunicationPool[TKey, TItem]
    """
    @overload
    def AddConnection(self, key: TKey, connection: TItem, timeout: System.TimeSpan) -> None: ...
    @overload
    def Close(self, timeout: System.TimeSpan) -> bool: ...
    @property
    def MaxIdleConnectionPoolCount(self) -> int: ...
    @overload
    def ReturnConnection(self, key: TKey, connection: TItem, connectionIsStillGood: bool, timeout: System.TimeSpan) -> None: ...
    @overload
    def TakeConnection(self, address: ServiceModel.EndpointAddress, via: System.Uri, timeout: System.TimeSpan) -> (TItem, TKey): ...
    @overload
    def TryOpen() -> bool: ...

class ConnectionPool(IdlingCommunicationPool):
    """    """
    @property
    def Name(self) -> str: ...
    @overload
    def IsCompatible(self, settings: IConnectionOrientedTransportChannelFactorySettings) -> bool: ...

class ConnectionPoolRegistry(object):
    """    """
    @overload
    def Lookup(self, settings: IConnectionOrientedTransportChannelFactorySettings) -> ConnectionPool: ...
    @overload
    def Release(self, pool: ConnectionPool, timeout: System.TimeSpan) -> None: ...

class CustomBinding(Binding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bindingElementsInTopDownChannelStackOrder: System.Array[BindingElement]): ...
    @overload
    def __init__(self, bindingElementsInTopDownChannelStackOrder: Generic.IEnumerable): ...
    @overload
    def __init__(self, binding: Binding): ...
    @overload
    def __init__(self, name: str, ns: str, bindingElementsInTopDownChannelStackOrder: System.Array[BindingElement]): ...
    @overload
    def CreateBindingElements() -> BindingElementCollection: ...
    @property
    def Elements(self) -> BindingElementCollection: ...
    @property
    def Scheme(self) -> str: ...

class DelegatingStream(IO.Stream):
    """    """
    @overload
    def CopyToAsync(self, destination: IO.Stream, bufferSize: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> System.Int64: ...
    @property
    def Position(self) -> System.Int64: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Seek(self, offset: System.Int64, origin: IO.SeekOrigin) -> System.Int64: ...
    @Position.setter
    def Position(self, value: System.Void): ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: System.Void): ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: System.Void): ...
    @overload
    def SetLength(self, value: System.Int64) -> None: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class FaultConverter(object):
    """    """
    @overload
    @staticmethod
    def GetDefaultFaultConverter(version: MessageVersion) -> FaultConverter: ...
    @overload
    def TryCreateException(self, message: Message, fault: MessageFault) -> (bool, System.Exception): ...
    @overload
    def TryCreateFaultMessage(self, exception: System.Exception) -> (bool, Message): ...

class HttpMessageHandlerFactory(object):
    """    """
    @overload
    def __init__(self, handlers: System.System.Array[System.Type]): ...
    @overload
    def __init__(self, handlers: System.Func): ...
    @overload
    def Create(self, innerChannel: Http.HttpMessageHandler) -> Http.HttpMessageHandler: ...

class HttpRequestMessageExtensionMethods(object):
    """    """
    @overload
    @staticmethod
    def CreateContentIfNull(httpRequestMessage: Http.HttpRequestMessage) -> bool: ...

class HttpRequestMessageProperty(object):
    """    """
    def __init__(self): ...
    @property
    def Headers(self) -> Net.WebHeaderCollection: ...
    @property
    def HttpRequestMessage(self) -> Http.HttpRequestMessage: ...
    @property
    def Method(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def SuppressEntityBody(self) -> bool: ...
    @Method.setter
    def Method(self, value: System.Void): ...
    @QueryString.setter
    def QueryString(self, value: System.Void): ...
    @SuppressEntityBody.setter
    def SuppressEntityBody(self, value: System.Void): ...

class HttpResponseMessageProperty(object):
    """    """
    def __init__(self): ...
    @property
    def Headers(self) -> Net.WebHeaderCollection: ...
    @property
    def HttpResponseMessage(self) -> Http.HttpResponseMessage: ...
    @property
    def Name(self) -> str: ...
    @property
    def StatusCode(self) -> Net.HttpStatusCode: ...
    @property
    def StatusDescription(self) -> str: ...
    @property
    def SuppressEntityBody(self) -> bool: ...
    @property
    def SuppressPreamble(self) -> bool: ...
    @StatusCode.setter
    def StatusCode(self, value: System.Void): ...
    @StatusDescription.setter
    def StatusDescription(self, value: System.Void): ...
    @SuppressEntityBody.setter
    def SuppressEntityBody(self, value: System.Void): ...
    @SuppressPreamble.setter
    def SuppressPreamble(self, value: System.Void): ...

class HttpsTransportBindingElement(HttpTransportBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def RequireClientCertificate(self) -> bool: ...
    @property
    def Scheme(self) -> str: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @RequireClientCertificate.setter
    def RequireClientCertificate(self, value: System.Void): ...

class HttpTransportBindingElement(TransportBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def AllowCookies(self) -> bool: ...
    @property
    def AuthenticationScheme(self) -> Net.AuthenticationSchemes: ...
    @property
    def BypassProxyOnLocal(self) -> bool: ...
    @property
    def DecompressionEnabled(self) -> bool: ...
    @property
    def ExtendedProtectionPolicy(self) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @property
    def HostNameComparisonMode(self) -> ServiceModel.HostNameComparisonMode: ...
    @property
    def KeepAliveEnabled(self) -> bool: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MaxPendingAccepts(self) -> int: ...
    @property
    def MessageHandlerFactory(self) -> HttpMessageHandlerFactory: ...
    @property
    def Proxy(self) -> Net.IWebProxy: ...
    @property
    def ProxyAddress(self) -> System.Uri: ...
    @property
    def ProxyAuthenticationScheme(self) -> Net.AuthenticationSchemes: ...
    @property
    def Realm(self) -> str: ...
    @property
    def RequestInitializationTimeout(self) -> System.TimeSpan: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def TransferMode(self) -> ServiceModel.TransferMode: ...
    @property
    def UnsafeConnectionNtlmAuthentication(self) -> bool: ...
    @property
    def UseDefaultWebProxy(self) -> bool: ...
    @property
    def WebSocketSettings(self) -> WebSocketTransportSettings: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @AllowCookies.setter
    def AllowCookies(self, value: System.Void): ...
    @AuthenticationScheme.setter
    def AuthenticationScheme(self, value: System.Void): ...
    @BypassProxyOnLocal.setter
    def BypassProxyOnLocal(self, value: System.Void): ...
    @DecompressionEnabled.setter
    def DecompressionEnabled(self, value: System.Void): ...
    @ExtendedProtectionPolicy.setter
    def ExtendedProtectionPolicy(self, value: System.Void): ...
    @HostNameComparisonMode.setter
    def HostNameComparisonMode(self, value: System.Void): ...
    @KeepAliveEnabled.setter
    def KeepAliveEnabled(self, value: System.Void): ...
    @MaxBufferSize.setter
    def MaxBufferSize(self, value: System.Void): ...
    @MaxPendingAccepts.setter
    def MaxPendingAccepts(self, value: System.Void): ...
    @MessageHandlerFactory.setter
    def MessageHandlerFactory(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...
    @ProxyAddress.setter
    def ProxyAddress(self, value: System.Void): ...
    @ProxyAuthenticationScheme.setter
    def ProxyAuthenticationScheme(self, value: System.Void): ...
    @Realm.setter
    def Realm(self, value: System.Void): ...
    @RequestInitializationTimeout.setter
    def RequestInitializationTimeout(self, value: System.Void): ...
    @TransferMode.setter
    def TransferMode(self, value: System.Void): ...
    @UnsafeConnectionNtlmAuthentication.setter
    def UnsafeConnectionNtlmAuthentication(self, value: System.Void): ...
    @UseDefaultWebProxy.setter
    def UseDefaultWebProxy(self, value: System.Void): ...
    @WebSocketSettings.setter
    def WebSocketSettings(self, value: System.Void): ...

class IAsyncChannelFactory:
    """    """

class IBindingDeliveryCapabilities:
    """    """
    @property
    def AssuresOrderedDelivery(self) -> bool: ...
    @property
    def QueuedDelivery(self) -> bool: ...

class IBindingMulticastCapabilities:
    """    """
    @property
    def IsMulticast(self) -> bool: ...

class IBindingRuntimePreferences:
    """    """
    @property
    def ReceiveSynchronously(self) -> bool: ...

class IChannel:
    """    """
    @overload
    def GetProperty() -> T: ...

class IChannelFactory:
    """    """
    @overload
    def GetProperty() -> T: ...

class IChannelFactory:
    """    IChannelFactory[TChannel]
    """
    @overload
    def CreateChannel(self, to: ServiceModel.EndpointAddress) -> TChannel: ...
    @overload
    def CreateChannel(self, to: ServiceModel.EndpointAddress, via: System.Uri) -> TChannel: ...

class IChannelListener:
    """    """
    @overload
    def BeginWaitForChannel(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndWaitForChannel(self, result: System.IAsyncResult) -> bool: ...
    @property
    def Uri(self) -> System.Uri: ...
    @overload
    def GetProperty() -> T: ...
    @overload
    def WaitForChannel(self, timeout: System.TimeSpan) -> bool: ...

class IChannelListener:
    """    IChannelListener[TChannel]
    """
    @overload
    def AcceptChannel() -> TChannel: ...
    @overload
    def AcceptChannel(self, timeout: System.TimeSpan) -> TChannel: ...
    @overload
    def BeginAcceptChannel(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginAcceptChannel(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndAcceptChannel(self, result: System.IAsyncResult) -> TChannel: ...

class IdlingCommunicationPool(CommunicationPool):
    """    IdlingCommunicationPool[TKey, TItem]
    """
    @property
    def IdleTimeout(self) -> System.TimeSpan: ...

class IDuplexChannel:
    """    """

class IDuplexSession:
    """    """
    @overload
    def BeginCloseOutputSession(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginCloseOutputSession(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CloseOutputSession() -> None: ...
    @overload
    def CloseOutputSession(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndCloseOutputSession(self, result: System.IAsyncResult) -> None: ...

class IDuplexSessionChannel:
    """    """

class IHttpCookieContainerManager:
    """    """
    @property
    def CookieContainer(self) -> Net.CookieContainer: ...
    @CookieContainer.setter
    def CookieContainer(self, value: System.Void): ...

class IInputChannel:
    """    """
    @overload
    def BeginReceive(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginTryReceive(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWaitForMessage(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndReceive(self, result: System.IAsyncResult) -> Message: ...
    @overload
    def EndTryReceive(self, result: System.IAsyncResult) -> (bool, Message): ...
    @overload
    def EndWaitForMessage(self, result: System.IAsyncResult) -> bool: ...
    @property
    def LocalAddress(self) -> ServiceModel.EndpointAddress: ...
    @overload
    def Receive() -> Message: ...
    @overload
    def Receive(self, timeout: System.TimeSpan) -> Message: ...
    @overload
    def TryReceive(self, timeout: System.TimeSpan) -> (bool, Message): ...
    @overload
    def WaitForMessage(self, timeout: System.TimeSpan) -> bool: ...

class IAsyncInputChannel:
    """    """
    @overload
    def ReceiveAsync() -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def TryReceiveAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def WaitForMessageAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...

class IInputSession:
    """    """

class IInputSessionChannel:
    """    """

class IMessageProperty:
    """    """
    @overload
    def CreateCopy() -> IMessageProperty: ...

class IMessageSource:
    """    """
    @overload
    def Receive(self, timeout: System.TimeSpan) -> Message: ...
    @overload
    def ReceiveAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def WaitForMessage(self, timeout: System.TimeSpan) -> bool: ...
    @overload
    def WaitForMessageAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...

class IOutputChannel:
    """    """
    @overload
    def BeginSend(self, message: Message, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, message: Message, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndSend(self, result: System.IAsyncResult) -> None: ...
    @property
    def RemoteAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @overload
    def Send(self, message: Message) -> None: ...
    @overload
    def Send(self, message: Message, timeout: System.TimeSpan) -> None: ...

class IAsyncOutputChannel:
    """    """
    @overload
    def SendAsync(self, message: Message) -> Tasks.Task: ...
    @overload
    def SendAsync(self, message: Message, timeout: System.TimeSpan) -> Tasks.Task: ...

class IOutputSession:
    """    """

class IOutputSessionChannel:
    """    """

class IAsyncOutputSessionChannel:
    """    """

class IReceiveContextSettings:
    """    """
    @property
    def Enabled(self) -> bool: ...
    @property
    def ValidityDuration(self) -> System.TimeSpan: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class IReplyChannel:
    """    """
    @overload
    def BeginReceiveRequest(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceiveRequest(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginTryReceiveRequest(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWaitForRequest(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndReceiveRequest(self, result: System.IAsyncResult) -> RequestContext: ...
    @overload
    def EndTryReceiveRequest(self, result: System.IAsyncResult) -> (bool, RequestContext): ...
    @overload
    def EndWaitForRequest(self, result: System.IAsyncResult) -> bool: ...
    @property
    def LocalAddress(self) -> ServiceModel.EndpointAddress: ...
    @overload
    def ReceiveRequest() -> RequestContext: ...
    @overload
    def ReceiveRequest(self, timeout: System.TimeSpan) -> RequestContext: ...
    @overload
    def TryReceiveRequest(self, timeout: System.TimeSpan) -> (bool, RequestContext): ...
    @overload
    def WaitForRequest(self, timeout: System.TimeSpan) -> bool: ...

class IReplySessionChannel:
    """    """

class IRequestChannel:
    """    """
    @overload
    def BeginRequest(self, message: Message, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginRequest(self, message: Message, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndRequest(self, result: System.IAsyncResult) -> Message: ...
    @property
    def RemoteAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @overload
    def Request(self, message: Message) -> Message: ...
    @overload
    def Request(self, message: Message, timeout: System.TimeSpan) -> Message: ...

class IRequestSessionChannel:
    """    """

class ISecurityCapabilities:
    """    """
    @property
    def SupportedRequestProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SupportedResponseProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SupportsClientAuthentication(self) -> bool: ...
    @property
    def SupportsClientWindowsIdentity(self) -> bool: ...
    @property
    def SupportsServerAuthentication(self) -> bool: ...

class ISession:
    """    """
    @property
    def Id(self) -> str: ...

class ISessionChannel:
    """    ISessionChannel[TSession]
    """
    @property
    def Session(self) -> TSession: ...

class ITransportCompressionSupport:
    """    """
    @overload
    def IsCompressionFormatSupported(self, compressionFormat: CompressionFormat) -> bool: ...

class IConnectionOrientedConnectionSettings:
    """    """
    @property
    def ConnectionBufferSize(self) -> int: ...
    @property
    def IdleTimeout(self) -> System.TimeSpan: ...
    @property
    def MaxOutputDelay(self) -> System.TimeSpan: ...

class ITransportFactorySettings:
    """    """
    @property
    def BufferManager(self) -> BufferManager: ...
    @property
    def ManualAddressing(self) -> bool: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def MessageEncoderFactory(self) -> MessageEncoderFactory: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...

class IConnectionOrientedTransportFactorySettings:
    """    """
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def TransferMode(self) -> ServiceModel.TransferMode: ...
    @property
    def Upgrade(self) -> StreamUpgradeProvider: ...

class IConnectionOrientedTransportChannelFactorySettings:
    """    """
    @property
    def ConnectionPoolGroupName(self) -> str: ...
    @property
    def MaxOutboundConnectionsPerEndpoint(self) -> int: ...

class ITcpChannelFactorySettings:
    """    """
    @property
    def LeaseTimeout(self) -> System.TimeSpan: ...

class LocalClientSecuritySettings(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> LocalClientSecuritySettings: ...
    @property
    def CacheCookies(self) -> bool: ...
    @property
    def CookieRenewalThresholdPercentage(self) -> int: ...
    @property
    def DetectReplays(self) -> bool: ...
    @property
    def IdentityVerifier(self) -> Security.IdentityVerifier: ...
    @property
    def MaxClockSkew(self) -> System.TimeSpan: ...
    @property
    def MaxCookieCachingTime(self) -> System.TimeSpan: ...
    @property
    def NonceCache(self) -> Security.NonceCache: ...
    @property
    def ReconnectTransportOnFailure(self) -> bool: ...
    @property
    def ReplayCacheSize(self) -> int: ...
    @property
    def ReplayWindow(self) -> System.TimeSpan: ...
    @property
    def SessionKeyRenewalInterval(self) -> System.TimeSpan: ...
    @property
    def SessionKeyRolloverInterval(self) -> System.TimeSpan: ...
    @property
    def TimestampValidityDuration(self) -> System.TimeSpan: ...
    @CacheCookies.setter
    def CacheCookies(self, value: System.Void): ...
    @CookieRenewalThresholdPercentage.setter
    def CookieRenewalThresholdPercentage(self, value: System.Void): ...
    @DetectReplays.setter
    def DetectReplays(self, value: System.Void): ...
    @IdentityVerifier.setter
    def IdentityVerifier(self, value: System.Void): ...
    @MaxClockSkew.setter
    def MaxClockSkew(self, value: System.Void): ...
    @MaxCookieCachingTime.setter
    def MaxCookieCachingTime(self, value: System.Void): ...
    @NonceCache.setter
    def NonceCache(self, value: System.Void): ...
    @ReconnectTransportOnFailure.setter
    def ReconnectTransportOnFailure(self, value: System.Void): ...
    @ReplayCacheSize.setter
    def ReplayCacheSize(self, value: System.Void): ...
    @ReplayWindow.setter
    def ReplayWindow(self, value: System.Void): ...
    @SessionKeyRenewalInterval.setter
    def SessionKeyRenewalInterval(self, value: System.Void): ...
    @SessionKeyRolloverInterval.setter
    def SessionKeyRolloverInterval(self, value: System.Void): ...
    @TimestampValidityDuration.setter
    def TimestampValidityDuration(self, value: System.Void): ...

class MaxMessageSizeStream(DelegatingStream):
    """    """
    def __init__(self, stream: IO.Stream, maxMessageSize: System.Int64): ...
    @overload
    @staticmethod
    def CreateMaxReceivedMessageSizeExceededException(maxMessageSize: System.Int64) -> System.Exception: ...
    @overload
    def Read(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def ReadByte() -> int: ...
    @overload
    def Write(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: System.System.Array[System.Byte], offset: int, count: int, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...

class Message(object):
    """    """
    @overload
    def BeginWriteBodyContents(self, writer: Xml.XmlDictionaryWriter, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWriteMessage(self, writer: Xml.XmlDictionaryWriter, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def CreateBufferedCopy(self, maxBufferSize: int) -> MessageBuffer: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(envelopeReader: Xml.XmlDictionaryReader, maxSizeOfHeaders: int, version: MessageVersion) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(envelopeReader: Xml.XmlReader, maxSizeOfHeaders: int, version: MessageVersion) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str, body: BodyWriter) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str, body: Xml.XmlDictionaryReader) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str, body: Xml.XmlReader) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str, body: object) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, fault: MessageFault, action: str) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, faultCode: ServiceModel.FaultCode, reason: str, action: str) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, action: str, body: object, serializer: Serialization.XmlObjectSerializer) -> Message: ...
    @overload
    @staticmethod
    def CreateMessage(version: MessageVersion, faultCode: ServiceModel.FaultCode, reason: str, detail: object, action: str) -> Message: ...
    @overload
    def EndWriteBodyContents(self, result: System.IAsyncResult) -> None: ...
    @overload
    def EndWriteMessage(self, result: System.IAsyncResult) -> None: ...
    @property
    def Headers(self) -> MessageHeaders: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsFault(self) -> bool: ...
    @property
    def Properties(self) -> MessageProperties: ...
    @property
    def State(self) -> MessageState: ...
    @property
    def Version(self) -> MessageVersion: ...
    @overload
    def GetBody() -> T: ...
    @overload
    def GetBody(self, serializer: Serialization.XmlObjectSerializer) -> T: ...
    @overload
    def GetBodyAttribute(self, localName: str, ns: str) -> str: ...
    @overload
    def GetReaderAtBodyContents() -> Xml.XmlDictionaryReader: ...
    @overload
    def OnWriteMessageAsync(self, writer: Xml.XmlDictionaryWriter) -> Tasks.Task: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteBody(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteBody(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteBodyContents(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteBodyContentsAsync(self, writer: Xml.XmlDictionaryWriter) -> Tasks.Task: ...
    @overload
    def WriteMessage(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteMessage(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteMessageAsync(self, writer: Xml.XmlWriter) -> Tasks.Task: ...
    @overload
    def WriteMessageAsync(self, writer: Xml.XmlDictionaryWriter) -> Tasks.Task: ...
    @overload
    def WriteStartBody(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteStartBody(self, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteStartEnvelope(self, writer: Xml.XmlDictionaryWriter) -> None: ...

class MessageBuffer(object):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CreateMessage() -> Message: ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def MessageContentType(self) -> str: ...
    @overload
    def WriteMessage(self, stream: IO.Stream) -> None: ...

class MessageEncoder(object):
    """    """
    @overload
    def BeginWriteMessage(self, message: Message, stream: IO.Stream, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndWriteMessage(self, result: System.IAsyncResult) -> None: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def MediaType(self) -> str: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @overload
    def GetProperty() -> T: ...
    @overload
    def IsContentTypeSupported(self, contentType: str) -> bool: ...
    @overload
    def ReadMessage(self, buffer: System.ArraySegment, bufferManager: BufferManager) -> Message: ...
    @overload
    def ReadMessage(self, stream: IO.Stream, maxSizeOfHeaders: int) -> Message: ...
    @overload
    def ReadMessage(self, stream: IO.Stream, maxSizeOfHeaders: int, contentType: str) -> Message: ...
    @overload
    def ReadMessage(self, buffer: System.ArraySegment, bufferManager: BufferManager, contentType: str) -> Message: ...
    @overload
    def ReadMessageAsync(self, stream: IO.Stream, maxSizeOfHeaders: int, contentType: str) -> Tasks.Task: ...
    @overload
    def ReadMessageAsync(self, buffer: System.ArraySegment, bufferManager: BufferManager, contentType: str) -> Tasks.Task: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteMessage(self, message: Message, stream: IO.Stream) -> None: ...
    @overload
    def WriteMessage(self, message: Message, maxMessageSize: int, bufferManager: BufferManager) -> System.ArraySegment: ...
    @overload
    def WriteMessage(self, message: Message, maxMessageSize: int, bufferManager: BufferManager, messageOffset: int) -> System.ArraySegment: ...
    @overload
    def WriteMessageAsync(self, message: Message, stream: IO.Stream) -> Tasks.Task: ...
    @overload
    def WriteMessageAsync(self, message: Message, maxMessageSize: int, bufferManager: BufferManager, messageOffset: int) -> Tasks.Task: ...

class MessageEncoderFactory(object):
    """    """
    @overload
    def CreateSessionEncoder() -> MessageEncoder: ...
    @property
    def Encoder(self) -> MessageEncoder: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...

class MessageEncodingBindingElement(BindingElement):
    """    """
    @overload
    def CreateMessageEncoderFactory() -> MessageEncoderFactory: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @MessageVersion.setter
    def MessageVersion(self, value: System.Void): ...

class MessageFault(object):
    """    """
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: str) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(message: Message, maxBufferSize: int) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason, detail: object) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason, detail: object, serializer: Serialization.XmlObjectSerializer) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason, detail: object, serializer: Serialization.XmlObjectSerializer, actor: str) -> MessageFault: ...
    @overload
    @staticmethod
    def CreateFault(code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason, detail: object, serializer: Serialization.XmlObjectSerializer, actor: str, node: str) -> MessageFault: ...
    @property
    def Actor(self) -> str: ...
    @property
    def Code(self) -> ServiceModel.FaultCode: ...
    @property
    def HasDetail(self) -> bool: ...
    @property
    def IsMustUnderstandFault(self) -> bool: ...
    @property
    def Node(self) -> str: ...
    @property
    def Reason(self) -> ServiceModel.FaultReason: ...
    @overload
    def GetDetail() -> T: ...
    @overload
    def GetDetail(self, serializer: Serialization.XmlObjectSerializer) -> T: ...
    @overload
    def GetReaderAtDetailContents() -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def WasHeaderNotUnderstood(headers: MessageHeaders, name: str, ns: str) -> bool: ...
    @overload
    def WriteTo(self, writer: Xml.XmlWriter, version: ServiceModel.EnvelopeVersion) -> None: ...
    @overload
    def WriteTo(self, writer: Xml.XmlDictionaryWriter, version: ServiceModel.EnvelopeVersion) -> None: ...

class XmlObjectSerializerFault(MessageFault):
    """    """
    def __init__(self, code: ServiceModel.FaultCode, reason: ServiceModel.FaultReason, detail: object, serializer: Serialization.XmlObjectSerializer, actor: str, node: str): ...
    @property
    def Actor(self) -> str: ...
    @property
    def Code(self) -> ServiceModel.FaultCode: ...
    @property
    def HasDetail(self) -> bool: ...
    @property
    def Node(self) -> str: ...
    @property
    def Reason(self) -> ServiceModel.FaultReason: ...

class MessageHeader(MessageHeaderInfo):
    """    """
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, mustUnderstand: bool) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, serializer: Serialization.XmlObjectSerializer) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, serializer: Serialization.XmlObjectSerializer, mustUnderstand: bool) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, mustUnderstand: bool, actor: str) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, serializer: Serialization.XmlObjectSerializer, mustUnderstand: bool, actor: str) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, mustUnderstand: bool, actor: str, relay: bool) -> MessageHeader: ...
    @overload
    @staticmethod
    def CreateHeader(name: str, ns: str, value: object, serializer: Serialization.XmlObjectSerializer, mustUnderstand: bool, actor: str, relay: bool) -> MessageHeader: ...
    @property
    def Actor(self) -> str: ...
    @property
    def IsReferenceParameter(self) -> bool: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Relay(self) -> bool: ...
    @overload
    def IsMessageVersionSupported(self, messageVersion: MessageVersion) -> bool: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteHeader(self, writer: Xml.XmlDictionaryWriter, messageVersion: MessageVersion) -> None: ...
    @overload
    def WriteHeader(self, writer: Xml.XmlWriter, messageVersion: MessageVersion) -> None: ...
    @overload
    def WriteHeaderContents(self, writer: Xml.XmlDictionaryWriter, messageVersion: MessageVersion) -> None: ...
    @overload
    def WriteStartHeader(self, writer: Xml.XmlDictionaryWriter, messageVersion: MessageVersion) -> None: ...

class MessageHeaderInfo(object):
    """    """
    @property
    def Actor(self) -> str: ...
    @property
    def IsReferenceParameter(self) -> bool: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Relay(self) -> bool: ...

class MessageHeaders(object):
    """    """
    @overload
    def __init__(self, version: MessageVersion): ...
    @overload
    def __init__(self, collection: MessageHeaders): ...
    @overload
    def __init__(self, version: MessageVersion, initialSize: int): ...
    @overload
    def Add(self, header: MessageHeader) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def CopyHeaderFrom(self, collection: MessageHeaders, headerIndex: int) -> None: ...
    @overload
    def CopyHeaderFrom(self, message: Message, headerIndex: int) -> None: ...
    @overload
    def CopyHeadersFrom(self, collection: MessageHeaders) -> None: ...
    @overload
    def CopyHeadersFrom(self, message: Message) -> None: ...
    @overload
    def CopyTo(self, array: System.Array[MessageHeaderInfo], index: int) -> None: ...
    @overload
    def FindHeader(self, name: str, ns: str) -> int: ...
    @overload
    def FindHeader(self, name: str, ns: str, actors: System.System.Array[str]) -> int: ...
    @property
    def Action(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def FaultTo(self) -> ServiceModel.EndpointAddress: ...
    @property
    def From(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Item(self) -> MessageHeaderInfo: ...
    @property
    def MessageId(self) -> Xml.UniqueId: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def RelatesTo(self) -> Xml.UniqueId: ...
    @property
    def ReplyTo(self) -> ServiceModel.EndpointAddress: ...
    @property
    def To(self) -> System.Uri: ...
    @property
    def UnderstoodHeaders(self) -> UnderstoodHeaders: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def GetHeader(self, index: int) -> T: ...
    @overload
    def GetHeader(self, index: int, serializer: Serialization.XmlObjectSerializer) -> T: ...
    @overload
    def GetHeader(self, name: str, ns: str) -> T: ...
    @overload
    def GetHeader(self, name: str, ns: str, actors: System.System.Array[str]) -> T: ...
    @overload
    def GetHeader(self, name: str, ns: str, serializer: Serialization.XmlObjectSerializer) -> T: ...
    @overload
    def GetReaderAtHeader(self, headerIndex: int) -> Xml.XmlDictionaryReader: ...
    @overload
    def HaveMandatoryHeadersBeenUnderstood() -> bool: ...
    @overload
    def HaveMandatoryHeadersBeenUnderstood(self, actors: System.System.Array[str]) -> bool: ...
    @overload
    def Insert(self, headerIndex: int, header: MessageHeader) -> None: ...
    @overload
    def RemoveAll(self, name: str, ns: str) -> None: ...
    @overload
    def RemoveAt(self, headerIndex: int) -> None: ...
    @Action.setter
    def Action(self, value: System.Void): ...
    @FaultTo.setter
    def FaultTo(self, value: System.Void): ...
    @From.setter
    def From(self, value: System.Void): ...
    @MessageId.setter
    def MessageId(self, value: System.Void): ...
    @RelatesTo.setter
    def RelatesTo(self, value: System.Void): ...
    @ReplyTo.setter
    def ReplyTo(self, value: System.Void): ...
    @To.setter
    def To(self, value: System.Void): ...
    @overload
    def SetAction(self, action: Xml.XmlDictionaryString) -> None: ...
    @overload
    def WriteHeader(self, headerIndex: int, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteHeader(self, headerIndex: int, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteHeaderContents(self, headerIndex: int, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteHeaderContents(self, headerIndex: int, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteStartHeader(self, headerIndex: int, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteStartHeader(self, headerIndex: int, writer: Xml.XmlDictionaryWriter) -> None: ...

class MessageProperties(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: MessageProperties): ...
    @overload
    def Add(self, name: str, property_: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContainsKey(self, name: str) -> bool: ...
    @overload
    def CopyProperties(self, properties: MessageProperties) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AllowOutputBatching(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Encoder(self) -> MessageEncoder: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def Security(self) -> Security.SecurityMessageProperty: ...
    @property
    def Values(self) -> Generic.ICollection: ...
    @property
    def Via(self) -> System.Uri: ...
    @overload
    def Remove(self, name: str) -> bool: ...
    @AllowOutputBatching.setter
    def AllowOutputBatching(self, value: System.Void): ...
    @Encoder.setter
    def Encoder(self, value: System.Void): ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...
    @Via.setter
    def Via(self, value: System.Void): ...
    @overload
    def TryGetValue(self, name: str) -> (bool, object): ...

class MessageState(enum.Enum):
    Created = 0
    Read = 1
    Written = 2
    Copied = 3
    Closed = 4

class MessageVersion(object):
    """    """
    @overload
    @staticmethod
    def CreateVersion(envelopeVersion: ServiceModel.EnvelopeVersion) -> MessageVersion: ...
    @overload
    @staticmethod
    def CreateVersion(envelopeVersion: ServiceModel.EnvelopeVersion, addressingVersion: AddressingVersion) -> MessageVersion: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Addressing(self) -> AddressingVersion: ...
    @property
    def Default(self) -> MessageVersion: ...
    @property
    def Envelope(self) -> ServiceModel.EnvelopeVersion: ...
    @property
    def None_(self) -> MessageVersion: ...
    @property
    def Soap11(self) -> MessageVersion: ...
    @property
    def Soap11WSAddressing10(self) -> MessageVersion: ...
    @property
    def Soap11WSAddressingAugust2004(self) -> MessageVersion: ...
    @property
    def Soap12(self) -> MessageVersion: ...
    @property
    def Soap12WSAddressing10(self) -> MessageVersion: ...
    @property
    def Soap12WSAddressingAugust2004(self) -> MessageVersion: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class MtomMessageEncodingBindingElement(MessageEncodingBindingElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, messageVersion: MessageVersion, writeEncoding: Text.Encoding): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @overload
    def CreateMessageEncoderFactory() -> MessageEncoderFactory: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MaxReadPoolSize(self) -> int: ...
    @property
    def MaxWritePoolSize(self) -> int: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @property
    def WriteEncoding(self) -> Text.Encoding: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @MaxBufferSize.setter
    def MaxBufferSize(self, value: System.Void): ...
    @MaxReadPoolSize.setter
    def MaxReadPoolSize(self, value: System.Void): ...
    @MaxWritePoolSize.setter
    def MaxWritePoolSize(self, value: System.Void): ...
    @MessageVersion.setter
    def MessageVersion(self, value: System.Void): ...
    @WriteEncoding.setter
    def WriteEncoding(self, value: System.Void): ...

class NamedPipeSettings(object):
    """    """
    @property
    def ApplicationContainerSettings(self) -> ApplicationContainerSettings: ...

class OutputChannel(ChannelBase):
    """    """
    @overload
    def BeginSend(self, message: Message, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginSend(self, message: Message, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndSend(self, result: System.IAsyncResult) -> None: ...
    @property
    def RemoteAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @overload
    def GetProperty() -> T: ...
    @overload
    def Send(self, message: Message) -> None: ...
    @overload
    def Send(self, message: Message, timeout: System.TimeSpan) -> None: ...
    @overload
    def SendAsync(self, message: Message) -> Tasks.Task: ...
    @overload
    def SendAsync(self, message: Message, timeout: System.TimeSpan) -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ReliableSessionBindingElement(BindingElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ordered: bool): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def AcknowledgementInterval(self) -> System.TimeSpan: ...
    @property
    def FlowControlEnabled(self) -> bool: ...
    @property
    def InactivityTimeout(self) -> System.TimeSpan: ...
    @property
    def MaxPendingChannels(self) -> int: ...
    @property
    def MaxRetryCount(self) -> int: ...
    @property
    def MaxTransferWindowSize(self) -> int: ...
    @property
    def Ordered(self) -> bool: ...
    @property
    def ReliableMessagingVersion(self) -> ServiceModel.ReliableMessagingVersion: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @AcknowledgementInterval.setter
    def AcknowledgementInterval(self, value: System.Void): ...
    @FlowControlEnabled.setter
    def FlowControlEnabled(self, value: System.Void): ...
    @InactivityTimeout.setter
    def InactivityTimeout(self, value: System.Void): ...
    @MaxPendingChannels.setter
    def MaxPendingChannels(self, value: System.Void): ...
    @MaxRetryCount.setter
    def MaxRetryCount(self, value: System.Void): ...
    @MaxTransferWindowSize.setter
    def MaxTransferWindowSize(self, value: System.Void): ...
    @Ordered.setter
    def Ordered(self, value: System.Void): ...
    @ReliableMessagingVersion.setter
    def ReliableMessagingVersion(self, value: System.Void): ...

class RequestChannel(ChannelBase):
    """    """
    @overload
    def BeginRequest(self, message: Message, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginRequest(self, message: Message, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndRequest(self, result: System.IAsyncResult) -> Message: ...
    @property
    def RemoteAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @overload
    def GetProperty() -> T: ...
    @overload
    def Request(self, message: Message) -> Message: ...
    @overload
    def Request(self, message: Message, timeout: System.TimeSpan) -> Message: ...
    @overload
    def RequestAsync(self, message: Message) -> Tasks.Task: ...
    @overload
    def RequestAsync(self, message: Message, timeout: System.TimeSpan) -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class IRequestBase:
    """    """
    @overload
    def Abort(self, requestChannel: RequestChannel) -> None: ...
    @overload
    def Fault(self, requestChannel: RequestChannel) -> None: ...
    @overload
    def OnReleaseRequest() -> None: ...

class IAsyncRequest:
    """    """
    @overload
    def ReceiveReplyAsync(self, timeoutHelper: Runtime.TimeoutHelper) -> Tasks.Task: ...
    @overload
    def SendRequestAsync(self, message: Message, timeoutHelper: Runtime.TimeoutHelper) -> Tasks.Task: ...

class RequestContext(object):
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginReply(self, message: Message, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReply(self, message: Message, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndReply(self, result: System.IAsyncResult) -> None: ...
    @property
    def RequestMessage(self) -> Message: ...
    @overload
    def Reply(self, message: Message) -> None: ...
    @overload
    def Reply(self, message: Message, timeout: System.TimeSpan) -> None: ...

class SecurityBindingElement(BindingElement):
    """    """
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    @staticmethod
    def CreateCertificateOverTransportBindingElement() -> TransportSecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateCertificateOverTransportBindingElement(version: ServiceModel.MessageSecurityVersion) -> TransportSecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateIssuedTokenOverTransportBindingElement(issuedTokenParameters: Tokens.IssuedSecurityTokenParameters) -> TransportSecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateMutualCertificateBindingElement() -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateMutualCertificateBindingElement(version: ServiceModel.MessageSecurityVersion) -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateMutualCertificateBindingElement(version: ServiceModel.MessageSecurityVersion, allowSerializedSigningTokenOnReply: bool) -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateSecureConversationBindingElement(bootstrapSecurity: SecurityBindingElement) -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateSecureConversationBindingElement(bootstrapSecurity: SecurityBindingElement, requireCancellation: bool) -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateSecureConversationBindingElement(bootstrapSecurity: SecurityBindingElement, requireCancellation: bool, bootstrapProtectionRequirements: Security.ChannelProtectionRequirements) -> SecurityBindingElement: ...
    @overload
    @staticmethod
    def CreateUserNameOverTransportBindingElement() -> TransportSecurityBindingElement: ...
    @property
    def DefaultAlgorithmSuite(self) -> Security.SecurityAlgorithmSuite: ...
    @property
    def EnableUnsecuredResponse(self) -> bool: ...
    @property
    def EndpointSupportingTokenParameters(self) -> Tokens.SupportingTokenParameters: ...
    @property
    def IncludeTimestamp(self) -> bool: ...
    @property
    def KeyEntropyMode(self) -> Security.SecurityKeyEntropyMode: ...
    @property
    def LocalClientSettings(self) -> LocalClientSecuritySettings: ...
    @property
    def MessageSecurityVersion(self) -> ServiceModel.MessageSecurityVersion: ...
    @property
    def OperationSupportingTokenParameters(self) -> Generic.IDictionary: ...
    @property
    def OptionalEndpointSupportingTokenParameters(self) -> Tokens.SupportingTokenParameters: ...
    @property
    def OptionalOperationSupportingTokenParameters(self) -> Generic.IDictionary: ...
    @property
    def SecurityHeaderLayout(self) -> SecurityHeaderLayout: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @DefaultAlgorithmSuite.setter
    def DefaultAlgorithmSuite(self, value: System.Void): ...
    @EnableUnsecuredResponse.setter
    def EnableUnsecuredResponse(self, value: System.Void): ...
    @IncludeTimestamp.setter
    def IncludeTimestamp(self, value: System.Void): ...
    @KeyEntropyMode.setter
    def KeyEntropyMode(self, value: System.Void): ...
    @MessageSecurityVersion.setter
    def MessageSecurityVersion(self, value: System.Void): ...
    @SecurityHeaderLayout.setter
    def SecurityHeaderLayout(self, value: System.Void): ...
    @overload
    def SetKeyDerivation(self, requireDerivedKeys: bool) -> None: ...
    @overload
    def ToString() -> str: ...

class SecurityCapabilities(object):
    """    """
    def __init__(self, supportsClientAuth: bool, supportsServerAuth: bool, supportsClientWindowsIdentity: bool, requestProtectionLevel: Security.ProtectionLevel, responseProtectionLevel: Security.ProtectionLevel): ...
    @property
    def None_(self) -> SecurityCapabilities: ...
    @property
    def SupportedRequestProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SupportedResponseProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SupportsClientAuthentication(self) -> bool: ...
    @property
    def SupportsClientWindowsIdentity(self) -> bool: ...
    @property
    def SupportsServerAuthentication(self) -> bool: ...
    @overload
    @staticmethod
    def IsEqual(capabilities1: ISecurityCapabilities, capabilities2: ISecurityCapabilities) -> bool: ...

class SecurityHeaderLayout(enum.Enum):
    Strict = 0
    Lax = 1
    LaxTimestampFirst = 2
    LaxTimestampLast = 3

class ServiceChannelProxy(Reflection.DispatchProxy):
    """    """
    def __init__(self): ...
    @overload
    def BeginCloseOutputSession(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CloseOutputSession(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndCloseOutputSession(self, result: System.IAsyncResult) -> None: ...
    @property
    def AutomaticInputSessionShutdown(self) -> bool: ...
    @property
    def CallbackInstance(self) -> ServiceModel.InstanceContext: ...
    @AutomaticInputSessionShutdown.setter
    def AutomaticInputSessionShutdown(self, value: System.Void): ...
    @CallbackInstance.setter
    def CallbackInstance(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SslStreamSecurityBindingElement(StreamUpgradeBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def BuildClientStreamUpgradeProvider(self, context: BindingContext) -> StreamUpgradeProvider: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def IdentityVerifier(self) -> Security.IdentityVerifier: ...
    @property
    def RequireClientCertificate(self) -> bool: ...
    @property
    def SslProtocols(self) -> Authentication.SslProtocols: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @IdentityVerifier.setter
    def IdentityVerifier(self, value: System.Void): ...
    @RequireClientCertificate.setter
    def RequireClientCertificate(self, value: System.Void): ...
    @SslProtocols.setter
    def SslProtocols(self, value: System.Void): ...

class StreamSecurityUpgradeInitiator(StreamUpgradeInitiator):
    """    """
    @overload
    def GetRemoteSecurity() -> Security.SecurityMessageProperty: ...

class StreamSecurityUpgradeProvider(StreamUpgradeProvider):
    """    """
    @property
    def Identity(self) -> ServiceModel.EndpointIdentity: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class StreamUpgradeBindingElement(BindingElement):
    """    """
    @overload
    def BuildClientStreamUpgradeProvider(self, context: BindingContext) -> StreamUpgradeProvider: ...

class StreamUpgradeInitiator(object):
    """    """
    @overload
    def GetNextUpgrade() -> str: ...
    @overload
    def InitiateUpgrade(self, stream: IO.Stream) -> IO.Stream: ...

class StreamUpgradeProvider(CommunicationObject):
    """    """
    @overload
    def CreateUpgradeInitiator(self, remoteAddress: ServiceModel.EndpointAddress, via: System.Uri) -> StreamUpgradeInitiator: ...
    @overload
    def GetProperty() -> T: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class SupportedAddressingMode(enum.Enum):
    Anonymous = 0
    NonAnonymous = 1
    Mixed = 2

class TcpConnectionPoolSettings(object):
    """    """
    @property
    def GroupName(self) -> str: ...
    @property
    def IdleTimeout(self) -> System.TimeSpan: ...
    @property
    def LeaseTimeout(self) -> System.TimeSpan: ...
    @property
    def MaxOutboundConnectionsPerEndpoint(self) -> int: ...
    @GroupName.setter
    def GroupName(self, value: System.Void): ...
    @IdleTimeout.setter
    def IdleTimeout(self, value: System.Void): ...
    @LeaseTimeout.setter
    def LeaseTimeout(self, value: System.Void): ...
    @MaxOutboundConnectionsPerEndpoint.setter
    def MaxOutboundConnectionsPerEndpoint(self, value: System.Void): ...

class TcpTransportBindingElement(ConnectionOrientedTransportBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def ConnectionPoolSettings(self) -> TcpConnectionPoolSettings: ...
    @property
    def ExtendedProtectionPolicy(self) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @property
    def Scheme(self) -> str: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @ExtendedProtectionPolicy.setter
    def ExtendedProtectionPolicy(self, value: System.Void): ...

class TextMessageEncodingBindingElement(MessageEncodingBindingElement):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, messageVersion: MessageVersion, writeEncoding: Text.Encoding): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def Clone() -> BindingElement: ...
    @overload
    def CreateMessageEncoderFactory() -> MessageEncoderFactory: ...
    @property
    def MaxReadPoolSize(self) -> int: ...
    @property
    def MaxWritePoolSize(self) -> int: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @property
    def WriteEncoding(self) -> Text.Encoding: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @MaxReadPoolSize.setter
    def MaxReadPoolSize(self, value: System.Void): ...
    @MaxWritePoolSize.setter
    def MaxWritePoolSize(self, value: System.Void): ...
    @MessageVersion.setter
    def MessageVersion(self, value: System.Void): ...
    @ReaderQuotas.setter
    def ReaderQuotas(self, value: System.Void): ...
    @WriteEncoding.setter
    def WriteEncoding(self, value: System.Void): ...

class TransportBindingElement(BindingElement):
    """    """
    @property
    def ManualAddressing(self) -> bool: ...
    @property
    def MaxBufferPoolSize(self) -> System.Int64: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def Scheme(self) -> str: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @ManualAddressing.setter
    def ManualAddressing(self, value: System.Void): ...
    @MaxBufferPoolSize.setter
    def MaxBufferPoolSize(self, value: System.Void): ...
    @MaxReceivedMessageSize.setter
    def MaxReceivedMessageSize(self, value: System.Void): ...

class TransportChannelFactory(ChannelFactoryBase):
    """    TransportChannelFactory[TChannel]
    """
    @property
    def BufferManager(self) -> BufferManager: ...
    @property
    def ManualAddressing(self) -> bool: ...
    @property
    def MaxBufferPoolSize(self) -> System.Int64: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def MessageEncoderFactory(self) -> MessageEncoderFactory: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def Scheme(self) -> str: ...
    @overload
    def GetMaxBufferSize() -> int: ...
    @overload
    def GetProperty() -> T: ...
    @overload
    def ValidateScheme(self, via: System.Uri) -> None: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class TransportDuplexSessionChannel(TransportOutputChannel):
    """    """
    @overload
    def BeginReceive(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginTryReceive(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginWaitForMessage(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def EndReceive(self, result: System.IAsyncResult) -> Message: ...
    @overload
    def EndTryReceive(self, result: System.IAsyncResult) -> (bool, Message): ...
    @overload
    def EndWaitForMessage(self, result: System.IAsyncResult) -> bool: ...
    @property
    def LocalAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def RemoteSecurity(self) -> Security.SecurityMessageProperty: ...
    @property
    def Session(self) -> IDuplexSession: ...
    @overload
    def Receive() -> Message: ...
    @overload
    def Receive(self, timeout: System.TimeSpan) -> Message: ...
    @overload
    def ReceiveAsync() -> Tasks.Task: ...
    @overload
    def ReceiveAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def TryReceive(self, timeout: System.TimeSpan) -> (bool, Message): ...
    @overload
    def TryReceiveAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def WaitForMessage(self, timeout: System.TimeSpan) -> bool: ...
    @overload
    def WaitForMessageAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class TransportOutputChannel(OutputChannel):
    """    """
    @property
    def EventTraceActivity(self) -> Diagnostics.EventTraceActivity: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def RemoteAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class TransportSecurityBindingElement(SecurityBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> BindingElement: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...

class UnderstoodHeaders(object):
    """    """
    @overload
    def Add(self, headerInfo: MessageHeaderInfo) -> None: ...
    @overload
    def Contains(self, headerInfo: MessageHeaderInfo) -> bool: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def Remove(self, headerInfo: MessageHeaderInfo) -> None: ...

class WebSocketTransportSettings(object):
    """    """
    def __init__(self): ...
    @property
    def ConnectionOpenedAction(self) -> str: ...
    @property
    def BinaryMessageReceivedAction(self) -> str: ...
    @property
    def TextMessageReceivedAction(self) -> str: ...
    @property
    def SoapContentTypeHeader(self) -> str: ...
    @property
    def BinaryEncoderTransferModeHeader(self) -> str: ...
    @overload
    def Equals(self, other: WebSocketTransportSettings) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DisablePayloadMasking(self) -> bool: ...
    @property
    def KeepAliveInterval(self) -> System.TimeSpan: ...
    @property
    def SubProtocol(self) -> str: ...
    @property
    def TransportUsage(self) -> WebSocketTransportUsage: ...
    @overload
    def GetHashCode() -> int: ...
    @DisablePayloadMasking.setter
    def DisablePayloadMasking(self, value: System.Void): ...
    @KeepAliveInterval.setter
    def KeepAliveInterval(self, value: System.Void): ...
    @SubProtocol.setter
    def SubProtocol(self, value: System.Void): ...
    @TransportUsage.setter
    def TransportUsage(self, value: System.Void): ...

class WebSocketTransportUsage(enum.Enum):
    WhenDuplex = 0
    Always = 1
    Never = 2

class WindowsStreamSecurityBindingElement(StreamUpgradeBindingElement):
    """    """
    def __init__(self): ...
    @overload
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    @overload
    def BuildClientStreamUpgradeProvider(self, context: BindingContext) -> StreamUpgradeProvider: ...
    @overload
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    @overload
    def Clone() -> BindingElement: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @overload
    def GetProperty(self, context: BindingContext) -> T: ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...

class ConnectionDuplexSession(object):
    """    """
    def __init__(self, channel: TransportDuplexSessionChannel): ...
    @overload
    def BeginCloseOutputSession(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginCloseOutputSession(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CloseOutputSession() -> None: ...
    @overload
    def CloseOutputSession(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def CloseOutputSessionAsync() -> Tasks.Task: ...
    @overload
    def CloseOutputSessionAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def EndCloseOutputSession(self, result: System.IAsyncResult) -> None: ...
    @property
    def Channel(self) -> TransportDuplexSessionChannel: ...
    @property
    def Id(self) -> str: ...

# endregion
