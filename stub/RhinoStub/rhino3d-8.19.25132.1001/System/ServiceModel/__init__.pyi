"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Syndication"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["Security", "Dispatcher", "Description", "Channels", "ExceptionHelper", "ActionNotSupportedException", "AuditLevel", "AuditLogLocation", "BasicHttpBinding", "BasicHttpMessageCredentialType", "BasicHttpMessageSecurity", "BasicHttpsBinding", "BasicHttpSecurity", "BasicHttpSecurityMode", "BasicHttpsSecurity", "BasicHttpsSecurityMode", "CacheSetting", "CallbackBehaviorAttribute", "ChannelFactory", "ChannelTerminatedException", "ClientBase", "CommunicationException", "CommunicationObjectAbortedException", "CommunicationObjectFaultedException", "CommunicationState", "ConcurrencyMode", "ConcurrencyModeHelper", "DataContractFormatAttribute", "DeliveryRequirementsAttribute", "DnsEndpointIdentity", "DuplexChannelFactory", "DuplexClientBase", "EndpointAddress", "EndpointAddressBuilder", "EndpointIdentity", "EndpointNotFoundException", "EnvelopeVersion", "ExceptionDetail", "ExtensionCollection", "FaultCode", "FaultContractAttribute", "FaultException", "FaultReason", "FaultReasonText", "HostNameComparisonMode", "HostNameComparisonModeHelper", "HttpBindingBase", "HttpClientCredentialType", "HttpProxyCredentialType", "HttpTransportSecurity", "IClientChannel", "ICommunicationObject", "IAsyncCommunicationObject", "IContextChannel", "IDefaultCommunicationTimeouts", "IDuplexContextChannel", "IExtensibleObject", "IExtension", "IExtensionCollection", "ImpersonationOption", "InstanceContext", "InstanceContextMode", "InvalidMessageContractException", "IServiceChannel", "MessageBodyMemberAttribute", "MessageContractAttribute", "MessageContractMemberAttribute", "MessageCredentialType", "MessageHeaderArrayAttribute", "MessageHeaderAttribute", "MessageHeaderException", "MessageHeader", "MessageParameterAttribute", "MessagePropertyAttribute", "MessageSecurityOverHttp", "MessageSecurityOverTcp", "MessageSecurityVersion", "NetHttpBinding", "NetHttpMessageEncoding", "NetHttpsBinding", "NetTcpBinding", "NetTcpSecurity", "NonDualMessageSecurityOverHttp", "OperationContext", "OperationContextScope", "OperationContractAttribute", "OperationFormatStyle", "OperationFormatUse", "PeerHopCountAttribute", "Pool", "ProtocolException", "QueuedDeliveryRequirementsMode", "QuotaExceededException", "ReceiveErrorHandling", "ReliableMessagingVersion", "ReliableSession", "OptionalReliableSession", "SecurityMode", "SecurityModeHelper", "ClientCredentialsSecurityTokenManager", "ServerTooBusyException", "ServiceActivationException", "ServiceContractAttribute", "ServiceDefaults", "ServiceKnownTypeAttribute", "ServiceSecurityContext", "SessionMode", "SpnEndpointIdentity", "TcpClientCredentialType", "TcpTransportSecurity", "TimeSpanHelper", "TransferMode", "TransferModeHelper", "UnifiedSecurityMode", "UnknownMessageReceivedEventArgs", "UpnEndpointIdentity", "UriSchemeKeyedCollection", "WS2007HttpBinding", "WSHttpBinding", "WSHttpBindingBase", "WSHttpSecurity", "WSMessageEncoding", "X509CertificateEndpointIdentity", "XmlSerializerFormatAttribute"]
# endregion

# region: Imports
from System import Globalization
from System import Text
from System import Threading
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.IdentityModel import Claims
from System.IdentityModel import Policy
from System.IdentityModel import Selectors
from System.Net import Security
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Authentication
from System.Security import Claims
from System.Security import Principal
from System.Security.Authentication import ExtendedProtection
from System.Security.Cryptography import X509Certificates
from System.ServiceModel import Channels
from System.ServiceModel import Description
from System.ServiceModel import Dispatcher
from System.ServiceModel import Security
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class ExceptionHelper(object):
    """    """
    def __init__(self): ...
    @property
    def WinsdowsStreamSecurityNotSupported(self) -> str: ...
    @overload
    @staticmethod
    def AsError(exception: System.Exception) -> System.Exception: ...
    @overload
    @staticmethod
    def CreateMaxReceivedMessageSizeExceededException(maxMessageSize: System.Int64) -> System.Exception: ...
    @overload
    @staticmethod
    def PlatformNotSupported() -> System.PlatformNotSupportedException: ...
    @overload
    @staticmethod
    def PlatformNotSupported(message: str) -> System.PlatformNotSupportedException: ...

class ActionNotSupportedException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class AuditLevel(enum.Enum):
    None_ = 0
    Success = 1
    Failure = 2
    SuccessOrFailure = 3

class AuditLogLocation(enum.Enum):
    Default = 0
    Application = 1
    Security = 2

class BasicHttpBinding(HttpBindingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: BasicHttpSecurityMode): ...
    @overload
    def BuildChannelFactory(self, parameters: Channels.BindingParameterCollection) -> Channels.IChannelFactory: ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def MessageEncoding(self) -> WSMessageEncoding: ...
    @property
    def Security(self) -> BasicHttpSecurity: ...
    @MessageEncoding.setter
    def MessageEncoding(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...

class BasicHttpMessageCredentialType(enum.Enum):
    UserName = 0
    Certificate = 1

class BasicHttpMessageSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def AlgorithmSuite(self) -> Security.SecurityAlgorithmSuite: ...
    @property
    def ClientCredentialType(self) -> BasicHttpMessageCredentialType: ...
    @AlgorithmSuite.setter
    def AlgorithmSuite(self, value: System.Void): ...
    @ClientCredentialType.setter
    def ClientCredentialType(self, value: System.Void): ...

class BasicHttpsBinding(HttpBindingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: BasicHttpsSecurityMode): ...
    @overload
    def BuildChannelFactory(self, parameters: Channels.BindingParameterCollection) -> Channels.IChannelFactory: ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def MessageEncoding(self) -> WSMessageEncoding: ...
    @property
    def Security(self) -> BasicHttpsSecurity: ...
    @MessageEncoding.setter
    def MessageEncoding(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...

class BasicHttpSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def Message(self) -> BasicHttpMessageSecurity: ...
    @property
    def Mode(self) -> BasicHttpSecurityMode: ...
    @property
    def Transport(self) -> HttpTransportSecurity: ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Transport.setter
    def Transport(self, value: System.Void): ...

class BasicHttpSecurityMode(enum.Enum):
    None_ = 0
    Transport = 1
    Message = 2
    TransportWithMessageCredential = 3
    TransportCredentialOnly = 4

class BasicHttpsSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def Message(self) -> BasicHttpMessageSecurity: ...
    @property
    def Mode(self) -> BasicHttpsSecurityMode: ...
    @property
    def Transport(self) -> HttpTransportSecurity: ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Transport.setter
    def Transport(self, value: System.Void): ...

class BasicHttpsSecurityMode(enum.Enum):
    Transport = 0
    TransportWithMessageCredential = 1

class CacheSetting(enum.Enum):
    Default = 0
    AlwaysOn = 1
    AlwaysOff = 2

class CallbackBehaviorAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def AutomaticSessionShutdown(self) -> bool: ...
    @property
    def ConcurrencyMode(self) -> ConcurrencyMode: ...
    @property
    def UseSynchronizationContext(self) -> bool: ...
    @AutomaticSessionShutdown.setter
    def AutomaticSessionShutdown(self, value: System.Void): ...
    @ConcurrencyMode.setter
    def ConcurrencyMode(self, value: System.Void): ...
    @UseSynchronizationContext.setter
    def UseSynchronizationContext(self, value: System.Void): ...

class ChannelFactory(Channels.CommunicationObject):
    """    """
    @property
    def Credentials(self) -> Description.ClientCredentials: ...
    @property
    def Endpoint(self) -> Description.ServiceEndpoint: ...
    @overload
    def GetProperty() -> T: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelFactory(ChannelFactory):
    """    ChannelFactory[TChannel]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, endpointConfigurationName: str): ...
    @overload
    def __init__(self, binding: Channels.Binding): ...
    @overload
    def __init__(self, endpoint: Description.ServiceEndpoint): ...
    @overload
    def __init__(self, endpointConfigurationName: str, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, binding: Channels.Binding, remoteAddress: str): ...
    @overload
    def __init__(self, binding: Channels.Binding, remoteAddress: EndpointAddress): ...
    @overload
    def CreateChannel() -> TChannel: ...
    @overload
    def CreateChannel(self, address: EndpointAddress) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(binding: Channels.Binding, endpointAddress: EndpointAddress) -> TChannel: ...
    @overload
    def CreateChannel(self, address: EndpointAddress, via: System.Uri) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(binding: Channels.Binding, endpointAddress: EndpointAddress, via: System.Uri) -> TChannel: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class ChannelTerminatedException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ClientBase(object):
    """    ClientBase[TChannel]
    """
    @overload
    def Abort() -> None: ...
    @overload
    def Close() -> None: ...
    @property
    def CacheSetting(self) -> CacheSetting: ...
    @property
    def ChannelFactory(self) -> ChannelFactory: ...
    @property
    def ClientCredentials(self) -> Description.ClientCredentials: ...
    @property
    def Endpoint(self) -> Description.ServiceEndpoint: ...
    @property
    def InnerChannel(self) -> IClientChannel: ...
    @property
    def State(self) -> CommunicationState: ...
    @overload
    def Open() -> None: ...
    @CacheSetting.setter
    def CacheSetting(self, value: System.Void): ...

class CommunicationException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class CommunicationObjectAbortedException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class CommunicationObjectFaultedException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class CommunicationState(enum.Enum):
    Created = 0
    Opening = 1
    Opened = 2
    Closing = 3
    Closed = 4
    Faulted = 5

class ConcurrencyMode(enum.Enum):
    Single = 0
    Reentrant = 1
    Multiple = 2

class ConcurrencyModeHelper(object):
    """    """
    @overload
    @staticmethod
    def IsDefined(x: ConcurrencyMode) -> bool: ...

class DataContractFormatAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Style(self) -> OperationFormatStyle: ...
    @Style.setter
    def Style(self, value: System.Void): ...

class DeliveryRequirementsAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def QueuedDeliveryRequirements(self) -> QueuedDeliveryRequirementsMode: ...
    @property
    def RequireOrderedDelivery(self) -> bool: ...
    @QueuedDeliveryRequirements.setter
    def QueuedDeliveryRequirements(self, value: System.Void): ...
    @RequireOrderedDelivery.setter
    def RequireOrderedDelivery(self, value: System.Void): ...

class DnsEndpointIdentity(EndpointIdentity):
    """    """
    @overload
    def __init__(self, dnsName: str): ...
    @overload
    def __init__(self, identity: Claims.Claim): ...

class DuplexChannelFactory(ChannelFactory):
    """    DuplexChannelFactory[TChannel]
    """
    @overload
    def __init__(self, callbackInstanceType: System.Type): ...
    @overload
    def __init__(self, callbackObject: object): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext): ...
    @overload
    def __init__(self, callbackObject: object, binding: Channels.Binding): ...
    @overload
    def __init__(self, callbackObject: object, endpointConfigurationName: str): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, endpoint: Description.ServiceEndpoint): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, endpointConfigurationName: str): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, binding: Channels.Binding): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, endpointConfigurationName: str): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, binding: Channels.Binding): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, endpoint: Description.ServiceEndpoint): ...
    @overload
    def __init__(self, callbackObject: object, endpoint: Description.ServiceEndpoint): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, binding: Channels.Binding, remoteAddress: str): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, binding: Channels.Binding, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackObject: object, binding: Channels.Binding, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackInstance: InstanceContext, endpointConfigurationName: str, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, endpointConfigurationName: str, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, binding: Channels.Binding, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackObject: object, endpointConfigurationName: str, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, callbackInstanceType: System.Type, binding: Channels.Binding, remoteAddress: str): ...
    @overload
    def __init__(self, callbackObject: object, binding: Channels.Binding, remoteAddress: str): ...
    @overload
    def CreateChannel(self, callbackInstance: InstanceContext) -> TChannel: ...
    @overload
    def CreateChannel(self, callbackInstance: InstanceContext, address: EndpointAddress) -> TChannel: ...
    @overload
    def CreateChannel(self, address: EndpointAddress, via: System.Uri) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackInstance: InstanceContext, endpointConfigurationName: str) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackObject: object, endpointConfigurationName: str) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackInstance: InstanceContext, binding: Channels.Binding, endpointAddress: EndpointAddress) -> TChannel: ...
    @overload
    def CreateChannel(self, callbackInstance: InstanceContext, address: EndpointAddress, via: System.Uri) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackObject: object, binding: Channels.Binding, endpointAddress: EndpointAddress) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackObject: object, binding: Channels.Binding, endpointAddress: EndpointAddress, via: System.Uri) -> TChannel: ...
    @overload
    @staticmethod
    def CreateChannel(callbackInstance: InstanceContext, binding: Channels.Binding, endpointAddress: EndpointAddress, via: System.Uri) -> TChannel: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class DuplexClientBase(ClientBase):
    """    DuplexClientBase[TChannel]
    """
    @property
    def InnerDuplexChannel(self) -> IDuplexContextChannel: ...

class EndpointAddress(object):
    """    """
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: System.Uri, addressHeaders: Channels.System.Array[Channels.AddressHeader]): ...
    @overload
    def __init__(self, uri: System.Uri, identity: EndpointIdentity, addressHeaders: Channels.System.Array[Channels.AddressHeader]): ...
    @overload
    def ApplyTo(self, message: Channels.Message) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnonymousUri(self) -> System.Uri: ...
    @property
    def Headers(self) -> Channels.AddressHeaderCollection: ...
    @property
    def Identity(self) -> EndpointIdentity: ...
    @property
    def IsAnonymous(self) -> bool: ...
    @property
    def IsNone(self) -> bool: ...
    @property
    def NoneUri(self) -> System.Uri: ...
    @property
    def Uri(self) -> System.Uri: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetReaderAtExtensions() -> Xml.XmlDictionaryReader: ...
    @overload
    def GetReaderAtMetadata() -> Xml.XmlDictionaryReader: ...
    @overload
    @staticmethod
    def ReadFrom(reader: Xml.XmlDictionaryReader) -> EndpointAddress: ...
    @overload
    @staticmethod
    def ReadFrom(addressingVersion: Channels.AddressingVersion, reader: Xml.XmlDictionaryReader) -> EndpointAddress: ...
    @overload
    @staticmethod
    def ReadFrom(addressingVersion: Channels.AddressingVersion, reader: Xml.XmlDictionaryReader, localName: Xml.XmlDictionaryString, ns: Xml.XmlDictionaryString) -> EndpointAddress: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteContentsTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteContentsTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlDictionaryWriter) -> None: ...
    @overload
    def WriteTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlWriter) -> None: ...
    @overload
    def WriteTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlDictionaryWriter, localName: Xml.XmlDictionaryString, ns: Xml.XmlDictionaryString) -> None: ...
    @overload
    def WriteTo(self, addressingVersion: Channels.AddressingVersion, writer: Xml.XmlWriter, localName: str, ns: str) -> None: ...

class EndpointAddressBuilder(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, address: EndpointAddress): ...
    @property
    def Headers(self) -> ObjectModel.Collection: ...
    @property
    def Identity(self) -> EndpointIdentity: ...
    @property
    def Uri(self) -> System.Uri: ...
    @overload
    def GetReaderAtExtensions() -> Xml.XmlDictionaryReader: ...
    @overload
    def GetReaderAtMetadata() -> Xml.XmlDictionaryReader: ...
    @Identity.setter
    def Identity(self, value: System.Void): ...
    @Uri.setter
    def Uri(self, value: System.Void): ...
    @overload
    def SetExtensionReader(self, reader: Xml.XmlDictionaryReader) -> None: ...
    @overload
    def SetMetadataReader(self, reader: Xml.XmlDictionaryReader) -> None: ...
    @overload
    def ToEndpointAddress() -> EndpointAddress: ...

class EndpointIdentity(object):
    """    """
    @overload
    @staticmethod
    def CreateDnsIdentity(dnsName: str) -> EndpointIdentity: ...
    @overload
    @staticmethod
    def CreateIdentity(identity: Claims.Claim) -> EndpointIdentity: ...
    @overload
    @staticmethod
    def CreateSpnIdentity(spnName: str) -> EndpointIdentity: ...
    @overload
    @staticmethod
    def CreateUpnIdentity(upnName: str) -> EndpointIdentity: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IdentityClaim(self) -> Claims.Claim: ...
    @overload
    def GetHashCode() -> int: ...

class EndpointNotFoundException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EnvelopeVersion(object):
    """    """
    @property
    def NextDestinationActorValue(self) -> str: ...
    @property
    def None_(self) -> EnvelopeVersion: ...
    @property
    def Soap11(self) -> EnvelopeVersion: ...
    @property
    def Soap12(self) -> EnvelopeVersion: ...
    @overload
    def GetUltimateDestinationActorValues() -> System.System.Array[str]: ...
    @overload
    def ToString() -> str: ...

class ExceptionDetail(object):
    """    """
    def __init__(self, exception: System.Exception): ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def InnerException(self) -> ExceptionDetail: ...
    @property
    def Message(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: System.Void): ...
    @InnerException.setter
    def InnerException(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @StackTrace.setter
    def StackTrace(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class ExtensionCollection(Generic.SynchronizedCollection):
    """    ExtensionCollection[T]
    """
    @overload
    def __init__(self, owner: T): ...
    @overload
    def __init__(self, owner: T, syncRoot: object): ...
    @overload
    def Find() -> E: ...
    @overload
    def FindAll() -> ObjectModel.Collection: ...

class FaultCode(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, subCode: FaultCode): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    @overload
    def __init__(self, name: str, ns: str, subCode: FaultCode): ...
    @overload
    @staticmethod
    def CreateReceiverFaultCode(subCode: FaultCode) -> FaultCode: ...
    @overload
    @staticmethod
    def CreateReceiverFaultCode(name: str, ns: str) -> FaultCode: ...
    @overload
    @staticmethod
    def CreateSenderFaultCode(subCode: FaultCode) -> FaultCode: ...
    @overload
    @staticmethod
    def CreateSenderFaultCode(name: str, ns: str) -> FaultCode: ...
    @property
    def IsPredefinedFault(self) -> bool: ...
    @property
    def IsReceiverFault(self) -> bool: ...
    @property
    def IsSenderFault(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def SubCode(self) -> FaultCode: ...

class FaultContractAttribute(System.Attribute):
    """    """
    def __init__(self, detailType: System.Type): ...
    @property
    def Action(self) -> str: ...
    @property
    def DetailType(self) -> System.Type: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @Action.setter
    def Action(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...

class FaultException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, reason: str): ...
    @overload
    def __init__(self, reason: FaultReason): ...
    @overload
    def __init__(self, fault: Channels.MessageFault): ...
    @overload
    def __init__(self, reason: str, code: FaultCode): ...
    @overload
    def __init__(self, reason: FaultReason, code: FaultCode): ...
    @overload
    def __init__(self, fault: Channels.MessageFault, action: str): ...
    @overload
    def __init__(self, reason: str, code: FaultCode, action: str): ...
    @overload
    def __init__(self, reason: FaultReason, code: FaultCode, action: str): ...
    @overload
    @staticmethod
    def CreateFault(messageFault: Channels.MessageFault, faultDetailTypes: System.System.Array[System.Type]) -> FaultException: ...
    @overload
    @staticmethod
    def CreateFault(messageFault: Channels.MessageFault, action: str, faultDetailTypes: System.System.Array[System.Type]) -> FaultException: ...
    @overload
    def CreateMessageFault() -> Channels.MessageFault: ...
    @property
    def Action(self) -> str: ...
    @property
    def Code(self) -> FaultCode: ...
    @property
    def Message(self) -> str: ...
    @property
    def Reason(self) -> FaultReason: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class FaultException(FaultException):
    """    FaultException[TDetail]
    """
    @overload
    def __init__(self, detail: TDetail): ...
    @overload
    def __init__(self, detail: TDetail, reason: str): ...
    @overload
    def __init__(self, detail: TDetail, reason: FaultReason): ...
    @overload
    def __init__(self, detail: TDetail, reason: str, code: FaultCode): ...
    @overload
    def __init__(self, detail: TDetail, reason: FaultReason, code: FaultCode): ...
    @overload
    def __init__(self, detail: TDetail, reason: str, code: FaultCode, action: str): ...
    @overload
    def __init__(self, detail: TDetail, reason: FaultReason, code: FaultCode, action: str): ...
    @overload
    def CreateMessageFault() -> Channels.MessageFault: ...
    @property
    def Detail(self) -> TDetail: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class FaultReason(object):
    """    """
    @overload
    def __init__(self, translation: FaultReasonText): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, translations: Generic.IEnumerable): ...
    @property
    def Translations(self) -> Generic.SynchronizedReadOnlyCollection: ...
    @overload
    def GetMatchingTranslation() -> FaultReasonText: ...
    @overload
    def GetMatchingTranslation(self, cultureInfo: Globalization.CultureInfo) -> FaultReasonText: ...
    @overload
    def ToString() -> str: ...

class FaultReasonText(object):
    """    """
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, xmlLang: str): ...
    @overload
    def __init__(self, text: str, cultureInfo: Globalization.CultureInfo): ...
    @property
    def Text(self) -> str: ...
    @property
    def XmlLang(self) -> str: ...
    @overload
    def Matches(self, cultureInfo: Globalization.CultureInfo) -> bool: ...

class HostNameComparisonMode(enum.Enum):
    StrongWildcard = 0
    Exact = 1
    WeakWildcard = 2

class HostNameComparisonModeHelper(object):
    """    """
    @overload
    @staticmethod
    def IsDefined(value: HostNameComparisonMode) -> bool: ...
    @overload
    @staticmethod
    def Validate(value: HostNameComparisonMode) -> None: ...

class HttpBindingBase(Channels.Binding):
    """    """
    @property
    def AllowCookies(self) -> bool: ...
    @property
    def BypassProxyOnLocal(self) -> bool: ...
    @property
    def EnvelopeVersion(self) -> EnvelopeVersion: ...
    @property
    def HostNameComparisonMode(self) -> HostNameComparisonMode: ...
    @property
    def MaxBufferPoolSize(self) -> System.Int64: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def ProxyAddress(self) -> System.Uri: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def TextEncoding(self) -> Text.Encoding: ...
    @property
    def TransferMode(self) -> TransferMode: ...
    @property
    def UseDefaultWebProxy(self) -> bool: ...
    @AllowCookies.setter
    def AllowCookies(self, value: System.Void): ...
    @BypassProxyOnLocal.setter
    def BypassProxyOnLocal(self, value: System.Void): ...
    @HostNameComparisonMode.setter
    def HostNameComparisonMode(self, value: System.Void): ...
    @MaxBufferPoolSize.setter
    def MaxBufferPoolSize(self, value: System.Void): ...
    @MaxBufferSize.setter
    def MaxBufferSize(self, value: System.Void): ...
    @MaxReceivedMessageSize.setter
    def MaxReceivedMessageSize(self, value: System.Void): ...
    @ProxyAddress.setter
    def ProxyAddress(self, value: System.Void): ...
    @ReaderQuotas.setter
    def ReaderQuotas(self, value: System.Void): ...
    @TextEncoding.setter
    def TextEncoding(self, value: System.Void): ...
    @TransferMode.setter
    def TransferMode(self, value: System.Void): ...
    @UseDefaultWebProxy.setter
    def UseDefaultWebProxy(self, value: System.Void): ...

class HttpClientCredentialType(enum.Enum):
    None_ = 0
    Basic = 1
    Digest = 2
    Ntlm = 3
    Windows = 4
    Certificate = 5
    InheritedFromHost = 6

class HttpProxyCredentialType(enum.Enum):
    None_ = 0
    Basic = 1
    Digest = 2
    Ntlm = 3
    Windows = 4

class HttpTransportSecurity(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def ConfigureTransportProtectionAndAuthentication(https: Channels.HttpsTransportBindingElement, transportSecurity: HttpTransportSecurity) -> None: ...
    @property
    def ClientCredentialType(self) -> HttpClientCredentialType: ...
    @property
    def ExtendedProtectionPolicy(self) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @property
    def ProxyCredentialType(self) -> HttpProxyCredentialType: ...
    @property
    def Realm(self) -> str: ...
    @ClientCredentialType.setter
    def ClientCredentialType(self, value: System.Void): ...
    @ExtendedProtectionPolicy.setter
    def ExtendedProtectionPolicy(self, value: System.Void): ...
    @ProxyCredentialType.setter
    def ProxyCredentialType(self, value: System.Void): ...
    @Realm.setter
    def Realm(self, value: System.Void): ...

class IClientChannel:
    """    """
    @overload
    def BeginDisplayInitializationUI(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def DisplayInitializationUI() -> None: ...
    @overload
    def EndDisplayInitializationUI(self, result: System.IAsyncResult) -> None: ...
    @property
    def AllowInitializationUI(self) -> bool: ...
    @property
    def DidInteractiveInitialization(self) -> bool: ...
    @property
    def Via(self) -> System.Uri: ...
    @AllowInitializationUI.setter
    def AllowInitializationUI(self, value: System.Void): ...
    @property
    def UnknownMessageReceived(self): ...

class ICommunicationObject:
    """    """
    @overload
    def Abort() -> None: ...
    @overload
    def BeginClose(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginClose(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginOpen(self, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def BeginOpen(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def Close() -> None: ...
    @overload
    def Close(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndClose(self, result: System.IAsyncResult) -> None: ...
    @overload
    def EndOpen(self, result: System.IAsyncResult) -> None: ...
    @property
    def State(self) -> CommunicationState: ...
    @overload
    def Open() -> None: ...
    @overload
    def Open(self, timeout: System.TimeSpan) -> None: ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class IAsyncCommunicationObject:
    """    """
    @overload
    def CloseAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...
    @overload
    def OpenAsync(self, timeout: System.TimeSpan) -> Tasks.Task: ...

class IContextChannel:
    """    """
    @property
    def AllowOutputBatching(self) -> bool: ...
    @property
    def InputSession(self) -> Channels.IInputSession: ...
    @property
    def LocalAddress(self) -> EndpointAddress: ...
    @property
    def OperationTimeout(self) -> System.TimeSpan: ...
    @property
    def OutputSession(self) -> Channels.IOutputSession: ...
    @property
    def RemoteAddress(self) -> EndpointAddress: ...
    @property
    def SessionId(self) -> str: ...
    @AllowOutputBatching.setter
    def AllowOutputBatching(self, value: System.Void): ...
    @OperationTimeout.setter
    def OperationTimeout(self, value: System.Void): ...

class IDefaultCommunicationTimeouts:
    """    """
    @property
    def CloseTimeout(self) -> System.TimeSpan: ...
    @property
    def OpenTimeout(self) -> System.TimeSpan: ...
    @property
    def ReceiveTimeout(self) -> System.TimeSpan: ...
    @property
    def SendTimeout(self) -> System.TimeSpan: ...

class IDuplexContextChannel:
    """    """
    @overload
    def BeginCloseOutputSession(self, timeout: System.TimeSpan, callback: System.AsyncCallback, state: object) -> System.IAsyncResult: ...
    @overload
    def CloseOutputSession(self, timeout: System.TimeSpan) -> None: ...
    @overload
    def EndCloseOutputSession(self, result: System.IAsyncResult) -> None: ...
    @property
    def AutomaticInputSessionShutdown(self) -> bool: ...
    @property
    def CallbackInstance(self) -> InstanceContext: ...
    @AutomaticInputSessionShutdown.setter
    def AutomaticInputSessionShutdown(self, value: System.Void): ...
    @CallbackInstance.setter
    def CallbackInstance(self, value: System.Void): ...

class IExtensibleObject:
    """    IExtensibleObject[T]
    """
    @property
    def Extensions(self) -> IExtensionCollection: ...

class IExtension:
    """    IExtension[T]
    """
    @overload
    def Attach(self, owner: T) -> None: ...
    @overload
    def Detach(self, owner: T) -> None: ...

class IExtensionCollection:
    """    IExtensionCollection[T]
    """
    @overload
    def Find() -> E: ...
    @overload
    def FindAll() -> ObjectModel.Collection: ...

class ImpersonationOption(enum.Enum):
    NotAllowed = 0
    Allowed = 1
    Required = 2

class InstanceContext(Channels.CommunicationObject):
    """    """
    def __init__(self, implementation: object): ...
    @property
    def Extensions(self) -> IExtensionCollection: ...
    @property
    def IncomingChannels(self) -> Generic.ICollection: ...
    @property
    def OutgoingChannels(self) -> Generic.ICollection: ...
    @property
    def SynchronizationContext(self) -> Threading.SynchronizationContext: ...
    @overload
    def GetServiceInstance(self, message: Channels.Message) -> object: ...
    @SynchronizationContext.setter
    def SynchronizationContext(self, value: System.Void): ...
    @property
    def Closed(self): ...
    @property
    def Closing(self): ...
    @property
    def Faulted(self): ...
    @property
    def Opened(self): ...
    @property
    def Opening(self): ...

class InstanceContextMode(enum.Enum):
    PerSession = 0
    PerCall = 1
    Single = 2

class InvalidMessageContractException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class IServiceChannel:
    """    """
    @property
    def ListenUri(self) -> System.Uri: ...

class MessageBodyMemberAttribute(MessageContractMemberAttribute):
    """    """
    def __init__(self): ...
    @property
    def Order(self) -> int: ...
    @Order.setter
    def Order(self, value: System.Void): ...

class MessageContractAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def IsWrapped(self) -> bool: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def WrapperName(self) -> str: ...
    @property
    def WrapperNamespace(self) -> str: ...
    @IsWrapped.setter
    def IsWrapped(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @WrapperName.setter
    def WrapperName(self, value: System.Void): ...
    @WrapperNamespace.setter
    def WrapperNamespace(self, value: System.Void): ...

class MessageContractMemberAttribute(System.Attribute):
    """    """
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...

class MessageCredentialType(enum.Enum):
    None_ = 0
    Windows = 1
    UserName = 2
    Certificate = 3
    IssuedToken = 4

class MessageHeaderArrayAttribute(MessageHeaderAttribute):
    """    """
    def __init__(self): ...

class MessageHeaderAttribute(MessageContractMemberAttribute):
    """    """
    def __init__(self): ...
    @property
    def Actor(self) -> str: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Relay(self) -> bool: ...
    @Actor.setter
    def Actor(self, value: System.Void): ...
    @MustUnderstand.setter
    def MustUnderstand(self, value: System.Void): ...
    @Relay.setter
    def Relay(self, value: System.Void): ...

class MessageHeaderException(ProtocolException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, isDuplicate: bool): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, headerName: str, ns: str): ...
    @overload
    def __init__(self, message: str, headerName: str, ns: str, isDuplicate: bool): ...
    @overload
    def __init__(self, message: str, headerName: str, ns: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, headerName: str, ns: str, isDuplicate: bool, innerException: System.Exception): ...
    @property
    def HeaderName(self) -> str: ...
    @property
    def HeaderNamespace(self) -> str: ...
    @property
    def IsDuplicate(self) -> bool: ...

class MessageHeader(object):
    """    MessageHeader[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, content: T): ...
    @overload
    def __init__(self, content: T, mustUnderstand: bool, actor: str, relay: bool): ...
    @property
    def Actor(self) -> str: ...
    @property
    def Content(self) -> T: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Relay(self) -> bool: ...
    @overload
    def GetUntypedHeader(self, name: str, ns: str) -> Channels.MessageHeader: ...
    @Actor.setter
    def Actor(self, value: System.Void): ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @MustUnderstand.setter
    def MustUnderstand(self, value: System.Void): ...
    @Relay.setter
    def Relay(self, value: System.Void): ...

class MessageParameterAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class MessagePropertyAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class MessageSecurityOverHttp(object):
    """    """
    def __init__(self): ...
    @property
    def AlgorithmSuite(self) -> Security.SecurityAlgorithmSuite: ...
    @property
    def ClientCredentialType(self) -> MessageCredentialType: ...
    @property
    def NegotiateServiceCredential(self) -> bool: ...
    @AlgorithmSuite.setter
    def AlgorithmSuite(self, value: System.Void): ...
    @ClientCredentialType.setter
    def ClientCredentialType(self, value: System.Void): ...
    @NegotiateServiceCredential.setter
    def NegotiateServiceCredential(self, value: System.Void): ...

class MessageSecurityOverTcp(object):
    """    """
    def __init__(self): ...
    @property
    def AlgorithmSuite(self) -> Security.SecurityAlgorithmSuite: ...
    @property
    def ClientCredentialType(self) -> MessageCredentialType: ...
    @AlgorithmSuite.setter
    def AlgorithmSuite(self, value: System.Void): ...
    @ClientCredentialType.setter
    def ClientCredentialType(self, value: System.Void): ...

class MessageSecurityVersion(object):
    """    """
    @property
    def BasicSecurityProfileVersion(self) -> Security.BasicSecurityProfileVersion: ...
    @property
    def Default(self) -> MessageSecurityVersion: ...
    @property
    def SecureConversationVersion(self) -> Security.SecureConversationVersion: ...
    @property
    def SecurityPolicyVersion(self) -> Security.SecurityPolicyVersion: ...
    @property
    def SecurityTokenVersion(self) -> Selectors.SecurityTokenVersion: ...
    @property
    def SecurityVersion(self) -> Security.SecurityVersion: ...
    @property
    def TrustVersion(self) -> Security.TrustVersion: ...
    @property
    def WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10(self) -> MessageSecurityVersion: ...
    @property
    def WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10(self) -> MessageSecurityVersion: ...
    @property
    def WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12(self) -> MessageSecurityVersion: ...
    @property
    def WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10(self) -> MessageSecurityVersion: ...
    @property
    def WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11(self) -> MessageSecurityVersion: ...
    @property
    def WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10(self) -> MessageSecurityVersion: ...

class NetHttpBinding(HttpBindingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: BasicHttpSecurityMode): ...
    @overload
    def __init__(self, configurationName: str): ...
    @overload
    def __init__(self, securityMode: BasicHttpSecurityMode, reliableSessionEnabled: bool): ...
    @overload
    def BuildChannelFactory(self, parameters: Channels.BindingParameterCollection) -> Channels.IChannelFactory: ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def MessageEncoding(self) -> NetHttpMessageEncoding: ...
    @property
    def ReliableSession(self) -> OptionalReliableSession: ...
    @property
    def Security(self) -> BasicHttpSecurity: ...
    @property
    def WebSocketSettings(self) -> Channels.WebSocketTransportSettings: ...
    @MessageEncoding.setter
    def MessageEncoding(self, value: System.Void): ...
    @ReliableSession.setter
    def ReliableSession(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...

class NetHttpMessageEncoding(enum.Enum):
    Binary = 0
    Text = 1
    Mtom = 2

class NetHttpsBinding(HttpBindingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: BasicHttpsSecurityMode): ...
    @overload
    def __init__(self, securityMode: BasicHttpsSecurityMode, reliableSessionEnabled: bool): ...
    @overload
    def BuildChannelFactory(self, parameters: Channels.BindingParameterCollection) -> Channels.IChannelFactory: ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def MessageEncoding(self) -> NetHttpMessageEncoding: ...
    @property
    def ReliableSession(self) -> OptionalReliableSession: ...
    @property
    def Security(self) -> BasicHttpsSecurity: ...
    @property
    def WebSocketSettings(self) -> Channels.WebSocketTransportSettings: ...
    @MessageEncoding.setter
    def MessageEncoding(self, value: System.Void): ...
    @ReliableSession.setter
    def ReliableSession(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...

class NetTcpBinding(Channels.Binding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: SecurityMode): ...
    @overload
    def __init__(self, configurationName: str): ...
    @overload
    def __init__(self, securityMode: SecurityMode, reliableSessionEnabled: bool): ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def EnvelopeVersion(self) -> EnvelopeVersion: ...
    @property
    def MaxBufferPoolSize(self) -> System.Int64: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @property
    def ReliableSession(self) -> OptionalReliableSession: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def Security(self) -> NetTcpSecurity: ...
    @property
    def TransferMode(self) -> TransferMode: ...
    @MaxBufferPoolSize.setter
    def MaxBufferPoolSize(self, value: System.Void): ...
    @MaxBufferSize.setter
    def MaxBufferSize(self, value: System.Void): ...
    @MaxReceivedMessageSize.setter
    def MaxReceivedMessageSize(self, value: System.Void): ...
    @ReaderQuotas.setter
    def ReaderQuotas(self, value: System.Void): ...
    @ReliableSession.setter
    def ReliableSession(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...
    @TransferMode.setter
    def TransferMode(self, value: System.Void): ...

class NetTcpSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def Message(self) -> MessageSecurityOverTcp: ...
    @property
    def Mode(self) -> SecurityMode: ...
    @property
    def Transport(self) -> TcpTransportSecurity: ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Transport.setter
    def Transport(self, value: System.Void): ...

class NonDualMessageSecurityOverHttp(MessageSecurityOverHttp):
    """    """
    def __init__(self): ...
    @property
    def EstablishSecurityContext(self) -> bool: ...
    @EstablishSecurityContext.setter
    def EstablishSecurityContext(self, value: System.Void): ...

class OperationContext(object):
    """    """
    def __init__(self, channel: IContextChannel): ...
    @property
    def Channel(self) -> IContextChannel: ...
    @property
    def ClaimsPrincipal(self) -> Claims.ClaimsPrincipal: ...
    @property
    def Current(self) -> OperationContext: ...
    @property
    def EndpointDispatcher(self) -> Dispatcher.EndpointDispatcher: ...
    @property
    def Extensions(self) -> IExtensionCollection: ...
    @property
    def IncomingMessageHeaders(self) -> Channels.MessageHeaders: ...
    @property
    def IncomingMessageProperties(self) -> Channels.MessageProperties: ...
    @property
    def IncomingMessageVersion(self) -> Channels.MessageVersion: ...
    @property
    def InstanceContext(self) -> InstanceContext: ...
    @property
    def IsUserContext(self) -> bool: ...
    @property
    def OutgoingMessageHeaders(self) -> Channels.MessageHeaders: ...
    @property
    def OutgoingMessageProperties(self) -> Channels.MessageProperties: ...
    @property
    def RequestContext(self) -> Channels.RequestContext: ...
    @property
    def SessionId(self) -> str: ...
    @overload
    def GetCallbackChannel() -> T: ...
    @Current.setter
    def Current(self, value: System.Void): ...
    @EndpointDispatcher.setter
    def EndpointDispatcher(self, value: System.Void): ...
    @RequestContext.setter
    def RequestContext(self, value: System.Void): ...
    @property
    def OperationCompleted(self): ...

class OperationContextScope(object):
    """    """
    @overload
    def __init__(self, channel: IContextChannel): ...
    @overload
    def __init__(self, context: OperationContext): ...
    @overload
    def Dispose() -> None: ...

class OperationContractAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Action(self) -> str: ...
    @property
    def AsyncPattern(self) -> bool: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def IsInitiating(self) -> bool: ...
    @property
    def IsOneWay(self) -> bool: ...
    @property
    def IsTerminating(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def ReplyAction(self) -> str: ...
    @Action.setter
    def Action(self, value: System.Void): ...
    @AsyncPattern.setter
    def AsyncPattern(self, value: System.Void): ...
    @IsInitiating.setter
    def IsInitiating(self, value: System.Void): ...
    @IsOneWay.setter
    def IsOneWay(self, value: System.Void): ...
    @IsTerminating.setter
    def IsTerminating(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @ReplyAction.setter
    def ReplyAction(self, value: System.Void): ...

class OperationFormatStyle(enum.Enum):
    Document = 0
    Rpc = 1

class OperationFormatUse(enum.Enum):
    Literal = 0
    Encoded = 1

class PeerHopCountAttribute(MessageHeaderAttribute):
    """    """
    def __init__(self): ...
    @property
    def Actor(self) -> str: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def Relay(self) -> bool: ...

class Pool(object):
    """    Pool[T]
    """
    def __init__(self, maxCount: int): ...
    @overload
    def Clear() -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def Return(self, item: T) -> bool: ...
    @overload
    def Take() -> T: ...

class ProtocolException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class QueuedDeliveryRequirementsMode(enum.Enum):
    Allowed = 0
    Required = 1
    NotAllowed = 2

class QuotaExceededException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ReceiveErrorHandling(enum.Enum):
    Fault = 0
    Drop = 1
    Reject = 2
    Move = 3

class ReliableMessagingVersion(object):
    """    """
    @property
    def Default(self) -> ReliableMessagingVersion: ...
    @property
    def WSReliableMessaging11(self) -> ReliableMessagingVersion: ...
    @property
    def WSReliableMessagingFebruary2005(self) -> ReliableMessagingVersion: ...

class ReliableSession(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, reliableSessionBindingElement: Channels.ReliableSessionBindingElement): ...
    @property
    def InactivityTimeout(self) -> System.TimeSpan: ...
    @property
    def Ordered(self) -> bool: ...
    @InactivityTimeout.setter
    def InactivityTimeout(self, value: System.Void): ...
    @Ordered.setter
    def Ordered(self, value: System.Void): ...

class OptionalReliableSession(ReliableSession):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, reliableSessionBindingElement: Channels.ReliableSessionBindingElement): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class SecurityMode(enum.Enum):
    None_ = 0
    Transport = 1
    Message = 2
    TransportWithMessageCredential = 3

class SecurityModeHelper(object):
    """    """
    @overload
    @staticmethod
    def IsDefined(value: SecurityMode) -> bool: ...
    @overload
    @staticmethod
    def ToSecurityMode(value: UnifiedSecurityMode) -> SecurityMode: ...

class ClientCredentialsSecurityTokenManager(Selectors.SecurityTokenManager):
    """    """
    def __init__(self, clientCredentials: Description.ClientCredentials): ...
    @overload
    def CreateSecurityTokenAuthenticator(self, tokenRequirement: Selectors.SecurityTokenRequirement) -> (Selectors.SecurityTokenAuthenticator, Selectors.SecurityTokenResolver): ...
    @overload
    def CreateSecurityTokenProvider(self, tokenRequirement: Selectors.SecurityTokenRequirement) -> Selectors.SecurityTokenProvider: ...
    @overload
    def CreateSecurityTokenSerializer(self, version: Selectors.SecurityTokenVersion) -> Selectors.SecurityTokenSerializer: ...
    @property
    def ClientCredentials(self) -> Description.ClientCredentials: ...

class ServerTooBusyException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ServiceActivationException(CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class ServiceContractAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def CallbackContract(self) -> System.Type: ...
    @property
    def ConfigurationName(self) -> str: ...
    @property
    def HasProtectionLevel(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SessionMode(self) -> SessionMode: ...
    @CallbackContract.setter
    def CallbackContract(self, value: System.Void): ...
    @ConfigurationName.setter
    def ConfigurationName(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @SessionMode.setter
    def SessionMode(self, value: System.Void): ...

class ServiceDefaults(object):
    """    """
    @property
    def CloseTimeout(self) -> System.TimeSpan: ...
    @property
    def OpenTimeout(self) -> System.TimeSpan: ...
    @property
    def ReceiveTimeout(self) -> System.TimeSpan: ...
    @property
    def SendTimeout(self) -> System.TimeSpan: ...

class ServiceKnownTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, methodName: str): ...
    @overload
    def __init__(self, methodName: str, declaringType: System.Type): ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...

class ServiceSecurityContext(object):
    """    """
    @overload
    def __init__(self, authorizationPolicies: ObjectModel.ReadOnlyCollection): ...
    @overload
    def __init__(self, authorizationContext: Policy.AuthorizationContext): ...
    @overload
    def __init__(self, authorizationContext: Policy.AuthorizationContext, authorizationPolicies: ObjectModel.ReadOnlyCollection): ...
    @property
    def Anonymous(self) -> ServiceSecurityContext: ...
    @property
    def AuthorizationContext(self) -> Policy.AuthorizationContext: ...
    @property
    def AuthorizationPolicies(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def IsAnonymous(self) -> bool: ...
    @property
    def PrimaryIdentity(self) -> Principal.IIdentity: ...
    @AuthorizationPolicies.setter
    def AuthorizationPolicies(self, value: System.Void): ...

class SessionMode(enum.Enum):
    Allowed = 0
    Required = 1
    NotAllowed = 2

class SpnEndpointIdentity(EndpointIdentity):
    """    """
    @overload
    def __init__(self, spnName: str): ...
    @overload
    def __init__(self, identity: Claims.Claim): ...
    @property
    def SpnLookupTime(self) -> System.TimeSpan: ...
    @SpnLookupTime.setter
    def SpnLookupTime(self, value: System.Void): ...

class TcpClientCredentialType(enum.Enum):
    None_ = 0
    Windows = 1
    Certificate = 2

class TcpTransportSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def ClientCredentialType(self) -> TcpClientCredentialType: ...
    @property
    def ExtendedProtectionPolicy(self) -> ExtendedProtection.ExtendedProtectionPolicy: ...
    @property
    def ProtectionLevel(self) -> Security.ProtectionLevel: ...
    @property
    def SslProtocols(self) -> Authentication.SslProtocols: ...
    @ClientCredentialType.setter
    def ClientCredentialType(self, value: System.Void): ...
    @ExtendedProtectionPolicy.setter
    def ExtendedProtectionPolicy(self, value: System.Void): ...
    @ProtectionLevel.setter
    def ProtectionLevel(self, value: System.Void): ...
    @SslProtocols.setter
    def SslProtocols(self, value: System.Void): ...

class TimeSpanHelper(object):
    """    """
    @overload
    @staticmethod
    def FromMilliseconds(ms: int, text: str) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def FromMinutes(minutes: int, text: str) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def FromSeconds(seconds: int, text: str) -> System.TimeSpan: ...

class TransferMode(enum.Enum):
    Buffered = 0
    Streamed = 1
    StreamedRequest = 2
    StreamedResponse = 3

class TransferModeHelper(object):
    """    """
    @overload
    @staticmethod
    def IsDefined(v: TransferMode) -> bool: ...
    @overload
    @staticmethod
    def IsRequestStreamed(v: TransferMode) -> bool: ...
    @overload
    @staticmethod
    def IsResponseStreamed(v: TransferMode) -> bool: ...
    @overload
    @staticmethod
    def Validate(value: TransferMode) -> None: ...

class UnifiedSecurityMode(enum.Enum):
    None_ = 1
    Transport = 4
    Message = 8
    Both = 16
    TransportWithMessageCredential = 32
    TransportCredentialOnly = 64

class UnknownMessageReceivedEventArgs(System.EventArgs):
    """    """
    @property
    def Message(self) -> Channels.Message: ...

class UpnEndpointIdentity(EndpointIdentity):
    """    """
    @overload
    def __init__(self, upnName: str): ...
    @overload
    def __init__(self, identity: Claims.Claim): ...

class UriSchemeKeyedCollection(Generic.SynchronizedKeyedCollection):
    """    """
    def __init__(self, addresses: System.System.Array[System.Uri]): ...

class WS2007HttpBinding(WSHttpBinding):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: SecurityMode): ...
    @overload
    def __init__(self, securityMode: SecurityMode, reliableSessionEnabled: bool): ...

class WSHttpBinding(WSHttpBindingBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityMode: SecurityMode): ...
    @overload
    def __init__(self, securityMode: SecurityMode, reliableSessionEnabled: bool): ...
    @overload
    def BuildChannelFactory(self, parameters: Channels.BindingParameterCollection) -> Channels.IChannelFactory: ...
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def AllowCookies(self) -> bool: ...
    @property
    def Security(self) -> WSHttpSecurity: ...
    @AllowCookies.setter
    def AllowCookies(self, value: System.Void): ...
    @Security.setter
    def Security(self, value: System.Void): ...

class WSHttpBindingBase(Channels.Binding):
    """    """
    @overload
    def CreateBindingElements() -> Channels.BindingElementCollection: ...
    @property
    def BypassProxyOnLocal(self) -> bool: ...
    @property
    def EnvelopeVersion(self) -> EnvelopeVersion: ...
    @property
    def MaxBufferPoolSize(self) -> System.Int64: ...
    @property
    def MaxReceivedMessageSize(self) -> System.Int64: ...
    @property
    def MessageEncoding(self) -> WSMessageEncoding: ...
    @property
    def ProxyAddress(self) -> System.Uri: ...
    @property
    def ReaderQuotas(self) -> Xml.XmlDictionaryReaderQuotas: ...
    @property
    def ReliableSession(self) -> OptionalReliableSession: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def TextEncoding(self) -> Text.Encoding: ...
    @property
    def TransactionFlow(self) -> bool: ...
    @property
    def UseDefaultWebProxy(self) -> bool: ...
    @BypassProxyOnLocal.setter
    def BypassProxyOnLocal(self, value: System.Void): ...
    @MaxBufferPoolSize.setter
    def MaxBufferPoolSize(self, value: System.Void): ...
    @MaxReceivedMessageSize.setter
    def MaxReceivedMessageSize(self, value: System.Void): ...
    @MessageEncoding.setter
    def MessageEncoding(self, value: System.Void): ...
    @ProxyAddress.setter
    def ProxyAddress(self, value: System.Void): ...
    @ReaderQuotas.setter
    def ReaderQuotas(self, value: System.Void): ...
    @ReliableSession.setter
    def ReliableSession(self, value: System.Void): ...
    @TextEncoding.setter
    def TextEncoding(self, value: System.Void): ...
    @TransactionFlow.setter
    def TransactionFlow(self, value: System.Void): ...
    @UseDefaultWebProxy.setter
    def UseDefaultWebProxy(self, value: System.Void): ...

class WSHttpSecurity(object):
    """    """
    def __init__(self): ...
    @property
    def Message(self) -> NonDualMessageSecurityOverHttp: ...
    @property
    def Mode(self) -> SecurityMode: ...
    @property
    def Transport(self) -> HttpTransportSecurity: ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Mode.setter
    def Mode(self, value: System.Void): ...
    @Transport.setter
    def Transport(self, value: System.Void): ...

class WSMessageEncoding(enum.Enum):
    Text = 0
    Mtom = 1

class X509CertificateEndpointIdentity(EndpointIdentity):
    """    """
    @overload
    def __init__(self, certificate: X509Certificates.X509Certificate2): ...
    @overload
    def __init__(self, primaryCertificate: X509Certificates.X509Certificate2, supportingCertificates: X509Certificates.X509Certificate2Collection): ...
    @property
    def Certificates(self) -> X509Certificates.X509Certificate2Collection: ...

class XmlSerializerFormatAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Style(self) -> OperationFormatStyle: ...
    @property
    def SupportFaults(self) -> bool: ...
    @property
    def Use(self) -> OperationFormatUse: ...
    @Style.setter
    def Style(self, value: System.Void): ...
    @SupportFaults.setter
    def SupportFaults(self, value: System.Void): ...
    @Use.setter
    def Use(self, value: System.Void): ...

# endregion

