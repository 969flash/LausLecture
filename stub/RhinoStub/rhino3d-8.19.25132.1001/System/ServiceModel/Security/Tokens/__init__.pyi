"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["BinarySecretSecurityToken", "ClaimTypeRequirement", "InitiatorServiceModelSecurityTokenRequirement", "IssuedSecurityTokenParameters", "RecipientServiceModelSecurityTokenRequirement", "SecureConversationSecurityTokenParameters", "SecurityTokenInclusionMode", "SecurityTokenParameters", "SecurityTokenReferenceStyle", "ServiceModelSecurityTokenRequirement", "ServiceModelSecurityTokenTypes", "SspiSecurityToken", "SupportingTokenParameters", "UserNameSecurityTokenParameters", "X509KeyIdentifierClauseType", "X509SecurityTokenParameters"]
# endregion

# region: Imports
from System import Net
from System import ServiceModel
from System.Collections import ObjectModel
from System.IdentityModel import Selectors
from System.IdentityModel import Tokens
from System.Runtime import CompilerServices
from System.Security import Principal
from System.ServiceModel import Channels
from System.ServiceModel import Security
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class BinarySecretSecurityToken(Tokens.SecurityToken):
    """    """
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, id_: str, key: System.System.Array[System.Byte]): ...
    @property
    def Id(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...
    @overload
    def GetKeyBytes() -> System.System.Array[System.Byte]: ...

class ClaimTypeRequirement(object):
    """    """
    @overload
    def __init__(self, claimType: str): ...
    @overload
    def __init__(self, claimType: str, isOptional: bool): ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def IsOptional(self) -> bool: ...

class InitiatorServiceModelSecurityTokenRequirement(ServiceModelSecurityTokenRequirement):
    """    """
    def __init__(self): ...
    @property
    def TargetAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def Via(self) -> System.Uri: ...
    @TargetAddress.setter
    def TargetAddress(self, value: System.Void): ...
    @Via.setter
    def Via(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class IssuedSecurityTokenParameters(SecurityTokenParameters):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tokenType: str): ...
    @overload
    def __init__(self, tokenType: str, issuerAddress: ServiceModel.EndpointAddress): ...
    @overload
    def __init__(self, tokenType: str, issuerAddress: ServiceModel.EndpointAddress, issuerBinding: Channels.Binding): ...
    @property
    def AdditionalRequestParameters(self) -> ObjectModel.Collection: ...
    @property
    def ClaimTypeRequirements(self) -> ObjectModel.Collection: ...
    @property
    def DefaultMessageSecurityVersion(self) -> ServiceModel.MessageSecurityVersion: ...
    @property
    def IssuerAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def IssuerBinding(self) -> Channels.Binding: ...
    @property
    def IssuerMetadataAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def KeyType(self) -> Tokens.SecurityKeyType: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def UseStrTransform(self) -> bool: ...
    @DefaultMessageSecurityVersion.setter
    def DefaultMessageSecurityVersion(self, value: System.Void): ...
    @IssuerAddress.setter
    def IssuerAddress(self, value: System.Void): ...
    @IssuerBinding.setter
    def IssuerBinding(self, value: System.Void): ...
    @IssuerMetadataAddress.setter
    def IssuerMetadataAddress(self, value: System.Void): ...
    @KeySize.setter
    def KeySize(self, value: System.Void): ...
    @KeyType.setter
    def KeyType(self, value: System.Void): ...
    @TokenType.setter
    def TokenType(self, value: System.Void): ...
    @UseStrTransform.setter
    def UseStrTransform(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class RecipientServiceModelSecurityTokenRequirement(ServiceModelSecurityTokenRequirement):
    """    """
    def __init__(self): ...
    @property
    def ListenUri(self) -> System.Uri: ...
    @ListenUri.setter
    def ListenUri(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SecureConversationSecurityTokenParameters(SecurityTokenParameters):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: Channels.SecurityBindingElement): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: Channels.SecurityBindingElement, requireCancellation: bool, bootstrapProtectionRequirements: Security.ChannelProtectionRequirements): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: Channels.SecurityBindingElement, requireCancellation: bool, canRenewSession: bool, bootstrapProtectionRequirements: Security.ChannelProtectionRequirements): ...
    @property
    def BootstrapSecurityBindingElement(self) -> Channels.SecurityBindingElement: ...
    @property
    def CanRenewSession(self) -> bool: ...
    @property
    def RequireCancellation(self) -> bool: ...
    @BootstrapSecurityBindingElement.setter
    def BootstrapSecurityBindingElement(self, value: System.Void): ...
    @CanRenewSession.setter
    def CanRenewSession(self, value: System.Void): ...
    @RequireCancellation.setter
    def RequireCancellation(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SecurityTokenInclusionMode(enum.Enum):
    AlwaysToRecipient = 0
    Never = 1
    Once = 2
    AlwaysToInitiator = 3

class SecurityTokenParameters(object):
    """    """
    @overload
    def Clone() -> SecurityTokenParameters: ...
    @property
    def InclusionMode(self) -> SecurityTokenInclusionMode: ...
    @property
    def RequireDerivedKeys(self) -> bool: ...
    @InclusionMode.setter
    def InclusionMode(self, value: System.Void): ...
    @RequireDerivedKeys.setter
    def RequireDerivedKeys(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class SecurityTokenReferenceStyle(enum.Enum):
    Internal = 0
    External = 1

class ServiceModelSecurityTokenRequirement(Selectors.SecurityTokenRequirement):
    """    """
    @property
    def AuditLogLocationProperty(self) -> str: ...
    @property
    def ChannelParametersCollectionProperty(self) -> str: ...
    @property
    def DuplexClientLocalAddressProperty(self) -> str: ...
    @property
    def EndpointFilterTableProperty(self) -> str: ...
    @property
    def ExtendedProtectionPolicy(self) -> str: ...
    @property
    def HttpAuthenticationSchemeProperty(self) -> str: ...
    @property
    def IsInitiator(self) -> bool: ...
    @property
    def IsInitiatorProperty(self) -> str: ...
    @property
    def IsOutOfBandTokenProperty(self) -> str: ...
    @property
    def IssuedSecurityTokenParametersProperty(self) -> str: ...
    @property
    def IssuerAddress(self) -> ServiceModel.EndpointAddress: ...
    @property
    def IssuerAddressProperty(self) -> str: ...
    @property
    def IssuerBinding(self) -> Channels.Binding: ...
    @property
    def IssuerBindingContextProperty(self) -> str: ...
    @property
    def IssuerBindingProperty(self) -> str: ...
    @property
    def ListenUriProperty(self) -> str: ...
    @property
    def MessageAuthenticationAuditLevelProperty(self) -> str: ...
    @property
    def MessageDirectionProperty(self) -> str: ...
    @property
    def MessageSecurityVersion(self) -> Selectors.SecurityTokenVersion: ...
    @property
    def MessageSecurityVersionProperty(self) -> str: ...
    @property
    def PreferSslCertificateAuthenticatorProperty(self) -> str: ...
    @property
    def PrivacyNoticeUriProperty(self) -> str: ...
    @property
    def PrivacyNoticeVersionProperty(self) -> str: ...
    @property
    def SecureConversationSecurityBindingElement(self) -> Channels.SecurityBindingElement: ...
    @property
    def SecureConversationSecurityBindingElementProperty(self) -> str: ...
    @property
    def SecurityAlgorithmSuite(self) -> Security.SecurityAlgorithmSuite: ...
    @property
    def SecurityAlgorithmSuiteProperty(self) -> str: ...
    @property
    def SecurityBindingElement(self) -> Channels.SecurityBindingElement: ...
    @property
    def SecurityBindingElementProperty(self) -> str: ...
    @property
    def SupportingTokenAttachmentModeProperty(self) -> str: ...
    @property
    def SupportSecurityContextCancellationProperty(self) -> str: ...
    @property
    def SuppressAuditFailureProperty(self) -> str: ...
    @property
    def TargetAddressProperty(self) -> str: ...
    @property
    def TransportScheme(self) -> str: ...
    @property
    def TransportSchemeProperty(self) -> str: ...
    @property
    def ViaProperty(self) -> str: ...
    @IssuerAddress.setter
    def IssuerAddress(self, value: System.Void): ...
    @IssuerBinding.setter
    def IssuerBinding(self, value: System.Void): ...
    @MessageSecurityVersion.setter
    def MessageSecurityVersion(self, value: System.Void): ...
    @SecureConversationSecurityBindingElement.setter
    def SecureConversationSecurityBindingElement(self, value: System.Void): ...
    @SecurityAlgorithmSuite.setter
    def SecurityAlgorithmSuite(self, value: System.Void): ...
    @SecurityBindingElement.setter
    def SecurityBindingElement(self, value: System.Void): ...
    @TransportScheme.setter
    def TransportScheme(self, value: System.Void): ...

class ServiceModelSecurityTokenTypes(object):
    """    """
    @property
    def AnonymousSslnego(self) -> str: ...
    @property
    def MutualSslnego(self) -> str: ...
    @property
    def SecureConversation(self) -> str: ...
    @property
    def SecurityContext(self) -> str: ...
    @property
    def Spnego(self) -> str: ...
    @property
    def SspiCredential(self) -> str: ...

class SspiSecurityToken(Tokens.SecurityToken):
    """    """
    @overload
    def __init__(self, impersonationLevel: Principal.TokenImpersonationLevel, allowNtlm: bool, networkCredential: Net.NetworkCredential): ...
    @overload
    def __init__(self, networkCredential: Net.NetworkCredential, extractGroupsForWindowsAccounts: bool, allowUnauthenticatedCallers: bool): ...
    @property
    def AllowNtlm(self) -> bool: ...
    @property
    def AllowUnauthenticatedCallers(self) -> bool: ...
    @property
    def ExtractGroupsForWindowsAccounts(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def ImpersonationLevel(self) -> Principal.TokenImpersonationLevel: ...
    @property
    def NetworkCredential(self) -> Net.NetworkCredential: ...
    @property
    def SecurityKeys(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> System.DateTime: ...
    @property
    def ValidTo(self) -> System.DateTime: ...

class SupportingTokenParameters(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> SupportingTokenParameters: ...
    @property
    def Endorsing(self) -> ObjectModel.Collection: ...
    @property
    def Signed(self) -> ObjectModel.Collection: ...
    @property
    def SignedEncrypted(self) -> ObjectModel.Collection: ...
    @property
    def SignedEndorsing(self) -> ObjectModel.Collection: ...
    @overload
    def SetKeyDerivation(self, requireDerivedKeys: bool) -> None: ...
    @overload
    def ToString() -> str: ...

class UserNameSecurityTokenParameters(SecurityTokenParameters):
    """    """
    def __init__(self): ...

class X509KeyIdentifierClauseType(enum.Enum):
    Any = 0
    Thumbprint = 1
    IssuerSerial = 2
    SubjectKeyIdentifier = 3
    RawDataKeyIdentifier = 4

class X509SecurityTokenParameters(SecurityTokenParameters):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, x509ReferenceStyle: X509KeyIdentifierClauseType): ...
    @overload
    def __init__(self, x509ReferenceStyle: X509KeyIdentifierClauseType, inclusionMode: SecurityTokenInclusionMode): ...
    @property
    def X509ReferenceStyle(self) -> X509KeyIdentifierClauseType: ...
    @X509ReferenceStyle.setter
    def X509ReferenceStyle(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

# endregion
