"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Tokens", "BasicSecurityProfileVersion", "BinarySecretKeyIdentifierClause", "ChannelProtectionRequirements", "HttpDigestClientCredential", "IdentityVerifier", "ISecureConversationSession", "ISecuritySession", "MessagePartSpecification", "MessageProtectionOrder", "MessageSecurityException", "MessageSecurityTokenVersion", "NonceCache", "ScopedMessagePartSpecification", "SecureConversationVersion", "SecurityAccessDeniedException", "SecurityAlgorithmSuite", "Basic256SecurityAlgorithmSuite", "TripleDesSecurityAlgorithmSuite", "Basic256Sha256SecurityAlgorithmSuite", "SecurityContextKeyIdentifierClause", "SecurityCredentialsManager", "SecurityKeyEntropyMode", "SecurityMessageProperty", "SecurityNegotiationException", "SecurityPolicyVersion", "SecurityStateEncoder", "SecurityTokenAttachmentMode", "SecurityTokenSpecification", "SecurityVersion", "SspiSecurityTokenProvider", "SupportingTokenSpecification", "TrustVersion", "UserNamePasswordClientCredential", "WindowsClientCredential", "WSSecurityTokenSerializer", "X509CertificateInitiatorClientCredential", "X509CertificateRecipientClientCredential", "X509CertificateValidationMode", "X509ClientCertificateAuthentication", "X509ServiceCertificateAuthentication"]
# endregion

# region: Imports
from System import Net
from System import ServiceModel
from System import Xml
from System.Collections import Generic
from System.Collections import ObjectModel
from System.IdentityModel import Policy
from System.IdentityModel import Selectors
from System.IdentityModel import Tokens
from System.Runtime import CompilerServices
from System.Security import Principal
from System.Security.Cryptography import X509Certificates
from System.ServiceModel import Channels
from System.ServiceModel.Security import Tokens
from typing import overload
import enum
import System
# endregion

# region: System.Private.ServiceModel, Version=4.9.0.0

class BasicSecurityProfileVersion(object):
    """    """
    @property
    def BasicSecurityProfile10(self) -> BasicSecurityProfileVersion: ...

class BinarySecretKeyIdentifierClause(Tokens.BinaryKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, key: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte], cloneBuffer: bool): ...
    @overload
    def __init__(self, key: System.System.Array[System.Byte], cloneBuffer: bool, derivationNonce: System.System.Array[System.Byte], derivationLength: int): ...
    @overload
    def CreateKey() -> Tokens.SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @overload
    def GetKeyBytes() -> System.System.Array[System.Byte]: ...
    @overload
    def Matches(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> bool: ...

class ChannelProtectionRequirements(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ChannelProtectionRequirements): ...
    @overload
    def Add(self, protectionRequirements: ChannelProtectionRequirements) -> None: ...
    @overload
    def Add(self, protectionRequirements: ChannelProtectionRequirements, channelScopeOnly: bool) -> None: ...
    @overload
    def CreateInverse() -> ChannelProtectionRequirements: ...
    @property
    def IncomingEncryptionParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def IncomingSignatureParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def OutgoingEncryptionParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def OutgoingSignatureParts(self) -> ScopedMessagePartSpecification: ...
    @overload
    def MakeReadOnly() -> None: ...

class HttpDigestClientCredential(object):
    """    """
    @property
    def ClientCredential(self) -> Net.NetworkCredential: ...
    @ClientCredential.setter
    def ClientCredential(self, value: System.Void): ...

class IdentityVerifier(object):
    """    """
    @overload
    def CheckAccess(self, identity: ServiceModel.EndpointIdentity, authContext: Policy.AuthorizationContext) -> bool: ...
    @overload
    @staticmethod
    def CreateDefault() -> IdentityVerifier: ...
    @overload
    def TryGetIdentity(self, reference: ServiceModel.EndpointAddress) -> (bool, ServiceModel.EndpointIdentity): ...

class ISecureConversationSession:
    """    """
    @overload
    def TryReadSessionTokenIdentifier(self, reader: Xml.XmlReader) -> bool: ...
    @overload
    def WriteSessionTokenIdentifier(self, writer: Xml.XmlDictionaryWriter) -> None: ...

class ISecuritySession:
    """    """
    @property
    def RemoteIdentity(self) -> ServiceModel.EndpointIdentity: ...

class MessagePartSpecification(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isBodyIncluded: bool): ...
    @overload
    def __init__(self, headerTypes: Xml.System.Array[Xml.XmlQualifiedName]): ...
    @overload
    def __init__(self, isBodyIncluded: bool, headerTypes: Xml.System.Array[Xml.XmlQualifiedName]): ...
    @overload
    def Clear() -> None: ...
    @property
    def HeaderTypes(self) -> Generic.ICollection: ...
    @property
    def IsBodyIncluded(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def NoParts(self) -> MessagePartSpecification: ...
    @overload
    def MakeReadOnly() -> None: ...
    @IsBodyIncluded.setter
    def IsBodyIncluded(self, value: System.Void): ...
    @overload
    def Union(self, specification: MessagePartSpecification) -> None: ...

class MessageProtectionOrder(enum.Enum):
    SignBeforeEncrypt = 0
    SignBeforeEncryptAndEncryptSignature = 1
    EncryptBeforeSign = 2

class MessageSecurityException(ServiceModel.CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class MessageSecurityTokenVersion(Selectors.SecurityTokenVersion):
    """    """
    @property
    def EmitBspRequiredAttributes(self) -> bool: ...
    @property
    def SecureConversationVersion(self) -> SecureConversationVersion: ...
    @property
    def SecurityVersion(self) -> SecurityVersion: ...
    @property
    def TrustVersion(self) -> TrustVersion: ...
    @property
    def WSSecurity10WSTrust13WSSecureConversation13BasicSecurityProfile10(self) -> MessageSecurityTokenVersion: ...
    @property
    def WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005BasicSecurityProfile10(self) -> MessageSecurityTokenVersion: ...
    @property
    def WSSecurity11WSTrust13WSSecureConversation13(self) -> MessageSecurityTokenVersion: ...
    @property
    def WSSecurity11WSTrust13WSSecureConversation13BasicSecurityProfile10(self) -> MessageSecurityTokenVersion: ...
    @property
    def WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005(self) -> MessageSecurityTokenVersion: ...
    @property
    def WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005BasicSecurityProfile10(self) -> MessageSecurityTokenVersion: ...
    @overload
    def GetSecuritySpecifications() -> ObjectModel.ReadOnlyCollection: ...
    @overload
    @staticmethod
    def GetSecurityTokenVersion(version: SecurityVersion, emitBspAttributes: bool) -> MessageSecurityTokenVersion: ...
    @overload
    def ToString() -> str: ...

class NonceCache(object):
    """    """
    @overload
    def CheckNonce(self, nonce: System.System.Array[System.Byte]) -> bool: ...
    @property
    def CacheSize(self) -> int: ...
    @property
    def CachingTimeSpan(self) -> System.TimeSpan: ...
    @CacheSize.setter
    def CacheSize(self, value: System.Void): ...
    @CachingTimeSpan.setter
    def CachingTimeSpan(self, value: System.Void): ...
    @overload
    def TryAddNonce(self, nonce: System.System.Array[System.Byte]) -> bool: ...

class ScopedMessagePartSpecification(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ScopedMessagePartSpecification): ...
    @overload
    def AddParts(self, parts: MessagePartSpecification) -> None: ...
    @overload
    def AddParts(self, parts: MessagePartSpecification, action: str) -> None: ...
    @property
    def Actions(self) -> Generic.ICollection: ...
    @property
    def ChannelParts(self) -> MessagePartSpecification: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @overload
    def MakeReadOnly() -> None: ...
    @overload
    def TryGetParts(self, action: str) -> (bool, MessagePartSpecification): ...
    @overload
    def TryGetParts(self, action: str, excludeChannelScope: bool) -> (bool, MessagePartSpecification): ...

class SecureConversationVersion(object):
    """    """
    @property
    def Default(self) -> SecureConversationVersion: ...
    @property
    def Namespace(self) -> Xml.XmlDictionaryString: ...
    @property
    def Prefix(self) -> Xml.XmlDictionaryString: ...
    @property
    def WSSecureConversation13(self) -> SecureConversationVersion: ...
    @property
    def WSSecureConversationFeb2005(self) -> SecureConversationVersion: ...

class SecurityAccessDeniedException(ServiceModel.CommunicationException):
    """    """
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SecurityAlgorithmSuite(object):
    """    """
    @property
    def Basic256(self) -> SecurityAlgorithmSuite: ...
    @property
    def Basic256Sha256(self) -> SecurityAlgorithmSuite: ...
    @property
    def Default(self) -> SecurityAlgorithmSuite: ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def TripleDes(self) -> SecurityAlgorithmSuite: ...
    @overload
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def IsAsymmetricKeyWrapAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsAsymmetricSignatureAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsCanonicalizationAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsDigestAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsEncryptionAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsEncryptionKeyDerivationAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsSignatureKeyDerivationAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def IsSymmetricKeyWrapAlgorithmSupported(self, algorithm: str) -> bool: ...
    @overload
    def IsSymmetricSignatureAlgorithmSupported(self, algorithm: str) -> bool: ...

class Basic256SecurityAlgorithmSuite(SecurityAlgorithmSuite):
    """    """
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    @overload
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def ToString() -> str: ...

class TripleDesSecurityAlgorithmSuite(SecurityAlgorithmSuite):
    """    """
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    @overload
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    @overload
    def ToString() -> str: ...

class Basic256Sha256SecurityAlgorithmSuite(Basic256SecurityAlgorithmSuite):
    """    """
    def __init__(self): ...
    @overload
    def ToString() -> str: ...

class SecurityContextKeyIdentifierClause(Tokens.SecurityKeyIdentifierClause):
    """    """
    @overload
    def __init__(self, contextId: Xml.UniqueId): ...
    @overload
    def __init__(self, contextId: Xml.UniqueId, generation: Xml.UniqueId): ...
    @overload
    def __init__(self, contextId: Xml.UniqueId, generation: Xml.UniqueId, derivationNonce: System.System.Array[System.Byte], derivationLength: int): ...
    @property
    def ContextId(self) -> Xml.UniqueId: ...
    @property
    def Generation(self) -> Xml.UniqueId: ...
    @overload
    def Matches(self, keyIdentifierClause: Tokens.SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, contextId: Xml.UniqueId, generation: Xml.UniqueId) -> bool: ...
    @overload
    def ToString() -> str: ...

class SecurityCredentialsManager(object):
    """    """
    @overload
    def CreateSecurityTokenManager() -> Selectors.SecurityTokenManager: ...

class SecurityKeyEntropyMode(enum.Enum):
    ClientEntropy = 0
    ServerEntropy = 1
    CombinedEntropy = 2

class SecurityMessageProperty(object):
    """    """
    def __init__(self): ...
    @overload
    def CreateCopy() -> Channels.IMessageProperty: ...
    @overload
    def Dispose() -> None: ...
    @property
    def ExternalAuthorizationPolicies(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def HasIncomingSupportingTokens(self) -> bool: ...
    @property
    def IncomingSupportingTokens(self) -> ObjectModel.Collection: ...
    @property
    def InitiatorToken(self) -> SecurityTokenSpecification: ...
    @property
    def OutgoingSupportingTokens(self) -> ObjectModel.Collection: ...
    @property
    def ProtectionToken(self) -> SecurityTokenSpecification: ...
    @property
    def RecipientToken(self) -> SecurityTokenSpecification: ...
    @property
    def SenderIdPrefix(self) -> str: ...
    @property
    def ServiceSecurityContext(self) -> ServiceModel.ServiceSecurityContext: ...
    @property
    def TransportToken(self) -> SecurityTokenSpecification: ...
    @overload
    @staticmethod
    def GetOrCreate(message: Channels.Message) -> SecurityMessageProperty: ...
    @ExternalAuthorizationPolicies.setter
    def ExternalAuthorizationPolicies(self, value: System.Void): ...
    @InitiatorToken.setter
    def InitiatorToken(self, value: System.Void): ...
    @ProtectionToken.setter
    def ProtectionToken(self, value: System.Void): ...
    @RecipientToken.setter
    def RecipientToken(self, value: System.Void): ...
    @SenderIdPrefix.setter
    def SenderIdPrefix(self, value: System.Void): ...
    @ServiceSecurityContext.setter
    def ServiceSecurityContext(self, value: System.Void): ...
    @TransportToken.setter
    def TransportToken(self, value: System.Void): ...

class SecurityNegotiationException(ServiceModel.CommunicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class SecurityPolicyVersion(object):
    """    """
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def WSSecurityPolicy11(self) -> SecurityPolicyVersion: ...
    @property
    def WSSecurityPolicy12(self) -> SecurityPolicyVersion: ...

class SecurityStateEncoder(object):
    """    """

class SecurityTokenAttachmentMode(enum.Enum):
    Signed = 0
    Endorsing = 1
    SignedEndorsing = 2
    SignedEncrypted = 3

class SecurityTokenSpecification(object):
    """    """
    def __init__(self, token: Tokens.SecurityToken, tokenPolicies: ObjectModel.ReadOnlyCollection): ...
    @property
    def SecurityToken(self) -> Tokens.SecurityToken: ...
    @property
    def SecurityTokenPolicies(self) -> ObjectModel.ReadOnlyCollection: ...

class SecurityVersion(object):
    """    """
    @property
    def WSSecurity10(self) -> SecurityVersion: ...
    @property
    def WSSecurity11(self) -> SecurityVersion: ...

class SspiSecurityTokenProvider(Selectors.SecurityTokenProvider):
    """    """
    @overload
    def __init__(self, credential: Net.NetworkCredential, allowNtlm: bool, impersonationLevel: Principal.TokenImpersonationLevel): ...
    @overload
    def __init__(self, credential: Net.NetworkCredential, extractGroupsForWindowsAccounts: bool, allowUnauthenticatedCallers: bool): ...

class SupportingTokenSpecification(SecurityTokenSpecification):
    """    """
    @overload
    def __init__(self, token: Tokens.SecurityToken, tokenPolicies: ObjectModel.ReadOnlyCollection, attachmentMode: SecurityTokenAttachmentMode): ...
    @overload
    def __init__(self, token: Tokens.SecurityToken, tokenPolicies: ObjectModel.ReadOnlyCollection, attachmentMode: SecurityTokenAttachmentMode, tokenParameters: Tokens.SecurityTokenParameters): ...
    @property
    def SecurityTokenAttachmentMode(self) -> SecurityTokenAttachmentMode: ...

class TrustVersion(object):
    """    """
    @property
    def Default(self) -> TrustVersion: ...
    @property
    def Namespace(self) -> Xml.XmlDictionaryString: ...
    @property
    def Prefix(self) -> Xml.XmlDictionaryString: ...
    @property
    def WSTrust13(self) -> TrustVersion: ...
    @property
    def WSTrustFeb2005(self) -> TrustVersion: ...

class UserNamePasswordClientCredential(object):
    """    """
    @property
    def Password(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @Password.setter
    def Password(self, value: System.Void): ...
    @UserName.setter
    def UserName(self, value: System.Void): ...

class WindowsClientCredential(object):
    """    """
    @property
    def AllowedImpersonationLevel(self) -> Principal.TokenImpersonationLevel: ...
    @property
    def AllowNtlm(self) -> bool: ...
    @property
    def ClientCredential(self) -> Net.NetworkCredential: ...
    @AllowedImpersonationLevel.setter
    def AllowedImpersonationLevel(self, value: System.Void): ...
    @AllowNtlm.setter
    def AllowNtlm(self, value: System.Void): ...
    @ClientCredential.setter
    def ClientCredential(self, value: System.Void): ...

class WSSecurityTokenSerializer(Selectors.SecurityTokenSerializer):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, emitBspRequiredAttributes: bool): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: Tokens.SamlSerializer): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: Tokens.SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, trustVersion: TrustVersion, secureConversationVersion: SecureConversationVersion, emitBspRequiredAttributes: bool, samlSerializer: Tokens.SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Generic.IEnumerable): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: Tokens.SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Generic.IEnumerable, maximumKeyDerivationOffset: int, maximumKeyDerivationLabelLength: int, maximumKeyDerivationNonceLength: int): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, trustVersion: TrustVersion, secureConversationVersion: SecureConversationVersion, emitBspRequiredAttributes: bool, samlSerializer: Tokens.SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Generic.IEnumerable, maximumKeyDerivationOffset: int, maximumKeyDerivationLabelLength: int, maximumKeyDerivationNonceLength: int): ...
    @overload
    def CreateKeyIdentifierClauseFromTokenXml(self, element: Xml.XmlElement, tokenReferenceStyle: Tokens.SecurityTokenReferenceStyle) -> Tokens.SecurityKeyIdentifierClause: ...
    @property
    def DefaultInstance(self) -> WSSecurityTokenSerializer: ...
    @property
    def EmitBspRequiredAttributes(self) -> bool: ...
    @property
    def MaximumKeyDerivationLabelLength(self) -> int: ...
    @property
    def MaximumKeyDerivationNonceLength(self) -> int: ...
    @property
    def MaximumKeyDerivationOffset(self) -> int: ...
    @property
    def SecurityVersion(self) -> SecurityVersion: ...
    @overload
    def TryCreateKeyIdentifierClauseFromTokenXml(self, element: Xml.XmlElement, tokenReferenceStyle: Tokens.SecurityTokenReferenceStyle) -> (bool, Tokens.SecurityKeyIdentifierClause): ...

class X509CertificateInitiatorClientCredential(object):
    """    """
    @property
    def Certificate(self) -> X509Certificates.X509Certificate2: ...
    @Certificate.setter
    def Certificate(self, value: System.Void): ...
    @overload
    def SetCertificate(self, subjectName: str, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName) -> None: ...
    @overload
    def SetCertificate(self, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName, findType: X509Certificates.X509FindType, findValue: object) -> None: ...

class X509CertificateRecipientClientCredential(object):
    """    """
    @property
    def Authentication(self) -> X509ServiceCertificateAuthentication: ...
    @property
    def DefaultCertificate(self) -> X509Certificates.X509Certificate2: ...
    @property
    def ScopedCertificates(self) -> Generic.Dictionary: ...
    @property
    def SslCertificateAuthentication(self) -> X509ServiceCertificateAuthentication: ...
    @DefaultCertificate.setter
    def DefaultCertificate(self, value: System.Void): ...
    @SslCertificateAuthentication.setter
    def SslCertificateAuthentication(self, value: System.Void): ...
    @overload
    def SetDefaultCertificate(self, subjectName: str, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName) -> None: ...
    @overload
    def SetDefaultCertificate(self, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName, findType: X509Certificates.X509FindType, findValue: object) -> None: ...
    @overload
    def SetScopedCertificate(self, subjectName: str, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName, targetService: System.Uri) -> None: ...
    @overload
    def SetScopedCertificate(self, storeLocation: X509Certificates.StoreLocation, storeName: X509Certificates.StoreName, findType: X509Certificates.X509FindType, findValue: object, targetService: System.Uri) -> None: ...

class X509CertificateValidationMode(enum.Enum):
    None_ = 0
    PeerTrust = 1
    ChainTrust = 2
    PeerOrChainTrust = 3
    Custom = 4

class X509ClientCertificateAuthentication(object):
    """    """
    def __init__(self): ...

class X509ServiceCertificateAuthentication(object):
    """    """
    def __init__(self): ...
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CustomCertificateValidator(self) -> Selectors.X509CertificateValidator: ...
    @property
    def RevocationMode(self) -> X509Certificates.X509RevocationMode: ...
    @property
    def TrustedStoreLocation(self) -> X509Certificates.StoreLocation: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: System.Void): ...
    @CustomCertificateValidator.setter
    def CustomCertificateValidator(self, value: System.Void): ...
    @RevocationMode.setter
    def RevocationMode(self, value: System.Void): ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: System.Void): ...

# endregion
