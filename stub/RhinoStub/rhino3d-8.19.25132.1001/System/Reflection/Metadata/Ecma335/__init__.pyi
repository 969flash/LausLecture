"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["FunctionPointerAttributes", "MethodBodyStreamEncoder", "MethodBody", "MethodBodyAttributes", "MetadataBuilder", "MetadataRootBuilder", "ControlFlowBuilder", "ExceptionRegionEncoder", "InstructionEncoder", "LabelHandle", "CodedIndex", "PortablePdbBuilder", "BlobEncoder", "MethodSignatureEncoder", "LocalVariablesEncoder", "LocalVariableTypeEncoder", "ParameterTypeEncoder", "PermissionSetEncoder", "GenericTypeArgumentsEncoder", "FieldTypeEncoder", "FixedArgumentsEncoder", "LiteralEncoder", "ScalarEncoder", "LiteralsEncoder", "VectorEncoder", "NameEncoder", "CustomAttributeNamedArgumentsEncoder", "NamedArgumentsEncoder", "NamedArgumentTypeEncoder", "CustomAttributeArrayTypeEncoder", "CustomAttributeElementTypeEncoder", "SignatureTypeEncoder", "CustomModifiersEncoder", "ArrayShapeEncoder", "ReturnTypeEncoder", "ParametersEncoder", "MetadataSizes", "SignatureDecoder", "EditAndContinueLogEntry", "EditAndContinueOperation", "ExportedTypeExtensions", "HeapIndex", "MetadataReaderExtensions", "MetadataTokens", "TableIndex", "MetadataAggregator"]
# endregion

# region: Imports
from System import Reflection
from System.Collections import Generic
from System.Collections import Immutable
from System.Reflection import Metadata
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Reflection.Metadata, Version=7.0.0.0

class FunctionPointerAttributes(enum.Enum):
    None_ = 0
    HasThis = 32
    HasExplicitThis = 96

class MethodBodyStreamEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddMethodBody(self, instructionEncoder: InstructionEncoder, maxStack: int, localVariablesSignature: Metadata.StandaloneSignatureHandle, attributes: MethodBodyAttributes) -> int: ...
    @overload
    def AddMethodBody(self, instructionEncoder: InstructionEncoder, maxStack: int, localVariablesSignature: Metadata.StandaloneSignatureHandle, attributes: MethodBodyAttributes, hasDynamicStackAllocation: bool) -> int: ...
    @overload
    def AddMethodBody(self, codeSize: int, maxStack: int, exceptionRegionCount: int, hasSmallExceptionRegions: bool, localVariablesSignature: Metadata.StandaloneSignatureHandle, attributes: MethodBodyAttributes) -> MethodBody: ...
    @overload
    def AddMethodBody(self, codeSize: int, maxStack: int, exceptionRegionCount: int, hasSmallExceptionRegions: bool, localVariablesSignature: Metadata.StandaloneSignatureHandle, attributes: MethodBodyAttributes, hasDynamicStackAllocation: bool) -> MethodBody: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class MethodBody(System.ValueType):
    """    """
    @property
    def ExceptionRegions(self) -> ExceptionRegionEncoder: ...
    @property
    def Instructions(self) -> Metadata.Blob: ...
    @property
    def Offset(self) -> int: ...

class MethodBodyAttributes(enum.Enum):
    None_ = 0
    InitLocals = 1

class MetadataBuilder(object):
    """    """
    def __init__(self, userStringHeapStartOffset: int, stringHeapStartOffset: int, blobHeapStartOffset: int, guidHeapStartOffset: int): ...
    @overload
    def AddAssembly(self, name: Metadata.StringHandle, version: System.Version, culture: Metadata.StringHandle, publicKey: Metadata.BlobHandle, flags: Reflection.AssemblyFlags, hashAlgorithm: Reflection.AssemblyHashAlgorithm) -> Metadata.AssemblyDefinitionHandle: ...
    @overload
    def AddAssemblyFile(self, name: Metadata.StringHandle, hashValue: Metadata.BlobHandle, containsMetadata: bool) -> Metadata.AssemblyFileHandle: ...
    @overload
    def AddAssemblyReference(self, name: Metadata.StringHandle, version: System.Version, culture: Metadata.StringHandle, publicKeyOrToken: Metadata.BlobHandle, flags: Reflection.AssemblyFlags, hashValue: Metadata.BlobHandle) -> Metadata.AssemblyReferenceHandle: ...
    @overload
    def AddConstant(self, parent: Metadata.EntityHandle, value: object) -> Metadata.ConstantHandle: ...
    @overload
    def AddCustomAttribute(self, parent: Metadata.EntityHandle, constructor: Metadata.EntityHandle, value: Metadata.BlobHandle) -> Metadata.CustomAttributeHandle: ...
    @overload
    def AddCustomDebugInformation(self, parent: Metadata.EntityHandle, kind: Metadata.GuidHandle, value: Metadata.BlobHandle) -> Metadata.CustomDebugInformationHandle: ...
    @overload
    def AddDeclarativeSecurityAttribute(self, parent: Metadata.EntityHandle, action: Reflection.DeclarativeSecurityAction, permissionSet: Metadata.BlobHandle) -> Metadata.DeclarativeSecurityAttributeHandle: ...
    @overload
    def AddDocument(self, name: Metadata.BlobHandle, hashAlgorithm: Metadata.GuidHandle, hash_: Metadata.BlobHandle, language: Metadata.GuidHandle) -> Metadata.DocumentHandle: ...
    @overload
    def AddEncLogEntry(self, entity: Metadata.EntityHandle, code: EditAndContinueOperation) -> None: ...
    @overload
    def AddEncMapEntry(self, entity: Metadata.EntityHandle) -> None: ...
    @overload
    def AddEvent(self, attributes: Reflection.EventAttributes, name: Metadata.StringHandle, type_: Metadata.EntityHandle) -> Metadata.EventDefinitionHandle: ...
    @overload
    def AddEventMap(self, declaringType: Metadata.TypeDefinitionHandle, eventList: Metadata.EventDefinitionHandle) -> None: ...
    @overload
    def AddExportedType(self, attributes: Reflection.TypeAttributes, namespace: Metadata.StringHandle, name: Metadata.StringHandle, implementation: Metadata.EntityHandle, typeDefinitionId: int) -> Metadata.ExportedTypeHandle: ...
    @overload
    def AddFieldDefinition(self, attributes: Reflection.FieldAttributes, name: Metadata.StringHandle, signature: Metadata.BlobHandle) -> Metadata.FieldDefinitionHandle: ...
    @overload
    def AddFieldLayout(self, field: Metadata.FieldDefinitionHandle, offset: int) -> None: ...
    @overload
    def AddFieldRelativeVirtualAddress(self, field: Metadata.FieldDefinitionHandle, offset: int) -> None: ...
    @overload
    def AddGenericParameter(self, parent: Metadata.EntityHandle, attributes: Reflection.GenericParameterAttributes, name: Metadata.StringHandle, index: int) -> Metadata.GenericParameterHandle: ...
    @overload
    def AddGenericParameterConstraint(self, genericParameter: Metadata.GenericParameterHandle, constraint: Metadata.EntityHandle) -> Metadata.GenericParameterConstraintHandle: ...
    @overload
    def AddImportScope(self, parentScope: Metadata.ImportScopeHandle, imports: Metadata.BlobHandle) -> Metadata.ImportScopeHandle: ...
    @overload
    def AddInterfaceImplementation(self, type_: Metadata.TypeDefinitionHandle, implementedInterface: Metadata.EntityHandle) -> Metadata.InterfaceImplementationHandle: ...
    @overload
    def AddLocalConstant(self, name: Metadata.StringHandle, signature: Metadata.BlobHandle) -> Metadata.LocalConstantHandle: ...
    @overload
    def AddLocalScope(self, method: Metadata.MethodDefinitionHandle, importScope: Metadata.ImportScopeHandle, variableList: Metadata.LocalVariableHandle, constantList: Metadata.LocalConstantHandle, startOffset: int, length: int) -> Metadata.LocalScopeHandle: ...
    @overload
    def AddLocalVariable(self, attributes: Metadata.LocalVariableAttributes, index: int, name: Metadata.StringHandle) -> Metadata.LocalVariableHandle: ...
    @overload
    def AddManifestResource(self, attributes: Reflection.ManifestResourceAttributes, name: Metadata.StringHandle, implementation: Metadata.EntityHandle, offset: System.UInt32) -> Metadata.ManifestResourceHandle: ...
    @overload
    def AddMarshallingDescriptor(self, parent: Metadata.EntityHandle, descriptor: Metadata.BlobHandle) -> None: ...
    @overload
    def AddMemberReference(self, parent: Metadata.EntityHandle, name: Metadata.StringHandle, signature: Metadata.BlobHandle) -> Metadata.MemberReferenceHandle: ...
    @overload
    def AddMethodDebugInformation(self, document: Metadata.DocumentHandle, sequencePoints: Metadata.BlobHandle) -> Metadata.MethodDebugInformationHandle: ...
    @overload
    def AddMethodDefinition(self, attributes: Reflection.MethodAttributes, implAttributes: Reflection.MethodImplAttributes, name: Metadata.StringHandle, signature: Metadata.BlobHandle, bodyOffset: int, parameterList: Metadata.ParameterHandle) -> Metadata.MethodDefinitionHandle: ...
    @overload
    def AddMethodImplementation(self, type_: Metadata.TypeDefinitionHandle, methodBody: Metadata.EntityHandle, methodDeclaration: Metadata.EntityHandle) -> Metadata.MethodImplementationHandle: ...
    @overload
    def AddMethodImport(self, method: Metadata.MethodDefinitionHandle, attributes: Reflection.MethodImportAttributes, name: Metadata.StringHandle, module: Metadata.ModuleReferenceHandle) -> None: ...
    @overload
    def AddMethodSemantics(self, association: Metadata.EntityHandle, semantics: Reflection.MethodSemanticsAttributes, methodDefinition: Metadata.MethodDefinitionHandle) -> None: ...
    @overload
    def AddMethodSpecification(self, method: Metadata.EntityHandle, instantiation: Metadata.BlobHandle) -> Metadata.MethodSpecificationHandle: ...
    @overload
    def AddModule(self, generation: int, moduleName: Metadata.StringHandle, mvid: Metadata.GuidHandle, encId: Metadata.GuidHandle, encBaseId: Metadata.GuidHandle) -> Metadata.ModuleDefinitionHandle: ...
    @overload
    def AddModuleReference(self, moduleName: Metadata.StringHandle) -> Metadata.ModuleReferenceHandle: ...
    @overload
    def AddNestedType(self, type_: Metadata.TypeDefinitionHandle, enclosingType: Metadata.TypeDefinitionHandle) -> None: ...
    @overload
    def AddParameter(self, attributes: Reflection.ParameterAttributes, name: Metadata.StringHandle, sequenceNumber: int) -> Metadata.ParameterHandle: ...
    @overload
    def AddProperty(self, attributes: Reflection.PropertyAttributes, name: Metadata.StringHandle, signature: Metadata.BlobHandle) -> Metadata.PropertyDefinitionHandle: ...
    @overload
    def AddPropertyMap(self, declaringType: Metadata.TypeDefinitionHandle, propertyList: Metadata.PropertyDefinitionHandle) -> None: ...
    @overload
    def AddStandaloneSignature(self, signature: Metadata.BlobHandle) -> Metadata.StandaloneSignatureHandle: ...
    @overload
    def AddStateMachineMethod(self, moveNextMethod: Metadata.MethodDefinitionHandle, kickoffMethod: Metadata.MethodDefinitionHandle) -> None: ...
    @overload
    def AddTypeDefinition(self, attributes: Reflection.TypeAttributes, namespace: Metadata.StringHandle, name: Metadata.StringHandle, baseType: Metadata.EntityHandle, fieldList: Metadata.FieldDefinitionHandle, methodList: Metadata.MethodDefinitionHandle) -> Metadata.TypeDefinitionHandle: ...
    @overload
    def AddTypeLayout(self, type_: Metadata.TypeDefinitionHandle, packingSize: System.UInt16, size: System.UInt32) -> None: ...
    @overload
    def AddTypeReference(self, resolutionScope: Metadata.EntityHandle, namespace: Metadata.StringHandle, name: Metadata.StringHandle) -> Metadata.TypeReferenceHandle: ...
    @overload
    def AddTypeSpecification(self, signature: Metadata.BlobHandle) -> Metadata.TypeSpecificationHandle: ...
    @overload
    def GetOrAddBlob(self, value: Metadata.BlobBuilder) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddBlob(self, value: System.System.Array[System.Byte]) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddBlob(self, value: Immutable.ImmutableArray) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddBlobUTF16(self, value: str) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddBlobUTF8(self, value: str, allowUnpairedSurrogates: bool) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddConstantBlob(self, value: object) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddDocumentName(self, value: str) -> Metadata.BlobHandle: ...
    @overload
    def GetOrAddGuid(self, guid: System.Guid) -> Metadata.GuidHandle: ...
    @overload
    def GetOrAddString(self, value: str) -> Metadata.StringHandle: ...
    @overload
    def GetOrAddUserString(self, value: str) -> Metadata.UserStringHandle: ...
    @overload
    def GetRowCount(self, table: TableIndex) -> int: ...
    @overload
    def GetRowCounts() -> Immutable.ImmutableArray: ...
    @overload
    def ReserveGuid() -> Metadata.ReservedBlob: ...
    @overload
    def ReserveUserString(self, length: int) -> Metadata.ReservedBlob: ...
    @overload
    def SetCapacity(self, heap: HeapIndex, byteCount: int) -> None: ...
    @overload
    def SetCapacity(self, table: TableIndex, rowCount: int) -> None: ...

class MetadataRootBuilder(object):
    """    """
    def __init__(self, tablesAndHeaps: MetadataBuilder, metadataVersion: str, suppressValidation: bool): ...
    @property
    def MetadataVersion(self) -> str: ...
    @property
    def Sizes(self) -> MetadataSizes: ...
    @property
    def SuppressValidation(self) -> bool: ...
    @overload
    def Serialize(self, builder: Metadata.BlobBuilder, methodBodyStreamRva: int, mappedFieldDataStreamRva: int) -> None: ...

class ControlFlowBuilder(object):
    """    """
    def __init__(self): ...
    @overload
    def AddCatchRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle, catchType: Metadata.EntityHandle) -> None: ...
    @overload
    def AddFaultRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle) -> None: ...
    @overload
    def AddFilterRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle, filterStart: LabelHandle) -> None: ...
    @overload
    def AddFinallyRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle) -> None: ...
    @overload
    def Clear() -> None: ...

class ExceptionRegionEncoder(System.ValueType):
    """    """
    @overload
    def Add(self, kind: Metadata.ExceptionRegionKind, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, catchType: Metadata.EntityHandle, filterOffset: int) -> ExceptionRegionEncoder: ...
    @overload
    def AddCatch(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, catchType: Metadata.EntityHandle) -> ExceptionRegionEncoder: ...
    @overload
    def AddFault(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int) -> ExceptionRegionEncoder: ...
    @overload
    def AddFilter(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, filterOffset: int) -> ExceptionRegionEncoder: ...
    @overload
    def AddFinally(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int) -> ExceptionRegionEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @property
    def HasSmallFormat(self) -> bool: ...
    @overload
    @staticmethod
    def IsSmallExceptionRegion(startOffset: int, length: int) -> bool: ...
    @overload
    @staticmethod
    def IsSmallRegionCount(exceptionRegionCount: int) -> bool: ...

class InstructionEncoder(System.ValueType):
    """    """
    def __init__(self, codeBuilder: Metadata.BlobBuilder, controlFlowBuilder: ControlFlowBuilder): ...
    @overload
    def Branch(self, code: Metadata.ILOpCode, label: LabelHandle) -> None: ...
    @overload
    def Call(self, methodHandle: Metadata.EntityHandle) -> None: ...
    @overload
    def Call(self, methodHandle: Metadata.MethodDefinitionHandle) -> None: ...
    @overload
    def Call(self, methodHandle: Metadata.MethodSpecificationHandle) -> None: ...
    @overload
    def Call(self, methodHandle: Metadata.MemberReferenceHandle) -> None: ...
    @overload
    def CallIndirect(self, signature: Metadata.StandaloneSignatureHandle) -> None: ...
    @overload
    def DefineLabel() -> LabelHandle: ...
    @property
    def CodeBuilder(self) -> Metadata.BlobBuilder: ...
    @property
    def ControlFlowBuilder(self) -> ControlFlowBuilder: ...
    @property
    def Offset(self) -> int: ...
    @overload
    def LoadArgument(self, argumentIndex: int) -> None: ...
    @overload
    def LoadArgumentAddress(self, argumentIndex: int) -> None: ...
    @overload
    def LoadConstantI4(self, value: int) -> None: ...
    @overload
    def LoadConstantI8(self, value: System.Int64) -> None: ...
    @overload
    def LoadConstantR4(self, value: System.Single) -> None: ...
    @overload
    def LoadConstantR8(self, value: float) -> None: ...
    @overload
    def LoadLocal(self, slotIndex: int) -> None: ...
    @overload
    def LoadLocalAddress(self, slotIndex: int) -> None: ...
    @overload
    def LoadString(self, handle: Metadata.UserStringHandle) -> None: ...
    @overload
    def MarkLabel(self, label: LabelHandle) -> None: ...
    @overload
    def OpCode(self, code: Metadata.ILOpCode) -> None: ...
    @overload
    def StoreArgument(self, argumentIndex: int) -> None: ...
    @overload
    def StoreLocal(self, slotIndex: int) -> None: ...
    @overload
    def Token(self, token: int) -> None: ...
    @overload
    def Token(self, handle: Metadata.EntityHandle) -> None: ...

class LabelHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, other: LabelHandle) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> int: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class CodedIndex(object):
    """    """
    @overload
    @staticmethod
    def CustomAttributeType(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasConstant(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasCustomAttribute(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasCustomDebugInformation(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasDeclSecurity(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasFieldMarshal(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def HasSemantics(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def Implementation(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def MemberForwarded(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def MemberRefParent(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def MethodDefOrRef(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def ResolutionScope(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def TypeDefOrRef(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def TypeDefOrRefOrSpec(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def TypeOrMethodDef(handle: Metadata.EntityHandle) -> int: ...

class PortablePdbBuilder(object):
    """    """
    def __init__(self, tablesAndHeaps: MetadataBuilder, typeSystemRowCounts: Immutable.ImmutableArray, entryPoint: Metadata.MethodDefinitionHandle, idProvider: System.Func): ...
    @property
    def FormatVersion(self) -> System.UInt16: ...
    @property
    def IdProvider(self) -> System.Func: ...
    @property
    def MetadataVersion(self) -> str: ...
    @overload
    def Serialize(self, builder: Metadata.BlobBuilder) -> Metadata.BlobContentId: ...

class BlobEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def CustomAttributeSignature() -> (FixedArgumentsEncoder, CustomAttributeNamedArgumentsEncoder): ...
    @overload
    def CustomAttributeSignature(self, fixedArguments: System.Action, namedArguments: System.Action) -> None: ...
    @overload
    def Field() -> FieldTypeEncoder: ...
    @overload
    def FieldSignature() -> SignatureTypeEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def LocalVariableSignature(self, variableCount: int) -> LocalVariablesEncoder: ...
    @overload
    def MethodSignature(self, convention: Metadata.SignatureCallingConvention, genericParameterCount: int, isInstanceMethod: bool) -> MethodSignatureEncoder: ...
    @overload
    def MethodSpecificationSignature(self, genericArgumentCount: int) -> GenericTypeArgumentsEncoder: ...
    @overload
    def PermissionSetArguments(self, argumentCount: int) -> NamedArgumentsEncoder: ...
    @overload
    def PermissionSetBlob(self, attributeCount: int) -> PermissionSetEncoder: ...
    @overload
    def PropertySignature(self, isInstanceProperty: bool) -> MethodSignatureEncoder: ...
    @overload
    def TypeSpecificationSignature() -> SignatureTypeEncoder: ...

class MethodSignatureEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder, hasVarArgs: bool): ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @property
    def HasVarArgs(self) -> bool: ...
    @overload
    def Parameters(self, parameterCount: int) -> (ReturnTypeEncoder, ParametersEncoder): ...
    @overload
    def Parameters(self, parameterCount: int, returnType: System.Action, parameters: System.Action) -> None: ...

class LocalVariablesEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddVariable() -> LocalVariableTypeEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class LocalVariableTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def CustomModifiers() -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Type(self, isByRef: bool, isPinned: bool) -> SignatureTypeEncoder: ...
    @overload
    def TypedReference() -> None: ...

class ParameterTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def CustomModifiers() -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Type(self, isByRef: bool) -> SignatureTypeEncoder: ...
    @overload
    def TypedReference() -> None: ...

class PermissionSetEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddPermission(self, typeName: str, encodedArguments: Immutable.ImmutableArray) -> PermissionSetEncoder: ...
    @overload
    def AddPermission(self, typeName: str, encodedArguments: Metadata.BlobBuilder) -> PermissionSetEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class GenericTypeArgumentsEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddArgument() -> SignatureTypeEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class FieldTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def CustomModifiers() -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Type(self, isByRef: bool) -> SignatureTypeEncoder: ...
    @overload
    def TypedReference() -> None: ...

class FixedArgumentsEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddArgument() -> LiteralEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class LiteralEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Scalar() -> ScalarEncoder: ...
    @overload
    def TaggedScalar() -> (CustomAttributeElementTypeEncoder, ScalarEncoder): ...
    @overload
    def TaggedScalar(self, type_: System.Action, scalar: System.Action) -> None: ...
    @overload
    def TaggedVector() -> (CustomAttributeArrayTypeEncoder, VectorEncoder): ...
    @overload
    def TaggedVector(self, arrayType: System.Action, vector: System.Action) -> None: ...
    @overload
    def Vector() -> VectorEncoder: ...

class ScalarEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def Constant(self, value: object) -> None: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def NullArray() -> None: ...
    @overload
    def SystemType(self, serializedTypeName: str) -> None: ...

class LiteralsEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddLiteral() -> LiteralEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class VectorEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def Count(self, count: int) -> LiteralsEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class NameEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Name(self, name: str) -> None: ...

class CustomAttributeNamedArgumentsEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def Count(self, count: int) -> NamedArgumentsEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class NamedArgumentsEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddArgument(self, isField: bool) -> (NamedArgumentTypeEncoder, NameEncoder, LiteralEncoder): ...
    @overload
    def AddArgument(self, isField: bool, type_: System.Action, name: System.Action, literal: System.Action) -> None: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class NamedArgumentTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Object() -> None: ...
    @overload
    def ScalarType() -> CustomAttributeElementTypeEncoder: ...
    @overload
    def SZArray() -> CustomAttributeArrayTypeEncoder: ...

class CustomAttributeArrayTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def ElementType() -> CustomAttributeElementTypeEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def ObjectArray() -> None: ...

class CustomAttributeElementTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def Boolean() -> None: ...
    @overload
    def Byte() -> None: ...
    @overload
    def Char() -> None: ...
    @overload
    def Double() -> None: ...
    @overload
    def Enum(self, enumTypeName: str) -> None: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Int16() -> None: ...
    @overload
    def Int32() -> None: ...
    @overload
    def Int64() -> None: ...
    @overload
    def PrimitiveType(self, type_: Metadata.PrimitiveSerializationTypeCode) -> None: ...
    @overload
    def SByte() -> None: ...
    @overload
    def Single() -> None: ...
    @overload
    def String() -> None: ...
    @overload
    def SystemType() -> None: ...
    @overload
    def UInt16() -> None: ...
    @overload
    def UInt32() -> None: ...
    @overload
    def UInt64() -> None: ...

class SignatureTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def Array(self, elementType: System.Action, arrayShape: System.Action) -> None: ...
    @overload
    def Array() -> (SignatureTypeEncoder, ArrayShapeEncoder): ...
    @overload
    def Boolean() -> None: ...
    @overload
    def Byte() -> None: ...
    @overload
    def Char() -> None: ...
    @overload
    def CustomModifiers() -> CustomModifiersEncoder: ...
    @overload
    def Double() -> None: ...
    @overload
    def FunctionPointer(self, convention: Metadata.SignatureCallingConvention, attributes: FunctionPointerAttributes, genericParameterCount: int) -> MethodSignatureEncoder: ...
    @overload
    def GenericInstantiation(self, genericType: Metadata.EntityHandle, genericArgumentCount: int, isValueType: bool) -> GenericTypeArgumentsEncoder: ...
    @overload
    def GenericMethodTypeParameter(self, parameterIndex: int) -> None: ...
    @overload
    def GenericTypeParameter(self, parameterIndex: int) -> None: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Int16() -> None: ...
    @overload
    def Int32() -> None: ...
    @overload
    def Int64() -> None: ...
    @overload
    def IntPtr() -> None: ...
    @overload
    def Object() -> None: ...
    @overload
    def Pointer() -> SignatureTypeEncoder: ...
    @overload
    def PrimitiveType(self, type_: Metadata.PrimitiveTypeCode) -> None: ...
    @overload
    def SByte() -> None: ...
    @overload
    def Single() -> None: ...
    @overload
    def String() -> None: ...
    @overload
    def SZArray() -> SignatureTypeEncoder: ...
    @overload
    def Type(self, type_: Metadata.EntityHandle, isValueType: bool) -> None: ...
    @overload
    def UInt16() -> None: ...
    @overload
    def UInt32() -> None: ...
    @overload
    def UInt64() -> None: ...
    @overload
    def UIntPtr() -> None: ...
    @overload
    def VoidPointer() -> None: ...

class CustomModifiersEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def AddModifier(self, type_: Metadata.EntityHandle, isOptional: bool) -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...

class ArrayShapeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Shape(self, rank: int, sizes: Immutable.ImmutableArray, lowerBounds: Immutable.ImmutableArray) -> None: ...

class ReturnTypeEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder): ...
    @overload
    def CustomModifiers() -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @overload
    def Type(self, isByRef: bool) -> SignatureTypeEncoder: ...
    @overload
    def TypedReference() -> None: ...
    @overload
    def Void() -> None: ...

class ParametersEncoder(System.ValueType):
    """    """
    def __init__(self, builder: Metadata.BlobBuilder, hasVarArgs: bool): ...
    @overload
    def AddParameter() -> ParameterTypeEncoder: ...
    @property
    def Builder(self) -> Metadata.BlobBuilder: ...
    @property
    def HasVarArgs(self) -> bool: ...
    @overload
    def StartVarArgs() -> ParametersEncoder: ...

class MetadataSizes(object):
    """    """
    @property
    def ExternalRowCounts(self) -> Immutable.ImmutableArray: ...
    @property
    def HeapSizes(self) -> Immutable.ImmutableArray: ...
    @property
    def RowCounts(self) -> Immutable.ImmutableArray: ...
    @overload
    def GetAlignedHeapSize(self, index: HeapIndex) -> int: ...

class SignatureDecoder(System.ValueType):
    """    SignatureDecoder[TType, TGenericContext]
    """
    def __init__(self, provider: Metadata.ISignatureTypeProvider, metadataReader: Metadata.MetadataReader, genericContext: TGenericContext): ...
    @overload
    def DecodeFieldSignature() -> (TType, Metadata.BlobReader): ...
    @overload
    def DecodeLocalSignature() -> (Immutable.ImmutableArray, Metadata.BlobReader): ...
    @overload
    def DecodeMethodSignature() -> (Metadata.MethodSignature, Metadata.BlobReader): ...
    @overload
    def DecodeMethodSpecificationSignature() -> (Immutable.ImmutableArray, Metadata.BlobReader): ...
    @overload
    def DecodeType(self, allowTypeSpecifications: bool) -> (TType, Metadata.BlobReader): ...

class EditAndContinueLogEntry(System.ValueType):
    """    """
    def __init__(self, handle: Metadata.EntityHandle, operation: EditAndContinueOperation): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: EditAndContinueLogEntry) -> bool: ...
    @property
    def Handle(self) -> Metadata.EntityHandle: ...
    @property
    def Operation(self) -> EditAndContinueOperation: ...
    @overload
    def GetHashCode() -> int: ...

class EditAndContinueOperation(enum.Enum):
    Default = 0
    AddMethod = 1
    AddField = 2
    AddParameter = 3
    AddProperty = 4
    AddEvent = 5

class ExportedTypeExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetTypeDefinitionId(exportedType: Metadata.ExportedType) -> int: ...

class HeapIndex(enum.Enum):
    UserString = 0
    String = 1
    Blob = 2
    Guid = 3

class MetadataReaderExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetEditAndContinueLogEntries(reader: Metadata.MetadataReader) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetEditAndContinueMapEntries(reader: Metadata.MetadataReader) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetHeapMetadataOffset(reader: Metadata.MetadataReader, heapIndex: HeapIndex) -> int: ...
    @overload
    @staticmethod
    def GetHeapSize(reader: Metadata.MetadataReader, heapIndex: HeapIndex) -> int: ...
    @overload
    @staticmethod
    def GetNextHandle(reader: Metadata.MetadataReader, handle: Metadata.UserStringHandle) -> Metadata.UserStringHandle: ...
    @overload
    @staticmethod
    def GetNextHandle(reader: Metadata.MetadataReader, handle: Metadata.BlobHandle) -> Metadata.BlobHandle: ...
    @overload
    @staticmethod
    def GetNextHandle(reader: Metadata.MetadataReader, handle: Metadata.StringHandle) -> Metadata.StringHandle: ...
    @overload
    @staticmethod
    def GetTableMetadataOffset(reader: Metadata.MetadataReader, tableIndex: TableIndex) -> int: ...
    @overload
    @staticmethod
    def GetTableRowCount(reader: Metadata.MetadataReader, tableIndex: TableIndex) -> int: ...
    @overload
    @staticmethod
    def GetTableRowSize(reader: Metadata.MetadataReader, tableIndex: TableIndex) -> int: ...
    @overload
    @staticmethod
    def GetTypesWithEvents(reader: Metadata.MetadataReader) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetTypesWithProperties(reader: Metadata.MetadataReader) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def ResolveSignatureTypeKind(reader: Metadata.MetadataReader, typeHandle: Metadata.EntityHandle, rawTypeKind: System.Byte) -> Metadata.SignatureTypeKind: ...

class MetadataTokens(object):
    """    """
    @property
    def TableCount(self) -> int: ...
    @property
    def HeapCount(self) -> int: ...
    @overload
    @staticmethod
    def AssemblyFileHandle(rowNumber: int) -> Metadata.AssemblyFileHandle: ...
    @overload
    @staticmethod
    def AssemblyReferenceHandle(rowNumber: int) -> Metadata.AssemblyReferenceHandle: ...
    @overload
    @staticmethod
    def BlobHandle(offset: int) -> Metadata.BlobHandle: ...
    @overload
    @staticmethod
    def ConstantHandle(rowNumber: int) -> Metadata.ConstantHandle: ...
    @overload
    @staticmethod
    def CustomAttributeHandle(rowNumber: int) -> Metadata.CustomAttributeHandle: ...
    @overload
    @staticmethod
    def CustomDebugInformationHandle(rowNumber: int) -> Metadata.CustomDebugInformationHandle: ...
    @overload
    @staticmethod
    def DeclarativeSecurityAttributeHandle(rowNumber: int) -> Metadata.DeclarativeSecurityAttributeHandle: ...
    @overload
    @staticmethod
    def DocumentHandle(rowNumber: int) -> Metadata.DocumentHandle: ...
    @overload
    @staticmethod
    def DocumentNameBlobHandle(offset: int) -> Metadata.DocumentNameBlobHandle: ...
    @overload
    @staticmethod
    def EntityHandle(token: int) -> Metadata.EntityHandle: ...
    @overload
    @staticmethod
    def EntityHandle(tableIndex: TableIndex, rowNumber: int) -> Metadata.EntityHandle: ...
    @overload
    @staticmethod
    def EventDefinitionHandle(rowNumber: int) -> Metadata.EventDefinitionHandle: ...
    @overload
    @staticmethod
    def ExportedTypeHandle(rowNumber: int) -> Metadata.ExportedTypeHandle: ...
    @overload
    @staticmethod
    def FieldDefinitionHandle(rowNumber: int) -> Metadata.FieldDefinitionHandle: ...
    @overload
    @staticmethod
    def GenericParameterConstraintHandle(rowNumber: int) -> Metadata.GenericParameterConstraintHandle: ...
    @overload
    @staticmethod
    def GenericParameterHandle(rowNumber: int) -> Metadata.GenericParameterHandle: ...
    @overload
    @staticmethod
    def GetHeapOffset(handle: Metadata.GuidHandle) -> int: ...
    @overload
    @staticmethod
    def GetHeapOffset(handle: Metadata.Handle) -> int: ...
    @overload
    @staticmethod
    def GetHeapOffset(handle: Metadata.BlobHandle) -> int: ...
    @overload
    @staticmethod
    def GetHeapOffset(handle: Metadata.UserStringHandle) -> int: ...
    @overload
    @staticmethod
    def GetHeapOffset(handle: Metadata.StringHandle) -> int: ...
    @overload
    @staticmethod
    def GetHeapOffset(reader: Metadata.MetadataReader, handle: Metadata.Handle) -> int: ...
    @overload
    @staticmethod
    def GetRowNumber(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def GetRowNumber(reader: Metadata.MetadataReader, handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def GetToken(handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def GetToken(handle: Metadata.Handle) -> int: ...
    @overload
    @staticmethod
    def GetToken(reader: Metadata.MetadataReader, handle: Metadata.EntityHandle) -> int: ...
    @overload
    @staticmethod
    def GetToken(reader: Metadata.MetadataReader, handle: Metadata.Handle) -> int: ...
    @overload
    @staticmethod
    def GuidHandle(offset: int) -> Metadata.GuidHandle: ...
    @overload
    @staticmethod
    def Handle(token: int) -> Metadata.Handle: ...
    @overload
    @staticmethod
    def Handle(tableIndex: TableIndex, rowNumber: int) -> Metadata.EntityHandle: ...
    @overload
    @staticmethod
    def ImportScopeHandle(rowNumber: int) -> Metadata.ImportScopeHandle: ...
    @overload
    @staticmethod
    def InterfaceImplementationHandle(rowNumber: int) -> Metadata.InterfaceImplementationHandle: ...
    @overload
    @staticmethod
    def LocalConstantHandle(rowNumber: int) -> Metadata.LocalConstantHandle: ...
    @overload
    @staticmethod
    def LocalScopeHandle(rowNumber: int) -> Metadata.LocalScopeHandle: ...
    @overload
    @staticmethod
    def LocalVariableHandle(rowNumber: int) -> Metadata.LocalVariableHandle: ...
    @overload
    @staticmethod
    def ManifestResourceHandle(rowNumber: int) -> Metadata.ManifestResourceHandle: ...
    @overload
    @staticmethod
    def MemberReferenceHandle(rowNumber: int) -> Metadata.MemberReferenceHandle: ...
    @overload
    @staticmethod
    def MethodDebugInformationHandle(rowNumber: int) -> Metadata.MethodDebugInformationHandle: ...
    @overload
    @staticmethod
    def MethodDefinitionHandle(rowNumber: int) -> Metadata.MethodDefinitionHandle: ...
    @overload
    @staticmethod
    def MethodImplementationHandle(rowNumber: int) -> Metadata.MethodImplementationHandle: ...
    @overload
    @staticmethod
    def MethodSpecificationHandle(rowNumber: int) -> Metadata.MethodSpecificationHandle: ...
    @overload
    @staticmethod
    def ModuleReferenceHandle(rowNumber: int) -> Metadata.ModuleReferenceHandle: ...
    @overload
    @staticmethod
    def ParameterHandle(rowNumber: int) -> Metadata.ParameterHandle: ...
    @overload
    @staticmethod
    def PropertyDefinitionHandle(rowNumber: int) -> Metadata.PropertyDefinitionHandle: ...
    @overload
    @staticmethod
    def StandaloneSignatureHandle(rowNumber: int) -> Metadata.StandaloneSignatureHandle: ...
    @overload
    @staticmethod
    def StringHandle(offset: int) -> Metadata.StringHandle: ...
    @overload
    @staticmethod
    def TryGetHeapIndex(type_: Metadata.HandleKind) -> (bool, HeapIndex): ...
    @overload
    @staticmethod
    def TryGetTableIndex(type_: Metadata.HandleKind) -> (bool, TableIndex): ...
    @overload
    @staticmethod
    def TypeDefinitionHandle(rowNumber: int) -> Metadata.TypeDefinitionHandle: ...
    @overload
    @staticmethod
    def TypeReferenceHandle(rowNumber: int) -> Metadata.TypeReferenceHandle: ...
    @overload
    @staticmethod
    def TypeSpecificationHandle(rowNumber: int) -> Metadata.TypeSpecificationHandle: ...
    @overload
    @staticmethod
    def UserStringHandle(offset: int) -> Metadata.UserStringHandle: ...

class TableIndex(enum.Enum):
    Module = 0
    TypeRef = 1
    TypeDef = 2
    FieldPtr = 3
    Field = 4
    MethodPtr = 5
    MethodDef = 6
    ParamPtr = 7
    Param = 8
    InterfaceImpl = 9
    MemberRef = 10
    Constant = 11
    CustomAttribute = 12
    FieldMarshal = 13
    DeclSecurity = 14
    ClassLayout = 15
    FieldLayout = 16
    StandAloneSig = 17
    EventMap = 18
    EventPtr = 19
    Event = 20
    PropertyMap = 21
    PropertyPtr = 22
    Property = 23
    MethodSemantics = 24
    MethodImpl = 25
    ModuleRef = 26
    TypeSpec = 27
    ImplMap = 28
    FieldRva = 29
    EncLog = 30
    EncMap = 31
    Assembly = 32
    AssemblyProcessor = 33
    AssemblyOS = 34
    AssemblyRef = 35
    AssemblyRefProcessor = 36
    AssemblyRefOS = 37
    File = 38
    ExportedType = 39
    ManifestResource = 40
    NestedClass = 41
    GenericParam = 42
    MethodSpec = 43
    GenericParamConstraint = 44
    Document = 48
    MethodDebugInformation = 49
    LocalScope = 50
    LocalVariable = 51
    LocalConstant = 52
    ImportScope = 53
    StateMachineMethod = 54
    CustomDebugInformation = 55

class MetadataAggregator(object):
    """    """
    @overload
    def __init__(self, baseReader: Metadata.MetadataReader, deltaReaders: Generic.IReadOnlyList): ...
    @overload
    def __init__(self, baseTableRowCounts: Generic.IReadOnlyList, baseHeapSizes: Generic.IReadOnlyList, deltaReaders: Generic.IReadOnlyList): ...
    @overload
    def GetGenerationHandle(self, handle: Metadata.Handle) -> (Metadata.Handle, int): ...

# endregion
