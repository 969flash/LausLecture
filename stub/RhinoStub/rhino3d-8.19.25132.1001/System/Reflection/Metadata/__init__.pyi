"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Ecma335", "EntityHandle", "Blob", "BlobWriter", "BlobBuilder", "Blobs", "ReservedBlob", "CustomAttributeNamedArgument", "CustomAttributeTypedArgument", "CustomAttributeValue", "ICustomAttributeTypeProvider", "ILOpCode", "ILOpCodeExtensions", "ImageFormatLimitationException", "MetadataStreamOptions", "MetadataReaderProvider", "BlobContentId", "PrimitiveSerializationTypeCode", "AssemblyDefinition", "AssemblyReference", "ModuleDefinitionHandle", "AssemblyDefinitionHandle", "InterfaceImplementationHandle", "MethodDefinitionHandle", "MethodImplementationHandle", "MethodSpecificationHandle", "TypeDefinitionHandle", "ExportedTypeHandle", "TypeReferenceHandle", "TypeSpecificationHandle", "MemberReferenceHandle", "FieldDefinitionHandle", "EventDefinitionHandle", "PropertyDefinitionHandle", "StandaloneSignatureHandle", "ParameterHandle", "GenericParameterHandle", "GenericParameterConstraintHandle", "ModuleReferenceHandle", "AssemblyReferenceHandle", "CustomAttributeHandle", "DeclarativeSecurityAttributeHandle", "ConstantHandle", "ManifestResourceHandle", "AssemblyFileHandle", "UserStringHandle", "StringHandle", "NamespaceDefinitionHandle", "BlobHandle", "GuidHandle", "AssemblyFile", "BlobReader", "Constant", "ConstantTypeCode", "CustomAttribute", "CustomAttributeNamedArgumentKind", "DeclarativeSecurityAttribute", "ArrayShape", "ISZArrayTypeProvider", "ISignatureTypeProvider", "ISimpleTypeProvider", "SignatureTypeKind", "IConstructedTypeProvider", "MethodSignature", "PrimitiveTypeCode", "EventDefinition", "ExceptionRegion", "ExceptionRegionKind", "ExportedType", "FieldDefinition", "GenericParameter", "GenericParameterConstraint", "GenericParameterHandleCollection", "Enumerator", "GenericParameterConstraintHandleCollection", "CustomAttributeHandleCollection", "DeclarativeSecurityAttributeHandleCollection", "MethodDefinitionHandleCollection", "FieldDefinitionHandleCollection", "PropertyDefinitionHandleCollection", "EventDefinitionHandleCollection", "MethodImplementationHandleCollection", "ParameterHandleCollection", "InterfaceImplementationHandleCollection", "TypeDefinitionHandleCollection", "TypeReferenceHandleCollection", "ExportedTypeHandleCollection", "MemberReferenceHandleCollection", "PropertyAccessors", "EventAccessors", "AssemblyReferenceHandleCollection", "ManifestResourceHandleCollection", "AssemblyFileHandleCollection", "HandleComparer", "HandleKind", "Handle", "InterfaceImplementation", "ManifestResource", "MemberReference", "StandaloneSignatureKind", "MemberReferenceKind", "MetadataKind", "MetadataReader", "MetadataReaderOptions", "MetadataStringComparer", "MetadataStringDecoder", "MethodBodyBlock", "MethodDefinition", "MethodImplementation", "MethodImport", "MethodSpecification", "ModuleDefinition", "ModuleReference", "NamespaceDefinition", "Parameter", "CustomDebugInformation", "DebugMetadataHeader", "Document", "DocumentNameBlobHandle", "DocumentHandleCollection", "MethodDebugInformationHandleCollection", "LocalScopeHandleCollection", "ChildrenEnumerator", "LocalVariableHandleCollection", "LocalConstantHandleCollection", "ImportScopeCollection", "CustomDebugInformationHandleCollection", "DocumentHandle", "MethodDebugInformationHandle", "LocalScopeHandle", "LocalVariableHandle", "LocalConstantHandle", "ImportScopeHandle", "CustomDebugInformationHandle", "ImportDefinition", "ImportDefinitionKind", "ImportDefinitionCollection", "LocalConstant", "ImportScope", "LocalScope", "LocalVariable", "LocalVariableAttributes", "MethodDebugInformation", "SequencePoint", "SequencePointCollection", "PEReaderExtensions", "PropertyDefinition", "SerializationTypeCode", "SignatureAttributes", "SignatureCallingConvention", "SignatureHeader", "SignatureKind", "SignatureTypeCode", "StandaloneSignature", "TypeDefinition", "TypeLayout", "TypeReference", "TypeSpecification"]
# endregion

# region: Imports
from System import IO
from System import Reflection
from System import Text
from System.Collections import Immutable
from System.Reflection import PortableExecutable
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["AssemblyExtensions", "MetadataUpdater", "MetadataUpdateHandlerAttribute"]
# endregion

# region: Imports
from System import Reflection
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class AssemblyExtensions(object):
    """    """
    @overload
    @staticmethod
    def TryGetRawMetadata(assembly: Reflection.Assembly) -> (bool, System.Byte, int): ...

class MetadataUpdater(object):
    """    """
    @overload
    @staticmethod
    def ApplyUpdate(assembly: Reflection.Assembly, metadataDelta: System.ReadOnlySpan, ilDelta: System.ReadOnlySpan, pdbDelta: System.ReadOnlySpan) -> None: ...
    @property
    def IsSupported(self) -> bool: ...

class MetadataUpdateHandlerAttribute(System.Attribute):
    """    """
    def __init__(self, handlerType: System.Type): ...
    @property
    def HandlerType(self) -> System.Type: ...

# endregion

# region: System.Reflection.Metadata, Version=7.0.0.0

class EntityHandle(System.ValueType):
    """    """
    @property
    def ModuleDefinition(self) -> ModuleDefinitionHandle: ...
    @property
    def AssemblyDefinition(self) -> AssemblyDefinitionHandle: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: EntityHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def Kind(self) -> HandleKind: ...
    @overload
    def GetHashCode() -> int: ...

class Blob(System.ValueType):
    """    """
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @overload
    def GetBytes() -> System.ArraySegment: ...

class BlobWriter(System.ValueType):
    """    """
    @overload
    def __init__(self, size: int): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, blob: Blob): ...
    @overload
    def __init__(self, buffer: System.System.Array[System.Byte], start: int, count: int): ...
    @overload
    def Align(self, alignment: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContentEquals(self, other: BlobWriter) -> bool: ...
    @property
    def Blob(self) -> Blob: ...
    @property
    def Length(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def RemainingBytes(self) -> int: ...
    @overload
    def PadTo(self, offset: int) -> None: ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @overload
    def ToArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ToArray(self, start: int, byteCount: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ToImmutableArray() -> Immutable.ImmutableArray: ...
    @overload
    def ToImmutableArray(self, start: int, byteCount: int) -> Immutable.ImmutableArray: ...
    @overload
    def WriteBoolean(self, value: bool) -> None: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...
    @overload
    def WriteBytes(self, source: BlobBuilder) -> None: ...
    @overload
    def WriteBytes(self, buffer: Immutable.ImmutableArray) -> None: ...
    @overload
    def WriteBytes(self, buffer: System.System.Array[System.Byte]) -> None: ...
    @overload
    def WriteBytes(self, value: System.Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, source: IO.Stream, byteCount: int) -> int: ...
    @overload
    def WriteBytes(self, buffer: System.Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: System.System.Array[System.Byte], start: int, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: Immutable.ImmutableArray, start: int, byteCount: int) -> None: ...
    @overload
    def WriteCompressedInteger(self, value: int) -> None: ...
    @overload
    def WriteCompressedSignedInteger(self, value: int) -> None: ...
    @overload
    def WriteConstant(self, value: object) -> None: ...
    @overload
    def WriteDateTime(self, value: System.DateTime) -> None: ...
    @overload
    def WriteDecimal(self, value: System.Decimal) -> None: ...
    @overload
    def WriteDouble(self, value: float) -> None: ...
    @overload
    def WriteGuid(self, value: System.Guid) -> None: ...
    @overload
    def WriteInt16(self, value: System.Int16) -> None: ...
    @overload
    def WriteInt16BE(self, value: System.Int16) -> None: ...
    @overload
    def WriteInt32(self, value: int) -> None: ...
    @overload
    def WriteInt32BE(self, value: int) -> None: ...
    @overload
    def WriteInt64(self, value: System.Int64) -> None: ...
    @overload
    def WriteReference(self, reference: int, isSmall: bool) -> None: ...
    @overload
    def WriteSByte(self, value: System.SByte) -> None: ...
    @overload
    def WriteSerializedString(self, str_: str) -> None: ...
    @overload
    def WriteSingle(self, value: System.Single) -> None: ...
    @overload
    def WriteUInt16(self, value: System.UInt16) -> None: ...
    @overload
    def WriteUInt16BE(self, value: System.UInt16) -> None: ...
    @overload
    def WriteUInt32(self, value: System.UInt32) -> None: ...
    @overload
    def WriteUInt32BE(self, value: System.UInt32) -> None: ...
    @overload
    def WriteUInt64(self, value: System.UInt64) -> None: ...
    @overload
    def WriteUserString(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: System.System.Array[System.Char]) -> None: ...
    @overload
    def WriteUTF8(self, value: str, allowUnpairedSurrogates: bool) -> None: ...

class BlobBuilder(object):
    """    """
    def __init__(self, capacity: int): ...
    @overload
    def Align(self, alignment: int) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def ContentEquals(self, other: BlobBuilder) -> bool: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetBlobs() -> Blobs: ...
    @overload
    def LinkPrefix(self, prefix: BlobBuilder) -> None: ...
    @overload
    def LinkSuffix(self, suffix: BlobBuilder) -> None: ...
    @overload
    def PadTo(self, position: int) -> None: ...
    @overload
    def ReserveBytes(self, byteCount: int) -> Blob: ...
    @overload
    def ToArray() -> System.System.Array[System.Byte]: ...
    @overload
    def ToArray(self, start: int, byteCount: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ToImmutableArray() -> Immutable.ImmutableArray: ...
    @overload
    def ToImmutableArray(self, start: int, byteCount: int) -> Immutable.ImmutableArray: ...
    @overload
    def TryWriteBytes(self, source: IO.Stream, byteCount: int) -> int: ...
    @overload
    def WriteBoolean(self, value: bool) -> None: ...
    @overload
    def WriteByte(self, value: System.Byte) -> None: ...
    @overload
    def WriteBytes(self, buffer: System.System.Array[System.Byte]) -> None: ...
    @overload
    def WriteBytes(self, buffer: Immutable.ImmutableArray) -> None: ...
    @overload
    def WriteBytes(self, value: System.Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: System.Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: System.System.Array[System.Byte], start: int, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: Immutable.ImmutableArray, start: int, byteCount: int) -> None: ...
    @overload
    def WriteCompressedInteger(self, value: int) -> None: ...
    @overload
    def WriteCompressedSignedInteger(self, value: int) -> None: ...
    @overload
    def WriteConstant(self, value: object) -> None: ...
    @overload
    def WriteContentTo(self, destination: BlobBuilder) -> None: ...
    @overload
    def WriteContentTo() -> (BlobWriter): ...
    @overload
    def WriteContentTo(self, destination: IO.Stream) -> None: ...
    @overload
    def WriteDateTime(self, value: System.DateTime) -> None: ...
    @overload
    def WriteDecimal(self, value: System.Decimal) -> None: ...
    @overload
    def WriteDouble(self, value: float) -> None: ...
    @overload
    def WriteGuid(self, value: System.Guid) -> None: ...
    @overload
    def WriteInt16(self, value: System.Int16) -> None: ...
    @overload
    def WriteInt16BE(self, value: System.Int16) -> None: ...
    @overload
    def WriteInt32(self, value: int) -> None: ...
    @overload
    def WriteInt32BE(self, value: int) -> None: ...
    @overload
    def WriteInt64(self, value: System.Int64) -> None: ...
    @overload
    def WriteReference(self, reference: int, isSmall: bool) -> None: ...
    @overload
    def WriteSByte(self, value: System.SByte) -> None: ...
    @overload
    def WriteSerializedString(self, value: str) -> None: ...
    @overload
    def WriteSingle(self, value: System.Single) -> None: ...
    @overload
    def WriteUInt16(self, value: System.UInt16) -> None: ...
    @overload
    def WriteUInt16BE(self, value: System.UInt16) -> None: ...
    @overload
    def WriteUInt32(self, value: System.UInt32) -> None: ...
    @overload
    def WriteUInt32BE(self, value: System.UInt32) -> None: ...
    @overload
    def WriteUInt64(self, value: System.UInt64) -> None: ...
    @overload
    def WriteUserString(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: System.System.Array[System.Char]) -> None: ...
    @overload
    def WriteUTF16(self, value: str) -> None: ...
    @overload
    def WriteUTF8(self, value: str, allowUnpairedSurrogates: bool) -> None: ...

class Blobs(System.ValueType):
    """    """
    @property
    def Current(self) -> Blob: ...
    @overload
    def GetEnumerator() -> Blobs: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class ReservedBlob(System.ValueType):
    """    ReservedBlob[THandle]
    """
    @overload
    def CreateWriter() -> BlobWriter: ...
    @property
    def Content(self) -> Blob: ...
    @property
    def Handle(self) -> THandle: ...

class CustomAttributeNamedArgument(System.ValueType):
    """    CustomAttributeNamedArgument[TType]
    """
    def __init__(self, name: str, kind: CustomAttributeNamedArgumentKind, type_: TType, value: object): ...
    @property
    def Kind(self) -> CustomAttributeNamedArgumentKind: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> TType: ...
    @property
    def Value(self) -> object: ...

class CustomAttributeTypedArgument(System.ValueType):
    """    CustomAttributeTypedArgument[TType]
    """
    def __init__(self, type_: TType, value: object): ...
    @property
    def Type(self) -> TType: ...
    @property
    def Value(self) -> object: ...

class CustomAttributeValue(System.ValueType):
    """    CustomAttributeValue[TType]
    """
    def __init__(self, fixedArguments: Immutable.ImmutableArray, namedArguments: Immutable.ImmutableArray): ...
    @property
    def FixedArguments(self) -> Immutable.ImmutableArray: ...
    @property
    def NamedArguments(self) -> Immutable.ImmutableArray: ...

class ICustomAttributeTypeProvider:
    """    ICustomAttributeTypeProvider[TType]
    """
    @overload
    def GetSystemType() -> TType: ...
    @overload
    def GetTypeFromSerializedName(self, name: str) -> TType: ...
    @overload
    def GetUnderlyingEnumType(self, type_: TType) -> PrimitiveTypeCode: ...
    @overload
    def IsSystemType(self, type_: TType) -> bool: ...

class ILOpCode(enum.Enum):
    Nop = 0
    Break = 1
    Ldarg_0 = 2
    Ldarg_1 = 3
    Ldarg_2 = 4
    Ldarg_3 = 5
    Ldloc_0 = 6
    Ldloc_1 = 7
    Ldloc_2 = 8
    Ldloc_3 = 9
    Stloc_0 = 10
    Stloc_1 = 11
    Stloc_2 = 12
    Stloc_3 = 13
    Ldarg_s = 14
    Ldarga_s = 15
    Starg_s = 16
    Ldloc_s = 17
    Ldloca_s = 18
    Stloc_s = 19
    Ldnull = 20
    Ldc_i4_m1 = 21
    Ldc_i4_0 = 22
    Ldc_i4_1 = 23
    Ldc_i4_2 = 24
    Ldc_i4_3 = 25
    Ldc_i4_4 = 26
    Ldc_i4_5 = 27
    Ldc_i4_6 = 28
    Ldc_i4_7 = 29
    Ldc_i4_8 = 30
    Ldc_i4_s = 31
    Ldc_i4 = 32
    Ldc_i8 = 33
    Ldc_r4 = 34
    Ldc_r8 = 35
    Dup = 37
    Pop = 38
    Jmp = 39
    Call = 40
    Calli = 41
    Ret = 42
    Br_s = 43
    Brfalse_s = 44
    Brtrue_s = 45
    Beq_s = 46
    Bge_s = 47
    Bgt_s = 48
    Ble_s = 49
    Blt_s = 50
    Bne_un_s = 51
    Bge_un_s = 52
    Bgt_un_s = 53
    Ble_un_s = 54
    Blt_un_s = 55
    Br = 56
    Brfalse = 57
    Brtrue = 58
    Beq = 59
    Bge = 60
    Bgt = 61
    Ble = 62
    Blt = 63
    Bne_un = 64
    Bge_un = 65
    Bgt_un = 66
    Ble_un = 67
    Blt_un = 68
    Switch = 69
    Ldind_i1 = 70
    Ldind_u1 = 71
    Ldind_i2 = 72
    Ldind_u2 = 73
    Ldind_i4 = 74
    Ldind_u4 = 75
    Ldind_i8 = 76
    Ldind_i = 77
    Ldind_r4 = 78
    Ldind_r8 = 79
    Ldind_ref = 80
    Stind_ref = 81
    Stind_i1 = 82
    Stind_i2 = 83
    Stind_i4 = 84
    Stind_i8 = 85
    Stind_r4 = 86
    Stind_r8 = 87
    Add = 88
    Sub = 89
    Mul = 90
    Div = 91
    Div_un = 92
    Rem = 93
    Rem_un = 94
    And = 95
    Or = 96
    Xor = 97
    Shl = 98
    Shr = 99
    Shr_un = 100
    Neg = 101
    Not = 102
    Conv_i1 = 103
    Conv_i2 = 104
    Conv_i4 = 105
    Conv_i8 = 106
    Conv_r4 = 107
    Conv_r8 = 108
    Conv_u4 = 109
    Conv_u8 = 110
    Callvirt = 111
    Cpobj = 112
    Ldobj = 113
    Ldstr = 114
    Newobj = 115
    Castclass = 116
    Isinst = 117
    Conv_r_un = 118
    Unbox = 121
    Throw = 122
    Ldfld = 123
    Ldflda = 124
    Stfld = 125
    Ldsfld = 126
    Ldsflda = 127
    Stsfld = 128
    Stobj = 129
    Conv_ovf_i1_un = 130
    Conv_ovf_i2_un = 131
    Conv_ovf_i4_un = 132
    Conv_ovf_i8_un = 133
    Conv_ovf_u1_un = 134
    Conv_ovf_u2_un = 135
    Conv_ovf_u4_un = 136
    Conv_ovf_u8_un = 137
    Conv_ovf_i_un = 138
    Conv_ovf_u_un = 139
    Box = 140
    Newarr = 141
    Ldlen = 142
    Ldelema = 143
    Ldelem_i1 = 144
    Ldelem_u1 = 145
    Ldelem_i2 = 146
    Ldelem_u2 = 147
    Ldelem_i4 = 148
    Ldelem_u4 = 149
    Ldelem_i8 = 150
    Ldelem_i = 151
    Ldelem_r4 = 152
    Ldelem_r8 = 153
    Ldelem_ref = 154
    Stelem_i = 155
    Stelem_i1 = 156
    Stelem_i2 = 157
    Stelem_i4 = 158
    Stelem_i8 = 159
    Stelem_r4 = 160
    Stelem_r8 = 161
    Stelem_ref = 162
    Ldelem = 163
    Stelem = 164
    Unbox_any = 165
    Conv_ovf_i1 = 179
    Conv_ovf_u1 = 180
    Conv_ovf_i2 = 181
    Conv_ovf_u2 = 182
    Conv_ovf_i4 = 183
    Conv_ovf_u4 = 184
    Conv_ovf_i8 = 185
    Conv_ovf_u8 = 186
    Refanyval = 194
    Ckfinite = 195
    Mkrefany = 198
    Ldtoken = 208
    Conv_u2 = 209
    Conv_u1 = 210
    Conv_i = 211
    Conv_ovf_i = 212
    Conv_ovf_u = 213
    Add_ovf = 214
    Add_ovf_un = 215
    Mul_ovf = 216
    Mul_ovf_un = 217
    Sub_ovf = 218
    Sub_ovf_un = 219
    Endfinally = 220
    Leave = 221
    Leave_s = 222
    Stind_i = 223
    Conv_u = 224
    Arglist = 65024
    Ceq = 65025
    Cgt = 65026
    Cgt_un = 65027
    Clt = 65028
    Clt_un = 65029
    Ldftn = 65030
    Ldvirtftn = 65031
    Ldarg = 65033
    Ldarga = 65034
    Starg = 65035
    Ldloc = 65036
    Ldloca = 65037
    Stloc = 65038
    Localloc = 65039
    Endfilter = 65041
    Unaligned = 65042
    Volatile = 65043
    Tail = 65044
    Initobj = 65045
    Constrained = 65046
    Cpblk = 65047
    Initblk = 65048
    Rethrow = 65050
    Sizeof = 65052
    Refanytype = 65053
    Readonly = 65054

class ILOpCodeExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetBranchOperandSize(opCode: ILOpCode) -> int: ...
    @overload
    @staticmethod
    def GetLongBranch(opCode: ILOpCode) -> ILOpCode: ...
    @overload
    @staticmethod
    def GetShortBranch(opCode: ILOpCode) -> ILOpCode: ...
    @overload
    @staticmethod
    def IsBranch(opCode: ILOpCode) -> bool: ...

class ImageFormatLimitationException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class MetadataStreamOptions(enum.Enum):
    Default = 0
    LeaveOpen = 1
    PrefetchMetadata = 2

class MetadataReaderProvider(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def FromMetadataImage(image: Immutable.ImmutableArray) -> MetadataReaderProvider: ...
    @overload
    @staticmethod
    def FromMetadataImage(start: System.Byte, size: int) -> MetadataReaderProvider: ...
    @overload
    @staticmethod
    def FromMetadataStream(stream: IO.Stream, options: MetadataStreamOptions, size: int) -> MetadataReaderProvider: ...
    @overload
    @staticmethod
    def FromPortablePdbImage(image: Immutable.ImmutableArray) -> MetadataReaderProvider: ...
    @overload
    @staticmethod
    def FromPortablePdbImage(start: System.Byte, size: int) -> MetadataReaderProvider: ...
    @overload
    @staticmethod
    def FromPortablePdbStream(stream: IO.Stream, options: MetadataStreamOptions, size: int) -> MetadataReaderProvider: ...
    @overload
    def GetMetadataReader(self, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder) -> MetadataReader: ...

class BlobContentId(System.ValueType):
    """    """
    @overload
    def __init__(self, id_: Immutable.ImmutableArray): ...
    @overload
    def __init__(self, id_: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, guid: System.Guid, stamp: System.UInt32): ...
    @overload
    def Equals(self, other: BlobContentId) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromHash(hashCode: Immutable.ImmutableArray) -> BlobContentId: ...
    @overload
    @staticmethod
    def FromHash(hashCode: System.System.Array[System.Byte]) -> BlobContentId: ...
    @property
    def Guid(self) -> System.Guid: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Stamp(self) -> System.UInt32: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetTimeBasedProvider() -> System.Func: ...

class PrimitiveSerializationTypeCode(enum.Enum):
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14

class AssemblyDefinition(System.ValueType):
    """    """
    @property
    def Culture(self) -> StringHandle: ...
    @property
    def Flags(self) -> Reflection.AssemblyFlags: ...
    @property
    def HashAlgorithm(self) -> Reflection.AssemblyHashAlgorithm: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def PublicKey(self) -> BlobHandle: ...
    @property
    def Version(self) -> System.Version: ...
    @overload
    def GetAssemblyName() -> Reflection.AssemblyName: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDeclarativeSecurityAttributes() -> DeclarativeSecurityAttributeHandleCollection: ...

class AssemblyReference(System.ValueType):
    """    """
    @property
    def Culture(self) -> StringHandle: ...
    @property
    def Flags(self) -> Reflection.AssemblyFlags: ...
    @property
    def HashValue(self) -> BlobHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def PublicKeyOrToken(self) -> BlobHandle: ...
    @property
    def Version(self) -> System.Version: ...
    @overload
    def GetAssemblyName() -> Reflection.AssemblyName: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class ModuleDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModuleDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class AssemblyDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class InterfaceImplementationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: InterfaceImplementationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class MethodDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MethodDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToDebugInformationHandle() -> MethodDebugInformationHandle: ...

class MethodImplementationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MethodImplementationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class MethodSpecificationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MethodSpecificationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class TypeDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TypeDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ExportedTypeHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ExportedTypeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class TypeReferenceHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TypeReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class TypeSpecificationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: TypeSpecificationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class MemberReferenceHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MemberReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class FieldDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: FieldDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class EventDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: EventDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class PropertyDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: PropertyDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class StandaloneSignatureHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: StandaloneSignatureHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ParameterHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ParameterHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class GenericParameterHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: GenericParameterHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class GenericParameterConstraintHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: GenericParameterConstraintHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ModuleReferenceHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModuleReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class AssemblyReferenceHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class CustomAttributeHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CustomAttributeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class DeclarativeSecurityAttributeHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: DeclarativeSecurityAttributeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ConstantHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ConstantHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ManifestResourceHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ManifestResourceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class AssemblyFileHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyFileHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class UserStringHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: UserStringHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class StringHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: StringHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class NamespaceDefinitionHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: NamespaceDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class BlobHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: BlobHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class GuidHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: GuidHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class AssemblyFile(System.ValueType):
    """    """
    @property
    def ContainsMetadata(self) -> bool: ...
    @property
    def HashValue(self) -> BlobHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class BlobReader(System.ValueType):
    """    """
    def __init__(self, buffer: System.Byte, length: int): ...
    @overload
    def Align(self, alignment: System.Byte) -> None: ...
    @property
    def CurrentPointer(self) -> System.Byte: ...
    @property
    def Length(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def RemainingBytes(self) -> int: ...
    @property
    def StartPointer(self) -> System.Byte: ...
    @overload
    def IndexOf(self, value: System.Byte) -> int: ...
    @overload
    def ReadBlobHandle() -> BlobHandle: ...
    @overload
    def ReadBoolean() -> bool: ...
    @overload
    def ReadByte() -> System.Byte: ...
    @overload
    def ReadBytes(self, byteCount: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ReadBytes(self, byteCount: int, buffer: System.System.Array[System.Byte], bufferOffset: int) -> None: ...
    @overload
    def ReadChar() -> System.Char: ...
    @overload
    def ReadCompressedInteger() -> int: ...
    @overload
    def ReadCompressedSignedInteger() -> int: ...
    @overload
    def ReadConstant(self, typeCode: ConstantTypeCode) -> object: ...
    @overload
    def ReadDateTime() -> System.DateTime: ...
    @overload
    def ReadDecimal() -> System.Decimal: ...
    @overload
    def ReadDouble() -> float: ...
    @overload
    def ReadGuid() -> System.Guid: ...
    @overload
    def ReadInt16() -> System.Int16: ...
    @overload
    def ReadInt32() -> int: ...
    @overload
    def ReadInt64() -> System.Int64: ...
    @overload
    def ReadSByte() -> System.SByte: ...
    @overload
    def ReadSerializationTypeCode() -> SerializationTypeCode: ...
    @overload
    def ReadSerializedString() -> str: ...
    @overload
    def ReadSignatureHeader() -> SignatureHeader: ...
    @overload
    def ReadSignatureTypeCode() -> SignatureTypeCode: ...
    @overload
    def ReadSingle() -> System.Single: ...
    @overload
    def ReadTypeHandle() -> EntityHandle: ...
    @overload
    def ReadUInt16() -> System.UInt16: ...
    @overload
    def ReadUInt32() -> System.UInt32: ...
    @overload
    def ReadUInt64() -> System.UInt64: ...
    @overload
    def ReadUTF16(self, byteCount: int) -> str: ...
    @overload
    def ReadUTF8(self, byteCount: int) -> str: ...
    @overload
    def Reset() -> None: ...
    @Offset.setter
    def Offset(self, value: System.Void): ...
    @overload
    def TryReadCompressedInteger() -> (bool, int): ...
    @overload
    def TryReadCompressedSignedInteger() -> (bool, int): ...

class Constant(System.ValueType):
    """    """
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def TypeCode(self) -> ConstantTypeCode: ...
    @property
    def Value(self) -> BlobHandle: ...

class ConstantTypeCode(enum.Enum):
    Invalid = 0
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    NullReference = 18

class CustomAttribute(System.ValueType):
    """    """
    @overload
    def DecodeValue(self, provider: ICustomAttributeTypeProvider) -> CustomAttributeValue: ...
    @property
    def Constructor(self) -> EntityHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Value(self) -> BlobHandle: ...

class CustomAttributeNamedArgumentKind(enum.Enum):
    Field = 83
    Property = 84

class DeclarativeSecurityAttribute(System.ValueType):
    """    """
    @property
    def Action(self) -> Reflection.DeclarativeSecurityAction: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def PermissionSet(self) -> BlobHandle: ...

class ArrayShape(System.ValueType):
    """    """
    def __init__(self, rank: int, sizes: Immutable.ImmutableArray, lowerBounds: Immutable.ImmutableArray): ...
    @property
    def LowerBounds(self) -> Immutable.ImmutableArray: ...
    @property
    def Rank(self) -> int: ...
    @property
    def Sizes(self) -> Immutable.ImmutableArray: ...

class ISZArrayTypeProvider:
    """    ISZArrayTypeProvider[TType]
    """
    @overload
    def GetSZArrayType(self, elementType: TType) -> TType: ...

class ISignatureTypeProvider:
    """    ISignatureTypeProvider[TType, TGenericContext]
    """
    @overload
    def GetFunctionPointerType(self, signature: MethodSignature) -> TType: ...
    @overload
    def GetGenericMethodParameter(self, genericContext: TGenericContext, index: int) -> TType: ...
    @overload
    def GetGenericTypeParameter(self, genericContext: TGenericContext, index: int) -> TType: ...
    @overload
    def GetModifiedType(self, modifier: TType, unmodifiedType: TType, isRequired: bool) -> TType: ...
    @overload
    def GetPinnedType(self, elementType: TType) -> TType: ...
    @overload
    def GetTypeFromSpecification(self, reader: MetadataReader, genericContext: TGenericContext, handle: TypeSpecificationHandle, rawTypeKind: System.Byte) -> TType: ...

class ISimpleTypeProvider:
    """    ISimpleTypeProvider[TType]
    """
    @overload
    def GetPrimitiveType(self, typeCode: PrimitiveTypeCode) -> TType: ...
    @overload
    def GetTypeFromDefinition(self, reader: MetadataReader, handle: TypeDefinitionHandle, rawTypeKind: System.Byte) -> TType: ...
    @overload
    def GetTypeFromReference(self, reader: MetadataReader, handle: TypeReferenceHandle, rawTypeKind: System.Byte) -> TType: ...

class SignatureTypeKind(enum.Enum):
    Unknown = 0
    ValueType = 17
    Class = 18

class IConstructedTypeProvider:
    """    IConstructedTypeProvider[TType]
    """
    @overload
    def GetArrayType(self, elementType: TType, shape: ArrayShape) -> TType: ...
    @overload
    def GetByReferenceType(self, elementType: TType) -> TType: ...
    @overload
    def GetGenericInstantiation(self, genericType: TType, typeArguments: Immutable.ImmutableArray) -> TType: ...
    @overload
    def GetPointerType(self, elementType: TType) -> TType: ...

class MethodSignature(System.ValueType):
    """    MethodSignature[TType]
    """
    def __init__(self, header: SignatureHeader, returnType: TType, requiredParameterCount: int, genericParameterCount: int, parameterTypes: Immutable.ImmutableArray): ...
    @property
    def GenericParameterCount(self) -> int: ...
    @property
    def Header(self) -> SignatureHeader: ...
    @property
    def ParameterTypes(self) -> Immutable.ImmutableArray: ...
    @property
    def RequiredParameterCount(self) -> int: ...
    @property
    def ReturnType(self) -> TType: ...

class PrimitiveTypeCode(enum.Enum):
    Void = 1
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    TypedReference = 22
    IntPtr = 24
    UIntPtr = 25
    Object = 28

class EventDefinition(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.EventAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Type(self) -> EntityHandle: ...
    @overload
    def GetAccessors() -> EventAccessors: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class ExceptionRegion(System.ValueType):
    """    """
    @property
    def CatchType(self) -> EntityHandle: ...
    @property
    def FilterOffset(self) -> int: ...
    @property
    def HandlerLength(self) -> int: ...
    @property
    def HandlerOffset(self) -> int: ...
    @property
    def Kind(self) -> ExceptionRegionKind: ...
    @property
    def TryLength(self) -> int: ...
    @property
    def TryOffset(self) -> int: ...

class ExceptionRegionKind(enum.Enum):
    Catch = 0
    Filter = 1
    Finally = 2
    Fault = 4

class ExportedType(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.TypeAttributes: ...
    @property
    def Implementation(self) -> EntityHandle: ...
    @property
    def IsForwarder(self) -> bool: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def NamespaceDefinition(self) -> NamespaceDefinitionHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class FieldDefinition(System.ValueType):
    """    """
    @overload
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    @property
    def Attributes(self) -> Reflection.FieldAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDeclaringType() -> TypeDefinitionHandle: ...
    @overload
    def GetDefaultValue() -> ConstantHandle: ...
    @overload
    def GetMarshallingDescriptor() -> BlobHandle: ...
    @overload
    def GetOffset() -> int: ...
    @overload
    def GetRelativeVirtualAddress() -> int: ...

class GenericParameter(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.GenericParameterAttributes: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @overload
    def GetConstraints() -> GenericParameterConstraintHandleCollection: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class GenericParameterConstraint(System.ValueType):
    """    """
    @property
    def Parameter(self) -> GenericParameterHandle: ...
    @property
    def Type(self) -> EntityHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class GenericParameterHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> GenericParameterHandle: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> GenericParameterHandle: ...
    @overload
    def MoveNext() -> bool: ...

class GenericParameterConstraintHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> GenericParameterConstraintHandle: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> GenericParameterConstraintHandle: ...
    @overload
    def MoveNext() -> bool: ...

class CustomAttributeHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> CustomAttributeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class DeclarativeSecurityAttributeHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> DeclarativeSecurityAttributeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class MethodDefinitionHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> MethodDefinitionHandle: ...
    @overload
    def MoveNext() -> bool: ...

class FieldDefinitionHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> FieldDefinitionHandle: ...
    @overload
    def MoveNext() -> bool: ...

class PropertyDefinitionHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> PropertyDefinitionHandle: ...
    @overload
    def MoveNext() -> bool: ...

class EventDefinitionHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> EventDefinitionHandle: ...
    @overload
    def MoveNext() -> bool: ...

class MethodImplementationHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> MethodImplementationHandle: ...
    @overload
    def MoveNext() -> bool: ...

class ParameterHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> ParameterHandle: ...
    @overload
    def MoveNext() -> bool: ...

class InterfaceImplementationHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> InterfaceImplementationHandle: ...
    @overload
    def MoveNext() -> bool: ...

class TypeDefinitionHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> TypeDefinitionHandle: ...
    @overload
    def MoveNext() -> bool: ...

class TypeReferenceHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> TypeReferenceHandle: ...
    @overload
    def MoveNext() -> bool: ...

class ExportedTypeHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> ExportedTypeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class MemberReferenceHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> MemberReferenceHandle: ...
    @overload
    def MoveNext() -> bool: ...

class PropertyAccessors(System.ValueType):
    """    """
    @property
    def Getter(self) -> MethodDefinitionHandle: ...
    @property
    def Others(self) -> Immutable.ImmutableArray: ...
    @property
    def Setter(self) -> MethodDefinitionHandle: ...

class EventAccessors(System.ValueType):
    """    """
    @property
    def Adder(self) -> MethodDefinitionHandle: ...
    @property
    def Others(self) -> Immutable.ImmutableArray: ...
    @property
    def Raiser(self) -> MethodDefinitionHandle: ...
    @property
    def Remover(self) -> MethodDefinitionHandle: ...

class AssemblyReferenceHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> AssemblyReferenceHandle: ...
    @overload
    def MoveNext() -> bool: ...

class ManifestResourceHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> ManifestResourceHandle: ...
    @overload
    def MoveNext() -> bool: ...

class AssemblyFileHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> AssemblyFileHandle: ...
    @overload
    def MoveNext() -> bool: ...

class HandleComparer(object):
    """    """
    @overload
    def Compare(self, x: Handle, y: Handle) -> int: ...
    @overload
    def Compare(self, x: EntityHandle, y: EntityHandle) -> int: ...
    @overload
    def Equals(self, x: Handle, y: Handle) -> bool: ...
    @overload
    def Equals(self, x: EntityHandle, y: EntityHandle) -> bool: ...
    @property
    def Default(self) -> HandleComparer: ...
    @overload
    def GetHashCode(self, obj: Handle) -> int: ...
    @overload
    def GetHashCode(self, obj: EntityHandle) -> int: ...

class HandleKind(enum.Enum):
    ModuleDefinition = 0
    TypeReference = 1
    TypeDefinition = 2
    FieldDefinition = 4
    MethodDefinition = 6
    Parameter = 8
    InterfaceImplementation = 9
    MemberReference = 10
    Constant = 11
    CustomAttribute = 12
    DeclarativeSecurityAttribute = 14
    StandaloneSignature = 17
    EventDefinition = 20
    PropertyDefinition = 23
    MethodImplementation = 25
    ModuleReference = 26
    TypeSpecification = 27
    AssemblyDefinition = 32
    AssemblyReference = 35
    AssemblyFile = 38
    ExportedType = 39
    ManifestResource = 40
    GenericParameter = 42
    MethodSpecification = 43
    GenericParameterConstraint = 44
    Document = 48
    MethodDebugInformation = 49
    LocalScope = 50
    LocalVariable = 51
    LocalConstant = 52
    ImportScope = 53
    CustomDebugInformation = 55
    UserString = 112
    Blob = 113
    Guid = 114
    String = 120
    NamespaceDefinition = 124

class Handle(System.ValueType):
    """    """
    @property
    def ModuleDefinition(self) -> ModuleDefinitionHandle: ...
    @property
    def AssemblyDefinition(self) -> AssemblyDefinitionHandle: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Handle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def Kind(self) -> HandleKind: ...
    @overload
    def GetHashCode() -> int: ...

class InterfaceImplementation(System.ValueType):
    """    """
    @property
    def Interface(self) -> EntityHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class ManifestResource(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.ManifestResourceAttributes: ...
    @property
    def Implementation(self) -> EntityHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Offset(self) -> System.Int64: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class MemberReference(System.ValueType):
    """    """
    @overload
    def DecodeFieldSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    @overload
    def DecodeMethodSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetKind() -> MemberReferenceKind: ...

class StandaloneSignatureKind(enum.Enum):
    Method = 0
    LocalVariables = 1

class MemberReferenceKind(enum.Enum):
    Method = 0
    Field = 1

class MetadataKind(enum.Enum):
    Ecma335 = 0
    WindowsMetadata = 1
    ManagedWindowsMetadata = 2

class MetadataReader(object):
    """    """
    @overload
    def __init__(self, metadata: System.Byte, length: int): ...
    @overload
    def __init__(self, metadata: System.Byte, length: int, options: MetadataReaderOptions): ...
    @overload
    def __init__(self, metadata: System.Byte, length: int, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder): ...
    @property
    def AssemblyFiles(self) -> AssemblyFileHandleCollection: ...
    @property
    def AssemblyReferences(self) -> AssemblyReferenceHandleCollection: ...
    @property
    def CustomAttributes(self) -> CustomAttributeHandleCollection: ...
    @property
    def CustomDebugInformation(self) -> CustomDebugInformationHandleCollection: ...
    @property
    def DebugMetadataHeader(self) -> DebugMetadataHeader: ...
    @property
    def DeclarativeSecurityAttributes(self) -> DeclarativeSecurityAttributeHandleCollection: ...
    @property
    def Documents(self) -> DocumentHandleCollection: ...
    @property
    def EventDefinitions(self) -> EventDefinitionHandleCollection: ...
    @property
    def ExportedTypes(self) -> ExportedTypeHandleCollection: ...
    @property
    def FieldDefinitions(self) -> FieldDefinitionHandleCollection: ...
    @property
    def ImportScopes(self) -> ImportScopeCollection: ...
    @property
    def IsAssembly(self) -> bool: ...
    @property
    def LocalConstants(self) -> LocalConstantHandleCollection: ...
    @property
    def LocalScopes(self) -> LocalScopeHandleCollection: ...
    @property
    def LocalVariables(self) -> LocalVariableHandleCollection: ...
    @property
    def ManifestResources(self) -> ManifestResourceHandleCollection: ...
    @property
    def MemberReferences(self) -> MemberReferenceHandleCollection: ...
    @property
    def MetadataKind(self) -> MetadataKind: ...
    @property
    def MetadataLength(self) -> int: ...
    @property
    def MetadataPointer(self) -> System.Byte: ...
    @property
    def MetadataVersion(self) -> str: ...
    @property
    def MethodDebugInformation(self) -> MethodDebugInformationHandleCollection: ...
    @property
    def MethodDefinitions(self) -> MethodDefinitionHandleCollection: ...
    @property
    def Options(self) -> MetadataReaderOptions: ...
    @property
    def PropertyDefinitions(self) -> PropertyDefinitionHandleCollection: ...
    @property
    def StringComparer(self) -> MetadataStringComparer: ...
    @property
    def TypeDefinitions(self) -> TypeDefinitionHandleCollection: ...
    @property
    def TypeReferences(self) -> TypeReferenceHandleCollection: ...
    @property
    def UTF8Decoder(self) -> MetadataStringDecoder: ...
    @overload
    def GetAssemblyDefinition() -> AssemblyDefinition: ...
    @overload
    def GetAssemblyFile(self, handle: AssemblyFileHandle) -> AssemblyFile: ...
    @overload
    @staticmethod
    def GetAssemblyName(assemblyFile: str) -> Reflection.AssemblyName: ...
    @overload
    def GetAssemblyReference(self, handle: AssemblyReferenceHandle) -> AssemblyReference: ...
    @overload
    def GetBlobBytes(self, handle: BlobHandle) -> System.System.Array[System.Byte]: ...
    @overload
    def GetBlobContent(self, handle: BlobHandle) -> Immutable.ImmutableArray: ...
    @overload
    def GetBlobReader(self, handle: BlobHandle) -> BlobReader: ...
    @overload
    def GetBlobReader(self, handle: StringHandle) -> BlobReader: ...
    @overload
    def GetConstant(self, handle: ConstantHandle) -> Constant: ...
    @overload
    def GetCustomAttribute(self, handle: CustomAttributeHandle) -> CustomAttribute: ...
    @overload
    def GetCustomAttributes(self, handle: EntityHandle) -> CustomAttributeHandleCollection: ...
    @overload
    def GetCustomDebugInformation(self, handle: EntityHandle) -> CustomDebugInformationHandleCollection: ...
    @overload
    def GetCustomDebugInformation(self, handle: CustomDebugInformationHandle) -> CustomDebugInformation: ...
    @overload
    def GetDeclarativeSecurityAttribute(self, handle: DeclarativeSecurityAttributeHandle) -> DeclarativeSecurityAttribute: ...
    @overload
    def GetDocument(self, handle: DocumentHandle) -> Document: ...
    @overload
    def GetEventDefinition(self, handle: EventDefinitionHandle) -> EventDefinition: ...
    @overload
    def GetExportedType(self, handle: ExportedTypeHandle) -> ExportedType: ...
    @overload
    def GetFieldDefinition(self, handle: FieldDefinitionHandle) -> FieldDefinition: ...
    @overload
    def GetGenericParameter(self, handle: GenericParameterHandle) -> GenericParameter: ...
    @overload
    def GetGenericParameterConstraint(self, handle: GenericParameterConstraintHandle) -> GenericParameterConstraint: ...
    @overload
    def GetGuid(self, handle: GuidHandle) -> System.Guid: ...
    @overload
    def GetImportScope(self, handle: ImportScopeHandle) -> ImportScope: ...
    @overload
    def GetInterfaceImplementation(self, handle: InterfaceImplementationHandle) -> InterfaceImplementation: ...
    @overload
    def GetLocalConstant(self, handle: LocalConstantHandle) -> LocalConstant: ...
    @overload
    def GetLocalScope(self, handle: LocalScopeHandle) -> LocalScope: ...
    @overload
    def GetLocalScopes(self, handle: MethodDebugInformationHandle) -> LocalScopeHandleCollection: ...
    @overload
    def GetLocalScopes(self, handle: MethodDefinitionHandle) -> LocalScopeHandleCollection: ...
    @overload
    def GetLocalVariable(self, handle: LocalVariableHandle) -> LocalVariable: ...
    @overload
    def GetManifestResource(self, handle: ManifestResourceHandle) -> ManifestResource: ...
    @overload
    def GetMemberReference(self, handle: MemberReferenceHandle) -> MemberReference: ...
    @overload
    def GetMethodDebugInformation(self, handle: MethodDebugInformationHandle) -> MethodDebugInformation: ...
    @overload
    def GetMethodDebugInformation(self, handle: MethodDefinitionHandle) -> MethodDebugInformation: ...
    @overload
    def GetMethodDefinition(self, handle: MethodDefinitionHandle) -> MethodDefinition: ...
    @overload
    def GetMethodImplementation(self, handle: MethodImplementationHandle) -> MethodImplementation: ...
    @overload
    def GetMethodSpecification(self, handle: MethodSpecificationHandle) -> MethodSpecification: ...
    @overload
    def GetModuleDefinition() -> ModuleDefinition: ...
    @overload
    def GetModuleReference(self, handle: ModuleReferenceHandle) -> ModuleReference: ...
    @overload
    def GetNamespaceDefinition(self, handle: NamespaceDefinitionHandle) -> NamespaceDefinition: ...
    @overload
    def GetNamespaceDefinitionRoot() -> NamespaceDefinition: ...
    @overload
    def GetParameter(self, handle: ParameterHandle) -> Parameter: ...
    @overload
    def GetPropertyDefinition(self, handle: PropertyDefinitionHandle) -> PropertyDefinition: ...
    @overload
    def GetStandaloneSignature(self, handle: StandaloneSignatureHandle) -> StandaloneSignature: ...
    @overload
    def GetString(self, handle: StringHandle) -> str: ...
    @overload
    def GetString(self, handle: NamespaceDefinitionHandle) -> str: ...
    @overload
    def GetString(self, handle: DocumentNameBlobHandle) -> str: ...
    @overload
    def GetTypeDefinition(self, handle: TypeDefinitionHandle) -> TypeDefinition: ...
    @overload
    def GetTypeReference(self, handle: TypeReferenceHandle) -> TypeReference: ...
    @overload
    def GetTypeSpecification(self, handle: TypeSpecificationHandle) -> TypeSpecification: ...
    @overload
    def GetUserString(self, handle: UserStringHandle) -> str: ...

class MetadataReaderOptions(enum.Enum):
    None_ = 0
    Default = 1
    ApplyWindowsRuntimeProjections = 1

class MetadataStringComparer(System.ValueType):
    """    """
    @overload
    def Equals(self, handle: StringHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: NamespaceDefinitionHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: DocumentNameBlobHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: StringHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def Equals(self, handle: NamespaceDefinitionHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def Equals(self, handle: DocumentNameBlobHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def StartsWith(self, handle: StringHandle, value: str) -> bool: ...
    @overload
    def StartsWith(self, handle: StringHandle, value: str, ignoreCase: bool) -> bool: ...

class MetadataStringDecoder(object):
    """    """
    def __init__(self, encoding: Text.Encoding): ...
    @property
    def DefaultUTF8(self) -> MetadataStringDecoder: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @overload
    def GetString(self, bytes_: System.Byte, byteCount: int) -> str: ...

class MethodBodyBlock(object):
    """    """
    @overload
    @staticmethod
    def Create(reader: BlobReader) -> MethodBodyBlock: ...
    @property
    def ExceptionRegions(self) -> Immutable.ImmutableArray: ...
    @property
    def LocalSignature(self) -> StandaloneSignatureHandle: ...
    @property
    def LocalVariablesInitialized(self) -> bool: ...
    @property
    def MaxStack(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @overload
    def GetILBytes() -> System.System.Array[System.Byte]: ...
    @overload
    def GetILContent() -> Immutable.ImmutableArray: ...
    @overload
    def GetILReader() -> BlobReader: ...

class MethodDefinition(System.ValueType):
    """    """
    @overload
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def ImplAttributes(self) -> Reflection.MethodImplAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def RelativeVirtualAddress(self) -> int: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDeclarativeSecurityAttributes() -> DeclarativeSecurityAttributeHandleCollection: ...
    @overload
    def GetDeclaringType() -> TypeDefinitionHandle: ...
    @overload
    def GetGenericParameters() -> GenericParameterHandleCollection: ...
    @overload
    def GetImport() -> MethodImport: ...
    @overload
    def GetParameters() -> ParameterHandleCollection: ...

class MethodImplementation(System.ValueType):
    """    """
    @property
    def MethodBody(self) -> EntityHandle: ...
    @property
    def MethodDeclaration(self) -> EntityHandle: ...
    @property
    def Type(self) -> TypeDefinitionHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class MethodImport(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.MethodImportAttributes: ...
    @property
    def Module(self) -> ModuleReferenceHandle: ...
    @property
    def Name(self) -> StringHandle: ...

class MethodSpecification(System.ValueType):
    """    """
    @overload
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> Immutable.ImmutableArray: ...
    @property
    def Method(self) -> EntityHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class ModuleDefinition(System.ValueType):
    """    """
    @property
    def BaseGenerationId(self) -> GuidHandle: ...
    @property
    def Generation(self) -> int: ...
    @property
    def GenerationId(self) -> GuidHandle: ...
    @property
    def Mvid(self) -> GuidHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class ModuleReference(System.ValueType):
    """    """
    @property
    def Name(self) -> StringHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

class NamespaceDefinition(System.ValueType):
    """    """
    @property
    def ExportedTypes(self) -> Immutable.ImmutableArray: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def NamespaceDefinitions(self) -> Immutable.ImmutableArray: ...
    @property
    def Parent(self) -> NamespaceDefinitionHandle: ...
    @property
    def TypeDefinitions(self) -> Immutable.ImmutableArray: ...

class Parameter(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.ParameterAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def SequenceNumber(self) -> int: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDefaultValue() -> ConstantHandle: ...
    @overload
    def GetMarshallingDescriptor() -> BlobHandle: ...

class CustomDebugInformation(System.ValueType):
    """    """
    @property
    def Kind(self) -> GuidHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Value(self) -> BlobHandle: ...

class DebugMetadataHeader(object):
    """    """
    @property
    def EntryPoint(self) -> MethodDefinitionHandle: ...
    @property
    def Id(self) -> Immutable.ImmutableArray: ...
    @property
    def IdStartOffset(self) -> int: ...

class Document(System.ValueType):
    """    """
    @property
    def Hash(self) -> BlobHandle: ...
    @property
    def HashAlgorithm(self) -> GuidHandle: ...
    @property
    def Language(self) -> GuidHandle: ...
    @property
    def Name(self) -> DocumentNameBlobHandle: ...

class DocumentNameBlobHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: DocumentNameBlobHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class DocumentHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> DocumentHandle: ...
    @overload
    def MoveNext() -> bool: ...

class MethodDebugInformationHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> MethodDebugInformationHandle: ...
    @overload
    def MoveNext() -> bool: ...

class LocalScopeHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> LocalScopeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class ChildrenEnumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> LocalScopeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class LocalVariableHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> LocalVariableHandle: ...
    @overload
    def MoveNext() -> bool: ...

class LocalConstantHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> LocalConstantHandle: ...
    @overload
    def MoveNext() -> bool: ...

class ImportScopeCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> ImportScopeHandle: ...
    @overload
    def MoveNext() -> bool: ...

class CustomDebugInformationHandleCollection(System.ValueType):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> CustomDebugInformationHandle: ...
    @overload
    def MoveNext() -> bool: ...

class DocumentHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: DocumentHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class MethodDebugInformationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: MethodDebugInformationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToDefinitionHandle() -> MethodDefinitionHandle: ...

class LocalScopeHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LocalScopeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class LocalVariableHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LocalVariableHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class LocalConstantHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: LocalConstantHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ImportScopeHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ImportScopeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class CustomDebugInformationHandle(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CustomDebugInformationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class ImportDefinition(System.ValueType):
    """    """
    @property
    def Alias(self) -> BlobHandle: ...
    @property
    def Kind(self) -> ImportDefinitionKind: ...
    @property
    def TargetAssembly(self) -> AssemblyReferenceHandle: ...
    @property
    def TargetNamespace(self) -> BlobHandle: ...
    @property
    def TargetType(self) -> EntityHandle: ...

class ImportDefinitionKind(enum.Enum):
    ImportNamespace = 1
    ImportAssemblyNamespace = 2
    ImportType = 3
    ImportXmlNamespace = 4
    ImportAssemblyReferenceAlias = 5
    AliasAssemblyReference = 6
    AliasNamespace = 7
    AliasAssemblyNamespace = 8
    AliasType = 9

class ImportDefinitionCollection(System.ValueType):
    """    """
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> ImportDefinition: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class LocalConstant(System.ValueType):
    """    """
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...

class ImportScope(System.ValueType):
    """    """
    @property
    def ImportsBlob(self) -> BlobHandle: ...
    @property
    def Parent(self) -> ImportScopeHandle: ...
    @overload
    def GetImports() -> ImportDefinitionCollection: ...

class LocalScope(System.ValueType):
    """    """
    @property
    def EndOffset(self) -> int: ...
    @property
    def ImportScope(self) -> ImportScopeHandle: ...
    @property
    def Length(self) -> int: ...
    @property
    def Method(self) -> MethodDefinitionHandle: ...
    @property
    def StartOffset(self) -> int: ...
    @overload
    def GetChildren() -> ChildrenEnumerator: ...
    @overload
    def GetLocalConstants() -> LocalConstantHandleCollection: ...
    @overload
    def GetLocalVariables() -> LocalVariableHandleCollection: ...

class LocalVariable(System.ValueType):
    """    """
    @property
    def Attributes(self) -> LocalVariableAttributes: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> StringHandle: ...

class LocalVariableAttributes(enum.Enum):
    None_ = 0
    DebuggerHidden = 1

class MethodDebugInformation(System.ValueType):
    """    """
    @property
    def Document(self) -> DocumentHandle: ...
    @property
    def LocalSignature(self) -> StandaloneSignatureHandle: ...
    @property
    def SequencePointsBlob(self) -> BlobHandle: ...
    @overload
    def GetSequencePoints() -> SequencePointCollection: ...
    @overload
    def GetStateMachineKickoffMethod() -> MethodDefinitionHandle: ...

class SequencePoint(System.ValueType):
    """    """
    @property
    def HiddenLine(self) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SequencePoint) -> bool: ...
    @property
    def Document(self) -> DocumentHandle: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def Offset(self) -> int: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    @overload
    def GetHashCode() -> int: ...

class SequencePointCollection(System.ValueType):
    """    """
    @overload
    def GetEnumerator() -> Enumerator: ...

class Enumerator(System.ValueType):
    """    """
    @property
    def Current(self) -> SequencePoint: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class PEReaderExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetMetadataReader(peReader: PortableExecutable.PEReader) -> MetadataReader: ...
    @overload
    @staticmethod
    def GetMetadataReader(peReader: PortableExecutable.PEReader, options: MetadataReaderOptions) -> MetadataReader: ...
    @overload
    @staticmethod
    def GetMetadataReader(peReader: PortableExecutable.PEReader, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder) -> MetadataReader: ...
    @overload
    @staticmethod
    def GetMethodBody(peReader: PortableExecutable.PEReader, relativeVirtualAddress: int) -> MethodBodyBlock: ...

class PropertyDefinition(System.ValueType):
    """    """
    @overload
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Attributes(self) -> Reflection.PropertyAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetAccessors() -> PropertyAccessors: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDefaultValue() -> ConstantHandle: ...

class SerializationTypeCode(enum.Enum):
    Invalid = 0
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    SZArray = 29
    Type = 80
    TaggedObject = 81
    Enum = 85

class SignatureAttributes(enum.Enum):
    None_ = 0
    Generic = 16
    Instance = 32
    ExplicitThis = 64

class SignatureCallingConvention(enum.Enum):
    Default = 0
    CDecl = 1
    StdCall = 2
    ThisCall = 3
    FastCall = 4
    VarArgs = 5
    Unmanaged = 9

class SignatureHeader(System.ValueType):
    """    """
    @overload
    def __init__(self, rawValue: System.Byte): ...
    @overload
    def __init__(self, kind: SignatureKind, convention: SignatureCallingConvention, attributes: SignatureAttributes): ...
    @property
    def CallingConventionOrKindMask(self) -> System.Byte: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SignatureHeader) -> bool: ...
    @property
    def Attributes(self) -> SignatureAttributes: ...
    @property
    def CallingConvention(self) -> SignatureCallingConvention: ...
    @property
    def HasExplicitThis(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def IsInstance(self) -> bool: ...
    @property
    def Kind(self) -> SignatureKind: ...
    @property
    def RawValue(self) -> System.Byte: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class SignatureKind(enum.Enum):
    Method = 0
    Field = 6
    LocalVariables = 7
    Property = 8
    MethodSpecification = 10

class SignatureTypeCode(enum.Enum):
    Invalid = 0
    Void = 1
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    Pointer = 15
    ByReference = 16
    GenericTypeParameter = 19
    Array = 20
    GenericTypeInstance = 21
    TypedReference = 22
    IntPtr = 24
    UIntPtr = 25
    FunctionPointer = 27
    Object = 28
    SZArray = 29
    GenericMethodParameter = 30
    RequiredModifier = 31
    OptionalModifier = 32
    TypeHandle = 64
    Sentinel = 65
    Pinned = 69

class StandaloneSignature(System.ValueType):
    """    """
    @overload
    def DecodeLocalSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> Immutable.ImmutableArray: ...
    @overload
    def DecodeMethodSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetKind() -> StandaloneSignatureKind: ...

class TypeDefinition(System.ValueType):
    """    """
    @property
    def Attributes(self) -> Reflection.TypeAttributes: ...
    @property
    def BaseType(self) -> EntityHandle: ...
    @property
    def IsNested(self) -> bool: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def NamespaceDefinition(self) -> NamespaceDefinitionHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...
    @overload
    def GetDeclarativeSecurityAttributes() -> DeclarativeSecurityAttributeHandleCollection: ...
    @overload
    def GetDeclaringType() -> TypeDefinitionHandle: ...
    @overload
    def GetEvents() -> EventDefinitionHandleCollection: ...
    @overload
    def GetFields() -> FieldDefinitionHandleCollection: ...
    @overload
    def GetGenericParameters() -> GenericParameterHandleCollection: ...
    @overload
    def GetInterfaceImplementations() -> InterfaceImplementationHandleCollection: ...
    @overload
    def GetLayout() -> TypeLayout: ...
    @overload
    def GetMethodImplementations() -> MethodImplementationHandleCollection: ...
    @overload
    def GetMethods() -> MethodDefinitionHandleCollection: ...
    @overload
    def GetNestedTypes() -> Immutable.ImmutableArray: ...
    @overload
    def GetProperties() -> PropertyDefinitionHandleCollection: ...

class TypeLayout(System.ValueType):
    """    """
    def __init__(self, size: int, packingSize: int): ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def PackingSize(self) -> int: ...
    @property
    def Size(self) -> int: ...

class TypeReference(System.ValueType):
    """    """
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def ResolutionScope(self) -> EntityHandle: ...

class TypeSpecification(System.ValueType):
    """    """
    @overload
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    @property
    def Signature(self) -> BlobHandle: ...
    @overload
    def GetCustomAttributes() -> CustomAttributeHandleCollection: ...

# endregion
