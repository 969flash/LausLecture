"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["DispatchProxy"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["PortableExecutable", "Metadata", "MethodSemanticsAttributes", "DeclarativeSecurityAction", "MethodImportAttributes", "ManifestResourceAttributes", "AssemblyHashAlgorithm", "AssemblyFlags"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
# endregion

# region: Exports
__all__ = ["ICustomTypeProvider"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["Metadata", "Emit", "Assembly", "AssemblyName", "ConstructorInfo", "FieldInfo", "MemberInfo", "MethodBase", "CustomAttributeTypedArgument", "AmbiguousMatchException", "AssemblyAlgorithmIdAttribute", "AssemblyCompanyAttribute", "AssemblyConfigurationAttribute", "AssemblyContentType", "AssemblyCopyrightAttribute", "AssemblyCultureAttribute", "AssemblyDefaultAliasAttribute", "AssemblyDelaySignAttribute", "AssemblyDescriptionAttribute", "AssemblyFileVersionAttribute", "AssemblyFlagsAttribute", "AssemblyInformationalVersionAttribute", "AssemblyKeyFileAttribute", "AssemblyKeyNameAttribute", "AssemblyMetadataAttribute", "AssemblyNameFlags", "AssemblyNameProxy", "AssemblyProductAttribute", "AssemblySignatureKeyAttribute", "AssemblyTitleAttribute", "AssemblyTrademarkAttribute", "AssemblyVersionAttribute", "Binder", "BindingFlags", "CallingConventions", "CustomAttributeData", "CustomAttributeExtensions", "CustomAttributeFormatException", "CustomAttributeNamedArgument", "DefaultMemberAttribute", "EventAttributes", "EventInfo", "ExceptionHandlingClause", "ExceptionHandlingClauseOptions", "FieldAttributes", "GenericParameterAttributes", "ICustomAttributeProvider", "ImageFileMachine", "InterfaceMapping", "IntrospectionExtensions", "InvalidFilterCriteriaException", "IReflect", "IReflectableType", "LocalVariableInfo", "ManifestResourceInfo", "MemberFilter", "MemberTypes", "MethodAttributes", "MethodBody", "MethodImplAttributes", "MethodInfo", "Missing", "Module", "ModuleResolveEventHandler", "NullabilityInfo", "NullabilityState", "NullabilityInfoContext", "ObfuscateAssemblyAttribute", "ObfuscationAttribute", "ParameterAttributes", "ParameterInfo", "ParameterModifier", "Pointer", "PortableExecutableKinds", "ProcessorArchitecture", "PropertyAttributes", "PropertyInfo", "ReflectionContext", "ReflectionTypeLoadException", "ResourceAttributes", "ResourceLocation", "RuntimeReflectionExtensions", "TargetException", "TargetInvocationException", "TargetParameterCountException", "TypeAttributes", "TypeDelegator", "TypeFilter", "TypeInfo"]
# endregion

# region: Imports
from System import Globalization
from System import IO
from System import Security
from System.Collections import Generic
from System.Configuration import Assemblies
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Assembly(object):
    """    """
    @overload
    def CreateInstance(self, typeName: str) -> object: ...
    @overload
    def CreateInstance(self, typeName: str, ignoreCase: bool) -> object: ...
    @overload
    def CreateInstance(self, typeName: str, ignoreCase: bool, bindingAttr: BindingFlags, binder: Binder, args: System.System.Array[object], culture: Globalization.CultureInfo, activationAttributes: System.System.Array[object]) -> object: ...
    @overload
    @staticmethod
    def CreateQualifiedName(assemblyName: str, typeName: str) -> str: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def CodeBase(self) -> str: ...
    @property
    def CustomAttributes(self) -> Generic.IEnumerable: ...
    @property
    def DefinedTypes(self) -> Generic.IEnumerable: ...
    @property
    def EntryPoint(self) -> MethodInfo: ...
    @property
    def EscapedCodeBase(self) -> str: ...
    @property
    def ExportedTypes(self) -> Generic.IEnumerable: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GlobalAssemblyCache(self) -> bool: ...
    @property
    def HostContext(self) -> System.Int64: ...
    @property
    def ImageRuntimeVersion(self) -> str: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def IsFullyTrusted(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def ManifestModule(self) -> Module: ...
    @property
    def Modules(self) -> Generic.IEnumerable: ...
    @property
    def ReflectionOnly(self) -> bool: ...
    @property
    def SecurityRuleSet(self) -> Security.SecurityRuleSet: ...
    @overload
    @staticmethod
    def GetAssembly(type_: System.Type) -> Assembly: ...
    @overload
    @staticmethod
    def GetCallingAssembly() -> Assembly: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    @staticmethod
    def GetEntryAssembly() -> Assembly: ...
    @overload
    @staticmethod
    def GetExecutingAssembly() -> Assembly: ...
    @overload
    def GetExportedTypes() -> System.System.Array[System.Type]: ...
    @overload
    def GetFile(self, name: str) -> IO.FileStream: ...
    @overload
    def GetFiles() -> IO.System.Array[IO.FileStream]: ...
    @overload
    def GetFiles(self, getResourceModules: bool) -> IO.System.Array[IO.FileStream]: ...
    @overload
    def GetForwardedTypes() -> System.System.Array[System.Type]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLoadedModules() -> System.Array[Module]: ...
    @overload
    def GetLoadedModules(self, getResourceModules: bool) -> System.Array[Module]: ...
    @overload
    def GetManifestResourceInfo(self, resourceName: str) -> ManifestResourceInfo: ...
    @overload
    def GetManifestResourceNames() -> System.System.Array[str]: ...
    @overload
    def GetManifestResourceStream(self, name: str) -> IO.Stream: ...
    @overload
    def GetManifestResourceStream(self, type_: System.Type, name: str) -> IO.Stream: ...
    @overload
    def GetModule(self, name: str) -> Module: ...
    @overload
    def GetModules() -> System.Array[Module]: ...
    @overload
    def GetModules(self, getResourceModules: bool) -> System.Array[Module]: ...
    @overload
    def GetName() -> AssemblyName: ...
    @overload
    def GetName(self, copiedName: bool) -> AssemblyName: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetReferencedAssemblies() -> System.Array[AssemblyName]: ...
    @overload
    def GetSatelliteAssembly(self, culture: Globalization.CultureInfo) -> Assembly: ...
    @overload
    def GetSatelliteAssembly(self, culture: Globalization.CultureInfo, version: System.Version) -> Assembly: ...
    @overload
    def GetType(self, name: str) -> System.Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool) -> System.Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetTypes() -> System.System.Array[System.Type]: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    @staticmethod
    def Load(assemblyString: str) -> Assembly: ...
    @overload
    @staticmethod
    def Load(rawAssembly: System.System.Array[System.Byte]) -> Assembly: ...
    @overload
    @staticmethod
    def Load(assemblyRef: AssemblyName) -> Assembly: ...
    @overload
    @staticmethod
    def Load(rawAssembly: System.System.Array[System.Byte], rawSymbolStore: System.System.Array[System.Byte]) -> Assembly: ...
    @overload
    @staticmethod
    def LoadFile(path: str) -> Assembly: ...
    @overload
    @staticmethod
    def LoadFrom(assemblyFile: str) -> Assembly: ...
    @overload
    @staticmethod
    def LoadFrom(assemblyFile: str, hashValue: System.System.Array[System.Byte], hashAlgorithm: Assemblies.AssemblyHashAlgorithm) -> Assembly: ...
    @overload
    def LoadModule(self, moduleName: str, rawModule: System.System.Array[System.Byte]) -> Module: ...
    @overload
    def LoadModule(self, moduleName: str, rawModule: System.System.Array[System.Byte], rawSymbolStore: System.System.Array[System.Byte]) -> Module: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def UnsafeLoadFrom(assemblyFile: str) -> Assembly: ...
    @property
    def ModuleResolve(self): ...

class AssemblyName(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assemblyName: str): ...
    @overload
    def Clone() -> object: ...
    @property
    def CodeBase(self) -> str: ...
    @property
    def ContentType(self) -> AssemblyContentType: ...
    @property
    def CultureInfo(self) -> Globalization.CultureInfo: ...
    @property
    def CultureName(self) -> str: ...
    @property
    def EscapedCodeBase(self) -> str: ...
    @property
    def Flags(self) -> AssemblyNameFlags: ...
    @property
    def FullName(self) -> str: ...
    @property
    def HashAlgorithm(self) -> Assemblies.AssemblyHashAlgorithm: ...
    @property
    def KeyPair(self) -> StrongNameKeyPair: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProcessorArchitecture(self) -> ProcessorArchitecture: ...
    @property
    def Version(self) -> System.Version: ...
    @property
    def VersionCompatibility(self) -> Assemblies.AssemblyVersionCompatibility: ...
    @overload
    @staticmethod
    def GetAssemblyName(assemblyFile: str) -> AssemblyName: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetPublicKey() -> System.System.Array[System.Byte]: ...
    @overload
    def GetPublicKeyToken() -> System.System.Array[System.Byte]: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    @staticmethod
    def ReferenceMatchesDefinition(reference: AssemblyName, definition: AssemblyName) -> bool: ...
    @CodeBase.setter
    def CodeBase(self, value: System.Void): ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @CultureInfo.setter
    def CultureInfo(self, value: System.Void): ...
    @CultureName.setter
    def CultureName(self, value: System.Void): ...
    @Flags.setter
    def Flags(self, value: System.Void): ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: System.Void): ...
    @KeyPair.setter
    def KeyPair(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @ProcessorArchitecture.setter
    def ProcessorArchitecture(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @VersionCompatibility.setter
    def VersionCompatibility(self, value: System.Void): ...
    @overload
    def SetPublicKey(self, publicKey: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetPublicKeyToken(self, publicKeyToken: System.System.Array[System.Byte]) -> None: ...
    @overload
    def ToString() -> str: ...

class ConstructorInfo(MethodBase):
    """    """
    @property
    def ConstructorName(self) -> str: ...
    @property
    def TypeConstructorName(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def Invoke(self, parameters: System.System.Array[object]) -> object: ...
    @overload
    def Invoke(self, invokeAttr: BindingFlags, binder: Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...

class FieldInfo(MemberInfo):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def FieldHandle(self) -> System.RuntimeFieldHandle: ...
    @property
    def FieldType(self) -> System.Type: ...
    @property
    def IsAssembly(self) -> bool: ...
    @property
    def IsFamily(self) -> bool: ...
    @property
    def IsFamilyAndAssembly(self) -> bool: ...
    @property
    def IsFamilyOrAssembly(self) -> bool: ...
    @property
    def IsInitOnly(self) -> bool: ...
    @property
    def IsLiteral(self) -> bool: ...
    @property
    def IsNotSerialized(self) -> bool: ...
    @property
    def IsPinvokeImpl(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @overload
    @staticmethod
    def GetFieldFromHandle(handle: System.RuntimeFieldHandle) -> FieldInfo: ...
    @overload
    @staticmethod
    def GetFieldFromHandle(handle: System.RuntimeFieldHandle, declaringType: System.RuntimeTypeHandle) -> FieldInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetOptionalCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def GetRawConstantValue() -> object: ...
    @overload
    def GetRequiredCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def GetValue(self, obj: object) -> object: ...
    @overload
    def GetValueDirect(self, obj: System.TypedReference) -> object: ...
    @overload
    def SetValue(self, obj: object, value: object) -> None: ...
    @overload
    def SetValue(self, obj: object, value: object, invokeAttr: BindingFlags, binder: Binder, culture: Globalization.CultureInfo) -> None: ...
    @overload
    def SetValueDirect(self, obj: System.TypedReference, value: object) -> None: ...

class MemberInfo(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CustomAttributes(self) -> Generic.IEnumerable: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def HasSameMetadataDefinitionAs(self, other: MemberInfo) -> bool: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...

class MethodBase(MemberInfo):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> MethodAttributes: ...
    @property
    def CallingConvention(self) -> CallingConventions: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsAssembly(self) -> bool: ...
    @property
    def IsConstructedGenericMethod(self) -> bool: ...
    @property
    def IsConstructor(self) -> bool: ...
    @property
    def IsFamily(self) -> bool: ...
    @property
    def IsFamilyAndAssembly(self) -> bool: ...
    @property
    def IsFamilyOrAssembly(self) -> bool: ...
    @property
    def IsFinal(self) -> bool: ...
    @property
    def IsGenericMethod(self) -> bool: ...
    @property
    def IsGenericMethodDefinition(self) -> bool: ...
    @property
    def IsHideBySig(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def MethodHandle(self) -> System.RuntimeMethodHandle: ...
    @property
    def MethodImplementationFlags(self) -> MethodImplAttributes: ...
    @overload
    @staticmethod
    def GetCurrentMethod() -> MethodBase: ...
    @overload
    def GetGenericArguments() -> System.System.Array[System.Type]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMethodBody() -> MethodBody: ...
    @overload
    @staticmethod
    def GetMethodFromHandle(handle: System.RuntimeMethodHandle) -> MethodBase: ...
    @overload
    @staticmethod
    def GetMethodFromHandle(handle: System.RuntimeMethodHandle, declaringType: System.RuntimeTypeHandle) -> MethodBase: ...
    @overload
    def GetMethodImplementationFlags() -> MethodImplAttributes: ...
    @overload
    def GetParameters() -> System.Array[ParameterInfo]: ...
    @overload
    def Invoke(self, obj: object, parameters: System.System.Array[object]) -> object: ...
    @overload
    def Invoke(self, obj: object, invokeAttr: BindingFlags, binder: Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...

class CustomAttributeTypedArgument(System.ValueType):
    """    """
    @overload
    def __init__(self, value: object): ...
    @overload
    def __init__(self, argumentType: System.Type, value: object): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CustomAttributeTypedArgument) -> bool: ...
    @property
    def ArgumentType(self) -> System.Type: ...
    @property
    def Value(self) -> object: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class AmbiguousMatchException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class AssemblyAlgorithmIdAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, algorithmId: Assemblies.AssemblyHashAlgorithm): ...
    @overload
    def __init__(self, algorithmId: System.UInt32): ...
    @property
    def AlgorithmId(self) -> System.UInt32: ...

class AssemblyCompanyAttribute(System.Attribute):
    """    """
    def __init__(self, company: str): ...
    @property
    def Company(self) -> str: ...

class AssemblyConfigurationAttribute(System.Attribute):
    """    """
    def __init__(self, configuration: str): ...
    @property
    def Configuration(self) -> str: ...

class AssemblyContentType(enum.Enum):
    Default = 0
    WindowsRuntime = 1

class AssemblyCopyrightAttribute(System.Attribute):
    """    """
    def __init__(self, copyright: str): ...
    @property
    def Copyright(self) -> str: ...

class AssemblyCultureAttribute(System.Attribute):
    """    """
    def __init__(self, culture: str): ...
    @property
    def Culture(self) -> str: ...

class AssemblyDefaultAliasAttribute(System.Attribute):
    """    """
    def __init__(self, defaultAlias: str): ...
    @property
    def DefaultAlias(self) -> str: ...

class AssemblyDelaySignAttribute(System.Attribute):
    """    """
    def __init__(self, delaySign: bool): ...
    @property
    def DelaySign(self) -> bool: ...

class AssemblyDescriptionAttribute(System.Attribute):
    """    """
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...

class AssemblyFileVersionAttribute(System.Attribute):
    """    """
    def __init__(self, version: str): ...
    @property
    def Version(self) -> str: ...

class AssemblyFlagsAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, flags: System.UInt32): ...
    @overload
    def __init__(self, assemblyFlags: int): ...
    @overload
    def __init__(self, assemblyFlags: AssemblyNameFlags): ...
    @property
    def AssemblyFlags(self) -> int: ...
    @property
    def Flags(self) -> System.UInt32: ...

class AssemblyInformationalVersionAttribute(System.Attribute):
    """    """
    def __init__(self, informationalVersion: str): ...
    @property
    def InformationalVersion(self) -> str: ...

class AssemblyKeyFileAttribute(System.Attribute):
    """    """
    def __init__(self, keyFile: str): ...
    @property
    def KeyFile(self) -> str: ...

class AssemblyKeyNameAttribute(System.Attribute):
    """    """
    def __init__(self, keyName: str): ...
    @property
    def KeyName(self) -> str: ...

class AssemblyMetadataAttribute(System.Attribute):
    """    """
    def __init__(self, key: str, value: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def Value(self) -> str: ...

class AssemblyNameFlags(enum.Enum):
    None_ = 0
    PublicKey = 1
    Retargetable = 256
    EnableJITcompileOptimizer = 16384
    EnableJITcompileTracking = 32768

class AssemblyNameProxy(System.MarshalByRefObject):
    """    """
    def __init__(self): ...
    @overload
    def GetAssemblyName(self, assemblyFile: str) -> AssemblyName: ...

class AssemblyProductAttribute(System.Attribute):
    """    """
    def __init__(self, product: str): ...
    @property
    def Product(self) -> str: ...

class AssemblySignatureKeyAttribute(System.Attribute):
    """    """
    def __init__(self, publicKey: str, countersignature: str): ...
    @property
    def Countersignature(self) -> str: ...
    @property
    def PublicKey(self) -> str: ...

class AssemblyTitleAttribute(System.Attribute):
    """    """
    def __init__(self, title: str): ...
    @property
    def Title(self) -> str: ...

class AssemblyTrademarkAttribute(System.Attribute):
    """    """
    def __init__(self, trademark: str): ...
    @property
    def Trademark(self) -> str: ...

class AssemblyVersionAttribute(System.Attribute):
    """    """
    def __init__(self, version: str): ...
    @property
    def Version(self) -> str: ...

class Binder(object):
    """    """
    @overload
    def BindToField(self, bindingAttr: BindingFlags, match: System.Array[FieldInfo], value: object, culture: Globalization.CultureInfo) -> FieldInfo: ...
    @overload
    def BindToMethod(self, bindingAttr: BindingFlags, match: System.Array[MethodBase], modifiers: System.Array[ParameterModifier], culture: Globalization.CultureInfo, names: System.System.Array[str]) -> (MethodBase, System.System.Array[object], object): ...
    @overload
    def ChangeType(self, value: object, type_: System.Type, culture: Globalization.CultureInfo) -> object: ...
    @overload
    def ReorderArgumentArray(self, state: object) -> (System.System.Array[object]): ...
    @overload
    def SelectMethod(self, bindingAttr: BindingFlags, match: System.Array[MethodBase], types: System.System.Array[System.Type], modifiers: System.Array[ParameterModifier]) -> MethodBase: ...
    @overload
    def SelectProperty(self, bindingAttr: BindingFlags, match: System.Array[PropertyInfo], returnType: System.Type, indexes: System.System.Array[System.Type], modifiers: System.Array[ParameterModifier]) -> PropertyInfo: ...

class BindingFlags(enum.Enum):
    Default = 0
    IgnoreCase = 1
    DeclaredOnly = 2
    Instance = 4
    Static = 8
    Public = 16
    NonPublic = 32
    FlattenHierarchy = 64
    InvokeMethod = 256
    CreateInstance = 512
    GetField = 1024
    SetField = 2048
    GetProperty = 4096
    SetProperty = 8192
    PutDispProperty = 16384
    PutRefDispProperty = 32768
    ExactBinding = 65536
    SuppressChangeType = 131072
    OptionalParamBinding = 262144
    IgnoreReturn = 16777216
    DoNotWrapExceptions = 33554432

class CallingConventions(enum.Enum):
    Standard = 1
    VarArgs = 2
    Any = 3
    HasThis = 32
    ExplicitThis = 64

class CustomAttributeData(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AttributeType(self) -> System.Type: ...
    @property
    def Constructor(self) -> ConstructorInfo: ...
    @property
    def ConstructorArguments(self) -> Generic.IList: ...
    @property
    def NamedArguments(self) -> Generic.IList: ...
    @overload
    @staticmethod
    def GetCustomAttributes(target: MemberInfo) -> Generic.IList: ...
    @overload
    @staticmethod
    def GetCustomAttributes(target: Module) -> Generic.IList: ...
    @overload
    @staticmethod
    def GetCustomAttributes(target: Assembly) -> Generic.IList: ...
    @overload
    @staticmethod
    def GetCustomAttributes(target: ParameterInfo) -> Generic.IList: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class CustomAttributeExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetCustomAttribute(element: ParameterInfo) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Assembly) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Module) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: MemberInfo) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Assembly, attributeType: System.Type) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: MemberInfo, inherit: bool) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: ParameterInfo, inherit: bool) -> T: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: MemberInfo, attributeType: System.Type) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: Module, attributeType: System.Type) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: ParameterInfo, attributeType: System.Type) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: MemberInfo, attributeType: System.Type, inherit: bool) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttribute(element: ParameterInfo, attributeType: System.Type, inherit: bool) -> System.Attribute: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Module) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Assembly) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Module) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Assembly) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Module, attributeType: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo, attributeType: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: Assembly, attributeType: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo, attributeType: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: MemberInfo, attributeType: System.Type, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetCustomAttributes(element: ParameterInfo, attributeType: System.Type, inherit: bool) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def IsDefined(element: Assembly, attributeType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: Module, attributeType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: MemberInfo, attributeType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: ParameterInfo, attributeType: System.Type) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: MemberInfo, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    @staticmethod
    def IsDefined(element: ParameterInfo, attributeType: System.Type, inherit: bool) -> bool: ...

class CustomAttributeFormatException(System.FormatException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class CustomAttributeNamedArgument(System.ValueType):
    """    """
    @overload
    def __init__(self, memberInfo: MemberInfo, value: object): ...
    @overload
    def __init__(self, memberInfo: MemberInfo, typedArgument: CustomAttributeTypedArgument): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: CustomAttributeNamedArgument) -> bool: ...
    @property
    def IsField(self) -> bool: ...
    @property
    def MemberInfo(self) -> MemberInfo: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def TypedValue(self) -> CustomAttributeTypedArgument: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class DefaultMemberAttribute(System.Attribute):
    """    """
    def __init__(self, memberName: str): ...
    @property
    def MemberName(self) -> str: ...

class EventAttributes(enum.Enum):
    None_ = 0
    SpecialName = 512
    RTSpecialName = 1024
    ReservedMask = 1024

class EventInfo(MemberInfo):
    """    """
    @overload
    def AddEventHandler(self, target: object, handler: System.Delegate) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddMethod(self) -> MethodInfo: ...
    @property
    def Attributes(self) -> EventAttributes: ...
    @property
    def EventHandlerType(self) -> System.Type: ...
    @property
    def IsMulticast(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def RaiseMethod(self) -> MethodInfo: ...
    @property
    def RemoveMethod(self) -> MethodInfo: ...
    @overload
    def GetAddMethod() -> MethodInfo: ...
    @overload
    def GetAddMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetOtherMethods() -> System.Array[MethodInfo]: ...
    @overload
    def GetOtherMethods(self, nonPublic: bool) -> System.Array[MethodInfo]: ...
    @overload
    def GetRaiseMethod() -> MethodInfo: ...
    @overload
    def GetRaiseMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def GetRemoveMethod() -> MethodInfo: ...
    @overload
    def GetRemoveMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def RemoveEventHandler(self, target: object, handler: System.Delegate) -> None: ...

class ExceptionHandlingClause(object):
    """    """
    @property
    def CatchType(self) -> System.Type: ...
    @property
    def FilterOffset(self) -> int: ...
    @property
    def Flags(self) -> ExceptionHandlingClauseOptions: ...
    @property
    def HandlerLength(self) -> int: ...
    @property
    def HandlerOffset(self) -> int: ...
    @property
    def TryLength(self) -> int: ...
    @property
    def TryOffset(self) -> int: ...
    @overload
    def ToString() -> str: ...

class ExceptionHandlingClauseOptions(enum.Enum):
    Clause = 0
    Filter = 1
    Finally = 2
    Fault = 4

class FieldAttributes(enum.Enum):
    PrivateScope = 0
    Private = 1
    FamANDAssem = 2
    Assembly = 3
    Family = 4
    FamORAssem = 5
    Public = 6
    FieldAccessMask = 7
    Static = 16
    InitOnly = 32
    Literal = 64
    NotSerialized = 128
    HasFieldRVA = 256
    SpecialName = 512
    RTSpecialName = 1024
    HasFieldMarshal = 4096
    PinvokeImpl = 8192
    HasDefault = 32768
    ReservedMask = 38144

class GenericParameterAttributes(enum.Enum):
    None_ = 0
    Covariant = 1
    Contravariant = 2
    VarianceMask = 3
    ReferenceTypeConstraint = 4
    NotNullableValueTypeConstraint = 8
    DefaultConstructorConstraint = 16
    SpecialConstraintMask = 28

class ICustomAttributeProvider:
    """    """
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...

class ImageFileMachine(enum.Enum):
    I386 = 332
    ARM = 452
    IA64 = 512
    AMD64 = 34404

class InterfaceMapping(System.ValueType):
    """    """
    @property
    def TargetType(self) -> System.Type: ...
    @property
    def InterfaceType(self) -> System.Type: ...
    @property
    def TargetMethods(self) -> System.Array[MethodInfo]: ...
    @property
    def InterfaceMethods(self) -> System.Array[MethodInfo]: ...

class IntrospectionExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetTypeInfo(type_: System.Type) -> TypeInfo: ...

class InvalidFilterCriteriaException(System.ApplicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class IReflect:
    """    """
    @property
    def UnderlyingSystemType(self) -> System.Type: ...
    @overload
    def GetField(self, name: str, bindingAttr: BindingFlags) -> FieldInfo: ...
    @overload
    def GetFields(self, bindingAttr: BindingFlags) -> System.Array[FieldInfo]: ...
    @overload
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> System.Array[MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: BindingFlags) -> System.Array[MemberInfo]: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags) -> MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags, binder: Binder, types: System.System.Array[System.Type], modifiers: System.Array[ParameterModifier]) -> MethodInfo: ...
    @overload
    def GetMethods(self, bindingAttr: BindingFlags) -> System.Array[MethodInfo]: ...
    @overload
    def GetProperties(self, bindingAttr: BindingFlags) -> System.Array[PropertyInfo]: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags) -> PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags, binder: Binder, returnType: System.Type, types: System.System.Array[System.Type], modifiers: System.Array[ParameterModifier]) -> PropertyInfo: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: BindingFlags, binder: Binder, target: object, args: System.System.Array[object], modifiers: System.Array[ParameterModifier], culture: Globalization.CultureInfo, namedParameters: System.System.Array[str]) -> object: ...

class IReflectableType:
    """    """
    @overload
    def GetTypeInfo() -> TypeInfo: ...

class LocalVariableInfo(object):
    """    """
    @property
    def IsPinned(self) -> bool: ...
    @property
    def LocalIndex(self) -> int: ...
    @property
    def LocalType(self) -> System.Type: ...
    @overload
    def ToString() -> str: ...

class ManifestResourceInfo(object):
    """    """
    def __init__(self, containingAssembly: Assembly, containingFileName: str, resourceLocation: ResourceLocation): ...
    @property
    def FileName(self) -> str: ...
    @property
    def ReferencedAssembly(self) -> Assembly: ...
    @property
    def ResourceLocation(self) -> ResourceLocation: ...

class MemberFilter(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, m: MemberInfo, filterCriteria: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, m: MemberInfo, filterCriteria: object) -> bool: ...

class MemberTypes(enum.Enum):
    Constructor = 1
    Event = 2
    Field = 4
    Method = 8
    Property = 16
    TypeInfo = 32
    Custom = 64
    NestedType = 128
    All = 191

class MethodAttributes(enum.Enum):
    ReuseSlot = 0
    PrivateScope = 0
    Private = 1
    FamANDAssem = 2
    Assembly = 3
    Family = 4
    FamORAssem = 5
    Public = 6
    MemberAccessMask = 7
    UnmanagedExport = 8
    Static = 16
    Final = 32
    Virtual = 64
    HideBySig = 128
    NewSlot = 256
    VtableLayoutMask = 256
    CheckAccessOnOverride = 512
    Abstract = 1024
    SpecialName = 2048
    RTSpecialName = 4096
    PinvokeImpl = 8192
    HasSecurity = 16384
    RequireSecObject = 32768
    ReservedMask = 53248

class MethodBody(object):
    """    """
    @property
    def ExceptionHandlingClauses(self) -> Generic.IList: ...
    @property
    def InitLocals(self) -> bool: ...
    @property
    def LocalSignatureMetadataToken(self) -> int: ...
    @property
    def LocalVariables(self) -> Generic.IList: ...
    @property
    def MaxStackSize(self) -> int: ...
    @overload
    def GetILAsByteArray() -> System.System.Array[System.Byte]: ...

class MethodImplAttributes(enum.Enum):
    IL = 0
    Managed = 0
    Native = 1
    OPTIL = 2
    Runtime = 3
    CodeTypeMask = 3
    Unmanaged = 4
    ManagedMask = 4
    NoInlining = 8
    ForwardRef = 16
    Synchronized = 32
    NoOptimization = 64
    PreserveSig = 128
    AggressiveInlining = 256
    AggressiveOptimization = 512
    InternalCall = 4096
    MaxMethodImplVal = 65535

class MethodInfo(MethodBase):
    """    """
    @overload
    def CreateDelegate() -> T: ...
    @overload
    def CreateDelegate(self, delegateType: System.Type) -> System.Delegate: ...
    @overload
    def CreateDelegate(self, target: object) -> T: ...
    @overload
    def CreateDelegate(self, delegateType: System.Type, target: object) -> System.Delegate: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def ReturnParameter(self) -> ParameterInfo: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> ICustomAttributeProvider: ...
    @overload
    def GetBaseDefinition() -> MethodInfo: ...
    @overload
    def GetGenericArguments() -> System.System.Array[System.Type]: ...
    @overload
    def GetGenericMethodDefinition() -> MethodInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def MakeGenericMethod(self, typeArguments: System.System.Array[System.Type]) -> MethodInfo: ...

class Missing(object):
    """    """
    @property
    def Value(self) -> Missing: ...

class Module(object):
    """    """
    @property
    def FilterTypeName(self) -> TypeFilter: ...
    @property
    def FilterTypeNameIgnoreCase(self) -> TypeFilter: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @overload
    def FindTypes(self, filter_: TypeFilter, filterCriteria: object) -> System.System.Array[System.Type]: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def CustomAttributes(self) -> Generic.IEnumerable: ...
    @property
    def FullyQualifiedName(self) -> str: ...
    @property
    def MDStreamVersion(self) -> int: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def ModuleHandle(self) -> System.ModuleHandle: ...
    @property
    def ModuleVersionId(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def ScopeName(self) -> str: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetField(self, name: str) -> FieldInfo: ...
    @overload
    def GetField(self, name: str, bindingAttr: BindingFlags) -> FieldInfo: ...
    @overload
    def GetFields() -> System.Array[FieldInfo]: ...
    @overload
    def GetFields(self, bindingFlags: BindingFlags) -> System.Array[FieldInfo]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMethod(self, name: str) -> MethodInfo: ...
    @overload
    def GetMethod(self, name: str, types: System.System.Array[System.Type]) -> MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags, binder: Binder, callConvention: CallingConventions, types: System.System.Array[System.Type], modifiers: System.Array[ParameterModifier]) -> MethodInfo: ...
    @overload
    def GetMethods() -> System.Array[MethodInfo]: ...
    @overload
    def GetMethods(self, bindingFlags: BindingFlags) -> System.Array[MethodInfo]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def GetPEKind() -> (PortableExecutableKinds, ImageFileMachine): ...
    @overload
    def GetType(self, className: str) -> System.Type: ...
    @overload
    def GetType(self, className: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetType(self, className: str, throwOnError: bool, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetTypes() -> System.System.Array[System.Type]: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def IsResource() -> bool: ...
    @overload
    def ResolveField(self, metadataToken: int) -> FieldInfo: ...
    @overload
    def ResolveField(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> FieldInfo: ...
    @overload
    def ResolveMember(self, metadataToken: int) -> MemberInfo: ...
    @overload
    def ResolveMember(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> MemberInfo: ...
    @overload
    def ResolveMethod(self, metadataToken: int) -> MethodBase: ...
    @overload
    def ResolveMethod(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> MethodBase: ...
    @overload
    def ResolveSignature(self, metadataToken: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ResolveString(self, metadataToken: int) -> str: ...
    @overload
    def ResolveType(self, metadataToken: int) -> System.Type: ...
    @overload
    def ResolveType(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    def ToString() -> str: ...

class ModuleResolveEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: System.ResolveEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> Module: ...
    @overload
    def Invoke(self, sender: object, e: System.ResolveEventArgs) -> Module: ...

class NullabilityInfo(object):
    """    """
    @property
    def ElementType(self) -> NullabilityInfo: ...
    @property
    def GenericTypeArguments(self) -> System.Array[NullabilityInfo]: ...
    @property
    def ReadState(self) -> NullabilityState: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def WriteState(self) -> NullabilityState: ...

class NullabilityState(enum.Enum):
    Unknown = 0
    NotNull = 1
    Nullable = 2

class NullabilityInfoContext(object):
    """    """
    def __init__(self): ...
    @overload
    def Create(self, parameterInfo: ParameterInfo) -> NullabilityInfo: ...
    @overload
    def Create(self, propertyInfo: PropertyInfo) -> NullabilityInfo: ...
    @overload
    def Create(self, eventInfo: EventInfo) -> NullabilityInfo: ...
    @overload
    def Create(self, fieldInfo: FieldInfo) -> NullabilityInfo: ...

class ObfuscateAssemblyAttribute(System.Attribute):
    """    """
    def __init__(self, assemblyIsPrivate: bool): ...
    @property
    def AssemblyIsPrivate(self) -> bool: ...
    @property
    def StripAfterObfuscation(self) -> bool: ...
    @StripAfterObfuscation.setter
    def StripAfterObfuscation(self, value: System.Void): ...

class ObfuscationAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def ApplyToMembers(self) -> bool: ...
    @property
    def Exclude(self) -> bool: ...
    @property
    def Feature(self) -> str: ...
    @property
    def StripAfterObfuscation(self) -> bool: ...
    @ApplyToMembers.setter
    def ApplyToMembers(self, value: System.Void): ...
    @Exclude.setter
    def Exclude(self, value: System.Void): ...
    @Feature.setter
    def Feature(self, value: System.Void): ...
    @StripAfterObfuscation.setter
    def StripAfterObfuscation(self, value: System.Void): ...

class ParameterAttributes(enum.Enum):
    None_ = 0
    In = 1
    Out = 2
    Lcid = 4
    Retval = 8
    Optional = 16
    HasDefault = 4096
    HasFieldMarshal = 8192
    Reserved3 = 16384
    Reserved4 = 32768
    ReservedMask = 61440

class ParameterInfo(object):
    """    """
    @property
    def Attributes(self) -> ParameterAttributes: ...
    @property
    def CustomAttributes(self) -> Generic.IEnumerable: ...
    @property
    def DefaultValue(self) -> object: ...
    @property
    def HasDefaultValue(self) -> bool: ...
    @property
    def IsIn(self) -> bool: ...
    @property
    def IsLcid(self) -> bool: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def IsOut(self) -> bool: ...
    @property
    def IsRetval(self) -> bool: ...
    @property
    def Member(self) -> MemberInfo: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterType(self) -> System.Type: ...
    @property
    def Position(self) -> int: ...
    @property
    def RawDefaultValue(self) -> object: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetOptionalCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def GetRealObject(self, context: Serialization.StreamingContext) -> object: ...
    @overload
    def GetRequiredCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def ToString() -> str: ...

class ParameterModifier(System.ValueType):
    """    """
    def __init__(self, parameterCount: int): ...
    @property
    def Item(self) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class Pointer(object):
    """    """
    @overload
    @staticmethod
    def Box(ptr: System.Void, type_: System.Type) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Unbox(ptr: object) -> System.Void: ...

class PortableExecutableKinds(enum.Enum):
    NotAPortableExecutableImage = 0
    ILOnly = 1
    Required32Bit = 2
    PE32Plus = 4
    Unmanaged32Bit = 8
    Preferred32Bit = 16

class ProcessorArchitecture(enum.Enum):
    None_ = 0
    MSIL = 1
    X86 = 2
    IA64 = 3
    Amd64 = 4
    Arm = 5

class PropertyAttributes(enum.Enum):
    None_ = 0
    SpecialName = 512
    RTSpecialName = 1024
    HasDefault = 4096
    Reserved2 = 8192
    Reserved3 = 16384
    Reserved4 = 32768
    ReservedMask = 62464

class PropertyInfo(MemberInfo):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> PropertyAttributes: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def GetMethod(self) -> MethodInfo: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @property
    def SetMethod(self) -> MethodInfo: ...
    @overload
    def GetAccessors() -> System.Array[MethodInfo]: ...
    @overload
    def GetAccessors(self, nonPublic: bool) -> System.Array[MethodInfo]: ...
    @overload
    def GetConstantValue() -> object: ...
    @overload
    def GetGetMethod() -> MethodInfo: ...
    @overload
    def GetGetMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetIndexParameters() -> System.Array[ParameterInfo]: ...
    @overload
    def GetOptionalCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def GetRawConstantValue() -> object: ...
    @overload
    def GetRequiredCustomModifiers() -> System.System.Array[System.Type]: ...
    @overload
    def GetSetMethod() -> MethodInfo: ...
    @overload
    def GetSetMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def GetValue(self, obj: object) -> object: ...
    @overload
    def GetValue(self, obj: object, index: System.System.Array[object]) -> object: ...
    @overload
    def GetValue(self, obj: object, invokeAttr: BindingFlags, binder: Binder, index: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def SetValue(self, obj: object, value: object) -> None: ...
    @overload
    def SetValue(self, obj: object, value: object, index: System.System.Array[object]) -> None: ...
    @overload
    def SetValue(self, obj: object, value: object, invokeAttr: BindingFlags, binder: Binder, index: System.System.Array[object], culture: Globalization.CultureInfo) -> None: ...

class ReflectionContext(object):
    """    """
    @overload
    def GetTypeForObject(self, value: object) -> TypeInfo: ...
    @overload
    def MapAssembly(self, assembly: Assembly) -> Assembly: ...
    @overload
    def MapType(self, type_: TypeInfo) -> TypeInfo: ...

class ReflectionTypeLoadException(System.SystemException):
    """    """
    @overload
    def __init__(self, classes: System.System.Array[System.Type], exceptions: System.System.Array[System.Exception]): ...
    @overload
    def __init__(self, classes: System.System.Array[System.Type], exceptions: System.System.Array[System.Exception], message: str): ...
    @property
    def LoaderExceptions(self) -> System.System.Array[System.Exception]: ...
    @property
    def Message(self) -> str: ...
    @property
    def Types(self) -> System.System.Array[System.Type]: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...
    @overload
    def ToString() -> str: ...

class ResourceAttributes(enum.Enum):
    Public = 1
    Private = 2

class ResourceLocation(enum.Enum):
    Embedded = 1
    ContainedInAnotherAssembly = 2
    ContainedInManifestFile = 4

class RuntimeReflectionExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetMethodInfo(del_: System.Delegate) -> MethodInfo: ...
    @overload
    @staticmethod
    def GetRuntimeBaseDefinition(method: MethodInfo) -> MethodInfo: ...
    @overload
    @staticmethod
    def GetRuntimeEvent(type_: System.Type, name: str) -> EventInfo: ...
    @overload
    @staticmethod
    def GetRuntimeEvents(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetRuntimeField(type_: System.Type, name: str) -> FieldInfo: ...
    @overload
    @staticmethod
    def GetRuntimeFields(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetRuntimeInterfaceMap(typeInfo: TypeInfo, interfaceType: System.Type) -> InterfaceMapping: ...
    @overload
    @staticmethod
    def GetRuntimeMethod(type_: System.Type, name: str, parameters: System.System.Array[System.Type]) -> MethodInfo: ...
    @overload
    @staticmethod
    def GetRuntimeMethods(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetRuntimeProperties(type_: System.Type) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def GetRuntimeProperty(type_: System.Type, name: str) -> PropertyInfo: ...

class TargetException(System.ApplicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class TargetInvocationException(System.ApplicationException):
    """    """
    @overload
    def __init__(self, inner: System.Exception): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class TargetParameterCountException(System.ApplicationException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: System.Exception): ...

class TypeAttributes(enum.Enum):
    NotPublic = 0
    AutoLayout = 0
    AnsiClass = 0
    Class = 0
    Public = 1
    NestedPublic = 2
    NestedPrivate = 3
    NestedFamily = 4
    NestedAssembly = 5
    NestedFamANDAssem = 6
    NestedFamORAssem = 7
    VisibilityMask = 7
    SequentialLayout = 8
    ExplicitLayout = 16
    LayoutMask = 24
    Interface = 32
    ClassSemanticsMask = 32
    Abstract = 128
    Sealed = 256
    SpecialName = 1024
    RTSpecialName = 2048
    Import = 4096
    Serializable = 8192
    WindowsRuntime = 16384
    UnicodeClass = 65536
    AutoClass = 131072
    CustomFormatClass = 196608
    StringFormatMask = 196608
    HasSecurity = 262144
    ReservedMask = 264192
    BeforeFieldInit = 1048576
    CustomFormatMask = 12582912

class TypeDelegator(TypeInfo):
    """    """
    def __init__(self, delegatingType: System.Type): ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def AssemblyQualifiedName(self) -> str: ...
    @property
    def BaseType(self) -> System.Type: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def IsByRefLike(self) -> bool: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def IsConstructedGenericType(self) -> bool: ...
    @property
    def IsGenericMethodParameter(self) -> bool: ...
    @property
    def IsGenericTypeParameter(self) -> bool: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def IsVariableBoundArray(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeHandle(self) -> System.RuntimeTypeHandle: ...
    @property
    def UnderlyingSystemType(self) -> System.Type: ...
    @overload
    def GetConstructors(self, bindingAttr: BindingFlags) -> System.Array[ConstructorInfo]: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetElementType() -> System.Type: ...
    @overload
    def GetEvent(self, name: str, bindingAttr: BindingFlags) -> EventInfo: ...
    @overload
    def GetEvents() -> System.Array[EventInfo]: ...
    @overload
    def GetEvents(self, bindingAttr: BindingFlags) -> System.Array[EventInfo]: ...
    @overload
    def GetField(self, name: str, bindingAttr: BindingFlags) -> FieldInfo: ...
    @overload
    def GetFields(self, bindingAttr: BindingFlags) -> System.Array[FieldInfo]: ...
    @overload
    def GetInterface(self, name: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetInterfaceMap(self, interfaceType: System.Type) -> InterfaceMapping: ...
    @overload
    def GetInterfaces() -> System.System.Array[System.Type]: ...
    @overload
    def GetMember(self, name: str, type_: MemberTypes, bindingAttr: BindingFlags) -> System.Array[MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: BindingFlags) -> System.Array[MemberInfo]: ...
    @overload
    def GetMemberWithSameMetadataDefinitionAs(self, member: MemberInfo) -> MemberInfo: ...
    @overload
    def GetMethods(self, bindingAttr: BindingFlags) -> System.Array[MethodInfo]: ...
    @overload
    def GetNestedType(self, name: str, bindingAttr: BindingFlags) -> System.Type: ...
    @overload
    def GetNestedTypes(self, bindingAttr: BindingFlags) -> System.System.Array[System.Type]: ...
    @overload
    def GetProperties(self, bindingAttr: BindingFlags) -> System.Array[PropertyInfo]: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: BindingFlags, binder: Binder, target: object, args: System.System.Array[object], modifiers: System.Array[ParameterModifier], culture: Globalization.CultureInfo, namedParameters: System.System.Array[str]) -> object: ...
    @overload
    def IsAssignableFrom(self, typeInfo: TypeInfo) -> bool: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...

class TypeFilter(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, m: System.Type, filterCriteria: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    @overload
    def Invoke(self, m: System.Type, filterCriteria: object) -> bool: ...

class TypeInfo(System.Type):
    """    """
    @overload
    def AsType() -> System.Type: ...
    @property
    def DeclaredConstructors(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredEvents(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredFields(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredMembers(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredMethods(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredNestedTypes(self) -> Generic.IEnumerable: ...
    @property
    def DeclaredProperties(self) -> Generic.IEnumerable: ...
    @property
    def GenericTypeParameters(self) -> System.System.Array[System.Type]: ...
    @property
    def ImplementedInterfaces(self) -> Generic.IEnumerable: ...
    @overload
    def GetDeclaredEvent(self, name: str) -> EventInfo: ...
    @overload
    def GetDeclaredField(self, name: str) -> FieldInfo: ...
    @overload
    def GetDeclaredMethod(self, name: str) -> MethodInfo: ...
    @overload
    def GetDeclaredMethods(self, name: str) -> Generic.IEnumerable: ...
    @overload
    def GetDeclaredNestedType(self, name: str) -> TypeInfo: ...
    @overload
    def GetDeclaredProperty(self, name: str) -> PropertyInfo: ...
    @overload
    def IsAssignableFrom(self, typeInfo: TypeInfo) -> bool: ...

# endregion

# region: System.ObjectModel, Version=7.0.0.0

class ICustomTypeProvider:
    """    """
    @overload
    def GetCustomType() -> System.Type: ...

# endregion

# region: System.Reflection.Metadata, Version=7.0.0.0

class MethodSemanticsAttributes(enum.Enum):
    Setter = 1
    Getter = 2
    Other = 4
    Adder = 8
    Remover = 16
    Raiser = 32

class DeclarativeSecurityAction(enum.Enum):
    None_ = 0
    Demand = 2
    Assert = 3
    Deny = 4
    PermitOnly = 5
    LinkDemand = 6
    InheritanceDemand = 7
    RequestMinimum = 8
    RequestOptional = 9
    RequestRefuse = 10

class MethodImportAttributes(enum.Enum):
    None_ = 0
    ExactSpelling = 1
    CharSetAnsi = 2
    CharSetUnicode = 4
    CharSetAuto = 6
    CharSetMask = 6
    BestFitMappingEnable = 16
    BestFitMappingDisable = 32
    BestFitMappingMask = 48
    SetLastError = 64
    CallingConventionWinApi = 256
    CallingConventionCDecl = 512
    CallingConventionStdCall = 768
    CallingConventionThisCall = 1024
    CallingConventionFastCall = 1280
    CallingConventionMask = 1792
    ThrowOnUnmappableCharEnable = 4096
    ThrowOnUnmappableCharDisable = 8192
    ThrowOnUnmappableCharMask = 12288

class ManifestResourceAttributes(enum.Enum):
    Public = 1
    Private = 2
    VisibilityMask = 7

class AssemblyHashAlgorithm(enum.Enum):
    None_ = 0
    MD5 = 32771
    Sha1 = 32772
    Sha256 = 32780
    Sha384 = 32781
    Sha512 = 32782

class AssemblyFlags(enum.Enum):
    PublicKey = 1
    Retargetable = 256
    WindowsRuntime = 512
    ContentTypeMask = 3584
    DisableJitCompileOptimizer = 16384
    EnableJitCompileTracking = 32768

# endregion

# region: System.Reflection.DispatchProxy, Version=7.0.0.0

class DispatchProxy(object):
    """    """
    @overload
    @staticmethod
    def Create() -> T: ...

# endregion
