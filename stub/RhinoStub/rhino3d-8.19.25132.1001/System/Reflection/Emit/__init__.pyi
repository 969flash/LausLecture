"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["AssemblyBuilder", "ConstructorBuilder", "CustomAttributeBuilder", "DynamicILInfo", "DynamicMethod", "EnumBuilder", "EventBuilder", "FieldBuilder", "GenericTypeParameterBuilder", "ILGenerator", "LocalBuilder", "MethodBuilder", "ModuleBuilder", "ParameterBuilder", "PropertyBuilder", "SignatureHelper", "TypeBuilder", "AssemblyBuilderAccess", "FlowControl", "Label", "OpCode", "OpCodes", "OpCodeType", "OperandType", "PackingSize", "PEFileKinds", "StackBehaviour"]
# endregion

# region: Imports
from System import Globalization
from System import IO
from System import Reflection
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import InteropServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class AssemblyBuilder(Reflection.Assembly):
    """    """
    @overload
    @staticmethod
    def DefineDynamicAssembly(name: Reflection.AssemblyName, access: AssemblyBuilderAccess) -> AssemblyBuilder: ...
    @overload
    @staticmethod
    def DefineDynamicAssembly(name: Reflection.AssemblyName, access: AssemblyBuilderAccess, assemblyAttributes: Generic.IEnumerable) -> AssemblyBuilder: ...
    @overload
    def DefineDynamicModule(self, name: str) -> ModuleBuilder: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CodeBase(self) -> str: ...
    @property
    def EntryPoint(self) -> Reflection.MethodInfo: ...
    @property
    def FullName(self) -> str: ...
    @property
    def HostContext(self) -> System.Int64: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def ManifestModule(self) -> Reflection.Module: ...
    @property
    def ReflectionOnly(self) -> bool: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetDynamicModule(self, name: str) -> ModuleBuilder: ...
    @overload
    def GetExportedTypes() -> System.System.Array[System.Type]: ...
    @overload
    def GetFile(self, name: str) -> IO.FileStream: ...
    @overload
    def GetFiles(self, getResourceModules: bool) -> IO.System.Array[IO.FileStream]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetLoadedModules(self, getResourceModules: bool) -> Reflection.System.Array[Reflection.Module]: ...
    @overload
    def GetManifestResourceInfo(self, resourceName: str) -> Reflection.ManifestResourceInfo: ...
    @overload
    def GetManifestResourceNames() -> System.System.Array[str]: ...
    @overload
    def GetManifestResourceStream(self, name: str) -> IO.Stream: ...
    @overload
    def GetManifestResourceStream(self, type_: System.Type, name: str) -> IO.Stream: ...
    @overload
    def GetModule(self, name: str) -> Reflection.Module: ...
    @overload
    def GetModules(self, getResourceModules: bool) -> Reflection.System.Array[Reflection.Module]: ...
    @overload
    def GetName(self, copiedName: bool) -> Reflection.AssemblyName: ...
    @overload
    def GetReferencedAssemblies() -> Reflection.System.Array[Reflection.AssemblyName]: ...
    @overload
    def GetSatelliteAssembly(self, culture: Globalization.CultureInfo) -> Reflection.Assembly: ...
    @overload
    def GetSatelliteAssembly(self, culture: Globalization.CultureInfo, version: System.Version) -> Reflection.Assembly: ...
    @overload
    def GetType(self, name: str, throwOnError: bool, ignoreCase: bool) -> System.Type: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @property
    def ModuleResolve(self): ...

class ConstructorBuilder(Reflection.ConstructorInfo):
    """    """
    @overload
    def DefineParameter(self, iSequence: int, attributes: Reflection.ParameterAttributes, strParamName: str) -> ParameterBuilder: ...
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def CallingConvention(self) -> Reflection.CallingConventions: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def InitLocals(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def MethodHandle(self) -> System.RuntimeMethodHandle: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetILGenerator() -> ILGenerator: ...
    @overload
    def GetILGenerator(self, streamSize: int) -> ILGenerator: ...
    @overload
    def GetMethodImplementationFlags() -> Reflection.MethodImplAttributes: ...
    @overload
    def GetParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def Invoke(self, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def Invoke(self, obj: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @InitLocals.setter
    def InitLocals(self, value: System.Void): ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetImplementationFlags(self, attributes: Reflection.MethodImplAttributes) -> None: ...
    @overload
    def ToString() -> str: ...

class CustomAttributeBuilder(object):
    """    """
    @overload
    def __init__(self, con: Reflection.ConstructorInfo, constructorArgs: System.System.Array[object]): ...
    @overload
    def __init__(self, con: Reflection.ConstructorInfo, constructorArgs: System.System.Array[object], namedProperties: Reflection.System.Array[Reflection.PropertyInfo], propertyValues: System.System.Array[object]): ...
    @overload
    def __init__(self, con: Reflection.ConstructorInfo, constructorArgs: System.System.Array[object], namedFields: Reflection.System.Array[Reflection.FieldInfo], fieldValues: System.System.Array[object]): ...
    @overload
    def __init__(self, con: Reflection.ConstructorInfo, constructorArgs: System.System.Array[object], namedProperties: Reflection.System.Array[Reflection.PropertyInfo], propertyValues: System.System.Array[object], namedFields: Reflection.System.Array[Reflection.FieldInfo], fieldValues: System.System.Array[object]): ...

class DynamicILInfo(object):
    """    """
    @property
    def DynamicMethod(self) -> DynamicMethod: ...
    @overload
    def GetTokenFor(self, method: System.RuntimeMethodHandle) -> int: ...
    @overload
    def GetTokenFor(self, method: DynamicMethod) -> int: ...
    @overload
    def GetTokenFor(self, field: System.RuntimeFieldHandle) -> int: ...
    @overload
    def GetTokenFor(self, type_: System.RuntimeTypeHandle) -> int: ...
    @overload
    def GetTokenFor(self, literal: str) -> int: ...
    @overload
    def GetTokenFor(self, signature: System.System.Array[System.Byte]) -> int: ...
    @overload
    def GetTokenFor(self, field: System.RuntimeFieldHandle, contextType: System.RuntimeTypeHandle) -> int: ...
    @overload
    def GetTokenFor(self, method: System.RuntimeMethodHandle, contextType: System.RuntimeTypeHandle) -> int: ...
    @overload
    def SetCode(self, code: System.System.Array[System.Byte], maxStackSize: int) -> None: ...
    @overload
    def SetCode(self, code: System.Byte, codeSize: int, maxStackSize: int) -> None: ...
    @overload
    def SetExceptions(self, exceptions: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetExceptions(self, exceptions: System.Byte, exceptionsSize: int) -> None: ...
    @overload
    def SetLocalSignature(self, localSignature: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetLocalSignature(self, localSignature: System.Byte, signatureSize: int) -> None: ...

class DynamicMethod(Reflection.MethodInfo):
    """    """
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type]): ...
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type], restrictedSkipVisibility: bool): ...
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type], m: Reflection.Module): ...
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type], owner: System.Type): ...
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type], m: Reflection.Module, skipVisibility: bool): ...
    @overload
    def __init__(self, name: str, returnType: System.Type, parameterTypes: System.System.Array[System.Type], owner: System.Type, skipVisibility: bool): ...
    @overload
    def __init__(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], m: Reflection.Module, skipVisibility: bool): ...
    @overload
    def __init__(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], owner: System.Type, skipVisibility: bool): ...
    @overload
    def CreateDelegate(self, delegateType: System.Type) -> System.Delegate: ...
    @overload
    def CreateDelegate(self, delegateType: System.Type, target: object) -> System.Delegate: ...
    @overload
    def DefineParameter(self, position: int, attributes: Reflection.ParameterAttributes, parameterName: str) -> ParameterBuilder: ...
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def CallingConvention(self) -> Reflection.CallingConventions: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def InitLocals(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def MethodHandle(self) -> System.RuntimeMethodHandle: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @property
    def ReturnParameter(self) -> Reflection.ParameterInfo: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> Reflection.ICustomAttributeProvider: ...
    @overload
    def GetBaseDefinition() -> Reflection.MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetDynamicILInfo() -> DynamicILInfo: ...
    @overload
    def GetILGenerator() -> ILGenerator: ...
    @overload
    def GetILGenerator(self, streamSize: int) -> ILGenerator: ...
    @overload
    def GetMethodImplementationFlags() -> Reflection.MethodImplAttributes: ...
    @overload
    def GetParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def Invoke(self, obj: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @InitLocals.setter
    def InitLocals(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class EnumBuilder(Reflection.TypeInfo):
    """    """
    @overload
    def CreateType() -> System.Type: ...
    @overload
    def CreateTypeInfo() -> Reflection.TypeInfo: ...
    @overload
    def DefineLiteral(self, literalName: str, literalValue: object) -> FieldBuilder: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def AssemblyQualifiedName(self) -> str: ...
    @property
    def BaseType(self) -> System.Type: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def IsByRefLike(self) -> bool: ...
    @property
    def IsConstructedGenericType(self) -> bool: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @property
    def TypeHandle(self) -> System.RuntimeTypeHandle: ...
    @property
    def UnderlyingField(self) -> FieldBuilder: ...
    @property
    def UnderlyingSystemType(self) -> System.Type: ...
    @overload
    def GetConstructors(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.ConstructorInfo]: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetElementType() -> System.Type: ...
    @overload
    def GetEnumUnderlyingType() -> System.Type: ...
    @overload
    def GetEvent(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.EventInfo: ...
    @overload
    def GetEvents() -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    def GetEvents(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    def GetField(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    def GetFields(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.FieldInfo]: ...
    @overload
    def GetInterface(self, name: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetInterfaceMap(self, interfaceType: System.Type) -> Reflection.InterfaceMapping: ...
    @overload
    def GetInterfaces() -> System.System.Array[System.Type]: ...
    @overload
    def GetMember(self, name: str, type_: Reflection.MemberTypes, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMethods(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetNestedType(self, name: str, bindingAttr: Reflection.BindingFlags) -> System.Type: ...
    @overload
    def GetNestedTypes(self, bindingAttr: Reflection.BindingFlags) -> System.System.Array[System.Type]: ...
    @overload
    def GetProperties(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.PropertyInfo]: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: System.System.Array[object], modifiers: Reflection.System.Array[Reflection.ParameterModifier], culture: Globalization.CultureInfo, namedParameters: System.System.Array[str]) -> object: ...
    @overload
    def IsAssignableFrom(self, typeInfo: Reflection.TypeInfo) -> bool: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def MakeArrayType() -> System.Type: ...
    @overload
    def MakeArrayType(self, rank: int) -> System.Type: ...
    @overload
    def MakeByRefType() -> System.Type: ...
    @overload
    def MakePointerType() -> System.Type: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...

class EventBuilder(object):
    """    """
    @overload
    def AddOtherMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @overload
    def SetAddOnMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetRaiseMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @overload
    def SetRemoveOnMethod(self, mdBuilder: MethodBuilder) -> None: ...

class FieldBuilder(Reflection.FieldInfo):
    """    """
    @property
    def Attributes(self) -> Reflection.FieldAttributes: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def FieldHandle(self) -> System.RuntimeFieldHandle: ...
    @property
    def FieldType(self) -> System.Type: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetValue(self, obj: object) -> object: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def SetConstant(self, defaultValue: object) -> None: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetOffset(self, iOffset: int) -> None: ...
    @overload
    def SetValue(self, obj: object, val: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, culture: Globalization.CultureInfo) -> None: ...

class GenericTypeParameterBuilder(Reflection.TypeInfo):
    """    """
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def AssemblyQualifiedName(self) -> str: ...
    @property
    def BaseType(self) -> System.Type: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def DeclaringMethod(self) -> Reflection.MethodBase: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GenericParameterAttributes(self) -> Reflection.GenericParameterAttributes: ...
    @property
    def GenericParameterPosition(self) -> int: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def IsByRefLike(self) -> bool: ...
    @property
    def IsConstructedGenericType(self) -> bool: ...
    @property
    def IsGenericParameter(self) -> bool: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsGenericTypeDefinition(self) -> bool: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @property
    def TypeHandle(self) -> System.RuntimeTypeHandle: ...
    @property
    def UnderlyingSystemType(self) -> System.Type: ...
    @overload
    def GetConstructors(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.ConstructorInfo]: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetElementType() -> System.Type: ...
    @overload
    def GetEvent(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.EventInfo: ...
    @overload
    def GetEvents() -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    def GetEvents(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    def GetField(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    def GetFields(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.FieldInfo]: ...
    @overload
    def GetGenericArguments() -> System.System.Array[System.Type]: ...
    @overload
    def GetGenericTypeDefinition() -> System.Type: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetInterface(self, name: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetInterfaceMap(self, interfaceType: System.Type) -> Reflection.InterfaceMapping: ...
    @overload
    def GetInterfaces() -> System.System.Array[System.Type]: ...
    @overload
    def GetMember(self, name: str, type_: Reflection.MemberTypes, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMethods(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetNestedType(self, name: str, bindingAttr: Reflection.BindingFlags) -> System.Type: ...
    @overload
    def GetNestedTypes(self, bindingAttr: Reflection.BindingFlags) -> System.System.Array[System.Type]: ...
    @overload
    def GetProperties(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.PropertyInfo]: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: System.System.Array[object], modifiers: Reflection.System.Array[Reflection.ParameterModifier], culture: Globalization.CultureInfo, namedParameters: System.System.Array[str]) -> object: ...
    @overload
    def IsAssignableFrom(self, c: System.Type) -> bool: ...
    @overload
    def IsAssignableFrom(self, typeInfo: Reflection.TypeInfo) -> bool: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def IsSubclassOf(self, c: System.Type) -> bool: ...
    @overload
    def MakeArrayType() -> System.Type: ...
    @overload
    def MakeArrayType(self, rank: int) -> System.Type: ...
    @overload
    def MakeByRefType() -> System.Type: ...
    @overload
    def MakeGenericType(self, typeArguments: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    def MakePointerType() -> System.Type: ...
    @overload
    def SetBaseTypeConstraint(self, baseTypeConstraint: System.Type) -> None: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetGenericParameterAttributes(self, genericParameterAttributes: Reflection.GenericParameterAttributes) -> None: ...
    @overload
    def SetInterfaceConstraints(self, interfaceConstraints: System.System.Array[System.Type]) -> None: ...
    @overload
    def ToString() -> str: ...

class ILGenerator(object):
    """    """
    @overload
    def BeginCatchBlock(self, exceptionType: System.Type) -> None: ...
    @overload
    def BeginExceptFilterBlock() -> None: ...
    @overload
    def BeginExceptionBlock() -> Label: ...
    @overload
    def BeginFaultBlock() -> None: ...
    @overload
    def BeginFinallyBlock() -> None: ...
    @overload
    def BeginScope() -> None: ...
    @overload
    def DeclareLocal(self, localType: System.Type) -> LocalBuilder: ...
    @overload
    def DeclareLocal(self, localType: System.Type, pinned: bool) -> LocalBuilder: ...
    @overload
    def DefineLabel() -> Label: ...
    @overload
    def Emit(self, opcode: OpCode) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, con: Reflection.ConstructorInfo) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: System.Byte) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: System.SByte) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: System.Int16) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: int) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, signature: SignatureHelper) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, local: LocalBuilder) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, str_: str) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, meth: Reflection.MethodInfo) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, labels: System.Array[Label]) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, cls: System.Type) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: System.Int64) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, label: Label) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: float) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, arg: System.Single) -> None: ...
    @overload
    def Emit(self, opcode: OpCode, field: Reflection.FieldInfo) -> None: ...
    @overload
    def EmitCall(self, opcode: OpCode, methodInfo: Reflection.MethodInfo, optionalParameterTypes: System.System.Array[System.Type]) -> None: ...
    @overload
    def EmitCalli(self, opcode: OpCode, unmanagedCallConv: InteropServices.CallingConvention, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> None: ...
    @overload
    def EmitCalli(self, opcode: OpCode, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], optionalParameterTypes: System.System.Array[System.Type]) -> None: ...
    @overload
    def EmitWriteLine(self, fld: Reflection.FieldInfo) -> None: ...
    @overload
    def EmitWriteLine(self, localBuilder: LocalBuilder) -> None: ...
    @overload
    def EmitWriteLine(self, value: str) -> None: ...
    @overload
    def EndExceptionBlock() -> None: ...
    @overload
    def EndScope() -> None: ...
    @property
    def ILOffset(self) -> int: ...
    @overload
    def MarkLabel(self, loc: Label) -> None: ...
    @overload
    def ThrowException(self, excType: System.Type) -> None: ...
    @overload
    def UsingNamespace(self, usingNamespace: str) -> None: ...

class LocalBuilder(Reflection.LocalVariableInfo):
    """    """
    @property
    def IsPinned(self) -> bool: ...
    @property
    def LocalIndex(self) -> int: ...
    @property
    def LocalType(self) -> System.Type: ...

class MethodBuilder(Reflection.MethodInfo):
    """    """
    @overload
    def DefineGenericParameters(self, names: System.System.Array[str]) -> System.Array[GenericTypeParameterBuilder]: ...
    @overload
    def DefineParameter(self, position: int, attributes: Reflection.ParameterAttributes, strParamName: str) -> ParameterBuilder: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> Reflection.MethodAttributes: ...
    @property
    def CallingConvention(self) -> Reflection.CallingConventions: ...
    @property
    def ContainsGenericParameters(self) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def InitLocals(self) -> bool: ...
    @property
    def IsGenericMethod(self) -> bool: ...
    @property
    def IsGenericMethodDefinition(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def MethodHandle(self) -> System.RuntimeMethodHandle: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @property
    def ReturnParameter(self) -> Reflection.ParameterInfo: ...
    @property
    def ReturnType(self) -> System.Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> Reflection.ICustomAttributeProvider: ...
    @overload
    def GetBaseDefinition() -> Reflection.MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetGenericArguments() -> System.System.Array[System.Type]: ...
    @overload
    def GetGenericMethodDefinition() -> Reflection.MethodInfo: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetILGenerator() -> ILGenerator: ...
    @overload
    def GetILGenerator(self, size: int) -> ILGenerator: ...
    @overload
    def GetMethodImplementationFlags() -> Reflection.MethodImplAttributes: ...
    @overload
    def GetParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def Invoke(self, obj: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, parameters: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def MakeGenericMethod(self, typeArguments: System.System.Array[System.Type]) -> Reflection.MethodInfo: ...
    @InitLocals.setter
    def InitLocals(self, value: System.Void): ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetImplementationFlags(self, attributes: Reflection.MethodImplAttributes) -> None: ...
    @overload
    def SetParameters(self, parameterTypes: System.System.Array[System.Type]) -> None: ...
    @overload
    def SetReturnType(self, returnType: System.Type) -> None: ...
    @overload
    def SetSignature(self, returnType: System.Type, returnTypeRequiredCustomModifiers: System.System.Array[System.Type], returnTypeOptionalCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], parameterTypeRequiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], parameterTypeOptionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> None: ...
    @overload
    def ToString() -> str: ...

class ModuleBuilder(Reflection.Module):
    """    """
    @overload
    def CreateGlobalFunctions() -> None: ...
    @overload
    def DefineEnum(self, name: str, visibility: Reflection.TypeAttributes, underlyingType: System.Type) -> EnumBuilder: ...
    @overload
    def DefineGlobalMethod(self, name: str, attributes: Reflection.MethodAttributes, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> MethodBuilder: ...
    @overload
    def DefineGlobalMethod(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> MethodBuilder: ...
    @overload
    def DefineGlobalMethod(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, requiredReturnTypeCustomModifiers: System.System.Array[System.Type], optionalReturnTypeCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], requiredParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]], optionalParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> MethodBuilder: ...
    @overload
    def DefineInitializedData(self, name: str, data: System.System.Array[System.Byte], attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @overload
    def DefinePInvokeMethod(self, name: str, dllName: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], nativeCallConv: InteropServices.CallingConvention, nativeCharSet: InteropServices.CharSet) -> MethodBuilder: ...
    @overload
    def DefinePInvokeMethod(self, name: str, dllName: str, entryName: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], nativeCallConv: InteropServices.CallingConvention, nativeCharSet: InteropServices.CharSet) -> MethodBuilder: ...
    @overload
    def DefineType(self, name: str) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, packsize: PackingSize) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, typesize: int) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, interfaces: System.System.Array[System.Type]) -> TypeBuilder: ...
    @overload
    def DefineType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, packingSize: PackingSize, typesize: int) -> TypeBuilder: ...
    @overload
    def DefineUninitializedData(self, name: str, size: int, attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def FullyQualifiedName(self) -> str: ...
    @property
    def MDStreamVersion(self) -> int: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def ModuleVersionId(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def ScopeName(self) -> str: ...
    @overload
    def GetArrayMethod(self, arrayClass: System.Type, methodName: str, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> Reflection.MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributesData() -> Generic.IList: ...
    @overload
    def GetField(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    def GetFields(self, bindingFlags: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.FieldInfo]: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetMethods(self, bindingFlags: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetPEKind() -> (Reflection.PortableExecutableKinds, Reflection.ImageFileMachine): ...
    @overload
    def GetType(self, className: str) -> System.Type: ...
    @overload
    def GetType(self, className: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetType(self, className: str, throwOnError: bool, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetTypes() -> System.System.Array[System.Type]: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def IsResource() -> bool: ...
    @overload
    def ResolveField(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> Reflection.FieldInfo: ...
    @overload
    def ResolveMember(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> Reflection.MemberInfo: ...
    @overload
    def ResolveMethod(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> Reflection.MethodBase: ...
    @overload
    def ResolveSignature(self, metadataToken: int) -> System.System.Array[System.Byte]: ...
    @overload
    def ResolveString(self, metadataToken: int) -> str: ...
    @overload
    def ResolveType(self, metadataToken: int, genericTypeArguments: System.System.Array[System.Type], genericMethodArguments: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...

class ParameterBuilder(object):
    """    """
    @property
    def Attributes(self) -> int: ...
    @property
    def IsIn(self) -> bool: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def IsOut(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> int: ...
    @overload
    def SetConstant(self, defaultValue: object) -> None: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...

class PropertyBuilder(Reflection.PropertyInfo):
    """    """
    @overload
    def AddOtherMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @property
    def Attributes(self) -> Reflection.PropertyAttributes: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyType(self) -> System.Type: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @overload
    def GetAccessors(self, nonPublic: bool) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetGetMethod(self, nonPublic: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetIndexParameters() -> Reflection.System.Array[Reflection.ParameterInfo]: ...
    @overload
    def GetSetMethod(self, nonPublic: bool) -> Reflection.MethodInfo: ...
    @overload
    def GetValue(self, obj: object, index: System.System.Array[object]) -> object: ...
    @overload
    def GetValue(self, obj: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, index: System.System.Array[object], culture: Globalization.CultureInfo) -> object: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def SetConstant(self, defaultValue: object) -> None: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetGetMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @overload
    def SetSetMethod(self, mdBuilder: MethodBuilder) -> None: ...
    @overload
    def SetValue(self, obj: object, value: object, index: System.System.Array[object]) -> None: ...
    @overload
    def SetValue(self, obj: object, value: object, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, index: System.System.Array[object], culture: Globalization.CultureInfo) -> None: ...

class SignatureHelper(object):
    """    """
    @overload
    def AddArgument(self, clsArgument: System.Type) -> None: ...
    @overload
    def AddArgument(self, argument: System.Type, pinned: bool) -> None: ...
    @overload
    def AddArgument(self, argument: System.Type, requiredCustomModifiers: System.System.Array[System.Type], optionalCustomModifiers: System.System.Array[System.Type]) -> None: ...
    @overload
    def AddArguments(self, arguments: System.System.Array[System.Type], requiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], optionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> None: ...
    @overload
    def AddSentinel() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def GetFieldSigHelper(mod: Reflection.Module) -> SignatureHelper: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def GetLocalVarSigHelper() -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetLocalVarSigHelper(mod: Reflection.Module) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetMethodSigHelper(callingConvention: Reflection.CallingConventions, returnType: System.Type) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetMethodSigHelper(mod: Reflection.Module, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetMethodSigHelper(mod: Reflection.Module, callingConvention: Reflection.CallingConventions, returnType: System.Type) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetPropertySigHelper(mod: Reflection.Module, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetPropertySigHelper(mod: Reflection.Module, returnType: System.Type, requiredReturnTypeCustomModifiers: System.System.Array[System.Type], optionalReturnTypeCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], requiredParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]], optionalParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> SignatureHelper: ...
    @overload
    @staticmethod
    def GetPropertySigHelper(mod: Reflection.Module, callingConvention: Reflection.CallingConventions, returnType: System.Type, requiredReturnTypeCustomModifiers: System.System.Array[System.Type], optionalReturnTypeCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], requiredParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]], optionalParameterTypeCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> SignatureHelper: ...
    @overload
    def GetSignature() -> System.System.Array[System.Byte]: ...
    @overload
    def ToString() -> str: ...

class TypeBuilder(Reflection.TypeInfo):
    """    """
    @property
    def UnspecifiedTypeSize(self) -> int: ...
    @overload
    def AddInterfaceImplementation(self, interfaceType: System.Type) -> None: ...
    @overload
    def CreateType() -> System.Type: ...
    @overload
    def CreateTypeInfo() -> Reflection.TypeInfo: ...
    @overload
    def DefineConstructor(self, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, parameterTypes: System.System.Array[System.Type]) -> ConstructorBuilder: ...
    @overload
    def DefineConstructor(self, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, parameterTypes: System.System.Array[System.Type], requiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], optionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> ConstructorBuilder: ...
    @overload
    def DefineDefaultConstructor(self, attributes: Reflection.MethodAttributes) -> ConstructorBuilder: ...
    @overload
    def DefineEvent(self, name: str, attributes: Reflection.EventAttributes, eventtype: System.Type) -> EventBuilder: ...
    @overload
    def DefineField(self, fieldName: str, type_: System.Type, attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @overload
    def DefineField(self, fieldName: str, type_: System.Type, requiredCustomModifiers: System.System.Array[System.Type], optionalCustomModifiers: System.System.Array[System.Type], attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @overload
    def DefineGenericParameters(self, names: System.System.Array[str]) -> System.Array[GenericTypeParameterBuilder]: ...
    @overload
    def DefineInitializedData(self, name: str, data: System.System.Array[System.Byte], attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @overload
    def DefineMethod(self, name: str, attributes: Reflection.MethodAttributes) -> MethodBuilder: ...
    @overload
    def DefineMethod(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions) -> MethodBuilder: ...
    @overload
    def DefineMethod(self, name: str, attributes: Reflection.MethodAttributes, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> MethodBuilder: ...
    @overload
    def DefineMethod(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> MethodBuilder: ...
    @overload
    def DefineMethod(self, name: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, returnTypeRequiredCustomModifiers: System.System.Array[System.Type], returnTypeOptionalCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], parameterTypeRequiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], parameterTypeOptionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> MethodBuilder: ...
    @overload
    def DefineMethodOverride(self, methodInfoBody: Reflection.MethodInfo, methodInfoDeclaration: Reflection.MethodInfo) -> None: ...
    @overload
    def DefineNestedType(self, name: str) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, interfaces: System.System.Array[System.Type]) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, packSize: PackingSize) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, typeSize: int) -> TypeBuilder: ...
    @overload
    def DefineNestedType(self, name: str, attr: Reflection.TypeAttributes, parent: System.Type, packSize: PackingSize, typeSize: int) -> TypeBuilder: ...
    @overload
    def DefinePInvokeMethod(self, name: str, dllName: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], nativeCallConv: InteropServices.CallingConvention, nativeCharSet: InteropServices.CharSet) -> MethodBuilder: ...
    @overload
    def DefinePInvokeMethod(self, name: str, dllName: str, entryName: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type], nativeCallConv: InteropServices.CallingConvention, nativeCharSet: InteropServices.CharSet) -> MethodBuilder: ...
    @overload
    def DefinePInvokeMethod(self, name: str, dllName: str, entryName: str, attributes: Reflection.MethodAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, returnTypeRequiredCustomModifiers: System.System.Array[System.Type], returnTypeOptionalCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], parameterTypeRequiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], parameterTypeOptionalCustomModifiers: System.System.Array[System.System.Array[System.Type]], nativeCallConv: InteropServices.CallingConvention, nativeCharSet: InteropServices.CharSet) -> MethodBuilder: ...
    @overload
    def DefineProperty(self, name: str, attributes: Reflection.PropertyAttributes, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> PropertyBuilder: ...
    @overload
    def DefineProperty(self, name: str, attributes: Reflection.PropertyAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, parameterTypes: System.System.Array[System.Type]) -> PropertyBuilder: ...
    @overload
    def DefineProperty(self, name: str, attributes: Reflection.PropertyAttributes, returnType: System.Type, returnTypeRequiredCustomModifiers: System.System.Array[System.Type], returnTypeOptionalCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], parameterTypeRequiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], parameterTypeOptionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> PropertyBuilder: ...
    @overload
    def DefineProperty(self, name: str, attributes: Reflection.PropertyAttributes, callingConvention: Reflection.CallingConventions, returnType: System.Type, returnTypeRequiredCustomModifiers: System.System.Array[System.Type], returnTypeOptionalCustomModifiers: System.System.Array[System.Type], parameterTypes: System.System.Array[System.Type], parameterTypeRequiredCustomModifiers: System.System.Array[System.System.Array[System.Type]], parameterTypeOptionalCustomModifiers: System.System.Array[System.System.Array[System.Type]]) -> PropertyBuilder: ...
    @overload
    def DefineTypeInitializer() -> ConstructorBuilder: ...
    @overload
    def DefineUninitializedData(self, name: str, size: int, attributes: Reflection.FieldAttributes) -> FieldBuilder: ...
    @property
    def Assembly(self) -> Reflection.Assembly: ...
    @property
    def AssemblyQualifiedName(self) -> str: ...
    @property
    def BaseType(self) -> System.Type: ...
    @property
    def DeclaringMethod(self) -> Reflection.MethodBase: ...
    @property
    def DeclaringType(self) -> System.Type: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GenericParameterAttributes(self) -> Reflection.GenericParameterAttributes: ...
    @property
    def GenericParameterPosition(self) -> int: ...
    @property
    def GUID(self) -> System.Guid: ...
    @property
    def IsByRefLike(self) -> bool: ...
    @property
    def IsConstructedGenericType(self) -> bool: ...
    @property
    def IsGenericParameter(self) -> bool: ...
    @property
    def IsGenericType(self) -> bool: ...
    @property
    def IsGenericTypeDefinition(self) -> bool: ...
    @property
    def IsSecurityCritical(self) -> bool: ...
    @property
    def IsSecuritySafeCritical(self) -> bool: ...
    @property
    def IsSecurityTransparent(self) -> bool: ...
    @property
    def IsSZArray(self) -> bool: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Module(self) -> Reflection.Module: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def PackingSize(self) -> PackingSize: ...
    @property
    def ReflectedType(self) -> System.Type: ...
    @property
    def Size(self) -> int: ...
    @property
    def TypeHandle(self) -> System.RuntimeTypeHandle: ...
    @property
    def UnderlyingSystemType(self) -> System.Type: ...
    @overload
    @staticmethod
    def GetConstructor(type_: System.Type, constructor: Reflection.ConstructorInfo) -> Reflection.ConstructorInfo: ...
    @overload
    def GetConstructors(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.ConstructorInfo]: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetCustomAttributes(self, attributeType: System.Type, inherit: bool) -> System.System.Array[object]: ...
    @overload
    def GetElementType() -> System.Type: ...
    @overload
    def GetEvent(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.EventInfo: ...
    @overload
    def GetEvents() -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    def GetEvents(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.EventInfo]: ...
    @overload
    @staticmethod
    def GetField(type_: System.Type, field: Reflection.FieldInfo) -> Reflection.FieldInfo: ...
    @overload
    def GetField(self, name: str, bindingAttr: Reflection.BindingFlags) -> Reflection.FieldInfo: ...
    @overload
    def GetFields(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.FieldInfo]: ...
    @overload
    def GetGenericArguments() -> System.System.Array[System.Type]: ...
    @overload
    def GetGenericTypeDefinition() -> System.Type: ...
    @overload
    def GetInterface(self, name: str, ignoreCase: bool) -> System.Type: ...
    @overload
    def GetInterfaceMap(self, interfaceType: System.Type) -> Reflection.InterfaceMapping: ...
    @overload
    def GetInterfaces() -> System.System.Array[System.Type]: ...
    @overload
    def GetMember(self, name: str, type_: Reflection.MemberTypes, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    def GetMembers(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MemberInfo]: ...
    @overload
    @staticmethod
    def GetMethod(type_: System.Type, method: Reflection.MethodInfo) -> Reflection.MethodInfo: ...
    @overload
    def GetMethods(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.MethodInfo]: ...
    @overload
    def GetNestedType(self, name: str, bindingAttr: Reflection.BindingFlags) -> System.Type: ...
    @overload
    def GetNestedTypes(self, bindingAttr: Reflection.BindingFlags) -> System.System.Array[System.Type]: ...
    @overload
    def GetProperties(self, bindingAttr: Reflection.BindingFlags) -> Reflection.System.Array[Reflection.PropertyInfo]: ...
    @overload
    def InvokeMember(self, name: str, invokeAttr: Reflection.BindingFlags, binder: Reflection.Binder, target: object, args: System.System.Array[object], modifiers: Reflection.System.Array[Reflection.ParameterModifier], culture: Globalization.CultureInfo, namedParameters: System.System.Array[str]) -> object: ...
    @overload
    def IsAssignableFrom(self, c: System.Type) -> bool: ...
    @overload
    def IsAssignableFrom(self, typeInfo: Reflection.TypeInfo) -> bool: ...
    @overload
    def IsCreated() -> bool: ...
    @overload
    def IsDefined(self, attributeType: System.Type, inherit: bool) -> bool: ...
    @overload
    def IsSubclassOf(self, c: System.Type) -> bool: ...
    @overload
    def MakeArrayType() -> System.Type: ...
    @overload
    def MakeArrayType(self, rank: int) -> System.Type: ...
    @overload
    def MakeByRefType() -> System.Type: ...
    @overload
    def MakeGenericType(self, typeArguments: System.System.Array[System.Type]) -> System.Type: ...
    @overload
    def MakePointerType() -> System.Type: ...
    @overload
    def SetCustomAttribute(self, customBuilder: CustomAttributeBuilder) -> None: ...
    @overload
    def SetCustomAttribute(self, con: Reflection.ConstructorInfo, binaryAttribute: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetParent(self, parent: System.Type) -> None: ...
    @overload
    def ToString() -> str: ...

class AssemblyBuilderAccess(enum.Enum):
    Run = 1
    RunAndCollect = 9

class FlowControl(enum.Enum):
    Branch = 0
    Break = 1
    Call = 2
    Cond_Branch = 3
    Meta = 4
    Next = 5
    Phi = 6
    Return = 7
    Throw = 8

class Label(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: Label) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class OpCode(System.ValueType):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: OpCode) -> bool: ...
    @property
    def FlowControl(self) -> FlowControl: ...
    @property
    def Name(self) -> str: ...
    @property
    def OpCodeType(self) -> OpCodeType: ...
    @property
    def OperandType(self) -> OperandType: ...
    @property
    def Size(self) -> int: ...
    @property
    def StackBehaviourPop(self) -> StackBehaviour: ...
    @property
    def StackBehaviourPush(self) -> StackBehaviour: ...
    @property
    def Value(self) -> System.Int16: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...

class OpCodes(object):
    """    """
    @property
    def Nop(self) -> OpCode: ...
    @property
    def Break(self) -> OpCode: ...
    @property
    def Ldarg_0(self) -> OpCode: ...
    @property
    def Ldarg_1(self) -> OpCode: ...
    @property
    def Ldarg_2(self) -> OpCode: ...
    @property
    def Ldarg_3(self) -> OpCode: ...
    @property
    def Ldloc_0(self) -> OpCode: ...
    @property
    def Ldloc_1(self) -> OpCode: ...
    @property
    def Ldloc_2(self) -> OpCode: ...
    @property
    def Ldloc_3(self) -> OpCode: ...
    @property
    def Stloc_0(self) -> OpCode: ...
    @property
    def Stloc_1(self) -> OpCode: ...
    @property
    def Stloc_2(self) -> OpCode: ...
    @property
    def Stloc_3(self) -> OpCode: ...
    @property
    def Ldarg_S(self) -> OpCode: ...
    @property
    def Ldarga_S(self) -> OpCode: ...
    @property
    def Starg_S(self) -> OpCode: ...
    @property
    def Ldloc_S(self) -> OpCode: ...
    @property
    def Ldloca_S(self) -> OpCode: ...
    @property
    def Stloc_S(self) -> OpCode: ...
    @property
    def Ldnull(self) -> OpCode: ...
    @property
    def Ldc_I4_M1(self) -> OpCode: ...
    @property
    def Ldc_I4_0(self) -> OpCode: ...
    @property
    def Ldc_I4_1(self) -> OpCode: ...
    @property
    def Ldc_I4_2(self) -> OpCode: ...
    @property
    def Ldc_I4_3(self) -> OpCode: ...
    @property
    def Ldc_I4_4(self) -> OpCode: ...
    @property
    def Ldc_I4_5(self) -> OpCode: ...
    @property
    def Ldc_I4_6(self) -> OpCode: ...
    @property
    def Ldc_I4_7(self) -> OpCode: ...
    @property
    def Ldc_I4_8(self) -> OpCode: ...
    @property
    def Ldc_I4_S(self) -> OpCode: ...
    @property
    def Ldc_I4(self) -> OpCode: ...
    @property
    def Ldc_I8(self) -> OpCode: ...
    @property
    def Ldc_R4(self) -> OpCode: ...
    @property
    def Ldc_R8(self) -> OpCode: ...
    @property
    def Dup(self) -> OpCode: ...
    @property
    def Pop(self) -> OpCode: ...
    @property
    def Jmp(self) -> OpCode: ...
    @property
    def Call(self) -> OpCode: ...
    @property
    def Calli(self) -> OpCode: ...
    @property
    def Ret(self) -> OpCode: ...
    @property
    def Br_S(self) -> OpCode: ...
    @property
    def Brfalse_S(self) -> OpCode: ...
    @property
    def Brtrue_S(self) -> OpCode: ...
    @property
    def Beq_S(self) -> OpCode: ...
    @property
    def Bge_S(self) -> OpCode: ...
    @property
    def Bgt_S(self) -> OpCode: ...
    @property
    def Ble_S(self) -> OpCode: ...
    @property
    def Blt_S(self) -> OpCode: ...
    @property
    def Bne_Un_S(self) -> OpCode: ...
    @property
    def Bge_Un_S(self) -> OpCode: ...
    @property
    def Bgt_Un_S(self) -> OpCode: ...
    @property
    def Ble_Un_S(self) -> OpCode: ...
    @property
    def Blt_Un_S(self) -> OpCode: ...
    @property
    def Br(self) -> OpCode: ...
    @property
    def Brfalse(self) -> OpCode: ...
    @property
    def Brtrue(self) -> OpCode: ...
    @property
    def Beq(self) -> OpCode: ...
    @property
    def Bge(self) -> OpCode: ...
    @property
    def Bgt(self) -> OpCode: ...
    @property
    def Ble(self) -> OpCode: ...
    @property
    def Blt(self) -> OpCode: ...
    @property
    def Bne_Un(self) -> OpCode: ...
    @property
    def Bge_Un(self) -> OpCode: ...
    @property
    def Bgt_Un(self) -> OpCode: ...
    @property
    def Ble_Un(self) -> OpCode: ...
    @property
    def Blt_Un(self) -> OpCode: ...
    @property
    def Switch(self) -> OpCode: ...
    @property
    def Ldind_I1(self) -> OpCode: ...
    @property
    def Ldind_U1(self) -> OpCode: ...
    @property
    def Ldind_I2(self) -> OpCode: ...
    @property
    def Ldind_U2(self) -> OpCode: ...
    @property
    def Ldind_I4(self) -> OpCode: ...
    @property
    def Ldind_U4(self) -> OpCode: ...
    @property
    def Ldind_I8(self) -> OpCode: ...
    @property
    def Ldind_I(self) -> OpCode: ...
    @property
    def Ldind_R4(self) -> OpCode: ...
    @property
    def Ldind_R8(self) -> OpCode: ...
    @property
    def Ldind_Ref(self) -> OpCode: ...
    @property
    def Stind_Ref(self) -> OpCode: ...
    @property
    def Stind_I1(self) -> OpCode: ...
    @property
    def Stind_I2(self) -> OpCode: ...
    @property
    def Stind_I4(self) -> OpCode: ...
    @property
    def Stind_I8(self) -> OpCode: ...
    @property
    def Stind_R4(self) -> OpCode: ...
    @property
    def Stind_R8(self) -> OpCode: ...
    @property
    def Add(self) -> OpCode: ...
    @property
    def Sub(self) -> OpCode: ...
    @property
    def Mul(self) -> OpCode: ...
    @property
    def Div(self) -> OpCode: ...
    @property
    def Div_Un(self) -> OpCode: ...
    @property
    def Rem(self) -> OpCode: ...
    @property
    def Rem_Un(self) -> OpCode: ...
    @property
    def And(self) -> OpCode: ...
    @property
    def Or(self) -> OpCode: ...
    @property
    def Xor(self) -> OpCode: ...
    @property
    def Shl(self) -> OpCode: ...
    @property
    def Shr(self) -> OpCode: ...
    @property
    def Shr_Un(self) -> OpCode: ...
    @property
    def Neg(self) -> OpCode: ...
    @property
    def Not(self) -> OpCode: ...
    @property
    def Conv_I1(self) -> OpCode: ...
    @property
    def Conv_I2(self) -> OpCode: ...
    @property
    def Conv_I4(self) -> OpCode: ...
    @property
    def Conv_I8(self) -> OpCode: ...
    @property
    def Conv_R4(self) -> OpCode: ...
    @property
    def Conv_R8(self) -> OpCode: ...
    @property
    def Conv_U4(self) -> OpCode: ...
    @property
    def Conv_U8(self) -> OpCode: ...
    @property
    def Callvirt(self) -> OpCode: ...
    @property
    def Cpobj(self) -> OpCode: ...
    @property
    def Ldobj(self) -> OpCode: ...
    @property
    def Ldstr(self) -> OpCode: ...
    @property
    def Newobj(self) -> OpCode: ...
    @property
    def Castclass(self) -> OpCode: ...
    @property
    def Isinst(self) -> OpCode: ...
    @property
    def Conv_R_Un(self) -> OpCode: ...
    @property
    def Unbox(self) -> OpCode: ...
    @property
    def Throw(self) -> OpCode: ...
    @property
    def Ldfld(self) -> OpCode: ...
    @property
    def Ldflda(self) -> OpCode: ...
    @property
    def Stfld(self) -> OpCode: ...
    @property
    def Ldsfld(self) -> OpCode: ...
    @property
    def Ldsflda(self) -> OpCode: ...
    @property
    def Stsfld(self) -> OpCode: ...
    @property
    def Stobj(self) -> OpCode: ...
    @property
    def Conv_Ovf_I1_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_I2_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_I4_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_I8_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_U1_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_U2_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_U4_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_U8_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_I_Un(self) -> OpCode: ...
    @property
    def Conv_Ovf_U_Un(self) -> OpCode: ...
    @property
    def Box(self) -> OpCode: ...
    @property
    def Newarr(self) -> OpCode: ...
    @property
    def Ldlen(self) -> OpCode: ...
    @property
    def Ldelema(self) -> OpCode: ...
    @property
    def Ldelem_I1(self) -> OpCode: ...
    @property
    def Ldelem_U1(self) -> OpCode: ...
    @property
    def Ldelem_I2(self) -> OpCode: ...
    @property
    def Ldelem_U2(self) -> OpCode: ...
    @property
    def Ldelem_I4(self) -> OpCode: ...
    @property
    def Ldelem_U4(self) -> OpCode: ...
    @property
    def Ldelem_I8(self) -> OpCode: ...
    @property
    def Ldelem_I(self) -> OpCode: ...
    @property
    def Ldelem_R4(self) -> OpCode: ...
    @property
    def Ldelem_R8(self) -> OpCode: ...
    @property
    def Ldelem_Ref(self) -> OpCode: ...
    @property
    def Stelem_I(self) -> OpCode: ...
    @property
    def Stelem_I1(self) -> OpCode: ...
    @property
    def Stelem_I2(self) -> OpCode: ...
    @property
    def Stelem_I4(self) -> OpCode: ...
    @property
    def Stelem_I8(self) -> OpCode: ...
    @property
    def Stelem_R4(self) -> OpCode: ...
    @property
    def Stelem_R8(self) -> OpCode: ...
    @property
    def Stelem_Ref(self) -> OpCode: ...
    @property
    def Ldelem(self) -> OpCode: ...
    @property
    def Stelem(self) -> OpCode: ...
    @property
    def Unbox_Any(self) -> OpCode: ...
    @property
    def Conv_Ovf_I1(self) -> OpCode: ...
    @property
    def Conv_Ovf_U1(self) -> OpCode: ...
    @property
    def Conv_Ovf_I2(self) -> OpCode: ...
    @property
    def Conv_Ovf_U2(self) -> OpCode: ...
    @property
    def Conv_Ovf_I4(self) -> OpCode: ...
    @property
    def Conv_Ovf_U4(self) -> OpCode: ...
    @property
    def Conv_Ovf_I8(self) -> OpCode: ...
    @property
    def Conv_Ovf_U8(self) -> OpCode: ...
    @property
    def Refanyval(self) -> OpCode: ...
    @property
    def Ckfinite(self) -> OpCode: ...
    @property
    def Mkrefany(self) -> OpCode: ...
    @property
    def Ldtoken(self) -> OpCode: ...
    @property
    def Conv_U2(self) -> OpCode: ...
    @property
    def Conv_U1(self) -> OpCode: ...
    @property
    def Conv_I(self) -> OpCode: ...
    @property
    def Conv_Ovf_I(self) -> OpCode: ...
    @property
    def Conv_Ovf_U(self) -> OpCode: ...
    @property
    def Add_Ovf(self) -> OpCode: ...
    @property
    def Add_Ovf_Un(self) -> OpCode: ...
    @property
    def Mul_Ovf(self) -> OpCode: ...
    @property
    def Mul_Ovf_Un(self) -> OpCode: ...
    @property
    def Sub_Ovf(self) -> OpCode: ...
    @property
    def Sub_Ovf_Un(self) -> OpCode: ...
    @property
    def Endfinally(self) -> OpCode: ...
    @property
    def Leave(self) -> OpCode: ...
    @property
    def Leave_S(self) -> OpCode: ...
    @property
    def Stind_I(self) -> OpCode: ...
    @property
    def Conv_U(self) -> OpCode: ...
    @property
    def Prefix7(self) -> OpCode: ...
    @property
    def Prefix6(self) -> OpCode: ...
    @property
    def Prefix5(self) -> OpCode: ...
    @property
    def Prefix4(self) -> OpCode: ...
    @property
    def Prefix3(self) -> OpCode: ...
    @property
    def Prefix2(self) -> OpCode: ...
    @property
    def Prefix1(self) -> OpCode: ...
    @property
    def Prefixref(self) -> OpCode: ...
    @property
    def Arglist(self) -> OpCode: ...
    @property
    def Ceq(self) -> OpCode: ...
    @property
    def Cgt(self) -> OpCode: ...
    @property
    def Cgt_Un(self) -> OpCode: ...
    @property
    def Clt(self) -> OpCode: ...
    @property
    def Clt_Un(self) -> OpCode: ...
    @property
    def Ldftn(self) -> OpCode: ...
    @property
    def Ldvirtftn(self) -> OpCode: ...
    @property
    def Ldarg(self) -> OpCode: ...
    @property
    def Ldarga(self) -> OpCode: ...
    @property
    def Starg(self) -> OpCode: ...
    @property
    def Ldloc(self) -> OpCode: ...
    @property
    def Ldloca(self) -> OpCode: ...
    @property
    def Stloc(self) -> OpCode: ...
    @property
    def Localloc(self) -> OpCode: ...
    @property
    def Endfilter(self) -> OpCode: ...
    @property
    def Unaligned(self) -> OpCode: ...
    @property
    def Volatile(self) -> OpCode: ...
    @property
    def Tailcall(self) -> OpCode: ...
    @property
    def Initobj(self) -> OpCode: ...
    @property
    def Constrained(self) -> OpCode: ...
    @property
    def Cpblk(self) -> OpCode: ...
    @property
    def Initblk(self) -> OpCode: ...
    @property
    def Rethrow(self) -> OpCode: ...
    @property
    def Sizeof(self) -> OpCode: ...
    @property
    def Refanytype(self) -> OpCode: ...
    @property
    def Readonly(self) -> OpCode: ...
    @overload
    @staticmethod
    def TakesSingleByteArgument(inst: OpCode) -> bool: ...

class OpCodeType(enum.Enum):
    Annotation = 0
    Macro = 1
    Nternal = 2
    Objmodel = 3
    Prefix = 4
    Primitive = 5

class OperandType(enum.Enum):
    InlineBrTarget = 0
    InlineField = 1
    InlineI = 2
    InlineI8 = 3
    InlineMethod = 4
    InlineNone = 5
    InlinePhi = 6
    InlineR = 7
    InlineSig = 9
    InlineString = 10
    InlineSwitch = 11
    InlineTok = 12
    InlineType = 13
    InlineVar = 14
    ShortInlineBrTarget = 15
    ShortInlineI = 16
    ShortInlineR = 17
    ShortInlineVar = 18

class PackingSize(enum.Enum):
    Unspecified = 0
    Size1 = 1
    Size2 = 2
    Size4 = 4
    Size8 = 8
    Size16 = 16
    Size32 = 32
    Size64 = 64
    Size128 = 128

class PEFileKinds(enum.Enum):
    Dll = 1
    ConsoleApplication = 2
    WindowApplication = 3

class StackBehaviour(enum.Enum):
    Pop0 = 0
    Pop1 = 1
    Pop1_pop1 = 2
    Popi = 3
    Popi_pop1 = 4
    Popi_popi = 5
    Popi_popi8 = 6
    Popi_popi_popi = 7
    Popi_popr4 = 8
    Popi_popr8 = 9
    Popref = 10
    Popref_pop1 = 11
    Popref_popi = 12
    Popref_popi_popi = 13
    Popref_popi_popi8 = 14
    Popref_popi_popr4 = 15
    Popref_popi_popr8 = 16
    Popref_popi_popref = 17
    Push0 = 18
    Push1 = 19
    Push1_push1 = 20
    Pushi = 21
    Pushi8 = 22
    Pushr4 = 23
    Pushr8 = 24
    Pushref = 25
    Varpop = 26
    Varpush = 27
    Popref_popi_pop1 = 28

# endregion
