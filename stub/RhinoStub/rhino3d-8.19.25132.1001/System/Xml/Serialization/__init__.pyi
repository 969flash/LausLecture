"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["CodeGenerationOptions", "CodeIdentifier", "CodeIdentifiers", "ImportContext", "IXmlSerializable", "IXmlTextParser", "SchemaImporter", "SoapAttributeAttribute", "SoapAttributeOverrides", "SoapAttributes", "SoapElementAttribute", "SoapEnumAttribute", "SoapIgnoreAttribute", "SoapIncludeAttribute", "SoapReflectionImporter", "SoapSchemaMember", "SoapTypeAttribute", "XmlAnyAttributeAttribute", "XmlAnyElementAttribute", "XmlAnyElementAttributes", "XmlArrayAttribute", "XmlArrayItemAttribute", "XmlArrayItemAttributes", "XmlAttributeAttribute", "XmlAttributeOverrides", "XmlAttributes", "XmlChoiceIdentifierAttribute", "XmlElementAttribute", "XmlElementAttributes", "XmlEnumAttribute", "XmlIgnoreAttribute", "XmlIncludeAttribute", "XmlMappingAccess", "XmlMapping", "XmlMemberMapping", "XmlMembersMapping", "XmlNamespaceDeclarationsAttribute", "XmlReflectionImporter", "XmlReflectionMember", "XmlRootAttribute", "XmlSchemaExporter", "XmlSchemaImporter", "XmlSchemaProviderAttribute", "XmlSchemas", "XmlSchemaEnumerator", "XmlSerializationGeneratedCode", "XmlSerializationReader", "XmlSerializationFixupCallback", "XmlSerializationCollectionFixupCallback", "XmlSerializationReadCallback", "XmlSerializationWriter", "XmlSerializationWriteCallback", "XmlSerializerAssemblyAttribute", "XmlDeserializationEvents", "XmlSerializerImplementation", "XmlSerializer", "XmlSerializerFactory", "XmlSerializerNamespaces", "XmlSerializerVersionAttribute", "XmlTextAttribute", "XmlTypeAttribute", "XmlTypeMapping", "XmlAttributeEventHandler", "XmlAttributeEventArgs", "XmlElementEventHandler", "XmlElementEventArgs", "XmlNodeEventHandler", "XmlNodeEventArgs", "UnreferencedObjectEventHandler", "UnreferencedObjectEventArgs"]
# endregion

# region: Imports
from System import Collections
from System import IO
from System import Reflection
from System import Xml
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Xml import Schema
from typing import overload
import enum
import System
# endregion

# region: System.Private.Xml, Version=7.0.0.0

class CodeGenerationOptions(enum.Enum):
    None_ = 0
    GenerateProperties = 1
    GenerateNewAsync = 2
    GenerateOldAsync = 4
    GenerateOrder = 8
    EnableDataBinding = 16

class CodeIdentifier(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def MakeCamel(identifier: str) -> str: ...
    @overload
    @staticmethod
    def MakePascal(identifier: str) -> str: ...
    @overload
    @staticmethod
    def MakeValid(identifier: str) -> str: ...

class CodeIdentifiers(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, caseSensitive: bool): ...
    @overload
    def Add(self, identifier: str, value: object) -> None: ...
    @overload
    def AddReserved(self, identifier: str) -> None: ...
    @overload
    def AddUnique(self, identifier: str, value: object) -> str: ...
    @overload
    def Clear() -> None: ...
    @property
    def UseCamelCasing(self) -> bool: ...
    @overload
    def IsInUse(self, identifier: str) -> bool: ...
    @overload
    def MakeRightCase(self, identifier: str) -> str: ...
    @overload
    def MakeUnique(self, identifier: str) -> str: ...
    @overload
    def Remove(self, identifier: str) -> None: ...
    @overload
    def RemoveReserved(self, identifier: str) -> None: ...
    @UseCamelCasing.setter
    def UseCamelCasing(self, value: System.Void): ...
    @overload
    def ToArray(self, type_: System.Type) -> object: ...

class ImportContext(object):
    """    """
    def __init__(self, identifiers: CodeIdentifiers, shareTypes: bool): ...
    @property
    def ShareTypes(self) -> bool: ...
    @property
    def TypeIdentifiers(self) -> CodeIdentifiers: ...
    @property
    def Warnings(self) -> Specialized.StringCollection: ...

class IXmlSerializable:
    """    """
    @overload
    def GetSchema() -> Schema.XmlSchema: ...
    @overload
    def ReadXml(self, reader: Xml.XmlReader) -> None: ...
    @overload
    def WriteXml(self, writer: Xml.XmlWriter) -> None: ...

class IXmlTextParser:
    """    """
    @property
    def Normalized(self) -> bool: ...
    @property
    def WhitespaceHandling(self) -> Xml.WhitespaceHandling: ...
    @Normalized.setter
    def Normalized(self, value: System.Void): ...
    @WhitespaceHandling.setter
    def WhitespaceHandling(self, value: System.Void): ...

class SchemaImporter(object):
    """    """

class SoapAttributeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str): ...
    @property
    def AttributeName(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @AttributeName.setter
    def AttributeName(self, value: System.Void): ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...

class SoapAttributeOverrides(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, type_: System.Type, attributes: SoapAttributes) -> None: ...
    @overload
    def Add(self, type_: System.Type, member: str, attributes: SoapAttributes) -> None: ...
    @property
    def Item(self) -> SoapAttributes: ...
    @property
    def Item(self) -> SoapAttributes: ...

class SoapAttributes(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: Reflection.ICustomAttributeProvider): ...
    @property
    def SoapAttribute(self) -> SoapAttributeAttribute: ...
    @property
    def SoapDefaultValue(self) -> object: ...
    @property
    def SoapElement(self) -> SoapElementAttribute: ...
    @property
    def SoapEnum(self) -> SoapEnumAttribute: ...
    @property
    def SoapIgnore(self) -> bool: ...
    @property
    def SoapType(self) -> SoapTypeAttribute: ...
    @SoapAttribute.setter
    def SoapAttribute(self, value: System.Void): ...
    @SoapDefaultValue.setter
    def SoapDefaultValue(self, value: System.Void): ...
    @SoapElement.setter
    def SoapElement(self, value: System.Void): ...
    @SoapEnum.setter
    def SoapEnum(self, value: System.Void): ...
    @SoapIgnore.setter
    def SoapIgnore(self, value: System.Void): ...
    @SoapType.setter
    def SoapType(self, value: System.Void): ...

class SoapElementAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def IsNullable(self) -> bool: ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @ElementName.setter
    def ElementName(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...

class SoapEnumAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class SoapIgnoreAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class SoapIncludeAttribute(System.Attribute):
    """    """
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> System.Type: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class SoapReflectionImporter(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultNamespace: str): ...
    @overload
    def __init__(self, attributeOverrides: SoapAttributeOverrides): ...
    @overload
    def __init__(self, attributeOverrides: SoapAttributeOverrides, defaultNamespace: str): ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember]) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, writeAccessors: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, writeAccessors: bool, validate: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, writeAccessors: bool, validate: bool, access: XmlMappingAccess) -> XmlMembersMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type, defaultNamespace: str) -> XmlTypeMapping: ...
    @overload
    def IncludeType(self, type_: System.Type) -> None: ...
    @overload
    def IncludeTypes(self, provider: Reflection.ICustomAttributeProvider) -> None: ...

class SoapSchemaMember(object):
    """    """
    def __init__(self): ...
    @property
    def MemberName(self) -> str: ...
    @property
    def MemberType(self) -> Xml.XmlQualifiedName: ...
    @MemberName.setter
    def MemberName(self, value: System.Void): ...
    @MemberType.setter
    def MemberType(self, value: System.Void): ...

class SoapTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeName: str, ns: str): ...
    @property
    def IncludeInSchema(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @IncludeInSchema.setter
    def IncludeInSchema(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @TypeName.setter
    def TypeName(self, value: System.Void): ...

class XmlAnyAttributeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class XmlAnyElementAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...

class XmlAnyElementAttributes(Collections.CollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, attribute: XmlAnyElementAttribute) -> int: ...
    @overload
    def Contains(self, attribute: XmlAnyElementAttribute) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[XmlAnyElementAttribute], index: int) -> None: ...
    @property
    def Item(self) -> XmlAnyElementAttribute: ...
    @overload
    def IndexOf(self, attribute: XmlAnyElementAttribute) -> int: ...
    @overload
    def Insert(self, index: int, attribute: XmlAnyElementAttribute) -> None: ...
    @overload
    def Remove(self, attribute: XmlAnyElementAttribute) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class XmlArrayAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> Schema.XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @ElementName.setter
    def ElementName(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...

class XmlArrayItemAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, elementName: str, type_: System.Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> Schema.XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def NestingLevel(self) -> int: ...
    @property
    def Type(self) -> System.Type: ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @ElementName.setter
    def ElementName(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @NestingLevel.setter
    def NestingLevel(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class XmlArrayItemAttributes(Collections.CollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, attribute: XmlArrayItemAttribute) -> int: ...
    @overload
    def Contains(self, attribute: XmlArrayItemAttribute) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[XmlArrayItemAttribute], index: int) -> None: ...
    @property
    def Item(self) -> XmlArrayItemAttribute: ...
    @overload
    def IndexOf(self, attribute: XmlArrayItemAttribute) -> int: ...
    @overload
    def Insert(self, index: int, attribute: XmlArrayItemAttribute) -> None: ...
    @overload
    def Remove(self, attribute: XmlArrayItemAttribute) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class XmlAttributeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, attributeName: str, type_: System.Type): ...
    @property
    def AttributeName(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def Form(self) -> Schema.XmlSchemaForm: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @AttributeName.setter
    def AttributeName(self, value: System.Void): ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class XmlAttributeOverrides(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, type_: System.Type, attributes: XmlAttributes) -> None: ...
    @overload
    def Add(self, type_: System.Type, member: str, attributes: XmlAttributes) -> None: ...
    @property
    def Item(self) -> XmlAttributes: ...
    @property
    def Item(self) -> XmlAttributes: ...

class XmlAttributes(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: Reflection.ICustomAttributeProvider): ...
    @property
    def XmlAnyAttribute(self) -> XmlAnyAttributeAttribute: ...
    @property
    def XmlAnyElements(self) -> XmlAnyElementAttributes: ...
    @property
    def XmlArray(self) -> XmlArrayAttribute: ...
    @property
    def XmlArrayItems(self) -> XmlArrayItemAttributes: ...
    @property
    def XmlAttribute(self) -> XmlAttributeAttribute: ...
    @property
    def XmlChoiceIdentifier(self) -> XmlChoiceIdentifierAttribute: ...
    @property
    def XmlDefaultValue(self) -> object: ...
    @property
    def XmlElements(self) -> XmlElementAttributes: ...
    @property
    def XmlEnum(self) -> XmlEnumAttribute: ...
    @property
    def XmlIgnore(self) -> bool: ...
    @property
    def Xmlns(self) -> bool: ...
    @property
    def XmlRoot(self) -> XmlRootAttribute: ...
    @property
    def XmlText(self) -> XmlTextAttribute: ...
    @property
    def XmlType(self) -> XmlTypeAttribute: ...
    @XmlAnyAttribute.setter
    def XmlAnyAttribute(self, value: System.Void): ...
    @XmlArray.setter
    def XmlArray(self, value: System.Void): ...
    @XmlAttribute.setter
    def XmlAttribute(self, value: System.Void): ...
    @XmlDefaultValue.setter
    def XmlDefaultValue(self, value: System.Void): ...
    @XmlEnum.setter
    def XmlEnum(self, value: System.Void): ...
    @XmlIgnore.setter
    def XmlIgnore(self, value: System.Void): ...
    @Xmlns.setter
    def Xmlns(self, value: System.Void): ...
    @XmlRoot.setter
    def XmlRoot(self, value: System.Void): ...
    @XmlText.setter
    def XmlText(self, value: System.Void): ...
    @XmlType.setter
    def XmlType(self, value: System.Void): ...

class XmlChoiceIdentifierAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def MemberName(self) -> str: ...
    @MemberName.setter
    def MemberName(self, value: System.Void): ...

class XmlElementAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, elementName: str, type_: System.Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> Schema.XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Type(self) -> System.Type: ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @ElementName.setter
    def ElementName(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @Order.setter
    def Order(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class XmlElementAttributes(Collections.CollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, attribute: XmlElementAttribute) -> int: ...
    @overload
    def Contains(self, attribute: XmlElementAttribute) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[XmlElementAttribute], index: int) -> None: ...
    @property
    def Item(self) -> XmlElementAttribute: ...
    @overload
    def IndexOf(self, attribute: XmlElementAttribute) -> int: ...
    @overload
    def Insert(self, index: int, attribute: XmlElementAttribute) -> None: ...
    @overload
    def Remove(self, attribute: XmlElementAttribute) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class XmlEnumAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class XmlIgnoreAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class XmlIncludeAttribute(System.Attribute):
    """    """
    def __init__(self, type_: System.Type): ...
    @property
    def Type(self) -> System.Type: ...
    @Type.setter
    def Type(self, value: System.Void): ...

class XmlMappingAccess(enum.Enum):
    None_ = 0
    Read = 1
    Write = 2

class XmlMapping(object):
    """    """
    @property
    def ElementName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def XsdElementName(self) -> str: ...
    @overload
    def SetKey(self, key: str) -> None: ...

class XmlMemberMapping(object):
    """    """
    @property
    def Any(self) -> bool: ...
    @property
    def CheckSpecified(self) -> bool: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeFullName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def TypeNamespace(self) -> str: ...
    @property
    def XsdElementName(self) -> str: ...

class XmlMembersMapping(XmlMapping):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> XmlMemberMapping: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def TypeNamespace(self) -> str: ...

class XmlNamespaceDeclarationsAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class XmlReflectionImporter(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultNamespace: str): ...
    @overload
    def __init__(self, attributeOverrides: XmlAttributeOverrides): ...
    @overload
    def __init__(self, attributeOverrides: XmlAttributeOverrides, defaultNamespace: str): ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, rpc: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, rpc: bool, openModel: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: System.Array[XmlReflectionMember], hasWrapperElement: bool, rpc: bool, openModel: bool, access: XmlMappingAccess) -> XmlMembersMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type, defaultNamespace: str) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type, root: XmlRootAttribute) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type_: System.Type, root: XmlRootAttribute, defaultNamespace: str) -> XmlTypeMapping: ...
    @overload
    def IncludeType(self, type_: System.Type) -> None: ...
    @overload
    def IncludeTypes(self, provider: Reflection.ICustomAttributeProvider) -> None: ...

class XmlReflectionMember(object):
    """    """
    def __init__(self): ...
    @property
    def IsReturnValue(self) -> bool: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def MemberType(self) -> System.Type: ...
    @property
    def OverrideIsNullable(self) -> bool: ...
    @property
    def SoapAttributes(self) -> SoapAttributes: ...
    @property
    def XmlAttributes(self) -> XmlAttributes: ...
    @IsReturnValue.setter
    def IsReturnValue(self, value: System.Void): ...
    @MemberName.setter
    def MemberName(self, value: System.Void): ...
    @MemberType.setter
    def MemberType(self, value: System.Void): ...
    @OverrideIsNullable.setter
    def OverrideIsNullable(self, value: System.Void): ...
    @SoapAttributes.setter
    def SoapAttributes(self, value: System.Void): ...
    @XmlAttributes.setter
    def XmlAttributes(self, value: System.Void): ...

class XmlRootAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @ElementName.setter
    def ElementName(self, value: System.Void): ...
    @IsNullable.setter
    def IsNullable(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...

class XmlSchemaExporter(object):
    """    """
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def ExportAnyType(self, ns: str) -> str: ...
    @overload
    def ExportAnyType(self, members: XmlMembersMapping) -> str: ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping) -> None: ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping, exportEnclosingType: bool) -> None: ...
    @overload
    def ExportTypeMapping(self, xmlTypeMapping: XmlTypeMapping) -> None: ...
    @overload
    def ExportTypeMapping(self, xmlMembersMapping: XmlMembersMapping) -> Xml.XmlQualifiedName: ...

class XmlSchemaImporter(SchemaImporter):
    """    """
    @overload
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def __init__(self, schemas: XmlSchemas, typeIdentifiers: CodeIdentifiers): ...
    @overload
    def ImportAnyType(self, typeName: Xml.XmlQualifiedName, elementName: str) -> XmlMembersMapping: ...
    @overload
    def ImportDerivedTypeMapping(self, name: Xml.XmlQualifiedName, baseType: System.Type) -> XmlTypeMapping: ...
    @overload
    def ImportDerivedTypeMapping(self, name: Xml.XmlQualifiedName, baseType: System.Type, baseTypeCanBeIndirect: bool) -> XmlTypeMapping: ...
    @overload
    def ImportMembersMapping(self, name: Xml.XmlQualifiedName) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, names: Xml.System.Array[Xml.XmlQualifiedName]) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, names: Xml.System.Array[Xml.XmlQualifiedName], baseType: System.Type, baseTypeCanBeIndirect: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, members: System.Array[SoapSchemaMember]) -> XmlMembersMapping: ...
    @overload
    def ImportSchemaType(self, typeName: Xml.XmlQualifiedName) -> XmlTypeMapping: ...
    @overload
    def ImportSchemaType(self, typeName: Xml.XmlQualifiedName, baseType: System.Type) -> XmlTypeMapping: ...
    @overload
    def ImportSchemaType(self, typeName: Xml.XmlQualifiedName, baseType: System.Type, baseTypeCanBeIndirect: bool) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, name: Xml.XmlQualifiedName) -> XmlTypeMapping: ...

class XmlSchemaProviderAttribute(System.Attribute):
    """    """
    def __init__(self, methodName: str): ...
    @property
    def IsAny(self) -> bool: ...
    @property
    def MethodName(self) -> str: ...
    @IsAny.setter
    def IsAny(self, value: System.Void): ...

class XmlSchemas(Collections.CollectionBase):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, schema: Schema.XmlSchema) -> int: ...
    @overload
    def Add(self, schemas: XmlSchemas) -> None: ...
    @overload
    def Add(self, schema: Schema.XmlSchema, baseUri: System.Uri) -> int: ...
    @overload
    def AddReference(self, schema: Schema.XmlSchema) -> None: ...
    @overload
    def Compile(self, handler: Schema.ValidationEventHandler, fullCompile: bool) -> None: ...
    @overload
    def Contains(self, schema: Schema.XmlSchema) -> bool: ...
    @overload
    def Contains(self, targetNamespace: str) -> bool: ...
    @overload
    def CopyTo(self, array: Schema.System.Array[Schema.XmlSchema], index: int) -> None: ...
    @overload
    def Find(self, name: Xml.XmlQualifiedName, type_: System.Type) -> object: ...
    @property
    def IsCompiled(self) -> bool: ...
    @property
    def Item(self) -> Schema.XmlSchema: ...
    @property
    def Item(self) -> Schema.XmlSchema: ...
    @overload
    def GetSchemas(self, ns: str) -> Collections.IList: ...
    @overload
    def IndexOf(self, schema: Schema.XmlSchema) -> int: ...
    @overload
    def Insert(self, index: int, schema: Schema.XmlSchema) -> None: ...
    @overload
    @staticmethod
    def IsDataSet(schema: Schema.XmlSchema) -> bool: ...
    @overload
    def Remove(self, schema: Schema.XmlSchema) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class XmlSchemaEnumerator(object):
    """    """
    def __init__(self, list_: XmlSchemas): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Schema.XmlSchema: ...
    @overload
    def MoveNext() -> bool: ...

class XmlSerializationGeneratedCode(object):
    """    """

class XmlSerializationReader(XmlSerializationGeneratedCode):
    """    """

class XmlSerializationFixupCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, fixup: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, fixup: object) -> None: ...

class XmlSerializationCollectionFixupCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, collection: object, collectionItems: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, collection: object, collectionItems: object) -> None: ...

class XmlSerializationReadCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> object: ...
    @overload
    def Invoke() -> object: ...

class XmlSerializationWriter(XmlSerializationGeneratedCode):
    """    """

class XmlSerializationWriteCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, o: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, o: object) -> None: ...

class XmlSerializerAssemblyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assemblyName: str): ...
    @overload
    def __init__(self, assemblyName: str, codeBase: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def CodeBase(self) -> str: ...
    @AssemblyName.setter
    def AssemblyName(self, value: System.Void): ...
    @CodeBase.setter
    def CodeBase(self, value: System.Void): ...

class XmlDeserializationEvents(System.ValueType):
    """    """
    @property
    def OnUnknownAttribute(self) -> XmlAttributeEventHandler: ...
    @property
    def OnUnknownElement(self) -> XmlElementEventHandler: ...
    @property
    def OnUnknownNode(self) -> XmlNodeEventHandler: ...
    @property
    def OnUnreferencedObject(self) -> UnreferencedObjectEventHandler: ...
    @OnUnknownAttribute.setter
    def OnUnknownAttribute(self, value: System.Void): ...
    @OnUnknownElement.setter
    def OnUnknownElement(self, value: System.Void): ...
    @OnUnknownNode.setter
    def OnUnknownNode(self, value: System.Void): ...
    @OnUnreferencedObject.setter
    def OnUnreferencedObject(self, value: System.Void): ...

class XmlSerializerImplementation(object):
    """    """
    @overload
    def CanSerialize(self, type_: System.Type) -> bool: ...
    @property
    def Reader(self) -> XmlSerializationReader: ...
    @property
    def ReadMethods(self) -> Collections.Hashtable: ...
    @property
    def TypedSerializers(self) -> Collections.Hashtable: ...
    @property
    def WriteMethods(self) -> Collections.Hashtable: ...
    @property
    def Writer(self) -> XmlSerializationWriter: ...
    @overload
    def GetSerializer(self, type_: System.Type) -> XmlSerializer: ...

class XmlSerializer(object):
    """    """
    @overload
    def __init__(self, xmlTypeMapping: XmlTypeMapping): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, type_: System.Type, root: XmlRootAttribute): ...
    @overload
    def __init__(self, type_: System.Type, extraTypes: System.System.Array[System.Type]): ...
    @overload
    def __init__(self, type_: System.Type, overrides: XmlAttributeOverrides): ...
    @overload
    def __init__(self, type_: System.Type, defaultNamespace: str): ...
    @overload
    def __init__(self, type_: System.Type, overrides: XmlAttributeOverrides, extraTypes: System.System.Array[System.Type], root: XmlRootAttribute, defaultNamespace: str): ...
    @overload
    def __init__(self, type_: System.Type, overrides: XmlAttributeOverrides, extraTypes: System.System.Array[System.Type], root: XmlRootAttribute, defaultNamespace: str, location: str): ...
    @overload
    def CanDeserialize(self, xmlReader: Xml.XmlReader) -> bool: ...
    @overload
    def Deserialize(self, stream: IO.Stream) -> object: ...
    @overload
    def Deserialize(self, textReader: IO.TextReader) -> object: ...
    @overload
    def Deserialize(self, xmlReader: Xml.XmlReader) -> object: ...
    @overload
    def Deserialize(self, xmlReader: Xml.XmlReader, events: XmlDeserializationEvents) -> object: ...
    @overload
    def Deserialize(self, xmlReader: Xml.XmlReader, encodingStyle: str) -> object: ...
    @overload
    def Deserialize(self, xmlReader: Xml.XmlReader, encodingStyle: str, events: XmlDeserializationEvents) -> object: ...
    @overload
    @staticmethod
    def FromMappings(mappings: System.Array[XmlMapping]) -> System.Array[XmlSerializer]: ...
    @overload
    @staticmethod
    def FromMappings(mappings: System.Array[XmlMapping], type_: System.Type) -> System.Array[XmlSerializer]: ...
    @overload
    @staticmethod
    def FromTypes(types: System.System.Array[System.Type]) -> System.Array[XmlSerializer]: ...
    @overload
    @staticmethod
    def GetXmlSerializerAssemblyName(type_: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetXmlSerializerAssemblyName(type_: System.Type, defaultNamespace: str) -> str: ...
    @overload
    def Serialize(self, xmlWriter: Xml.XmlWriter, o: object) -> None: ...
    @overload
    def Serialize(self, stream: IO.Stream, o: object) -> None: ...
    @overload
    def Serialize(self, textWriter: IO.TextWriter, o: object) -> None: ...
    @overload
    def Serialize(self, xmlWriter: Xml.XmlWriter, o: object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, stream: IO.Stream, o: object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, textWriter: IO.TextWriter, o: object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, xmlWriter: Xml.XmlWriter, o: object, namespaces: XmlSerializerNamespaces, encodingStyle: str) -> None: ...
    @overload
    def Serialize(self, xmlWriter: Xml.XmlWriter, o: object, namespaces: XmlSerializerNamespaces, encodingStyle: str, id_: str) -> None: ...
    @property
    def UnknownNode(self): ...
    @property
    def UnknownAttribute(self): ...
    @property
    def UnknownElement(self): ...
    @property
    def UnreferencedObject(self): ...

class XmlSerializerFactory(object):
    """    """
    def __init__(self): ...
    @overload
    def CreateSerializer(self, xmlTypeMapping: XmlTypeMapping) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, root: XmlRootAttribute) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, extraTypes: System.System.Array[System.Type]) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, overrides: XmlAttributeOverrides) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, defaultNamespace: str) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, overrides: XmlAttributeOverrides, extraTypes: System.System.Array[System.Type], root: XmlRootAttribute, defaultNamespace: str) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type_: System.Type, overrides: XmlAttributeOverrides, extraTypes: System.System.Array[System.Type], root: XmlRootAttribute, defaultNamespace: str, location: str) -> XmlSerializer: ...

class XmlSerializerNamespaces(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, namespaces: XmlSerializerNamespaces): ...
    @overload
    def __init__(self, namespaces: Xml.System.Array[Xml.XmlQualifiedName]): ...
    @overload
    def Add(self, prefix: str, ns: str) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def ToArray() -> Xml.System.Array[Xml.XmlQualifiedName]: ...

class XmlSerializerVersionAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ParentAssemblyId(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def Version(self) -> str: ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ParentAssemblyId.setter
    def ParentAssemblyId(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...

class XmlTextAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type_: System.Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def Type(self) -> System.Type: ...
    @DataType.setter
    def DataType(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class XmlTypeAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def AnonymousType(self) -> bool: ...
    @property
    def IncludeInSchema(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @AnonymousType.setter
    def AnonymousType(self, value: System.Void): ...
    @IncludeInSchema.setter
    def IncludeInSchema(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @TypeName.setter
    def TypeName(self, value: System.Void): ...

class XmlTypeMapping(XmlMapping):
    """    """
    @property
    def TypeFullName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def XsdTypeName(self) -> str: ...
    @property
    def XsdTypeNamespace(self) -> str: ...

class XmlAttributeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: XmlAttributeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: XmlAttributeEventArgs) -> None: ...

class XmlAttributeEventArgs(System.EventArgs):
    """    """
    @property
    def Attr(self) -> Xml.XmlAttribute: ...
    @property
    def ExpectedAttributes(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def ObjectBeingDeserialized(self) -> object: ...

class XmlElementEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: XmlElementEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: XmlElementEventArgs) -> None: ...

class XmlElementEventArgs(System.EventArgs):
    """    """
    @property
    def Element(self) -> Xml.XmlElement: ...
    @property
    def ExpectedElements(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def ObjectBeingDeserialized(self) -> object: ...

class XmlNodeEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: XmlNodeEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: XmlNodeEventArgs) -> None: ...

class XmlNodeEventArgs(System.EventArgs):
    """    """
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NodeType(self) -> Xml.XmlNodeType: ...
    @property
    def ObjectBeingDeserialized(self) -> object: ...
    @property
    def Text(self) -> str: ...

class UnreferencedObjectEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: UnreferencedObjectEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: UnreferencedObjectEventArgs) -> None: ...

class UnreferencedObjectEventArgs(System.EventArgs):
    """    """
    def __init__(self, o: object, id_: str): ...
    @property
    def UnreferencedId(self) -> str: ...
    @property
    def UnreferencedObject(self) -> object: ...

# endregion
