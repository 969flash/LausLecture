"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Schema", "Xsl", "XPath", "Resolvers", "Serialization", "XmlNamedNodeMap", "IHasXmlNode", "IXmlLineInfo", "IXmlNamespaceResolver", "NameTable", "XmlDateTimeSerializationMode", "XmlConvert", "XmlException", "XmlNamespaceManager", "XmlNamespaceScope", "XmlNameTable", "XmlNodeOrder", "XmlNodeType", "XmlQualifiedName", "XmlResolver", "XmlUrlResolver", "ConformanceLevel", "DtdProcessing", "EntityHandling", "NamespaceHandling", "NewLineHandling", "ReadState", "ValidationType", "WhitespaceHandling", "XmlParserContext", "XmlReader", "XmlReaderSettings", "XmlSpace", "XmlTextReader", "Formatting", "XmlTextWriter", "WriteState", "XmlWriter", "XmlOutputMethod", "XmlWriterSettings", "XmlAttribute", "XmlAttributeCollection", "XmlCDataSection", "XmlCharacterData", "XmlComment", "XmlDeclaration", "XmlDocument", "XmlDocumentFragment", "XmlDocumentType", "XmlElement", "XmlEntity", "XmlEntityReference", "XmlNodeChangedAction", "XmlImplementation", "XmlLinkedNode", "XmlNode", "XmlNodeChangedEventArgs", "XmlNodeChangedEventHandler", "XmlNodeList", "XmlNodeReader", "XmlNotation", "XmlProcessingInstruction", "XmlSignificantWhitespace", "XmlText", "XmlWhitespace", "XmlTokenizedType"]
# endregion

# region: Imports
from System import Collections
from System import IO
from System import Text
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Threading import Tasks
from System.Xml import Schema
from System.Xml import XPath
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["XPath"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = []
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["IFragmentCapableXmlDictionaryWriter", "IStreamProvider", "IXmlDictionary", "UniqueId", "IXmlBinaryReaderInitializer", "XmlBinaryReaderSession", "IXmlBinaryWriterInitializer", "XmlBinaryWriterSession", "XmlDictionary", "XmlDictionaryWriter", "OnXmlDictionaryReaderClose", "XmlDictionaryReader", "XmlDictionaryReaderQuotaTypes", "XmlDictionaryReaderQuotas", "XmlDictionaryString", "IXmlTextReaderInitializer", "IXmlTextWriterInitializer"]
# endregion

# region: Imports
from System import IO
from System import Text
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["XPath", "Schema", "Linq"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: System.Private.DataContractSerialization, Version=7.0.0.0

class IFragmentCapableXmlDictionaryWriter:
    """    """
    @overload
    def EndFragment() -> None: ...
    @property
    def CanFragment(self) -> bool: ...
    @overload
    def StartFragment(self, stream: IO.Stream, generateSelfContainedTextFragment: bool) -> None: ...
    @overload
    def WriteFragment(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> None: ...

class IStreamProvider:
    """    """
    @overload
    def GetStream() -> IO.Stream: ...
    @overload
    def ReleaseStream(self, stream: IO.Stream) -> None: ...

class IXmlDictionary:
    """    """
    @overload
    def TryLookup(self, value: str) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, key: int) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, value: XmlDictionaryString) -> (bool, XmlDictionaryString): ...

class UniqueId(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, guid: System.Guid): ...
    @overload
    def __init__(self, guid: System.System.Array[System.Byte]): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, guid: System.System.Array[System.Byte], offset: int): ...
    @overload
    def __init__(self, chars: System.System.Array[System.Char], offset: int, count: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CharArrayLength(self) -> int: ...
    @property
    def IsGuid(self) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToCharArray(self, chars: System.System.Array[System.Char], offset: int) -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    def TryGetGuid() -> (bool, System.Guid): ...
    @overload
    def TryGetGuid(self, buffer: System.System.Array[System.Byte], offset: int) -> bool: ...

class IXmlBinaryReaderInitializer:
    """    """
    @overload
    def SetInput(self, stream: IO.Stream, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession, onClose: OnXmlDictionaryReaderClose) -> None: ...
    @overload
    def SetInput(self, buffer: System.System.Array[System.Byte], offset: int, count: int, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession, onClose: OnXmlDictionaryReaderClose) -> None: ...

class XmlBinaryReaderSession(object):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, id_: int, value: str) -> XmlDictionaryString: ...
    @overload
    def Clear() -> None: ...
    @overload
    def TryLookup(self, key: int) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, value: str) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, value: XmlDictionaryString) -> (bool, XmlDictionaryString): ...

class IXmlBinaryWriterInitializer:
    """    """
    @overload
    def SetOutput(self, stream: IO.Stream, dictionary: IXmlDictionary, session: XmlBinaryWriterSession, ownsStream: bool) -> None: ...

class XmlBinaryWriterSession(object):
    """    """
    def __init__(self): ...
    @overload
    def Reset() -> None: ...
    @overload
    def TryAdd(self, value: XmlDictionaryString) -> (bool, int): ...

class XmlDictionary(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def Add(self, value: str) -> XmlDictionaryString: ...
    @property
    def Empty(self) -> IXmlDictionary: ...
    @overload
    def TryLookup(self, value: str) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, key: int) -> (bool, XmlDictionaryString): ...
    @overload
    def TryLookup(self, value: XmlDictionaryString) -> (bool, XmlDictionaryString): ...

class XmlDictionaryWriter(XmlWriter):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def CreateBinaryWriter(stream: IO.Stream) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateBinaryWriter(stream: IO.Stream, dictionary: IXmlDictionary) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateBinaryWriter(stream: IO.Stream, dictionary: IXmlDictionary, session: XmlBinaryWriterSession) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateBinaryWriter(stream: IO.Stream, dictionary: IXmlDictionary, session: XmlBinaryWriterSession, ownsStream: bool) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateDictionaryWriter(writer: XmlWriter) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateMtomWriter(stream: IO.Stream, encoding: Text.Encoding, maxSizeInBytes: int, startInfo: str) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateMtomWriter(stream: IO.Stream, encoding: Text.Encoding, maxSizeInBytes: int, startInfo: str, boundary: str, startUri: str, writeMessageHeaders: bool, ownsStream: bool) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateTextWriter(stream: IO.Stream) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateTextWriter(stream: IO.Stream, encoding: Text.Encoding) -> XmlDictionaryWriter: ...
    @overload
    @staticmethod
    def CreateTextWriter(stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool) -> XmlDictionaryWriter: ...
    @overload
    def EndCanonicalization() -> None: ...
    @property
    def CanCanonicalize(self) -> bool: ...
    @overload
    def StartCanonicalization(self, stream: IO.Stream, includeComments: bool, inclusivePrefixes: System.System.Array[str]) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Single], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.Single], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Int64], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.Int64], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[int], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[int], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Int16], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.Int16], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[bool], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Decimal], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.Decimal], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[float], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.DateTime], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.DateTime], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.Guid], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Guid], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[System.TimeSpan], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.TimeSpan], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[bool], offset: int, count: int) -> None: ...
    @overload
    def WriteArray(self, prefix: str, localName: str, namespaceUri: str, array: System.System.Array[float], offset: int, count: int) -> None: ...
    @overload
    def WriteAttributeString(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, value: str) -> None: ...
    @overload
    def WriteAttributeString(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, value: str) -> None: ...
    @overload
    def WriteBase64Async(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteElementString(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, value: str) -> None: ...
    @overload
    def WriteElementString(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, value: str) -> None: ...
    @overload
    def WriteNode(self, reader: XmlDictionaryReader, defattr: bool) -> None: ...
    @overload
    def WriteNode(self, reader: XmlReader, defattr: bool) -> None: ...
    @overload
    def WriteQualifiedName(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def WriteStartAttribute(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def WriteStartElement(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def WriteString(self, value: XmlDictionaryString) -> None: ...
    @overload
    def WriteValue(self, value: IStreamProvider) -> None: ...
    @overload
    def WriteValue(self, value: System.TimeSpan) -> None: ...
    @overload
    def WriteValue(self, value: System.Guid) -> None: ...
    @overload
    def WriteValue(self, value: UniqueId) -> None: ...
    @overload
    def WriteValue(self, value: XmlDictionaryString) -> None: ...
    @overload
    def WriteValueAsync(self, value: IStreamProvider) -> Tasks.Task: ...
    @overload
    def WriteXmlAttribute(self, localName: str, value: str) -> None: ...
    @overload
    def WriteXmlAttribute(self, localName: XmlDictionaryString, value: XmlDictionaryString) -> None: ...
    @overload
    def WriteXmlnsAttribute(self, prefix: str, namespaceUri: str) -> None: ...
    @overload
    def WriteXmlnsAttribute(self, prefix: str, namespaceUri: XmlDictionaryString) -> None: ...

class OnXmlDictionaryReaderClose(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, reader: XmlDictionaryReader, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, reader: XmlDictionaryReader) -> None: ...

class XmlDictionaryReader(XmlReader):
    """    """
    @overload
    @staticmethod
    def CreateBinaryReader(buffer: System.System.Array[System.Byte], quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(stream: IO.Stream, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(stream: IO.Stream, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(stream: IO.Stream, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(buffer: System.System.Array[System.Byte], offset: int, count: int, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(buffer: System.System.Array[System.Byte], offset: int, count: int, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(stream: IO.Stream, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(buffer: System.System.Array[System.Byte], offset: int, count: int, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateBinaryReader(buffer: System.System.Array[System.Byte], offset: int, count: int, dictionary: IXmlDictionary, quotas: XmlDictionaryReaderQuotas, session: XmlBinaryReaderSession, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateDictionaryReader(reader: XmlReader) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(stream: IO.Stream, encodings: Text.System.Array[Text.Encoding], quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(stream: IO.Stream, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(stream: IO.Stream, encodings: Text.System.Array[Text.Encoding], contentType: str, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encodings: Text.System.Array[Text.Encoding], quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encodings: Text.System.Array[Text.Encoding], contentType: str, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(stream: IO.Stream, encodings: Text.System.Array[Text.Encoding], contentType: str, quotas: XmlDictionaryReaderQuotas, maxBufferSize: int, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateMtomReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encodings: Text.System.Array[Text.Encoding], contentType: str, quotas: XmlDictionaryReaderQuotas, maxBufferSize: int, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateTextReader(stream: IO.Stream, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateTextReader(buffer: System.System.Array[System.Byte], quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateTextReader(stream: IO.Stream, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateTextReader(buffer: System.System.Array[System.Byte], offset: int, count: int, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    @staticmethod
    def CreateTextReader(buffer: System.System.Array[System.Byte], offset: int, count: int, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    def EndCanonicalization() -> None: ...
    @property
    def CanCanonicalize(self) -> bool: ...
    @property
    def Quotas(self) -> XmlDictionaryReaderQuotas: ...
    @overload
    def GetAttribute(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> str: ...
    @overload
    def GetNonAtomizedNames() -> (str, str): ...
    @overload
    def IndexOfLocalName(self, localNames: System.System.Array[str], namespaceUri: str) -> int: ...
    @overload
    def IndexOfLocalName(self, localNames: System.Array[XmlDictionaryString], namespaceUri: XmlDictionaryString) -> int: ...
    @overload
    def IsLocalName(self, localName: str) -> bool: ...
    @overload
    def IsLocalName(self, localName: XmlDictionaryString) -> bool: ...
    @overload
    def IsNamespaceUri(self, namespaceUri: str) -> bool: ...
    @overload
    def IsNamespaceUri(self, namespaceUri: XmlDictionaryString) -> bool: ...
    @overload
    def IsStartArray() -> (bool, System.Type): ...
    @overload
    def IsStartElement(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> bool: ...
    @overload
    def MoveToStartElement() -> None: ...
    @overload
    def MoveToStartElement(self, name: str) -> None: ...
    @overload
    def MoveToStartElement(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def MoveToStartElement(self, localName: str, namespaceUri: str) -> None: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.DateTime], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.DateTime], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Decimal], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.TimeSpan], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.Decimal], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[float], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.TimeSpan], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[float], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Guid], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.Guid], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.Int16], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Int16], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Single], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[int], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[bool], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[int], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[bool], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString, array: System.System.Array[System.Int64], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.Single], offset: int, count: int) -> int: ...
    @overload
    def ReadArray(self, localName: str, namespaceUri: str, array: System.System.Array[System.Int64], offset: int, count: int) -> int: ...
    @overload
    def ReadBooleanArray(self, localName: str, namespaceUri: str) -> System.System.Array[bool]: ...
    @overload
    def ReadBooleanArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[bool]: ...
    @overload
    def ReadContentAs(self, type_: System.Type, namespaceResolver: IXmlNamespaceResolver) -> object: ...
    @overload
    def ReadContentAsBase64() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadContentAsBinHex() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadContentAsChars(self, chars: System.System.Array[System.Char], offset: int, count: int) -> int: ...
    @overload
    def ReadContentAsDecimal() -> System.Decimal: ...
    @overload
    def ReadContentAsFloat() -> System.Single: ...
    @overload
    def ReadContentAsGuid() -> System.Guid: ...
    @overload
    def ReadContentAsQualifiedName() -> (str, str): ...
    @overload
    def ReadContentAsString() -> str: ...
    @overload
    def ReadContentAsString(self, strings: System.System.Array[str]) -> (str, int): ...
    @overload
    def ReadContentAsString(self, strings: System.Array[XmlDictionaryString]) -> (str, int): ...
    @overload
    def ReadContentAsTimeSpan() -> System.TimeSpan: ...
    @overload
    def ReadContentAsUniqueId() -> UniqueId: ...
    @overload
    def ReadDateTimeArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.DateTime]: ...
    @overload
    def ReadDateTimeArray(self, localName: str, namespaceUri: str) -> System.System.Array[System.DateTime]: ...
    @overload
    def ReadDecimalArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.Decimal]: ...
    @overload
    def ReadDecimalArray(self, localName: str, namespaceUri: str) -> System.System.Array[System.Decimal]: ...
    @overload
    def ReadDoubleArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[float]: ...
    @overload
    def ReadDoubleArray(self, localName: str, namespaceUri: str) -> System.System.Array[float]: ...
    @overload
    def ReadElementContentAsBase64() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadElementContentAsBinHex() -> System.System.Array[System.Byte]: ...
    @overload
    def ReadElementContentAsBoolean() -> bool: ...
    @overload
    def ReadElementContentAsDateTime() -> System.DateTime: ...
    @overload
    def ReadElementContentAsDecimal() -> System.Decimal: ...
    @overload
    def ReadElementContentAsDouble() -> float: ...
    @overload
    def ReadElementContentAsFloat() -> System.Single: ...
    @overload
    def ReadElementContentAsGuid() -> System.Guid: ...
    @overload
    def ReadElementContentAsInt() -> int: ...
    @overload
    def ReadElementContentAsLong() -> System.Int64: ...
    @overload
    def ReadElementContentAsString() -> str: ...
    @overload
    def ReadElementContentAsTimeSpan() -> System.TimeSpan: ...
    @overload
    def ReadElementContentAsUniqueId() -> UniqueId: ...
    @overload
    def ReadFullStartElement() -> None: ...
    @overload
    def ReadFullStartElement(self, name: str) -> None: ...
    @overload
    def ReadFullStartElement(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def ReadFullStartElement(self, localName: str, namespaceUri: str) -> None: ...
    @overload
    def ReadGuidArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.Guid]: ...
    @overload
    def ReadGuidArray(self, localName: str, namespaceUri: str) -> System.System.Array[System.Guid]: ...
    @overload
    def ReadInt16Array(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.Int16]: ...
    @overload
    def ReadInt16Array(self, localName: str, namespaceUri: str) -> System.System.Array[System.Int16]: ...
    @overload
    def ReadInt32Array(self, localName: str, namespaceUri: str) -> System.System.Array[int]: ...
    @overload
    def ReadInt32Array(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[int]: ...
    @overload
    def ReadInt64Array(self, localName: str, namespaceUri: str) -> System.System.Array[System.Int64]: ...
    @overload
    def ReadInt64Array(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.Int64]: ...
    @overload
    def ReadSingleArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.Single]: ...
    @overload
    def ReadSingleArray(self, localName: str, namespaceUri: str) -> System.System.Array[System.Single]: ...
    @overload
    def ReadStartElement(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> None: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ReadTimeSpanArray(self, localName: XmlDictionaryString, namespaceUri: XmlDictionaryString) -> System.System.Array[System.TimeSpan]: ...
    @overload
    def ReadTimeSpanArray(self, localName: str, namespaceUri: str) -> System.System.Array[System.TimeSpan]: ...
    @overload
    def ReadValueAsBase64(self, buffer: System.System.Array[System.Byte], offset: int, count: int) -> int: ...
    @overload
    def StartCanonicalization(self, stream: IO.Stream, includeComments: bool, inclusivePrefixes: System.System.Array[str]) -> None: ...
    @overload
    def TryGetArrayLength() -> (bool, int): ...
    @overload
    def TryGetBase64ContentLength() -> (bool, int): ...
    @overload
    def TryGetLocalNameAsDictionaryString() -> (bool, XmlDictionaryString): ...
    @overload
    def TryGetNamespaceUriAsDictionaryString() -> (bool, XmlDictionaryString): ...
    @overload
    def TryGetValueAsDictionaryString() -> (bool, XmlDictionaryString): ...

class XmlDictionaryReaderQuotaTypes(enum.Enum):
    MaxDepth = 1
    MaxStringContentLength = 2
    MaxArrayLength = 4
    MaxBytesPerRead = 8
    MaxNameTableCharCount = 16

class XmlDictionaryReaderQuotas(object):
    """    """
    def __init__(self): ...
    @overload
    def CopyTo(self, quotas: XmlDictionaryReaderQuotas) -> None: ...
    @property
    def Max(self) -> XmlDictionaryReaderQuotas: ...
    @property
    def MaxArrayLength(self) -> int: ...
    @property
    def MaxBytesPerRead(self) -> int: ...
    @property
    def MaxDepth(self) -> int: ...
    @property
    def MaxNameTableCharCount(self) -> int: ...
    @property
    def MaxStringContentLength(self) -> int: ...
    @property
    def ModifiedQuotas(self) -> XmlDictionaryReaderQuotaTypes: ...
    @MaxArrayLength.setter
    def MaxArrayLength(self, value: System.Void): ...
    @MaxBytesPerRead.setter
    def MaxBytesPerRead(self, value: System.Void): ...
    @MaxDepth.setter
    def MaxDepth(self, value: System.Void): ...
    @MaxNameTableCharCount.setter
    def MaxNameTableCharCount(self, value: System.Void): ...
    @MaxStringContentLength.setter
    def MaxStringContentLength(self, value: System.Void): ...

class XmlDictionaryString(object):
    """    """
    def __init__(self, dictionary: IXmlDictionary, value: str, key: int): ...
    @property
    def Dictionary(self) -> IXmlDictionary: ...
    @property
    def Empty(self) -> XmlDictionaryString: ...
    @property
    def Key(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @overload
    def ToString() -> str: ...

class IXmlTextReaderInitializer:
    """    """
    @overload
    def SetInput(self, stream: IO.Stream, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> None: ...
    @overload
    def SetInput(self, buffer: System.System.Array[System.Byte], offset: int, count: int, encoding: Text.Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> None: ...

class IXmlTextWriterInitializer:
    """    """
    @overload
    def SetOutput(self, stream: IO.Stream, encoding: Text.Encoding, ownsStream: bool) -> None: ...

# endregion

# region: System.Data.Common, Version=7.0.0.0

# endregion

# region: System.Private.Xml, Version=7.0.0.0

class XmlNamedNodeMap(object):
    """    """
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetNamedItem(self, name: str) -> XmlNode: ...
    @overload
    def GetNamedItem(self, localName: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def Item(self, index: int) -> XmlNode: ...
    @overload
    def RemoveNamedItem(self, name: str) -> XmlNode: ...
    @overload
    def RemoveNamedItem(self, localName: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def SetNamedItem(self, node: XmlNode) -> XmlNode: ...

class IHasXmlNode:
    """    """
    @overload
    def GetNode() -> XmlNode: ...

class IXmlLineInfo:
    """    """
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @overload
    def HasLineInfo() -> bool: ...

class IXmlNamespaceResolver:
    """    """
    @overload
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> Generic.IDictionary: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def LookupPrefix(self, namespaceName: str) -> str: ...

class NameTable(XmlNameTable):
    """    """
    def __init__(self): ...
    @overload
    def Add(self, key: str) -> str: ...
    @overload
    def Add(self, key: System.System.Array[System.Char], start: int, len_: int) -> str: ...
    @overload
    def Get(self, value: str) -> str: ...
    @overload
    def Get(self, key: System.System.Array[System.Char], start: int, len_: int) -> str: ...

class XmlDateTimeSerializationMode(enum.Enum):
    Local = 0
    Utc = 1
    Unspecified = 2
    RoundtripKind = 3

class XmlConvert(object):
    """    """
    def __init__(self): ...
    @overload
    @staticmethod
    def DecodeName(name: str) -> str: ...
    @overload
    @staticmethod
    def EncodeLocalName(name: str) -> str: ...
    @overload
    @staticmethod
    def EncodeName(name: str) -> str: ...
    @overload
    @staticmethod
    def EncodeNmToken(name: str) -> str: ...
    @overload
    @staticmethod
    def IsNCNameChar(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsPublicIdChar(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsStartNCNameChar(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsWhitespaceChar(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsXmlChar(ch: System.Char) -> bool: ...
    @overload
    @staticmethod
    def IsXmlSurrogatePair(lowChar: System.Char, highChar: System.Char) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(s: str) -> bool: ...
    @overload
    @staticmethod
    def ToByte(s: str) -> System.Byte: ...
    @overload
    @staticmethod
    def ToChar(s: str) -> System.Char: ...
    @overload
    @staticmethod
    def ToDateTime(s: str, format_: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(s: str, formats: System.System.Array[str]) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDateTime(s: str, dateTimeOption: XmlDateTimeSerializationMode) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDateTimeOffset(s: str) -> System.DateTimeOffset: ...
    @overload
    @staticmethod
    def ToDateTimeOffset(s: str, format_: str) -> System.DateTimeOffset: ...
    @overload
    @staticmethod
    def ToDateTimeOffset(s: str, formats: System.System.Array[str]) -> System.DateTimeOffset: ...
    @overload
    @staticmethod
    def ToDecimal(s: str) -> System.Decimal: ...
    @overload
    @staticmethod
    def ToDouble(s: str) -> float: ...
    @overload
    @staticmethod
    def ToGuid(s: str) -> System.Guid: ...
    @overload
    @staticmethod
    def ToInt16(s: str) -> System.Int16: ...
    @overload
    @staticmethod
    def ToInt32(s: str) -> int: ...
    @overload
    @staticmethod
    def ToInt64(s: str) -> System.Int64: ...
    @overload
    @staticmethod
    def ToSByte(s: str) -> System.SByte: ...
    @overload
    @staticmethod
    def ToSingle(s: str) -> System.Single: ...
    @overload
    @staticmethod
    def ToString(value: System.DateTimeOffset) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Guid) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Byte) -> str: ...
    @overload
    @staticmethod
    def ToString(value: bool) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Char) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Decimal) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.TimeSpan) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Single) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.UInt64) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.UInt32) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.UInt16) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.SByte) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Int16) -> str: ...
    @overload
    @staticmethod
    def ToString(value: int) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.Int64) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.DateTimeOffset, format_: str) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.DateTime, format_: str) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.DateTime, dateTimeOption: XmlDateTimeSerializationMode) -> str: ...
    @overload
    @staticmethod
    def ToTimeSpan(s: str) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def ToUInt16(s: str) -> System.UInt16: ...
    @overload
    @staticmethod
    def ToUInt32(s: str) -> System.UInt32: ...
    @overload
    @staticmethod
    def ToUInt64(s: str) -> System.UInt64: ...
    @overload
    @staticmethod
    def VerifyName(name: str) -> str: ...
    @overload
    @staticmethod
    def VerifyNCName(name: str) -> str: ...
    @overload
    @staticmethod
    def VerifyNMTOKEN(name: str) -> str: ...
    @overload
    @staticmethod
    def VerifyPublicId(publicId: str) -> str: ...
    @overload
    @staticmethod
    def VerifyTOKEN(token: str) -> str: ...
    @overload
    @staticmethod
    def VerifyWhitespace(content: str) -> str: ...
    @overload
    @staticmethod
    def VerifyXmlChars(content: str) -> str: ...

class XmlException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, lineNumber: int, linePosition: int): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def SourceUri(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XmlNamespaceManager(object):
    """    """
    def __init__(self, nameTable: XmlNameTable): ...
    @overload
    def AddNamespace(self, prefix: str, uri: str) -> None: ...
    @property
    def DefaultNamespace(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> Generic.IDictionary: ...
    @overload
    def HasNamespace(self, prefix: str) -> bool: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def LookupPrefix(self, uri: str) -> str: ...
    @overload
    def PopScope() -> bool: ...
    @overload
    def PushScope() -> None: ...
    @overload
    def RemoveNamespace(self, prefix: str, uri: str) -> None: ...

class XmlNamespaceScope(enum.Enum):
    All = 0
    ExcludeXml = 1
    Local = 2

class XmlNameTable(object):
    """    """
    @overload
    def Add(self, array: str) -> str: ...
    @overload
    def Add(self, array: System.System.Array[System.Char], offset: int, length: int) -> str: ...
    @overload
    def Get(self, array: str) -> str: ...
    @overload
    def Get(self, array: System.System.Array[System.Char], offset: int, length: int) -> str: ...

class XmlNodeOrder(enum.Enum):
    Before = 0
    After = 1
    Same = 2
    Unknown = 3

class XmlNodeType(enum.Enum):
    None_ = 0
    Element = 1
    Attribute = 2
    Text = 3
    CDATA = 4
    EntityReference = 5
    Entity = 6
    ProcessingInstruction = 7
    Comment = 8
    Document = 9
    DocumentType = 10
    DocumentFragment = 11
    Notation = 12
    Whitespace = 13
    SignificantWhitespace = 14
    EndElement = 15
    EndEntity = 16
    XmlDeclaration = 17

class XmlQualifiedName(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    @property
    def Empty(self) -> XmlQualifiedName: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToString() -> str: ...
    @overload
    @staticmethod
    def ToString(name: str, ns: str) -> str: ...

class XmlResolver(object):
    """    """
    @property
    def ThrowingResolver(self) -> XmlResolver: ...
    @overload
    def GetEntity(self, absoluteUri: System.Uri, role: str, ofObjectToReturn: System.Type) -> object: ...
    @overload
    def GetEntityAsync(self, absoluteUri: System.Uri, role: str, ofObjectToReturn: System.Type) -> Tasks.Task: ...
    @overload
    def ResolveUri(self, baseUri: System.Uri, relativeUri: str) -> System.Uri: ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @overload
    def SupportsType(self, absoluteUri: System.Uri, type_: System.Type) -> bool: ...

class XmlUrlResolver(XmlResolver):
    """    """
    def __init__(self): ...
    @overload
    def GetEntity(self, absoluteUri: System.Uri, role: str, ofObjectToReturn: System.Type) -> object: ...
    @overload
    def GetEntityAsync(self, absoluteUri: System.Uri, role: str, ofObjectToReturn: System.Type) -> Tasks.Task: ...
    @overload
    def ResolveUri(self, baseUri: System.Uri, relativeUri: str) -> System.Uri: ...
    @CachePolicy.setter
    def CachePolicy(self, value: System.Void): ...
    @Credentials.setter
    def Credentials(self, value: System.Void): ...
    @Proxy.setter
    def Proxy(self, value: System.Void): ...

class ConformanceLevel(enum.Enum):
    Auto = 0
    Fragment = 1
    Document = 2

class DtdProcessing(enum.Enum):
    Prohibit = 0
    Ignore = 1
    Parse = 2

class EntityHandling(enum.Enum):
    ExpandEntities = 1
    ExpandCharEntities = 2

class NamespaceHandling(enum.Enum):
    Default = 0
    OmitDuplicates = 1

class NewLineHandling(enum.Enum):
    Replace = 0
    Entitize = 1
    None_ = 2

class ReadState(enum.Enum):
    Initial = 0
    Interactive = 1
    Error = 2
    EndOfFile = 3
    Closed = 4

class ValidationType(enum.Enum):
    None_ = 0
    Auto = 1
    DTD = 2
    XDR = 3
    Schema = 4

class WhitespaceHandling(enum.Enum):
    All = 0
    Significant = 1
    None_ = 2

class XmlParserContext(object):
    """    """
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, xmlLang: str, xmlSpace: XmlSpace): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, xmlLang: str, xmlSpace: XmlSpace, enc: Text.Encoding): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, docTypeName: str, pubId: str, sysId: str, internalSubset: str, baseURI: str, xmlLang: str, xmlSpace: XmlSpace): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, docTypeName: str, pubId: str, sysId: str, internalSubset: str, baseURI: str, xmlLang: str, xmlSpace: XmlSpace, enc: Text.Encoding): ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def DocTypeName(self) -> str: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def InternalSubset(self) -> str: ...
    @property
    def NamespaceManager(self) -> XmlNamespaceManager: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @BaseURI.setter
    def BaseURI(self, value: System.Void): ...
    @DocTypeName.setter
    def DocTypeName(self, value: System.Void): ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @InternalSubset.setter
    def InternalSubset(self, value: System.Void): ...
    @NamespaceManager.setter
    def NamespaceManager(self, value: System.Void): ...
    @NameTable.setter
    def NameTable(self, value: System.Void): ...
    @PublicId.setter
    def PublicId(self, value: System.Void): ...
    @SystemId.setter
    def SystemId(self, value: System.Void): ...
    @XmlLang.setter
    def XmlLang(self, value: System.Void): ...
    @XmlSpace.setter
    def XmlSpace(self, value: System.Void): ...

class XmlReader(object):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def Create(inputUri: str) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.Stream) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.TextReader) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(inputUri: str, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(reader: XmlReader, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.Stream, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.TextReader, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.Stream, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(inputUri: str, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.Stream, settings: XmlReaderSettings, baseUri: str) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.TextReader, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    @overload
    @staticmethod
    def Create(input_: IO.TextReader, settings: XmlReaderSettings, baseUri: str) -> XmlReader: ...
    @overload
    def Dispose() -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanReadValueChunk(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def Item(self) -> str: ...
    @property
    def Item(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def QuoteChar(self) -> System.Char: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def Settings(self) -> XmlReaderSettings: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, i: int) -> str: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, name: str, namespaceURI: str) -> str: ...
    @overload
    def GetValueAsync() -> Tasks.Task: ...
    @overload
    @staticmethod
    def IsName(str_: str) -> bool: ...
    @overload
    @staticmethod
    def IsNameToken(str_: str) -> bool: ...
    @overload
    def IsStartElement() -> bool: ...
    @overload
    def IsStartElement(self, name: str) -> bool: ...
    @overload
    def IsStartElement(self, localname: str, ns: str) -> bool: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, i: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str, ns: str) -> bool: ...
    @overload
    def MoveToContent() -> XmlNodeType: ...
    @overload
    def MoveToContentAsync() -> Tasks.Task: ...
    @overload
    def MoveToElement() -> bool: ...
    @overload
    def MoveToFirstAttribute() -> bool: ...
    @overload
    def MoveToNextAttribute() -> bool: ...
    @overload
    def Read() -> bool: ...
    @overload
    def ReadAsync() -> Tasks.Task: ...
    @overload
    def ReadAttributeValue() -> bool: ...
    @overload
    def ReadContentAs(self, returnType: System.Type, namespaceResolver: IXmlNamespaceResolver) -> object: ...
    @overload
    def ReadContentAsAsync(self, returnType: System.Type, namespaceResolver: IXmlNamespaceResolver) -> Tasks.Task: ...
    @overload
    def ReadContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBase64Async(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBinHexAsync(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadContentAsBoolean() -> bool: ...
    @overload
    def ReadContentAsDateTime() -> System.DateTime: ...
    @overload
    def ReadContentAsDateTimeOffset() -> System.DateTimeOffset: ...
    @overload
    def ReadContentAsDecimal() -> System.Decimal: ...
    @overload
    def ReadContentAsDouble() -> float: ...
    @overload
    def ReadContentAsFloat() -> System.Single: ...
    @overload
    def ReadContentAsInt() -> int: ...
    @overload
    def ReadContentAsLong() -> System.Int64: ...
    @overload
    def ReadContentAsObject() -> object: ...
    @overload
    def ReadContentAsObjectAsync() -> Tasks.Task: ...
    @overload
    def ReadContentAsString() -> str: ...
    @overload
    def ReadContentAsStringAsync() -> Tasks.Task: ...
    @overload
    def ReadElementContentAs(self, returnType: System.Type, namespaceResolver: IXmlNamespaceResolver) -> object: ...
    @overload
    def ReadElementContentAs(self, returnType: System.Type, namespaceResolver: IXmlNamespaceResolver, localName: str, namespaceURI: str) -> object: ...
    @overload
    def ReadElementContentAsAsync(self, returnType: System.Type, namespaceResolver: IXmlNamespaceResolver) -> Tasks.Task: ...
    @overload
    def ReadElementContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBase64Async(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadElementContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBinHexAsync(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ReadElementContentAsBoolean() -> bool: ...
    @overload
    def ReadElementContentAsBoolean(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadElementContentAsDateTime() -> System.DateTime: ...
    @overload
    def ReadElementContentAsDateTime(self, localName: str, namespaceURI: str) -> System.DateTime: ...
    @overload
    def ReadElementContentAsDecimal() -> System.Decimal: ...
    @overload
    def ReadElementContentAsDecimal(self, localName: str, namespaceURI: str) -> System.Decimal: ...
    @overload
    def ReadElementContentAsDouble() -> float: ...
    @overload
    def ReadElementContentAsDouble(self, localName: str, namespaceURI: str) -> float: ...
    @overload
    def ReadElementContentAsFloat() -> System.Single: ...
    @overload
    def ReadElementContentAsFloat(self, localName: str, namespaceURI: str) -> System.Single: ...
    @overload
    def ReadElementContentAsInt() -> int: ...
    @overload
    def ReadElementContentAsInt(self, localName: str, namespaceURI: str) -> int: ...
    @overload
    def ReadElementContentAsLong() -> System.Int64: ...
    @overload
    def ReadElementContentAsLong(self, localName: str, namespaceURI: str) -> System.Int64: ...
    @overload
    def ReadElementContentAsObject() -> object: ...
    @overload
    def ReadElementContentAsObject(self, localName: str, namespaceURI: str) -> object: ...
    @overload
    def ReadElementContentAsObjectAsync() -> Tasks.Task: ...
    @overload
    def ReadElementContentAsString() -> str: ...
    @overload
    def ReadElementContentAsString(self, localName: str, namespaceURI: str) -> str: ...
    @overload
    def ReadElementContentAsStringAsync() -> Tasks.Task: ...
    @overload
    def ReadElementString() -> str: ...
    @overload
    def ReadElementString(self, name: str) -> str: ...
    @overload
    def ReadElementString(self, localname: str, ns: str) -> str: ...
    @overload
    def ReadEndElement() -> None: ...
    @overload
    def ReadInnerXml() -> str: ...
    @overload
    def ReadInnerXmlAsync() -> Tasks.Task: ...
    @overload
    def ReadOuterXml() -> str: ...
    @overload
    def ReadOuterXmlAsync() -> Tasks.Task: ...
    @overload
    def ReadStartElement() -> None: ...
    @overload
    def ReadStartElement(self, name: str) -> None: ...
    @overload
    def ReadStartElement(self, localname: str, ns: str) -> None: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ReadSubtree() -> XmlReader: ...
    @overload
    def ReadToDescendant(self, name: str) -> bool: ...
    @overload
    def ReadToDescendant(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadToFollowing(self, name: str) -> bool: ...
    @overload
    def ReadToFollowing(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadToNextSibling(self, name: str) -> bool: ...
    @overload
    def ReadToNextSibling(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadValueChunk(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadValueChunkAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def ResolveEntity() -> None: ...
    @overload
    def Skip() -> None: ...
    @overload
    def SkipAsync() -> Tasks.Task: ...

class XmlReaderSettings(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> XmlReaderSettings: ...
    @property
    def Async(self) -> bool: ...
    @property
    def CheckCharacters(self) -> bool: ...
    @property
    def CloseInput(self) -> bool: ...
    @property
    def ConformanceLevel(self) -> ConformanceLevel: ...
    @property
    def DtdProcessing(self) -> DtdProcessing: ...
    @property
    def IgnoreComments(self) -> bool: ...
    @property
    def IgnoreProcessingInstructions(self) -> bool: ...
    @property
    def IgnoreWhitespace(self) -> bool: ...
    @property
    def LineNumberOffset(self) -> int: ...
    @property
    def LinePositionOffset(self) -> int: ...
    @property
    def MaxCharactersFromEntities(self) -> System.Int64: ...
    @property
    def MaxCharactersInDocument(self) -> System.Int64: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def ProhibitDtd(self) -> bool: ...
    @property
    def Schemas(self) -> Schema.XmlSchemaSet: ...
    @property
    def ValidationFlags(self) -> Schema.XmlSchemaValidationFlags: ...
    @property
    def ValidationType(self) -> ValidationType: ...
    @overload
    def Reset() -> None: ...
    @Async.setter
    def Async(self, value: System.Void): ...
    @CheckCharacters.setter
    def CheckCharacters(self, value: System.Void): ...
    @CloseInput.setter
    def CloseInput(self, value: System.Void): ...
    @ConformanceLevel.setter
    def ConformanceLevel(self, value: System.Void): ...
    @DtdProcessing.setter
    def DtdProcessing(self, value: System.Void): ...
    @IgnoreComments.setter
    def IgnoreComments(self, value: System.Void): ...
    @IgnoreProcessingInstructions.setter
    def IgnoreProcessingInstructions(self, value: System.Void): ...
    @IgnoreWhitespace.setter
    def IgnoreWhitespace(self, value: System.Void): ...
    @LineNumberOffset.setter
    def LineNumberOffset(self, value: System.Void): ...
    @LinePositionOffset.setter
    def LinePositionOffset(self, value: System.Void): ...
    @MaxCharactersFromEntities.setter
    def MaxCharactersFromEntities(self, value: System.Void): ...
    @MaxCharactersInDocument.setter
    def MaxCharactersInDocument(self, value: System.Void): ...
    @NameTable.setter
    def NameTable(self, value: System.Void): ...
    @ProhibitDtd.setter
    def ProhibitDtd(self, value: System.Void): ...
    @Schemas.setter
    def Schemas(self, value: System.Void): ...
    @ValidationFlags.setter
    def ValidationFlags(self, value: System.Void): ...
    @ValidationType.setter
    def ValidationType(self, value: System.Void): ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @property
    def ValidationEventHandler(self): ...

class XmlSpace(enum.Enum):
    None_ = 0
    Default = 1
    Preserve = 2

class XmlTextReader(XmlReader):
    """    """
    @overload
    def __init__(self, input_: IO.Stream): ...
    @overload
    def __init__(self, input_: IO.TextReader): ...
    @overload
    def __init__(self, url: str): ...
    @overload
    def __init__(self, url: str, input_: IO.Stream): ...
    @overload
    def __init__(self, input_: IO.Stream, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input_: IO.TextReader): ...
    @overload
    def __init__(self, input_: IO.TextReader, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input_: IO.Stream, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input_: IO.TextReader, nt: XmlNameTable): ...
    @overload
    def __init__(self, xmlFragment: IO.Stream, fragType: XmlNodeType, context: XmlParserContext): ...
    @overload
    def __init__(self, xmlFragment: str, fragType: XmlNodeType, context: XmlParserContext): ...
    @overload
    def Close() -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanReadValueChunk(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def DtdProcessing(self) -> DtdProcessing: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def EntityHandling(self) -> EntityHandling: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespaces(self) -> bool: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Normalization(self) -> bool: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ProhibitDtd(self) -> bool: ...
    @property
    def QuoteChar(self) -> System.Char: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def Value(self) -> str: ...
    @property
    def WhitespaceHandling(self) -> WhitespaceHandling: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, i: int) -> str: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str: ...
    @overload
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> Generic.IDictionary: ...
    @overload
    def GetRemainder() -> IO.TextReader: ...
    @overload
    def HasLineInfo() -> bool: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, i: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToElement() -> bool: ...
    @overload
    def MoveToFirstAttribute() -> bool: ...
    @overload
    def MoveToNextAttribute() -> bool: ...
    @overload
    def Read() -> bool: ...
    @overload
    def ReadAttributeValue() -> bool: ...
    @overload
    def ReadBase64(self, array: System.System.Array[System.Byte], offset: int, len_: int) -> int: ...
    @overload
    def ReadBinHex(self, array: System.System.Array[System.Byte], offset: int, len_: int) -> int: ...
    @overload
    def ReadChars(self, buffer: System.System.Array[System.Char], index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ResetState() -> None: ...
    @overload
    def ResolveEntity() -> None: ...
    @DtdProcessing.setter
    def DtdProcessing(self, value: System.Void): ...
    @EntityHandling.setter
    def EntityHandling(self, value: System.Void): ...
    @Namespaces.setter
    def Namespaces(self, value: System.Void): ...
    @Normalization.setter
    def Normalization(self, value: System.Void): ...
    @ProhibitDtd.setter
    def ProhibitDtd(self, value: System.Void): ...
    @WhitespaceHandling.setter
    def WhitespaceHandling(self, value: System.Void): ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @overload
    def Skip() -> None: ...

class Formatting(enum.Enum):
    None_ = 0
    Indented = 1

class XmlTextWriter(XmlWriter):
    """    """
    @overload
    def __init__(self, w: IO.TextWriter): ...
    @overload
    def __init__(self, filename: str, encoding: Text.Encoding): ...
    @overload
    def __init__(self, w: IO.Stream, encoding: Text.Encoding): ...
    @overload
    def Close() -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def BaseStream(self) -> IO.Stream: ...
    @property
    def Formatting(self) -> Formatting: ...
    @property
    def Indentation(self) -> int: ...
    @property
    def IndentChar(self) -> System.Char: ...
    @property
    def Namespaces(self) -> bool: ...
    @property
    def QuoteChar(self) -> System.Char: ...
    @property
    def WriteState(self) -> WriteState: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def LookupPrefix(self, ns: str) -> str: ...
    @Formatting.setter
    def Formatting(self, value: System.Void): ...
    @Indentation.setter
    def Indentation(self, value: System.Void): ...
    @IndentChar.setter
    def IndentChar(self, value: System.Void): ...
    @Namespaces.setter
    def Namespaces(self, value: System.Void): ...
    @QuoteChar.setter
    def QuoteChar(self, value: System.Void): ...
    @overload
    def WriteBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def WriteBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def WriteCData(self, text: str) -> None: ...
    @overload
    def WriteCharEntity(self, ch: System.Char) -> None: ...
    @overload
    def WriteChars(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteComment(self, text: str) -> None: ...
    @overload
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    @overload
    def WriteEndAttribute() -> None: ...
    @overload
    def WriteEndDocument() -> None: ...
    @overload
    def WriteEndElement() -> None: ...
    @overload
    def WriteEntityRef(self, name: str) -> None: ...
    @overload
    def WriteFullEndElement() -> None: ...
    @overload
    def WriteName(self, name: str) -> None: ...
    @overload
    def WriteNmToken(self, name: str) -> None: ...
    @overload
    def WriteProcessingInstruction(self, name: str, text: str) -> None: ...
    @overload
    def WriteQualifiedName(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartDocument() -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteString(self, text: str) -> None: ...
    @overload
    def WriteSurrogateCharEntity(self, lowChar: System.Char, highChar: System.Char) -> None: ...
    @overload
    def WriteWhitespace(self, ws: str) -> None: ...

class WriteState(enum.Enum):
    Start = 0
    Prolog = 1
    Element = 2
    Attribute = 3
    Content = 4
    Closed = 5
    Error = 6

class XmlWriter(object):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def Create(output: XmlWriter) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: Text.StringBuilder) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: IO.TextWriter) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: IO.Stream) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(outputFileName: str) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: IO.Stream, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: XmlWriter, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: Text.StringBuilder, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(output: IO.TextWriter, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    @staticmethod
    def Create(outputFileName: str, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def DisposeAsync() -> Tasks.ValueTask: ...
    @overload
    def Flush() -> None: ...
    @overload
    def FlushAsync() -> Tasks.Task: ...
    @property
    def Settings(self) -> XmlWriterSettings: ...
    @property
    def WriteState(self) -> WriteState: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def LookupPrefix(self, ns: str) -> str: ...
    @overload
    def WriteAttributes(self, reader: XmlReader, defattr: bool) -> None: ...
    @overload
    def WriteAttributesAsync(self, reader: XmlReader, defattr: bool) -> Tasks.Task: ...
    @overload
    def WriteAttributeString(self, localName: str, value: str) -> None: ...
    @overload
    def WriteAttributeString(self, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteAttributeString(self, prefix: str, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteAttributeStringAsync(self, prefix: str, localName: str, ns: str, value: str) -> Tasks.Task: ...
    @overload
    def WriteBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def WriteBase64Async(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def WriteBinHexAsync(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteCData(self, text: str) -> None: ...
    @overload
    def WriteCDataAsync(self, text: str) -> Tasks.Task: ...
    @overload
    def WriteCharEntity(self, ch: System.Char) -> None: ...
    @overload
    def WriteCharEntityAsync(self, ch: System.Char) -> Tasks.Task: ...
    @overload
    def WriteChars(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteCharsAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteComment(self, text: str) -> None: ...
    @overload
    def WriteCommentAsync(self, text: str) -> Tasks.Task: ...
    @overload
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    @overload
    def WriteDocTypeAsync(self, name: str, pubid: str, sysid: str, subset: str) -> Tasks.Task: ...
    @overload
    def WriteElementString(self, localName: str, value: str) -> None: ...
    @overload
    def WriteElementString(self, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteElementString(self, prefix: str, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteElementStringAsync(self, prefix: str, localName: str, ns: str, value: str) -> Tasks.Task: ...
    @overload
    def WriteEndAttribute() -> None: ...
    @overload
    def WriteEndDocument() -> None: ...
    @overload
    def WriteEndDocumentAsync() -> Tasks.Task: ...
    @overload
    def WriteEndElement() -> None: ...
    @overload
    def WriteEndElementAsync() -> Tasks.Task: ...
    @overload
    def WriteEntityRef(self, name: str) -> None: ...
    @overload
    def WriteEntityRefAsync(self, name: str) -> Tasks.Task: ...
    @overload
    def WriteFullEndElement() -> None: ...
    @overload
    def WriteFullEndElementAsync() -> Tasks.Task: ...
    @overload
    def WriteName(self, name: str) -> None: ...
    @overload
    def WriteNameAsync(self, name: str) -> Tasks.Task: ...
    @overload
    def WriteNmToken(self, name: str) -> None: ...
    @overload
    def WriteNmTokenAsync(self, name: str) -> Tasks.Task: ...
    @overload
    def WriteNode(self, navigator: XPath.XPathNavigator, defattr: bool) -> None: ...
    @overload
    def WriteNode(self, reader: XmlReader, defattr: bool) -> None: ...
    @overload
    def WriteNodeAsync(self, navigator: XPath.XPathNavigator, defattr: bool) -> Tasks.Task: ...
    @overload
    def WriteNodeAsync(self, reader: XmlReader, defattr: bool) -> Tasks.Task: ...
    @overload
    def WriteProcessingInstruction(self, name: str, text: str) -> None: ...
    @overload
    def WriteProcessingInstructionAsync(self, name: str, text: str) -> Tasks.Task: ...
    @overload
    def WriteQualifiedName(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteQualifiedNameAsync(self, localName: str, ns: str) -> Tasks.Task: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteRawAsync(self, data: str) -> Tasks.Task: ...
    @overload
    def WriteRawAsync(self, buffer: System.System.Array[System.Char], index: int, count: int) -> Tasks.Task: ...
    @overload
    def WriteStartAttribute(self, localName: str) -> None: ...
    @overload
    def WriteStartAttribute(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartDocument() -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartDocumentAsync() -> Tasks.Task: ...
    @overload
    def WriteStartDocumentAsync(self, standalone: bool) -> Tasks.Task: ...
    @overload
    def WriteStartElement(self, localName: str) -> None: ...
    @overload
    def WriteStartElement(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartElementAsync(self, prefix: str, localName: str, ns: str) -> Tasks.Task: ...
    @overload
    def WriteString(self, text: str) -> None: ...
    @overload
    def WriteStringAsync(self, text: str) -> Tasks.Task: ...
    @overload
    def WriteSurrogateCharEntity(self, lowChar: System.Char, highChar: System.Char) -> None: ...
    @overload
    def WriteSurrogateCharEntityAsync(self, lowChar: System.Char, highChar: System.Char) -> Tasks.Task: ...
    @overload
    def WriteValue(self, value: System.Int64) -> None: ...
    @overload
    def WriteValue(self, value: str) -> None: ...
    @overload
    def WriteValue(self, value: bool) -> None: ...
    @overload
    def WriteValue(self, value: int) -> None: ...
    @overload
    def WriteValue(self, value: System.Decimal) -> None: ...
    @overload
    def WriteValue(self, value: System.DateTimeOffset) -> None: ...
    @overload
    def WriteValue(self, value: float) -> None: ...
    @overload
    def WriteValue(self, value: System.Single) -> None: ...
    @overload
    def WriteValue(self, value: object) -> None: ...
    @overload
    def WriteValue(self, value: System.DateTime) -> None: ...
    @overload
    def WriteWhitespace(self, ws: str) -> None: ...
    @overload
    def WriteWhitespaceAsync(self, ws: str) -> Tasks.Task: ...

class XmlOutputMethod(enum.Enum):
    Xml = 0
    Html = 1
    Text = 2
    AutoDetect = 3

class XmlWriterSettings(object):
    """    """
    def __init__(self): ...
    @overload
    def Clone() -> XmlWriterSettings: ...
    @property
    def Async(self) -> bool: ...
    @property
    def CheckCharacters(self) -> bool: ...
    @property
    def CloseOutput(self) -> bool: ...
    @property
    def ConformanceLevel(self) -> ConformanceLevel: ...
    @property
    def DoNotEscapeUriAttributes(self) -> bool: ...
    @property
    def Encoding(self) -> Text.Encoding: ...
    @property
    def Indent(self) -> bool: ...
    @property
    def IndentChars(self) -> str: ...
    @property
    def NamespaceHandling(self) -> NamespaceHandling: ...
    @property
    def NewLineChars(self) -> str: ...
    @property
    def NewLineHandling(self) -> NewLineHandling: ...
    @property
    def NewLineOnAttributes(self) -> bool: ...
    @property
    def OmitXmlDeclaration(self) -> bool: ...
    @property
    def OutputMethod(self) -> XmlOutputMethod: ...
    @property
    def WriteEndDocumentOnClose(self) -> bool: ...
    @overload
    def Reset() -> None: ...
    @Async.setter
    def Async(self, value: System.Void): ...
    @CheckCharacters.setter
    def CheckCharacters(self, value: System.Void): ...
    @CloseOutput.setter
    def CloseOutput(self, value: System.Void): ...
    @ConformanceLevel.setter
    def ConformanceLevel(self, value: System.Void): ...
    @DoNotEscapeUriAttributes.setter
    def DoNotEscapeUriAttributes(self, value: System.Void): ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @Indent.setter
    def Indent(self, value: System.Void): ...
    @IndentChars.setter
    def IndentChars(self, value: System.Void): ...
    @NamespaceHandling.setter
    def NamespaceHandling(self, value: System.Void): ...
    @NewLineChars.setter
    def NewLineChars(self, value: System.Void): ...
    @NewLineHandling.setter
    def NewLineHandling(self, value: System.Void): ...
    @NewLineOnAttributes.setter
    def NewLineOnAttributes(self, value: System.Void): ...
    @OmitXmlDeclaration.setter
    def OmitXmlDeclaration(self, value: System.Void): ...
    @WriteEndDocumentOnClose.setter
    def WriteEndDocumentOnClose(self, value: System.Void): ...

class XmlAttribute(XmlNode):
    """    """
    @overload
    def AppendChild(self, newChild: XmlNode) -> XmlNode: ...
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def OwnerElement(self) -> XmlElement: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def Specified(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @overload
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    @overload
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    @overload
    def PrependChild(self, newChild: XmlNode) -> XmlNode: ...
    @overload
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode: ...
    @overload
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode: ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlAttributeCollection(XmlNamedNodeMap):
    """    """
    @overload
    def Append(self, node: XmlAttribute) -> XmlAttribute: ...
    @overload
    def CopyTo(self, array: System.Array[XmlAttribute], index: int) -> None: ...
    @property
    def ItemOf(self) -> XmlAttribute: ...
    @property
    def ItemOf(self) -> XmlAttribute: ...
    @property
    def ItemOf(self) -> XmlAttribute: ...
    @overload
    def InsertAfter(self, newNode: XmlAttribute, refNode: XmlAttribute) -> XmlAttribute: ...
    @overload
    def InsertBefore(self, newNode: XmlAttribute, refNode: XmlAttribute) -> XmlAttribute: ...
    @overload
    def Prepend(self, node: XmlAttribute) -> XmlAttribute: ...
    @overload
    def Remove(self, node: XmlAttribute) -> XmlAttribute: ...
    @overload
    def RemoveAll() -> None: ...
    @overload
    def RemoveAt(self, i: int) -> XmlAttribute: ...
    @overload
    def SetNamedItem(self, node: XmlNode) -> XmlNode: ...

class XmlCDataSection(XmlCharacterData):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlCharacterData(XmlLinkedNode):
    """    """
    @overload
    def AppendData(self, strData: str) -> None: ...
    @overload
    def DeleteData(self, offset: int, count: int) -> None: ...
    @property
    def Data(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def Length(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @overload
    def InsertData(self, offset: int, strData: str) -> None: ...
    @overload
    def ReplaceData(self, offset: int, count: int, strData: str) -> None: ...
    @Data.setter
    def Data(self, value: System.Void): ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def Substring(self, offset: int, count: int) -> str: ...

class XmlComment(XmlCharacterData):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlDeclaration(XmlLinkedNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Standalone(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Encoding.setter
    def Encoding(self, value: System.Void): ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @Standalone.setter
    def Standalone(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlDocument(XmlNode):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nt: XmlNameTable): ...
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @overload
    def CreateAttribute(self, name: str) -> XmlAttribute: ...
    @overload
    def CreateAttribute(self, qualifiedName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def CreateAttribute(self, prefix: str, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def CreateCDataSection(self, data: str) -> XmlCDataSection: ...
    @overload
    def CreateComment(self, data: str) -> XmlComment: ...
    @overload
    def CreateDocumentFragment() -> XmlDocumentFragment: ...
    @overload
    def CreateDocumentType(self, name: str, publicId: str, systemId: str, internalSubset: str) -> XmlDocumentType: ...
    @overload
    def CreateElement(self, name: str) -> XmlElement: ...
    @overload
    def CreateElement(self, qualifiedName: str, namespaceURI: str) -> XmlElement: ...
    @overload
    def CreateElement(self, prefix: str, localName: str, namespaceURI: str) -> XmlElement: ...
    @overload
    def CreateEntityReference(self, name: str) -> XmlEntityReference: ...
    @overload
    def CreateNavigator() -> XPath.XPathNavigator: ...
    @overload
    def CreateNode(self, nodeTypeString: str, name: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def CreateNode(self, type_: XmlNodeType, name: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def CreateNode(self, type_: XmlNodeType, prefix: str, name: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def CreateProcessingInstruction(self, target: str, data: str) -> XmlProcessingInstruction: ...
    @overload
    def CreateSignificantWhitespace(self, text: str) -> XmlSignificantWhitespace: ...
    @overload
    def CreateTextNode(self, text: str) -> XmlText: ...
    @overload
    def CreateWhitespace(self, text: str) -> XmlWhitespace: ...
    @overload
    def CreateXmlDeclaration(self, version: str, encoding: str, standalone: str) -> XmlDeclaration: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def DocumentElement(self) -> XmlElement: ...
    @property
    def DocumentType(self) -> XmlDocumentType: ...
    @property
    def Implementation(self) -> XmlImplementation: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreserveWhitespace(self) -> bool: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def Schemas(self) -> Schema.XmlSchemaSet: ...
    @overload
    def GetElementById(self, elementId: str) -> XmlElement: ...
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList: ...
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList: ...
    @overload
    def ImportNode(self, node: XmlNode, deep: bool) -> XmlNode: ...
    @overload
    def Load(self, reader: XmlReader) -> None: ...
    @overload
    def Load(self, txtReader: IO.TextReader) -> None: ...
    @overload
    def Load(self, inStream: IO.Stream) -> None: ...
    @overload
    def Load(self, filename: str) -> None: ...
    @overload
    def LoadXml(self, xml: str) -> None: ...
    @overload
    def ReadNode(self, reader: XmlReader) -> XmlNode: ...
    @overload
    def Save(self, filename: str) -> None: ...
    @overload
    def Save(self, outStream: IO.Stream) -> None: ...
    @overload
    def Save(self, writer: IO.TextWriter) -> None: ...
    @overload
    def Save(self, w: XmlWriter) -> None: ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @PreserveWhitespace.setter
    def PreserveWhitespace(self, value: System.Void): ...
    @Schemas.setter
    def Schemas(self, value: System.Void): ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @overload
    def Validate(self, validationEventHandler: Schema.ValidationEventHandler) -> None: ...
    @overload
    def Validate(self, validationEventHandler: Schema.ValidationEventHandler, nodeToValidate: XmlNode) -> None: ...
    @overload
    def WriteContentTo(self, xw: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...
    @property
    def NodeInserting(self): ...
    @property
    def NodeInserted(self): ...
    @property
    def NodeRemoving(self): ...
    @property
    def NodeRemoved(self): ...
    @property
    def NodeChanging(self): ...
    @property
    def NodeChanged(self): ...

class XmlDocumentFragment(XmlNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlDocumentType(XmlLinkedNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Entities(self) -> XmlNamedNodeMap: ...
    @property
    def InternalSubset(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Notations(self) -> XmlNamedNodeMap: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlElement(XmlLinkedNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Attributes(self) -> XmlAttributeCollection: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str: ...
    @overload
    def GetAttributeNode(self, name: str) -> XmlAttribute: ...
    @overload
    def GetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList: ...
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList: ...
    @overload
    def HasAttribute(self, name: str) -> bool: ...
    @overload
    def HasAttribute(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def RemoveAll() -> None: ...
    @overload
    def RemoveAllAttributes() -> None: ...
    @overload
    def RemoveAttribute(self, name: str) -> None: ...
    @overload
    def RemoveAttribute(self, localName: str, namespaceURI: str) -> None: ...
    @overload
    def RemoveAttributeAt(self, i: int) -> XmlNode: ...
    @overload
    def RemoveAttributeNode(self, oldAttr: XmlAttribute) -> XmlAttribute: ...
    @overload
    def RemoveAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @IsEmpty.setter
    def IsEmpty(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @overload
    def SetAttribute(self, name: str, value: str) -> None: ...
    @overload
    def SetAttribute(self, localName: str, namespaceURI: str, value: str) -> str: ...
    @overload
    def SetAttributeNode(self, newAttr: XmlAttribute) -> XmlAttribute: ...
    @overload
    def SetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlEntity(XmlNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def NotationName(self) -> str: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlEntityReference(XmlLinkedNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlNodeChangedAction(enum.Enum):
    Insert = 0
    Remove = 1
    Change = 2

class XmlImplementation(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nt: XmlNameTable): ...
    @overload
    def CreateDocument() -> XmlDocument: ...
    @overload
    def HasFeature(self, strFeature: str, strVersion: str) -> bool: ...

class XmlLinkedNode(XmlNode):
    """    """
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def PreviousSibling(self) -> XmlNode: ...

class XmlNode(object):
    """    """
    @overload
    def AppendChild(self, newChild: XmlNode) -> XmlNode: ...
    @overload
    def Clone() -> XmlNode: ...
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @overload
    def CreateNavigator() -> XPath.XPathNavigator: ...
    @property
    def Attributes(self) -> XmlAttributeCollection: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def ChildNodes(self) -> XmlNodeList: ...
    @property
    def FirstChild(self) -> XmlNode: ...
    @property
    def HasChildNodes(self) -> bool: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> XmlElement: ...
    @property
    def Item(self) -> XmlElement: ...
    @property
    def LastChild(self) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PreviousSibling(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def GetNamespaceOfPrefix(self, prefix: str) -> str: ...
    @overload
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str: ...
    @overload
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    @overload
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    @overload
    def Normalize() -> None: ...
    @overload
    def PrependChild(self, newChild: XmlNode) -> XmlNode: ...
    @overload
    def RemoveAll() -> None: ...
    @overload
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode: ...
    @overload
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode: ...
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList: ...
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList: ...
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode: ...
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode: ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @Prefix.setter
    def Prefix(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def Supports(self, feature: str, version: str) -> bool: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlNodeChangedEventArgs(System.EventArgs):
    """    """
    def __init__(self, node: XmlNode, oldParent: XmlNode, newParent: XmlNode, oldValue: str, newValue: str, action: XmlNodeChangedAction): ...
    @property
    def Action(self) -> XmlNodeChangedAction: ...
    @property
    def NewParent(self) -> XmlNode: ...
    @property
    def NewValue(self) -> str: ...
    @property
    def Node(self) -> XmlNode: ...
    @property
    def OldParent(self) -> XmlNode: ...
    @property
    def OldValue(self) -> str: ...

class XmlNodeChangedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: XmlNodeChangedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: XmlNodeChangedEventArgs) -> None: ...

class XmlNodeList(object):
    """    """
    @property
    def Count(self) -> int: ...
    @property
    def ItemOf(self) -> XmlNode: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def Item(self, index: int) -> XmlNode: ...

class XmlNodeReader(XmlReader):
    """    """
    def __init__(self, node: XmlNode): ...
    @overload
    def Close() -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def Value(self) -> str: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, attributeIndex: int) -> str: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, name: str, namespaceURI: str) -> str: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, attributeIndex: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToElement() -> bool: ...
    @overload
    def MoveToFirstAttribute() -> bool: ...
    @overload
    def MoveToNextAttribute() -> bool: ...
    @overload
    def Read() -> bool: ...
    @overload
    def ReadAttributeValue() -> bool: ...
    @overload
    def ReadContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadElementContentAsBinHex(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> int: ...
    @overload
    def ReadString() -> str: ...
    @overload
    def ResolveEntity() -> None: ...
    @overload
    def Skip() -> None: ...

class XmlNotation(XmlNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlProcessingInstruction(XmlLinkedNode):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Data(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Target(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Data.setter
    def Data(self, value: System.Void): ...
    @InnerText.setter
    def InnerText(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlSignificantWhitespace(XmlCharacterData):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlText(XmlCharacterData):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def SplitText(self, offset: int) -> XmlText: ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlWhitespace(XmlCharacterData):
    """    """
    @overload
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @overload
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    @overload
    def WriteTo(self, w: XmlWriter) -> None: ...

class XmlTokenizedType(enum.Enum):
    CDATA = 0
    ID = 1
    IDREF = 2
    IDREFS = 3
    ENTITY = 4
    ENTITIES = 5
    NMTOKEN = 6
    NMTOKENS = 7
    NOTATION = 8
    ENUMERATION = 9
    QName = 10
    NCName = 11
    None_ = 12

# endregion
