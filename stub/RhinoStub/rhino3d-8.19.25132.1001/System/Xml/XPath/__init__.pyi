"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["IXPathNavigable", "XPathDocument", "XPathException", "XmlSortOrder", "XmlCaseOrder", "XmlDataType", "XPathResultType", "XPathExpression", "XPathItem", "XPathNamespaceScope", "XPathNavigator", "XPathNodeIterator", "XPathNodeType"]
# endregion

# region: Imports
from System import Collections
from System import IO
from System import Xml
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Xml import Schema
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["XDocumentExtensions"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Xml import Linq
from typing import overload
# endregion

# region: Exports
__all__ = ["Extensions"]
# endregion

# region: Imports
from System import Xml
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Xml import Linq
from typing import overload
# endregion

# region: System.Private.Xml.Linq, Version=7.0.0.0

class Extensions(object):
    """    """
    @overload
    @staticmethod
    def CreateNavigator(node: Linq.XNode) -> XPathNavigator: ...
    @overload
    @staticmethod
    def CreateNavigator(node: Linq.XNode, nameTable: Xml.XmlNameTable) -> XPathNavigator: ...
    @overload
    @staticmethod
    def XPathEvaluate(node: Linq.XNode, expression: str) -> object: ...
    @overload
    @staticmethod
    def XPathEvaluate(node: Linq.XNode, expression: str, resolver: Xml.IXmlNamespaceResolver) -> object: ...
    @overload
    @staticmethod
    def XPathSelectElement(node: Linq.XNode, expression: str) -> Linq.XElement: ...
    @overload
    @staticmethod
    def XPathSelectElement(node: Linq.XNode, expression: str, resolver: Xml.IXmlNamespaceResolver) -> Linq.XElement: ...
    @overload
    @staticmethod
    def XPathSelectElements(node: Linq.XNode, expression: str) -> Generic.IEnumerable: ...
    @overload
    @staticmethod
    def XPathSelectElements(node: Linq.XNode, expression: str, resolver: Xml.IXmlNamespaceResolver) -> Generic.IEnumerable: ...

# endregion

# region: System.Xml.XPath.XDocument, Version=7.0.0.0

class XDocumentExtensions(object):
    """    """
    @overload
    @staticmethod
    def ToXPathNavigable(node: Linq.XNode) -> IXPathNavigable: ...

# endregion

# region: System.Private.Xml, Version=7.0.0.0

class IXPathNavigable:
    """    """
    @overload
    def CreateNavigator() -> XPathNavigator: ...

class XPathDocument(object):
    """    """
    @overload
    def __init__(self, reader: Xml.XmlReader): ...
    @overload
    def __init__(self, textReader: IO.TextReader): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, reader: Xml.XmlReader, space: Xml.XmlSpace): ...
    @overload
    def __init__(self, uri: str, space: Xml.XmlSpace): ...
    @overload
    def CreateNavigator() -> XPathNavigator: ...

class XPathException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XmlSortOrder(enum.Enum):
    Ascending = 1
    Descending = 2

class XmlCaseOrder(enum.Enum):
    None_ = 0
    UpperFirst = 1
    LowerFirst = 2

class XmlDataType(enum.Enum):
    Text = 1
    Number = 2

class XPathResultType(enum.Enum):
    Number = 0
    String = 1
    Navigator = 1
    Boolean = 2
    NodeSet = 3
    Any = 5
    Error = 6

class XPathExpression(object):
    """    """
    @overload
    def AddSort(self, expr: object, comparer: Collections.IComparer) -> None: ...
    @overload
    def AddSort(self, expr: object, order: XmlSortOrder, caseOrder: XmlCaseOrder, lang: str, dataType: XmlDataType) -> None: ...
    @overload
    def Clone() -> XPathExpression: ...
    @overload
    @staticmethod
    def Compile(xpath: str) -> XPathExpression: ...
    @overload
    @staticmethod
    def Compile(xpath: str, nsResolver: Xml.IXmlNamespaceResolver) -> XPathExpression: ...
    @property
    def Expression(self) -> str: ...
    @property
    def ReturnType(self) -> XPathResultType: ...
    @overload
    def SetContext(self, nsManager: Xml.XmlNamespaceManager) -> None: ...
    @overload
    def SetContext(self, nsResolver: Xml.IXmlNamespaceResolver) -> None: ...

class XPathItem(object):
    """    """
    @property
    def IsNode(self) -> bool: ...
    @property
    def TypedValue(self) -> object: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueAsBoolean(self) -> bool: ...
    @property
    def ValueAsDateTime(self) -> System.DateTime: ...
    @property
    def ValueAsDouble(self) -> float: ...
    @property
    def ValueAsInt(self) -> int: ...
    @property
    def ValueAsLong(self) -> System.Int64: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def XmlType(self) -> Schema.XmlSchemaType: ...
    @overload
    def ValueAs(self, returnType: System.Type) -> object: ...
    @overload
    def ValueAs(self, returnType: System.Type, nsResolver: Xml.IXmlNamespaceResolver) -> object: ...

class XPathNamespaceScope(enum.Enum):
    All = 0
    ExcludeXml = 1
    Local = 2

class XPathNavigator(XPathItem):
    """    """
    @overload
    def AppendChild() -> Xml.XmlWriter: ...
    @overload
    def AppendChild(self, newChild: XPathNavigator) -> None: ...
    @overload
    def AppendChild(self, newChild: str) -> None: ...
    @overload
    def AppendChild(self, newChild: Xml.XmlReader) -> None: ...
    @overload
    def AppendChildElement(self, prefix: str, localName: str, namespaceURI: str, value: str) -> None: ...
    @overload
    def CheckValidity(self, schemas: Schema.XmlSchemaSet, validationEventHandler: Schema.ValidationEventHandler) -> bool: ...
    @overload
    def Clone() -> XPathNavigator: ...
    @overload
    def ComparePosition(self, nav: XPathNavigator) -> Xml.XmlNodeOrder: ...
    @overload
    def Compile(self, xpath: str) -> XPathExpression: ...
    @overload
    def CreateAttribute(self, prefix: str, localName: str, namespaceURI: str, value: str) -> None: ...
    @overload
    def CreateAttributes() -> Xml.XmlWriter: ...
    @overload
    def CreateNavigator() -> XPathNavigator: ...
    @overload
    def DeleteRange(self, lastSiblingToDelete: XPathNavigator) -> None: ...
    @overload
    def DeleteSelf() -> None: ...
    @overload
    def Evaluate(self, expr: XPathExpression) -> object: ...
    @overload
    def Evaluate(self, xpath: str) -> object: ...
    @overload
    def Evaluate(self, expr: XPathExpression, context: XPathNodeIterator) -> object: ...
    @overload
    def Evaluate(self, xpath: str, resolver: Xml.IXmlNamespaceResolver) -> object: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanEdit(self) -> bool: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def IsNode(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> Xml.XmlNameTable: ...
    @property
    def NavigatorComparer(self) -> Collections.IEqualityComparer: ...
    @property
    def NodeType(self) -> XPathNodeType: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
    @property
    def TypedValue(self) -> object: ...
    @property
    def UnderlyingObject(self) -> object: ...
    @property
    def ValueAsBoolean(self) -> bool: ...
    @property
    def ValueAsDateTime(self) -> System.DateTime: ...
    @property
    def ValueAsDouble(self) -> float: ...
    @property
    def ValueAsInt(self) -> int: ...
    @property
    def ValueAsLong(self) -> System.Int64: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlType(self) -> Schema.XmlSchemaType: ...
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str: ...
    @overload
    def GetNamespace(self, name: str) -> str: ...
    @overload
    def GetNamespacesInScope(self, scope: Xml.XmlNamespaceScope) -> Generic.IDictionary: ...
    @overload
    def InsertAfter() -> Xml.XmlWriter: ...
    @overload
    def InsertAfter(self, newSibling: XPathNavigator) -> None: ...
    @overload
    def InsertAfter(self, newSibling: Xml.XmlReader) -> None: ...
    @overload
    def InsertAfter(self, newSibling: str) -> None: ...
    @overload
    def InsertBefore() -> Xml.XmlWriter: ...
    @overload
    def InsertBefore(self, newSibling: str) -> None: ...
    @overload
    def InsertBefore(self, newSibling: Xml.XmlReader) -> None: ...
    @overload
    def InsertBefore(self, newSibling: XPathNavigator) -> None: ...
    @overload
    def InsertElementAfter(self, prefix: str, localName: str, namespaceURI: str, value: str) -> None: ...
    @overload
    def InsertElementBefore(self, prefix: str, localName: str, namespaceURI: str, value: str) -> None: ...
    @overload
    def IsDescendant(self, nav: XPathNavigator) -> bool: ...
    @overload
    def IsSamePosition(self, other: XPathNavigator) -> bool: ...
    @overload
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def LookupPrefix(self, namespaceURI: str) -> str: ...
    @overload
    def Matches(self, xpath: str) -> bool: ...
    @overload
    def Matches(self, expr: XPathExpression) -> bool: ...
    @overload
    def MoveTo(self, other: XPathNavigator) -> bool: ...
    @overload
    def MoveToAttribute(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToChild(self, type_: XPathNodeType) -> bool: ...
    @overload
    def MoveToChild(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToFirst() -> bool: ...
    @overload
    def MoveToFirstAttribute() -> bool: ...
    @overload
    def MoveToFirstChild() -> bool: ...
    @overload
    def MoveToFirstNamespace() -> bool: ...
    @overload
    def MoveToFirstNamespace(self, namespaceScope: XPathNamespaceScope) -> bool: ...
    @overload
    def MoveToFollowing(self, type_: XPathNodeType) -> bool: ...
    @overload
    def MoveToFollowing(self, type_: XPathNodeType, end: XPathNavigator) -> bool: ...
    @overload
    def MoveToFollowing(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToFollowing(self, localName: str, namespaceURI: str, end: XPathNavigator) -> bool: ...
    @overload
    def MoveToId(self, id_: str) -> bool: ...
    @overload
    def MoveToNamespace(self, name: str) -> bool: ...
    @overload
    def MoveToNext() -> bool: ...
    @overload
    def MoveToNext(self, type_: XPathNodeType) -> bool: ...
    @overload
    def MoveToNext(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def MoveToNextAttribute() -> bool: ...
    @overload
    def MoveToNextNamespace() -> bool: ...
    @overload
    def MoveToNextNamespace(self, namespaceScope: XPathNamespaceScope) -> bool: ...
    @overload
    def MoveToParent() -> bool: ...
    @overload
    def MoveToPrevious() -> bool: ...
    @overload
    def MoveToRoot() -> None: ...
    @overload
    def PrependChild() -> Xml.XmlWriter: ...
    @overload
    def PrependChild(self, newChild: Xml.XmlReader) -> None: ...
    @overload
    def PrependChild(self, newChild: str) -> None: ...
    @overload
    def PrependChild(self, newChild: XPathNavigator) -> None: ...
    @overload
    def PrependChildElement(self, prefix: str, localName: str, namespaceURI: str, value: str) -> None: ...
    @overload
    def ReadSubtree() -> Xml.XmlReader: ...
    @overload
    def ReplaceRange(self, lastSiblingToReplace: XPathNavigator) -> Xml.XmlWriter: ...
    @overload
    def ReplaceSelf(self, newNode: Xml.XmlReader) -> None: ...
    @overload
    def ReplaceSelf(self, newNode: XPathNavigator) -> None: ...
    @overload
    def ReplaceSelf(self, newNode: str) -> None: ...
    @overload
    def Select(self, expr: XPathExpression) -> XPathNodeIterator: ...
    @overload
    def Select(self, xpath: str) -> XPathNodeIterator: ...
    @overload
    def Select(self, xpath: str, resolver: Xml.IXmlNamespaceResolver) -> XPathNodeIterator: ...
    @overload
    def SelectAncestors(self, type_: XPathNodeType, matchSelf: bool) -> XPathNodeIterator: ...
    @overload
    def SelectAncestors(self, name: str, namespaceURI: str, matchSelf: bool) -> XPathNodeIterator: ...
    @overload
    def SelectChildren(self, type_: XPathNodeType) -> XPathNodeIterator: ...
    @overload
    def SelectChildren(self, name: str, namespaceURI: str) -> XPathNodeIterator: ...
    @overload
    def SelectDescendants(self, type_: XPathNodeType, matchSelf: bool) -> XPathNodeIterator: ...
    @overload
    def SelectDescendants(self, name: str, namespaceURI: str, matchSelf: bool) -> XPathNodeIterator: ...
    @overload
    def SelectSingleNode(self, xpath: str) -> XPathNavigator: ...
    @overload
    def SelectSingleNode(self, expression: XPathExpression) -> XPathNavigator: ...
    @overload
    def SelectSingleNode(self, xpath: str, resolver: Xml.IXmlNamespaceResolver) -> XPathNavigator: ...
    @InnerXml.setter
    def InnerXml(self, value: System.Void): ...
    @OuterXml.setter
    def OuterXml(self, value: System.Void): ...
    @overload
    def SetTypedValue(self, typedValue: object) -> None: ...
    @overload
    def SetValue(self, value: str) -> None: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ValueAs(self, returnType: System.Type, nsResolver: Xml.IXmlNamespaceResolver) -> object: ...
    @overload
    def WriteSubtree(self, writer: Xml.XmlWriter) -> None: ...

class XPathNodeIterator(object):
    """    """
    @overload
    def Clone() -> XPathNodeIterator: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> XPathNavigator: ...
    @property
    def CurrentPosition(self) -> int: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathNodeType(enum.Enum):
    Root = 0
    Element = 1
    Attribute = 2
    Namespace = 3
    Text = 4
    SignificantWhitespace = 5
    Whitespace = 6
    ProcessingInstruction = 7
    Comment = 8
    All = 9

# endregion
