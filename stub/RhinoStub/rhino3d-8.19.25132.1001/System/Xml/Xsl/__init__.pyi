"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Runtime", "XslCompiledTransform", "XsltMessageEncounteredEventArgs", "XsltMessageEncounteredEventHandler", "XsltArgumentList", "IXsltContextFunction", "IXsltContextVariable", "XsltContext", "XsltException", "XsltCompileException", "XslTransform", "XsltSettings"]
# endregion

# region: Imports
from System import IO
from System import Reflection
from System import Xml
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Xml import XPath
from typing import overload
import System
# endregion

# region: System.Private.Xml, Version=7.0.0.0

class XslCompiledTransform(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enableDebug: bool): ...
    @property
    def OutputSettings(self) -> Xml.XmlWriterSettings: ...
    @overload
    def Load(self, stylesheet: XPath.IXPathNavigable) -> None: ...
    @overload
    def Load(self, stylesheetUri: str) -> None: ...
    @overload
    def Load(self, compiledStylesheet: System.Type) -> None: ...
    @overload
    def Load(self, stylesheet: Xml.XmlReader) -> None: ...
    @overload
    def Load(self, stylesheet: XPath.IXPathNavigable, settings: XsltSettings, stylesheetResolver: Xml.XmlResolver) -> None: ...
    @overload
    def Load(self, stylesheetUri: str, settings: XsltSettings, stylesheetResolver: Xml.XmlResolver) -> None: ...
    @overload
    def Load(self, executeMethod: Reflection.MethodInfo, queryData: System.System.Array[System.Byte], earlyBoundTypes: System.System.Array[System.Type]) -> None: ...
    @overload
    def Load(self, stylesheet: Xml.XmlReader, settings: XsltSettings, stylesheetResolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, inputUri: str, resultsFile: str) -> None: ...
    @overload
    def Transform(self, inputUri: str, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: Xml.XmlReader, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: Xml.XmlReader, arguments: XsltArgumentList, results: IO.Stream) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, arguments: XsltArgumentList, results: IO.Stream) -> None: ...
    @overload
    def Transform(self, inputUri: str, arguments: XsltArgumentList, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, inputUri: str, arguments: XsltArgumentList, results: IO.TextWriter) -> None: ...
    @overload
    def Transform(self, inputUri: str, arguments: XsltArgumentList, results: IO.Stream) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, arguments: XsltArgumentList, results: IO.TextWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, arguments: XsltArgumentList, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: Xml.XmlReader, arguments: XsltArgumentList, results: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: Xml.XmlReader, arguments: XsltArgumentList, results: IO.TextWriter) -> None: ...
    @overload
    def Transform(self, input_: Xml.XmlReader, arguments: XsltArgumentList, results: Xml.XmlWriter, documentResolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, arguments: XsltArgumentList, results: Xml.XmlWriter, documentResolver: Xml.XmlResolver) -> None: ...

class XsltMessageEncounteredEventArgs(System.EventArgs):
    """    """
    @property
    def Message(self) -> str: ...

class XsltMessageEncounteredEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: XsltMessageEncounteredEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: XsltMessageEncounteredEventArgs) -> None: ...

class XsltArgumentList(object):
    """    """
    def __init__(self): ...
    @overload
    def AddExtensionObject(self, namespaceUri: str, extension: object) -> None: ...
    @overload
    def AddParam(self, name: str, namespaceUri: str, parameter: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def GetExtensionObject(self, namespaceUri: str) -> object: ...
    @overload
    def GetParam(self, name: str, namespaceUri: str) -> object: ...
    @overload
    def RemoveExtensionObject(self, namespaceUri: str) -> object: ...
    @overload
    def RemoveParam(self, name: str, namespaceUri: str) -> object: ...
    @property
    def XsltMessageEncountered(self): ...

class IXsltContextFunction:
    """    """
    @property
    def ArgTypes(self) -> XPath.System.Array[XPath.XPathResultType]: ...
    @property
    def Maxargs(self) -> int: ...
    @property
    def Minargs(self) -> int: ...
    @property
    def ReturnType(self) -> XPath.XPathResultType: ...
    @overload
    def Invoke(self, xsltContext: XsltContext, args: System.System.Array[object], docContext: XPath.XPathNavigator) -> object: ...

class IXsltContextVariable:
    """    """
    @overload
    def Evaluate(self, xsltContext: XsltContext) -> object: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsParam(self) -> bool: ...
    @property
    def VariableType(self) -> XPath.XPathResultType: ...

class XsltContext(Xml.XmlNamespaceManager):
    """    """
    @overload
    def CompareDocument(self, baseUri: str, nextbaseUri: str) -> int: ...
    @property
    def Whitespace(self) -> bool: ...
    @overload
    def PreserveWhitespace(self, node: XPath.XPathNavigator) -> bool: ...
    @overload
    def ResolveFunction(self, prefix: str, name: str, ArgTypes: XPath.System.Array[XPath.XPathResultType]) -> IXsltContextFunction: ...
    @overload
    def ResolveVariable(self, prefix: str, name: str) -> IXsltContextVariable: ...

class XsltException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def SourceUri(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XsltCompileException(XsltException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, inner: System.Exception, sourceUri: str, lineNumber: int, linePosition: int): ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XslTransform(object):
    """    """
    def __init__(self): ...
    @overload
    def Load(self, stylesheet: Xml.XmlReader) -> None: ...
    @overload
    def Load(self, stylesheet: XPath.IXPathNavigable) -> None: ...
    @overload
    def Load(self, stylesheet: XPath.XPathNavigator) -> None: ...
    @overload
    def Load(self, url: str) -> None: ...
    @overload
    def Load(self, stylesheet: Xml.XmlReader, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Load(self, stylesheet: XPath.IXPathNavigable, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Load(self, stylesheet: XPath.XPathNavigator, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Load(self, url: str, resolver: Xml.XmlResolver) -> None: ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList) -> Xml.XmlReader: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList) -> Xml.XmlReader: ...
    @overload
    def Transform(self, inputfile: str, outputfile: str) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: IO.Stream) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: IO.TextWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, resolver: Xml.XmlResolver) -> Xml.XmlReader: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, resolver: Xml.XmlResolver) -> Xml.XmlReader: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: IO.TextWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: IO.Stream) -> None: ...
    @overload
    def Transform(self, inputfile: str, outputfile: str, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: Xml.XmlWriter) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: IO.Stream, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: Xml.XmlWriter, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: IO.TextWriter, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: IO.Stream, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.IXPathNavigable, args: XsltArgumentList, output: Xml.XmlWriter, resolver: Xml.XmlResolver) -> None: ...
    @overload
    def Transform(self, input_: XPath.XPathNavigator, args: XsltArgumentList, output: IO.TextWriter, resolver: Xml.XmlResolver) -> None: ...

class XsltSettings(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enableDocumentFunction: bool, enableScript: bool): ...
    @property
    def Default(self) -> XsltSettings: ...
    @property
    def EnableDocumentFunction(self) -> bool: ...
    @property
    def EnableScript(self) -> bool: ...
    @property
    def TrustedXslt(self) -> XsltSettings: ...
    @EnableDocumentFunction.setter
    def EnableDocumentFunction(self, value: System.Void): ...
    @EnableScript.setter
    def EnableScript(self, value: System.Void): ...

# endregion
