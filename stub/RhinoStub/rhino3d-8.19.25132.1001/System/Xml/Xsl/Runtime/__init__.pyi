"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ContentIterator", "ElementContentIterator", "NodeKindContentIterator", "AttributeIterator", "NamespaceIterator", "AttributeContentIterator", "ContentMergeIterator", "DodSequenceMerge", "SetIteratorResult", "UnionIterator", "IntersectIterator", "DifferenceIterator", "FollowingSiblingIterator", "FollowingSiblingMergeIterator", "PrecedingSiblingIterator", "PrecedingSiblingDocOrderIterator", "StringConcat", "DescendantIterator", "DescendantMergeIterator", "ParentIterator", "AncestorIterator", "AncestorDocOrderIterator", "XPathFollowingIterator", "XPathFollowingMergeIterator", "PrecedingIterator", "XPathPrecedingIterator", "XPathPrecedingDocOrderIterator", "XPathPrecedingMergeIterator", "NodeRangeIterator", "Int32Aggregator", "Int64Aggregator", "DecimalAggregator", "DoubleAggregator", "XmlCollation", "XmlILIndex", "XmlILStorageConverter", "IteratorResult", "IdIterator", "XmlNavigatorFilter", "XmlQueryContext", "XmlQueryOutput", "XmlQueryRuntime", "XmlQuerySequence", "XmlQueryItemSequence", "XmlQueryNodeSequence", "XmlSortKeyAccumulator", "XsltConvert", "XsltFunctions", "XsltLibrary"]
# endregion

# region: Imports
from System import Collections
from System import Xml
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Xml import Schema
from System.Xml import XPath
from typing import overload
import enum
import System
# endregion

# region: System.Private.Xml, Version=7.0.0.0

class ContentIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class ElementContentIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, localName: str, ns: str) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class NodeKindContentIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, nodeType: XPath.XPathNodeType) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class AttributeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class NamespaceIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class AttributeContentIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class ContentMergeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, input_: XPath.XPathNavigator) -> IteratorResult: ...

class DodSequenceMerge(System.ValueType):
    """    """
    @overload
    def AddSequence(self, sequence: Generic.IList) -> None: ...
    @overload
    def Create(self, runtime: XmlQueryRuntime) -> None: ...
    @overload
    def MergeSequences() -> Generic.IList: ...

class SetIteratorResult(enum.Enum):
    NoMoreNodes = 0
    InitRightIterator = 1
    NeedLeftNode = 2
    NeedRightNode = 3
    HaveCurrentNode = 4

class UnionIterator(System.ValueType):
    """    """
    @overload
    def Create(self, runtime: XmlQueryRuntime) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, nestedNavigator: XPath.XPathNavigator) -> SetIteratorResult: ...

class IntersectIterator(System.ValueType):
    """    """
    @overload
    def Create(self, runtime: XmlQueryRuntime) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, nestedNavigator: XPath.XPathNavigator) -> SetIteratorResult: ...

class DifferenceIterator(System.ValueType):
    """    """
    @overload
    def Create(self, runtime: XmlQueryRuntime) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, nestedNavigator: XPath.XPathNavigator) -> SetIteratorResult: ...

class FollowingSiblingIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class FollowingSiblingMergeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, navigator: XPath.XPathNavigator) -> IteratorResult: ...

class PrecedingSiblingIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class PrecedingSiblingDocOrderIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class StringConcat(System.ValueType):
    """    """
    @overload
    def Clear() -> None: ...
    @overload
    def Concat(self, value: str) -> None: ...
    @property
    def Delimiter(self) -> str: ...
    @overload
    def GetResult() -> str: ...
    @Delimiter.setter
    def Delimiter(self, value: System.Void): ...

class DescendantIterator(System.ValueType):
    """    """
    @overload
    def Create(self, input_: XPath.XPathNavigator, filter_: XmlNavigatorFilter, orSelf: bool) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class DescendantMergeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, filter_: XmlNavigatorFilter, orSelf: bool) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, input_: XPath.XPathNavigator) -> IteratorResult: ...

class ParentIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class AncestorIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter, orSelf: bool) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class AncestorDocOrderIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter, orSelf: bool) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathFollowingIterator(System.ValueType):
    """    """
    @overload
    def Create(self, input_: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathFollowingMergeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, input_: XPath.XPathNavigator) -> IteratorResult: ...

class PrecedingIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathPrecedingIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathPrecedingDocOrderIterator(System.ValueType):
    """    """
    @overload
    def Create(self, input_: XPath.XPathNavigator, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XPathPrecedingMergeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, filter_: XmlNavigatorFilter) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext(self, input_: XPath.XPathNavigator) -> IteratorResult: ...

class NodeRangeIterator(System.ValueType):
    """    """
    @overload
    def Create(self, start: XPath.XPathNavigator, filter_: XmlNavigatorFilter, end: XPath.XPathNavigator) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class Int32Aggregator(System.ValueType):
    """    """
    @overload
    def Average(self, value: int) -> None: ...
    @overload
    def Create() -> None: ...
    @property
    def AverageResult(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaximumResult(self) -> int: ...
    @property
    def MinimumResult(self) -> int: ...
    @property
    def SumResult(self) -> int: ...
    @overload
    def Maximum(self, value: int) -> None: ...
    @overload
    def Minimum(self, value: int) -> None: ...
    @overload
    def Sum(self, value: int) -> None: ...

class Int64Aggregator(System.ValueType):
    """    """
    @overload
    def Average(self, value: System.Int64) -> None: ...
    @overload
    def Create() -> None: ...
    @property
    def AverageResult(self) -> System.Int64: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaximumResult(self) -> System.Int64: ...
    @property
    def MinimumResult(self) -> System.Int64: ...
    @property
    def SumResult(self) -> System.Int64: ...
    @overload
    def Maximum(self, value: System.Int64) -> None: ...
    @overload
    def Minimum(self, value: System.Int64) -> None: ...
    @overload
    def Sum(self, value: System.Int64) -> None: ...

class DecimalAggregator(System.ValueType):
    """    """
    @overload
    def Average(self, value: System.Decimal) -> None: ...
    @overload
    def Create() -> None: ...
    @property
    def AverageResult(self) -> System.Decimal: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaximumResult(self) -> System.Decimal: ...
    @property
    def MinimumResult(self) -> System.Decimal: ...
    @property
    def SumResult(self) -> System.Decimal: ...
    @overload
    def Maximum(self, value: System.Decimal) -> None: ...
    @overload
    def Minimum(self, value: System.Decimal) -> None: ...
    @overload
    def Sum(self, value: System.Decimal) -> None: ...

class DoubleAggregator(System.ValueType):
    """    """
    @overload
    def Average(self, value: float) -> None: ...
    @overload
    def Create() -> None: ...
    @property
    def AverageResult(self) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaximumResult(self) -> float: ...
    @property
    def MinimumResult(self) -> float: ...
    @property
    def SumResult(self) -> float: ...
    @overload
    def Maximum(self, value: float) -> None: ...
    @overload
    def Minimum(self, value: float) -> None: ...
    @overload
    def Sum(self, value: float) -> None: ...

class XmlCollation(object):
    """    """
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...

class XmlILIndex(object):
    """    """
    @overload
    def Add(self, key: str, navigator: XPath.XPathNavigator) -> None: ...
    @overload
    def Lookup(self, key: str) -> XmlQueryNodeSequence: ...

class XmlILStorageConverter(object):
    """    """
    @overload
    @staticmethod
    def BooleanToAtomicValue(value: bool, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def BytesToAtomicValue(value: System.System.Array[System.Byte], index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def DateTimeToAtomicValue(value: System.DateTime, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def DecimalToAtomicValue(value: System.Decimal, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def DoubleToAtomicValue(value: float, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def Int32ToAtomicValue(value: int, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def Int64ToAtomicValue(value: System.Int64, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def ItemsToNavigators(listItems: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def NavigatorsToItems(listNavigators: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def SingleToAtomicValue(value: System.Single, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def StringToAtomicValue(value: str, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def TimeSpanToAtomicValue(value: System.TimeSpan, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...
    @overload
    @staticmethod
    def XmlQualifiedNameToAtomicValue(value: Xml.XmlQualifiedName, index: int, runtime: XmlQueryRuntime) -> Schema.XmlAtomicValue: ...

class IteratorResult(enum.Enum):
    NoMoreNodes = 0
    NeedInputNode = 1
    HaveCurrentNode = 2

class IdIterator(System.ValueType):
    """    """
    @overload
    def Create(self, context: XPath.XPathNavigator, value: str) -> None: ...
    @property
    def Current(self) -> XPath.XPathNavigator: ...
    @overload
    def MoveNext() -> bool: ...

class XmlNavigatorFilter(object):
    """    """
    @overload
    def IsFiltered(self, navigator: XPath.XPathNavigator) -> bool: ...
    @overload
    def MoveToContent(self, navigator: XPath.XPathNavigator) -> bool: ...
    @overload
    def MoveToFollowing(self, navigator: XPath.XPathNavigator, navigatorEnd: XPath.XPathNavigator) -> bool: ...
    @overload
    def MoveToFollowingSibling(self, navigator: XPath.XPathNavigator) -> bool: ...
    @overload
    def MoveToNextContent(self, navigator: XPath.XPathNavigator) -> bool: ...
    @overload
    def MoveToPreviousSibling(self, navigator: XPath.XPathNavigator) -> bool: ...

class XmlQueryContext(object):
    """    """
    @property
    def DefaultDataSource(self) -> XPath.XPathNavigator: ...
    @property
    def DefaultNameTable(self) -> Xml.XmlNameTable: ...
    @property
    def QueryNameTable(self) -> Xml.XmlNameTable: ...
    @overload
    def GetDataSource(self, uriRelative: str, uriBase: str) -> XPath.XPathNavigator: ...
    @overload
    def GetLateBoundObject(self, namespaceUri: str) -> object: ...
    @overload
    def GetParameter(self, localName: str, namespaceUri: str) -> object: ...
    @overload
    def InvokeXsltLateBoundFunction(self, name: str, namespaceUri: str, args: Generic.System.Array[Generic.IList]) -> Generic.IList: ...
    @overload
    def LateBoundFunctionExists(self, name: str, namespaceUri: str) -> bool: ...
    @overload
    def OnXsltMessageEncountered(self, message: str) -> None: ...

class XmlQueryOutput(Xml.XmlWriter):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def EndCopy(self, navigator: XPath.XPathNavigator) -> None: ...
    @overload
    def EndTree() -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def WriteState(self) -> Xml.WriteState: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> Xml.XmlSpace: ...
    @overload
    def LookupPrefix(self, ns: str) -> str: ...
    @overload
    def StartCopy(self, navigator: XPath.XPathNavigator) -> bool: ...
    @overload
    def StartElementContentUnchecked() -> None: ...
    @overload
    def StartTree(self, rootType: XPath.XPathNodeType) -> None: ...
    @overload
    def WriteBase64(self, buffer: System.System.Array[System.Byte], index: int, count: int) -> None: ...
    @overload
    def WriteCData(self, text: str) -> None: ...
    @overload
    def WriteCharEntity(self, ch: System.Char) -> None: ...
    @overload
    def WriteChars(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteComment(self, text: str) -> None: ...
    @overload
    def WriteCommentString(self, text: str) -> None: ...
    @overload
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    @overload
    def WriteEndAttribute() -> None: ...
    @overload
    def WriteEndAttributeUnchecked() -> None: ...
    @overload
    def WriteEndComment() -> None: ...
    @overload
    def WriteEndDocument() -> None: ...
    @overload
    def WriteEndElement() -> None: ...
    @overload
    def WriteEndElementUnchecked(self, localName: str) -> None: ...
    @overload
    def WriteEndElementUnchecked(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteEndNamespace() -> None: ...
    @overload
    def WriteEndProcessingInstruction() -> None: ...
    @overload
    def WriteEndRoot() -> None: ...
    @overload
    def WriteEntityRef(self, name: str) -> None: ...
    @overload
    def WriteFullEndElement() -> None: ...
    @overload
    def WriteItem(self, item: XPath.XPathItem) -> None: ...
    @overload
    def WriteNamespaceDeclaration(self, prefix: str, ns: str) -> None: ...
    @overload
    def WriteNamespaceDeclarationUnchecked(self, prefix: str, ns: str) -> None: ...
    @overload
    def WriteNamespaceString(self, text: str) -> None: ...
    @overload
    def WriteProcessingInstruction(self, target: str, text: str) -> None: ...
    @overload
    def WriteProcessingInstructionString(self, text: str) -> None: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: System.System.Array[System.Char], index: int, count: int) -> None: ...
    @overload
    def WriteRawUnchecked(self, text: str) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartAttributeComputed(self, navigator: XPath.XPathNavigator) -> None: ...
    @overload
    def WriteStartAttributeComputed(self, name: Xml.XmlQualifiedName) -> None: ...
    @overload
    def WriteStartAttributeComputed(self, tagName: str, prefixMappingsIndex: int) -> None: ...
    @overload
    def WriteStartAttributeComputed(self, tagName: str, ns: str) -> None: ...
    @overload
    def WriteStartAttributeLocalName(self, localName: str) -> None: ...
    @overload
    def WriteStartAttributeUnchecked(self, localName: str) -> None: ...
    @overload
    def WriteStartAttributeUnchecked(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartComment() -> None: ...
    @overload
    def WriteStartDocument() -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartElementComputed(self, navigator: XPath.XPathNavigator) -> None: ...
    @overload
    def WriteStartElementComputed(self, name: Xml.XmlQualifiedName) -> None: ...
    @overload
    def WriteStartElementComputed(self, tagName: str, prefixMappingsIndex: int) -> None: ...
    @overload
    def WriteStartElementComputed(self, tagName: str, ns: str) -> None: ...
    @overload
    def WriteStartElementLocalName(self, localName: str) -> None: ...
    @overload
    def WriteStartElementUnchecked(self, localName: str) -> None: ...
    @overload
    def WriteStartElementUnchecked(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartNamespace(self, prefix: str) -> None: ...
    @overload
    def WriteStartProcessingInstruction(self, target: str) -> None: ...
    @overload
    def WriteStartRoot() -> None: ...
    @overload
    def WriteString(self, text: str) -> None: ...
    @overload
    def WriteStringUnchecked(self, text: str) -> None: ...
    @overload
    def WriteSurrogateCharEntity(self, lowChar: System.Char, highChar: System.Char) -> None: ...
    @overload
    def WriteWhitespace(self, ws: str) -> None: ...
    @overload
    def XsltCopyOf(self, navigator: XPath.XPathNavigator) -> None: ...

class XmlQueryRuntime(object):
    """    """
    @overload
    def AddNewIndex(self, context: XPath.XPathNavigator, indexId: int, index: XmlILIndex) -> None: ...
    @overload
    def ChangeTypeXsltArgument(self, indexType: int, value: object, destinationType: System.Type) -> object: ...
    @overload
    def ChangeTypeXsltResult(self, indexType: int, value: object) -> object: ...
    @overload
    def ComparePosition(self, navigatorThis: XPath.XPathNavigator, navigatorThat: XPath.XPathNavigator) -> int: ...
    @overload
    def CreateCollation(self, collation: str) -> XmlCollation: ...
    @overload
    def DebugGetGlobalNames() -> System.System.Array[str]: ...
    @overload
    def DebugGetGlobalValue(self, name: str) -> Collections.IList: ...
    @overload
    def DebugGetXsltValue(self, seq: Collections.IList) -> object: ...
    @overload
    def DebugSetGlobalValue(self, name: str, value: object) -> None: ...
    @overload
    def DocOrderDistinct(self, seq: Generic.IList) -> Generic.IList: ...
    @overload
    def EarlyBoundFunctionExists(self, name: str, namespaceUri: str) -> bool: ...
    @overload
    def EndRtfConstruction() -> (XPath.XPathNavigator, XmlQueryOutput): ...
    @overload
    def EndSequenceConstruction() -> (Generic.IList, XmlQueryOutput): ...
    @overload
    def FindIndex(self, context: XPath.XPathNavigator, indexId: int) -> (bool, XmlILIndex): ...
    @overload
    def GenerateId(self, navigator: XPath.XPathNavigator) -> str: ...
    @property
    def ExternalContext(self) -> XmlQueryContext: ...
    @property
    def NameTable(self) -> Xml.XmlNameTable: ...
    @property
    def Output(self) -> XmlQueryOutput: ...
    @property
    def XsltFunctions(self) -> XsltLibrary: ...
    @overload
    def GetAtomizedName(self, index: int) -> str: ...
    @overload
    def GetCollation(self, index: int) -> XmlCollation: ...
    @overload
    def GetEarlyBoundObject(self, index: int) -> object: ...
    @overload
    def GetGlobalValue(self, index: int) -> object: ...
    @overload
    def GetNameFilter(self, index: int) -> XmlNavigatorFilter: ...
    @overload
    def GetTypeFilter(self, nodeType: XPath.XPathNodeType) -> XmlNavigatorFilter: ...
    @overload
    def IsGlobalComputed(self, index: int) -> bool: ...
    @overload
    def IsQNameEqual(self, n1: XPath.XPathNavigator, n2: XPath.XPathNavigator) -> bool: ...
    @overload
    def IsQNameEqual(self, navigator: XPath.XPathNavigator, indexLocalName: int, indexNamespaceUri: int) -> bool: ...
    @overload
    def MatchesXmlType(self, seq: Generic.IList, code: Schema.XmlTypeCode) -> bool: ...
    @overload
    def MatchesXmlType(self, item: XPath.XPathItem, code: Schema.XmlTypeCode) -> bool: ...
    @overload
    def MatchesXmlType(self, item: XPath.XPathItem, indexType: int) -> bool: ...
    @overload
    def MatchesXmlType(self, seq: Generic.IList, indexType: int) -> bool: ...
    @overload
    @staticmethod
    def OnCurrentNodeChanged(currentNode: XPath.XPathNavigator) -> int: ...
    @overload
    def ParseTagName(self, tagName: str, indexPrefixMappings: int) -> Xml.XmlQualifiedName: ...
    @overload
    def ParseTagName(self, tagName: str, ns: str) -> Xml.XmlQualifiedName: ...
    @overload
    def SendMessage(self, message: str) -> None: ...
    @overload
    def SetGlobalValue(self, index: int, value: object) -> None: ...
    @overload
    def StartRtfConstruction(self, baseUri: str) -> (XmlQueryOutput): ...
    @overload
    def StartSequenceConstruction() -> (XmlQueryOutput): ...
    @overload
    def TextRtfConstruction(self, text: str, baseUri: str) -> XPath.XPathNavigator: ...
    @overload
    def ThrowException(self, text: str) -> None: ...

class XmlQuerySequence(object):
    """    XmlQuerySequence[T]
    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, value: T): ...
    @overload
    def __init__(self, array: System.Array[T], size: int): ...
    @property
    def Empty(self) -> XmlQuerySequence: ...
    @overload
    def Add(self, value: T) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, value: T) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[T], index: int) -> None: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQuerySequence) -> XmlQuerySequence: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQuerySequence, item: T) -> XmlQuerySequence: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> T: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, value: T) -> int: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def SortByKeys(self, keys: System.Array) -> None: ...

class XmlQueryItemSequence(XmlQuerySequence):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, item: XPath.XPathItem): ...
    @property
    def Empty(self) -> XmlQueryItemSequence: ...
    @overload
    def AddClone(self, item: XPath.XPathItem) -> None: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQueryItemSequence) -> XmlQueryItemSequence: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQueryItemSequence, item: XPath.XPathItem) -> XmlQueryItemSequence: ...

class XmlQueryNodeSequence(XmlQuerySequence):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, list_: Generic.IList): ...
    @overload
    def __init__(self, navigator: XPath.XPathNavigator): ...
    @overload
    def __init__(self, array: XPath.System.Array[XPath.XPathNavigator], size: int): ...
    @property
    def Empty(self) -> XmlQueryNodeSequence: ...
    @overload
    def AddClone(self, navigator: XPath.XPathNavigator) -> None: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQueryNodeSequence) -> XmlQueryNodeSequence: ...
    @overload
    @staticmethod
    def CreateOrReuse(seq: XmlQueryNodeSequence, navigator: XPath.XPathNavigator) -> XmlQueryNodeSequence: ...
    @overload
    def DocOrderDistinct(self, comparer: Generic.IComparer) -> XmlQueryNodeSequence: ...
    @property
    def IsDocOrderDistinct(self) -> bool: ...
    @IsDocOrderDistinct.setter
    def IsDocOrderDistinct(self, value: System.Void): ...

class XmlSortKeyAccumulator(System.ValueType):
    """    """
    @overload
    def AddDateTimeSortKey(self, collation: XmlCollation, value: System.DateTime) -> None: ...
    @overload
    def AddDecimalSortKey(self, collation: XmlCollation, value: System.Decimal) -> None: ...
    @overload
    def AddDoubleSortKey(self, collation: XmlCollation, value: float) -> None: ...
    @overload
    def AddEmptySortKey(self, collation: XmlCollation) -> None: ...
    @overload
    def AddIntegerSortKey(self, collation: XmlCollation, value: System.Int64) -> None: ...
    @overload
    def AddIntSortKey(self, collation: XmlCollation, value: int) -> None: ...
    @overload
    def AddStringSortKey(self, collation: XmlCollation, value: str) -> None: ...
    @overload
    def Create() -> None: ...
    @overload
    def FinishSortKeys() -> None: ...
    @property
    def Keys(self) -> System.Array: ...

class XsltConvert(object):
    """    """
    @overload
    @staticmethod
    def EnsureNodeSet(listItems: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def ToBoolean(item: XPath.XPathItem) -> bool: ...
    @overload
    @staticmethod
    def ToBoolean(listItems: Generic.IList) -> bool: ...
    @overload
    @staticmethod
    def ToDateTime(value: str) -> System.DateTime: ...
    @overload
    @staticmethod
    def ToDecimal(value: float) -> System.Decimal: ...
    @overload
    @staticmethod
    def ToDouble(value: int) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: str) -> float: ...
    @overload
    @staticmethod
    def ToDouble(item: XPath.XPathItem) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: System.Decimal) -> float: ...
    @overload
    @staticmethod
    def ToDouble(listItems: Generic.IList) -> float: ...
    @overload
    @staticmethod
    def ToDouble(value: System.Int64) -> float: ...
    @overload
    @staticmethod
    def ToInt(value: float) -> int: ...
    @overload
    @staticmethod
    def ToLong(value: float) -> System.Int64: ...
    @overload
    @staticmethod
    def ToNode(item: XPath.XPathItem) -> XPath.XPathNavigator: ...
    @overload
    @staticmethod
    def ToNode(listItems: Generic.IList) -> XPath.XPathNavigator: ...
    @overload
    @staticmethod
    def ToNodeSet(listItems: Generic.IList) -> Generic.IList: ...
    @overload
    @staticmethod
    def ToNodeSet(item: XPath.XPathItem) -> Generic.IList: ...
    @overload
    @staticmethod
    def ToString(item: XPath.XPathItem) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @overload
    @staticmethod
    def ToString(listItems: Generic.IList) -> str: ...
    @overload
    @staticmethod
    def ToString(value: System.DateTime) -> str: ...

class XsltFunctions(object):
    """    """
    @overload
    @staticmethod
    def BaseUri(navigator: XPath.XPathNavigator) -> str: ...
    @overload
    @staticmethod
    def Contains(s1: str, s2: str) -> bool: ...
    @overload
    @staticmethod
    def EXslObjectType(value: Generic.IList) -> str: ...
    @overload
    @staticmethod
    def Lang(value: str, context: XPath.XPathNavigator) -> bool: ...
    @overload
    @staticmethod
    def MSFormatDateTime(dateTime: str, format_: str, lang: str, isDate: bool) -> str: ...
    @overload
    @staticmethod
    def MSLocalName(name: str) -> str: ...
    @overload
    @staticmethod
    def MSNamespaceUri(name: str, currentNode: XPath.XPathNavigator) -> str: ...
    @overload
    @staticmethod
    def MSNumber(value: Generic.IList) -> float: ...
    @overload
    @staticmethod
    def MSStringCompare(s1: str, s2: str, lang: str, options: str) -> float: ...
    @overload
    @staticmethod
    def MSUtc(dateTime: str) -> str: ...
    @overload
    @staticmethod
    def NormalizeSpace(value: str) -> str: ...
    @overload
    @staticmethod
    def OuterXml(navigator: XPath.XPathNavigator) -> str: ...
    @overload
    @staticmethod
    def Round(value: float) -> float: ...
    @overload
    @staticmethod
    def StartsWith(s1: str, s2: str) -> bool: ...
    @overload
    @staticmethod
    def Substring(value: str, startIndex: float) -> str: ...
    @overload
    @staticmethod
    def Substring(value: str, startIndex: float, length: float) -> str: ...
    @overload
    @staticmethod
    def SubstringAfter(s1: str, s2: str) -> str: ...
    @overload
    @staticmethod
    def SubstringBefore(s1: str, s2: str) -> str: ...
    @overload
    @staticmethod
    def SystemProperty(name: Xml.XmlQualifiedName) -> XPath.XPathItem: ...
    @overload
    @staticmethod
    def Translate(arg: str, mapString: str, transString: str) -> str: ...

class XsltLibrary(object):
    """    """
    @overload
    def CheckScriptNamespace(self, nsUri: str) -> int: ...
    @overload
    def ElementAvailable(self, name: Xml.XmlQualifiedName) -> bool: ...
    @overload
    def EqualityOperator(self, opCode: float, left: Generic.IList, right: Generic.IList) -> bool: ...
    @overload
    def FormatMessage(self, res: str, args: Generic.IList) -> str: ...
    @overload
    def FormatNumberDynamic(self, value: float, formatPicture: str, decimalFormatName: Xml.XmlQualifiedName, errorMessageName: str) -> str: ...
    @overload
    def FormatNumberStatic(self, value: float, decimalFormatterIndex: float) -> str: ...
    @overload
    def FunctionAvailable(self, name: Xml.XmlQualifiedName) -> bool: ...
    @overload
    def IsSameNodeSort(self, nav1: XPath.XPathNavigator, nav2: XPath.XPathNavigator) -> bool: ...
    @overload
    def LangToLcid(self, lang: str, forwardCompatibility: bool) -> int: ...
    @overload
    def NumberFormat(self, value: Generic.IList, formatString: str, lang: float, letterValue: str, groupingSeparator: str, groupingSize: float) -> str: ...
    @overload
    def RegisterDecimalFormat(self, name: Xml.XmlQualifiedName, infinitySymbol: str, nanSymbol: str, characters: str) -> int: ...
    @overload
    def RegisterDecimalFormatter(self, formatPicture: str, infinitySymbol: str, nanSymbol: str, characters: str) -> float: ...
    @overload
    def RelationalOperator(self, opCode: float, left: Generic.IList, right: Generic.IList) -> bool: ...

# endregion
