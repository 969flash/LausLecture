"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["XmlSchemaDatatypeVariety", "IXmlSchemaInfo", "ValidationEventArgs", "ValidationEventHandler", "XmlAtomicValue", "XmlSchema", "XmlSchemaAll", "XmlSchemaAnnotated", "XmlSchemaAnnotation", "XmlSchemaAny", "XmlSchemaAnyAttribute", "XmlSchemaAppInfo", "XmlSchemaAttribute", "XmlSchemaAttributeGroup", "XmlSchemaAttributeGroupRef", "XmlSchemaChoice", "XmlSchemaCollectionEnumerator", "XmlSchemaComplexContent", "XmlSchemaComplexContentExtension", "XmlSchemaComplexContentRestriction", "XmlSchemaComplexType", "XmlSchemaContent", "XmlSchemaContentModel", "XmlSchemaContentProcessing", "XmlSchemaContentType", "XmlSchemaDatatype", "XmlSchemaDerivationMethod", "XmlSchemaDocumentation", "XmlSchemaElement", "XmlSchemaException", "XmlSchemaExternal", "XmlSchemaFacet", "XmlSchemaNumericFacet", "XmlSchemaLengthFacet", "XmlSchemaMinLengthFacet", "XmlSchemaMaxLengthFacet", "XmlSchemaPatternFacet", "XmlSchemaEnumerationFacet", "XmlSchemaMinExclusiveFacet", "XmlSchemaMinInclusiveFacet", "XmlSchemaMaxExclusiveFacet", "XmlSchemaMaxInclusiveFacet", "XmlSchemaTotalDigitsFacet", "XmlSchemaFractionDigitsFacet", "XmlSchemaWhiteSpaceFacet", "XmlSchemaForm", "XmlSchemaGroup", "XmlSchemaGroupBase", "XmlSchemaGroupRef", "XmlSchemaIdentityConstraint", "XmlSchemaXPath", "XmlSchemaUnique", "XmlSchemaKey", "XmlSchemaKeyref", "XmlSchemaImport", "XmlSchemaInclude", "XmlSchemaInfo", "XmlSchemaNotation", "XmlSchemaObject", "XmlSchemaObjectCollection", "XmlSchemaObjectEnumerator", "XmlSchemaObjectTable", "XmlSchemaParticle", "XmlSchemaRedefine", "XmlSchemaSequence", "XmlSchemaSet", "XmlSchemaCompilationSettings", "XmlSchemaSimpleContent", "XmlSchemaSimpleContentExtension", "XmlSchemaSimpleContentRestriction", "XmlSchemaSimpleType", "XmlSchemaSimpleTypeContent", "XmlSchemaSimpleTypeList", "XmlSchemaSimpleTypeRestriction", "XmlSchemaSimpleTypeUnion", "XmlSchemaType", "XmlSchemaUse", "XmlSchemaValidationException", "XmlValueGetter", "XmlSchemaValidationFlags", "XmlSchemaValidator", "XmlSchemaValidity", "XmlSeverityType", "XmlTypeCode", "XmlSchemaInference", "InferenceOption", "XmlSchemaInferenceException"]
# endregion

# region: Imports
from System import Collections
from System import IO
from System import Xml
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Xml import Serialization
from System.Xml import XPath
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Extensions"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from System.Xml import Linq
from typing import overload
# endregion

# region: System.Private.Xml.Linq, Version=7.0.0.0

class Extensions(object):
    """    """
    @overload
    @staticmethod
    def GetSchemaInfo(source: Linq.XElement) -> IXmlSchemaInfo: ...
    @overload
    @staticmethod
    def GetSchemaInfo(source: Linq.XAttribute) -> IXmlSchemaInfo: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XDocument, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler) -> None: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XDocument, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler, addSchemaInfo: bool) -> None: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XElement, partialValidationType: XmlSchemaObject, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler) -> None: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XAttribute, partialValidationType: XmlSchemaObject, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler) -> None: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XElement, partialValidationType: XmlSchemaObject, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler, addSchemaInfo: bool) -> None: ...
    @overload
    @staticmethod
    def Validate(source: Linq.XAttribute, partialValidationType: XmlSchemaObject, schemas: XmlSchemaSet, validationEventHandler: ValidationEventHandler, addSchemaInfo: bool) -> None: ...

# endregion

# region: System.Private.Xml, Version=7.0.0.0

class XmlSchemaDatatypeVariety(enum.Enum):
    Atomic = 0
    List = 1
    Union = 2

class IXmlSchemaInfo:
    """    """
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def MemberType(self) -> XmlSchemaSimpleType: ...
    @property
    def SchemaAttribute(self) -> XmlSchemaAttribute: ...
    @property
    def SchemaElement(self) -> XmlSchemaElement: ...
    @property
    def SchemaType(self) -> XmlSchemaType: ...
    @property
    def Validity(self) -> XmlSchemaValidity: ...

class ValidationEventArgs(System.EventArgs):
    """    """
    @property
    def Exception(self) -> XmlSchemaException: ...
    @property
    def Message(self) -> str: ...
    @property
    def Severity(self) -> XmlSeverityType: ...

class ValidationEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: ValidationEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: ValidationEventArgs) -> None: ...

class XmlAtomicValue(XPath.XPathItem):
    """    """
    @overload
    def Clone() -> XmlAtomicValue: ...
    @property
    def IsNode(self) -> bool: ...
    @property
    def TypedValue(self) -> object: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueAsBoolean(self) -> bool: ...
    @property
    def ValueAsDateTime(self) -> System.DateTime: ...
    @property
    def ValueAsDouble(self) -> float: ...
    @property
    def ValueAsInt(self) -> int: ...
    @property
    def ValueAsLong(self) -> System.Int64: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def XmlType(self) -> XmlSchemaType: ...
    @overload
    def ToString() -> str: ...
    @overload
    def ValueAs(self, type_: System.Type, nsResolver: Xml.IXmlNamespaceResolver) -> object: ...

class XmlSchema(XmlSchemaObject):
    """    """
    def __init__(self): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def InstanceNamespace(self) -> str: ...
    @property
    def AttributeFormDefault(self) -> XmlSchemaForm: ...
    @property
    def AttributeGroups(self) -> XmlSchemaObjectTable: ...
    @property
    def Attributes(self) -> XmlSchemaObjectTable: ...
    @property
    def BlockDefault(self) -> XmlSchemaDerivationMethod: ...
    @property
    def ElementFormDefault(self) -> XmlSchemaForm: ...
    @property
    def Elements(self) -> XmlSchemaObjectTable: ...
    @property
    def FinalDefault(self) -> XmlSchemaDerivationMethod: ...
    @property
    def Groups(self) -> XmlSchemaObjectTable: ...
    @property
    def Id(self) -> str: ...
    @property
    def Includes(self) -> XmlSchemaObjectCollection: ...
    @property
    def IsCompiled(self) -> bool: ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...
    @property
    def Notations(self) -> XmlSchemaObjectTable: ...
    @property
    def SchemaTypes(self) -> XmlSchemaObjectTable: ...
    @property
    def TargetNamespace(self) -> str: ...
    @property
    def UnhandledAttributes(self) -> Xml.System.Array[Xml.XmlAttribute]: ...
    @property
    def Version(self) -> str: ...
    @overload
    @staticmethod
    def Read(reader: IO.TextReader, validationEventHandler: ValidationEventHandler) -> XmlSchema: ...
    @overload
    @staticmethod
    def Read(stream: IO.Stream, validationEventHandler: ValidationEventHandler) -> XmlSchema: ...
    @overload
    @staticmethod
    def Read(reader: Xml.XmlReader, validationEventHandler: ValidationEventHandler) -> XmlSchema: ...
    @AttributeFormDefault.setter
    def AttributeFormDefault(self, value: System.Void): ...
    @BlockDefault.setter
    def BlockDefault(self, value: System.Void): ...
    @ElementFormDefault.setter
    def ElementFormDefault(self, value: System.Void): ...
    @FinalDefault.setter
    def FinalDefault(self, value: System.Void): ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @TargetNamespace.setter
    def TargetNamespace(self, value: System.Void): ...
    @UnhandledAttributes.setter
    def UnhandledAttributes(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...
    @overload
    def Write(self, writer: IO.TextWriter) -> None: ...
    @overload
    def Write(self, stream: IO.Stream) -> None: ...
    @overload
    def Write(self, writer: Xml.XmlWriter) -> None: ...
    @overload
    def Write(self, stream: IO.Stream, namespaceManager: Xml.XmlNamespaceManager) -> None: ...
    @overload
    def Write(self, writer: Xml.XmlWriter, namespaceManager: Xml.XmlNamespaceManager) -> None: ...
    @overload
    def Write(self, writer: IO.TextWriter, namespaceManager: Xml.XmlNamespaceManager) -> None: ...

class XmlSchemaAll(XmlSchemaGroupBase):
    """    """
    def __init__(self): ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...

class XmlSchemaAnnotated(XmlSchemaObject):
    """    """
    def __init__(self): ...
    @property
    def Annotation(self) -> XmlSchemaAnnotation: ...
    @property
    def Id(self) -> str: ...
    @property
    def UnhandledAttributes(self) -> Xml.System.Array[Xml.XmlAttribute]: ...
    @Annotation.setter
    def Annotation(self, value: System.Void): ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @UnhandledAttributes.setter
    def UnhandledAttributes(self, value: System.Void): ...

class XmlSchemaAnnotation(XmlSchemaObject):
    """    """
    def __init__(self): ...
    @property
    def Id(self) -> str: ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...
    @property
    def UnhandledAttributes(self) -> Xml.System.Array[Xml.XmlAttribute]: ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @UnhandledAttributes.setter
    def UnhandledAttributes(self, value: System.Void): ...

class XmlSchemaAny(XmlSchemaParticle):
    """    """
    def __init__(self): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProcessContents(self) -> XmlSchemaContentProcessing: ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProcessContents.setter
    def ProcessContents(self, value: System.Void): ...

class XmlSchemaAnyAttribute(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ProcessContents(self) -> XmlSchemaContentProcessing: ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...
    @ProcessContents.setter
    def ProcessContents(self, value: System.Void): ...

class XmlSchemaAppInfo(XmlSchemaObject):
    """    """
    def __init__(self): ...
    @property
    def Markup(self) -> Xml.System.Array[Xml.XmlNode]: ...
    @property
    def Source(self) -> str: ...
    @Markup.setter
    def Markup(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class XmlSchemaAttribute(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def AttributeSchemaType(self) -> XmlSchemaSimpleType: ...
    @property
    def AttributeType(self) -> object: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def FixedValue(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def Name(self) -> str: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @property
    def RefName(self) -> Xml.XmlQualifiedName: ...
    @property
    def SchemaType(self) -> XmlSchemaSimpleType: ...
    @property
    def SchemaTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Use(self) -> XmlSchemaUse: ...
    @DefaultValue.setter
    def DefaultValue(self, value: System.Void): ...
    @FixedValue.setter
    def FixedValue(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @RefName.setter
    def RefName(self, value: System.Void): ...
    @SchemaType.setter
    def SchemaType(self, value: System.Void): ...
    @SchemaTypeName.setter
    def SchemaTypeName(self, value: System.Void): ...
    @Use.setter
    def Use(self, value: System.Void): ...

class XmlSchemaAttributeGroup(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @property
    def RedefinedAttributeGroup(self) -> XmlSchemaAttributeGroup: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class XmlSchemaAttributeGroupRef(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def RefName(self) -> Xml.XmlQualifiedName: ...
    @RefName.setter
    def RefName(self, value: System.Void): ...

class XmlSchemaChoice(XmlSchemaGroupBase):
    """    """
    def __init__(self): ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...

class XmlSchemaCollectionEnumerator(object):
    """    """
    @property
    def Current(self) -> XmlSchema: ...
    @overload
    def MoveNext() -> bool: ...

class XmlSchemaComplexContent(XmlSchemaContentModel):
    """    """
    def __init__(self): ...
    @property
    def Content(self) -> XmlSchemaContent: ...
    @property
    def IsMixed(self) -> bool: ...
    @Content.setter
    def Content(self, value: System.Void): ...
    @IsMixed.setter
    def IsMixed(self, value: System.Void): ...

class XmlSchemaComplexContentExtension(XmlSchemaContent):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def BaseTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Particle(self) -> XmlSchemaParticle: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @BaseTypeName.setter
    def BaseTypeName(self, value: System.Void): ...
    @Particle.setter
    def Particle(self, value: System.Void): ...

class XmlSchemaComplexContentRestriction(XmlSchemaContent):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def BaseTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Particle(self) -> XmlSchemaParticle: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @BaseTypeName.setter
    def BaseTypeName(self, value: System.Void): ...
    @Particle.setter
    def Particle(self, value: System.Void): ...

class XmlSchemaComplexType(XmlSchemaType):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def AttributeUses(self) -> XmlSchemaObjectTable: ...
    @property
    def AttributeWildcard(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Block(self) -> XmlSchemaDerivationMethod: ...
    @property
    def BlockResolved(self) -> XmlSchemaDerivationMethod: ...
    @property
    def ContentModel(self) -> XmlSchemaContentModel: ...
    @property
    def ContentType(self) -> XmlSchemaContentType: ...
    @property
    def ContentTypeParticle(self) -> XmlSchemaParticle: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsMixed(self) -> bool: ...
    @property
    def Particle(self) -> XmlSchemaParticle: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @Block.setter
    def Block(self, value: System.Void): ...
    @ContentModel.setter
    def ContentModel(self, value: System.Void): ...
    @IsAbstract.setter
    def IsAbstract(self, value: System.Void): ...
    @IsMixed.setter
    def IsMixed(self, value: System.Void): ...
    @Particle.setter
    def Particle(self, value: System.Void): ...

class XmlSchemaContent(XmlSchemaAnnotated):
    """    """

class XmlSchemaContentModel(XmlSchemaAnnotated):
    """    """
    @property
    def Content(self) -> XmlSchemaContent: ...
    @Content.setter
    def Content(self, value: System.Void): ...

class XmlSchemaContentProcessing(enum.Enum):
    None_ = 0
    Skip = 1
    Lax = 2
    Strict = 3

class XmlSchemaContentType(enum.Enum):
    TextOnly = 0
    Empty = 1
    ElementOnly = 2
    Mixed = 3

class XmlSchemaDatatype(object):
    """    """
    @overload
    def ChangeType(self, value: object, targetType: System.Type) -> object: ...
    @overload
    def ChangeType(self, value: object, targetType: System.Type, namespaceResolver: Xml.IXmlNamespaceResolver) -> object: ...
    @property
    def TokenizedType(self) -> Xml.XmlTokenizedType: ...
    @property
    def TypeCode(self) -> XmlTypeCode: ...
    @property
    def ValueType(self) -> System.Type: ...
    @property
    def Variety(self) -> XmlSchemaDatatypeVariety: ...
    @overload
    def IsDerivedFrom(self, datatype: XmlSchemaDatatype) -> bool: ...
    @overload
    def ParseValue(self, s: str, nameTable: Xml.XmlNameTable, nsmgr: Xml.IXmlNamespaceResolver) -> object: ...

class XmlSchemaDerivationMethod(enum.Enum):
    Empty = 0
    Substitution = 1
    Extension = 2
    Restriction = 4
    List = 8
    Union = 16
    All = 255
    None_ = 256

class XmlSchemaDocumentation(XmlSchemaObject):
    """    """
    def __init__(self): ...
    @property
    def Language(self) -> str: ...
    @property
    def Markup(self) -> Xml.System.Array[Xml.XmlNode]: ...
    @property
    def Source(self) -> str: ...
    @Language.setter
    def Language(self, value: System.Void): ...
    @Markup.setter
    def Markup(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class XmlSchemaElement(XmlSchemaParticle):
    """    """
    def __init__(self): ...
    @property
    def Block(self) -> XmlSchemaDerivationMethod: ...
    @property
    def BlockResolved(self) -> XmlSchemaDerivationMethod: ...
    @property
    def Constraints(self) -> XmlSchemaObjectCollection: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def ElementSchemaType(self) -> XmlSchemaType: ...
    @property
    def ElementType(self) -> object: ...
    @property
    def Final(self) -> XmlSchemaDerivationMethod: ...
    @property
    def FinalResolved(self) -> XmlSchemaDerivationMethod: ...
    @property
    def FixedValue(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsNillable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @property
    def RefName(self) -> Xml.XmlQualifiedName: ...
    @property
    def SchemaType(self) -> XmlSchemaType: ...
    @property
    def SchemaTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def SubstitutionGroup(self) -> Xml.XmlQualifiedName: ...
    @Block.setter
    def Block(self, value: System.Void): ...
    @DefaultValue.setter
    def DefaultValue(self, value: System.Void): ...
    @Final.setter
    def Final(self, value: System.Void): ...
    @FixedValue.setter
    def FixedValue(self, value: System.Void): ...
    @Form.setter
    def Form(self, value: System.Void): ...
    @IsAbstract.setter
    def IsAbstract(self, value: System.Void): ...
    @IsNillable.setter
    def IsNillable(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @RefName.setter
    def RefName(self, value: System.Void): ...
    @SchemaType.setter
    def SchemaType(self, value: System.Void): ...
    @SchemaTypeName.setter
    def SchemaTypeName(self, value: System.Void): ...
    @SubstitutionGroup.setter
    def SubstitutionGroup(self, value: System.Void): ...

class XmlSchemaException(System.SystemException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, lineNumber: int, linePosition: int): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def SourceSchemaObject(self) -> XmlSchemaObject: ...
    @property
    def SourceUri(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XmlSchemaExternal(XmlSchemaObject):
    """    """
    @property
    def Id(self) -> str: ...
    @property
    def Schema(self) -> XmlSchema: ...
    @property
    def SchemaLocation(self) -> str: ...
    @property
    def UnhandledAttributes(self) -> Xml.System.Array[Xml.XmlAttribute]: ...
    @Id.setter
    def Id(self, value: System.Void): ...
    @Schema.setter
    def Schema(self, value: System.Void): ...
    @SchemaLocation.setter
    def SchemaLocation(self, value: System.Void): ...
    @UnhandledAttributes.setter
    def UnhandledAttributes(self, value: System.Void): ...

class XmlSchemaFacet(XmlSchemaAnnotated):
    """    """
    @property
    def IsFixed(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @IsFixed.setter
    def IsFixed(self, value: System.Void): ...
    @Value.setter
    def Value(self, value: System.Void): ...

class XmlSchemaNumericFacet(XmlSchemaFacet):
    """    """

class XmlSchemaLengthFacet(XmlSchemaNumericFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMinLengthFacet(XmlSchemaNumericFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMaxLengthFacet(XmlSchemaNumericFacet):
    """    """
    def __init__(self): ...

class XmlSchemaPatternFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaEnumerationFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMinExclusiveFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMinInclusiveFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMaxExclusiveFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaMaxInclusiveFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaTotalDigitsFacet(XmlSchemaNumericFacet):
    """    """
    def __init__(self): ...

class XmlSchemaFractionDigitsFacet(XmlSchemaNumericFacet):
    """    """
    def __init__(self): ...

class XmlSchemaWhiteSpaceFacet(XmlSchemaFacet):
    """    """
    def __init__(self): ...

class XmlSchemaForm(enum.Enum):
    None_ = 0
    Qualified = 1
    Unqualified = 2

class XmlSchemaGroup(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def Particle(self) -> XmlSchemaGroupBase: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Particle.setter
    def Particle(self, value: System.Void): ...

class XmlSchemaGroupBase(XmlSchemaParticle):
    """    """
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...

class XmlSchemaGroupRef(XmlSchemaParticle):
    """    """
    def __init__(self): ...
    @property
    def Particle(self) -> XmlSchemaGroupBase: ...
    @property
    def RefName(self) -> Xml.XmlQualifiedName: ...
    @RefName.setter
    def RefName(self, value: System.Void): ...

class XmlSchemaIdentityConstraint(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def Fields(self) -> XmlSchemaObjectCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Selector(self) -> XmlSchemaXPath: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Selector.setter
    def Selector(self, value: System.Void): ...

class XmlSchemaXPath(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def XPath(self) -> str: ...
    @XPath.setter
    def XPath(self, value: System.Void): ...

class XmlSchemaUnique(XmlSchemaIdentityConstraint):
    """    """
    def __init__(self): ...

class XmlSchemaKey(XmlSchemaIdentityConstraint):
    """    """
    def __init__(self): ...

class XmlSchemaKeyref(XmlSchemaIdentityConstraint):
    """    """
    def __init__(self): ...
    @property
    def Refer(self) -> Xml.XmlQualifiedName: ...
    @Refer.setter
    def Refer(self, value: System.Void): ...

class XmlSchemaImport(XmlSchemaExternal):
    """    """
    def __init__(self): ...
    @property
    def Annotation(self) -> XmlSchemaAnnotation: ...
    @property
    def Namespace(self) -> str: ...
    @Annotation.setter
    def Annotation(self, value: System.Void): ...
    @Namespace.setter
    def Namespace(self, value: System.Void): ...

class XmlSchemaInclude(XmlSchemaExternal):
    """    """
    def __init__(self): ...
    @property
    def Annotation(self) -> XmlSchemaAnnotation: ...
    @Annotation.setter
    def Annotation(self, value: System.Void): ...

class XmlSchemaInfo(object):
    """    """
    def __init__(self): ...
    @property
    def ContentType(self) -> XmlSchemaContentType: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def MemberType(self) -> XmlSchemaSimpleType: ...
    @property
    def SchemaAttribute(self) -> XmlSchemaAttribute: ...
    @property
    def SchemaElement(self) -> XmlSchemaElement: ...
    @property
    def SchemaType(self) -> XmlSchemaType: ...
    @property
    def Validity(self) -> XmlSchemaValidity: ...
    @ContentType.setter
    def ContentType(self, value: System.Void): ...
    @IsDefault.setter
    def IsDefault(self, value: System.Void): ...
    @IsNil.setter
    def IsNil(self, value: System.Void): ...
    @MemberType.setter
    def MemberType(self, value: System.Void): ...
    @SchemaAttribute.setter
    def SchemaAttribute(self, value: System.Void): ...
    @SchemaElement.setter
    def SchemaElement(self, value: System.Void): ...
    @SchemaType.setter
    def SchemaType(self, value: System.Void): ...
    @Validity.setter
    def Validity(self, value: System.Void): ...

class XmlSchemaNotation(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def Public(self) -> str: ...
    @property
    def System(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Public.setter
    def Public(self, value: System.Void): ...
    @System.setter
    def System(self, value: System.Void): ...

class XmlSchemaObject(object):
    """    """
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Namespaces(self) -> Serialization.XmlSerializerNamespaces: ...
    @property
    def Parent(self) -> XmlSchemaObject: ...
    @property
    def SourceUri(self) -> str: ...
    @LineNumber.setter
    def LineNumber(self, value: System.Void): ...
    @LinePosition.setter
    def LinePosition(self, value: System.Void): ...
    @Namespaces.setter
    def Namespaces(self, value: System.Void): ...
    @Parent.setter
    def Parent(self, value: System.Void): ...
    @SourceUri.setter
    def SourceUri(self, value: System.Void): ...

class XmlSchemaObjectCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parent: XmlSchemaObject): ...
    @overload
    def Add(self, item: XmlSchemaObject) -> int: ...
    @overload
    def Contains(self, item: XmlSchemaObject) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[XmlSchemaObject], index: int) -> None: ...
    @property
    def Item(self) -> XmlSchemaObject: ...
    @overload
    def GetEnumerator() -> XmlSchemaObjectEnumerator: ...
    @overload
    def IndexOf(self, item: XmlSchemaObject) -> int: ...
    @overload
    def Insert(self, index: int, item: XmlSchemaObject) -> None: ...
    @overload
    def Remove(self, item: XmlSchemaObject) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class XmlSchemaObjectEnumerator(object):
    """    """
    @property
    def Current(self) -> XmlSchemaObject: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

class XmlSchemaObjectTable(object):
    """    """
    @overload
    def Contains(self, name: Xml.XmlQualifiedName) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> XmlSchemaObject: ...
    @property
    def Names(self) -> Collections.ICollection: ...
    @property
    def Values(self) -> Collections.ICollection: ...
    @overload
    def GetEnumerator() -> Collections.IDictionaryEnumerator: ...

class XmlSchemaParticle(XmlSchemaAnnotated):
    """    """
    @property
    def MaxOccurs(self) -> System.Decimal: ...
    @property
    def MaxOccursString(self) -> str: ...
    @property
    def MinOccurs(self) -> System.Decimal: ...
    @property
    def MinOccursString(self) -> str: ...
    @MaxOccurs.setter
    def MaxOccurs(self, value: System.Void): ...
    @MaxOccursString.setter
    def MaxOccursString(self, value: System.Void): ...
    @MinOccurs.setter
    def MinOccurs(self, value: System.Void): ...
    @MinOccursString.setter
    def MinOccursString(self, value: System.Void): ...

class XmlSchemaRedefine(XmlSchemaExternal):
    """    """
    def __init__(self): ...
    @property
    def AttributeGroups(self) -> XmlSchemaObjectTable: ...
    @property
    def Groups(self) -> XmlSchemaObjectTable: ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...
    @property
    def SchemaTypes(self) -> XmlSchemaObjectTable: ...

class XmlSchemaSequence(XmlSchemaGroupBase):
    """    """
    def __init__(self): ...
    @property
    def Items(self) -> XmlSchemaObjectCollection: ...

class XmlSchemaSet(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nameTable: Xml.XmlNameTable): ...
    @overload
    def Add(self, schemas: XmlSchemaSet) -> None: ...
    @overload
    def Add(self, schema: XmlSchema) -> XmlSchema: ...
    @overload
    def Add(self, targetNamespace: str, schemaUri: str) -> XmlSchema: ...
    @overload
    def Add(self, targetNamespace: str, schemaDocument: Xml.XmlReader) -> XmlSchema: ...
    @overload
    def Compile() -> None: ...
    @overload
    def Contains(self, schema: XmlSchema) -> bool: ...
    @overload
    def Contains(self, targetNamespace: str) -> bool: ...
    @overload
    def CopyTo(self, schemas: System.Array[XmlSchema], index: int) -> None: ...
    @property
    def CompilationSettings(self) -> XmlSchemaCompilationSettings: ...
    @property
    def Count(self) -> int: ...
    @property
    def GlobalAttributes(self) -> XmlSchemaObjectTable: ...
    @property
    def GlobalElements(self) -> XmlSchemaObjectTable: ...
    @property
    def GlobalTypes(self) -> XmlSchemaObjectTable: ...
    @property
    def IsCompiled(self) -> bool: ...
    @property
    def NameTable(self) -> Xml.XmlNameTable: ...
    @overload
    def Remove(self, schema: XmlSchema) -> XmlSchema: ...
    @overload
    def RemoveRecursive(self, schemaToRemove: XmlSchema) -> bool: ...
    @overload
    def Reprocess(self, schema: XmlSchema) -> XmlSchema: ...
    @overload
    def Schemas() -> Collections.ICollection: ...
    @overload
    def Schemas(self, targetNamespace: str) -> Collections.ICollection: ...
    @CompilationSettings.setter
    def CompilationSettings(self, value: System.Void): ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @property
    def ValidationEventHandler(self): ...

class XmlSchemaCompilationSettings(object):
    """    """
    def __init__(self): ...
    @property
    def EnableUpaCheck(self) -> bool: ...
    @EnableUpaCheck.setter
    def EnableUpaCheck(self, value: System.Void): ...

class XmlSchemaSimpleContent(XmlSchemaContentModel):
    """    """
    def __init__(self): ...
    @property
    def Content(self) -> XmlSchemaContent: ...
    @Content.setter
    def Content(self, value: System.Void): ...

class XmlSchemaSimpleContentExtension(XmlSchemaContent):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def BaseTypeName(self) -> Xml.XmlQualifiedName: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @BaseTypeName.setter
    def BaseTypeName(self, value: System.Void): ...

class XmlSchemaSimpleContentRestriction(XmlSchemaContent):
    """    """
    def __init__(self): ...
    @property
    def AnyAttribute(self) -> XmlSchemaAnyAttribute: ...
    @property
    def Attributes(self) -> XmlSchemaObjectCollection: ...
    @property
    def BaseType(self) -> XmlSchemaSimpleType: ...
    @property
    def BaseTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Facets(self) -> XmlSchemaObjectCollection: ...
    @AnyAttribute.setter
    def AnyAttribute(self, value: System.Void): ...
    @BaseType.setter
    def BaseType(self, value: System.Void): ...
    @BaseTypeName.setter
    def BaseTypeName(self, value: System.Void): ...

class XmlSchemaSimpleType(XmlSchemaType):
    """    """
    def __init__(self): ...
    @property
    def Content(self) -> XmlSchemaSimpleTypeContent: ...
    @Content.setter
    def Content(self, value: System.Void): ...

class XmlSchemaSimpleTypeContent(XmlSchemaAnnotated):
    """    """

class XmlSchemaSimpleTypeList(XmlSchemaSimpleTypeContent):
    """    """
    def __init__(self): ...
    @property
    def BaseItemType(self) -> XmlSchemaSimpleType: ...
    @property
    def ItemType(self) -> XmlSchemaSimpleType: ...
    @property
    def ItemTypeName(self) -> Xml.XmlQualifiedName: ...
    @BaseItemType.setter
    def BaseItemType(self, value: System.Void): ...
    @ItemType.setter
    def ItemType(self, value: System.Void): ...
    @ItemTypeName.setter
    def ItemTypeName(self, value: System.Void): ...

class XmlSchemaSimpleTypeRestriction(XmlSchemaSimpleTypeContent):
    """    """
    def __init__(self): ...
    @property
    def BaseType(self) -> XmlSchemaSimpleType: ...
    @property
    def BaseTypeName(self) -> Xml.XmlQualifiedName: ...
    @property
    def Facets(self) -> XmlSchemaObjectCollection: ...
    @BaseType.setter
    def BaseType(self, value: System.Void): ...
    @BaseTypeName.setter
    def BaseTypeName(self, value: System.Void): ...

class XmlSchemaSimpleTypeUnion(XmlSchemaSimpleTypeContent):
    """    """
    def __init__(self): ...
    @property
    def BaseMemberTypes(self) -> System.Array[XmlSchemaSimpleType]: ...
    @property
    def BaseTypes(self) -> XmlSchemaObjectCollection: ...
    @property
    def MemberTypes(self) -> Xml.System.Array[Xml.XmlQualifiedName]: ...
    @MemberTypes.setter
    def MemberTypes(self, value: System.Void): ...

class XmlSchemaType(XmlSchemaAnnotated):
    """    """
    def __init__(self): ...
    @property
    def BaseSchemaType(self) -> object: ...
    @property
    def BaseXmlSchemaType(self) -> XmlSchemaType: ...
    @property
    def Datatype(self) -> XmlSchemaDatatype: ...
    @property
    def DerivedBy(self) -> XmlSchemaDerivationMethod: ...
    @property
    def Final(self) -> XmlSchemaDerivationMethod: ...
    @property
    def FinalResolved(self) -> XmlSchemaDerivationMethod: ...
    @property
    def IsMixed(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def QualifiedName(self) -> Xml.XmlQualifiedName: ...
    @property
    def TypeCode(self) -> XmlTypeCode: ...
    @overload
    @staticmethod
    def GetBuiltInComplexType(typeCode: XmlTypeCode) -> XmlSchemaComplexType: ...
    @overload
    @staticmethod
    def GetBuiltInComplexType(qualifiedName: Xml.XmlQualifiedName) -> XmlSchemaComplexType: ...
    @overload
    @staticmethod
    def GetBuiltInSimpleType(qualifiedName: Xml.XmlQualifiedName) -> XmlSchemaSimpleType: ...
    @overload
    @staticmethod
    def GetBuiltInSimpleType(typeCode: XmlTypeCode) -> XmlSchemaSimpleType: ...
    @overload
    @staticmethod
    def IsDerivedFrom(derivedType: XmlSchemaType, baseType: XmlSchemaType, except_: XmlSchemaDerivationMethod) -> bool: ...
    @Final.setter
    def Final(self, value: System.Void): ...
    @IsMixed.setter
    def IsMixed(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class XmlSchemaUse(enum.Enum):
    None_ = 0
    Optional = 1
    Prohibited = 2
    Required = 3

class XmlSchemaValidationException(XmlSchemaException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, lineNumber: int, linePosition: int): ...
    @property
    def SourceObject(self) -> object: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class XmlValueGetter(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> object: ...
    @overload
    def Invoke() -> object: ...

class XmlSchemaValidationFlags(enum.Enum):
    None_ = 0
    ProcessInlineSchema = 1
    ProcessSchemaLocation = 2
    ReportValidationWarnings = 4
    ProcessIdentityConstraints = 8
    AllowXmlAttributes = 16

class XmlSchemaValidator(object):
    """    """
    def __init__(self, nameTable: Xml.XmlNameTable, schemas: XmlSchemaSet, namespaceResolver: Xml.IXmlNamespaceResolver, validationFlags: XmlSchemaValidationFlags): ...
    @overload
    def AddSchema(self, schema: XmlSchema) -> None: ...
    @overload
    def EndValidation() -> None: ...
    @property
    def LineInfoProvider(self) -> Xml.IXmlLineInfo: ...
    @property
    def SourceUri(self) -> System.Uri: ...
    @property
    def ValidationEventSender(self) -> object: ...
    @overload
    def GetExpectedAttributes() -> System.Array[XmlSchemaAttribute]: ...
    @overload
    def GetExpectedParticles() -> System.Array[XmlSchemaParticle]: ...
    @overload
    def GetUnspecifiedDefaultAttributes(self, defaultAttributes: Collections.ArrayList) -> None: ...
    @overload
    def Initialize() -> None: ...
    @overload
    def Initialize(self, partialValidationType: XmlSchemaObject) -> None: ...
    @LineInfoProvider.setter
    def LineInfoProvider(self, value: System.Void): ...
    @SourceUri.setter
    def SourceUri(self, value: System.Void): ...
    @ValidationEventSender.setter
    def ValidationEventSender(self, value: System.Void): ...
    @XmlResolver.setter
    def XmlResolver(self, value: System.Void): ...
    @overload
    def SkipToEndElement(self, schemaInfo: XmlSchemaInfo) -> None: ...
    @overload
    def ValidateAttribute(self, localName: str, namespaceUri: str, attributeValue: str, schemaInfo: XmlSchemaInfo) -> object: ...
    @overload
    def ValidateAttribute(self, localName: str, namespaceUri: str, attributeValue: XmlValueGetter, schemaInfo: XmlSchemaInfo) -> object: ...
    @overload
    def ValidateElement(self, localName: str, namespaceUri: str, schemaInfo: XmlSchemaInfo) -> None: ...
    @overload
    def ValidateElement(self, localName: str, namespaceUri: str, schemaInfo: XmlSchemaInfo, xsiType: str, xsiNil: str, xsiSchemaLocation: str, xsiNoNamespaceSchemaLocation: str) -> None: ...
    @overload
    def ValidateEndElement(self, schemaInfo: XmlSchemaInfo) -> object: ...
    @overload
    def ValidateEndElement(self, schemaInfo: XmlSchemaInfo, typedValue: object) -> object: ...
    @overload
    def ValidateEndOfAttributes(self, schemaInfo: XmlSchemaInfo) -> None: ...
    @overload
    def ValidateText(self, elementValue: XmlValueGetter) -> None: ...
    @overload
    def ValidateText(self, elementValue: str) -> None: ...
    @overload
    def ValidateWhitespace(self, elementValue: str) -> None: ...
    @overload
    def ValidateWhitespace(self, elementValue: XmlValueGetter) -> None: ...
    @property
    def ValidationEventHandler(self): ...

class XmlSchemaValidity(enum.Enum):
    NotKnown = 0
    Valid = 1
    Invalid = 2

class XmlSeverityType(enum.Enum):
    Error = 0
    Warning = 1

class XmlTypeCode(enum.Enum):
    None_ = 0
    Item = 1
    Node = 2
    Document = 3
    Element = 4
    Attribute = 5
    Namespace = 6
    ProcessingInstruction = 7
    Comment = 8
    Text = 9
    AnyAtomicType = 10
    UntypedAtomic = 11
    String = 12
    Boolean = 13
    Decimal = 14
    Float = 15
    Double = 16
    Duration = 17
    DateTime = 18
    Time = 19
    Date = 20
    GYearMonth = 21
    GYear = 22
    GMonthDay = 23
    GDay = 24
    GMonth = 25
    HexBinary = 26
    Base64Binary = 27
    AnyUri = 28
    QName = 29
    Notation = 30
    NormalizedString = 31
    Token = 32
    Language = 33
    NmToken = 34
    Name = 35
    NCName = 36
    Id = 37
    Idref = 38
    Entity = 39
    Integer = 40
    NonPositiveInteger = 41
    NegativeInteger = 42
    Long = 43
    Int = 44
    Short = 45
    Byte = 46
    NonNegativeInteger = 47
    UnsignedLong = 48
    UnsignedInt = 49
    UnsignedShort = 50
    UnsignedByte = 51
    PositiveInteger = 52
    YearMonthDuration = 53
    DayTimeDuration = 54

class XmlSchemaInference(object):
    """    """
    def __init__(self): ...
    @property
    def Occurrence(self) -> InferenceOption: ...
    @property
    def TypeInference(self) -> InferenceOption: ...
    @overload
    def InferSchema(self, instanceDocument: Xml.XmlReader) -> XmlSchemaSet: ...
    @overload
    def InferSchema(self, instanceDocument: Xml.XmlReader, schemas: XmlSchemaSet) -> XmlSchemaSet: ...
    @Occurrence.setter
    def Occurrence(self, value: System.Void): ...
    @TypeInference.setter
    def TypeInference(self, value: System.Void): ...

class InferenceOption(enum.Enum):
    Restricted = 0
    Relaxed = 1

class XmlSchemaInferenceException(XmlSchemaException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception, lineNumber: int, linePosition: int): ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

# endregion
