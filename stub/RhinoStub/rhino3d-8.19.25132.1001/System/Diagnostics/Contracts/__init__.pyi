"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ContractException", "ContractFailedEventArgs", "PureAttribute", "ContractClassAttribute", "ContractClassForAttribute", "ContractInvariantMethodAttribute", "ContractReferenceAssemblyAttribute", "ContractRuntimeIgnoredAttribute", "ContractVerificationAttribute", "ContractPublicPropertyNameAttribute", "ContractArgumentValidatorAttribute", "ContractAbbreviatorAttribute", "ContractOptionAttribute", "Contract", "ContractFailureKind"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class ContractException(System.Exception):
    """    """
    def __init__(self, kind: ContractFailureKind, failure: str, userMessage: str, condition: str, innerException: System.Exception): ...
    @property
    def Condition(self) -> str: ...
    @property
    def Failure(self) -> str: ...
    @property
    def Kind(self) -> ContractFailureKind: ...
    @property
    def UserMessage(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class ContractFailedEventArgs(System.EventArgs):
    """    """
    def __init__(self, failureKind: ContractFailureKind, message: str, condition: str, originalException: System.Exception): ...
    @property
    def Condition(self) -> str: ...
    @property
    def FailureKind(self) -> ContractFailureKind: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def OriginalException(self) -> System.Exception: ...
    @property
    def Unwind(self) -> bool: ...
    @overload
    def SetHandled() -> None: ...
    @overload
    def SetUnwind() -> None: ...

class PureAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractClassAttribute(System.Attribute):
    """    """
    def __init__(self, typeContainingContracts: System.Type): ...
    @property
    def TypeContainingContracts(self) -> System.Type: ...

class ContractClassForAttribute(System.Attribute):
    """    """
    def __init__(self, typeContractsAreFor: System.Type): ...
    @property
    def TypeContractsAreFor(self) -> System.Type: ...

class ContractInvariantMethodAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractReferenceAssemblyAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractRuntimeIgnoredAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractVerificationAttribute(System.Attribute):
    """    """
    def __init__(self, value: bool): ...
    @property
    def Value(self) -> bool: ...

class ContractPublicPropertyNameAttribute(System.Attribute):
    """    """
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...

class ContractArgumentValidatorAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractAbbreviatorAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class ContractOptionAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, category: str, setting: str, enabled: bool): ...
    @overload
    def __init__(self, category: str, setting: str, value: str): ...
    @property
    def Category(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Setting(self) -> str: ...
    @property
    def Value(self) -> str: ...

class Contract(object):
    """    """
    @overload
    @staticmethod
    def Assert(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def Assume(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Assume(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def EndContractBlock() -> None: ...
    @overload
    @staticmethod
    def Ensures(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Ensures(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def EnsuresOnThrow(condition: bool) -> None: ...
    @overload
    @staticmethod
    def EnsuresOnThrow(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def Exists(collection: Generic.IEnumerable, predicate: System.Predicate) -> bool: ...
    @overload
    @staticmethod
    def Exists(fromInclusive: int, toExclusive: int, predicate: System.Predicate) -> bool: ...
    @overload
    @staticmethod
    def ForAll(collection: Generic.IEnumerable, predicate: System.Predicate) -> bool: ...
    @overload
    @staticmethod
    def ForAll(fromInclusive: int, toExclusive: int, predicate: System.Predicate) -> bool: ...
    @overload
    @staticmethod
    def Invariant(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Invariant(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def OldValue(value: T) -> T: ...
    @overload
    @staticmethod
    def Requires(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Requires(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Requires(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def Requires(condition: bool, userMessage: str) -> None: ...
    @overload
    @staticmethod
    def Result() -> T: ...
    @overload
    @staticmethod
    def ValueAtReturn() -> (T, T): ...
    @property
    def ContractFailed(self): ...

class ContractFailureKind(enum.Enum):
    Precondition = 0
    Postcondition = 1
    PostconditionOnException = 2
    Invariant = 3
    Assert = 4
    Assume = 5

# endregion
