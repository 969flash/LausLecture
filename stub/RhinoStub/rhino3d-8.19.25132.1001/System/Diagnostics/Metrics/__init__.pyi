"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Counter", "Histogram", "Instrument", "Measurement", "Meter", "MeasurementCallback", "MeterListener", "ObservableCounter", "ObservableGauge", "ObservableInstrument", "ObservableUpDownCounter", "UpDownCounter"]
# endregion

# region: Imports
from System import Diagnostics
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Diagnostics.DiagnosticSource, Version=7.0.0.0

class Counter(Instrument):
    """    Counter[T]
    """
    @overload
    def Add(self, delta: T) -> None: ...
    @overload
    def Add(self, delta: T, tag: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, delta: T, tags: System.ReadOnlySpan) -> None: ...
    @overload
    def Add(self, delta: T, tags: Generic.System.Array[Generic.KeyValuePair]) -> None: ...
    @overload
    def Add(self, delta: T) -> (Diagnostics.TagList): ...
    @overload
    def Add(self, delta: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, delta: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair, tag3: Generic.KeyValuePair) -> None: ...

class Histogram(Instrument):
    """    Histogram[T]
    """
    @overload
    def Record(self, value: T) -> None: ...
    @overload
    def Record(self, value: T, tags: Generic.System.Array[Generic.KeyValuePair]) -> None: ...
    @overload
    def Record(self, value: T, tags: System.ReadOnlySpan) -> None: ...
    @overload
    def Record(self, value: T, tag: Generic.KeyValuePair) -> None: ...
    @overload
    def Record(self, value: T) -> (Diagnostics.TagList): ...
    @overload
    def Record(self, value: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair) -> None: ...
    @overload
    def Record(self, value: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair, tag3: Generic.KeyValuePair) -> None: ...

class Instrument(object):
    """    """
    @property
    def Description(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsObservable(self) -> bool: ...
    @property
    def Meter(self) -> Meter: ...
    @property
    def Name(self) -> str: ...
    @property
    def Unit(self) -> str: ...

class Instrument(Instrument):
    """    Instrument[T]
    """

class Measurement(System.ValueType):
    """    Measurement[T]
    """
    @overload
    def __init__(self, value: T): ...
    @overload
    def __init__(self, value: T, tags: Generic.IEnumerable): ...
    @overload
    def __init__(self, value: T, tags: Generic.System.Array[Generic.KeyValuePair]): ...
    @overload
    def __init__(self, value: T, tags: System.ReadOnlySpan): ...
    @property
    def Tags(self) -> System.ReadOnlySpan: ...
    @property
    def Value(self) -> T: ...

class Meter(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, version: str): ...
    @overload
    def CreateCounter(self, name: str, unit: str, description: str) -> Counter: ...
    @overload
    def CreateHistogram(self, name: str, unit: str, description: str) -> Histogram: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValues: System.Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableGauge: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableGauge: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValues: System.Func, unit: str, description: str) -> ObservableGauge: ...
    @overload
    def CreateObservableUpDownCounter(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableUpDownCounter: ...
    @overload
    def CreateObservableUpDownCounter(self, name: str, observeValue: System.Func, unit: str, description: str) -> ObservableUpDownCounter: ...
    @overload
    def CreateObservableUpDownCounter(self, name: str, observeValues: System.Func, unit: str, description: str) -> ObservableUpDownCounter: ...
    @overload
    def CreateUpDownCounter(self, name: str, unit: str, description: str) -> UpDownCounter: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...

class MeasurementCallback(System.MulticastDelegate):
    """    MeasurementCallback[T]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, instrument: Instrument, measurement: T, tags: System.ReadOnlySpan, state: object, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, instrument: Instrument, measurement: T, tags: System.ReadOnlySpan, state: object) -> None: ...

class MeterListener(object):
    """    """
    def __init__(self): ...
    @overload
    def DisableMeasurementEvents(self, instrument: Instrument) -> object: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnableMeasurementEvents(self, instrument: Instrument, state: object) -> None: ...
    @property
    def InstrumentPublished(self) -> System.Action: ...
    @property
    def MeasurementsCompleted(self) -> System.Action: ...
    @overload
    def RecordObservableInstruments() -> None: ...
    @InstrumentPublished.setter
    def InstrumentPublished(self, value: System.Void): ...
    @MeasurementsCompleted.setter
    def MeasurementsCompleted(self, value: System.Void): ...
    @overload
    def SetMeasurementEventCallback(self, measurementCallback: MeasurementCallback) -> None: ...
    @overload
    def Start() -> None: ...

class ObservableCounter(ObservableInstrument):
    """    ObservableCounter[T]
    """

class ObservableGauge(ObservableInstrument):
    """    ObservableGauge[T]
    """

class ObservableInstrument(Instrument):
    """    ObservableInstrument[T]
    """
    @property
    def IsObservable(self) -> bool: ...

class ObservableUpDownCounter(ObservableInstrument):
    """    ObservableUpDownCounter[T]
    """

class UpDownCounter(Instrument):
    """    UpDownCounter[T]
    """
    @overload
    def Add(self, delta: T) -> None: ...
    @overload
    def Add(self, delta: T, tag: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, delta: T, tags: System.ReadOnlySpan) -> None: ...
    @overload
    def Add(self, delta: T, tags: Generic.System.Array[Generic.KeyValuePair]) -> None: ...
    @overload
    def Add(self, delta: T) -> (Diagnostics.TagList): ...
    @overload
    def Add(self, delta: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, delta: T, tag1: Generic.KeyValuePair, tag2: Generic.KeyValuePair, tag3: Generic.KeyValuePair) -> None: ...

# endregion
