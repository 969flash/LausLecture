"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ISymbolBinder", "ISymbolBinder1", "ISymbolDocument", "ISymbolMethod", "ISymbolNamespace", "ISymbolReader", "ISymbolScope", "ISymbolVariable", "ISymbolWriter", "SymbolToken", "SymAddressKind", "SymDocumentType", "SymLanguageType", "SymLanguageVendor"]
# endregion

# region: Imports
from System import Reflection
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ISymbolDocumentWriter"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class ISymbolDocumentWriter:
    """    """
    @overload
    def SetCheckSum(self, algorithmId: System.Guid, checkSum: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetSource(self, source: System.System.Array[System.Byte]) -> None: ...

# endregion

# region: System.Diagnostics.StackTrace, Version=7.0.0.0

class ISymbolBinder:
    """    """

class ISymbolBinder1:
    """    """
    @overload
    def GetReader(self, importer: System.IntPtr, filename: str, searchPath: str) -> ISymbolReader: ...

class ISymbolDocument:
    """    """
    @overload
    def FindClosestLine(self, line: int) -> int: ...
    @property
    def CheckSumAlgorithmId(self) -> System.Guid: ...
    @property
    def DocumentType(self) -> System.Guid: ...
    @property
    def HasEmbeddedSource(self) -> bool: ...
    @property
    def Language(self) -> System.Guid: ...
    @property
    def LanguageVendor(self) -> System.Guid: ...
    @property
    def SourceLength(self) -> int: ...
    @property
    def URL(self) -> str: ...
    @overload
    def GetCheckSum() -> System.System.Array[System.Byte]: ...
    @overload
    def GetSourceRange(self, startLine: int, startColumn: int, endLine: int, endColumn: int) -> System.System.Array[System.Byte]: ...

class ISymbolMethod:
    """    """
    @property
    def RootScope(self) -> ISymbolScope: ...
    @property
    def SequencePointCount(self) -> int: ...
    @property
    def Token(self) -> SymbolToken: ...
    @overload
    def GetNamespace() -> ISymbolNamespace: ...
    @overload
    def GetOffset(self, document: ISymbolDocument, line: int, column: int) -> int: ...
    @overload
    def GetParameters() -> System.Array[ISymbolVariable]: ...
    @overload
    def GetRanges(self, document: ISymbolDocument, line: int, column: int) -> System.System.Array[int]: ...
    @overload
    def GetScope(self, offset: int) -> ISymbolScope: ...
    @overload
    def GetSequencePoints(self, offsets: System.System.Array[int], documents: System.Array[ISymbolDocument], lines: System.System.Array[int], columns: System.System.Array[int], endLines: System.System.Array[int], endColumns: System.System.Array[int]) -> None: ...
    @overload
    def GetSourceStartEnd(self, docs: System.Array[ISymbolDocument], lines: System.System.Array[int], columns: System.System.Array[int]) -> bool: ...

class ISymbolNamespace:
    """    """
    @property
    def Name(self) -> str: ...
    @overload
    def GetNamespaces() -> System.Array[ISymbolNamespace]: ...
    @overload
    def GetVariables() -> System.Array[ISymbolVariable]: ...

class ISymbolReader:
    """    """
    @property
    def UserEntryPoint(self) -> SymbolToken: ...
    @overload
    def GetDocument(self, url: str, language: System.Guid, languageVendor: System.Guid, documentType: System.Guid) -> ISymbolDocument: ...
    @overload
    def GetDocuments() -> System.Array[ISymbolDocument]: ...
    @overload
    def GetGlobalVariables() -> System.Array[ISymbolVariable]: ...
    @overload
    def GetMethod(self, method: SymbolToken) -> ISymbolMethod: ...
    @overload
    def GetMethod(self, method: SymbolToken, version: int) -> ISymbolMethod: ...
    @overload
    def GetMethodFromDocumentPosition(self, document: ISymbolDocument, line: int, column: int) -> ISymbolMethod: ...
    @overload
    def GetNamespaces() -> System.Array[ISymbolNamespace]: ...
    @overload
    def GetSymAttribute(self, parent: SymbolToken, name: str) -> System.System.Array[System.Byte]: ...
    @overload
    def GetVariables(self, parent: SymbolToken) -> System.Array[ISymbolVariable]: ...

class ISymbolScope:
    """    """
    @property
    def EndOffset(self) -> int: ...
    @property
    def Method(self) -> ISymbolMethod: ...
    @property
    def Parent(self) -> ISymbolScope: ...
    @property
    def StartOffset(self) -> int: ...
    @overload
    def GetChildren() -> System.Array[ISymbolScope]: ...
    @overload
    def GetLocals() -> System.Array[ISymbolVariable]: ...
    @overload
    def GetNamespaces() -> System.Array[ISymbolNamespace]: ...

class ISymbolVariable:
    """    """
    @property
    def AddressField1(self) -> int: ...
    @property
    def AddressField2(self) -> int: ...
    @property
    def AddressField3(self) -> int: ...
    @property
    def AddressKind(self) -> SymAddressKind: ...
    @property
    def Attributes(self) -> object: ...
    @property
    def EndOffset(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def StartOffset(self) -> int: ...
    @overload
    def GetSignature() -> System.System.Array[System.Byte]: ...

class ISymbolWriter:
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def CloseMethod() -> None: ...
    @overload
    def CloseNamespace() -> None: ...
    @overload
    def CloseScope(self, endOffset: int) -> None: ...
    @overload
    def DefineDocument(self, url: str, language: System.Guid, languageVendor: System.Guid, documentType: System.Guid) -> ISymbolDocumentWriter: ...
    @overload
    def DefineField(self, parent: SymbolToken, name: str, attributes: Reflection.FieldAttributes, signature: System.System.Array[System.Byte], addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    @overload
    def DefineGlobalVariable(self, name: str, attributes: Reflection.FieldAttributes, signature: System.System.Array[System.Byte], addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    @overload
    def DefineLocalVariable(self, name: str, attributes: Reflection.FieldAttributes, signature: System.System.Array[System.Byte], addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int, startOffset: int, endOffset: int) -> None: ...
    @overload
    def DefineParameter(self, name: str, attributes: Reflection.ParameterAttributes, sequence: int, addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    @overload
    def DefineSequencePoints(self, document: ISymbolDocumentWriter, offsets: System.System.Array[int], lines: System.System.Array[int], columns: System.System.Array[int], endLines: System.System.Array[int], endColumns: System.System.Array[int]) -> None: ...
    @overload
    def Initialize(self, emitter: System.IntPtr, filename: str, fFullBuild: bool) -> None: ...
    @overload
    def OpenMethod(self, method: SymbolToken) -> None: ...
    @overload
    def OpenNamespace(self, name: str) -> None: ...
    @overload
    def OpenScope(self, startOffset: int) -> int: ...
    @overload
    def SetMethodSourceRange(self, startDoc: ISymbolDocumentWriter, startLine: int, startColumn: int, endDoc: ISymbolDocumentWriter, endLine: int, endColumn: int) -> None: ...
    @overload
    def SetScopeRange(self, scopeID: int, startOffset: int, endOffset: int) -> None: ...
    @overload
    def SetSymAttribute(self, parent: SymbolToken, name: str, data: System.System.Array[System.Byte]) -> None: ...
    @overload
    def SetUnderlyingWriter(self, underlyingWriter: System.IntPtr) -> None: ...
    @overload
    def SetUserEntryPoint(self, entryMethod: SymbolToken) -> None: ...
    @overload
    def UsingNamespace(self, fullName: str) -> None: ...

class SymbolToken(System.ValueType):
    """    """
    def __init__(self, val: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, obj: SymbolToken) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def GetToken() -> int: ...

class SymAddressKind(enum.Enum):
    ILOffset = 1
    NativeRVA = 2
    NativeRegister = 3
    NativeRegisterRelative = 4
    NativeOffset = 5
    NativeRegisterRegister = 6
    NativeRegisterStack = 7
    NativeStackRegister = 8
    BitField = 9
    NativeSectionOffset = 10

class SymDocumentType(object):
    """    """
    def __init__(self): ...
    @property
    def Text(self) -> System.Guid: ...

class SymLanguageType(object):
    """    """
    def __init__(self): ...
    @property
    def C(self) -> System.Guid: ...
    @property
    def CPlusPlus(self) -> System.Guid: ...
    @property
    def CSharp(self) -> System.Guid: ...
    @property
    def Basic(self) -> System.Guid: ...
    @property
    def Java(self) -> System.Guid: ...
    @property
    def Cobol(self) -> System.Guid: ...
    @property
    def Pascal(self) -> System.Guid: ...
    @property
    def ILAssembly(self) -> System.Guid: ...
    @property
    def JScript(self) -> System.Guid: ...
    @property
    def SMC(self) -> System.Guid: ...
    @property
    def MCPlusPlus(self) -> System.Guid: ...

class SymLanguageVendor(object):
    """    """
    def __init__(self): ...
    @property
    def Microsoft(self) -> System.Guid: ...

# endregion
