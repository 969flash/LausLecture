"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["ConstantExpectedAttribute", "DynamicallyAccessedMemberTypes", "DynamicallyAccessedMembersAttribute", "DynamicDependencyAttribute", "ExcludeFromCodeCoverageAttribute", "AllowNullAttribute", "DisallowNullAttribute", "MaybeNullAttribute", "NotNullAttribute", "MaybeNullWhenAttribute", "NotNullWhenAttribute", "NotNullIfNotNullAttribute", "DoesNotReturnAttribute", "DoesNotReturnIfAttribute", "MemberNotNullAttribute", "MemberNotNullWhenAttribute", "UnscopedRefAttribute", "RequiresAssemblyFilesAttribute", "RequiresDynamicCodeAttribute", "RequiresUnreferencedCodeAttribute", "SetsRequiredMembersAttribute", "StringSyntaxAttribute", "SuppressMessageAttribute", "UnconditionalSuppressMessageAttribute"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class ConstantExpectedAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Max(self) -> object: ...
    @property
    def Min(self) -> object: ...
    @Max.setter
    def Max(self, value: System.Void): ...
    @Min.setter
    def Min(self, value: System.Void): ...

class DynamicallyAccessedMemberTypes(enum.Enum):
    None_ = 0
    PublicParameterlessConstructor = 1
    PublicConstructors = 3
    NonPublicConstructors = 4
    PublicMethods = 8
    NonPublicMethods = 16
    PublicFields = 32
    NonPublicFields = 64
    PublicNestedTypes = 128
    NonPublicNestedTypes = 256
    PublicProperties = 512
    NonPublicProperties = 1024
    PublicEvents = 2048
    NonPublicEvents = 4096
    Interfaces = 8192
    All = -1

class DynamicallyAccessedMembersAttribute(System.Attribute):
    """    """
    def __init__(self, memberTypes: DynamicallyAccessedMemberTypes): ...
    @property
    def MemberTypes(self) -> DynamicallyAccessedMemberTypes: ...

class DynamicDependencyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, memberSignature: str): ...
    @overload
    def __init__(self, memberSignature: str, type_: System.Type): ...
    @overload
    def __init__(self, memberTypes: DynamicallyAccessedMemberTypes, type_: System.Type): ...
    @overload
    def __init__(self, memberSignature: str, typeName: str, assemblyName: str): ...
    @overload
    def __init__(self, memberTypes: DynamicallyAccessedMemberTypes, typeName: str, assemblyName: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Condition(self) -> str: ...
    @property
    def MemberSignature(self) -> str: ...
    @property
    def MemberTypes(self) -> DynamicallyAccessedMemberTypes: ...
    @property
    def Type(self) -> System.Type: ...
    @property
    def TypeName(self) -> str: ...
    @Condition.setter
    def Condition(self, value: System.Void): ...

class ExcludeFromCodeCoverageAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Justification(self) -> str: ...
    @Justification.setter
    def Justification(self, value: System.Void): ...

class AllowNullAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DisallowNullAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class MaybeNullAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class NotNullAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class MaybeNullWhenAttribute(System.Attribute):
    """    """
    def __init__(self, returnValue: bool): ...
    @property
    def ReturnValue(self) -> bool: ...

class NotNullWhenAttribute(System.Attribute):
    """    """
    def __init__(self, returnValue: bool): ...
    @property
    def ReturnValue(self) -> bool: ...

class NotNullIfNotNullAttribute(System.Attribute):
    """    """
    def __init__(self, parameterName: str): ...
    @property
    def ParameterName(self) -> str: ...

class DoesNotReturnAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DoesNotReturnIfAttribute(System.Attribute):
    """    """
    def __init__(self, parameterValue: bool): ...
    @property
    def ParameterValue(self) -> bool: ...

class MemberNotNullAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, member: str): ...
    @overload
    def __init__(self, members: System.System.Array[str]): ...
    @property
    def Members(self) -> System.System.Array[str]: ...

class MemberNotNullWhenAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, returnValue: bool, member: str): ...
    @overload
    def __init__(self, returnValue: bool, members: System.System.Array[str]): ...
    @property
    def Members(self) -> System.System.Array[str]: ...
    @property
    def ReturnValue(self) -> bool: ...

class UnscopedRefAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class RequiresAssemblyFilesAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @property
    def Message(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @Url.setter
    def Url(self, value: System.Void): ...

class RequiresDynamicCodeAttribute(System.Attribute):
    """    """
    def __init__(self, message: str): ...
    @property
    def Message(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @Url.setter
    def Url(self, value: System.Void): ...

class RequiresUnreferencedCodeAttribute(System.Attribute):
    """    """
    def __init__(self, message: str): ...
    @property
    def Message(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @Url.setter
    def Url(self, value: System.Void): ...

class SetsRequiredMembersAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class StringSyntaxAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, syntax: str): ...
    @overload
    def __init__(self, syntax: str, arguments: System.System.Array[object]): ...
    @property
    def CompositeFormat(self) -> str: ...
    @property
    def DateOnlyFormat(self) -> str: ...
    @property
    def DateTimeFormat(self) -> str: ...
    @property
    def EnumFormat(self) -> str: ...
    @property
    def GuidFormat(self) -> str: ...
    @property
    def Json(self) -> str: ...
    @property
    def NumericFormat(self) -> str: ...
    @property
    def Regex(self) -> str: ...
    @property
    def TimeOnlyFormat(self) -> str: ...
    @property
    def TimeSpanFormat(self) -> str: ...
    @property
    def Uri(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @property
    def Arguments(self) -> System.System.Array[object]: ...
    @property
    def Syntax(self) -> str: ...

class SuppressMessageAttribute(System.Attribute):
    """    """
    def __init__(self, category: str, checkId: str): ...
    @property
    def Category(self) -> str: ...
    @property
    def CheckId(self) -> str: ...
    @property
    def Justification(self) -> str: ...
    @property
    def MessageId(self) -> str: ...
    @property
    def Scope(self) -> str: ...
    @property
    def Target(self) -> str: ...
    @Justification.setter
    def Justification(self, value: System.Void): ...
    @MessageId.setter
    def MessageId(self, value: System.Void): ...
    @Scope.setter
    def Scope(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...

class UnconditionalSuppressMessageAttribute(System.Attribute):
    """    """
    def __init__(self, category: str, checkId: str): ...
    @property
    def Category(self) -> str: ...
    @property
    def CheckId(self) -> str: ...
    @property
    def Justification(self) -> str: ...
    @property
    def MessageId(self) -> str: ...
    @property
    def Scope(self) -> str: ...
    @property
    def Target(self) -> str: ...
    @Justification.setter
    def Justification(self, value: System.Void): ...
    @MessageId.setter
    def MessageId(self, value: System.Void): ...
    @Scope.setter
    def Scope(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...

# endregion
