"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["DiagnosticCounter", "EventActivityOptions", "EventCounter", "EventSource", "EventSourceSettings", "EventListener", "EventCommandEventArgs", "EventSourceCreatedEventArgs", "EventWrittenEventArgs", "EventSourceAttribute", "EventAttribute", "NonEventAttribute", "EventCommand", "EventManifestOptions", "EventSourceException", "IncrementingEventCounter", "IncrementingPollingCounter", "PollingCounter", "EventLevel", "EventTask", "EventOpcode", "EventChannel", "EventKeywords", "EventDataAttribute", "EventFieldTags", "EventFieldAttribute", "EventFieldFormat", "EventIgnoreAttribute", "EventSourceOptions", "EventTags", "TraceLoggingEventTypes"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class DiagnosticCounter(object):
    """    """
    @overload
    def AddMetadata(self, key: str, value: str) -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def DisplayUnits(self) -> str: ...
    @property
    def EventSource(self) -> EventSource: ...
    @property
    def Name(self) -> str: ...
    @DisplayName.setter
    def DisplayName(self, value: System.Void): ...
    @DisplayUnits.setter
    def DisplayUnits(self, value: System.Void): ...

class EventActivityOptions(enum.Enum):
    None_ = 0
    Disable = 2
    Recursive = 4
    Detachable = 8

class EventCounter(DiagnosticCounter):
    """    """
    def __init__(self, name: str, eventSource: EventSource): ...
    @overload
    def ToString() -> str: ...
    @overload
    def WriteMetric(self, value: System.Single) -> None: ...
    @overload
    def WriteMetric(self, value: float) -> None: ...

class EventSource(object):
    """    """
    @overload
    def __init__(self, eventSourceName: str): ...
    @overload
    def __init__(self, eventSourceName: str, config: EventSourceSettings): ...
    @overload
    def __init__(self, eventSourceName: str, config: EventSourceSettings, traits: System.System.Array[str]): ...
    @overload
    def Dispose() -> None: ...
    @overload
    @staticmethod
    def GenerateManifest(eventSourceType: System.Type, assemblyPathToIncludeInManifest: str) -> str: ...
    @overload
    @staticmethod
    def GenerateManifest(eventSourceType: System.Type, assemblyPathToIncludeInManifest: str, flags: EventManifestOptions) -> str: ...
    @property
    def ConstructionException(self) -> System.Exception: ...
    @property
    def CurrentThreadActivityId(self) -> System.Guid: ...
    @property
    def Guid(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> EventSourceSettings: ...
    @overload
    @staticmethod
    def GetGuid(eventSourceType: System.Type) -> System.Guid: ...
    @overload
    @staticmethod
    def GetName(eventSourceType: System.Type) -> str: ...
    @overload
    @staticmethod
    def GetSources() -> Generic.IEnumerable: ...
    @overload
    def GetTrait(self, key: str) -> str: ...
    @overload
    def IsEnabled() -> bool: ...
    @overload
    def IsEnabled(self, level: EventLevel, keywords: EventKeywords) -> bool: ...
    @overload
    def IsEnabled(self, level: EventLevel, keywords: EventKeywords, channel: EventChannel) -> bool: ...
    @overload
    @staticmethod
    def SendCommand(eventSource: EventSource, command: EventCommand, commandArguments: Generic.IDictionary) -> None: ...
    @overload
    @staticmethod
    def SetCurrentThreadActivityId(activityId: System.Guid) -> None: ...
    @overload
    @staticmethod
    def SetCurrentThreadActivityId(activityId: System.Guid) -> (System.Guid): ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, eventName: str) -> None: ...
    @overload
    def Write(self, eventName: str, options: EventSourceOptions) -> None: ...
    @overload
    def Write(self, eventName: str, data: T) -> None: ...
    @overload
    def Write(self, eventName: str, options: EventSourceOptions, data: T) -> None: ...
    @overload
    def Write(self, eventName: str) -> (EventSourceOptions, T): ...
    @overload
    def Write(self, eventName: str) -> (EventSourceOptions, System.Guid, System.Guid, T): ...
    @property
    def EventCommandExecuted(self): ...

class EventSourceSettings(enum.Enum):
    Default = 0
    ThrowOnEventWriteErrors = 1
    EtwManifestEventFormat = 4
    EtwSelfDescribingEventFormat = 8

class EventListener(object):
    """    """
    def __init__(self): ...
    @overload
    def DisableEvents(self, eventSource: EventSource) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnableEvents(self, eventSource: EventSource, level: EventLevel) -> None: ...
    @overload
    def EnableEvents(self, eventSource: EventSource, level: EventLevel, matchAnyKeyword: EventKeywords) -> None: ...
    @overload
    def EnableEvents(self, eventSource: EventSource, level: EventLevel, matchAnyKeyword: EventKeywords, arguments: Generic.IDictionary) -> None: ...
    @overload
    @staticmethod
    def EventSourceIndex(eventSource: EventSource) -> int: ...
    @property
    def EventSourceCreated(self): ...
    @property
    def EventWritten(self): ...

class EventCommandEventArgs(System.EventArgs):
    """    """
    @overload
    def DisableEvent(self, eventId: int) -> bool: ...
    @overload
    def EnableEvent(self, eventId: int) -> bool: ...
    @property
    def Arguments(self) -> Generic.IDictionary: ...
    @property
    def Command(self) -> EventCommand: ...

class EventSourceCreatedEventArgs(System.EventArgs):
    """    """
    def __init__(self): ...
    @property
    def EventSource(self) -> EventSource: ...

class EventWrittenEventArgs(System.EventArgs):
    """    """
    @property
    def ActivityId(self) -> System.Guid: ...
    @property
    def Channel(self) -> EventChannel: ...
    @property
    def EventId(self) -> int: ...
    @property
    def EventName(self) -> str: ...
    @property
    def EventSource(self) -> EventSource: ...
    @property
    def Keywords(self) -> EventKeywords: ...
    @property
    def Level(self) -> EventLevel: ...
    @property
    def Message(self) -> str: ...
    @property
    def Opcode(self) -> EventOpcode: ...
    @property
    def OSThreadId(self) -> System.Int64: ...
    @property
    def Payload(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def PayloadNames(self) -> ObjectModel.ReadOnlyCollection: ...
    @property
    def RelatedActivityId(self) -> System.Guid: ...
    @property
    def Tags(self) -> EventTags: ...
    @property
    def Task(self) -> EventTask: ...
    @property
    def TimeStamp(self) -> System.DateTime: ...
    @property
    def Version(self) -> System.Byte: ...

class EventSourceAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Guid(self) -> str: ...
    @property
    def LocalizationResources(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Guid.setter
    def Guid(self, value: System.Void): ...
    @LocalizationResources.setter
    def LocalizationResources(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...

class EventAttribute(System.Attribute):
    """    """
    def __init__(self, eventId: int): ...
    @property
    def ActivityOptions(self) -> EventActivityOptions: ...
    @property
    def Channel(self) -> EventChannel: ...
    @property
    def EventId(self) -> int: ...
    @property
    def Keywords(self) -> EventKeywords: ...
    @property
    def Level(self) -> EventLevel: ...
    @property
    def Message(self) -> str: ...
    @property
    def Opcode(self) -> EventOpcode: ...
    @property
    def Tags(self) -> EventTags: ...
    @property
    def Task(self) -> EventTask: ...
    @property
    def Version(self) -> System.Byte: ...
    @ActivityOptions.setter
    def ActivityOptions(self, value: System.Void): ...
    @Channel.setter
    def Channel(self, value: System.Void): ...
    @Keywords.setter
    def Keywords(self, value: System.Void): ...
    @Level.setter
    def Level(self, value: System.Void): ...
    @Message.setter
    def Message(self, value: System.Void): ...
    @Opcode.setter
    def Opcode(self, value: System.Void): ...
    @Tags.setter
    def Tags(self, value: System.Void): ...
    @Task.setter
    def Task(self, value: System.Void): ...
    @Version.setter
    def Version(self, value: System.Void): ...

class NonEventAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class EventCommand(enum.Enum):
    Update = 0
    Disable = -3
    Enable = -2
    SendManifest = -1

class EventManifestOptions(enum.Enum):
    None_ = 0
    Strict = 1
    AllCultures = 2
    OnlyIfNeededForRegistration = 4
    AllowEventSourceOverride = 8

class EventSourceException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class IncrementingEventCounter(DiagnosticCounter):
    """    """
    def __init__(self, name: str, eventSource: EventSource): ...
    @property
    def DisplayRateTimeScale(self) -> System.TimeSpan: ...
    @overload
    def Increment(self, increment: float) -> None: ...
    @DisplayRateTimeScale.setter
    def DisplayRateTimeScale(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class IncrementingPollingCounter(DiagnosticCounter):
    """    """
    def __init__(self, name: str, eventSource: EventSource, totalValueProvider: System.Func): ...
    @property
    def DisplayRateTimeScale(self) -> System.TimeSpan: ...
    @DisplayRateTimeScale.setter
    def DisplayRateTimeScale(self, value: System.Void): ...
    @overload
    def ToString() -> str: ...

class PollingCounter(DiagnosticCounter):
    """    """
    def __init__(self, name: str, eventSource: EventSource, metricProvider: System.Func): ...
    @overload
    def ToString() -> str: ...

class EventLevel(enum.Enum):
    LogAlways = 0
    Critical = 1
    Error = 2
    Warning = 3
    Informational = 4
    Verbose = 5

class EventTask(enum.Enum):
    None_ = 0

class EventOpcode(enum.Enum):
    Info = 0
    Start = 1
    Stop = 2
    DataCollectionStart = 3
    DataCollectionStop = 4
    Extension = 5
    Reply = 6
    Resume = 7
    Suspend = 8
    Send = 9
    Receive = 240

class EventChannel(enum.Enum):
    None_ = 0
    Admin = 16
    Operational = 17
    Analytic = 18
    Debug = 19

class EventKeywords(enum.Enum):
    None_ = 0
    MicrosoftTelemetry = 562949953421312
    WdiContext = 562949953421312
    WdiDiagnostic = 1125899906842624
    Sqm = 2251799813685248
    AuditFailure = 4503599627370496
    CorrelationHint = 4503599627370496
    AuditSuccess = 9007199254740992
    EventLogClassic = 36028797018963968
    All = -1

class EventDataAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...

class EventFieldTags(enum.Enum):
    None_ = 0

class EventFieldAttribute(System.Attribute):
    """    """
    def __init__(self): ...
    @property
    def Format(self) -> EventFieldFormat: ...
    @property
    def Tags(self) -> EventFieldTags: ...
    @Format.setter
    def Format(self, value: System.Void): ...
    @Tags.setter
    def Tags(self, value: System.Void): ...

class EventFieldFormat(enum.Enum):
    Default = 0
    String = 2
    Boolean = 3
    Hexadecimal = 4
    Xml = 11
    Json = 12
    HResult = 15

class EventIgnoreAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class EventSourceOptions(System.ValueType):
    """    """
    @property
    def ActivityOptions(self) -> EventActivityOptions: ...
    @property
    def Keywords(self) -> EventKeywords: ...
    @property
    def Level(self) -> EventLevel: ...
    @property
    def Opcode(self) -> EventOpcode: ...
    @property
    def Tags(self) -> EventTags: ...
    @ActivityOptions.setter
    def ActivityOptions(self, value: System.Void): ...
    @Keywords.setter
    def Keywords(self, value: System.Void): ...
    @Level.setter
    def Level(self, value: System.Void): ...
    @Opcode.setter
    def Opcode(self, value: System.Void): ...
    @Tags.setter
    def Tags(self, value: System.Void): ...

class EventTags(enum.Enum):
    None_ = 0

class TraceLoggingEventTypes(object):
    """    """

# endregion
