"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["EventBookmark", "EventKeyword", "EventLevel", "EventLogType", "EventLogIsolation", "EventLogMode", "EventLogConfiguration", "EventLogException", "EventLogNotFoundException", "EventLogReadingException", "EventLogProviderDisabledException", "EventLogInvalidDataException", "EventLogInformation", "EventLogLink", "EventLogPropertySelector", "EventLogQuery", "EventLogReader", "EventLogRecord", "SessionAuthentication", "PathType", "EventLogSession", "EventLogStatus", "EventLogWatcher", "EventMetadata", "EventOpcode", "EventProperty", "EventRecord", "EventRecordWrittenEventArgs", "EventTask", "ProviderMetadata", "StandardEventLevel", "StandardEventTask", "StandardEventOpcode", "StandardEventKeywords"]
# endregion

# region: Imports
from System import Globalization
from System import IO
from System import Security
from System.Collections import Generic
from System.Runtime import CompilerServices
from System.Runtime import Serialization
from System.Security import Principal
from typing import overload
import enum
import System
# endregion

# region: System.Diagnostics.EventLog, Version=7.0.0.0

class EventBookmark(object):
    """    """
    def __init__(self, bookmarkXml: str): ...
    @property
    def BookmarkXml(self) -> str: ...

class EventKeyword(object):
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> System.Int64: ...

class EventLevel(object):
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...

class EventLogType(enum.Enum):
    Administrative = 0
    Operational = 1
    Analytical = 2
    Debug = 3

class EventLogIsolation(enum.Enum):
    Application = 0
    System = 1
    Custom = 2

class EventLogMode(enum.Enum):
    Circular = 0
    AutoBackup = 1
    Retain = 2

class EventLogConfiguration(object):
    """    """
    @overload
    def __init__(self, logName: str): ...
    @overload
    def __init__(self, logName: str, session: EventLogSession): ...
    @overload
    def Dispose() -> None: ...
    @property
    def IsClassicLog(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def LogFilePath(self) -> str: ...
    @property
    def LogIsolation(self) -> EventLogIsolation: ...
    @property
    def LogMode(self) -> EventLogMode: ...
    @property
    def LogName(self) -> str: ...
    @property
    def LogType(self) -> EventLogType: ...
    @property
    def MaximumSizeInBytes(self) -> System.Int64: ...
    @property
    def OwningProviderName(self) -> str: ...
    @property
    def ProviderBufferSize(self) -> System.Nullable: ...
    @property
    def ProviderControlGuid(self) -> System.Nullable: ...
    @property
    def ProviderKeywords(self) -> System.Nullable: ...
    @property
    def ProviderLatency(self) -> System.Nullable: ...
    @property
    def ProviderLevel(self) -> System.Nullable: ...
    @property
    def ProviderMaximumNumberOfBuffers(self) -> System.Nullable: ...
    @property
    def ProviderMinimumNumberOfBuffers(self) -> System.Nullable: ...
    @property
    def ProviderNames(self) -> Generic.IEnumerable: ...
    @property
    def SecurityDescriptor(self) -> str: ...
    @overload
    def SaveChanges() -> None: ...
    @IsEnabled.setter
    def IsEnabled(self, value: System.Void): ...
    @LogFilePath.setter
    def LogFilePath(self, value: System.Void): ...
    @LogMode.setter
    def LogMode(self, value: System.Void): ...
    @MaximumSizeInBytes.setter
    def MaximumSizeInBytes(self, value: System.Void): ...
    @ProviderKeywords.setter
    def ProviderKeywords(self, value: System.Void): ...
    @ProviderLevel.setter
    def ProviderLevel(self, value: System.Void): ...
    @SecurityDescriptor.setter
    def SecurityDescriptor(self, value: System.Void): ...

class EventLogException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetObjectData(self, info: Serialization.SerializationInfo, context: Serialization.StreamingContext) -> None: ...

class EventLogNotFoundException(EventLogException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EventLogReadingException(EventLogException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EventLogProviderDisabledException(EventLogException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EventLogInvalidDataException(EventLogException):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

class EventLogInformation(object):
    """    """
    @property
    def Attributes(self) -> System.Nullable: ...
    @property
    def CreationTime(self) -> System.Nullable: ...
    @property
    def FileSize(self) -> System.Nullable: ...
    @property
    def IsLogFull(self) -> System.Nullable: ...
    @property
    def LastAccessTime(self) -> System.Nullable: ...
    @property
    def LastWriteTime(self) -> System.Nullable: ...
    @property
    def OldestRecordNumber(self) -> System.Nullable: ...
    @property
    def RecordCount(self) -> System.Nullable: ...

class EventLogLink(object):
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsImported(self) -> bool: ...
    @property
    def LogName(self) -> str: ...

class EventLogPropertySelector(object):
    """    """
    def __init__(self, propertyQueries: Generic.IEnumerable): ...
    @overload
    def Dispose() -> None: ...

class EventLogQuery(object):
    """    """
    @overload
    def __init__(self, path: str, pathType: PathType): ...
    @overload
    def __init__(self, path: str, pathType: PathType, query: str): ...
    @property
    def ReverseDirection(self) -> bool: ...
    @property
    def Session(self) -> EventLogSession: ...
    @property
    def TolerateQueryErrors(self) -> bool: ...
    @ReverseDirection.setter
    def ReverseDirection(self, value: System.Void): ...
    @Session.setter
    def Session(self, value: System.Void): ...
    @TolerateQueryErrors.setter
    def TolerateQueryErrors(self, value: System.Void): ...

class EventLogReader(object):
    """    """
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery): ...
    @overload
    def __init__(self, path: str, pathType: PathType): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark): ...
    @overload
    def CancelReading() -> None: ...
    @overload
    def Dispose() -> None: ...
    @property
    def BatchSize(self) -> int: ...
    @property
    def LogStatus(self) -> Generic.IList: ...
    @overload
    def ReadEvent() -> EventRecord: ...
    @overload
    def ReadEvent(self, timeout: System.TimeSpan) -> EventRecord: ...
    @overload
    def Seek(self, bookmark: EventBookmark) -> None: ...
    @overload
    def Seek(self, bookmark: EventBookmark, offset: System.Int64) -> None: ...
    @overload
    def Seek(self, origin: IO.SeekOrigin, offset: System.Int64) -> None: ...
    @BatchSize.setter
    def BatchSize(self, value: System.Void): ...

class EventLogRecord(EventRecord):
    """    """
    @overload
    def FormatDescription() -> str: ...
    @overload
    def FormatDescription(self, values: Generic.IEnumerable) -> str: ...
    @property
    def ActivityId(self) -> System.Nullable: ...
    @property
    def Bookmark(self) -> EventBookmark: ...
    @property
    def ContainerLog(self) -> str: ...
    @property
    def Id(self) -> int: ...
    @property
    def Keywords(self) -> System.Nullable: ...
    @property
    def KeywordsDisplayNames(self) -> Generic.IEnumerable: ...
    @property
    def Level(self) -> System.Nullable: ...
    @property
    def LevelDisplayName(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MatchedQueryIds(self) -> Generic.IEnumerable: ...
    @property
    def Opcode(self) -> System.Nullable: ...
    @property
    def OpcodeDisplayName(self) -> str: ...
    @property
    def ProcessId(self) -> System.Nullable: ...
    @property
    def Properties(self) -> Generic.IList: ...
    @property
    def ProviderId(self) -> System.Nullable: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def Qualifiers(self) -> System.Nullable: ...
    @property
    def RecordId(self) -> System.Nullable: ...
    @property
    def RelatedActivityId(self) -> System.Nullable: ...
    @property
    def Task(self) -> System.Nullable: ...
    @property
    def TaskDisplayName(self) -> str: ...
    @property
    def ThreadId(self) -> System.Nullable: ...
    @property
    def TimeCreated(self) -> System.Nullable: ...
    @property
    def UserId(self) -> Principal.SecurityIdentifier: ...
    @property
    def Version(self) -> System.Nullable: ...
    @overload
    def GetPropertyValues(self, propertySelector: EventLogPropertySelector) -> Generic.IList: ...
    @overload
    def ToXml() -> str: ...

class SessionAuthentication(enum.Enum):
    Default = 0
    Negotiate = 1
    Kerberos = 2
    Ntlm = 3

class PathType(enum.Enum):
    LogName = 1
    FilePath = 2

class EventLogSession(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, server: str): ...
    @overload
    def __init__(self, server: str, domain: str, user: str, password: Security.SecureString, logOnType: SessionAuthentication): ...
    @overload
    def CancelCurrentOperations() -> None: ...
    @overload
    def ClearLog(self, logName: str) -> None: ...
    @overload
    def ClearLog(self, logName: str, backupPath: str) -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def ExportLog(self, path: str, pathType: PathType, query: str, targetFilePath: str) -> None: ...
    @overload
    def ExportLog(self, path: str, pathType: PathType, query: str, targetFilePath: str, tolerateQueryErrors: bool) -> None: ...
    @overload
    def ExportLogAndMessages(self, path: str, pathType: PathType, query: str, targetFilePath: str) -> None: ...
    @overload
    def ExportLogAndMessages(self, path: str, pathType: PathType, query: str, targetFilePath: str, tolerateQueryErrors: bool, targetCultureInfo: Globalization.CultureInfo) -> None: ...
    @property
    def GlobalSession(self) -> EventLogSession: ...
    @overload
    def GetLogInformation(self, logName: str, pathType: PathType) -> EventLogInformation: ...
    @overload
    def GetLogNames() -> Generic.IEnumerable: ...
    @overload
    def GetProviderNames() -> Generic.IEnumerable: ...

class EventLogStatus(object):
    """    """
    @property
    def LogName(self) -> str: ...
    @property
    def StatusCode(self) -> int: ...

class EventLogWatcher(object):
    """    """
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark, readExistingEvents: bool): ...
    @overload
    def Dispose() -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...
    @property
    def EventRecordWritten(self): ...

class EventMetadata(object):
    """    """
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> System.Int64: ...
    @property
    def Keywords(self) -> Generic.IEnumerable: ...
    @property
    def Level(self) -> EventLevel: ...
    @property
    def LogLink(self) -> EventLogLink: ...
    @property
    def Opcode(self) -> EventOpcode: ...
    @property
    def Task(self) -> EventTask: ...
    @property
    def Template(self) -> str: ...
    @property
    def Version(self) -> System.Byte: ...

class EventOpcode(object):
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...

class EventProperty(object):
    """    """
    @property
    def Value(self) -> object: ...

class EventRecord(object):
    """    """
    @overload
    def Dispose() -> None: ...
    @overload
    def FormatDescription() -> str: ...
    @overload
    def FormatDescription(self, values: Generic.IEnumerable) -> str: ...
    @property
    def ActivityId(self) -> System.Nullable: ...
    @property
    def Bookmark(self) -> EventBookmark: ...
    @property
    def Id(self) -> int: ...
    @property
    def Keywords(self) -> System.Nullable: ...
    @property
    def KeywordsDisplayNames(self) -> Generic.IEnumerable: ...
    @property
    def Level(self) -> System.Nullable: ...
    @property
    def LevelDisplayName(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Opcode(self) -> System.Nullable: ...
    @property
    def OpcodeDisplayName(self) -> str: ...
    @property
    def ProcessId(self) -> System.Nullable: ...
    @property
    def Properties(self) -> Generic.IList: ...
    @property
    def ProviderId(self) -> System.Nullable: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def Qualifiers(self) -> System.Nullable: ...
    @property
    def RecordId(self) -> System.Nullable: ...
    @property
    def RelatedActivityId(self) -> System.Nullable: ...
    @property
    def Task(self) -> System.Nullable: ...
    @property
    def TaskDisplayName(self) -> str: ...
    @property
    def ThreadId(self) -> System.Nullable: ...
    @property
    def TimeCreated(self) -> System.Nullable: ...
    @property
    def UserId(self) -> Principal.SecurityIdentifier: ...
    @property
    def Version(self) -> System.Nullable: ...
    @overload
    def ToXml() -> str: ...

class EventRecordWrittenEventArgs(System.EventArgs):
    """    """
    @property
    def EventException(self) -> System.Exception: ...
    @property
    def EventRecord(self) -> EventRecord: ...

class EventTask(object):
    """    """
    @property
    def DisplayName(self) -> str: ...
    @property
    def EventGuid(self) -> System.Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...

class ProviderMetadata(object):
    """    """
    @overload
    def __init__(self, providerName: str): ...
    @overload
    def __init__(self, providerName: str, session: EventLogSession, targetCultureInfo: Globalization.CultureInfo): ...
    @overload
    def Dispose() -> None: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Events(self) -> Generic.IEnumerable: ...
    @property
    def HelpLink(self) -> System.Uri: ...
    @property
    def Id(self) -> System.Guid: ...
    @property
    def Keywords(self) -> Generic.IList: ...
    @property
    def Levels(self) -> Generic.IList: ...
    @property
    def LogLinks(self) -> Generic.IList: ...
    @property
    def MessageFilePath(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opcodes(self) -> Generic.IList: ...
    @property
    def ParameterFilePath(self) -> str: ...
    @property
    def ResourceFilePath(self) -> str: ...
    @property
    def Tasks(self) -> Generic.IList: ...

class StandardEventLevel(enum.Enum):
    LogAlways = 0
    Critical = 1
    Error = 2
    Warning = 3
    Informational = 4
    Verbose = 5

class StandardEventTask(enum.Enum):
    None_ = 0

class StandardEventOpcode(enum.Enum):
    Info = 0
    Start = 1
    Stop = 2
    DataCollectionStart = 3
    DataCollectionStop = 4
    Extension = 5
    Reply = 6
    Resume = 7
    Suspend = 8
    Send = 9
    Receive = 240

class StandardEventKeywords(enum.Enum):
    None_ = 0
    ResponseTime = 281474976710656
    WdiContext = 562949953421312
    WdiDiagnostic = 1125899906842624
    Sqm = 2251799813685248
    CorrelationHint = 4503599627370496
    AuditFailure = 4503599627370496
    AuditSuccess = 9007199254740992
    CorrelationHint2 = 18014398509481984
    EventLogClassic = 36028797018963968

# endregion
