"""this file is auto-generated by rhinocode stubmaker. do not make changes"""

# region: Exports
__all__ = ["Metrics", "ActivityChangedEventArgs", "Activity", "Enumerator", "ActivityTraceFlags", "ActivityIdFormat", "ActivityTraceId", "ActivitySpanId", "ActivityStatusCode", "ActivityTagsCollection", "ActivityContext", "ActivityCreationOptions", "ActivitySamplingResult", "ActivityEvent", "ActivityKind", "ActivityLink", "SampleActivity", "ActivityListener", "ActivitySource", "DiagnosticSource", "DiagnosticListener", "DistributedContextPropagator", "PropagatorGetterCallback", "PropagatorSetterCallback", "TagList"]
# endregion

# region: Imports
from System.Collections import Generic
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["FileVersionInfo"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["SymbolStore"]
# endregion

# region: Imports
from typing import overload
# endregion

# region: Exports
__all__ = ["TraceConfiguration"]
# endregion

# region: Imports
from System.Runtime import CompilerServices
from typing import overload
# endregion

# region: Exports
__all__ = ["DataReceivedEventHandler", "DataReceivedEventArgs", "Process", "ProcessModule", "ProcessModuleCollection", "ProcessPriorityClass", "ProcessStartInfo", "ProcessThread", "ProcessThreadCollection", "ProcessWindowStyle", "ThreadPriorityLevel", "ThreadState", "ThreadWaitReason", "MonitoringDescriptionAttribute"]
# endregion

# region: Imports
from Microsoft.Win32 import SafeHandles
from System import Collections
from System import ComponentModel
from System import IO
from System import Security
from System import Text
from System import Threading
from System.Collections import Generic
from System.Collections import ObjectModel
from System.Collections import Specialized
from System.Runtime import CompilerServices
from System.Threading import Tasks
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["BooleanSwitch", "InitializingSwitchEventArgs", "InitializingTraceSourceEventArgs", "CorrelationManager", "DefaultTraceListener", "EventTypeFilter", "SourceFilter", "SourceLevels", "SourceSwitch", "Switch", "Trace", "TraceEventCache", "TraceEventType", "TraceFilter", "TraceLevel", "TraceListener", "TraceListenerCollection", "TraceOptions", "TraceSource", "TraceSwitch", "SwitchAttribute", "SwitchLevelAttribute"]
# endregion

# region: Imports
from System import Collections
from System import Reflection
from System.Collections import Specialized
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["EventLogPermissionAccess", "EventLogPermissionEntry", "EventLogPermissionEntryCollection", "PerformanceCounterPermissionAccess", "PerformanceCounterPermissionEntry", "PerformanceCounterPermissionEntryCollection"]
# endregion

# region: Imports
from System import Collections
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["Eventing", "EntryWrittenEventArgs", "EntryWrittenEventHandler", "EventInstance", "EventLog", "EventLogEntry", "EventLogEntryCollection", "EventLogEntryType", "EventSourceCreationData", "EventLogTraceListener", "OverflowAction"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["PerformanceData", "CounterCreationData", "CounterCreationDataCollection", "CounterSample", "CounterSampleCalculator", "ICollectData", "InstanceData", "InstanceDataCollection", "InstanceDataCollectionCollection", "PerformanceCounter", "PerformanceCounterCategory", "PerformanceCounterCategoryType", "PerformanceCounterInstanceLifetime", "PerformanceCounterManager", "PerformanceCounterType"]
# endregion

# region: Imports
from System import Collections
from System import ComponentModel
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: Exports
__all__ = ["ConsoleTraceListener", "DelimitedListTraceListener", "TextWriterTraceListener", "XmlWriterTraceListener"]
# endregion

# region: Imports
from System import IO
from System.Runtime import CompilerServices
from typing import overload
import System
# endregion

# region: Exports
__all__ = ["SymbolStore", "Contracts", "CodeAnalysis", "Tracing", "Debugger", "StackFrame", "StackTrace", "ConditionalAttribute", "Debug", "AssertInterpolatedStringHandler", "WriteIfInterpolatedStringHandler", "DebuggableAttribute", "DebuggingModes", "DebuggerBrowsableState", "DebuggerBrowsableAttribute", "DebuggerDisplayAttribute", "DebuggerHiddenAttribute", "DebuggerNonUserCodeAttribute", "DebuggerStepperBoundaryAttribute", "DebuggerStepThroughAttribute", "DebuggerTypeProxyAttribute", "DebuggerVisualizerAttribute", "DebugProvider", "StackFrameExtensions", "StackTraceHiddenAttribute", "Stopwatch", "UnreachableException"]
# endregion

# region: Imports
from System import Reflection
from System.Runtime import CompilerServices
from typing import overload
import enum
import System
# endregion

# region: System.Private.CoreLib, Version=7.0.0.0

class Debugger(object):
    """    """
    @property
    def DefaultCategory(self) -> str: ...
    @overload
    @staticmethod
    def Break() -> None: ...
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @staticmethod
    def IsLogging() -> bool: ...
    @overload
    @staticmethod
    def Launch() -> bool: ...
    @overload
    @staticmethod
    def Log(level: int, category: str, message: str) -> None: ...
    @overload
    @staticmethod
    def NotifyOfCrossThreadDependency() -> None: ...

class StackFrame(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, needFileInfo: bool): ...
    @overload
    def __init__(self, skipFrames: int): ...
    @overload
    def __init__(self, skipFrames: int, needFileInfo: bool): ...
    @overload
    def __init__(self, fileName: str, lineNumber: int): ...
    @overload
    def __init__(self, fileName: str, lineNumber: int, colNumber: int): ...
    @property
    def OFFSET_UNKNOWN(self) -> int: ...
    @overload
    def GetFileColumnNumber() -> int: ...
    @overload
    def GetFileLineNumber() -> int: ...
    @overload
    def GetFileName() -> str: ...
    @overload
    def GetILOffset() -> int: ...
    @overload
    def GetMethod() -> Reflection.MethodBase: ...
    @overload
    def GetNativeOffset() -> int: ...
    @overload
    def ToString() -> str: ...

class StackTrace(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fNeedFileInfo: bool): ...
    @overload
    def __init__(self, skipFrames: int): ...
    @overload
    def __init__(self, e: System.Exception): ...
    @overload
    def __init__(self, frame: StackFrame): ...
    @overload
    def __init__(self, skipFrames: int, fNeedFileInfo: bool): ...
    @overload
    def __init__(self, e: System.Exception, fNeedFileInfo: bool): ...
    @overload
    def __init__(self, e: System.Exception, skipFrames: int): ...
    @overload
    def __init__(self, e: System.Exception, skipFrames: int, fNeedFileInfo: bool): ...
    @property
    def METHODS_TO_SKIP(self) -> int: ...
    @property
    def FrameCount(self) -> int: ...
    @overload
    def GetFrame(self, index: int) -> StackFrame: ...
    @overload
    def GetFrames() -> System.Array[StackFrame]: ...
    @overload
    def ToString() -> str: ...

class ConditionalAttribute(System.Attribute):
    """    """
    def __init__(self, conditionString: str): ...
    @property
    def ConditionString(self) -> str: ...

class Debug(object):
    """    """
    @overload
    @staticmethod
    def Assert(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool) -> (AssertInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def Assert(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool) -> (AssertInterpolatedStringHandler, AssertInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def Assert(condition: bool, message: str, detailMessage: str) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool, message: str, detailMessageFormat: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def Close() -> None: ...
    @overload
    @staticmethod
    def Fail(message: str) -> None: ...
    @overload
    @staticmethod
    def Fail(message: str, detailMessage: str) -> None: ...
    @overload
    @staticmethod
    def Flush() -> None: ...
    @property
    def AutoFlush(self) -> bool: ...
    @property
    def IndentLevel(self) -> int: ...
    @property
    def IndentSize(self) -> int: ...
    @overload
    @staticmethod
    def Indent() -> None: ...
    @overload
    @staticmethod
    def Print(message: str) -> None: ...
    @overload
    @staticmethod
    def Print(format_: str, args: System.System.Array[object]) -> None: ...
    @AutoFlush.setter
    def AutoFlush(self, value: System.Void): ...
    @IndentLevel.setter
    def IndentLevel(self, value: System.Void): ...
    @IndentSize.setter
    def IndentSize(self, value: System.Void): ...
    @overload
    @staticmethod
    def SetProvider(provider: DebugProvider) -> DebugProvider: ...
    @overload
    @staticmethod
    def Unindent() -> None: ...
    @overload
    @staticmethod
    def Write(message: str) -> None: ...
    @overload
    @staticmethod
    def Write(value: object) -> None: ...
    @overload
    @staticmethod
    def Write(message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def Write(value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool) -> (WriteIfInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, value: object) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, category: str) -> (WriteIfInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, value: object) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool) -> (WriteIfInterpolatedStringHandler): ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, category: str) -> (WriteIfInterpolatedStringHandler): ...

class AssertInterpolatedStringHandler(System.ValueType):
    """    """
    def __init__(self, literalLength: int, formattedCount: int, condition: bool, shouldAppend: System.Boolean): ...
    @overload
    def AppendFormatted(self, value: T) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan) -> None: ...
    @overload
    def AppendFormatted(self, value: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: str, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: object, alignment: int, format_: str) -> None: ...
    @overload
    def AppendLiteral(self, value: str) -> None: ...

class WriteIfInterpolatedStringHandler(System.ValueType):
    """    """
    def __init__(self, literalLength: int, formattedCount: int, condition: bool, shouldAppend: System.Boolean): ...
    @overload
    def AppendFormatted(self, value: T) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan) -> None: ...
    @overload
    def AppendFormatted(self, value: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int) -> None: ...
    @overload
    def AppendFormatted(self, value: T, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: System.ReadOnlySpan, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: str, alignment: int, format_: str) -> None: ...
    @overload
    def AppendFormatted(self, value: object, alignment: int, format_: str) -> None: ...
    @overload
    def AppendLiteral(self, value: str) -> None: ...

class DebuggableAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, modes: DebuggingModes): ...
    @overload
    def __init__(self, isJITTrackingEnabled: bool, isJITOptimizerDisabled: bool): ...
    @property
    def DebuggingFlags(self) -> DebuggingModes: ...
    @property
    def IsJITOptimizerDisabled(self) -> bool: ...
    @property
    def IsJITTrackingEnabled(self) -> bool: ...

class DebuggingModes(enum.Enum):
    None_ = 0
    Default = 1
    IgnoreSymbolStoreSequencePoints = 2
    EnableEditAndContinue = 4
    DisableOptimizations = 256

class DebuggerBrowsableState(enum.Enum):
    Never = 0
    Collapsed = 2
    RootHidden = 3

class DebuggerBrowsableAttribute(System.Attribute):
    """    """
    def __init__(self, state: DebuggerBrowsableState): ...
    @property
    def State(self) -> DebuggerBrowsableState: ...

class DebuggerDisplayAttribute(System.Attribute):
    """    """
    def __init__(self, value: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Target(self) -> System.Type: ...
    @property
    def TargetTypeName(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @TargetTypeName.setter
    def TargetTypeName(self, value: System.Void): ...
    @Type.setter
    def Type(self, value: System.Void): ...

class DebuggerHiddenAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DebuggerNonUserCodeAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DebuggerStepperBoundaryAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DebuggerStepThroughAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class DebuggerTypeProxyAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, type_: System.Type): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def ProxyTypeName(self) -> str: ...
    @property
    def Target(self) -> System.Type: ...
    @property
    def TargetTypeName(self) -> str: ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @TargetTypeName.setter
    def TargetTypeName(self, value: System.Void): ...

class DebuggerVisualizerAttribute(System.Attribute):
    """    """
    @overload
    def __init__(self, visualizerTypeName: str): ...
    @overload
    def __init__(self, visualizer: System.Type): ...
    @overload
    def __init__(self, visualizerTypeName: str, visualizerObjectSourceTypeName: str): ...
    @overload
    def __init__(self, visualizerTypeName: str, visualizerObjectSource: System.Type): ...
    @overload
    def __init__(self, visualizer: System.Type, visualizerObjectSource: System.Type): ...
    @overload
    def __init__(self, visualizer: System.Type, visualizerObjectSourceTypeName: str): ...
    @property
    def Description(self) -> str: ...
    @property
    def Target(self) -> System.Type: ...
    @property
    def TargetTypeName(self) -> str: ...
    @property
    def VisualizerObjectSourceTypeName(self) -> str: ...
    @property
    def VisualizerTypeName(self) -> str: ...
    @Description.setter
    def Description(self, value: System.Void): ...
    @Target.setter
    def Target(self, value: System.Void): ...
    @TargetTypeName.setter
    def TargetTypeName(self, value: System.Void): ...

class DebugProvider(object):
    """    """
    def __init__(self): ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    @overload
    @staticmethod
    def FailCore(stackTrace: str, message: str, detailMessage: str, errorSource: str) -> None: ...
    @overload
    def OnIndentLevelChanged(self, indentLevel: int) -> None: ...
    @overload
    def OnIndentSizeChanged(self, indentSize: int) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteCore(message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...

class StackFrameExtensions(object):
    """    """
    @overload
    @staticmethod
    def GetNativeImageBase(stackFrame: StackFrame) -> System.IntPtr: ...
    @overload
    @staticmethod
    def GetNativeIP(stackFrame: StackFrame) -> System.IntPtr: ...
    @overload
    @staticmethod
    def HasILOffset(stackFrame: StackFrame) -> bool: ...
    @overload
    @staticmethod
    def HasMethod(stackFrame: StackFrame) -> bool: ...
    @overload
    @staticmethod
    def HasNativeImage(stackFrame: StackFrame) -> bool: ...
    @overload
    @staticmethod
    def HasSource(stackFrame: StackFrame) -> bool: ...

class StackTraceHiddenAttribute(System.Attribute):
    """    """
    def __init__(self): ...

class Stopwatch(object):
    """    """
    def __init__(self): ...
    @property
    def Frequency(self) -> System.Int64: ...
    @property
    def IsHighResolution(self) -> bool: ...
    @property
    def Elapsed(self) -> System.TimeSpan: ...
    @property
    def ElapsedMilliseconds(self) -> System.Int64: ...
    @property
    def ElapsedTicks(self) -> System.Int64: ...
    @property
    def IsRunning(self) -> bool: ...
    @overload
    @staticmethod
    def GetElapsedTime(startingTimestamp: System.Int64) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def GetElapsedTime(startingTimestamp: System.Int64, endingTimestamp: System.Int64) -> System.TimeSpan: ...
    @overload
    @staticmethod
    def GetTimestamp() -> System.Int64: ...
    @overload
    def Reset() -> None: ...
    @overload
    def Restart() -> None: ...
    @overload
    def Start() -> None: ...
    @overload
    @staticmethod
    def StartNew() -> Stopwatch: ...
    @overload
    def Stop() -> None: ...

class UnreachableException(System.Exception):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: System.Exception): ...

# endregion

# region: System.Diagnostics.TextWriterTraceListener, Version=7.0.0.0

class ConsoleTraceListener(TextWriterTraceListener):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, useErrorStream: bool): ...
    @overload
    def Close() -> None: ...

class DelimitedListTraceListener(TextWriterTraceListener):
    """    """
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, writer: IO.TextWriter): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream, name: str): ...
    @overload
    def __init__(self, writer: IO.TextWriter, name: str): ...
    @overload
    def __init__(self, fileName: str, name: str): ...
    @property
    def Delimiter(self) -> str: ...
    @Delimiter.setter
    def Delimiter(self, value: System.Void): ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: System.System.Array[object]) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, format_: str, args: System.System.Array[object]) -> None: ...

class TextWriterTraceListener(TraceListener):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, writer: IO.TextWriter): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: IO.Stream, name: str): ...
    @overload
    def __init__(self, writer: IO.TextWriter, name: str): ...
    @overload
    def __init__(self, fileName: str, name: str): ...
    @overload
    def Close() -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def Writer(self) -> IO.TextWriter: ...
    @Writer.setter
    def Writer(self, value: System.Void): ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...

class XmlWriterTraceListener(TextWriterTraceListener):
    """    """
    @overload
    def __init__(self, stream: IO.Stream): ...
    @overload
    def __init__(self, writer: IO.TextWriter): ...
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, stream: IO.Stream, name: str): ...
    @overload
    def __init__(self, writer: IO.TextWriter, name: str): ...
    @overload
    def __init__(self, filename: str, name: str): ...
    @overload
    def Close() -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: System.System.Array[object]) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: object) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id_: int, message: str, relatedActivityId: System.Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...

# endregion

# region: System.Diagnostics.PerformanceCounter, Version=7.0.0.0

class CounterCreationData(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, counterName: str, counterHelp: str, counterType: PerformanceCounterType): ...
    @property
    def CounterHelp(self) -> str: ...
    @property
    def CounterName(self) -> str: ...
    @property
    def CounterType(self) -> PerformanceCounterType: ...
    @CounterHelp.setter
    def CounterHelp(self, value: System.Void): ...
    @CounterName.setter
    def CounterName(self, value: System.Void): ...
    @CounterType.setter
    def CounterType(self, value: System.Void): ...

class CounterCreationDataCollection(Collections.CollectionBase):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: CounterCreationDataCollection): ...
    @overload
    def __init__(self, value: System.Array[CounterCreationData]): ...
    @overload
    def Add(self, value: CounterCreationData) -> int: ...
    @overload
    def AddRange(self, value: System.Array[CounterCreationData]) -> None: ...
    @overload
    def AddRange(self, value: CounterCreationDataCollection) -> None: ...
    @overload
    def Contains(self, value: CounterCreationData) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[CounterCreationData], index: int) -> None: ...
    @property
    def Item(self) -> CounterCreationData: ...
    @overload
    def IndexOf(self, value: CounterCreationData) -> int: ...
    @overload
    def Insert(self, index: int, value: CounterCreationData) -> None: ...
    @overload
    def Remove(self, value: CounterCreationData) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class CounterSample(System.ValueType):
    """    """
    @overload
    def __init__(self, rawValue: System.Int64, baseValue: System.Int64, counterFrequency: System.Int64, systemFrequency: System.Int64, timeStamp: System.Int64, timeStamp100nSec: System.Int64, counterType: PerformanceCounterType): ...
    @overload
    def __init__(self, rawValue: System.Int64, baseValue: System.Int64, counterFrequency: System.Int64, systemFrequency: System.Int64, timeStamp: System.Int64, timeStamp100nSec: System.Int64, counterType: PerformanceCounterType, counterTimeStamp: System.Int64): ...
    @property
    def Empty(self) -> CounterSample: ...
    @overload
    @staticmethod
    def Calculate(counterSample: CounterSample) -> System.Single: ...
    @overload
    @staticmethod
    def Calculate(counterSample: CounterSample, nextCounterSample: CounterSample) -> System.Single: ...
    @overload
    def Equals(self, sample: CounterSample) -> bool: ...
    @overload
    def Equals(self, o: object) -> bool: ...
    @property
    def BaseValue(self) -> System.Int64: ...
    @property
    def CounterFrequency(self) -> System.Int64: ...
    @property
    def CounterTimeStamp(self) -> System.Int64: ...
    @property
    def CounterType(self) -> PerformanceCounterType: ...
    @property
    def RawValue(self) -> System.Int64: ...
    @property
    def SystemFrequency(self) -> System.Int64: ...
    @property
    def TimeStamp(self) -> System.Int64: ...
    @property
    def TimeStamp100nSec(self) -> System.Int64: ...
    @overload
    def GetHashCode() -> int: ...

class CounterSampleCalculator(object):
    """    """
    @overload
    @staticmethod
    def ComputeCounterValue(newSample: CounterSample) -> System.Single: ...
    @overload
    @staticmethod
    def ComputeCounterValue(oldSample: CounterSample, newSample: CounterSample) -> System.Single: ...

class ICollectData:
    """    """
    @overload
    def CloseData() -> None: ...
    @overload
    def CollectData(self, id_: int, valueName: System.IntPtr, data: System.IntPtr, totalBytes: int) -> (System.IntPtr): ...

class InstanceData(object):
    """    """
    def __init__(self, instanceName: str, sample: CounterSample): ...
    @property
    def InstanceName(self) -> str: ...
    @property
    def RawValue(self) -> System.Int64: ...
    @property
    def Sample(self) -> CounterSample: ...

class InstanceDataCollection(Collections.DictionaryBase):
    """    """
    def __init__(self, counterName: str): ...
    @overload
    def Contains(self, instanceName: str) -> bool: ...
    @overload
    def CopyTo(self, instances: System.Array[InstanceData], index: int) -> None: ...
    @property
    def CounterName(self) -> str: ...
    @property
    def Item(self) -> InstanceData: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def Values(self) -> Collections.ICollection: ...

class InstanceDataCollectionCollection(Collections.DictionaryBase):
    """    """
    def __init__(self): ...
    @overload
    def Contains(self, counterName: str) -> bool: ...
    @overload
    def CopyTo(self, counters: System.Array[InstanceDataCollection], index: int) -> None: ...
    @property
    def Item(self) -> InstanceDataCollection: ...
    @property
    def Keys(self) -> Collections.ICollection: ...
    @property
    def Values(self) -> Collections.ICollection: ...

class PerformanceCounter(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, categoryName: str, counterName: str): ...
    @overload
    def __init__(self, categoryName: str, counterName: str, instanceName: str): ...
    @overload
    def __init__(self, categoryName: str, counterName: str, readOnly: bool): ...
    @overload
    def __init__(self, categoryName: str, counterName: str, instanceName: str, machineName: str): ...
    @overload
    def __init__(self, categoryName: str, counterName: str, instanceName: str, readOnly: bool): ...
    @property
    def DefaultFileMappingSize(self) -> int: ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def CloseSharedResources() -> None: ...
    @overload
    def Decrement() -> System.Int64: ...
    @overload
    def EndInit() -> None: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def CounterHelp(self) -> str: ...
    @property
    def CounterName(self) -> str: ...
    @property
    def CounterType(self) -> PerformanceCounterType: ...
    @property
    def InstanceLifetime(self) -> PerformanceCounterInstanceLifetime: ...
    @property
    def InstanceName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def RawValue(self) -> System.Int64: ...
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    def Increment() -> System.Int64: ...
    @overload
    def IncrementBy(self, value: System.Int64) -> System.Int64: ...
    @overload
    def NextSample() -> CounterSample: ...
    @overload
    def NextValue() -> System.Single: ...
    @overload
    def RemoveInstance() -> None: ...
    @CategoryName.setter
    def CategoryName(self, value: System.Void): ...
    @CounterName.setter
    def CounterName(self, value: System.Void): ...
    @InstanceLifetime.setter
    def InstanceLifetime(self, value: System.Void): ...
    @InstanceName.setter
    def InstanceName(self, value: System.Void): ...
    @MachineName.setter
    def MachineName(self, value: System.Void): ...
    @RawValue.setter
    def RawValue(self, value: System.Void): ...
    @ReadOnly.setter
    def ReadOnly(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class PerformanceCounterCategory(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, categoryName: str): ...
    @overload
    def __init__(self, categoryName: str, machineName: str): ...
    @overload
    def CounterExists(self, counterName: str) -> bool: ...
    @overload
    @staticmethod
    def CounterExists(counterName: str, categoryName: str) -> bool: ...
    @overload
    @staticmethod
    def CounterExists(counterName: str, categoryName: str, machineName: str) -> bool: ...
    @overload
    @staticmethod
    def Create(categoryName: str, categoryHelp: str, categoryType: PerformanceCounterCategoryType, counterData: CounterCreationDataCollection) -> PerformanceCounterCategory: ...
    @overload
    @staticmethod
    def Create(categoryName: str, categoryHelp: str, categoryType: PerformanceCounterCategoryType, counterName: str, counterHelp: str) -> PerformanceCounterCategory: ...
    @overload
    @staticmethod
    def Delete(categoryName: str) -> None: ...
    @overload
    @staticmethod
    def Exists(categoryName: str) -> bool: ...
    @overload
    @staticmethod
    def Exists(categoryName: str, machineName: str) -> bool: ...
    @property
    def CategoryHelp(self) -> str: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def CategoryType(self) -> PerformanceCounterCategoryType: ...
    @property
    def MachineName(self) -> str: ...
    @overload
    @staticmethod
    def GetCategories() -> System.Array[PerformanceCounterCategory]: ...
    @overload
    @staticmethod
    def GetCategories(machineName: str) -> System.Array[PerformanceCounterCategory]: ...
    @overload
    def GetCounters() -> System.Array[PerformanceCounter]: ...
    @overload
    def GetCounters(self, instanceName: str) -> System.Array[PerformanceCounter]: ...
    @overload
    def GetInstanceNames() -> System.System.Array[str]: ...
    @overload
    def InstanceExists(self, instanceName: str) -> bool: ...
    @overload
    @staticmethod
    def InstanceExists(instanceName: str, categoryName: str) -> bool: ...
    @overload
    @staticmethod
    def InstanceExists(instanceName: str, categoryName: str, machineName: str) -> bool: ...
    @overload
    def ReadCategory() -> InstanceDataCollectionCollection: ...
    @CategoryName.setter
    def CategoryName(self, value: System.Void): ...
    @MachineName.setter
    def MachineName(self, value: System.Void): ...

class PerformanceCounterCategoryType(enum.Enum):
    SingleInstance = 0
    MultiInstance = 1
    Unknown = -1

class PerformanceCounterInstanceLifetime(enum.Enum):
    Global = 0
    Process = 1

class PerformanceCounterManager(object):
    """    """
    def __init__(self): ...

class PerformanceCounterType(enum.Enum):
    NumberOfItemsHEX32 = 0
    NumberOfItemsHEX64 = 256
    NumberOfItems32 = 65536
    NumberOfItems64 = 65792
    CounterDelta32 = 4195328
    CounterDelta64 = 4195584
    SampleCounter = 4260864
    CountPerTimeInterval32 = 4523008
    CountPerTimeInterval64 = 4523264
    RateOfCountsPerSecond32 = 272696320
    RateOfCountsPerSecond64 = 272696576
    RawFraction = 537003008
    CounterTimer = 541132032
    Timer100Ns = 542180608
    SampleFraction = 549585920
    CounterTimerInverse = 557909248
    Timer100NsInverse = 558957824
    CounterMultiTimer = 574686464
    CounterMultiTimer100Ns = 575735040
    CounterMultiTimerInverse = 591463680
    CounterMultiTimer100NsInverse = 592512256
    AverageTimer32 = 805438464
    ElapsedTime = 807666944
    AverageCount64 = 1073874176
    SampleBase = 1073939457
    AverageBase = 1073939458
    RawBase = 1073939459
    CounterMultiBase = 1107494144

# endregion

# region: System.Diagnostics.EventLog, Version=7.0.0.0

class EntryWrittenEventArgs(System.EventArgs):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, entry: EventLogEntry): ...
    @property
    def Entry(self) -> EventLogEntry: ...

class EntryWrittenEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EntryWrittenEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: EntryWrittenEventArgs) -> None: ...

class EventInstance(object):
    """    """
    @overload
    def __init__(self, instanceId: System.Int64, categoryId: int): ...
    @overload
    def __init__(self, instanceId: System.Int64, categoryId: int, entryType: EventLogEntryType): ...
    @property
    def CategoryId(self) -> int: ...
    @property
    def EntryType(self) -> EventLogEntryType: ...
    @property
    def InstanceId(self) -> System.Int64: ...
    @CategoryId.setter
    def CategoryId(self, value: System.Void): ...
    @EntryType.setter
    def EntryType(self, value: System.Void): ...
    @InstanceId.setter
    def InstanceId(self, value: System.Void): ...

class EventLog(ComponentModel.Component):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, logName: str): ...
    @overload
    def __init__(self, logName: str, machineName: str): ...
    @overload
    def __init__(self, logName: str, machineName: str, source: str): ...
    @overload
    def BeginInit() -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    @staticmethod
    def CreateEventSource(sourceData: EventSourceCreationData) -> None: ...
    @overload
    @staticmethod
    def CreateEventSource(source: str, logName: str) -> None: ...
    @overload
    @staticmethod
    def Delete(logName: str) -> None: ...
    @overload
    @staticmethod
    def Delete(logName: str, machineName: str) -> None: ...
    @overload
    @staticmethod
    def DeleteEventSource(source: str) -> None: ...
    @overload
    @staticmethod
    def DeleteEventSource(source: str, machineName: str) -> None: ...
    @overload
    def EndInit() -> None: ...
    @overload
    @staticmethod
    def Exists(logName: str) -> bool: ...
    @overload
    @staticmethod
    def Exists(logName: str, machineName: str) -> bool: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    @property
    def Entries(self) -> EventLogEntryCollection: ...
    @property
    def Log(self) -> str: ...
    @property
    def LogDisplayName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MaximumKilobytes(self) -> System.Int64: ...
    @property
    def MinimumRetentionDays(self) -> int: ...
    @property
    def OverflowAction(self) -> OverflowAction: ...
    @property
    def Source(self) -> str: ...
    @property
    def SynchronizingObject(self) -> ComponentModel.ISynchronizeInvoke: ...
    @overload
    @staticmethod
    def GetEventLogs() -> System.Array[EventLog]: ...
    @overload
    @staticmethod
    def GetEventLogs(machineName: str) -> System.Array[EventLog]: ...
    @overload
    @staticmethod
    def LogNameFromSourceName(source: str, machineName: str) -> str: ...
    @overload
    def ModifyOverflowPolicy(self, action: OverflowAction, retentionDays: int) -> None: ...
    @overload
    def RegisterDisplayName(self, resourceFile: str, resourceId: System.Int64) -> None: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: System.Void): ...
    @Log.setter
    def Log(self, value: System.Void): ...
    @MachineName.setter
    def MachineName(self, value: System.Void): ...
    @MaximumKilobytes.setter
    def MaximumKilobytes(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: System.Void): ...
    @overload
    @staticmethod
    def SourceExists(source: str) -> bool: ...
    @overload
    @staticmethod
    def SourceExists(source: str, machineName: str) -> bool: ...
    @overload
    def WriteEntry(self, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteEntry(source: str, message: str) -> None: ...
    @overload
    def WriteEntry(self, message: str, type_: EventLogEntryType) -> None: ...
    @overload
    @staticmethod
    def WriteEntry(source: str, message: str, type_: EventLogEntryType) -> None: ...
    @overload
    def WriteEntry(self, message: str, type_: EventLogEntryType, eventID: int) -> None: ...
    @overload
    def WriteEntry(self, message: str, type_: EventLogEntryType, eventID: int, category: System.Int16) -> None: ...
    @overload
    @staticmethod
    def WriteEntry(source: str, message: str, type_: EventLogEntryType, eventID: int) -> None: ...
    @overload
    def WriteEntry(self, message: str, type_: EventLogEntryType, eventID: int, category: System.Int16, rawData: System.System.Array[System.Byte]) -> None: ...
    @overload
    @staticmethod
    def WriteEntry(source: str, message: str, type_: EventLogEntryType, eventID: int, category: System.Int16) -> None: ...
    @overload
    @staticmethod
    def WriteEntry(source: str, message: str, type_: EventLogEntryType, eventID: int, category: System.Int16, rawData: System.System.Array[System.Byte]) -> None: ...
    @overload
    def WriteEvent(self, instance: EventInstance, values: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def WriteEvent(source: str, instance: EventInstance, values: System.System.Array[object]) -> None: ...
    @overload
    def WriteEvent(self, instance: EventInstance, data: System.System.Array[System.Byte], values: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def WriteEvent(source: str, instance: EventInstance, data: System.System.Array[System.Byte], values: System.System.Array[object]) -> None: ...
    @property
    def EntryWritten(self): ...
    @property
    def Disposed(self): ...

class EventLogEntry(ComponentModel.Component):
    """    """
    @overload
    def Equals(self, otherEntry: EventLogEntry) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def CategoryNumber(self) -> System.Int16: ...
    @property
    def Data(self) -> System.System.Array[System.Byte]: ...
    @property
    def EntryType(self) -> EventLogEntryType: ...
    @property
    def EventID(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def InstanceId(self) -> System.Int64: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def ReplacementStrings(self) -> System.System.Array[str]: ...
    @property
    def Source(self) -> str: ...
    @property
    def TimeGenerated(self) -> System.DateTime: ...
    @property
    def TimeWritten(self) -> System.DateTime: ...
    @property
    def UserName(self) -> str: ...
    @property
    def Disposed(self): ...

class EventLogEntryCollection(object):
    """    """
    @overload
    def CopyTo(self, entries: System.Array[EventLogEntry], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EventLogEntry: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...

class EventLogEntryType(enum.Enum):
    Error = 1
    Warning = 2
    Information = 4
    SuccessAudit = 8
    FailureAudit = 16

class EventSourceCreationData(object):
    """    """
    def __init__(self, source: str, logName: str): ...
    @property
    def CategoryCount(self) -> int: ...
    @property
    def CategoryResourceFile(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MessageResourceFile(self) -> str: ...
    @property
    def ParameterResourceFile(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @CategoryCount.setter
    def CategoryCount(self, value: System.Void): ...
    @CategoryResourceFile.setter
    def CategoryResourceFile(self, value: System.Void): ...
    @LogName.setter
    def LogName(self, value: System.Void): ...
    @MachineName.setter
    def MachineName(self, value: System.Void): ...
    @MessageResourceFile.setter
    def MessageResourceFile(self, value: System.Void): ...
    @ParameterResourceFile.setter
    def ParameterResourceFile(self, value: System.Void): ...
    @Source.setter
    def Source(self, value: System.Void): ...

class EventLogTraceListener(TraceListener):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventLog: EventLog): ...
    @overload
    def __init__(self, source: str): ...
    @overload
    def Close() -> None: ...
    @property
    def EventLog(self) -> EventLog: ...
    @property
    def Name(self) -> str: ...
    @EventLog.setter
    def EventLog(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id_: int, data: object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id_: int, data: System.System.Array[object]) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id_: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id_: int, format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...

class OverflowAction(enum.Enum):
    OverwriteAsNeeded = 0
    OverwriteOlder = 1
    DoNotOverwrite = -1

# endregion

# region: System.Security.Permissions, Version=7.0.0.0

class EventLogPermissionAccess(enum.Enum):
    None_ = 0
    Browse = 2
    Instrument = 6
    Audit = 10
    Write = 16
    Administer = 48

class EventLogPermissionEntry(object):
    """    """
    def __init__(self, permissionAccess: EventLogPermissionAccess, machineName: str): ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> EventLogPermissionAccess: ...

class EventLogPermissionEntryCollection(Collections.CollectionBase):
    """    """
    @overload
    def Add(self, value: EventLogPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: EventLogPermissionEntryCollection) -> None: ...
    @overload
    def AddRange(self, value: System.Array[EventLogPermissionEntry]) -> None: ...
    @overload
    def Contains(self, value: EventLogPermissionEntry) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[EventLogPermissionEntry], index: int) -> None: ...
    @property
    def Item(self) -> EventLogPermissionEntry: ...
    @overload
    def IndexOf(self, value: EventLogPermissionEntry) -> int: ...
    @overload
    def Insert(self, index: int, value: EventLogPermissionEntry) -> None: ...
    @overload
    def Remove(self, value: EventLogPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class PerformanceCounterPermissionAccess(enum.Enum):
    None_ = 0
    Browse = 1
    Read = 1
    Write = 2
    Instrument = 3
    Administer = 7

class PerformanceCounterPermissionEntry(object):
    """    """
    def __init__(self, permissionAccess: PerformanceCounterPermissionAccess, machineName: str, categoryName: str): ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> PerformanceCounterPermissionAccess: ...

class PerformanceCounterPermissionEntryCollection(Collections.CollectionBase):
    """    """
    @overload
    def Add(self, value: PerformanceCounterPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: PerformanceCounterPermissionEntryCollection) -> None: ...
    @overload
    def AddRange(self, value: System.Array[PerformanceCounterPermissionEntry]) -> None: ...
    @overload
    def Contains(self, value: PerformanceCounterPermissionEntry) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[PerformanceCounterPermissionEntry], index: int) -> None: ...
    @property
    def Item(self) -> PerformanceCounterPermissionEntry: ...
    @overload
    def IndexOf(self, value: PerformanceCounterPermissionEntry) -> int: ...
    @overload
    def Insert(self, index: int, value: PerformanceCounterPermissionEntry) -> None: ...
    @overload
    def Remove(self, value: PerformanceCounterPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

# endregion

# region: System.Diagnostics.TraceSource, Version=7.0.0.0

class BooleanSwitch(Switch):
    """    """
    @overload
    def __init__(self, displayName: str, description: str): ...
    @overload
    def __init__(self, displayName: str, description: str, defaultSwitchValue: str): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: System.Void): ...

class InitializingSwitchEventArgs(System.EventArgs):
    """    """
    def __init__(self, switch: Switch): ...
    @property
    def Switch(self) -> Switch: ...

class InitializingTraceSourceEventArgs(System.EventArgs):
    """    """
    def __init__(self, traceSource: TraceSource): ...
    @property
    def TraceSource(self) -> TraceSource: ...
    @property
    def WasInitialized(self) -> bool: ...
    @WasInitialized.setter
    def WasInitialized(self, value: System.Void): ...

class CorrelationManager(object):
    """    """
    @property
    def ActivityId(self) -> System.Guid: ...
    @property
    def LogicalOperationStack(self) -> Collections.Stack: ...
    @ActivityId.setter
    def ActivityId(self, value: System.Void): ...
    @overload
    def StartLogicalOperation() -> None: ...
    @overload
    def StartLogicalOperation(self, operationId: object) -> None: ...
    @overload
    def StopLogicalOperation() -> None: ...

class DefaultTraceListener(TraceListener):
    """    """
    def __init__(self): ...
    @overload
    def Fail(self, message: str) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    @property
    def AssertUiEnabled(self) -> bool: ...
    @property
    def LogFileName(self) -> str: ...
    @AssertUiEnabled.setter
    def AssertUiEnabled(self, value: System.Void): ...
    @LogFileName.setter
    def LogFileName(self, value: System.Void): ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...

class EventTypeFilter(TraceFilter):
    """    """
    def __init__(self, level: SourceLevels): ...
    @property
    def EventType(self) -> SourceLevels: ...
    @EventType.setter
    def EventType(self, value: System.Void): ...
    @overload
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, formatOrMessage: str, args: System.System.Array[object], data1: object, data: System.System.Array[object]) -> bool: ...

class SourceFilter(TraceFilter):
    """    """
    def __init__(self, source: str): ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: System.Void): ...
    @overload
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, formatOrMessage: str, args: System.System.Array[object], data1: object, data: System.System.Array[object]) -> bool: ...

class SourceLevels(enum.Enum):
    Off = 0
    Critical = 1
    Error = 3
    Warning = 7
    Information = 15
    Verbose = 31
    ActivityTracing = 65280
    All = -1

class SourceSwitch(Switch):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, displayName: str, defaultSwitchValue: str): ...
    @property
    def Level(self) -> SourceLevels: ...
    @Level.setter
    def Level(self, value: System.Void): ...
    @overload
    def ShouldTrace(self, eventType: TraceEventType) -> bool: ...

class Switch(object):
    """    """
    @property
    def Attributes(self) -> Specialized.StringDictionary: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @overload
    def Refresh() -> None: ...
    @Value.setter
    def Value(self, value: System.Void): ...
    @property
    def Initializing(self): ...

class Trace(object):
    """    """
    @overload
    @staticmethod
    def Assert(condition: bool) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def Assert(condition: bool, message: str, detailMessage: str) -> None: ...
    @overload
    @staticmethod
    def Close() -> None: ...
    @overload
    @staticmethod
    def Fail(message: str) -> None: ...
    @overload
    @staticmethod
    def Fail(message: str, detailMessage: str) -> None: ...
    @overload
    @staticmethod
    def Flush() -> None: ...
    @property
    def AutoFlush(self) -> bool: ...
    @property
    def CorrelationManager(self) -> CorrelationManager: ...
    @property
    def IndentLevel(self) -> int: ...
    @property
    def IndentSize(self) -> int: ...
    @property
    def Listeners(self) -> TraceListenerCollection: ...
    @property
    def UseGlobalLock(self) -> bool: ...
    @overload
    @staticmethod
    def Indent() -> None: ...
    @overload
    @staticmethod
    def Refresh() -> None: ...
    @AutoFlush.setter
    def AutoFlush(self, value: System.Void): ...
    @IndentLevel.setter
    def IndentLevel(self, value: System.Void): ...
    @IndentSize.setter
    def IndentSize(self, value: System.Void): ...
    @UseGlobalLock.setter
    def UseGlobalLock(self, value: System.Void): ...
    @overload
    @staticmethod
    def TraceError(message: str) -> None: ...
    @overload
    @staticmethod
    def TraceError(format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def TraceInformation(message: str) -> None: ...
    @overload
    @staticmethod
    def TraceInformation(format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def TraceWarning(message: str) -> None: ...
    @overload
    @staticmethod
    def TraceWarning(format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    @staticmethod
    def Unindent() -> None: ...
    @overload
    @staticmethod
    def Write(message: str) -> None: ...
    @overload
    @staticmethod
    def Write(value: object) -> None: ...
    @overload
    @staticmethod
    def Write(value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def Write(message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, value: object) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteIf(condition: bool, value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, value: object) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, value: object, category: str) -> None: ...
    @overload
    @staticmethod
    def WriteLineIf(condition: bool, message: str, category: str) -> None: ...
    @property
    def Refreshing(self): ...

class TraceEventCache(object):
    """    """
    def __init__(self): ...
    @property
    def Callstack(self) -> str: ...
    @property
    def DateTime(self) -> System.DateTime: ...
    @property
    def LogicalOperationStack(self) -> Collections.Stack: ...
    @property
    def ProcessId(self) -> int: ...
    @property
    def ThreadId(self) -> str: ...
    @property
    def Timestamp(self) -> System.Int64: ...

class TraceEventType(enum.Enum):
    Critical = 1
    Error = 2
    Warning = 4
    Information = 8
    Verbose = 16
    Start = 256
    Stop = 512
    Suspend = 1024
    Resume = 2048
    Transfer = 4096

class TraceFilter(object):
    """    """
    @overload
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, formatOrMessage: str, args: System.System.Array[object], data1: object, data: System.System.Array[object]) -> bool: ...

class TraceLevel(enum.Enum):
    Off = 0
    Error = 1
    Warning = 2
    Info = 3
    Verbose = 4

class TraceListener(System.MarshalByRefObject):
    """    """
    @overload
    def Close() -> None: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def Fail(self, message: str) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def Attributes(self) -> Specialized.StringDictionary: ...
    @property
    def Filter(self) -> TraceFilter: ...
    @property
    def IndentLevel(self) -> int: ...
    @property
    def IndentSize(self) -> int: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TraceOutputOptions(self) -> TraceOptions: ...
    @Filter.setter
    def Filter(self, value: System.Void): ...
    @IndentLevel.setter
    def IndentLevel(self, value: System.Void): ...
    @IndentSize.setter
    def IndentSize(self, value: System.Void): ...
    @Name.setter
    def Name(self, value: System.Void): ...
    @TraceOutputOptions.setter
    def TraceOutputOptions(self, value: System.Void): ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, data: System.System.Array[object]) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id_: int, format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id_: int, message: str, relatedActivityId: System.Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def Write(self, o: object) -> None: ...
    @overload
    def Write(self, o: object, category: str) -> None: ...
    @overload
    def Write(self, message: str, category: str) -> None: ...
    @overload
    def WriteLine(self, o: object) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str, category: str) -> None: ...
    @overload
    def WriteLine(self, o: object, category: str) -> None: ...

class TraceListenerCollection(object):
    """    """
    @overload
    def Add(self, listener: TraceListener) -> int: ...
    @overload
    def AddRange(self, value: System.Array[TraceListener]) -> None: ...
    @overload
    def AddRange(self, value: TraceListenerCollection) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, listener: TraceListener) -> bool: ...
    @overload
    def CopyTo(self, listeners: System.Array[TraceListener], index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> TraceListener: ...
    @property
    def Item(self) -> TraceListener: ...
    @overload
    def GetEnumerator() -> Collections.IEnumerator: ...
    @overload
    def IndexOf(self, listener: TraceListener) -> int: ...
    @overload
    def Insert(self, index: int, listener: TraceListener) -> None: ...
    @overload
    def Remove(self, listener: TraceListener) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class TraceOptions(enum.Enum):
    None_ = 0
    LogicalOperationStack = 1
    DateTime = 2
    Timestamp = 4
    ProcessId = 8
    ThreadId = 16
    Callstack = 32

class TraceSource(object):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, defaultLevel: SourceLevels): ...
    @overload
    def Close() -> None: ...
    @overload
    def Flush() -> None: ...
    @property
    def Attributes(self) -> Specialized.StringDictionary: ...
    @property
    def DefaultLevel(self) -> SourceLevels: ...
    @property
    def Listeners(self) -> TraceListenerCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Switch(self) -> SourceSwitch: ...
    @Switch.setter
    def Switch(self, value: System.Void): ...
    @overload
    def TraceData(self, eventType: TraceEventType, id_: int, data: System.System.Array[object]) -> None: ...
    @overload
    def TraceData(self, eventType: TraceEventType, id_: int, data: object) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id_: int) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id_: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id_: int, format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    def TraceInformation(self, message: str) -> None: ...
    @overload
    def TraceInformation(self, format_: str, args: System.System.Array[object]) -> None: ...
    @overload
    def TraceTransfer(self, id_: int, message: str, relatedActivityId: System.Guid) -> None: ...
    @property
    def Initializing(self): ...

class TraceSwitch(Switch):
    """    """
    @overload
    def __init__(self, displayName: str, description: str): ...
    @overload
    def __init__(self, displayName: str, description: str, defaultSwitchValue: str): ...
    @property
    def Level(self) -> TraceLevel: ...
    @property
    def TraceError(self) -> bool: ...
    @property
    def TraceInfo(self) -> bool: ...
    @property
    def TraceVerbose(self) -> bool: ...
    @property
    def TraceWarning(self) -> bool: ...
    @Level.setter
    def Level(self, value: System.Void): ...

class SwitchAttribute(System.Attribute):
    """    """
    def __init__(self, switchName: str, switchType: System.Type): ...
    @property
    def SwitchDescription(self) -> str: ...
    @property
    def SwitchName(self) -> str: ...
    @property
    def SwitchType(self) -> System.Type: ...
    @overload
    @staticmethod
    def GetAll(assembly: Reflection.Assembly) -> System.Array[SwitchAttribute]: ...
    @SwitchDescription.setter
    def SwitchDescription(self, value: System.Void): ...
    @SwitchName.setter
    def SwitchName(self, value: System.Void): ...
    @SwitchType.setter
    def SwitchType(self, value: System.Void): ...

class SwitchLevelAttribute(System.Attribute):
    """    """
    def __init__(self, switchLevelType: System.Type): ...
    @property
    def SwitchLevelType(self) -> System.Type: ...
    @SwitchLevelType.setter
    def SwitchLevelType(self, value: System.Void): ...

# endregion

# region: System.Diagnostics.Process, Version=7.0.0.0

class DataReceivedEventHandler(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: DataReceivedEventArgs, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, sender: object, e: DataReceivedEventArgs) -> None: ...

class DataReceivedEventArgs(System.EventArgs):
    """    """
    @property
    def Data(self) -> str: ...

class Process(ComponentModel.Component):
    """    """
    def __init__(self): ...
    @overload
    def BeginErrorReadLine() -> None: ...
    @overload
    def BeginOutputReadLine() -> None: ...
    @overload
    def CancelErrorRead() -> None: ...
    @overload
    def CancelOutputRead() -> None: ...
    @overload
    def Close() -> None: ...
    @overload
    def CloseMainWindow() -> bool: ...
    @overload
    @staticmethod
    def EnterDebugMode() -> None: ...
    @property
    def BasePriority(self) -> int: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    @property
    def ExitCode(self) -> int: ...
    @property
    def ExitTime(self) -> System.DateTime: ...
    @property
    def Handle(self) -> System.IntPtr: ...
    @property
    def HandleCount(self) -> int: ...
    @property
    def HasExited(self) -> bool: ...
    @property
    def Id(self) -> int: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MainModule(self) -> ProcessModule: ...
    @property
    def MainWindowHandle(self) -> System.IntPtr: ...
    @property
    def MainWindowTitle(self) -> str: ...
    @property
    def MaxWorkingSet(self) -> System.IntPtr: ...
    @property
    def MinWorkingSet(self) -> System.IntPtr: ...
    @property
    def Modules(self) -> ProcessModuleCollection: ...
    @property
    def NonpagedSystemMemorySize(self) -> int: ...
    @property
    def NonpagedSystemMemorySize64(self) -> System.Int64: ...
    @property
    def PagedMemorySize(self) -> int: ...
    @property
    def PagedMemorySize64(self) -> System.Int64: ...
    @property
    def PagedSystemMemorySize(self) -> int: ...
    @property
    def PagedSystemMemorySize64(self) -> System.Int64: ...
    @property
    def PeakPagedMemorySize(self) -> int: ...
    @property
    def PeakPagedMemorySize64(self) -> System.Int64: ...
    @property
    def PeakVirtualMemorySize(self) -> int: ...
    @property
    def PeakVirtualMemorySize64(self) -> System.Int64: ...
    @property
    def PeakWorkingSet(self) -> int: ...
    @property
    def PeakWorkingSet64(self) -> System.Int64: ...
    @property
    def PriorityBoostEnabled(self) -> bool: ...
    @property
    def PriorityClass(self) -> ProcessPriorityClass: ...
    @property
    def PrivateMemorySize(self) -> int: ...
    @property
    def PrivateMemorySize64(self) -> System.Int64: ...
    @property
    def PrivilegedProcessorTime(self) -> System.TimeSpan: ...
    @property
    def ProcessName(self) -> str: ...
    @property
    def ProcessorAffinity(self) -> System.IntPtr: ...
    @property
    def Responding(self) -> bool: ...
    @property
    def SafeHandle(self) -> SafeHandles.SafeProcessHandle: ...
    @property
    def SessionId(self) -> int: ...
    @property
    def StandardError(self) -> IO.StreamReader: ...
    @property
    def StandardInput(self) -> IO.StreamWriter: ...
    @property
    def StandardOutput(self) -> IO.StreamReader: ...
    @property
    def StartInfo(self) -> ProcessStartInfo: ...
    @property
    def StartTime(self) -> System.DateTime: ...
    @property
    def SynchronizingObject(self) -> ComponentModel.ISynchronizeInvoke: ...
    @property
    def Threads(self) -> ProcessThreadCollection: ...
    @property
    def TotalProcessorTime(self) -> System.TimeSpan: ...
    @property
    def UserProcessorTime(self) -> System.TimeSpan: ...
    @property
    def VirtualMemorySize(self) -> int: ...
    @property
    def VirtualMemorySize64(self) -> System.Int64: ...
    @property
    def WorkingSet(self) -> int: ...
    @property
    def WorkingSet64(self) -> System.Int64: ...
    @overload
    @staticmethod
    def GetCurrentProcess() -> Process: ...
    @overload
    @staticmethod
    def GetProcessById(processId: int) -> Process: ...
    @overload
    @staticmethod
    def GetProcessById(processId: int, machineName: str) -> Process: ...
    @overload
    @staticmethod
    def GetProcesses() -> System.Array[Process]: ...
    @overload
    @staticmethod
    def GetProcesses(machineName: str) -> System.Array[Process]: ...
    @overload
    @staticmethod
    def GetProcessesByName(processName: str) -> System.Array[Process]: ...
    @overload
    @staticmethod
    def GetProcessesByName(processName: str, machineName: str) -> System.Array[Process]: ...
    @overload
    def Kill() -> None: ...
    @overload
    def Kill(self, entireProcessTree: bool) -> None: ...
    @overload
    @staticmethod
    def LeaveDebugMode() -> None: ...
    @overload
    def Refresh() -> None: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: System.Void): ...
    @MaxWorkingSet.setter
    def MaxWorkingSet(self, value: System.Void): ...
    @MinWorkingSet.setter
    def MinWorkingSet(self, value: System.Void): ...
    @PriorityBoostEnabled.setter
    def PriorityBoostEnabled(self, value: System.Void): ...
    @PriorityClass.setter
    def PriorityClass(self, value: System.Void): ...
    @ProcessorAffinity.setter
    def ProcessorAffinity(self, value: System.Void): ...
    @StartInfo.setter
    def StartInfo(self, value: System.Void): ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: System.Void): ...
    @overload
    def Start() -> bool: ...
    @overload
    @staticmethod
    def Start(fileName: str) -> Process: ...
    @overload
    @staticmethod
    def Start(startInfo: ProcessStartInfo) -> Process: ...
    @overload
    @staticmethod
    def Start(fileName: str, arguments: Generic.IEnumerable) -> Process: ...
    @overload
    @staticmethod
    def Start(fileName: str, arguments: str) -> Process: ...
    @overload
    @staticmethod
    def Start(fileName: str, userName: str, password: Security.SecureString, domain: str) -> Process: ...
    @overload
    @staticmethod
    def Start(fileName: str, arguments: str, userName: str, password: Security.SecureString, domain: str) -> Process: ...
    @overload
    def ToString() -> str: ...
    @overload
    def WaitForExit() -> None: ...
    @overload
    def WaitForExit(self, timeout: System.TimeSpan) -> bool: ...
    @overload
    def WaitForExit(self, milliseconds: int) -> bool: ...
    @overload
    def WaitForExitAsync(self, cancellationToken: Threading.CancellationToken) -> Tasks.Task: ...
    @overload
    def WaitForInputIdle() -> bool: ...
    @overload
    def WaitForInputIdle(self, milliseconds: int) -> bool: ...
    @overload
    def WaitForInputIdle(self, timeout: System.TimeSpan) -> bool: ...
    @property
    def OutputDataReceived(self): ...
    @property
    def ErrorDataReceived(self): ...
    @property
    def Exited(self): ...
    @property
    def Disposed(self): ...

class ProcessModule(ComponentModel.Component):
    """    """
    @property
    def BaseAddress(self) -> System.IntPtr: ...
    @property
    def EntryPointAddress(self) -> System.IntPtr: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileVersionInfo(self) -> FileVersionInfo: ...
    @property
    def ModuleMemorySize(self) -> int: ...
    @property
    def ModuleName(self) -> str: ...
    @overload
    def ToString() -> str: ...
    @property
    def Disposed(self): ...

class ProcessModuleCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self, processModules: System.Array[ProcessModule]): ...
    @overload
    def Contains(self, module: ProcessModule) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[ProcessModule], index: int) -> None: ...
    @property
    def Item(self) -> ProcessModule: ...
    @overload
    def IndexOf(self, module: ProcessModule) -> int: ...

class ProcessPriorityClass(enum.Enum):
    Normal = 32
    Idle = 64
    High = 128
    RealTime = 256
    BelowNormal = 16384
    AboveNormal = 32768

class ProcessStartInfo(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, fileName: str, arguments: str): ...
    @property
    def ArgumentList(self) -> ObjectModel.Collection: ...
    @property
    def Arguments(self) -> str: ...
    @property
    def CreateNoWindow(self) -> bool: ...
    @property
    def Domain(self) -> str: ...
    @property
    def Environment(self) -> Generic.IDictionary: ...
    @property
    def EnvironmentVariables(self) -> Specialized.StringDictionary: ...
    @property
    def ErrorDialog(self) -> bool: ...
    @property
    def ErrorDialogParentHandle(self) -> System.IntPtr: ...
    @property
    def FileName(self) -> str: ...
    @property
    def LoadUserProfile(self) -> bool: ...
    @property
    def Password(self) -> Security.SecureString: ...
    @property
    def PasswordInClearText(self) -> str: ...
    @property
    def RedirectStandardError(self) -> bool: ...
    @property
    def RedirectStandardInput(self) -> bool: ...
    @property
    def RedirectStandardOutput(self) -> bool: ...
    @property
    def StandardErrorEncoding(self) -> Text.Encoding: ...
    @property
    def StandardInputEncoding(self) -> Text.Encoding: ...
    @property
    def StandardOutputEncoding(self) -> Text.Encoding: ...
    @property
    def UserName(self) -> str: ...
    @property
    def UseShellExecute(self) -> bool: ...
    @property
    def Verb(self) -> str: ...
    @property
    def Verbs(self) -> System.System.Array[str]: ...
    @property
    def WindowStyle(self) -> ProcessWindowStyle: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @Arguments.setter
    def Arguments(self, value: System.Void): ...
    @CreateNoWindow.setter
    def CreateNoWindow(self, value: System.Void): ...
    @Domain.setter
    def Domain(self, value: System.Void): ...
    @ErrorDialog.setter
    def ErrorDialog(self, value: System.Void): ...
    @ErrorDialogParentHandle.setter
    def ErrorDialogParentHandle(self, value: System.Void): ...
    @FileName.setter
    def FileName(self, value: System.Void): ...
    @LoadUserProfile.setter
    def LoadUserProfile(self, value: System.Void): ...
    @Password.setter
    def Password(self, value: System.Void): ...
    @PasswordInClearText.setter
    def PasswordInClearText(self, value: System.Void): ...
    @RedirectStandardError.setter
    def RedirectStandardError(self, value: System.Void): ...
    @RedirectStandardInput.setter
    def RedirectStandardInput(self, value: System.Void): ...
    @RedirectStandardOutput.setter
    def RedirectStandardOutput(self, value: System.Void): ...
    @StandardErrorEncoding.setter
    def StandardErrorEncoding(self, value: System.Void): ...
    @StandardInputEncoding.setter
    def StandardInputEncoding(self, value: System.Void): ...
    @StandardOutputEncoding.setter
    def StandardOutputEncoding(self, value: System.Void): ...
    @UserName.setter
    def UserName(self, value: System.Void): ...
    @UseShellExecute.setter
    def UseShellExecute(self, value: System.Void): ...
    @Verb.setter
    def Verb(self, value: System.Void): ...
    @WindowStyle.setter
    def WindowStyle(self, value: System.Void): ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: System.Void): ...

class ProcessThread(ComponentModel.Component):
    """    """
    @property
    def BasePriority(self) -> int: ...
    @property
    def CurrentPriority(self) -> int: ...
    @property
    def Id(self) -> int: ...
    @property
    def PriorityBoostEnabled(self) -> bool: ...
    @property
    def PriorityLevel(self) -> ThreadPriorityLevel: ...
    @property
    def PrivilegedProcessorTime(self) -> System.TimeSpan: ...
    @property
    def StartAddress(self) -> System.IntPtr: ...
    @property
    def StartTime(self) -> System.DateTime: ...
    @property
    def ThreadState(self) -> ThreadState: ...
    @property
    def TotalProcessorTime(self) -> System.TimeSpan: ...
    @property
    def UserProcessorTime(self) -> System.TimeSpan: ...
    @property
    def WaitReason(self) -> ThreadWaitReason: ...
    @overload
    def ResetIdealProcessor() -> None: ...
    @IdealProcessor.setter
    def IdealProcessor(self, value: System.Void): ...
    @PriorityBoostEnabled.setter
    def PriorityBoostEnabled(self, value: System.Void): ...
    @PriorityLevel.setter
    def PriorityLevel(self, value: System.Void): ...
    @ProcessorAffinity.setter
    def ProcessorAffinity(self, value: System.Void): ...
    @property
    def Disposed(self): ...

class ProcessThreadCollection(Collections.ReadOnlyCollectionBase):
    """    """
    def __init__(self, processThreads: System.Array[ProcessThread]): ...
    @overload
    def Add(self, thread: ProcessThread) -> int: ...
    @overload
    def Contains(self, thread: ProcessThread) -> bool: ...
    @overload
    def CopyTo(self, array: System.Array[ProcessThread], index: int) -> None: ...
    @property
    def Item(self) -> ProcessThread: ...
    @overload
    def IndexOf(self, thread: ProcessThread) -> int: ...
    @overload
    def Insert(self, index: int, thread: ProcessThread) -> None: ...
    @overload
    def Remove(self, thread: ProcessThread) -> None: ...

class ProcessWindowStyle(enum.Enum):
    Normal = 0
    Hidden = 1
    Minimized = 2
    Maximized = 3

class ThreadPriorityLevel(enum.Enum):
    Normal = 0
    AboveNormal = 1
    Highest = 2
    TimeCritical = 15
    Idle = -15
    Lowest = -2
    BelowNormal = -1

class ThreadState(enum.Enum):
    Initialized = 0
    Ready = 1
    Running = 2
    Standby = 3
    Terminated = 4
    Wait = 5
    Transition = 6
    Unknown = 7

class ThreadWaitReason(enum.Enum):
    Executive = 0
    FreePage = 1
    PageIn = 2
    SystemAllocation = 3
    ExecutionDelay = 4
    Suspended = 5
    UserRequest = 6
    EventPairHigh = 7
    EventPairLow = 8
    LpcReceive = 9
    LpcReply = 10
    VirtualMemory = 11
    PageOut = 12
    Unknown = 13

class MonitoringDescriptionAttribute(ComponentModel.DescriptionAttribute):
    """    """
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...

# endregion

# region: System.Configuration.ConfigurationManager, Version=7.0.0.0

class TraceConfiguration(object):
    """    """
    @overload
    @staticmethod
    def Register() -> None: ...

# endregion

# region: System.Diagnostics.FileVersionInfo, Version=7.0.0.0

class FileVersionInfo(object):
    """    """
    @property
    def Comments(self) -> str: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def FileBuildPart(self) -> int: ...
    @property
    def FileDescription(self) -> str: ...
    @property
    def FileMajorPart(self) -> int: ...
    @property
    def FileMinorPart(self) -> int: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FilePrivatePart(self) -> int: ...
    @property
    def FileVersion(self) -> str: ...
    @property
    def InternalName(self) -> str: ...
    @property
    def IsDebug(self) -> bool: ...
    @property
    def IsPatched(self) -> bool: ...
    @property
    def IsPreRelease(self) -> bool: ...
    @property
    def IsPrivateBuild(self) -> bool: ...
    @property
    def IsSpecialBuild(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def LegalCopyright(self) -> str: ...
    @property
    def LegalTrademarks(self) -> str: ...
    @property
    def OriginalFilename(self) -> str: ...
    @property
    def PrivateBuild(self) -> str: ...
    @property
    def ProductBuildPart(self) -> int: ...
    @property
    def ProductMajorPart(self) -> int: ...
    @property
    def ProductMinorPart(self) -> int: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductPrivatePart(self) -> int: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def SpecialBuild(self) -> str: ...
    @overload
    @staticmethod
    def GetVersionInfo(fileName: str) -> FileVersionInfo: ...
    @overload
    def ToString() -> str: ...

# endregion

# region: System.Diagnostics.DiagnosticSource, Version=7.0.0.0

class ActivityChangedEventArgs(System.ValueType):
    """    """
    @property
    def Current(self) -> Activity: ...
    @property
    def Previous(self) -> Activity: ...
    @Current.setter
    def Current(self, value: System.Void): ...
    @Previous.setter
    def Previous(self, value: System.Void): ...

class Activity(object):
    """    """
    def __init__(self, operationName: str): ...
    @overload
    def AddBaggage(self, key: str, value: str) -> Activity: ...
    @overload
    def AddEvent(self, e: ActivityEvent) -> Activity: ...
    @overload
    def AddTag(self, key: str, value: str) -> Activity: ...
    @overload
    def AddTag(self, key: str, value: object) -> Activity: ...
    @overload
    def Dispose() -> None: ...
    @overload
    def EnumerateEvents() -> Enumerator: ...
    @overload
    def EnumerateLinks() -> Enumerator: ...
    @overload
    def EnumerateTagObjects() -> Enumerator: ...
    @property
    def ActivityTraceFlags(self) -> ActivityTraceFlags: ...
    @property
    def Baggage(self) -> Generic.IEnumerable: ...
    @property
    def Context(self) -> ActivityContext: ...
    @property
    def Current(self) -> Activity: ...
    @property
    def DefaultIdFormat(self) -> ActivityIdFormat: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Duration(self) -> System.TimeSpan: ...
    @property
    def Events(self) -> Generic.IEnumerable: ...
    @property
    def ForceDefaultIdFormat(self) -> bool: ...
    @property
    def HasRemoteParent(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def IdFormat(self) -> ActivityIdFormat: ...
    @property
    def IsAllDataRequested(self) -> bool: ...
    @property
    def IsStopped(self) -> bool: ...
    @property
    def Kind(self) -> ActivityKind: ...
    @property
    def Links(self) -> Generic.IEnumerable: ...
    @property
    def OperationName(self) -> str: ...
    @property
    def Parent(self) -> Activity: ...
    @property
    def ParentId(self) -> str: ...
    @property
    def ParentSpanId(self) -> ActivitySpanId: ...
    @property
    def Recorded(self) -> bool: ...
    @property
    def RootId(self) -> str: ...
    @property
    def Source(self) -> ActivitySource: ...
    @property
    def SpanId(self) -> ActivitySpanId: ...
    @property
    def StartTimeUtc(self) -> System.DateTime: ...
    @property
    def Status(self) -> ActivityStatusCode: ...
    @property
    def StatusDescription(self) -> str: ...
    @property
    def TagObjects(self) -> Generic.IEnumerable: ...
    @property
    def Tags(self) -> Generic.IEnumerable: ...
    @property
    def TraceId(self) -> ActivityTraceId: ...
    @property
    def TraceIdGenerator(self) -> System.Func: ...
    @property
    def TraceStateString(self) -> str: ...
    @overload
    def GetBaggageItem(self, key: str) -> str: ...
    @overload
    def GetCustomProperty(self, propertyName: str) -> object: ...
    @overload
    def GetTagItem(self, key: str) -> object: ...
    @ActivityTraceFlags.setter
    def ActivityTraceFlags(self, value: System.Void): ...
    @Current.setter
    def Current(self, value: System.Void): ...
    @DefaultIdFormat.setter
    def DefaultIdFormat(self, value: System.Void): ...
    @DisplayName.setter
    def DisplayName(self, value: System.Void): ...
    @ForceDefaultIdFormat.setter
    def ForceDefaultIdFormat(self, value: System.Void): ...
    @IsAllDataRequested.setter
    def IsAllDataRequested(self, value: System.Void): ...
    @TraceIdGenerator.setter
    def TraceIdGenerator(self, value: System.Void): ...
    @TraceStateString.setter
    def TraceStateString(self, value: System.Void): ...
    @overload
    def SetBaggage(self, key: str, value: str) -> Activity: ...
    @overload
    def SetCustomProperty(self, propertyName: str, propertyValue: object) -> None: ...
    @overload
    def SetEndTime(self, endTimeUtc: System.DateTime) -> Activity: ...
    @overload
    def SetIdFormat(self, format_: ActivityIdFormat) -> Activity: ...
    @overload
    def SetParentId(self, parentId: str) -> Activity: ...
    @overload
    def SetParentId(self, traceId: ActivityTraceId, spanId: ActivitySpanId, activityTraceFlags: ActivityTraceFlags) -> Activity: ...
    @overload
    def SetStartTime(self, startTimeUtc: System.DateTime) -> Activity: ...
    @overload
    def SetStatus(self, code: ActivityStatusCode, description: str) -> Activity: ...
    @overload
    def SetTag(self, key: str, value: object) -> Activity: ...
    @overload
    def Start() -> Activity: ...
    @overload
    def Stop() -> None: ...
    @property
    def CurrentChanged(self): ...

class Enumerator(System.ValueType):
    """    Enumerator[T]
    """
    @property
    def Current(self) -> T: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def MoveNext() -> bool: ...

class ActivityTraceFlags(enum.Enum):
    None_ = 0
    Recorded = 1

class ActivityIdFormat(enum.Enum):
    Unknown = 0
    Hierarchical = 1
    W3C = 2

class ActivityTraceId(System.ValueType):
    """    """
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    @staticmethod
    def CreateFromBytes(idData: System.ReadOnlySpan) -> ActivityTraceId: ...
    @overload
    @staticmethod
    def CreateFromString(idData: System.ReadOnlySpan) -> ActivityTraceId: ...
    @overload
    @staticmethod
    def CreateFromUtf8String(idData: System.ReadOnlySpan) -> ActivityTraceId: ...
    @overload
    @staticmethod
    def CreateRandom() -> ActivityTraceId: ...
    @overload
    def Equals(self, traceId: ActivityTraceId) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToHexString() -> str: ...
    @overload
    def ToString() -> str: ...

class ActivitySpanId(System.ValueType):
    """    """
    @overload
    def CopyTo(self, destination: System.Span) -> None: ...
    @overload
    @staticmethod
    def CreateFromBytes(idData: System.ReadOnlySpan) -> ActivitySpanId: ...
    @overload
    @staticmethod
    def CreateFromString(idData: System.ReadOnlySpan) -> ActivitySpanId: ...
    @overload
    @staticmethod
    def CreateFromUtf8String(idData: System.ReadOnlySpan) -> ActivitySpanId: ...
    @overload
    @staticmethod
    def CreateRandom() -> ActivitySpanId: ...
    @overload
    def Equals(self, spanId: ActivitySpanId) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    def ToHexString() -> str: ...
    @overload
    def ToString() -> str: ...

class ActivityStatusCode(enum.Enum):
    Unset = 0
    Ok = 1
    Error = 2

class ActivityTagsCollection(object):
    """    """
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, list_: Generic.IEnumerable): ...
    @overload
    def Add(self, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: str, value: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, array: Generic.System.Array[Generic.KeyValuePair], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> object: ...
    @property
    def Keys(self) -> Generic.ICollection: ...
    @property
    def Values(self) -> Generic.ICollection: ...
    @overload
    def GetEnumerator() -> Enumerator: ...
    @overload
    def Remove(self, key: str) -> bool: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @Item.setter
    def Item(self, value: System.Void): ...
    @overload
    def TryGetValue(self, key: str) -> (bool, object): ...

class Enumerator(System.ValueType):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Generic.KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...

class ActivityContext(System.ValueType):
    """    """
    def __init__(self, traceId: ActivityTraceId, spanId: ActivitySpanId, traceFlags: ActivityTraceFlags, traceState: str, isRemote: bool): ...
    @overload
    def Equals(self, value: ActivityContext) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsRemote(self) -> bool: ...
    @property
    def SpanId(self) -> ActivitySpanId: ...
    @property
    def TraceFlags(self) -> ActivityTraceFlags: ...
    @property
    def TraceId(self) -> ActivityTraceId: ...
    @property
    def TraceState(self) -> str: ...
    @overload
    def GetHashCode() -> int: ...
    @overload
    @staticmethod
    def Parse(traceParent: str, traceState: str) -> ActivityContext: ...
    @overload
    @staticmethod
    def TryParse(traceParent: str, traceState: str) -> (bool, ActivityContext): ...
    @overload
    @staticmethod
    def TryParse(traceParent: str, traceState: str, isRemote: bool) -> (bool, ActivityContext): ...

class ActivityCreationOptions(System.ValueType):
    """    ActivityCreationOptions[T]
    """
    @property
    def Kind(self) -> ActivityKind: ...
    @property
    def Links(self) -> Generic.IEnumerable: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> T: ...
    @property
    def SamplingTags(self) -> ActivityTagsCollection: ...
    @property
    def Source(self) -> ActivitySource: ...
    @property
    def Tags(self) -> Generic.IEnumerable: ...
    @property
    def TraceId(self) -> ActivityTraceId: ...
    @property
    def TraceState(self) -> str: ...
    @TraceState.setter
    def TraceState(self, value: System.Void): ...

class ActivitySamplingResult(enum.Enum):
    None_ = 0
    PropagationData = 1
    AllData = 2
    AllDataAndRecorded = 3

class ActivityEvent(System.ValueType):
    """    """
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, timestamp: System.DateTimeOffset, tags: ActivityTagsCollection): ...
    @overload
    def EnumerateTagObjects() -> Enumerator: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tags(self) -> Generic.IEnumerable: ...
    @property
    def Timestamp(self) -> System.DateTimeOffset: ...

class ActivityKind(enum.Enum):
    Internal = 0
    Server = 1
    Client = 2
    Producer = 3
    Consumer = 4

class ActivityLink(System.ValueType):
    """    """
    def __init__(self, context: ActivityContext, tags: ActivityTagsCollection): ...
    @overload
    def EnumerateTagObjects() -> Enumerator: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, value: ActivityLink) -> bool: ...
    @property
    def Context(self) -> ActivityContext: ...
    @property
    def Tags(self) -> Generic.IEnumerable: ...
    @overload
    def GetHashCode() -> int: ...

class SampleActivity(System.MulticastDelegate):
    """    SampleActivity[T]
    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, ActivityCreationOptions): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (ActivitySamplingResult, ActivityCreationOptions): ...
    @overload
    def Invoke() -> (ActivitySamplingResult, ActivityCreationOptions): ...

class ActivityListener(object):
    """    """
    def __init__(self): ...
    @overload
    def Dispose() -> None: ...
    @property
    def ActivityStarted(self) -> System.Action: ...
    @property
    def ActivityStopped(self) -> System.Action: ...
    @property
    def Sample(self) -> SampleActivity: ...
    @property
    def SampleUsingParentId(self) -> SampleActivity: ...
    @property
    def ShouldListenTo(self) -> System.Func: ...
    @ActivityStarted.setter
    def ActivityStarted(self, value: System.Void): ...
    @ActivityStopped.setter
    def ActivityStopped(self, value: System.Void): ...
    @Sample.setter
    def Sample(self, value: System.Void): ...
    @SampleUsingParentId.setter
    def SampleUsingParentId(self, value: System.Void): ...
    @ShouldListenTo.setter
    def ShouldListenTo(self, value: System.Void): ...

class ActivitySource(object):
    """    """
    def __init__(self, name: str, version: str): ...
    @overload
    @staticmethod
    def AddActivityListener(listener: ActivityListener) -> None: ...
    @overload
    def CreateActivity(self, name: str, kind: ActivityKind) -> Activity: ...
    @overload
    def CreateActivity(self, name: str, kind: ActivityKind, parentContext: ActivityContext, tags: Generic.IEnumerable, links: Generic.IEnumerable, idFormat: ActivityIdFormat) -> Activity: ...
    @overload
    def CreateActivity(self, name: str, kind: ActivityKind, parentId: str, tags: Generic.IEnumerable, links: Generic.IEnumerable, idFormat: ActivityIdFormat) -> Activity: ...
    @overload
    def Dispose() -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @overload
    def HasListeners() -> bool: ...
    @overload
    def StartActivity(self, name: str, kind: ActivityKind) -> Activity: ...
    @overload
    def StartActivity(self, name: str, kind: ActivityKind, parentContext: ActivityContext, tags: Generic.IEnumerable, links: Generic.IEnumerable, startTime: System.DateTimeOffset) -> Activity: ...
    @overload
    def StartActivity(self, name: str, kind: ActivityKind, parentId: str, tags: Generic.IEnumerable, links: Generic.IEnumerable, startTime: System.DateTimeOffset) -> Activity: ...
    @overload
    def StartActivity(self, kind: ActivityKind, parentContext: ActivityContext, tags: Generic.IEnumerable, links: Generic.IEnumerable, startTime: System.DateTimeOffset, name: str) -> Activity: ...

class DiagnosticSource(object):
    """    """
    @overload
    def IsEnabled(self, name: str) -> bool: ...
    @overload
    def IsEnabled(self, name: str, arg1: object, arg2: object) -> bool: ...
    @overload
    def OnActivityExport(self, activity: Activity, payload: object) -> None: ...
    @overload
    def OnActivityImport(self, activity: Activity, payload: object) -> None: ...
    @overload
    def StartActivity(self, activity: Activity, args: object) -> Activity: ...
    @overload
    def StopActivity(self, activity: Activity, args: object) -> None: ...
    @overload
    def Write(self, name: str, value: object) -> None: ...

class DiagnosticListener(DiagnosticSource):
    """    """
    def __init__(self, name: str): ...
    @overload
    def Dispose() -> None: ...
    @property
    def AllListeners(self) -> System.IObservable: ...
    @property
    def Name(self) -> str: ...
    @overload
    def IsEnabled() -> bool: ...
    @overload
    def IsEnabled(self, name: str) -> bool: ...
    @overload
    def IsEnabled(self, name: str, arg1: object, arg2: object) -> bool: ...
    @overload
    def OnActivityExport(self, activity: Activity, payload: object) -> None: ...
    @overload
    def OnActivityImport(self, activity: Activity, payload: object) -> None: ...
    @overload
    def Subscribe(self, observer: System.IObserver) -> System.IDisposable: ...
    @overload
    def Subscribe(self, observer: System.IObserver, isEnabled: System.Func) -> System.IDisposable: ...
    @overload
    def Subscribe(self, observer: System.IObserver, isEnabled: System.Predicate) -> System.IDisposable: ...
    @overload
    def Subscribe(self, observer: System.IObserver, isEnabled: System.Func, onActivityImport: System.Action, onActivityExport: System.Action) -> System.IDisposable: ...
    @overload
    def ToString() -> str: ...
    @overload
    def Write(self, name: str, value: object) -> None: ...

class DistributedContextPropagator(object):
    """    """
    @overload
    @staticmethod
    def CreateDefaultPropagator() -> DistributedContextPropagator: ...
    @overload
    @staticmethod
    def CreateNoOutputPropagator() -> DistributedContextPropagator: ...
    @overload
    @staticmethod
    def CreatePassThroughPropagator() -> DistributedContextPropagator: ...
    @overload
    def ExtractBaggage(self, carrier: object, getter: PropagatorGetterCallback) -> Generic.IEnumerable: ...
    @overload
    def ExtractTraceIdAndState(self, carrier: object, getter: PropagatorGetterCallback) -> (str, str): ...
    @property
    def Current(self) -> DistributedContextPropagator: ...
    @property
    def Fields(self) -> Generic.IReadOnlyCollection: ...
    @overload
    def Inject(self, activity: Activity, carrier: object, setter: PropagatorSetterCallback) -> None: ...
    @Current.setter
    def Current(self, value: System.Void): ...

class PropagatorGetterCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, carrier: object, fieldName: str, callback: System.AsyncCallback, object_: object) -> (System.IAsyncResult, str, Generic.IEnumerable): ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> (str, Generic.IEnumerable): ...
    @overload
    def Invoke(self, carrier: object, fieldName: str) -> (str, Generic.IEnumerable): ...

class PropagatorSetterCallback(System.MulticastDelegate):
    """    """
    def __init__(self, object_: object, method: System.IntPtr): ...
    @overload
    def BeginInvoke(self, carrier: object, fieldName: str, fieldValue: str, callback: System.AsyncCallback, object_: object) -> System.IAsyncResult: ...
    @overload
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    @overload
    def Invoke(self, carrier: object, fieldName: str, fieldValue: str) -> None: ...

class TagList(System.ValueType):
    """    """
    def __init__(self, tagList: System.ReadOnlySpan): ...
    @overload
    def Add(self, tag: Generic.KeyValuePair) -> None: ...
    @overload
    def Add(self, key: str, value: object) -> None: ...
    @overload
    def Clear() -> None: ...
    @overload
    def Contains(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def CopyTo(self, tags: System.Span) -> None: ...
    @overload
    def CopyTo(self, array: Generic.System.Array[Generic.KeyValuePair], arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Generic.KeyValuePair: ...
    @overload
    def GetEnumerator() -> Generic.IEnumerator: ...
    @overload
    def IndexOf(self, item: Generic.KeyValuePair) -> int: ...
    @overload
    def Insert(self, index: int, item: Generic.KeyValuePair) -> None: ...
    @overload
    def Remove(self, item: Generic.KeyValuePair) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, value: System.Void): ...

class Enumerator(System.ValueType):
    """    """
    @overload
    def Dispose() -> None: ...
    @property
    def Current(self) -> Generic.KeyValuePair: ...
    @overload
    def MoveNext() -> bool: ...
    @overload
    def Reset() -> None: ...

# endregion
